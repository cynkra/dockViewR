/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/dockview-core/dist/styles/dockview.css":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/dockview-core/dist/styles/dockview.css ***!
  \*******************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.dv-svg {
  display: inline-block;
  fill: currentcolor;
  line-height: 1;
  stroke: currentcolor;
  stroke-width: 0;
}
.dockview-theme-dark {
  --dv-paneview-active-outline-color: dodgerblue;
  --dv-tabs-and-actions-container-font-size: 13px;
  --dv-tabs-and-actions-container-height: 35px;
  --dv-drag-over-background-color: rgba(83, 89, 93, 0.5);
  --dv-drag-over-border-color: white;
  --dv-tabs-container-scrollbar-color: #888;
  --dv-icon-hover-background-color: rgba(90, 93, 94, 0.31);
  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(83, 89, 93, 0.5);
  --dv-overlay-z-index: 999;
  --dv-active-sash-transition-duration: 0.1s;
  --dv-active-sash-transition-delay: 0.5s;
  --dv-group-view-background-color: #1e1e1e;
  --dv-tabs-and-actions-container-background-color: #252526;
  --dv-activegroup-visiblepanel-tab-background-color: #1e1e1e;
  --dv-activegroup-hiddenpanel-tab-background-color: #2d2d2d;
  --dv-inactivegroup-visiblepanel-tab-background-color: #1e1e1e;
  --dv-inactivegroup-hiddenpanel-tab-background-color: #2d2d2d;
  --dv-tab-divider-color: #1e1e1e;
  --dv-activegroup-visiblepanel-tab-color: white;
  --dv-activegroup-hiddenpanel-tab-color: #969696;
  --dv-inactivegroup-visiblepanel-tab-color: #8f8f8f;
  --dv-inactivegroup-hiddenpanel-tab-color: #626262;
  --dv-separator-border: rgb(68, 68, 68);
  --dv-paneview-header-border-color: rgba(204, 204, 204, 0.2);
}

.dockview-theme-light {
  --dv-paneview-active-outline-color: dodgerblue;
  --dv-tabs-and-actions-container-font-size: 13px;
  --dv-tabs-and-actions-container-height: 35px;
  --dv-drag-over-background-color: rgba(83, 89, 93, 0.5);
  --dv-drag-over-border-color: white;
  --dv-tabs-container-scrollbar-color: #888;
  --dv-icon-hover-background-color: rgba(90, 93, 94, 0.31);
  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(83, 89, 93, 0.5);
  --dv-overlay-z-index: 999;
  --dv-active-sash-transition-duration: 0.1s;
  --dv-active-sash-transition-delay: 0.5s;
  --dv-group-view-background-color: white;
  --dv-tabs-and-actions-container-background-color: #f3f3f3;
  --dv-activegroup-visiblepanel-tab-background-color: white;
  --dv-activegroup-hiddenpanel-tab-background-color: #ececec;
  --dv-inactivegroup-visiblepanel-tab-background-color: white;
  --dv-inactivegroup-hiddenpanel-tab-background-color: #ececec;
  --dv-tab-divider-color: white;
  --dv-activegroup-visiblepanel-tab-color: rgb(51, 51, 51);
  --dv-activegroup-hiddenpanel-tab-color: rgba(51, 51, 51, 0.7);
  --dv-inactivegroup-visiblepanel-tab-color: rgba(51, 51, 51, 0.7);
  --dv-inactivegroup-hiddenpanel-tab-color: rgba(51, 51, 51, 0.35);
  --dv-separator-border: rgba(128, 128, 128, 0.35);
  --dv-paneview-header-border-color: rgb(51, 51, 51);
}

.dockview-theme-vs {
  --dv-paneview-active-outline-color: dodgerblue;
  --dv-tabs-and-actions-container-font-size: 13px;
  --dv-tabs-and-actions-container-height: 35px;
  --dv-drag-over-background-color: rgba(83, 89, 93, 0.5);
  --dv-drag-over-border-color: white;
  --dv-tabs-container-scrollbar-color: #888;
  --dv-icon-hover-background-color: rgba(90, 93, 94, 0.31);
  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(83, 89, 93, 0.5);
  --dv-overlay-z-index: 999;
  --dv-active-sash-transition-duration: 0.1s;
  --dv-active-sash-transition-delay: 0.5s;
  --dv-group-view-background-color: #1e1e1e;
  --dv-tabs-and-actions-container-background-color: #252526;
  --dv-activegroup-visiblepanel-tab-background-color: #1e1e1e;
  --dv-activegroup-hiddenpanel-tab-background-color: #2d2d2d;
  --dv-inactivegroup-visiblepanel-tab-background-color: #1e1e1e;
  --dv-inactivegroup-hiddenpanel-tab-background-color: #2d2d2d;
  --dv-tab-divider-color: #1e1e1e;
  --dv-activegroup-visiblepanel-tab-color: white;
  --dv-activegroup-hiddenpanel-tab-color: #969696;
  --dv-inactivegroup-visiblepanel-tab-color: #8f8f8f;
  --dv-inactivegroup-hiddenpanel-tab-color: #626262;
  --dv-separator-border: rgb(68, 68, 68);
  --dv-paneview-header-border-color: rgba(204, 204, 204, 0.2);
  --dv-tabs-and-actions-container-background-color: #2d2d30;
  --dv-tabs-and-actions-container-height: 20px;
  --dv-tabs-and-actions-container-font-size: 11px;
  --dv-activegroup-visiblepanel-tab-background-color: #007acc;
  --dv-inactivegroup-visiblepanel-tab-background-color: #3f3f46;
  --dv-activegroup-visiblepanel-tab-color: white;
  --dv-activegroup-hiddenpanel-tab-color: white;
  --dv-inactivegroup-visiblepanel-tab-color: white;
  --dv-inactivegroup-hiddenpanel-tab-color: white;
}
.dockview-theme-vs .dv-groupview.dv-active-group > .dv-tabs-and-actions-container {
  box-sizing: content-box;
  border-bottom: 2px solid var(--dv-activegroup-visiblepanel-tab-background-color);
}
.dockview-theme-vs .dv-groupview.dv-active-group > .dv-tabs-and-actions-container .dv-tab.dv-active-tab {
  border-top: 2px solid var(--dv-activegroup-visiblepanel-tab-background-color);
}
.dockview-theme-vs .dv-groupview.dv-active-group > .dv-tabs-and-actions-container .dv-tab.dv-inactive-tab {
  border-top: 2px solid var(--dv-activegroup-hiddenpanel-tab-background-color);
}
.dockview-theme-vs .dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container {
  box-sizing: content-box;
  border-bottom: 2px solid var(--dv-inactivegroup-visiblepanel-tab-background-color);
}
.dockview-theme-vs .dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container .dv-tab.dv-active-tab {
  border-top: 2px solid var(--dv-inactivegroup-visiblepanel-tab-background-color);
}
.dockview-theme-vs .dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container .dv-tab.dv-inactive-tab {
  border-top: 2px solid var(--dv-inactivegroup-hiddenpanel-tab-background-color);
}

.dockview-theme-abyss {
  --dv-paneview-active-outline-color: dodgerblue;
  --dv-tabs-and-actions-container-font-size: 13px;
  --dv-tabs-and-actions-container-height: 35px;
  --dv-drag-over-background-color: rgba(83, 89, 93, 0.5);
  --dv-drag-over-border-color: white;
  --dv-tabs-container-scrollbar-color: #888;
  --dv-icon-hover-background-color: rgba(90, 93, 94, 0.31);
  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(83, 89, 93, 0.5);
  --dv-overlay-z-index: 999;
  --dv-active-sash-transition-duration: 0.1s;
  --dv-active-sash-transition-delay: 0.5s;
  --dv-group-view-background-color: #000c18;
  --dv-tabs-and-actions-container-background-color: #1c1c2a;
  --dv-activegroup-visiblepanel-tab-background-color: #000c18;
  --dv-activegroup-hiddenpanel-tab-background-color: #10192c;
  --dv-inactivegroup-visiblepanel-tab-background-color: #000c18;
  --dv-inactivegroup-hiddenpanel-tab-background-color: #10192c;
  --dv-tab-divider-color: #2b2b4a;
  --dv-activegroup-visiblepanel-tab-color: white;
  --dv-activegroup-hiddenpanel-tab-color: rgba(255, 255, 255, 0.5);
  --dv-inactivegroup-visiblepanel-tab-color: rgba(255, 255, 255, 0.5);
  --dv-inactivegroup-hiddenpanel-tab-color: rgba(255, 255, 255, 0.25);
  --dv-separator-border: #2b2b4a;
  --dv-paneview-header-border-color: #2b2b4a;
  --dv-paneview-active-outline-color: #596f99;
}

.dockview-theme-dracula {
  --dv-paneview-active-outline-color: dodgerblue;
  --dv-tabs-and-actions-container-font-size: 13px;
  --dv-tabs-and-actions-container-height: 35px;
  --dv-drag-over-background-color: rgba(83, 89, 93, 0.5);
  --dv-drag-over-border-color: white;
  --dv-tabs-container-scrollbar-color: #888;
  --dv-icon-hover-background-color: rgba(90, 93, 94, 0.31);
  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(83, 89, 93, 0.5);
  --dv-overlay-z-index: 999;
  --dv-active-sash-transition-duration: 0.1s;
  --dv-active-sash-transition-delay: 0.5s;
  --dv-group-view-background-color: #282a36;
  --dv-tabs-and-actions-container-background-color: #191a21;
  --dv-activegroup-visiblepanel-tab-background-color: #282a36;
  --dv-activegroup-hiddenpanel-tab-background-color: #21222c;
  --dv-inactivegroup-visiblepanel-tab-background-color: #282a36;
  --dv-inactivegroup-hiddenpanel-tab-background-color: #21222c;
  --dv-tab-divider-color: #191a21;
  --dv-activegroup-visiblepanel-tab-color: rgb(248, 248, 242);
  --dv-activegroup-hiddenpanel-tab-color: rgb(98, 114, 164);
  --dv-inactivegroup-visiblepanel-tab-color: rgba(248, 248, 242, 0.5);
  --dv-inactivegroup-hiddenpanel-tab-color: rgba(98, 114, 164, 0.5);
  --dv-separator-border: #bd93f9;
  --dv-paneview-header-border-color: #bd93f9;
  --dv-paneview-active-outline-color: #6272a4;
}
.dockview-theme-dracula .dv-groupview.dv-active-group > .dv-tabs-and-actions-container > .dv-tabs-container > .dv-tab.dv-active-tab {
  position: relative;
}
.dockview-theme-dracula .dv-groupview.dv-active-group > .dv-tabs-and-actions-container > .dv-tabs-container > .dv-tab.dv-active-tab::after {
  position: absolute;
  left: 0px;
  top: 0px;
  content: "";
  width: 100%;
  height: 1px;
  background-color: #94527e;
  z-index: 999;
}
.dockview-theme-dracula .dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container > .dv-tabs-container > .dv-tab.dv-active-tab {
  position: relative;
}
.dockview-theme-dracula .dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container > .dv-tabs-container > .dv-tab.dv-active-tab::after {
  position: absolute;
  left: 0px;
  bottom: 0px;
  content: "";
  width: 100%;
  height: 1px;
  background-color: #5e3d5a;
  z-index: 999;
}

.dockview-theme-replit {
  --dv-paneview-active-outline-color: dodgerblue;
  --dv-tabs-and-actions-container-font-size: 13px;
  --dv-tabs-and-actions-container-height: 35px;
  --dv-drag-over-background-color: rgba(83, 89, 93, 0.5);
  --dv-drag-over-border-color: white;
  --dv-tabs-container-scrollbar-color: #888;
  --dv-icon-hover-background-color: rgba(90, 93, 94, 0.31);
  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(83, 89, 93, 0.5);
  --dv-overlay-z-index: 999;
  --dv-active-sash-transition-duration: 0.1s;
  --dv-active-sash-transition-delay: 0.5s;
  --dv-group-view-background-color: #ebeced;
  --dv-tabs-and-actions-container-background-color: #fcfcfc;
  --dv-activegroup-visiblepanel-tab-background-color: #f0f1f2;
  --dv-activegroup-hiddenpanel-tab-background-color: #fcfcfc;
  --dv-inactivegroup-visiblepanel-tab-background-color: #f0f1f2;
  --dv-inactivegroup-hiddenpanel-tab-background-color: #fcfcfc;
  --dv-tab-divider-color: transparent;
  --dv-activegroup-visiblepanel-tab-color: rgb(51, 51, 51);
  --dv-activegroup-hiddenpanel-tab-color: rgb(51, 51, 51);
  --dv-inactivegroup-visiblepanel-tab-color: rgb(51, 51, 51);
  --dv-inactivegroup-hiddenpanel-tab-color: rgb(51, 51, 51);
  --dv-separator-border: transparent;
  --dv-paneview-header-border-color: rgb(51, 51, 51);
  --dv-separator-handle-background-color: #cfd1d3;
  --dv-separator-handle-hover-background-color: #babbbb;
}
.dockview-theme-replit .dv-resize-container:has(> .dv-groupview) {
  border-radius: 8px;
}
.dockview-theme-replit .dv-groupview {
  overflow: hidden;
  border-radius: 10px;
}
.dockview-theme-replit .dv-groupview .dv-tabs-and-actions-container {
  border-bottom: 1px solid rgba(128, 128, 128, 0.35);
}
.dockview-theme-replit .dv-groupview .dv-tabs-and-actions-container .dv-tab {
  margin: 4px;
  border-radius: 8px;
}
.dockview-theme-replit .dv-groupview .dv-tabs-and-actions-container .dv-tab .dv-svg {
  height: 8px;
  width: 8px;
}
.dockview-theme-replit .dv-groupview .dv-tabs-and-actions-container .dv-tab:hover {
  background-color: #e4e5e6 !important;
}
.dockview-theme-replit .dv-groupview .dv-content-container {
  background-color: #fcfcfc;
}
.dockview-theme-replit .dv-groupview.dv-active-group {
  border: 1px solid rgba(128, 128, 128, 0.35);
}
.dockview-theme-replit .dv-groupview.dv-inactive-group {
  border: 1px solid transparent;
}
.dockview-theme-replit .dv-vertical > .dv-sash-container > .dv-sash:not(.disabled)::after {
  content: "";
  height: 4px;
  width: 40px;
  border-radius: 2px;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background-color: var(--dv-separator-handle-background-color);
  position: absolute;
}
.dockview-theme-replit .dv-vertical > .dv-sash-container > .dv-sash:not(.disabled):hover::after {
  background-color: var(--dv-separator-handle-hover-background-color);
}
.dockview-theme-replit .dv-horizontal > .dv-sash-container > .dv-sash:not(.disabled)::after {
  content: "";
  height: 40px;
  width: 4px;
  border-radius: 2px;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background-color: var(--dv-separator-handle-background-color);
  position: absolute;
}
.dockview-theme-replit .dv-horizontal > .dv-sash-container > .dv-sash:not(.disabled):hover::after {
  background-color: var(--dv-separator-handle-hover-background-color);
}
.dv-drop-target {
  position: relative;
}
.dv-drop-target > .dv-drop-target-dropzone {
  position: absolute;
  left: 0px;
  top: 0px;
  height: 100%;
  width: 100%;
  z-index: 1000;
  pointer-events: none;
}
.dv-drop-target > .dv-drop-target-dropzone > .dv-drop-target-selection {
  position: relative;
  box-sizing: border-box;
  height: 100%;
  width: 100%;
  background-color: var(--dv-drag-over-background-color);
  transition: top 70ms ease-out, left 70ms ease-out, width 70ms ease-out, height 70ms ease-out, opacity 0.15s ease-out;
  will-change: transform;
  pointer-events: none;
}
.dv-drop-target > .dv-drop-target-dropzone > .dv-drop-target-selection.dv-drop-target-top.dv-drop-target-small-vertical {
  border-top: 1px solid var(--dv-drag-over-border-color);
}
.dv-drop-target > .dv-drop-target-dropzone > .dv-drop-target-selection.dv-drop-target-bottom.dv-drop-target-small-vertical {
  border-bottom: 1px solid var(--dv-drag-over-border-color);
}
.dv-drop-target > .dv-drop-target-dropzone > .dv-drop-target-selection.dv-drop-target-left.dv-drop-target-small-horizontal {
  border-left: 1px solid var(--dv-drag-over-border-color);
}
.dv-drop-target > .dv-drop-target-dropzone > .dv-drop-target-selection.dv-drop-target-right.dv-drop-target-small-horizontal {
  border-right: 1px solid var(--dv-drag-over-border-color);
}
.dv-dockview {
  position: relative;
  background-color: var(--dv-group-view-background-color);
}
.dv-dockview .dv-watermark-container {
  position: absolute;
  top: 0px;
  left: 0px;
  height: 100%;
  width: 100%;
  z-index: 1;
}
.dv-dockview .dv-overlay-render-container {
  position: relative;
}

.dv-groupview.dv-active-group > .dv-tabs-and-actions-container > .dv-tabs-container > .dv-tab.dv-active-tab {
  background-color: var(--dv-activegroup-visiblepanel-tab-background-color);
  color: var(--dv-activegroup-visiblepanel-tab-color);
}
.dv-groupview.dv-active-group > .dv-tabs-and-actions-container > .dv-tabs-container > .dv-tab.dv-inactive-tab {
  background-color: var(--dv-activegroup-hiddenpanel-tab-background-color);
  color: var(--dv-activegroup-hiddenpanel-tab-color);
}
.dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container > .dv-tabs-container > .dv-tab.dv-active-tab {
  background-color: var(--dv-inactivegroup-visiblepanel-tab-background-color);
  color: var(--dv-inactivegroup-visiblepanel-tab-color);
}
.dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container > .dv-tabs-container > .dv-tab.dv-inactive-tab {
  background-color: var(--dv-inactivegroup-hiddenpanel-tab-background-color);
  color: var(--dv-inactivegroup-hiddenpanel-tab-color);
}

/**
 * when a tab is dragged we lose the above stylings because they are conditional on parent elements
 * therefore we also set some stylings for the dragging event
 **/
.dv-tab.dv-tab-dragging {
  background-color: var(--dv-activegroup-visiblepanel-tab-background-color);
  color: var(--dv-activegroup-visiblepanel-tab-color);
}
.dv-groupview {
  display: flex;
  flex-direction: column;
  height: 100%;
  background-color: var(--dv-group-view-background-color);
  overflow: hidden;
}
.dv-groupview:focus {
  outline: none;
}
.dv-groupview > .dv-content-container {
  flex-grow: 1;
  min-height: 0;
  outline: none;
}
.dv-root-wrapper {
  height: 100%;
  width: 100%;
}
.dv-grid-view,
.dv-branch-node {
  height: 100%;
  width: 100%;
}
.dv-debug .dv-resize-container .dv-resize-handle-top {
  background-color: red;
}
.dv-debug .dv-resize-container .dv-resize-handle-bottom {
  background-color: green;
}
.dv-debug .dv-resize-container .dv-resize-handle-left {
  background-color: yellow;
}
.dv-debug .dv-resize-container .dv-resize-handle-right {
  background-color: blue;
}
.dv-debug .dv-resize-container .dv-resize-handle-topleft,
.dv-debug .dv-resize-container .dv-resize-handle-topright,
.dv-debug .dv-resize-container .dv-resize-handle-bottomleft,
.dv-debug .dv-resize-container .dv-resize-handle-bottomright {
  background-color: cyan;
}

.dv-resize-container {
  --dv-overlay-z-index: var(--dv-overlay-z-index, 999);
  position: absolute;
  z-index: calc(var(--dv-overlay-z-index) - 2);
  border: 1px solid var(--dv-tab-divider-color);
  box-shadow: var(--dv-floating-box-shadow);
}
.dv-resize-container.dv-hidden {
  display: none;
}
.dv-resize-container.dv-resize-container-dragging {
  opacity: 0.5;
}
.dv-resize-container .dv-resize-handle-top {
  height: 4px;
  width: calc(100% - 8px);
  left: 4px;
  top: -2px;
  z-index: var(--dv-overlay-z-index);
  position: absolute;
  cursor: ns-resize;
}
.dv-resize-container .dv-resize-handle-bottom {
  height: 4px;
  width: calc(100% - 8px);
  left: 4px;
  bottom: -2px;
  z-index: var(--dv-overlay-z-index);
  position: absolute;
  cursor: ns-resize;
}
.dv-resize-container .dv-resize-handle-left {
  height: calc(100% - 8px);
  width: 4px;
  left: -2px;
  top: 4px;
  z-index: var(--dv-overlay-z-index);
  position: absolute;
  cursor: ew-resize;
}
.dv-resize-container .dv-resize-handle-right {
  height: calc(100% - 8px);
  width: 4px;
  right: -2px;
  top: 4px;
  z-index: var(--dv-overlay-z-index);
  position: absolute;
  cursor: ew-resize;
}
.dv-resize-container .dv-resize-handle-topleft {
  height: 4px;
  width: 4px;
  top: -2px;
  left: -2px;
  z-index: var(--dv-overlay-z-index);
  position: absolute;
  cursor: nw-resize;
}
.dv-resize-container .dv-resize-handle-topright {
  height: 4px;
  width: 4px;
  right: -2px;
  top: -2px;
  z-index: var(--dv-overlay-z-index);
  position: absolute;
  cursor: ne-resize;
}
.dv-resize-container .dv-resize-handle-bottomleft {
  height: 4px;
  width: 4px;
  left: -2px;
  bottom: -2px;
  z-index: var(--dv-overlay-z-index);
  position: absolute;
  cursor: sw-resize;
}
.dv-resize-container .dv-resize-handle-bottomright {
  height: 4px;
  width: 4px;
  right: -2px;
  bottom: -2px;
  z-index: var(--dv-overlay-z-index);
  position: absolute;
  cursor: se-resize;
}
.dv-render-overlay {
  --dv-overlay-z-index: var(--dv-overlay-z-index, 999);
  position: absolute;
  z-index: 1;
  height: 100%;
}
.dv-render-overlay.dv-render-overlay-float {
  z-index: calc(var(--dv-overlay-z-index) - 1);
}

.dv-debug .dv-render-overlay {
  outline: 1px solid red;
  outline-offset: -1;
}
.dv-pane-container {
  height: 100%;
  width: 100%;
}
.dv-pane-container.dv-animated .dv-view {
  transition-duration: 0.15s;
  transition-timing-function: ease-out;
}
.dv-pane-container .dv-view {
  overflow: hidden;
  display: flex;
  flex-direction: column;
  padding: 0px !important;
}
.dv-pane-container .dv-view:not(:first-child)::before {
  background-color: transparent !important;
}
.dv-pane-container .dv-view:not(:first-child) .dv-pane > .dv-pane-header {
  border-top: 1px solid var(--dv-paneview-header-border-color);
}
.dv-pane-container .dv-view .dv-default-header {
  background-color: var(--dv-group-view-background-color);
  color: var(--dv-activegroup-visiblepanel-tab-color);
  display: flex;
  padding: 0px 8px;
  cursor: pointer;
}
.dv-pane-container .dv-view .dv-default-header .dv-pane-header-icon {
  display: flex;
  justify-content: center;
  align-items: center;
}
.dv-pane-container .dv-view .dv-default-header > span {
  padding-left: 8px;
  flex-grow: 1;
}
.dv-pane-container:first-of-type > .dv-pane > .dv-pane-header {
  border-top: none !important;
}
.dv-pane-container .dv-pane {
  display: flex;
  flex-direction: column;
  overflow: hidden;
  height: 100%;
}
.dv-pane-container .dv-pane .dv-pane-header {
  box-sizing: border-box;
  user-select: none;
  position: relative;
  outline: none;
}
.dv-pane-container .dv-pane .dv-pane-header.dv-pane-draggable {
  cursor: pointer;
}
.dv-pane-container .dv-pane .dv-pane-header:focus:before, .dv-pane-container .dv-pane .dv-pane-header:focus-within:before {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 5;
  content: "";
  pointer-events: none;
  outline: 1px solid;
  outline-width: -1px;
  outline-style: solid;
  outline-offset: -1px;
  outline-color: var(--dv-paneview-active-outline-color);
}
.dv-pane-container .dv-pane .dv-pane-body {
  overflow-y: auto;
  overflow-x: hidden;
  flex-grow: 1;
  position: relative;
  outline: none;
}
.dv-pane-container .dv-pane .dv-pane-body:focus:before, .dv-pane-container .dv-pane .dv-pane-body:focus-within:before {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 5;
  content: "";
  pointer-events: none;
  outline: 1px solid;
  outline-width: -1px;
  outline-style: solid;
  outline-offset: -1px;
  outline-color: var(--dv-paneview-active-outline-color);
}
.dv-debug .dv-split-view-container .dv-sash-container .dv-sash.dv-enabled {
  background-color: black;
}
.dv-debug .dv-split-view-container .dv-sash-container .dv-sash.dv-disabled {
  background-color: orange;
}
.dv-debug .dv-split-view-container .dv-sash-container .dv-sash.dv-maximum {
  background-color: green;
}
.dv-debug .dv-split-view-container .dv-sash-container .dv-sash.dv-minimum {
  background-color: red;
}

.dv-split-view-container {
  position: relative;
  overflow: hidden;
  height: 100%;
  width: 100%;
}
.dv-split-view-container.dv-splitview-disabled > .dv-sash-container > .dv-sash {
  pointer-events: none;
}
.dv-split-view-container.dv-animation .dv-view,
.dv-split-view-container.dv-animation .dv-sash {
  transition-duration: 0.15s;
  transition-timing-function: ease-out;
}
.dv-split-view-container.dv-horizontal {
  height: 100%;
}
.dv-split-view-container.dv-horizontal > .dv-sash-container > .dv-sash {
  height: 100%;
  width: 4px;
}
.dv-split-view-container.dv-horizontal > .dv-sash-container > .dv-sash.dv-enabled {
  cursor: ew-resize;
}
.dv-split-view-container.dv-horizontal > .dv-sash-container > .dv-sash.dv-disabled {
  cursor: default;
}
.dv-split-view-container.dv-horizontal > .dv-sash-container > .dv-sash.dv-maximum {
  cursor: w-resize;
}
.dv-split-view-container.dv-horizontal > .dv-sash-container > .dv-sash.dv-minimum {
  cursor: e-resize;
}
.dv-split-view-container.dv-horizontal > .dv-view-container > .dv-view:not(:first-child)::before {
  height: 100%;
  width: 1px;
}
.dv-split-view-container.dv-vertical {
  width: 100%;
}
.dv-split-view-container.dv-vertical > .dv-sash-container > .dv-sash {
  width: 100%;
  height: 4px;
}
.dv-split-view-container.dv-vertical > .dv-sash-container > .dv-sash.dv-enabled {
  cursor: ns-resize;
}
.dv-split-view-container.dv-vertical > .dv-sash-container > .dv-sash.dv-disabled {
  cursor: default;
}
.dv-split-view-container.dv-vertical > .dv-sash-container > .dv-sash.dv-maximum {
  cursor: n-resize;
}
.dv-split-view-container.dv-vertical > .dv-sash-container > .dv-sash.dv-minimum {
  cursor: s-resize;
}
.dv-split-view-container.dv-vertical > .dv-view-container > .dv-view {
  width: 100%;
}
.dv-split-view-container.dv-vertical > .dv-view-container > .dv-view:not(:first-child)::before {
  height: 1px;
  width: 100%;
}
.dv-split-view-container .dv-sash-container {
  height: 100%;
  width: 100%;
  position: absolute;
}
.dv-split-view-container .dv-sash-container .dv-sash {
  position: absolute;
  z-index: 99;
  outline: none;
  user-select: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  touch-action: none;
}
.dv-split-view-container .dv-sash-container .dv-sash:not(.disabled):active, .dv-split-view-container .dv-sash-container .dv-sash:not(.disabled):hover {
  background-color: var(--dv-active-sash-color, transparent);
  transition-property: background-color;
  transition-timing-function: ease-in-out;
  transition-duration: var(--dv-active-sash-transition-duration, 0.1s);
  transition-delay: var(--dv-active-sash-transition-delay, 0.5s);
}
.dv-split-view-container .dv-view-container {
  position: relative;
  height: 100%;
  width: 100%;
}
.dv-split-view-container .dv-view-container .dv-view {
  height: 100%;
  box-sizing: border-box;
  overflow: auto;
  position: absolute;
}
.dv-split-view-container.dv-separator-border .dv-view:not(:first-child)::before {
  content: " ";
  position: absolute;
  top: 0;
  left: 0;
  z-index: 5;
  pointer-events: none;
  background-color: var(--dv-separator-border);
}
.dv-dragged {
  transform: translate3d(0px, 0px, 0px); /* forces tab to be drawn on a separate layer (see https://github.com/microsoft/vscode/issues/18733) */
}

.dv-tab {
  flex-shrink: 0;
}
.dv-tab:focus-within, .dv-tab:focus {
  position: relative;
}
.dv-tab:focus-within::after, .dv-tab:focus::after {
  position: absolute;
  content: "";
  height: 100%;
  width: 100%;
  top: 0px;
  left: 0px;
  pointer-events: none;
  outline: 1px solid var(--dv-tab-divider-color) !important;
  outline-offset: -1px;
  z-index: 5;
}
.dv-tab.dv-tab-dragging .dv-default-tab-action {
  background-color: var(--dv-activegroup-visiblepanel-tab-color);
}
.dv-tab.dv-active-tab .dv-default-tab .dv-default-tab-action {
  visibility: visible;
}
.dv-tab.dv-inactive-tab .dv-default-tab .dv-default-tab-action {
  visibility: hidden;
}
.dv-tab.dv-inactive-tab .dv-default-tab:hover .dv-default-tab-action {
  visibility: visible;
}
.dv-tab .dv-default-tab {
  position: relative;
  height: 100%;
  display: flex;
  min-width: 80px;
  align-items: center;
  padding: 0px 8px;
  white-space: nowrap;
  text-overflow: ellipsis;
}
.dv-tab .dv-default-tab .dv-default-tab-content {
  padding: 0px 8px;
  flex-grow: 1;
}
.dv-tab .dv-default-tab .dv-default-tab-action {
  padding: 4px;
  display: flex;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
}
.dv-tab .dv-default-tab .dv-default-tab-action:hover {
  border-radius: 2px;
  background-color: var(--dv-icon-hover-background-color);
}
.dv-tabs-and-actions-container {
  display: flex;
  background-color: var(--dv-tabs-and-actions-container-background-color);
  flex-shrink: 0;
  box-sizing: border-box;
  height: var(--dv-tabs-and-actions-container-height);
  font-size: var(--dv-tabs-and-actions-container-font-size);
}
.dv-tabs-and-actions-container.dv-single-tab.dv-full-width-single-tab .dv-tabs-container {
  flex-grow: 1;
}
.dv-tabs-and-actions-container.dv-single-tab.dv-full-width-single-tab .dv-tabs-container .dv-tab {
  flex-grow: 1;
}
.dv-tabs-and-actions-container.dv-single-tab.dv-full-width-single-tab .dv-void-container {
  flex-grow: 0;
}
.dv-tabs-and-actions-container .dv-void-container {
  display: flex;
  flex-grow: 1;
  cursor: grab;
}
.dv-tabs-and-actions-container .dv-tabs-container {
  display: flex;
  overflow-x: overlay;
  overflow-y: hidden;
  scrollbar-width: thin;
  /* Track */
  /* Handle */
}
.dv-tabs-and-actions-container .dv-tabs-container::-webkit-scrollbar {
  height: 3px;
}
.dv-tabs-and-actions-container .dv-tabs-container::-webkit-scrollbar-track {
  background: transparent;
}
.dv-tabs-and-actions-container .dv-tabs-container::-webkit-scrollbar-thumb {
  background: var(--dv-tabs-container-scrollbar-color);
}
.dv-tabs-and-actions-container .dv-tabs-container .dv-tab {
  -webkit-user-drag: element;
  outline: none;
  min-width: 75px;
  cursor: pointer;
  position: relative;
  box-sizing: border-box;
}
.dv-tabs-and-actions-container .dv-tabs-container .dv-tab:not(:first-child)::before {
  content: " ";
  position: absolute;
  top: 0;
  left: 0;
  z-index: 5;
  pointer-events: none;
  background-color: var(--dv-tab-divider-color);
  width: 1px;
  height: 100%;
}
.dv-watermark {
  display: flex;
  height: 100%;
}`, "",{"version":3,"sources":["webpack://./node_modules/dockview-core/dist/styles/dockview.css"],"names":[],"mappings":"AAAA;EACE,qBAAqB;EACrB,kBAAkB;EAClB,cAAc;EACd,oBAAoB;EACpB,eAAe;AACjB;AACA;EACE,8CAA8C;EAC9C,+CAA+C;EAC/C,4CAA4C;EAC5C,sDAAsD;EACtD,kCAAkC;EAClC,yCAAyC;EACzC,wDAAwD;EACxD,+DAA+D;EAC/D,yBAAyB;EACzB,0CAA0C;EAC1C,uCAAuC;EACvC,yCAAyC;EACzC,yDAAyD;EACzD,2DAA2D;EAC3D,0DAA0D;EAC1D,6DAA6D;EAC7D,4DAA4D;EAC5D,+BAA+B;EAC/B,8CAA8C;EAC9C,+CAA+C;EAC/C,kDAAkD;EAClD,iDAAiD;EACjD,sCAAsC;EACtC,2DAA2D;AAC7D;;AAEA;EACE,8CAA8C;EAC9C,+CAA+C;EAC/C,4CAA4C;EAC5C,sDAAsD;EACtD,kCAAkC;EAClC,yCAAyC;EACzC,wDAAwD;EACxD,+DAA+D;EAC/D,yBAAyB;EACzB,0CAA0C;EAC1C,uCAAuC;EACvC,uCAAuC;EACvC,yDAAyD;EACzD,yDAAyD;EACzD,0DAA0D;EAC1D,2DAA2D;EAC3D,4DAA4D;EAC5D,6BAA6B;EAC7B,wDAAwD;EACxD,6DAA6D;EAC7D,gEAAgE;EAChE,gEAAgE;EAChE,gDAAgD;EAChD,kDAAkD;AACpD;;AAEA;EACE,8CAA8C;EAC9C,+CAA+C;EAC/C,4CAA4C;EAC5C,sDAAsD;EACtD,kCAAkC;EAClC,yCAAyC;EACzC,wDAAwD;EACxD,+DAA+D;EAC/D,yBAAyB;EACzB,0CAA0C;EAC1C,uCAAuC;EACvC,yCAAyC;EACzC,yDAAyD;EACzD,2DAA2D;EAC3D,0DAA0D;EAC1D,6DAA6D;EAC7D,4DAA4D;EAC5D,+BAA+B;EAC/B,8CAA8C;EAC9C,+CAA+C;EAC/C,kDAAkD;EAClD,iDAAiD;EACjD,sCAAsC;EACtC,2DAA2D;EAC3D,yDAAyD;EACzD,4CAA4C;EAC5C,+CAA+C;EAC/C,2DAA2D;EAC3D,6DAA6D;EAC7D,8CAA8C;EAC9C,6CAA6C;EAC7C,gDAAgD;EAChD,+CAA+C;AACjD;AACA;EACE,uBAAuB;EACvB,gFAAgF;AAClF;AACA;EACE,6EAA6E;AAC/E;AACA;EACE,4EAA4E;AAC9E;AACA;EACE,uBAAuB;EACvB,kFAAkF;AACpF;AACA;EACE,+EAA+E;AACjF;AACA;EACE,8EAA8E;AAChF;;AAEA;EACE,8CAA8C;EAC9C,+CAA+C;EAC/C,4CAA4C;EAC5C,sDAAsD;EACtD,kCAAkC;EAClC,yCAAyC;EACzC,wDAAwD;EACxD,+DAA+D;EAC/D,yBAAyB;EACzB,0CAA0C;EAC1C,uCAAuC;EACvC,yCAAyC;EACzC,yDAAyD;EACzD,2DAA2D;EAC3D,0DAA0D;EAC1D,6DAA6D;EAC7D,4DAA4D;EAC5D,+BAA+B;EAC/B,8CAA8C;EAC9C,gEAAgE;EAChE,mEAAmE;EACnE,mEAAmE;EACnE,8BAA8B;EAC9B,0CAA0C;EAC1C,2CAA2C;AAC7C;;AAEA;EACE,8CAA8C;EAC9C,+CAA+C;EAC/C,4CAA4C;EAC5C,sDAAsD;EACtD,kCAAkC;EAClC,yCAAyC;EACzC,wDAAwD;EACxD,+DAA+D;EAC/D,yBAAyB;EACzB,0CAA0C;EAC1C,uCAAuC;EACvC,yCAAyC;EACzC,yDAAyD;EACzD,2DAA2D;EAC3D,0DAA0D;EAC1D,6DAA6D;EAC7D,4DAA4D;EAC5D,+BAA+B;EAC/B,2DAA2D;EAC3D,yDAAyD;EACzD,mEAAmE;EACnE,iEAAiE;EACjE,8BAA8B;EAC9B,0CAA0C;EAC1C,2CAA2C;AAC7C;AACA;EACE,kBAAkB;AACpB;AACA;EACE,kBAAkB;EAClB,SAAS;EACT,QAAQ;EACR,WAAW;EACX,WAAW;EACX,WAAW;EACX,yBAAyB;EACzB,YAAY;AACd;AACA;EACE,kBAAkB;AACpB;AACA;EACE,kBAAkB;EAClB,SAAS;EACT,WAAW;EACX,WAAW;EACX,WAAW;EACX,WAAW;EACX,yBAAyB;EACzB,YAAY;AACd;;AAEA;EACE,8CAA8C;EAC9C,+CAA+C;EAC/C,4CAA4C;EAC5C,sDAAsD;EACtD,kCAAkC;EAClC,yCAAyC;EACzC,wDAAwD;EACxD,+DAA+D;EAC/D,yBAAyB;EACzB,0CAA0C;EAC1C,uCAAuC;EACvC,yCAAyC;EACzC,yDAAyD;EACzD,2DAA2D;EAC3D,0DAA0D;EAC1D,6DAA6D;EAC7D,4DAA4D;EAC5D,mCAAmC;EACnC,wDAAwD;EACxD,uDAAuD;EACvD,0DAA0D;EAC1D,yDAAyD;EACzD,kCAAkC;EAClC,kDAAkD;EAClD,+CAA+C;EAC/C,qDAAqD;AACvD;AACA;EACE,kBAAkB;AACpB;AACA;EACE,gBAAgB;EAChB,mBAAmB;AACrB;AACA;EACE,kDAAkD;AACpD;AACA;EACE,WAAW;EACX,kBAAkB;AACpB;AACA;EACE,WAAW;EACX,UAAU;AACZ;AACA;EACE,oCAAoC;AACtC;AACA;EACE,yBAAyB;AAC3B;AACA;EACE,2CAA2C;AAC7C;AACA;EACE,6BAA6B;AAC/B;AACA;EACE,WAAW;EACX,WAAW;EACX,WAAW;EACX,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,gCAAgC;EAChC,6DAA6D;EAC7D,kBAAkB;AACpB;AACA;EACE,mEAAmE;AACrE;AACA;EACE,WAAW;EACX,YAAY;EACZ,UAAU;EACV,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,gCAAgC;EAChC,6DAA6D;EAC7D,kBAAkB;AACpB;AACA;EACE,mEAAmE;AACrE;AACA;EACE,kBAAkB;AACpB;AACA;EACE,kBAAkB;EAClB,SAAS;EACT,QAAQ;EACR,YAAY;EACZ,WAAW;EACX,aAAa;EACb,oBAAoB;AACtB;AACA;EACE,kBAAkB;EAClB,sBAAsB;EACtB,YAAY;EACZ,WAAW;EACX,sDAAsD;EACtD,oHAAoH;EACpH,sBAAsB;EACtB,oBAAoB;AACtB;AACA;EACE,sDAAsD;AACxD;AACA;EACE,yDAAyD;AAC3D;AACA;EACE,uDAAuD;AACzD;AACA;EACE,wDAAwD;AAC1D;AACA;EACE,kBAAkB;EAClB,uDAAuD;AACzD;AACA;EACE,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,YAAY;EACZ,WAAW;EACX,UAAU;AACZ;AACA;EACE,kBAAkB;AACpB;;AAEA;EACE,yEAAyE;EACzE,mDAAmD;AACrD;AACA;EACE,wEAAwE;EACxE,kDAAkD;AACpD;AACA;EACE,2EAA2E;EAC3E,qDAAqD;AACvD;AACA;EACE,0EAA0E;EAC1E,oDAAoD;AACtD;;AAEA;;;GAGG;AACH;EACE,yEAAyE;EACzE,mDAAmD;AACrD;AACA;EACE,aAAa;EACb,sBAAsB;EACtB,YAAY;EACZ,uDAAuD;EACvD,gBAAgB;AAClB;AACA;EACE,aAAa;AACf;AACA;EACE,YAAY;EACZ,aAAa;EACb,aAAa;AACf;AACA;EACE,YAAY;EACZ,WAAW;AACb;AACA;;EAEE,YAAY;EACZ,WAAW;AACb;AACA;EACE,qBAAqB;AACvB;AACA;EACE,uBAAuB;AACzB;AACA;EACE,wBAAwB;AAC1B;AACA;EACE,sBAAsB;AACxB;AACA;;;;EAIE,sBAAsB;AACxB;;AAEA;EACE,oDAAoD;EACpD,kBAAkB;EAClB,4CAA4C;EAC5C,6CAA6C;EAC7C,yCAAyC;AAC3C;AACA;EACE,aAAa;AACf;AACA;EACE,YAAY;AACd;AACA;EACE,WAAW;EACX,uBAAuB;EACvB,SAAS;EACT,SAAS;EACT,kCAAkC;EAClC,kBAAkB;EAClB,iBAAiB;AACnB;AACA;EACE,WAAW;EACX,uBAAuB;EACvB,SAAS;EACT,YAAY;EACZ,kCAAkC;EAClC,kBAAkB;EAClB,iBAAiB;AACnB;AACA;EACE,wBAAwB;EACxB,UAAU;EACV,UAAU;EACV,QAAQ;EACR,kCAAkC;EAClC,kBAAkB;EAClB,iBAAiB;AACnB;AACA;EACE,wBAAwB;EACxB,UAAU;EACV,WAAW;EACX,QAAQ;EACR,kCAAkC;EAClC,kBAAkB;EAClB,iBAAiB;AACnB;AACA;EACE,WAAW;EACX,UAAU;EACV,SAAS;EACT,UAAU;EACV,kCAAkC;EAClC,kBAAkB;EAClB,iBAAiB;AACnB;AACA;EACE,WAAW;EACX,UAAU;EACV,WAAW;EACX,SAAS;EACT,kCAAkC;EAClC,kBAAkB;EAClB,iBAAiB;AACnB;AACA;EACE,WAAW;EACX,UAAU;EACV,UAAU;EACV,YAAY;EACZ,kCAAkC;EAClC,kBAAkB;EAClB,iBAAiB;AACnB;AACA;EACE,WAAW;EACX,UAAU;EACV,WAAW;EACX,YAAY;EACZ,kCAAkC;EAClC,kBAAkB;EAClB,iBAAiB;AACnB;AACA;EACE,oDAAoD;EACpD,kBAAkB;EAClB,UAAU;EACV,YAAY;AACd;AACA;EACE,4CAA4C;AAC9C;;AAEA;EACE,sBAAsB;EACtB,kBAAkB;AACpB;AACA;EACE,YAAY;EACZ,WAAW;AACb;AACA;EACE,0BAA0B;EAC1B,oCAAoC;AACtC;AACA;EACE,gBAAgB;EAChB,aAAa;EACb,sBAAsB;EACtB,uBAAuB;AACzB;AACA;EACE,wCAAwC;AAC1C;AACA;EACE,4DAA4D;AAC9D;AACA;EACE,uDAAuD;EACvD,mDAAmD;EACnD,aAAa;EACb,gBAAgB;EAChB,eAAe;AACjB;AACA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;AACA;EACE,iBAAiB;EACjB,YAAY;AACd;AACA;EACE,2BAA2B;AAC7B;AACA;EACE,aAAa;EACb,sBAAsB;EACtB,gBAAgB;EAChB,YAAY;AACd;AACA;EACE,sBAAsB;EACtB,iBAAiB;EACjB,kBAAkB;EAClB,aAAa;AACf;AACA;EACE,eAAe;AACjB;AACA;EACE,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,WAAW;EACX,YAAY;EACZ,UAAU;EACV,WAAW;EACX,oBAAoB;EACpB,kBAAkB;EAClB,mBAAmB;EACnB,oBAAoB;EACpB,oBAAoB;EACpB,sDAAsD;AACxD;AACA;EACE,gBAAgB;EAChB,kBAAkB;EAClB,YAAY;EACZ,kBAAkB;EAClB,aAAa;AACf;AACA;EACE,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,WAAW;EACX,YAAY;EACZ,UAAU;EACV,WAAW;EACX,oBAAoB;EACpB,kBAAkB;EAClB,mBAAmB;EACnB,oBAAoB;EACpB,oBAAoB;EACpB,sDAAsD;AACxD;AACA;EACE,uBAAuB;AACzB;AACA;EACE,wBAAwB;AAC1B;AACA;EACE,uBAAuB;AACzB;AACA;EACE,qBAAqB;AACvB;;AAEA;EACE,kBAAkB;EAClB,gBAAgB;EAChB,YAAY;EACZ,WAAW;AACb;AACA;EACE,oBAAoB;AACtB;AACA;;EAEE,0BAA0B;EAC1B,oCAAoC;AACtC;AACA;EACE,YAAY;AACd;AACA;EACE,YAAY;EACZ,UAAU;AACZ;AACA;EACE,iBAAiB;AACnB;AACA;EACE,eAAe;AACjB;AACA;EACE,gBAAgB;AAClB;AACA;EACE,gBAAgB;AAClB;AACA;EACE,YAAY;EACZ,UAAU;AACZ;AACA;EACE,WAAW;AACb;AACA;EACE,WAAW;EACX,WAAW;AACb;AACA;EACE,iBAAiB;AACnB;AACA;EACE,eAAe;AACjB;AACA;EACE,gBAAgB;AAClB;AACA;EACE,gBAAgB;AAClB;AACA;EACE,WAAW;AACb;AACA;EACE,WAAW;EACX,WAAW;AACb;AACA;EACE,YAAY;EACZ,WAAW;EACX,kBAAkB;AACpB;AACA;EACE,kBAAkB;EAClB,WAAW;EACX,aAAa;EACb,iBAAiB;EACjB,yBAAyB;EACzB,sBAAsB;EACtB,qBAAqB;EACrB,kBAAkB;AACpB;AACA;EACE,0DAA0D;EAC1D,qCAAqC;EACrC,uCAAuC;EACvC,oEAAoE;EACpE,8DAA8D;AAChE;AACA;EACE,kBAAkB;EAClB,YAAY;EACZ,WAAW;AACb;AACA;EACE,YAAY;EACZ,sBAAsB;EACtB,cAAc;EACd,kBAAkB;AACpB;AACA;EACE,YAAY;EACZ,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,UAAU;EACV,oBAAoB;EACpB,4CAA4C;AAC9C;AACA;EACE,qCAAqC,EAAE,sGAAsG;AAC/I;;AAEA;EACE,cAAc;AAChB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,WAAW;EACX,QAAQ;EACR,SAAS;EACT,oBAAoB;EACpB,yDAAyD;EACzD,oBAAoB;EACpB,UAAU;AACZ;AACA;EACE,8DAA8D;AAChE;AACA;EACE,mBAAmB;AACrB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,kBAAkB;EAClB,YAAY;EACZ,aAAa;EACb,eAAe;EACf,mBAAmB;EACnB,gBAAgB;EAChB,mBAAmB;EACnB,uBAAuB;AACzB;AACA;EACE,gBAAgB;EAChB,YAAY;AACd;AACA;EACE,YAAY;EACZ,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,sBAAsB;AACxB;AACA;EACE,kBAAkB;EAClB,uDAAuD;AACzD;AACA;EACE,aAAa;EACb,uEAAuE;EACvE,cAAc;EACd,sBAAsB;EACtB,mDAAmD;EACnD,yDAAyD;AAC3D;AACA;EACE,YAAY;AACd;AACA;EACE,YAAY;AACd;AACA;EACE,YAAY;AACd;AACA;EACE,aAAa;EACb,YAAY;EACZ,YAAY;AACd;AACA;EACE,aAAa;EACb,mBAAmB;EACnB,kBAAkB;EAClB,qBAAqB;EACrB,UAAU;EACV,WAAW;AACb;AACA;EACE,WAAW;AACb;AACA;EACE,uBAAuB;AACzB;AACA;EACE,oDAAoD;AACtD;AACA;EACE,0BAA0B;EAC1B,aAAa;EACb,eAAe;EACf,eAAe;EACf,kBAAkB;EAClB,sBAAsB;AACxB;AACA;EACE,YAAY;EACZ,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,UAAU;EACV,oBAAoB;EACpB,6CAA6C;EAC7C,UAAU;EACV,YAAY;AACd;AACA;EACE,aAAa;EACb,YAAY;AACd","sourcesContent":[".dv-svg {\n  display: inline-block;\n  fill: currentcolor;\n  line-height: 1;\n  stroke: currentcolor;\n  stroke-width: 0;\n}\n.dockview-theme-dark {\n  --dv-paneview-active-outline-color: dodgerblue;\n  --dv-tabs-and-actions-container-font-size: 13px;\n  --dv-tabs-and-actions-container-height: 35px;\n  --dv-drag-over-background-color: rgba(83, 89, 93, 0.5);\n  --dv-drag-over-border-color: white;\n  --dv-tabs-container-scrollbar-color: #888;\n  --dv-icon-hover-background-color: rgba(90, 93, 94, 0.31);\n  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(83, 89, 93, 0.5);\n  --dv-overlay-z-index: 999;\n  --dv-active-sash-transition-duration: 0.1s;\n  --dv-active-sash-transition-delay: 0.5s;\n  --dv-group-view-background-color: #1e1e1e;\n  --dv-tabs-and-actions-container-background-color: #252526;\n  --dv-activegroup-visiblepanel-tab-background-color: #1e1e1e;\n  --dv-activegroup-hiddenpanel-tab-background-color: #2d2d2d;\n  --dv-inactivegroup-visiblepanel-tab-background-color: #1e1e1e;\n  --dv-inactivegroup-hiddenpanel-tab-background-color: #2d2d2d;\n  --dv-tab-divider-color: #1e1e1e;\n  --dv-activegroup-visiblepanel-tab-color: white;\n  --dv-activegroup-hiddenpanel-tab-color: #969696;\n  --dv-inactivegroup-visiblepanel-tab-color: #8f8f8f;\n  --dv-inactivegroup-hiddenpanel-tab-color: #626262;\n  --dv-separator-border: rgb(68, 68, 68);\n  --dv-paneview-header-border-color: rgba(204, 204, 204, 0.2);\n}\n\n.dockview-theme-light {\n  --dv-paneview-active-outline-color: dodgerblue;\n  --dv-tabs-and-actions-container-font-size: 13px;\n  --dv-tabs-and-actions-container-height: 35px;\n  --dv-drag-over-background-color: rgba(83, 89, 93, 0.5);\n  --dv-drag-over-border-color: white;\n  --dv-tabs-container-scrollbar-color: #888;\n  --dv-icon-hover-background-color: rgba(90, 93, 94, 0.31);\n  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(83, 89, 93, 0.5);\n  --dv-overlay-z-index: 999;\n  --dv-active-sash-transition-duration: 0.1s;\n  --dv-active-sash-transition-delay: 0.5s;\n  --dv-group-view-background-color: white;\n  --dv-tabs-and-actions-container-background-color: #f3f3f3;\n  --dv-activegroup-visiblepanel-tab-background-color: white;\n  --dv-activegroup-hiddenpanel-tab-background-color: #ececec;\n  --dv-inactivegroup-visiblepanel-tab-background-color: white;\n  --dv-inactivegroup-hiddenpanel-tab-background-color: #ececec;\n  --dv-tab-divider-color: white;\n  --dv-activegroup-visiblepanel-tab-color: rgb(51, 51, 51);\n  --dv-activegroup-hiddenpanel-tab-color: rgba(51, 51, 51, 0.7);\n  --dv-inactivegroup-visiblepanel-tab-color: rgba(51, 51, 51, 0.7);\n  --dv-inactivegroup-hiddenpanel-tab-color: rgba(51, 51, 51, 0.35);\n  --dv-separator-border: rgba(128, 128, 128, 0.35);\n  --dv-paneview-header-border-color: rgb(51, 51, 51);\n}\n\n.dockview-theme-vs {\n  --dv-paneview-active-outline-color: dodgerblue;\n  --dv-tabs-and-actions-container-font-size: 13px;\n  --dv-tabs-and-actions-container-height: 35px;\n  --dv-drag-over-background-color: rgba(83, 89, 93, 0.5);\n  --dv-drag-over-border-color: white;\n  --dv-tabs-container-scrollbar-color: #888;\n  --dv-icon-hover-background-color: rgba(90, 93, 94, 0.31);\n  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(83, 89, 93, 0.5);\n  --dv-overlay-z-index: 999;\n  --dv-active-sash-transition-duration: 0.1s;\n  --dv-active-sash-transition-delay: 0.5s;\n  --dv-group-view-background-color: #1e1e1e;\n  --dv-tabs-and-actions-container-background-color: #252526;\n  --dv-activegroup-visiblepanel-tab-background-color: #1e1e1e;\n  --dv-activegroup-hiddenpanel-tab-background-color: #2d2d2d;\n  --dv-inactivegroup-visiblepanel-tab-background-color: #1e1e1e;\n  --dv-inactivegroup-hiddenpanel-tab-background-color: #2d2d2d;\n  --dv-tab-divider-color: #1e1e1e;\n  --dv-activegroup-visiblepanel-tab-color: white;\n  --dv-activegroup-hiddenpanel-tab-color: #969696;\n  --dv-inactivegroup-visiblepanel-tab-color: #8f8f8f;\n  --dv-inactivegroup-hiddenpanel-tab-color: #626262;\n  --dv-separator-border: rgb(68, 68, 68);\n  --dv-paneview-header-border-color: rgba(204, 204, 204, 0.2);\n  --dv-tabs-and-actions-container-background-color: #2d2d30;\n  --dv-tabs-and-actions-container-height: 20px;\n  --dv-tabs-and-actions-container-font-size: 11px;\n  --dv-activegroup-visiblepanel-tab-background-color: #007acc;\n  --dv-inactivegroup-visiblepanel-tab-background-color: #3f3f46;\n  --dv-activegroup-visiblepanel-tab-color: white;\n  --dv-activegroup-hiddenpanel-tab-color: white;\n  --dv-inactivegroup-visiblepanel-tab-color: white;\n  --dv-inactivegroup-hiddenpanel-tab-color: white;\n}\n.dockview-theme-vs .dv-groupview.dv-active-group > .dv-tabs-and-actions-container {\n  box-sizing: content-box;\n  border-bottom: 2px solid var(--dv-activegroup-visiblepanel-tab-background-color);\n}\n.dockview-theme-vs .dv-groupview.dv-active-group > .dv-tabs-and-actions-container .dv-tab.dv-active-tab {\n  border-top: 2px solid var(--dv-activegroup-visiblepanel-tab-background-color);\n}\n.dockview-theme-vs .dv-groupview.dv-active-group > .dv-tabs-and-actions-container .dv-tab.dv-inactive-tab {\n  border-top: 2px solid var(--dv-activegroup-hiddenpanel-tab-background-color);\n}\n.dockview-theme-vs .dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container {\n  box-sizing: content-box;\n  border-bottom: 2px solid var(--dv-inactivegroup-visiblepanel-tab-background-color);\n}\n.dockview-theme-vs .dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container .dv-tab.dv-active-tab {\n  border-top: 2px solid var(--dv-inactivegroup-visiblepanel-tab-background-color);\n}\n.dockview-theme-vs .dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container .dv-tab.dv-inactive-tab {\n  border-top: 2px solid var(--dv-inactivegroup-hiddenpanel-tab-background-color);\n}\n\n.dockview-theme-abyss {\n  --dv-paneview-active-outline-color: dodgerblue;\n  --dv-tabs-and-actions-container-font-size: 13px;\n  --dv-tabs-and-actions-container-height: 35px;\n  --dv-drag-over-background-color: rgba(83, 89, 93, 0.5);\n  --dv-drag-over-border-color: white;\n  --dv-tabs-container-scrollbar-color: #888;\n  --dv-icon-hover-background-color: rgba(90, 93, 94, 0.31);\n  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(83, 89, 93, 0.5);\n  --dv-overlay-z-index: 999;\n  --dv-active-sash-transition-duration: 0.1s;\n  --dv-active-sash-transition-delay: 0.5s;\n  --dv-group-view-background-color: #000c18;\n  --dv-tabs-and-actions-container-background-color: #1c1c2a;\n  --dv-activegroup-visiblepanel-tab-background-color: #000c18;\n  --dv-activegroup-hiddenpanel-tab-background-color: #10192c;\n  --dv-inactivegroup-visiblepanel-tab-background-color: #000c18;\n  --dv-inactivegroup-hiddenpanel-tab-background-color: #10192c;\n  --dv-tab-divider-color: #2b2b4a;\n  --dv-activegroup-visiblepanel-tab-color: white;\n  --dv-activegroup-hiddenpanel-tab-color: rgba(255, 255, 255, 0.5);\n  --dv-inactivegroup-visiblepanel-tab-color: rgba(255, 255, 255, 0.5);\n  --dv-inactivegroup-hiddenpanel-tab-color: rgba(255, 255, 255, 0.25);\n  --dv-separator-border: #2b2b4a;\n  --dv-paneview-header-border-color: #2b2b4a;\n  --dv-paneview-active-outline-color: #596f99;\n}\n\n.dockview-theme-dracula {\n  --dv-paneview-active-outline-color: dodgerblue;\n  --dv-tabs-and-actions-container-font-size: 13px;\n  --dv-tabs-and-actions-container-height: 35px;\n  --dv-drag-over-background-color: rgba(83, 89, 93, 0.5);\n  --dv-drag-over-border-color: white;\n  --dv-tabs-container-scrollbar-color: #888;\n  --dv-icon-hover-background-color: rgba(90, 93, 94, 0.31);\n  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(83, 89, 93, 0.5);\n  --dv-overlay-z-index: 999;\n  --dv-active-sash-transition-duration: 0.1s;\n  --dv-active-sash-transition-delay: 0.5s;\n  --dv-group-view-background-color: #282a36;\n  --dv-tabs-and-actions-container-background-color: #191a21;\n  --dv-activegroup-visiblepanel-tab-background-color: #282a36;\n  --dv-activegroup-hiddenpanel-tab-background-color: #21222c;\n  --dv-inactivegroup-visiblepanel-tab-background-color: #282a36;\n  --dv-inactivegroup-hiddenpanel-tab-background-color: #21222c;\n  --dv-tab-divider-color: #191a21;\n  --dv-activegroup-visiblepanel-tab-color: rgb(248, 248, 242);\n  --dv-activegroup-hiddenpanel-tab-color: rgb(98, 114, 164);\n  --dv-inactivegroup-visiblepanel-tab-color: rgba(248, 248, 242, 0.5);\n  --dv-inactivegroup-hiddenpanel-tab-color: rgba(98, 114, 164, 0.5);\n  --dv-separator-border: #bd93f9;\n  --dv-paneview-header-border-color: #bd93f9;\n  --dv-paneview-active-outline-color: #6272a4;\n}\n.dockview-theme-dracula .dv-groupview.dv-active-group > .dv-tabs-and-actions-container > .dv-tabs-container > .dv-tab.dv-active-tab {\n  position: relative;\n}\n.dockview-theme-dracula .dv-groupview.dv-active-group > .dv-tabs-and-actions-container > .dv-tabs-container > .dv-tab.dv-active-tab::after {\n  position: absolute;\n  left: 0px;\n  top: 0px;\n  content: \"\";\n  width: 100%;\n  height: 1px;\n  background-color: #94527e;\n  z-index: 999;\n}\n.dockview-theme-dracula .dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container > .dv-tabs-container > .dv-tab.dv-active-tab {\n  position: relative;\n}\n.dockview-theme-dracula .dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container > .dv-tabs-container > .dv-tab.dv-active-tab::after {\n  position: absolute;\n  left: 0px;\n  bottom: 0px;\n  content: \"\";\n  width: 100%;\n  height: 1px;\n  background-color: #5e3d5a;\n  z-index: 999;\n}\n\n.dockview-theme-replit {\n  --dv-paneview-active-outline-color: dodgerblue;\n  --dv-tabs-and-actions-container-font-size: 13px;\n  --dv-tabs-and-actions-container-height: 35px;\n  --dv-drag-over-background-color: rgba(83, 89, 93, 0.5);\n  --dv-drag-over-border-color: white;\n  --dv-tabs-container-scrollbar-color: #888;\n  --dv-icon-hover-background-color: rgba(90, 93, 94, 0.31);\n  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(83, 89, 93, 0.5);\n  --dv-overlay-z-index: 999;\n  --dv-active-sash-transition-duration: 0.1s;\n  --dv-active-sash-transition-delay: 0.5s;\n  --dv-group-view-background-color: #ebeced;\n  --dv-tabs-and-actions-container-background-color: #fcfcfc;\n  --dv-activegroup-visiblepanel-tab-background-color: #f0f1f2;\n  --dv-activegroup-hiddenpanel-tab-background-color: #fcfcfc;\n  --dv-inactivegroup-visiblepanel-tab-background-color: #f0f1f2;\n  --dv-inactivegroup-hiddenpanel-tab-background-color: #fcfcfc;\n  --dv-tab-divider-color: transparent;\n  --dv-activegroup-visiblepanel-tab-color: rgb(51, 51, 51);\n  --dv-activegroup-hiddenpanel-tab-color: rgb(51, 51, 51);\n  --dv-inactivegroup-visiblepanel-tab-color: rgb(51, 51, 51);\n  --dv-inactivegroup-hiddenpanel-tab-color: rgb(51, 51, 51);\n  --dv-separator-border: transparent;\n  --dv-paneview-header-border-color: rgb(51, 51, 51);\n  --dv-separator-handle-background-color: #cfd1d3;\n  --dv-separator-handle-hover-background-color: #babbbb;\n}\n.dockview-theme-replit .dv-resize-container:has(> .dv-groupview) {\n  border-radius: 8px;\n}\n.dockview-theme-replit .dv-groupview {\n  overflow: hidden;\n  border-radius: 10px;\n}\n.dockview-theme-replit .dv-groupview .dv-tabs-and-actions-container {\n  border-bottom: 1px solid rgba(128, 128, 128, 0.35);\n}\n.dockview-theme-replit .dv-groupview .dv-tabs-and-actions-container .dv-tab {\n  margin: 4px;\n  border-radius: 8px;\n}\n.dockview-theme-replit .dv-groupview .dv-tabs-and-actions-container .dv-tab .dv-svg {\n  height: 8px;\n  width: 8px;\n}\n.dockview-theme-replit .dv-groupview .dv-tabs-and-actions-container .dv-tab:hover {\n  background-color: #e4e5e6 !important;\n}\n.dockview-theme-replit .dv-groupview .dv-content-container {\n  background-color: #fcfcfc;\n}\n.dockview-theme-replit .dv-groupview.dv-active-group {\n  border: 1px solid rgba(128, 128, 128, 0.35);\n}\n.dockview-theme-replit .dv-groupview.dv-inactive-group {\n  border: 1px solid transparent;\n}\n.dockview-theme-replit .dv-vertical > .dv-sash-container > .dv-sash:not(.disabled)::after {\n  content: \"\";\n  height: 4px;\n  width: 40px;\n  border-radius: 2px;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--dv-separator-handle-background-color);\n  position: absolute;\n}\n.dockview-theme-replit .dv-vertical > .dv-sash-container > .dv-sash:not(.disabled):hover::after {\n  background-color: var(--dv-separator-handle-hover-background-color);\n}\n.dockview-theme-replit .dv-horizontal > .dv-sash-container > .dv-sash:not(.disabled)::after {\n  content: \"\";\n  height: 40px;\n  width: 4px;\n  border-radius: 2px;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--dv-separator-handle-background-color);\n  position: absolute;\n}\n.dockview-theme-replit .dv-horizontal > .dv-sash-container > .dv-sash:not(.disabled):hover::after {\n  background-color: var(--dv-separator-handle-hover-background-color);\n}\n.dv-drop-target {\n  position: relative;\n}\n.dv-drop-target > .dv-drop-target-dropzone {\n  position: absolute;\n  left: 0px;\n  top: 0px;\n  height: 100%;\n  width: 100%;\n  z-index: 1000;\n  pointer-events: none;\n}\n.dv-drop-target > .dv-drop-target-dropzone > .dv-drop-target-selection {\n  position: relative;\n  box-sizing: border-box;\n  height: 100%;\n  width: 100%;\n  background-color: var(--dv-drag-over-background-color);\n  transition: top 70ms ease-out, left 70ms ease-out, width 70ms ease-out, height 70ms ease-out, opacity 0.15s ease-out;\n  will-change: transform;\n  pointer-events: none;\n}\n.dv-drop-target > .dv-drop-target-dropzone > .dv-drop-target-selection.dv-drop-target-top.dv-drop-target-small-vertical {\n  border-top: 1px solid var(--dv-drag-over-border-color);\n}\n.dv-drop-target > .dv-drop-target-dropzone > .dv-drop-target-selection.dv-drop-target-bottom.dv-drop-target-small-vertical {\n  border-bottom: 1px solid var(--dv-drag-over-border-color);\n}\n.dv-drop-target > .dv-drop-target-dropzone > .dv-drop-target-selection.dv-drop-target-left.dv-drop-target-small-horizontal {\n  border-left: 1px solid var(--dv-drag-over-border-color);\n}\n.dv-drop-target > .dv-drop-target-dropzone > .dv-drop-target-selection.dv-drop-target-right.dv-drop-target-small-horizontal {\n  border-right: 1px solid var(--dv-drag-over-border-color);\n}\n.dv-dockview {\n  position: relative;\n  background-color: var(--dv-group-view-background-color);\n}\n.dv-dockview .dv-watermark-container {\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  height: 100%;\n  width: 100%;\n  z-index: 1;\n}\n.dv-dockview .dv-overlay-render-container {\n  position: relative;\n}\n\n.dv-groupview.dv-active-group > .dv-tabs-and-actions-container > .dv-tabs-container > .dv-tab.dv-active-tab {\n  background-color: var(--dv-activegroup-visiblepanel-tab-background-color);\n  color: var(--dv-activegroup-visiblepanel-tab-color);\n}\n.dv-groupview.dv-active-group > .dv-tabs-and-actions-container > .dv-tabs-container > .dv-tab.dv-inactive-tab {\n  background-color: var(--dv-activegroup-hiddenpanel-tab-background-color);\n  color: var(--dv-activegroup-hiddenpanel-tab-color);\n}\n.dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container > .dv-tabs-container > .dv-tab.dv-active-tab {\n  background-color: var(--dv-inactivegroup-visiblepanel-tab-background-color);\n  color: var(--dv-inactivegroup-visiblepanel-tab-color);\n}\n.dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container > .dv-tabs-container > .dv-tab.dv-inactive-tab {\n  background-color: var(--dv-inactivegroup-hiddenpanel-tab-background-color);\n  color: var(--dv-inactivegroup-hiddenpanel-tab-color);\n}\n\n/**\n * when a tab is dragged we lose the above stylings because they are conditional on parent elements\n * therefore we also set some stylings for the dragging event\n **/\n.dv-tab.dv-tab-dragging {\n  background-color: var(--dv-activegroup-visiblepanel-tab-background-color);\n  color: var(--dv-activegroup-visiblepanel-tab-color);\n}\n.dv-groupview {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background-color: var(--dv-group-view-background-color);\n  overflow: hidden;\n}\n.dv-groupview:focus {\n  outline: none;\n}\n.dv-groupview > .dv-content-container {\n  flex-grow: 1;\n  min-height: 0;\n  outline: none;\n}\n.dv-root-wrapper {\n  height: 100%;\n  width: 100%;\n}\n.dv-grid-view,\n.dv-branch-node {\n  height: 100%;\n  width: 100%;\n}\n.dv-debug .dv-resize-container .dv-resize-handle-top {\n  background-color: red;\n}\n.dv-debug .dv-resize-container .dv-resize-handle-bottom {\n  background-color: green;\n}\n.dv-debug .dv-resize-container .dv-resize-handle-left {\n  background-color: yellow;\n}\n.dv-debug .dv-resize-container .dv-resize-handle-right {\n  background-color: blue;\n}\n.dv-debug .dv-resize-container .dv-resize-handle-topleft,\n.dv-debug .dv-resize-container .dv-resize-handle-topright,\n.dv-debug .dv-resize-container .dv-resize-handle-bottomleft,\n.dv-debug .dv-resize-container .dv-resize-handle-bottomright {\n  background-color: cyan;\n}\n\n.dv-resize-container {\n  --dv-overlay-z-index: var(--dv-overlay-z-index, 999);\n  position: absolute;\n  z-index: calc(var(--dv-overlay-z-index) - 2);\n  border: 1px solid var(--dv-tab-divider-color);\n  box-shadow: var(--dv-floating-box-shadow);\n}\n.dv-resize-container.dv-hidden {\n  display: none;\n}\n.dv-resize-container.dv-resize-container-dragging {\n  opacity: 0.5;\n}\n.dv-resize-container .dv-resize-handle-top {\n  height: 4px;\n  width: calc(100% - 8px);\n  left: 4px;\n  top: -2px;\n  z-index: var(--dv-overlay-z-index);\n  position: absolute;\n  cursor: ns-resize;\n}\n.dv-resize-container .dv-resize-handle-bottom {\n  height: 4px;\n  width: calc(100% - 8px);\n  left: 4px;\n  bottom: -2px;\n  z-index: var(--dv-overlay-z-index);\n  position: absolute;\n  cursor: ns-resize;\n}\n.dv-resize-container .dv-resize-handle-left {\n  height: calc(100% - 8px);\n  width: 4px;\n  left: -2px;\n  top: 4px;\n  z-index: var(--dv-overlay-z-index);\n  position: absolute;\n  cursor: ew-resize;\n}\n.dv-resize-container .dv-resize-handle-right {\n  height: calc(100% - 8px);\n  width: 4px;\n  right: -2px;\n  top: 4px;\n  z-index: var(--dv-overlay-z-index);\n  position: absolute;\n  cursor: ew-resize;\n}\n.dv-resize-container .dv-resize-handle-topleft {\n  height: 4px;\n  width: 4px;\n  top: -2px;\n  left: -2px;\n  z-index: var(--dv-overlay-z-index);\n  position: absolute;\n  cursor: nw-resize;\n}\n.dv-resize-container .dv-resize-handle-topright {\n  height: 4px;\n  width: 4px;\n  right: -2px;\n  top: -2px;\n  z-index: var(--dv-overlay-z-index);\n  position: absolute;\n  cursor: ne-resize;\n}\n.dv-resize-container .dv-resize-handle-bottomleft {\n  height: 4px;\n  width: 4px;\n  left: -2px;\n  bottom: -2px;\n  z-index: var(--dv-overlay-z-index);\n  position: absolute;\n  cursor: sw-resize;\n}\n.dv-resize-container .dv-resize-handle-bottomright {\n  height: 4px;\n  width: 4px;\n  right: -2px;\n  bottom: -2px;\n  z-index: var(--dv-overlay-z-index);\n  position: absolute;\n  cursor: se-resize;\n}\n.dv-render-overlay {\n  --dv-overlay-z-index: var(--dv-overlay-z-index, 999);\n  position: absolute;\n  z-index: 1;\n  height: 100%;\n}\n.dv-render-overlay.dv-render-overlay-float {\n  z-index: calc(var(--dv-overlay-z-index) - 1);\n}\n\n.dv-debug .dv-render-overlay {\n  outline: 1px solid red;\n  outline-offset: -1;\n}\n.dv-pane-container {\n  height: 100%;\n  width: 100%;\n}\n.dv-pane-container.dv-animated .dv-view {\n  transition-duration: 0.15s;\n  transition-timing-function: ease-out;\n}\n.dv-pane-container .dv-view {\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  padding: 0px !important;\n}\n.dv-pane-container .dv-view:not(:first-child)::before {\n  background-color: transparent !important;\n}\n.dv-pane-container .dv-view:not(:first-child) .dv-pane > .dv-pane-header {\n  border-top: 1px solid var(--dv-paneview-header-border-color);\n}\n.dv-pane-container .dv-view .dv-default-header {\n  background-color: var(--dv-group-view-background-color);\n  color: var(--dv-activegroup-visiblepanel-tab-color);\n  display: flex;\n  padding: 0px 8px;\n  cursor: pointer;\n}\n.dv-pane-container .dv-view .dv-default-header .dv-pane-header-icon {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.dv-pane-container .dv-view .dv-default-header > span {\n  padding-left: 8px;\n  flex-grow: 1;\n}\n.dv-pane-container:first-of-type > .dv-pane > .dv-pane-header {\n  border-top: none !important;\n}\n.dv-pane-container .dv-pane {\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  height: 100%;\n}\n.dv-pane-container .dv-pane .dv-pane-header {\n  box-sizing: border-box;\n  user-select: none;\n  position: relative;\n  outline: none;\n}\n.dv-pane-container .dv-pane .dv-pane-header.dv-pane-draggable {\n  cursor: pointer;\n}\n.dv-pane-container .dv-pane .dv-pane-header:focus:before, .dv-pane-container .dv-pane .dv-pane-header:focus-within:before {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 5;\n  content: \"\";\n  pointer-events: none;\n  outline: 1px solid;\n  outline-width: -1px;\n  outline-style: solid;\n  outline-offset: -1px;\n  outline-color: var(--dv-paneview-active-outline-color);\n}\n.dv-pane-container .dv-pane .dv-pane-body {\n  overflow-y: auto;\n  overflow-x: hidden;\n  flex-grow: 1;\n  position: relative;\n  outline: none;\n}\n.dv-pane-container .dv-pane .dv-pane-body:focus:before, .dv-pane-container .dv-pane .dv-pane-body:focus-within:before {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 5;\n  content: \"\";\n  pointer-events: none;\n  outline: 1px solid;\n  outline-width: -1px;\n  outline-style: solid;\n  outline-offset: -1px;\n  outline-color: var(--dv-paneview-active-outline-color);\n}\n.dv-debug .dv-split-view-container .dv-sash-container .dv-sash.dv-enabled {\n  background-color: black;\n}\n.dv-debug .dv-split-view-container .dv-sash-container .dv-sash.dv-disabled {\n  background-color: orange;\n}\n.dv-debug .dv-split-view-container .dv-sash-container .dv-sash.dv-maximum {\n  background-color: green;\n}\n.dv-debug .dv-split-view-container .dv-sash-container .dv-sash.dv-minimum {\n  background-color: red;\n}\n\n.dv-split-view-container {\n  position: relative;\n  overflow: hidden;\n  height: 100%;\n  width: 100%;\n}\n.dv-split-view-container.dv-splitview-disabled > .dv-sash-container > .dv-sash {\n  pointer-events: none;\n}\n.dv-split-view-container.dv-animation .dv-view,\n.dv-split-view-container.dv-animation .dv-sash {\n  transition-duration: 0.15s;\n  transition-timing-function: ease-out;\n}\n.dv-split-view-container.dv-horizontal {\n  height: 100%;\n}\n.dv-split-view-container.dv-horizontal > .dv-sash-container > .dv-sash {\n  height: 100%;\n  width: 4px;\n}\n.dv-split-view-container.dv-horizontal > .dv-sash-container > .dv-sash.dv-enabled {\n  cursor: ew-resize;\n}\n.dv-split-view-container.dv-horizontal > .dv-sash-container > .dv-sash.dv-disabled {\n  cursor: default;\n}\n.dv-split-view-container.dv-horizontal > .dv-sash-container > .dv-sash.dv-maximum {\n  cursor: w-resize;\n}\n.dv-split-view-container.dv-horizontal > .dv-sash-container > .dv-sash.dv-minimum {\n  cursor: e-resize;\n}\n.dv-split-view-container.dv-horizontal > .dv-view-container > .dv-view:not(:first-child)::before {\n  height: 100%;\n  width: 1px;\n}\n.dv-split-view-container.dv-vertical {\n  width: 100%;\n}\n.dv-split-view-container.dv-vertical > .dv-sash-container > .dv-sash {\n  width: 100%;\n  height: 4px;\n}\n.dv-split-view-container.dv-vertical > .dv-sash-container > .dv-sash.dv-enabled {\n  cursor: ns-resize;\n}\n.dv-split-view-container.dv-vertical > .dv-sash-container > .dv-sash.dv-disabled {\n  cursor: default;\n}\n.dv-split-view-container.dv-vertical > .dv-sash-container > .dv-sash.dv-maximum {\n  cursor: n-resize;\n}\n.dv-split-view-container.dv-vertical > .dv-sash-container > .dv-sash.dv-minimum {\n  cursor: s-resize;\n}\n.dv-split-view-container.dv-vertical > .dv-view-container > .dv-view {\n  width: 100%;\n}\n.dv-split-view-container.dv-vertical > .dv-view-container > .dv-view:not(:first-child)::before {\n  height: 1px;\n  width: 100%;\n}\n.dv-split-view-container .dv-sash-container {\n  height: 100%;\n  width: 100%;\n  position: absolute;\n}\n.dv-split-view-container .dv-sash-container .dv-sash {\n  position: absolute;\n  z-index: 99;\n  outline: none;\n  user-select: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  touch-action: none;\n}\n.dv-split-view-container .dv-sash-container .dv-sash:not(.disabled):active, .dv-split-view-container .dv-sash-container .dv-sash:not(.disabled):hover {\n  background-color: var(--dv-active-sash-color, transparent);\n  transition-property: background-color;\n  transition-timing-function: ease-in-out;\n  transition-duration: var(--dv-active-sash-transition-duration, 0.1s);\n  transition-delay: var(--dv-active-sash-transition-delay, 0.5s);\n}\n.dv-split-view-container .dv-view-container {\n  position: relative;\n  height: 100%;\n  width: 100%;\n}\n.dv-split-view-container .dv-view-container .dv-view {\n  height: 100%;\n  box-sizing: border-box;\n  overflow: auto;\n  position: absolute;\n}\n.dv-split-view-container.dv-separator-border .dv-view:not(:first-child)::before {\n  content: \" \";\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 5;\n  pointer-events: none;\n  background-color: var(--dv-separator-border);\n}\n.dv-dragged {\n  transform: translate3d(0px, 0px, 0px); /* forces tab to be drawn on a separate layer (see https://github.com/microsoft/vscode/issues/18733) */\n}\n\n.dv-tab {\n  flex-shrink: 0;\n}\n.dv-tab:focus-within, .dv-tab:focus {\n  position: relative;\n}\n.dv-tab:focus-within::after, .dv-tab:focus::after {\n  position: absolute;\n  content: \"\";\n  height: 100%;\n  width: 100%;\n  top: 0px;\n  left: 0px;\n  pointer-events: none;\n  outline: 1px solid var(--dv-tab-divider-color) !important;\n  outline-offset: -1px;\n  z-index: 5;\n}\n.dv-tab.dv-tab-dragging .dv-default-tab-action {\n  background-color: var(--dv-activegroup-visiblepanel-tab-color);\n}\n.dv-tab.dv-active-tab .dv-default-tab .dv-default-tab-action {\n  visibility: visible;\n}\n.dv-tab.dv-inactive-tab .dv-default-tab .dv-default-tab-action {\n  visibility: hidden;\n}\n.dv-tab.dv-inactive-tab .dv-default-tab:hover .dv-default-tab-action {\n  visibility: visible;\n}\n.dv-tab .dv-default-tab {\n  position: relative;\n  height: 100%;\n  display: flex;\n  min-width: 80px;\n  align-items: center;\n  padding: 0px 8px;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n}\n.dv-tab .dv-default-tab .dv-default-tab-content {\n  padding: 0px 8px;\n  flex-grow: 1;\n}\n.dv-tab .dv-default-tab .dv-default-tab-action {\n  padding: 4px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-sizing: border-box;\n}\n.dv-tab .dv-default-tab .dv-default-tab-action:hover {\n  border-radius: 2px;\n  background-color: var(--dv-icon-hover-background-color);\n}\n.dv-tabs-and-actions-container {\n  display: flex;\n  background-color: var(--dv-tabs-and-actions-container-background-color);\n  flex-shrink: 0;\n  box-sizing: border-box;\n  height: var(--dv-tabs-and-actions-container-height);\n  font-size: var(--dv-tabs-and-actions-container-font-size);\n}\n.dv-tabs-and-actions-container.dv-single-tab.dv-full-width-single-tab .dv-tabs-container {\n  flex-grow: 1;\n}\n.dv-tabs-and-actions-container.dv-single-tab.dv-full-width-single-tab .dv-tabs-container .dv-tab {\n  flex-grow: 1;\n}\n.dv-tabs-and-actions-container.dv-single-tab.dv-full-width-single-tab .dv-void-container {\n  flex-grow: 0;\n}\n.dv-tabs-and-actions-container .dv-void-container {\n  display: flex;\n  flex-grow: 1;\n  cursor: grab;\n}\n.dv-tabs-and-actions-container .dv-tabs-container {\n  display: flex;\n  overflow-x: overlay;\n  overflow-y: hidden;\n  scrollbar-width: thin;\n  /* Track */\n  /* Handle */\n}\n.dv-tabs-and-actions-container .dv-tabs-container::-webkit-scrollbar {\n  height: 3px;\n}\n.dv-tabs-and-actions-container .dv-tabs-container::-webkit-scrollbar-track {\n  background: transparent;\n}\n.dv-tabs-and-actions-container .dv-tabs-container::-webkit-scrollbar-thumb {\n  background: var(--dv-tabs-container-scrollbar-color);\n}\n.dv-tabs-and-actions-container .dv-tabs-container .dv-tab {\n  -webkit-user-drag: element;\n  outline: none;\n  min-width: 75px;\n  cursor: pointer;\n  position: relative;\n  box-sizing: border-box;\n}\n.dv-tabs-and-actions-container .dv-tabs-container .dv-tab:not(:first-child)::before {\n  content: \" \";\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 5;\n  pointer-events: none;\n  background-color: var(--dv-tab-divider-color);\n  width: 1px;\n  height: 100%;\n}\n.dv-watermark {\n  display: flex;\n  height: 100%;\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {



/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
module.exports = function (cssWithMappingToString) {
  var list = [];

  // return the list of modules as css string
  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";
      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }
      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }
      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }
      content += cssWithMappingToString(item);
      if (needLayer) {
        content += "}";
      }
      if (item[2]) {
        content += "}";
      }
      if (item[4]) {
        content += "}";
      }
      return content;
    }).join("");
  };

  // import a list of modules into the list
  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }
    var alreadyImportedModules = {};
    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];
        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }
    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);
      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }
      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }
      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }
      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }
      list.push(item);
    }
  };
  return list;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/sourceMaps.js":
/*!************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/sourceMaps.js ***!
  \************************************************************/
/***/ ((module) => {



module.exports = function (item) {
  var content = item[1];
  var cssMapping = item[3];
  if (!cssMapping) {
    return content;
  }
  if (typeof btoa === "function") {
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
    var sourceMapping = "/*# ".concat(data, " */");
    return [content].concat([sourceMapping]).join("\n");
  }
  return [content].join("\n");
};

/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/api/component.api.js":
/*!******************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/api/component.api.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DockviewApi: () => (/* binding */ DockviewApi),
/* harmony export */   GridviewApi: () => (/* binding */ GridviewApi),
/* harmony export */   PaneviewApi: () => (/* binding */ PaneviewApi),
/* harmony export */   SplitviewApi: () => (/* binding */ SplitviewApi)
/* harmony export */ });
class SplitviewApi {
    /**
     * The minimum size  the component can reach where size is measured in the direction of orientation provided.
     */
    get minimumSize() {
        return this.component.minimumSize;
    }
    /**
     * The maximum size the component can reach where size is measured in the direction of orientation provided.
     */
    get maximumSize() {
        return this.component.maximumSize;
    }
    /**
     * Width of the component.
     */
    get width() {
        return this.component.width;
    }
    /**
     * Height of the component.
     */
    get height() {
        return this.component.height;
    }
    /**
     * The current number of panels.
     */
    get length() {
        return this.component.length;
    }
    /**
     * The current orientation of the component.
     */
    get orientation() {
        return this.component.orientation;
    }
    /**
     * The list of current panels.
     */
    get panels() {
        return this.component.panels;
    }
    /**
     * Invoked after a layout is loaded through the `fromJSON` method.
     */
    get onDidLayoutFromJSON() {
        return this.component.onDidLayoutFromJSON;
    }
    /**
     * Invoked whenever any aspect of the layout changes.
     * If listening to this event it may be worth debouncing ouputs.
     */
    get onDidLayoutChange() {
        return this.component.onDidLayoutChange;
    }
    /**
     * Invoked when a view is added.
     */
    get onDidAddView() {
        return this.component.onDidAddView;
    }
    /**
     * Invoked when a view is removed.
     */
    get onDidRemoveView() {
        return this.component.onDidRemoveView;
    }
    constructor(component) {
        this.component = component;
    }
    /**
     * Removes an existing panel and optionally provide a `Sizing` method
     * for the subsequent resize.
     */
    removePanel(panel, sizing) {
        this.component.removePanel(panel, sizing);
    }
    /**
     * Focus the component.
     */
    focus() {
        this.component.focus();
    }
    /**
     * Get the reference to a panel given it's `string` id.
     */
    getPanel(id) {
        return this.component.getPanel(id);
    }
    /**
     * Layout the panel with a width and height.
     */
    layout(width, height) {
        return this.component.layout(width, height);
    }
    /**
     * Add a new panel and return the created instance.
     */
    addPanel(options) {
        return this.component.addPanel(options);
    }
    /**
     * Move a panel given it's current and desired index.
     */
    movePanel(from, to) {
        this.component.movePanel(from, to);
    }
    /**
     * Deserialize a layout to built a splitivew.
     */
    fromJSON(data) {
        this.component.fromJSON(data);
    }
    /** Serialize a layout */
    toJSON() {
        return this.component.toJSON();
    }
    /**
     * Remove all panels and clear the component.
     */
    clear() {
        this.component.clear();
    }
    /**
     * Update configuratable options.
     */
    updateOptions(options) {
        this.component.updateOptions(options);
    }
    /**
     * Release resources and teardown component. Do not call when using framework versions of dockview.
     */
    dispose() {
        this.component.dispose();
    }
}
class PaneviewApi {
    /**
     * The minimum size  the component can reach where size is measured in the direction of orientation provided.
     */
    get minimumSize() {
        return this.component.minimumSize;
    }
    /**
     * The maximum size the component can reach where size is measured in the direction of orientation provided.
     */
    get maximumSize() {
        return this.component.maximumSize;
    }
    /**
     * Width of the component.
     */
    get width() {
        return this.component.width;
    }
    /**
     * Height of the component.
     */
    get height() {
        return this.component.height;
    }
    /**
     * All panel objects.
     */
    get panels() {
        return this.component.panels;
    }
    /**
     * Invoked when any layout change occures, an aggregation of many events.
     */
    get onDidLayoutChange() {
        return this.component.onDidLayoutChange;
    }
    /**
     * Invoked after a layout is deserialzied using the `fromJSON` method.
     */
    get onDidLayoutFromJSON() {
        return this.component.onDidLayoutFromJSON;
    }
    /**
     * Invoked when a panel is added. May be called multiple times when moving panels.
     */
    get onDidAddView() {
        return this.component.onDidAddView;
    }
    /**
     * Invoked when a panel is removed. May be called multiple times when moving panels.
     */
    get onDidRemoveView() {
        return this.component.onDidRemoveView;
    }
    /**
     * Invoked when a Drag'n'Drop event occurs that the component was unable to handle. Exposed for custom Drag'n'Drop functionality.
     */
    get onDidDrop() {
        return this.component.onDidDrop;
    }
    get onUnhandledDragOverEvent() {
        return this.component.onUnhandledDragOverEvent;
    }
    constructor(component) {
        this.component = component;
    }
    /**
     * Remove a panel given the panel object.
     */
    removePanel(panel) {
        this.component.removePanel(panel);
    }
    /**
     * Get a panel object given a `string` id. May return `undefined`.
     */
    getPanel(id) {
        return this.component.getPanel(id);
    }
    /**
     * Move a panel given it's current and desired index.
     */
    movePanel(from, to) {
        this.component.movePanel(from, to);
    }
    /**
     *  Focus the component. Will try to focus an active panel if one exists.
     */
    focus() {
        this.component.focus();
    }
    /**
     * Force resize the component to an exact width and height. Read about auto-resizing before using.
     */
    layout(width, height) {
        this.component.layout(width, height);
    }
    /**
     * Add a panel and return the created object.
     */
    addPanel(options) {
        return this.component.addPanel(options);
    }
    /**
     * Create a component from a serialized object.
     */
    fromJSON(data) {
        this.component.fromJSON(data);
    }
    /**
     * Create a serialized object of the current component.
     */
    toJSON() {
        return this.component.toJSON();
    }
    /**
     * Reset the component back to an empty and default state.
     */
    clear() {
        this.component.clear();
    }
    /**
     * Update configuratable options.
     */
    updateOptions(options) {
        this.component.updateOptions(options);
    }
    /**
     * Release resources and teardown component. Do not call when using framework versions of dockview.
     */
    dispose() {
        this.component.dispose();
    }
}
class GridviewApi {
    /**
     * Width of the component.
     */
    get width() {
        return this.component.width;
    }
    /**
     * Height of the component.
     */
    get height() {
        return this.component.height;
    }
    /**
     * Minimum height of the component.
     */
    get minimumHeight() {
        return this.component.minimumHeight;
    }
    /**
     * Maximum height of the component.
     */
    get maximumHeight() {
        return this.component.maximumHeight;
    }
    /**
     * Minimum width of the component.
     */
    get minimumWidth() {
        return this.component.minimumWidth;
    }
    /**
     * Maximum width of the component.
     */
    get maximumWidth() {
        return this.component.maximumWidth;
    }
    /**
     * Invoked when any layout change occures, an aggregation of many events.
     */
    get onDidLayoutChange() {
        return this.component.onDidLayoutChange;
    }
    /**
     * Invoked when a panel is added. May be called multiple times when moving panels.
     */
    get onDidAddPanel() {
        return this.component.onDidAddGroup;
    }
    /**
     * Invoked when a panel is removed. May be called multiple times when moving panels.
     */
    get onDidRemovePanel() {
        return this.component.onDidRemoveGroup;
    }
    /**
     * Invoked when the active panel changes. May be undefined if no panel is active.
     */
    get onDidActivePanelChange() {
        return this.component.onDidActiveGroupChange;
    }
    /**
     * Invoked after a layout is deserialzied using the `fromJSON` method.
     */
    get onDidLayoutFromJSON() {
        return this.component.onDidLayoutFromJSON;
    }
    /**
     * All panel objects.
     */
    get panels() {
        return this.component.groups;
    }
    /**
     * Current orientation. Can be changed after initialization.
     */
    get orientation() {
        return this.component.orientation;
    }
    set orientation(value) {
        this.component.updateOptions({ orientation: value });
    }
    constructor(component) {
        this.component = component;
    }
    /**
     *  Focus the component. Will try to focus an active panel if one exists.
     */
    focus() {
        this.component.focus();
    }
    /**
     * Force resize the component to an exact width and height. Read about auto-resizing before using.
     */
    layout(width, height, force = false) {
        this.component.layout(width, height, force);
    }
    /**
     * Add a panel and return the created object.
     */
    addPanel(options) {
        return this.component.addPanel(options);
    }
    /**
     * Remove a panel given the panel object.
     */
    removePanel(panel, sizing) {
        this.component.removePanel(panel, sizing);
    }
    /**
     * Move a panel in a particular direction relative to another panel.
     */
    movePanel(panel, options) {
        this.component.movePanel(panel, options);
    }
    /**
     * Get a panel object given a `string` id. May return `undefined`.
     */
    getPanel(id) {
        return this.component.getPanel(id);
    }
    /**
     * Create a component from a serialized object.
     */
    fromJSON(data) {
        return this.component.fromJSON(data);
    }
    /**
     * Create a serialized object of the current component.
     */
    toJSON() {
        return this.component.toJSON();
    }
    /**
     * Reset the component back to an empty and default state.
     */
    clear() {
        this.component.clear();
    }
    updateOptions(options) {
        this.component.updateOptions(options);
    }
    /**
     * Release resources and teardown component. Do not call when using framework versions of dockview.
     */
    dispose() {
        this.component.dispose();
    }
}
class DockviewApi {
    /**
     * The unique identifier for this instance. Used to manage scope of Drag'n'Drop events.
     */
    get id() {
        return this.component.id;
    }
    /**
     * Width of the component.
     */
    get width() {
        return this.component.width;
    }
    /**
     * Height of the component.
     */
    get height() {
        return this.component.height;
    }
    /**
     * Minimum height of the component.
     */
    get minimumHeight() {
        return this.component.minimumHeight;
    }
    /**
     * Maximum height of the component.
     */
    get maximumHeight() {
        return this.component.maximumHeight;
    }
    /**
     * Minimum width of the component.
     */
    get minimumWidth() {
        return this.component.minimumWidth;
    }
    /**
     * Maximum width of the component.
     */
    get maximumWidth() {
        return this.component.maximumWidth;
    }
    /**
     * Total number of groups.
     */
    get size() {
        return this.component.size;
    }
    /**
     * Total number of panels.
     */
    get totalPanels() {
        return this.component.totalPanels;
    }
    get gap() {
        return this.component.gap;
    }
    /**
     * Invoked when the active group changes. May be undefined if no group is active.
     */
    get onDidActiveGroupChange() {
        return this.component.onDidActiveGroupChange;
    }
    /**
     * Invoked when a group is added. May be called multiple times when moving groups.
     */
    get onDidAddGroup() {
        return this.component.onDidAddGroup;
    }
    /**
     * Invoked when a group is removed. May be called multiple times when moving groups.
     */
    get onDidRemoveGroup() {
        return this.component.onDidRemoveGroup;
    }
    /**
     * Invoked when the active panel changes. May be undefined if no panel is active.
     */
    get onDidActivePanelChange() {
        return this.component.onDidActivePanelChange;
    }
    /**
     * Invoked when a panel is added. May be called multiple times when moving panels.
     */
    get onDidAddPanel() {
        return this.component.onDidAddPanel;
    }
    /**
     * Invoked when a panel is removed. May be called multiple times when moving panels.
     */
    get onDidRemovePanel() {
        return this.component.onDidRemovePanel;
    }
    get onDidMovePanel() {
        return this.component.onDidMovePanel;
    }
    /**
     * Invoked after a layout is deserialzied using the `fromJSON` method.
     */
    get onDidLayoutFromJSON() {
        return this.component.onDidLayoutFromJSON;
    }
    /**
     * Invoked when any layout change occures, an aggregation of many events.
     */
    get onDidLayoutChange() {
        return this.component.onDidLayoutChange;
    }
    /**
     * Invoked when a Drag'n'Drop event occurs that the component was unable to handle. Exposed for custom Drag'n'Drop functionality.
     */
    get onDidDrop() {
        return this.component.onDidDrop;
    }
    /**
     * Invoked when a Drag'n'Drop event occurs but before dockview handles it giving the user an opportunity to intecept and
     * prevent the event from occuring using the standard `preventDefault()` syntax.
     *
     * Preventing certain events may causes unexpected behaviours, use carefully.
     */
    get onWillDrop() {
        return this.component.onWillDrop;
    }
    /**
     * Invoked before an overlay is shown indicating a drop target.
     *
     * Calling `event.preventDefault()` will prevent the overlay being shown and prevent
     * the any subsequent drop event.
     */
    get onWillShowOverlay() {
        return this.component.onWillShowOverlay;
    }
    /**
     * Invoked before a group is dragged.
     *
     * Calling `event.nativeEvent.preventDefault()` will prevent the group drag starting.
     *
     */
    get onWillDragGroup() {
        return this.component.onWillDragGroup;
    }
    /**
     * Invoked before a panel is dragged.
     *
     * Calling `event.nativeEvent.preventDefault()` will prevent the panel drag starting.
     */
    get onWillDragPanel() {
        return this.component.onWillDragPanel;
    }
    get onUnhandledDragOverEvent() {
        return this.component.onUnhandledDragOverEvent;
    }
    /**
     * All panel objects.
     */
    get panels() {
        return this.component.panels;
    }
    /**
     * All group objects.
     */
    get groups() {
        return this.component.groups;
    }
    /**
     *  Active panel object.
     */
    get activePanel() {
        return this.component.activePanel;
    }
    /**
     * Active group object.
     */
    get activeGroup() {
        return this.component.activeGroup;
    }
    constructor(component) {
        this.component = component;
    }
    /**
     *  Focus the component. Will try to focus an active panel if one exists.
     */
    focus() {
        this.component.focus();
    }
    /**
     * Get a panel object given a `string` id. May return `undefined`.
     */
    getPanel(id) {
        return this.component.getGroupPanel(id);
    }
    /**
     * Force resize the component to an exact width and height. Read about auto-resizing before using.
     */
    layout(width, height, force = false) {
        this.component.layout(width, height, force);
    }
    /**
     * Add a panel and return the created object.
     */
    addPanel(options) {
        return this.component.addPanel(options);
    }
    /**
     * Remove a panel given the panel object.
     */
    removePanel(panel) {
        this.component.removePanel(panel);
    }
    /**
     * Add a group and return the created object.
     */
    addGroup(options) {
        return this.component.addGroup(options);
    }
    /**
     * Close all groups and panels.
     */
    closeAllGroups() {
        return this.component.closeAllGroups();
    }
    /**
     * Remove a group and any panels within the group.
     */
    removeGroup(group) {
        this.component.removeGroup(group);
    }
    /**
     * Get a group object given a `string` id. May return undefined.
     */
    getGroup(id) {
        return this.component.getPanel(id);
    }
    /**
     * Add a floating group
     */
    addFloatingGroup(item, options) {
        return this.component.addFloatingGroup(item, options);
    }
    /**
     * Create a component from a serialized object.
     */
    fromJSON(data) {
        this.component.fromJSON(data);
    }
    /**
     * Create a serialized object of the current component.
     */
    toJSON() {
        return this.component.toJSON();
    }
    /**
     * Reset the component back to an empty and default state.
     */
    clear() {
        this.component.clear();
    }
    /**
     * Move the focus progmatically to the next panel or group.
     */
    moveToNext(options) {
        this.component.moveToNext(options);
    }
    /**
     * Move the focus progmatically to the previous panel or group.
     */
    moveToPrevious(options) {
        this.component.moveToPrevious(options);
    }
    maximizeGroup(panel) {
        this.component.maximizeGroup(panel.group);
    }
    hasMaximizedGroup() {
        return this.component.hasMaximizedGroup();
    }
    exitMaximizedGroup() {
        this.component.exitMaximizedGroup();
    }
    get onDidMaximizedGroupChange() {
        return this.component.onDidMaximizedGroupChange;
    }
    /**
     * Add a popout group in a new Window
     */
    addPopoutGroup(item, options) {
        return this.component.addPopoutGroup(item, options);
    }
    setGap(gap) {
        this.component.updateOptions({ gap });
    }
    updateOptions(options) {
        this.component.updateOptions(options);
    }
    /**
     * Release resources and teardown component. Do not call when using framework versions of dockview.
     */
    dispose() {
        this.component.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/api/dockviewGroupPanelApi.js":
/*!**************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/api/dockviewGroupPanelApi.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DockviewGroupPanelApiImpl: () => (/* binding */ DockviewGroupPanelApiImpl)
/* harmony export */ });
/* harmony import */ var _dnd_droptarget__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dnd/droptarget */ "./node_modules/dockview-core/dist/esm/dnd/droptarget.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _gridviewPanelApi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./gridviewPanelApi */ "./node_modules/dockview-core/dist/esm/api/gridviewPanelApi.js");



const NOT_INITIALIZED_MESSAGE = 'dockview: DockviewGroupPanelApiImpl not initialized';
class DockviewGroupPanelApiImpl extends _gridviewPanelApi__WEBPACK_IMPORTED_MODULE_2__.GridviewPanelApiImpl {
    get location() {
        if (!this._group) {
            throw new Error(NOT_INITIALIZED_MESSAGE);
        }
        return this._group.model.location;
    }
    constructor(id, accessor) {
        super(id, '__dockviewgroup__');
        this.accessor = accessor;
        this._onDidLocationChange = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidLocationChange = this._onDidLocationChange.event;
        this._onDidActivePanelChange = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidActivePanelChange = this._onDidActivePanelChange.event;
        this.addDisposables(this._onDidLocationChange, this._onDidActivePanelChange);
    }
    close() {
        if (!this._group) {
            return;
        }
        return this.accessor.removeGroup(this._group);
    }
    getWindow() {
        return this.location.type === 'popout'
            ? this.location.getWindow()
            : window;
    }
    moveTo(options) {
        var _a, _b, _c;
        if (!this._group) {
            throw new Error(NOT_INITIALIZED_MESSAGE);
        }
        const group = (_a = options.group) !== null && _a !== void 0 ? _a : this.accessor.addGroup({
            direction: (0,_dnd_droptarget__WEBPACK_IMPORTED_MODULE_0__.positionToDirection)((_b = options.position) !== null && _b !== void 0 ? _b : 'right'),
            skipSetActive: true,
        });
        this.accessor.moveGroupOrPanel({
            from: { groupId: this._group.id },
            to: {
                group,
                position: options.group
                    ? (_c = options.position) !== null && _c !== void 0 ? _c : 'center'
                    : 'center',
                index: options.index,
            },
        });
    }
    maximize() {
        if (!this._group) {
            throw new Error(NOT_INITIALIZED_MESSAGE);
        }
        if (this.location.type !== 'grid') {
            // only grid groups can be maximized
            return;
        }
        this.accessor.maximizeGroup(this._group);
    }
    isMaximized() {
        if (!this._group) {
            throw new Error(NOT_INITIALIZED_MESSAGE);
        }
        return this.accessor.isMaximizedGroup(this._group);
    }
    exitMaximized() {
        if (!this._group) {
            throw new Error(NOT_INITIALIZED_MESSAGE);
        }
        if (this.isMaximized()) {
            this.accessor.exitMaximizedGroup();
        }
    }
    initialize(group) {
        this._group = group;
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/api/dockviewPanelApi.js":
/*!*********************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/api/dockviewPanelApi.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DockviewPanelApiImpl: () => (/* binding */ DockviewPanelApiImpl)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _gridviewPanelApi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gridviewPanelApi */ "./node_modules/dockview-core/dist/esm/api/gridviewPanelApi.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");



class DockviewPanelApiImpl extends _gridviewPanelApi__WEBPACK_IMPORTED_MODULE_1__.GridviewPanelApiImpl {
    get location() {
        return this.group.api.location;
    }
    get title() {
        return this.panel.title;
    }
    get isGroupActive() {
        return this.group.isActive;
    }
    get renderer() {
        return this.panel.renderer;
    }
    set group(value) {
        const oldGroup = this._group;
        if (this._group !== value) {
            this._group = value;
            this._onDidGroupChange.fire({});
            this.setupGroupEventListeners(oldGroup);
            this._onDidLocationChange.fire({
                location: this.group.api.location,
            });
        }
    }
    get group() {
        return this._group;
    }
    get tabComponent() {
        return this._tabComponent;
    }
    constructor(panel, group, accessor, component, tabComponent) {
        super(panel.id, component);
        this.panel = panel;
        this.accessor = accessor;
        this._onDidTitleChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidTitleChange = this._onDidTitleChange.event;
        this._onDidActiveGroupChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidActiveGroupChange = this._onDidActiveGroupChange.event;
        this._onDidGroupChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidGroupChange = this._onDidGroupChange.event;
        this._onDidRendererChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidRendererChange = this._onDidRendererChange.event;
        this._onDidLocationChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidLocationChange = this._onDidLocationChange.event;
        this.groupEventsDisposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.MutableDisposable();
        this._tabComponent = tabComponent;
        this.initialize(panel);
        this._group = group;
        this.setupGroupEventListeners();
        this.addDisposables(this.groupEventsDisposable, this._onDidRendererChange, this._onDidTitleChange, this._onDidGroupChange, this._onDidActiveGroupChange, this._onDidLocationChange);
    }
    getWindow() {
        return this.group.api.getWindow();
    }
    moveTo(options) {
        var _a, _b;
        this.accessor.moveGroupOrPanel({
            from: { groupId: this._group.id, panelId: this.panel.id },
            to: {
                group: (_a = options.group) !== null && _a !== void 0 ? _a : this._group,
                position: options.group
                    ? (_b = options.position) !== null && _b !== void 0 ? _b : 'center'
                    : 'center',
                index: options.index,
            },
        });
    }
    setTitle(title) {
        this.panel.setTitle(title);
    }
    setRenderer(renderer) {
        this.panel.setRenderer(renderer);
    }
    close() {
        this.group.model.closePanel(this.panel);
    }
    maximize() {
        this.group.api.maximize();
    }
    isMaximized() {
        return this.group.api.isMaximized();
    }
    exitMaximized() {
        this.group.api.exitMaximized();
    }
    setupGroupEventListeners(previousGroup) {
        var _a;
        let _trackGroupActive = (_a = previousGroup === null || previousGroup === void 0 ? void 0 : previousGroup.isActive) !== null && _a !== void 0 ? _a : false; // prevent duplicate events with same state
        this.groupEventsDisposable.value = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable(this.group.api.onDidVisibilityChange((event) => {
            const hasBecomeHidden = !event.isVisible && this.isVisible;
            const hasBecomeVisible = event.isVisible && !this.isVisible;
            const isActivePanel = this.group.model.isPanelActive(this.panel);
            if (hasBecomeHidden || (hasBecomeVisible && isActivePanel)) {
                this._onDidVisibilityChange.fire(event);
            }
        }), this.group.api.onDidLocationChange((event) => {
            if (this.group !== this.panel.group) {
                return;
            }
            this._onDidLocationChange.fire(event);
        }), this.group.api.onDidActiveChange(() => {
            if (this.group !== this.panel.group) {
                return;
            }
            if (_trackGroupActive !== this.isGroupActive) {
                _trackGroupActive = this.isGroupActive;
                this._onDidActiveGroupChange.fire({
                    isActive: this.isGroupActive,
                });
            }
        }));
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/api/entryPoints.js":
/*!****************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/api/entryPoints.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createDockview: () => (/* binding */ createDockview),
/* harmony export */   createGridview: () => (/* binding */ createGridview),
/* harmony export */   createPaneview: () => (/* binding */ createPaneview),
/* harmony export */   createSplitview: () => (/* binding */ createSplitview)
/* harmony export */ });
/* harmony import */ var _api_component_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api/component.api */ "./node_modules/dockview-core/dist/esm/api/component.api.js");
/* harmony import */ var _dockview_dockviewComponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dockview/dockviewComponent */ "./node_modules/dockview-core/dist/esm/dockview/dockviewComponent.js");
/* harmony import */ var _gridview_gridviewComponent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../gridview/gridviewComponent */ "./node_modules/dockview-core/dist/esm/gridview/gridviewComponent.js");
/* harmony import */ var _paneview_paneviewComponent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../paneview/paneviewComponent */ "./node_modules/dockview-core/dist/esm/paneview/paneviewComponent.js");
/* harmony import */ var _splitview_splitviewComponent__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../splitview/splitviewComponent */ "./node_modules/dockview-core/dist/esm/splitview/splitviewComponent.js");





function createDockview(element, options) {
    const component = new _dockview_dockviewComponent__WEBPACK_IMPORTED_MODULE_1__.DockviewComponent(element, options);
    return component.api;
}
function createSplitview(element, options) {
    const component = new _splitview_splitviewComponent__WEBPACK_IMPORTED_MODULE_4__.SplitviewComponent(element, options);
    return new _api_component_api__WEBPACK_IMPORTED_MODULE_0__.SplitviewApi(component);
}
function createGridview(element, options) {
    const component = new _gridview_gridviewComponent__WEBPACK_IMPORTED_MODULE_2__.GridviewComponent(element, options);
    return new _api_component_api__WEBPACK_IMPORTED_MODULE_0__.GridviewApi(component);
}
function createPaneview(element, options) {
    const component = new _paneview_paneviewComponent__WEBPACK_IMPORTED_MODULE_3__.PaneviewComponent(element, options);
    return new _api_component_api__WEBPACK_IMPORTED_MODULE_0__.PaneviewApi(component);
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/api/gridviewPanelApi.js":
/*!*********************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/api/gridviewPanelApi.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GridviewPanelApiImpl: () => (/* binding */ GridviewPanelApiImpl)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _panelApi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./panelApi */ "./node_modules/dockview-core/dist/esm/api/panelApi.js");


class GridviewPanelApiImpl extends _panelApi__WEBPACK_IMPORTED_MODULE_1__.PanelApiImpl {
    constructor(id, component, panel) {
        super(id, component);
        this._onDidConstraintsChangeInternal = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidConstraintsChangeInternal = this._onDidConstraintsChangeInternal.event;
        this._onDidConstraintsChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidConstraintsChange = this._onDidConstraintsChange.event;
        this._onDidSizeChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidSizeChange = this._onDidSizeChange.event;
        this.addDisposables(this._onDidConstraintsChangeInternal, this._onDidConstraintsChange, this._onDidSizeChange);
        if (panel) {
            this.initialize(panel);
        }
    }
    setConstraints(value) {
        this._onDidConstraintsChangeInternal.fire(value);
    }
    setSize(event) {
        this._onDidSizeChange.fire(event);
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/api/panelApi.js":
/*!*************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/api/panelApi.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PanelApiImpl: () => (/* binding */ PanelApiImpl),
/* harmony export */   WillFocusEvent: () => (/* binding */ WillFocusEvent)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");


class WillFocusEvent extends _events__WEBPACK_IMPORTED_MODULE_0__.DockviewEvent {
    constructor() {
        super();
    }
}
/**
 * A core api implementation that should be used across all panel-like objects
 */
class PanelApiImpl extends _lifecycle__WEBPACK_IMPORTED_MODULE_1__.CompositeDisposable {
    get isFocused() {
        return this._isFocused;
    }
    get isActive() {
        return this._isActive;
    }
    get isVisible() {
        return this._isVisible;
    }
    get width() {
        return this._width;
    }
    get height() {
        return this._height;
    }
    constructor(id, component) {
        super();
        this.id = id;
        this.component = component;
        this._isFocused = false;
        this._isActive = false;
        this._isVisible = true;
        this._width = 0;
        this._height = 0;
        this._parameters = {};
        this.panelUpdatesDisposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_1__.MutableDisposable();
        this._onDidDimensionChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidDimensionsChange = this._onDidDimensionChange.event;
        this._onDidChangeFocus = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidFocusChange = this._onDidChangeFocus.event;
        //
        this._onWillFocus = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onWillFocus = this._onWillFocus.event;
        //
        this._onDidVisibilityChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidVisibilityChange = this._onDidVisibilityChange.event;
        this._onWillVisibilityChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onWillVisibilityChange = this._onWillVisibilityChange.event;
        this._onDidActiveChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidActiveChange = this._onDidActiveChange.event;
        this._onActiveChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onActiveChange = this._onActiveChange.event;
        this._onDidParametersChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidParametersChange = this._onDidParametersChange.event;
        this.addDisposables(this.onDidFocusChange((event) => {
            this._isFocused = event.isFocused;
        }), this.onDidActiveChange((event) => {
            this._isActive = event.isActive;
        }), this.onDidVisibilityChange((event) => {
            this._isVisible = event.isVisible;
        }), this.onDidDimensionsChange((event) => {
            this._width = event.width;
            this._height = event.height;
        }), this.panelUpdatesDisposable, this._onDidDimensionChange, this._onDidChangeFocus, this._onDidVisibilityChange, this._onDidActiveChange, this._onWillFocus, this._onActiveChange, this._onWillFocus, this._onWillVisibilityChange, this._onDidParametersChange);
    }
    getParameters() {
        return this._parameters;
    }
    initialize(panel) {
        this.panelUpdatesDisposable.value = this._onDidParametersChange.event((parameters) => {
            this._parameters = parameters;
            panel.update({
                params: parameters,
            });
        });
    }
    setVisible(isVisible) {
        this._onWillVisibilityChange.fire({ isVisible });
    }
    setActive() {
        this._onActiveChange.fire();
    }
    updateParameters(parameters) {
        this._onDidParametersChange.fire(parameters);
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/api/paneviewPanelApi.js":
/*!*********************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/api/paneviewPanelApi.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PaneviewPanelApiImpl: () => (/* binding */ PaneviewPanelApiImpl)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _splitviewPanelApi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./splitviewPanelApi */ "./node_modules/dockview-core/dist/esm/api/splitviewPanelApi.js");


class PaneviewPanelApiImpl extends _splitviewPanelApi__WEBPACK_IMPORTED_MODULE_1__.SplitviewPanelApiImpl {
    set pane(pane) {
        this._pane = pane;
    }
    constructor(id, component) {
        super(id, component);
        this._onDidExpansionChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter({
            replay: true,
        });
        this.onDidExpansionChange = this._onDidExpansionChange.event;
        this._onMouseEnter = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter({});
        this.onMouseEnter = this._onMouseEnter.event;
        this._onMouseLeave = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter({});
        this.onMouseLeave = this._onMouseLeave.event;
        this.addDisposables(this._onDidExpansionChange, this._onMouseEnter, this._onMouseLeave);
    }
    setExpanded(isExpanded) {
        var _a;
        (_a = this._pane) === null || _a === void 0 ? void 0 : _a.setExpanded(isExpanded);
    }
    get isExpanded() {
        var _a;
        return !!((_a = this._pane) === null || _a === void 0 ? void 0 : _a.isExpanded());
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/api/splitviewPanelApi.js":
/*!**********************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/api/splitviewPanelApi.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SplitviewPanelApiImpl: () => (/* binding */ SplitviewPanelApiImpl)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _panelApi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./panelApi */ "./node_modules/dockview-core/dist/esm/api/panelApi.js");


class SplitviewPanelApiImpl extends _panelApi__WEBPACK_IMPORTED_MODULE_1__.PanelApiImpl {
    //
    constructor(id, component) {
        super(id, component);
        this._onDidConstraintsChangeInternal = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidConstraintsChangeInternal = this._onDidConstraintsChangeInternal.event;
        //
        this._onDidConstraintsChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter({
            replay: true,
        });
        this.onDidConstraintsChange = this._onDidConstraintsChange.event;
        //
        this._onDidSizeChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidSizeChange = this._onDidSizeChange.event;
        this.addDisposables(this._onDidConstraintsChangeInternal, this._onDidConstraintsChange, this._onDidSizeChange);
    }
    setConstraints(value) {
        this._onDidConstraintsChangeInternal.fire(value);
    }
    setSize(event) {
        this._onDidSizeChange.fire(event);
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/array.js":
/*!******************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/array.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   firstIndex: () => (/* binding */ firstIndex),
/* harmony export */   last: () => (/* binding */ last),
/* harmony export */   pushToEnd: () => (/* binding */ pushToEnd),
/* harmony export */   pushToStart: () => (/* binding */ pushToStart),
/* harmony export */   remove: () => (/* binding */ remove),
/* harmony export */   sequenceEquals: () => (/* binding */ sequenceEquals),
/* harmony export */   tail: () => (/* binding */ tail)
/* harmony export */ });
function tail(arr) {
    if (arr.length === 0) {
        throw new Error('Invalid tail call');
    }
    return [arr.slice(0, arr.length - 1), arr[arr.length - 1]];
}
function last(arr) {
    return arr.length > 0 ? arr[arr.length - 1] : undefined;
}
function sequenceEquals(arr1, arr2) {
    if (arr1.length !== arr2.length) {
        return false;
    }
    for (let i = 0; i < arr1.length; i++) {
        if (arr1[i] !== arr2[i]) {
            return false;
        }
    }
    return true;
}
/**
 * Pushes an element to the start of the array, if found.
 */
function pushToStart(arr, value) {
    const index = arr.indexOf(value);
    if (index > -1) {
        arr.splice(index, 1);
        arr.unshift(value);
    }
}
/**
 * Pushes an element to the end of the array, if found.
 */
function pushToEnd(arr, value) {
    const index = arr.indexOf(value);
    if (index > -1) {
        arr.splice(index, 1);
        arr.push(value);
    }
}
function firstIndex(array, fn) {
    for (let i = 0; i < array.length; i++) {
        const element = array[i];
        if (fn(element)) {
            return i;
        }
    }
    return -1;
}
function remove(array, value) {
    const index = array.findIndex((t) => t === value);
    if (index > -1) {
        array.splice(index, 1);
        return true;
    }
    return false;
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/constants.js":
/*!**********************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/constants.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE: () => (/* binding */ DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE),
/* harmony export */   DEFAULT_FLOATING_GROUP_POSITION: () => (/* binding */ DEFAULT_FLOATING_GROUP_POSITION)
/* harmony export */ });
const DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE = 100;
const DEFAULT_FLOATING_GROUP_POSITION = { left: 100, top: 100, width: 300, height: 300 };


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dnd/abstractDragHandler.js":
/*!************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dnd/abstractDragHandler.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DragHandler: () => (/* binding */ DragHandler)
/* harmony export */ });
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");



class DragHandler extends _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable {
    constructor(el) {
        super();
        this.el = el;
        this.dataDisposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.MutableDisposable();
        this.pointerEventsDisposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.MutableDisposable();
        this._onDragStart = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDragStart = this._onDragStart.event;
        this.addDisposables(this._onDragStart, this.dataDisposable, this.pointerEventsDisposable);
        this.configure();
    }
    isCancelled(_event) {
        return false;
    }
    configure() {
        this.addDisposables(this._onDragStart, (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(this.el, 'dragstart', (event) => {
            if (event.defaultPrevented || this.isCancelled(event)) {
                event.preventDefault();
                return;
            }
            const iframes = (0,_dom__WEBPACK_IMPORTED_MODULE_0__.disableIframePointEvents)();
            this.pointerEventsDisposable.value = {
                dispose: () => {
                    iframes.release();
                },
            };
            this.el.classList.add('dv-dragged');
            setTimeout(() => this.el.classList.remove('dv-dragged'), 0);
            this.dataDisposable.value = this.getData(event);
            this._onDragStart.fire(event);
            if (event.dataTransfer) {
                event.dataTransfer.effectAllowed = 'move';
                const hasData = event.dataTransfer.items.length > 0;
                if (!hasData) {
                    /**
                     * Although this is not used by dockview many third party dnd libraries will check
                     * dataTransfer.types to determine valid drag events.
                     *
                     * For example: in react-dnd if dataTransfer.types is not set then the dragStart event will be cancelled
                     * through .preventDefault(). Since this is applied globally to all drag events this would break dockviews
                     * dnd logic. You can see the code at
                     * https://github.com/react-dnd/react-dnd/blob/main/packages/backend-html5/src/HTML5BackendImpl.ts#L542
                     */
                    event.dataTransfer.setData('text/plain', '');
                }
            }
        }), (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(this.el, 'dragend', () => {
            this.pointerEventsDisposable.dispose();
            this.dataDisposable.dispose();
        }));
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dnd/dataTransfer.js":
/*!*****************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dnd/dataTransfer.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LocalSelectionTransfer: () => (/* binding */ LocalSelectionTransfer),
/* harmony export */   PaneTransfer: () => (/* binding */ PaneTransfer),
/* harmony export */   PanelTransfer: () => (/* binding */ PanelTransfer),
/* harmony export */   getPaneData: () => (/* binding */ getPaneData),
/* harmony export */   getPanelData: () => (/* binding */ getPanelData)
/* harmony export */ });
class TransferObject {
}
class PanelTransfer extends TransferObject {
    constructor(viewId, groupId, panelId) {
        super();
        this.viewId = viewId;
        this.groupId = groupId;
        this.panelId = panelId;
    }
}
class PaneTransfer extends TransferObject {
    constructor(viewId, paneId) {
        super();
        this.viewId = viewId;
        this.paneId = paneId;
    }
}
/**
 * A singleton to store transfer data during drag & drop operations that are only valid within the application.
 */
class LocalSelectionTransfer {
    constructor() {
        // protect against external instantiation
    }
    static getInstance() {
        return LocalSelectionTransfer.INSTANCE;
    }
    hasData(proto) {
        return proto && proto === this.proto;
    }
    clearData(proto) {
        if (this.hasData(proto)) {
            this.proto = undefined;
            this.data = undefined;
        }
    }
    getData(proto) {
        if (this.hasData(proto)) {
            return this.data;
        }
        return undefined;
    }
    setData(data, proto) {
        if (proto) {
            this.data = data;
            this.proto = proto;
        }
    }
}
LocalSelectionTransfer.INSTANCE = new LocalSelectionTransfer();
function getPanelData() {
    const panelTransfer = LocalSelectionTransfer.getInstance();
    const isPanelEvent = panelTransfer.hasData(PanelTransfer.prototype);
    if (!isPanelEvent) {
        return undefined;
    }
    return panelTransfer.getData(PanelTransfer.prototype)[0];
}
function getPaneData() {
    const paneTransfer = LocalSelectionTransfer.getInstance();
    const isPanelEvent = paneTransfer.hasData(PaneTransfer.prototype);
    if (!isPanelEvent) {
        return undefined;
    }
    return paneTransfer.getData(PaneTransfer.prototype)[0];
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dnd/dnd.js":
/*!********************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dnd/dnd.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DragAndDropObserver: () => (/* binding */ DragAndDropObserver)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");


class DragAndDropObserver extends _lifecycle__WEBPACK_IMPORTED_MODULE_1__.CompositeDisposable {
    constructor(element, callbacks) {
        super();
        this.element = element;
        this.callbacks = callbacks;
        this.target = null;
        this.registerListeners();
    }
    onDragEnter(e) {
        this.target = e.target;
        this.callbacks.onDragEnter(e);
    }
    onDragOver(e) {
        e.preventDefault(); // needed so that the drop event fires (https://stackoverflow.com/questions/21339924/drop-event-not-firing-in-chrome)
        if (this.callbacks.onDragOver) {
            this.callbacks.onDragOver(e);
        }
    }
    onDragLeave(e) {
        if (this.target === e.target) {
            this.target = null;
            this.callbacks.onDragLeave(e);
        }
    }
    onDragEnd(e) {
        this.target = null;
        this.callbacks.onDragEnd(e);
    }
    onDrop(e) {
        this.callbacks.onDrop(e);
    }
    registerListeners() {
        this.addDisposables((0,_events__WEBPACK_IMPORTED_MODULE_0__.addDisposableListener)(this.element, 'dragenter', (e) => {
            this.onDragEnter(e);
        }, true));
        this.addDisposables((0,_events__WEBPACK_IMPORTED_MODULE_0__.addDisposableListener)(this.element, 'dragover', (e) => {
            this.onDragOver(e);
        }, true));
        this.addDisposables((0,_events__WEBPACK_IMPORTED_MODULE_0__.addDisposableListener)(this.element, 'dragleave', (e) => {
            this.onDragLeave(e);
        }));
        this.addDisposables((0,_events__WEBPACK_IMPORTED_MODULE_0__.addDisposableListener)(this.element, 'dragend', (e) => {
            this.onDragEnd(e);
        }));
        this.addDisposables((0,_events__WEBPACK_IMPORTED_MODULE_0__.addDisposableListener)(this.element, 'drop', (e) => {
            this.onDrop(e);
        }));
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dnd/droptarget.js":
/*!***************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dnd/droptarget.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Droptarget: () => (/* binding */ Droptarget),
/* harmony export */   WillShowOverlayEvent: () => (/* binding */ WillShowOverlayEvent),
/* harmony export */   calculateQuadrantAsPercentage: () => (/* binding */ calculateQuadrantAsPercentage),
/* harmony export */   calculateQuadrantAsPixels: () => (/* binding */ calculateQuadrantAsPixels),
/* harmony export */   directionToPosition: () => (/* binding */ directionToPosition),
/* harmony export */   positionToDirection: () => (/* binding */ positionToDirection)
/* harmony export */ });
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _dnd__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dnd */ "./node_modules/dockview-core/dist/esm/dnd/dnd.js");
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../math */ "./node_modules/dockview-core/dist/esm/math.js");





class WillShowOverlayEvent extends _events__WEBPACK_IMPORTED_MODULE_1__.DockviewEvent {
    get nativeEvent() {
        return this.options.nativeEvent;
    }
    get position() {
        return this.options.position;
    }
    constructor(options) {
        super();
        this.options = options;
    }
}
function directionToPosition(direction) {
    switch (direction) {
        case 'above':
            return 'top';
        case 'below':
            return 'bottom';
        case 'left':
            return 'left';
        case 'right':
            return 'right';
        case 'within':
            return 'center';
        default:
            throw new Error(`invalid direction '${direction}'`);
    }
}
function positionToDirection(position) {
    switch (position) {
        case 'top':
            return 'above';
        case 'bottom':
            return 'below';
        case 'left':
            return 'left';
        case 'right':
            return 'right';
        case 'center':
            return 'within';
        default:
            throw new Error(`invalid position '${position}'`);
    }
}
const DEFAULT_ACTIVATION_SIZE = {
    value: 20,
    type: 'percentage',
};
const DEFAULT_SIZE = {
    value: 50,
    type: 'percentage',
};
const SMALL_WIDTH_BOUNDARY = 100;
const SMALL_HEIGHT_BOUNDARY = 100;
class Droptarget extends _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable {
    get state() {
        return this._state;
    }
    constructor(element, options) {
        super();
        this.element = element;
        this.options = options;
        this._onDrop = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDrop = this._onDrop.event;
        this._onWillShowOverlay = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onWillShowOverlay = this._onWillShowOverlay.event;
        // use a set to take advantage of #<set>.has
        this._acceptedTargetZonesSet = new Set(this.options.acceptedTargetZones);
        this.dnd = new _dnd__WEBPACK_IMPORTED_MODULE_3__.DragAndDropObserver(this.element, {
            onDragEnter: () => undefined,
            onDragOver: (e) => {
                if (this._acceptedTargetZonesSet.size === 0) {
                    this.removeDropTarget();
                    return;
                }
                const width = this.element.clientWidth;
                const height = this.element.clientHeight;
                if (width === 0 || height === 0) {
                    return; // avoid div!0
                }
                const rect = e.currentTarget.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const y = e.clientY - rect.top;
                const quadrant = this.calculateQuadrant(this._acceptedTargetZonesSet, x, y, width, height);
                /**
                 * If the event has already been used by another DropTarget instance
                 * then don't show a second drop target, only one target should be
                 * active at any one time
                 */
                if (this.isAlreadyUsed(e) || quadrant === null) {
                    // no drop target should be displayed
                    this.removeDropTarget();
                    return;
                }
                if (!this.options.canDisplayOverlay(e, quadrant)) {
                    this.removeDropTarget();
                    return;
                }
                const willShowOverlayEvent = new WillShowOverlayEvent({
                    nativeEvent: e,
                    position: quadrant,
                });
                /**
                 * Provide an opportunity to prevent the overlay appearing and in turn
                 * any dnd behaviours
                 */
                this._onWillShowOverlay.fire(willShowOverlayEvent);
                if (willShowOverlayEvent.defaultPrevented) {
                    this.removeDropTarget();
                    return;
                }
                this.markAsUsed(e);
                if (!this.targetElement) {
                    this.targetElement = document.createElement('div');
                    this.targetElement.className = 'dv-drop-target-dropzone';
                    this.overlayElement = document.createElement('div');
                    this.overlayElement.className = 'dv-drop-target-selection';
                    this._state = 'center';
                    this.targetElement.appendChild(this.overlayElement);
                    this.element.classList.add('dv-drop-target');
                    this.element.append(this.targetElement);
                }
                this.toggleClasses(quadrant, width, height);
                this._state = quadrant;
            },
            onDragLeave: () => {
                this.removeDropTarget();
            },
            onDragEnd: () => {
                this.removeDropTarget();
            },
            onDrop: (e) => {
                e.preventDefault();
                const state = this._state;
                this.removeDropTarget();
                if (state) {
                    // only stop the propagation of the event if we are dealing with it
                    // which is only when the target has state
                    e.stopPropagation();
                    this._onDrop.fire({ position: state, nativeEvent: e });
                }
            },
        });
        this.addDisposables(this._onDrop, this._onWillShowOverlay, this.dnd);
    }
    setTargetZones(acceptedTargetZones) {
        this._acceptedTargetZonesSet = new Set(acceptedTargetZones);
    }
    setOverlayModel(model) {
        this.options.overlayModel = model;
    }
    dispose() {
        this.removeDropTarget();
        super.dispose();
    }
    /**
     * Add a property to the event object for other potential listeners to check
     */
    markAsUsed(event) {
        event[Droptarget.USED_EVENT_ID] = true;
    }
    /**
     * Check is the event has already been used by another instance of DropTarget
     */
    isAlreadyUsed(event) {
        const value = event[Droptarget.USED_EVENT_ID];
        return typeof value === 'boolean' && value;
    }
    toggleClasses(quadrant, width, height) {
        var _a, _b;
        if (!this.overlayElement) {
            return;
        }
        const isSmallX = width < SMALL_WIDTH_BOUNDARY;
        const isSmallY = height < SMALL_HEIGHT_BOUNDARY;
        const isLeft = quadrant === 'left';
        const isRight = quadrant === 'right';
        const isTop = quadrant === 'top';
        const isBottom = quadrant === 'bottom';
        const rightClass = !isSmallX && isRight;
        const leftClass = !isSmallX && isLeft;
        const topClass = !isSmallY && isTop;
        const bottomClass = !isSmallY && isBottom;
        let size = 1;
        const sizeOptions = (_b = (_a = this.options.overlayModel) === null || _a === void 0 ? void 0 : _a.size) !== null && _b !== void 0 ? _b : DEFAULT_SIZE;
        if (sizeOptions.type === 'percentage') {
            size = (0,_math__WEBPACK_IMPORTED_MODULE_4__.clamp)(sizeOptions.value, 0, 100) / 100;
        }
        else {
            if (rightClass || leftClass) {
                size = (0,_math__WEBPACK_IMPORTED_MODULE_4__.clamp)(0, sizeOptions.value, width) / width;
            }
            if (topClass || bottomClass) {
                size = (0,_math__WEBPACK_IMPORTED_MODULE_4__.clamp)(0, sizeOptions.value, height) / height;
            }
        }
        const box = { top: '0px', left: '0px', width: '100%', height: '100%' };
        /**
         * You can also achieve the overlay placement using the transform CSS property
         * to translate and scale the element however this has the undesired effect of
         * 'skewing' the element. Comment left here for anybody that ever revisits this.
         *
         * @see https://developer.mozilla.org/en-US/docs/Web/CSS/transform
         *
         * right
         * translateX(${100 * (1 - size) / 2}%) scaleX(${scale})
         *
         * left
         * translateX(-${100 * (1 - size) / 2}%) scaleX(${scale})
         *
         * top
         * translateY(-${100 * (1 - size) / 2}%) scaleY(${scale})
         *
         * bottom
         * translateY(${100 * (1 - size) / 2}%) scaleY(${scale})
         */
        if (rightClass) {
            box.left = `${100 * (1 - size)}%`;
            box.width = `${100 * size}%`;
        }
        else if (leftClass) {
            box.width = `${100 * size}%`;
        }
        else if (topClass) {
            box.height = `${100 * size}%`;
        }
        else if (bottomClass) {
            box.top = `${100 * (1 - size)}%`;
            box.height = `${100 * size}%`;
        }
        this.overlayElement.style.top = box.top;
        this.overlayElement.style.left = box.left;
        this.overlayElement.style.width = box.width;
        this.overlayElement.style.height = box.height;
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(this.overlayElement, 'dv-drop-target-small-vertical', isSmallY);
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(this.overlayElement, 'dv-drop-target-small-horizontal', isSmallX);
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(this.overlayElement, 'dv-drop-target-left', isLeft);
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(this.overlayElement, 'dv-drop-target-right', isRight);
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(this.overlayElement, 'dv-drop-target-top', isTop);
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(this.overlayElement, 'dv-drop-target-bottom', isBottom);
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(this.overlayElement, 'dv-drop-target-center', quadrant === 'center');
    }
    calculateQuadrant(overlayType, x, y, width, height) {
        var _a, _b;
        const activationSizeOptions = (_b = (_a = this.options.overlayModel) === null || _a === void 0 ? void 0 : _a.activationSize) !== null && _b !== void 0 ? _b : DEFAULT_ACTIVATION_SIZE;
        const isPercentage = activationSizeOptions.type === 'percentage';
        if (isPercentage) {
            return calculateQuadrantAsPercentage(overlayType, x, y, width, height, activationSizeOptions.value);
        }
        return calculateQuadrantAsPixels(overlayType, x, y, width, height, activationSizeOptions.value);
    }
    removeDropTarget() {
        if (this.targetElement) {
            this._state = undefined;
            this.element.removeChild(this.targetElement);
            this.targetElement = undefined;
            this.overlayElement = undefined;
            this.element.classList.remove('dv-drop-target');
        }
    }
}
Droptarget.USED_EVENT_ID = '__dockview_droptarget_event_is_used__';
function calculateQuadrantAsPercentage(overlayType, x, y, width, height, threshold) {
    const xp = (100 * x) / width;
    const yp = (100 * y) / height;
    if (overlayType.has('left') && xp < threshold) {
        return 'left';
    }
    if (overlayType.has('right') && xp > 100 - threshold) {
        return 'right';
    }
    if (overlayType.has('top') && yp < threshold) {
        return 'top';
    }
    if (overlayType.has('bottom') && yp > 100 - threshold) {
        return 'bottom';
    }
    if (!overlayType.has('center')) {
        return null;
    }
    return 'center';
}
function calculateQuadrantAsPixels(overlayType, x, y, width, height, threshold) {
    if (overlayType.has('left') && x < threshold) {
        return 'left';
    }
    if (overlayType.has('right') && x > width - threshold) {
        return 'right';
    }
    if (overlayType.has('top') && y < threshold) {
        return 'top';
    }
    if (overlayType.has('bottom') && y > height - threshold) {
        return 'bottom';
    }
    if (!overlayType.has('center')) {
        return null;
    }
    return 'center';
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dnd/ghost.js":
/*!**********************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dnd/ghost.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addGhostImage: () => (/* binding */ addGhostImage)
/* harmony export */ });
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");

function addGhostImage(dataTransfer, ghostElement) {
    // class dockview provides to force ghost image to be drawn on a different layer and prevent weird rendering issues
    (0,_dom__WEBPACK_IMPORTED_MODULE_0__.addClasses)(ghostElement, 'dv-dragged');
    document.body.appendChild(ghostElement);
    dataTransfer.setDragImage(ghostElement, 0, 0);
    setTimeout(() => {
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.removeClasses)(ghostElement, 'dv-dragged');
        ghostElement.remove();
    }, 0);
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dnd/groupDragHandler.js":
/*!*********************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dnd/groupDragHandler.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GroupDragHandler: () => (/* binding */ GroupDragHandler)
/* harmony export */ });
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _abstractDragHandler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./abstractDragHandler */ "./node_modules/dockview-core/dist/esm/dnd/abstractDragHandler.js");
/* harmony import */ var _dataTransfer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dataTransfer */ "./node_modules/dockview-core/dist/esm/dnd/dataTransfer.js");
/* harmony import */ var _ghost__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ghost */ "./node_modules/dockview-core/dist/esm/dnd/ghost.js");





class GroupDragHandler extends _abstractDragHandler__WEBPACK_IMPORTED_MODULE_2__.DragHandler {
    constructor(element, accessor, group) {
        super(element);
        this.accessor = accessor;
        this.group = group;
        this.panelTransfer = _dataTransfer__WEBPACK_IMPORTED_MODULE_3__.LocalSelectionTransfer.getInstance();
        this.addDisposables((0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(element, 'pointerdown', (e) => {
            if (e.shiftKey) {
                /**
                 * You cannot call e.preventDefault() because that will prevent drag events from firing
                 * but we also need to stop any group overlay drag events from occuring
                 * Use a custom event marker that can be checked by the overlay drag events
                 */
                (0,_dom__WEBPACK_IMPORTED_MODULE_0__.quasiPreventDefault)(e);
            }
        }, true));
    }
    isCancelled(_event) {
        if (this.group.api.location.type === 'floating' && !_event.shiftKey) {
            return true;
        }
        return false;
    }
    getData(dragEvent) {
        const dataTransfer = dragEvent.dataTransfer;
        this.panelTransfer.setData([new _dataTransfer__WEBPACK_IMPORTED_MODULE_3__.PanelTransfer(this.accessor.id, this.group.id, null)], _dataTransfer__WEBPACK_IMPORTED_MODULE_3__.PanelTransfer.prototype);
        const style = window.getComputedStyle(this.el);
        const bgColor = style.getPropertyValue('--dv-activegroup-visiblepanel-tab-background-color');
        const color = style.getPropertyValue('--dv-activegroup-visiblepanel-tab-color');
        if (dataTransfer) {
            const ghostElement = document.createElement('div');
            ghostElement.style.backgroundColor = bgColor;
            ghostElement.style.color = color;
            ghostElement.style.padding = '2px 8px';
            ghostElement.style.height = '24px';
            ghostElement.style.fontSize = '11px';
            ghostElement.style.lineHeight = '20px';
            ghostElement.style.borderRadius = '12px';
            ghostElement.style.position = 'absolute';
            ghostElement.textContent = `Multiple Panels (${this.group.size})`;
            (0,_ghost__WEBPACK_IMPORTED_MODULE_4__.addGhostImage)(dataTransfer, ghostElement);
        }
        return {
            dispose: () => {
                this.panelTransfer.clearData(_dataTransfer__WEBPACK_IMPORTED_MODULE_3__.PanelTransfer.prototype);
            },
        };
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/components/panel/content.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/components/panel/content.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ContentContainer: () => (/* binding */ ContentContainer)
/* harmony export */ });
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _dnd_droptarget__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../dnd/droptarget */ "./node_modules/dockview-core/dist/esm/dnd/droptarget.js");
/* harmony import */ var _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../dnd/dataTransfer */ "./node_modules/dockview-core/dist/esm/dnd/dataTransfer.js");





class ContentContainer extends _lifecycle__WEBPACK_IMPORTED_MODULE_0__.CompositeDisposable {
    get element() {
        return this._element;
    }
    constructor(accessor, group) {
        super();
        this.accessor = accessor;
        this.group = group;
        this.disposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_0__.MutableDisposable();
        this._onDidFocus = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidFocus = this._onDidFocus.event;
        this._onDidBlur = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidBlur = this._onDidBlur.event;
        this._element = document.createElement('div');
        this._element.className = 'dv-content-container';
        this._element.tabIndex = -1;
        this.addDisposables(this._onDidFocus, this._onDidBlur);
        this.dropTarget = new _dnd_droptarget__WEBPACK_IMPORTED_MODULE_3__.Droptarget(this.element, {
            acceptedTargetZones: ['top', 'bottom', 'left', 'right', 'center'],
            canDisplayOverlay: (event, position) => {
                if (this.group.locked === 'no-drop-target' ||
                    (this.group.locked && position === 'center')) {
                    return false;
                }
                const data = (0,_dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_4__.getPanelData)();
                if (!data &&
                    event.shiftKey &&
                    this.group.location.type !== 'floating') {
                    return false;
                }
                if (data && data.viewId === this.accessor.id) {
                    if (data.groupId === this.group.id) {
                        if (position === 'center') {
                            // don't allow to drop on self for center position
                            return false;
                        }
                        if (data.panelId === null) {
                            // don't allow group move to drop anywhere on self
                            return false;
                        }
                    }
                    const groupHasOnePanelAndIsActiveDragElement = this.group.panels.length === 1 &&
                        data.groupId === this.group.id;
                    return !groupHasOnePanelAndIsActiveDragElement;
                }
                return this.group.canDisplayOverlay(event, position, 'content');
            },
        });
        this.addDisposables(this.dropTarget);
    }
    show() {
        this.element.style.display = '';
    }
    hide() {
        this.element.style.display = 'none';
    }
    renderPanel(panel, options = { asActive: true }) {
        const doRender = options.asActive ||
            (this.panel && this.group.isPanelActive(this.panel));
        if (this.panel &&
            this.panel.view.content.element.parentElement === this._element) {
            /**
             * If the currently attached panel is mounted directly to the content then remove it
             */
            this._element.removeChild(this.panel.view.content.element);
        }
        this.panel = panel;
        let container;
        switch (panel.api.renderer) {
            case 'onlyWhenVisible':
                this.group.renderContainer.detatch(panel);
                if (this.panel) {
                    if (doRender) {
                        this._element.appendChild(this.panel.view.content.element);
                    }
                }
                container = this._element;
                break;
            case 'always':
                if (panel.view.content.element.parentElement === this._element) {
                    this._element.removeChild(panel.view.content.element);
                }
                container = this.group.renderContainer.attach({
                    panel,
                    referenceContainer: this,
                });
                break;
            default:
                throw new Error(`dockview: invalid renderer type '${panel.api.renderer}'`);
        }
        if (doRender) {
            const focusTracker = (0,_dom__WEBPACK_IMPORTED_MODULE_2__.trackFocus)(container);
            const disposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_0__.CompositeDisposable();
            disposable.addDisposables(focusTracker, focusTracker.onDidFocus(() => this._onDidFocus.fire()), focusTracker.onDidBlur(() => this._onDidBlur.fire()));
            this.disposable.value = disposable;
        }
    }
    openPanel(panel) {
        if (this.panel === panel) {
            return;
        }
        this.renderPanel(panel);
    }
    layout(_width, _height) {
        // noop
    }
    closePanel() {
        var _a;
        if (this.panel) {
            if (this.panel.api.renderer === 'onlyWhenVisible') {
                (_a = this.panel.view.content.element.parentElement) === null || _a === void 0 ? void 0 : _a.removeChild(this.panel.view.content.element);
            }
        }
        this.panel = undefined;
    }
    dispose() {
        this.disposable.dispose();
        super.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/components/tab/defaultTab.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/components/tab/defaultTab.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DefaultTab: () => (/* binding */ DefaultTab)
/* harmony export */ });
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _svg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../svg */ "./node_modules/dockview-core/dist/esm/svg.js");



class DefaultTab extends _lifecycle__WEBPACK_IMPORTED_MODULE_0__.CompositeDisposable {
    get element() {
        return this._element;
    }
    constructor() {
        super();
        this._element = document.createElement('div');
        this._element.className = 'dv-default-tab';
        this._content = document.createElement('div');
        this._content.className = 'dv-default-tab-content';
        this.action = document.createElement('div');
        this.action.className = 'dv-default-tab-action';
        this.action.appendChild((0,_svg__WEBPACK_IMPORTED_MODULE_2__.createCloseButton)());
        this._element.appendChild(this._content);
        this._element.appendChild(this.action);
        this.render();
    }
    init(params) {
        this._title = params.title;
        this.addDisposables(params.api.onDidTitleChange((event) => {
            this._title = event.title;
            this.render();
        }), (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(this.action, 'pointerdown', (ev) => {
            ev.preventDefault();
        }), (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(this.action, 'click', (ev) => {
            if (ev.defaultPrevented) {
                return;
            }
            ev.preventDefault();
            params.api.close();
        }));
        this.render();
    }
    render() {
        var _a;
        if (this._content.textContent !== this._title) {
            this._content.textContent = (_a = this._title) !== null && _a !== void 0 ? _a : '';
        }
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/components/tab/tab.js":
/*!****************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/components/tab/tab.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Tab: () => (/* binding */ Tab)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../dnd/dataTransfer */ "./node_modules/dockview-core/dist/esm/dnd/dataTransfer.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _dnd_droptarget__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../dnd/droptarget */ "./node_modules/dockview-core/dist/esm/dnd/droptarget.js");
/* harmony import */ var _dnd_abstractDragHandler__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../dnd/abstractDragHandler */ "./node_modules/dockview-core/dist/esm/dnd/abstractDragHandler.js");






class TabDragHandler extends _dnd_abstractDragHandler__WEBPACK_IMPORTED_MODULE_5__.DragHandler {
    constructor(element, accessor, group, panel) {
        super(element);
        this.accessor = accessor;
        this.group = group;
        this.panel = panel;
        this.panelTransfer = _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.LocalSelectionTransfer.getInstance();
    }
    getData(event) {
        this.panelTransfer.setData([new _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.PanelTransfer(this.accessor.id, this.group.id, this.panel.id)], _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.PanelTransfer.prototype);
        return {
            dispose: () => {
                this.panelTransfer.clearData(_dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.PanelTransfer.prototype);
            },
        };
    }
}
class Tab extends _lifecycle__WEBPACK_IMPORTED_MODULE_1__.CompositeDisposable {
    get element() {
        return this._element;
    }
    constructor(panel, accessor, group) {
        super();
        this.panel = panel;
        this.accessor = accessor;
        this.group = group;
        this.content = undefined;
        this._onPointDown = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onPointerDown = this._onPointDown.event;
        this._onDropped = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDrop = this._onDropped.event;
        this._onDragStart = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDragStart = this._onDragStart.event;
        this._element = document.createElement('div');
        this._element.className = 'dv-tab';
        this._element.tabIndex = 0;
        this._element.draggable = true;
        (0,_dom__WEBPACK_IMPORTED_MODULE_3__.toggleClass)(this.element, 'dv-inactive-tab', true);
        const dragHandler = new TabDragHandler(this._element, this.accessor, this.group, this.panel);
        this.dropTarget = new _dnd_droptarget__WEBPACK_IMPORTED_MODULE_4__.Droptarget(this._element, {
            acceptedTargetZones: ['center'],
            canDisplayOverlay: (event, position) => {
                if (this.group.locked) {
                    return false;
                }
                const data = (0,_dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.getPanelData)();
                if (data && this.accessor.id === data.viewId) {
                    if (data.panelId === null &&
                        data.groupId === this.group.id) {
                        // don't allow group move to drop on self
                        return false;
                    }
                    return this.panel.id !== data.panelId;
                }
                return this.group.model.canDisplayOverlay(event, position, 'tab');
            },
        });
        this.onWillShowOverlay = this.dropTarget.onWillShowOverlay;
        this.addDisposables(this._onPointDown, this._onDropped, this._onDragStart, dragHandler.onDragStart((event) => {
            this._onDragStart.fire(event);
        }), dragHandler, (0,_events__WEBPACK_IMPORTED_MODULE_0__.addDisposableListener)(this._element, 'pointerdown', (event) => {
            this._onPointDown.fire(event);
        }), this.dropTarget.onDrop((event) => {
            this._onDropped.fire(event);
        }), this.dropTarget);
    }
    setActive(isActive) {
        (0,_dom__WEBPACK_IMPORTED_MODULE_3__.toggleClass)(this.element, 'dv-active-tab', isActive);
        (0,_dom__WEBPACK_IMPORTED_MODULE_3__.toggleClass)(this.element, 'dv-inactive-tab', !isActive);
    }
    setContent(part) {
        if (this.content) {
            this._element.removeChild(this.content.element);
        }
        this.content = part;
        this._element.appendChild(this.content.element);
    }
    dispose() {
        super.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/components/titlebar/tabsContainer.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/components/titlebar/tabsContainer.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TabsContainer: () => (/* binding */ TabsContainer)
/* harmony export */ });
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _tab_tab__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tab/tab */ "./node_modules/dockview-core/dist/esm/dockview/components/tab/tab.js");
/* harmony import */ var _voidContainer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./voidContainer */ "./node_modules/dockview-core/dist/esm/dockview/components/titlebar/voidContainer.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _dockviewGroupPanelModel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../dockviewGroupPanelModel */ "./node_modules/dockview-core/dist/esm/dockview/dockviewGroupPanelModel.js");
/* harmony import */ var _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../dnd/dataTransfer */ "./node_modules/dockview-core/dist/esm/dnd/dataTransfer.js");







class TabsContainer extends _lifecycle__WEBPACK_IMPORTED_MODULE_0__.CompositeDisposable {
    get panels() {
        return this.tabs.map((_) => _.value.panel.id);
    }
    get size() {
        return this.tabs.length;
    }
    get hidden() {
        return this._hidden;
    }
    set hidden(value) {
        this._hidden = value;
        this.element.style.display = value ? 'none' : '';
    }
    show() {
        if (!this.hidden) {
            this.element.style.display = '';
        }
    }
    hide() {
        this._element.style.display = 'none';
    }
    setRightActionsElement(element) {
        if (this.rightActions === element) {
            return;
        }
        if (this.rightActions) {
            this.rightActions.remove();
            this.rightActions = undefined;
        }
        if (element) {
            this.rightActionsContainer.appendChild(element);
            this.rightActions = element;
        }
    }
    setLeftActionsElement(element) {
        if (this.leftActions === element) {
            return;
        }
        if (this.leftActions) {
            this.leftActions.remove();
            this.leftActions = undefined;
        }
        if (element) {
            this.leftActionsContainer.appendChild(element);
            this.leftActions = element;
        }
    }
    setPrefixActionsElement(element) {
        if (this.preActions === element) {
            return;
        }
        if (this.preActions) {
            this.preActions.remove();
            this.preActions = undefined;
        }
        if (element) {
            this.preActionsContainer.appendChild(element);
            this.preActions = element;
        }
    }
    get element() {
        return this._element;
    }
    isActive(tab) {
        return (this.selectedIndex > -1 &&
            this.tabs[this.selectedIndex].value === tab);
    }
    indexOf(id) {
        return this.tabs.findIndex((tab) => tab.value.panel.id === id);
    }
    constructor(accessor, group) {
        super();
        this.accessor = accessor;
        this.group = group;
        this.tabs = [];
        this.selectedIndex = -1;
        this._hidden = false;
        this._onDrop = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDrop = this._onDrop.event;
        this._onTabDragStart = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onTabDragStart = this._onTabDragStart.event;
        this._onGroupDragStart = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onGroupDragStart = this._onGroupDragStart.event;
        this._onWillShowOverlay = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onWillShowOverlay = this._onWillShowOverlay.event;
        this._element = document.createElement('div');
        this._element.className = 'dv-tabs-and-actions-container';
        (0,_dom__WEBPACK_IMPORTED_MODULE_4__.toggleClass)(this._element, 'dv-full-width-single-tab', this.accessor.options.singleTabMode === 'fullwidth');
        this.rightActionsContainer = document.createElement('div');
        this.rightActionsContainer.className = 'dv-right-actions-container';
        this.leftActionsContainer = document.createElement('div');
        this.leftActionsContainer.className = 'dv-left-actions-container';
        this.preActionsContainer = document.createElement('div');
        this.preActionsContainer.className = 'dv-pre-actions-container';
        this.tabContainer = document.createElement('div');
        this.tabContainer.className = 'dv-tabs-container';
        this.voidContainer = new _voidContainer__WEBPACK_IMPORTED_MODULE_3__.VoidContainer(this.accessor, this.group);
        this._element.appendChild(this.preActionsContainer);
        this._element.appendChild(this.tabContainer);
        this._element.appendChild(this.leftActionsContainer);
        this._element.appendChild(this.voidContainer.element);
        this._element.appendChild(this.rightActionsContainer);
        this.addDisposables(this._onWillShowOverlay, this._onDrop, this._onTabDragStart, this._onGroupDragStart, this.voidContainer, this.voidContainer.onDragStart((event) => {
            this._onGroupDragStart.fire({
                nativeEvent: event,
                group: this.group,
            });
        }), this.voidContainer.onDrop((event) => {
            this._onDrop.fire({
                event: event.nativeEvent,
                index: this.tabs.length,
            });
        }), this.voidContainer.onWillShowOverlay((event) => {
            this._onWillShowOverlay.fire(new _dockviewGroupPanelModel__WEBPACK_IMPORTED_MODULE_5__.WillShowOverlayLocationEvent(event, {
                kind: 'header_space',
                panel: this.group.activePanel,
                api: this.accessor.api,
                group: this.group,
                getData: _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_6__.getPanelData,
            }));
        }), (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(this.voidContainer.element, 'pointerdown', (event) => {
            const isFloatingGroupsEnabled = !this.accessor.options.disableFloatingGroups;
            if (isFloatingGroupsEnabled &&
                event.shiftKey &&
                this.group.api.location.type !== 'floating') {
                event.preventDefault();
                const { top, left } = this.element.getBoundingClientRect();
                const { top: rootTop, left: rootLeft } = this.accessor.element.getBoundingClientRect();
                this.accessor.addFloatingGroup(this.group, {
                    x: left - rootLeft + 20,
                    y: top - rootTop + 20,
                    inDragMode: true,
                });
            }
        }), (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(this.tabContainer, 'pointerdown', (event) => {
            if (event.defaultPrevented) {
                return;
            }
            const isLeftClick = event.button === 0;
            if (isLeftClick) {
                this.accessor.doSetGroupActive(this.group);
            }
        }));
    }
    setActive(_isGroupActive) {
        // noop
    }
    delete(id) {
        const index = this.tabs.findIndex((tab) => tab.value.panel.id === id);
        const tabToRemove = this.tabs.splice(index, 1)[0];
        if (!tabToRemove) {
            throw new Error(`dockview: Tab not found`);
        }
        const { value, disposable } = tabToRemove;
        disposable.dispose();
        value.dispose();
        value.element.remove();
        this.updateClassnames();
    }
    setActivePanel(panel) {
        this.tabs.forEach((tab) => {
            const isActivePanel = panel.id === tab.value.panel.id;
            tab.value.setActive(isActivePanel);
        });
    }
    openPanel(panel, index = this.tabs.length) {
        if (this.tabs.find((tab) => tab.value.panel.id === panel.id)) {
            return;
        }
        const tab = new _tab_tab__WEBPACK_IMPORTED_MODULE_2__.Tab(panel, this.accessor, this.group);
        tab.setContent(panel.view.tab);
        const disposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_0__.CompositeDisposable(tab.onDragStart((event) => {
            this._onTabDragStart.fire({ nativeEvent: event, panel });
        }), tab.onPointerDown((event) => {
            if (event.defaultPrevented) {
                return;
            }
            const isFloatingGroupsEnabled = !this.accessor.options.disableFloatingGroups;
            const isFloatingWithOnePanel = this.group.api.location.type === 'floating' &&
                this.size === 1;
            if (isFloatingGroupsEnabled &&
                !isFloatingWithOnePanel &&
                event.shiftKey) {
                event.preventDefault();
                const panel = this.accessor.getGroupPanel(tab.panel.id);
                const { top, left } = tab.element.getBoundingClientRect();
                const { top: rootTop, left: rootLeft } = this.accessor.element.getBoundingClientRect();
                this.accessor.addFloatingGroup(panel, {
                    x: left - rootLeft,
                    y: top - rootTop,
                    inDragMode: true,
                });
                return;
            }
            switch (event.button) {
                case 0: // left click or touch
                    if (this.group.activePanel !== panel) {
                        this.group.model.openPanel(panel);
                    }
                    break;
            }
        }), tab.onDrop((event) => {
            this._onDrop.fire({
                event: event.nativeEvent,
                index: this.tabs.findIndex((x) => x.value === tab),
            });
        }), tab.onWillShowOverlay((event) => {
            this._onWillShowOverlay.fire(new _dockviewGroupPanelModel__WEBPACK_IMPORTED_MODULE_5__.WillShowOverlayLocationEvent(event, {
                kind: 'tab',
                panel: this.group.activePanel,
                api: this.accessor.api,
                group: this.group,
                getData: _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_6__.getPanelData,
            }));
        }));
        const value = { value: tab, disposable };
        this.addTab(value, index);
    }
    closePanel(panel) {
        this.delete(panel.id);
    }
    dispose() {
        super.dispose();
        for (const { value, disposable } of this.tabs) {
            disposable.dispose();
            value.dispose();
        }
        this.tabs = [];
    }
    addTab(tab, index = this.tabs.length) {
        if (index < 0 || index > this.tabs.length) {
            throw new Error('invalid location');
        }
        this.tabContainer.insertBefore(tab.value.element, this.tabContainer.children[index]);
        this.tabs = [
            ...this.tabs.slice(0, index),
            tab,
            ...this.tabs.slice(index),
        ];
        if (this.selectedIndex < 0) {
            this.selectedIndex = index;
        }
        this.updateClassnames();
    }
    updateClassnames() {
        (0,_dom__WEBPACK_IMPORTED_MODULE_4__.toggleClass)(this._element, 'dv-single-tab', this.size === 1);
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/components/titlebar/voidContainer.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/components/titlebar/voidContainer.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VoidContainer: () => (/* binding */ VoidContainer)
/* harmony export */ });
/* harmony import */ var _array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../array */ "./node_modules/dockview-core/dist/esm/array.js");
/* harmony import */ var _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../dnd/dataTransfer */ "./node_modules/dockview-core/dist/esm/dnd/dataTransfer.js");
/* harmony import */ var _dnd_droptarget__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../dnd/droptarget */ "./node_modules/dockview-core/dist/esm/dnd/droptarget.js");
/* harmony import */ var _dnd_groupDragHandler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../dnd/groupDragHandler */ "./node_modules/dockview-core/dist/esm/dnd/groupDragHandler.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");






class VoidContainer extends _lifecycle__WEBPACK_IMPORTED_MODULE_5__.CompositeDisposable {
    get element() {
        return this._element;
    }
    constructor(accessor, group) {
        super();
        this.accessor = accessor;
        this.group = group;
        this._onDrop = new _events__WEBPACK_IMPORTED_MODULE_4__.Emitter();
        this.onDrop = this._onDrop.event;
        this._onDragStart = new _events__WEBPACK_IMPORTED_MODULE_4__.Emitter();
        this.onDragStart = this._onDragStart.event;
        this._element = document.createElement('div');
        this._element.className = 'dv-void-container';
        this._element.draggable = true;
        this.addDisposables(this._onDrop, this._onDragStart, (0,_events__WEBPACK_IMPORTED_MODULE_4__.addDisposableListener)(this._element, 'pointerdown', () => {
            this.accessor.doSetGroupActive(this.group);
        }));
        const handler = new _dnd_groupDragHandler__WEBPACK_IMPORTED_MODULE_3__.GroupDragHandler(this._element, accessor, group);
        this.dropTraget = new _dnd_droptarget__WEBPACK_IMPORTED_MODULE_2__.Droptarget(this._element, {
            acceptedTargetZones: ['center'],
            canDisplayOverlay: (event, position) => {
                var _a;
                const data = (0,_dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_1__.getPanelData)();
                if (data && this.accessor.id === data.viewId) {
                    if (data.panelId === null &&
                        data.groupId === this.group.id) {
                        // don't allow group move to drop on self
                        return false;
                    }
                    // don't show the overlay if the tab being dragged is the last panel of this group
                    return ((_a = (0,_array__WEBPACK_IMPORTED_MODULE_0__.last)(this.group.panels)) === null || _a === void 0 ? void 0 : _a.id) !== data.panelId;
                }
                return group.model.canDisplayOverlay(event, position, 'header_space');
            },
        });
        this.onWillShowOverlay = this.dropTraget.onWillShowOverlay;
        this.addDisposables(handler, handler.onDragStart((event) => {
            this._onDragStart.fire(event);
        }), this.dropTraget.onDrop((event) => {
            this._onDrop.fire(event);
        }), this.dropTraget);
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/components/watermark/watermark.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/components/watermark/watermark.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Watermark: () => (/* binding */ Watermark)
/* harmony export */ });
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");

class Watermark extends _lifecycle__WEBPACK_IMPORTED_MODULE_0__.CompositeDisposable {
    get element() {
        return this._element;
    }
    constructor() {
        super();
        this._element = document.createElement('div');
        this._element.className = 'dv-watermark';
    }
    init(_params) {
        // noop
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/deserializer.js":
/*!**********************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/deserializer.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DefaultDockviewDeserialzier: () => (/* binding */ DefaultDockviewDeserialzier)
/* harmony export */ });
/* harmony import */ var _dockviewPanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dockviewPanel */ "./node_modules/dockview-core/dist/esm/dockview/dockviewPanel.js");
/* harmony import */ var _dockviewPanelModel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dockviewPanelModel */ "./node_modules/dockview-core/dist/esm/dockview/dockviewPanelModel.js");
/* harmony import */ var _api_component_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../api/component.api */ "./node_modules/dockview-core/dist/esm/api/component.api.js");



class DefaultDockviewDeserialzier {
    constructor(accessor) {
        this.accessor = accessor;
    }
    fromJSON(panelData, group) {
        var _a, _b;
        const panelId = panelData.id;
        const params = panelData.params;
        const title = panelData.title;
        const viewData = panelData.view;
        const contentComponent = viewData
            ? viewData.content.id
            : (_a = panelData.contentComponent) !== null && _a !== void 0 ? _a : 'unknown';
        const tabComponent = viewData
            ? (_b = viewData.tab) === null || _b === void 0 ? void 0 : _b.id
            : panelData.tabComponent;
        const view = new _dockviewPanelModel__WEBPACK_IMPORTED_MODULE_1__.DockviewPanelModel(this.accessor, panelId, contentComponent, tabComponent);
        const panel = new _dockviewPanel__WEBPACK_IMPORTED_MODULE_0__.DockviewPanel(panelId, contentComponent, tabComponent, this.accessor, new _api_component_api__WEBPACK_IMPORTED_MODULE_2__.DockviewApi(this.accessor), group, view, {
            renderer: panelData.renderer,
            minimumWidth: panelData.minimumWidth,
            minimumHeight: panelData.minimumHeight,
            maximumWidth: panelData.maximumWidth,
            maximumHeight: panelData.maximumHeight,
        });
        panel.init({
            title: title !== null && title !== void 0 ? title : panelId,
            params: params !== null && params !== void 0 ? params : {},
        });
        return panel;
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/dockviewComponent.js":
/*!***************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/dockviewComponent.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DockviewComponent: () => (/* binding */ DockviewComponent)
/* harmony export */ });
/* harmony import */ var _gridview_gridview__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../gridview/gridview */ "./node_modules/dockview-core/dist/esm/gridview/gridview.js");
/* harmony import */ var _dnd_droptarget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dnd/droptarget */ "./node_modules/dockview-core/dist/esm/dnd/droptarget.js");
/* harmony import */ var _array__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../array */ "./node_modules/dockview-core/dist/esm/array.js");
/* harmony import */ var _dockviewPanel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dockviewPanel */ "./node_modules/dockview-core/dist/esm/dockview/dockviewPanel.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _components_watermark_watermark__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./components/watermark/watermark */ "./node_modules/dockview-core/dist/esm/dockview/components/watermark/watermark.js");
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../math */ "./node_modules/dockview-core/dist/esm/math.js");
/* harmony import */ var _deserializer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./deserializer */ "./node_modules/dockview-core/dist/esm/dockview/deserializer.js");
/* harmony import */ var _options__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./options */ "./node_modules/dockview-core/dist/esm/dockview/options.js");
/* harmony import */ var _gridview_baseComponentGridview__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../gridview/baseComponentGridview */ "./node_modules/dockview-core/dist/esm/gridview/baseComponentGridview.js");
/* harmony import */ var _api_component_api__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../api/component.api */ "./node_modules/dockview-core/dist/esm/api/component.api.js");
/* harmony import */ var _splitview_splitview__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../splitview/splitview */ "./node_modules/dockview-core/dist/esm/splitview/splitview.js");
/* harmony import */ var _dockviewGroupPanelModel__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./dockviewGroupPanelModel */ "./node_modules/dockview-core/dist/esm/dockview/dockviewGroupPanelModel.js");
/* harmony import */ var _dockviewGroupPanel__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./dockviewGroupPanel */ "./node_modules/dockview-core/dist/esm/dockview/dockviewGroupPanel.js");
/* harmony import */ var _dockviewPanelModel__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./dockviewPanelModel */ "./node_modules/dockview-core/dist/esm/dockview/dockviewPanelModel.js");
/* harmony import */ var _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../dnd/dataTransfer */ "./node_modules/dockview-core/dist/esm/dnd/dataTransfer.js");
/* harmony import */ var _overlay_overlay__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../overlay/overlay */ "./node_modules/dockview-core/dist/esm/overlay/overlay.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _dockviewFloatingGroupPanel__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./dockviewFloatingGroupPanel */ "./node_modules/dockview-core/dist/esm/dockview/dockviewFloatingGroupPanel.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../constants */ "./node_modules/dockview-core/dist/esm/constants.js");
/* harmony import */ var _overlay_overlayRenderContainer__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../overlay/overlayRenderContainer */ "./node_modules/dockview-core/dist/esm/overlay/overlayRenderContainer.js");
/* harmony import */ var _popoutWindow__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../popoutWindow */ "./node_modules/dockview-core/dist/esm/popoutWindow.js");
/* harmony import */ var _strictEventsSequencing__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./strictEventsSequencing */ "./node_modules/dockview-core/dist/esm/dockview/strictEventsSequencing.js");
























const DEFAULT_ROOT_OVERLAY_MODEL = {
    activationSize: { type: 'pixels', value: 10 },
    size: { type: 'pixels', value: 20 },
};
function moveGroupWithoutDestroying(options) {
    const activePanel = options.from.activePanel;
    const panels = [...options.from.panels].map((panel) => {
        const removedPanel = options.from.model.removePanel(panel);
        options.from.model.renderContainer.detatch(panel);
        return removedPanel;
    });
    panels.forEach((panel) => {
        options.to.model.openPanel(panel, {
            skipSetActive: activePanel !== panel,
            skipSetGroupActive: true,
        });
    });
}
class DockviewComponent extends _gridview_baseComponentGridview__WEBPACK_IMPORTED_MODULE_10__.BaseGrid {
    get orientation() {
        return this.gridview.orientation;
    }
    get totalPanels() {
        return this.panels.length;
    }
    get panels() {
        return this.groups.flatMap((group) => group.panels);
    }
    get options() {
        return this._options;
    }
    get activePanel() {
        const activeGroup = this.activeGroup;
        if (!activeGroup) {
            return undefined;
        }
        return activeGroup.activePanel;
    }
    get renderer() {
        var _a;
        return (_a = this.options.defaultRenderer) !== null && _a !== void 0 ? _a : 'onlyWhenVisible';
    }
    get api() {
        return this._api;
    }
    get gap() {
        return this.gridview.margin;
    }
    get floatingGroups() {
        return this._floatingGroups;
    }
    constructor(container, options) {
        var _a;
        super(container, {
            proportionalLayout: true,
            orientation: _splitview_splitview__WEBPACK_IMPORTED_MODULE_12__.Orientation.HORIZONTAL,
            styles: options.hideBorders
                ? { separatorBorder: 'transparent' }
                : undefined,
            disableAutoResizing: options.disableAutoResizing,
            locked: options.locked,
            margin: options.gap,
            className: options.className,
        });
        this.nextGroupId = (0,_math__WEBPACK_IMPORTED_MODULE_7__.sequentialNumberGenerator)();
        this._deserializer = new _deserializer__WEBPACK_IMPORTED_MODULE_8__.DefaultDockviewDeserialzier(this);
        this.watermark = null;
        this._onWillDragPanel = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onWillDragPanel = this._onWillDragPanel.event;
        this._onWillDragGroup = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onWillDragGroup = this._onWillDragGroup.event;
        this._onDidDrop = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onDidDrop = this._onDidDrop.event;
        this._onWillDrop = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onWillDrop = this._onWillDrop.event;
        this._onWillShowOverlay = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onWillShowOverlay = this._onWillShowOverlay.event;
        this._onUnhandledDragOverEvent = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onUnhandledDragOverEvent = this._onUnhandledDragOverEvent.event;
        this._onDidRemovePanel = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onDidRemovePanel = this._onDidRemovePanel.event;
        this._onDidAddPanel = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onDidAddPanel = this._onDidAddPanel.event;
        this._onDidLayoutFromJSON = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onDidLayoutFromJSON = this._onDidLayoutFromJSON.event;
        this._onDidActivePanelChange = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onDidActivePanelChange = this._onDidActivePanelChange.event;
        this._onDidMovePanel = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onDidMovePanel = this._onDidMovePanel.event;
        this._onDidMaximizedGroupChange = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onDidMaximizedGroupChange = this._onDidMaximizedGroupChange.event;
        this._floatingGroups = [];
        this._popoutGroups = [];
        this._onDidRemoveGroup = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onDidRemoveGroup = this._onDidRemoveGroup.event;
        this._onDidAddGroup = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onDidAddGroup = this._onDidAddGroup.event;
        this._onDidActiveGroupChange = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onDidActiveGroupChange = this._onDidActiveGroupChange.event;
        this._moving = false;
        this.overlayRenderContainer = new _overlay_overlayRenderContainer__WEBPACK_IMPORTED_MODULE_21__.OverlayRenderContainer(this.gridview.element, this);
        (0,_dom__WEBPACK_IMPORTED_MODULE_18__.toggleClass)(this.gridview.element, 'dv-dockview', true);
        (0,_dom__WEBPACK_IMPORTED_MODULE_18__.toggleClass)(this.element, 'dv-debug', !!options.debug);
        if (options.debug) {
            this.addDisposables(new _strictEventsSequencing__WEBPACK_IMPORTED_MODULE_23__.StrictEventsSequencing(this));
        }
        this.addDisposables(this.overlayRenderContainer, this._onWillDragPanel, this._onWillDragGroup, this._onWillShowOverlay, this._onDidActivePanelChange, this._onDidAddPanel, this._onDidRemovePanel, this._onDidLayoutFromJSON, this._onDidDrop, this._onWillDrop, this._onDidMovePanel, this._onDidAddGroup, this._onDidRemoveGroup, this._onDidActiveGroupChange, this._onUnhandledDragOverEvent, this._onDidMaximizedGroupChange, this.onDidViewVisibilityChangeMicroTaskQueue(() => {
            this.updateWatermark();
        }), this.onDidAdd((event) => {
            if (!this._moving) {
                this._onDidAddGroup.fire(event);
            }
        }), this.onDidRemove((event) => {
            if (!this._moving) {
                this._onDidRemoveGroup.fire(event);
            }
        }), this.onDidActiveChange((event) => {
            if (!this._moving) {
                this._onDidActiveGroupChange.fire(event);
            }
        }), this.onDidMaximizedChange((event) => {
            this._onDidMaximizedGroupChange.fire({
                group: event.panel,
                isMaximized: event.isMaximized,
            });
        }), _events__WEBPACK_IMPORTED_MODULE_5__.Event.any(this.onDidAdd, this.onDidRemove)(() => {
            this.updateWatermark();
        }), _events__WEBPACK_IMPORTED_MODULE_5__.Event.any(this.onDidAddPanel, this.onDidRemovePanel, this.onDidAddGroup, this.onDidRemove, this.onDidMovePanel, this.onDidActivePanelChange)(() => {
            this._bufferOnDidLayoutChange.fire();
        }), _lifecycle__WEBPACK_IMPORTED_MODULE_4__.Disposable.from(() => {
            // iterate over a copy of the array since .dispose() mutates the original array
            for (const group of [...this._floatingGroups]) {
                group.dispose();
            }
            // iterate over a copy of the array since .dispose() mutates the original array
            for (const group of [...this._popoutGroups]) {
                group.disposable.dispose();
            }
        }));
        this._options = options;
        this._rootDropTarget = new _dnd_droptarget__WEBPACK_IMPORTED_MODULE_1__.Droptarget(this.element, {
            canDisplayOverlay: (event, position) => {
                const data = (0,_dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_16__.getPanelData)();
                if (data) {
                    if (data.viewId !== this.id) {
                        return false;
                    }
                    if (position === 'center') {
                        // center drop target is only allowed if there are no panels in the grid
                        // floating panels are allowed
                        return this.gridview.length === 0;
                    }
                    return true;
                }
                if (position === 'center' && this.gridview.length !== 0) {
                    /**
                     * for external events only show the four-corner drag overlays, disable
                     * the center position so that external drag events can fall through to the group
                     * and panel drop target handlers
                     */
                    return false;
                }
                const firedEvent = new _options__WEBPACK_IMPORTED_MODULE_9__.DockviewUnhandledDragOverEvent(event, 'edge', position, _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_16__.getPanelData);
                this._onUnhandledDragOverEvent.fire(firedEvent);
                return firedEvent.isAccepted;
            },
            acceptedTargetZones: ['top', 'bottom', 'left', 'right', 'center'],
            overlayModel: (_a = this.options.rootOverlayModel) !== null && _a !== void 0 ? _a : DEFAULT_ROOT_OVERLAY_MODEL,
        });
        this.addDisposables(this._rootDropTarget, this._rootDropTarget.onWillShowOverlay((event) => {
            if (this.gridview.length > 0 && event.position === 'center') {
                // option only available when no panels in primary grid
                return;
            }
            this._onWillShowOverlay.fire(new _dockviewGroupPanelModel__WEBPACK_IMPORTED_MODULE_13__.WillShowOverlayLocationEvent(event, {
                kind: 'edge',
                panel: undefined,
                api: this._api,
                group: undefined,
                getData: _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_16__.getPanelData,
            }));
        }), this._rootDropTarget.onDrop((event) => {
            var _a;
            const willDropEvent = new _dockviewGroupPanelModel__WEBPACK_IMPORTED_MODULE_13__.DockviewWillDropEvent({
                nativeEvent: event.nativeEvent,
                position: event.position,
                panel: undefined,
                api: this._api,
                group: undefined,
                getData: _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_16__.getPanelData,
                kind: 'edge',
            });
            this._onWillDrop.fire(willDropEvent);
            if (willDropEvent.defaultPrevented) {
                return;
            }
            const data = (0,_dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_16__.getPanelData)();
            if (data) {
                this.moveGroupOrPanel({
                    from: {
                        groupId: data.groupId,
                        panelId: (_a = data.panelId) !== null && _a !== void 0 ? _a : undefined,
                    },
                    to: {
                        group: this.orthogonalize(event.position),
                        position: 'center',
                    },
                });
            }
            else {
                this._onDidDrop.fire(new _dockviewGroupPanelModel__WEBPACK_IMPORTED_MODULE_13__.DockviewDidDropEvent({
                    nativeEvent: event.nativeEvent,
                    position: event.position,
                    panel: undefined,
                    api: this._api,
                    group: undefined,
                    getData: _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_16__.getPanelData,
                }));
            }
        }), this._rootDropTarget);
        this._api = new _api_component_api__WEBPACK_IMPORTED_MODULE_11__.DockviewApi(this);
        this.updateWatermark();
    }
    setVisible(panel, visible) {
        switch (panel.api.location.type) {
            case 'grid':
                super.setVisible(panel, visible);
                break;
            case 'floating': {
                const item = this.floatingGroups.find((floatingGroup) => floatingGroup.group === panel);
                if (item) {
                    item.overlay.setVisible(visible);
                    panel.api._onDidVisibilityChange.fire({
                        isVisible: visible,
                    });
                }
                break;
            }
            case 'popout':
                console.warn('dockview: You cannot hide a group that is in a popout window');
                break;
        }
    }
    addPopoutGroup(itemToPopout, options) {
        var _a, _b, _c, _d, _e;
        if (itemToPopout instanceof _dockviewPanel__WEBPACK_IMPORTED_MODULE_3__.DockviewPanel &&
            itemToPopout.group.size === 1) {
            return this.addPopoutGroup(itemToPopout.group, options);
        }
        const theme = (0,_dom__WEBPACK_IMPORTED_MODULE_18__.getDockviewTheme)(this.gridview.element);
        const element = this.element;
        function getBox() {
            if (options === null || options === void 0 ? void 0 : options.position) {
                return options.position;
            }
            if (itemToPopout instanceof _dockviewGroupPanel__WEBPACK_IMPORTED_MODULE_14__.DockviewGroupPanel) {
                return itemToPopout.element.getBoundingClientRect();
            }
            if (itemToPopout.group) {
                return itemToPopout.group.element.getBoundingClientRect();
            }
            return element.getBoundingClientRect();
        }
        const box = getBox();
        const groupId = (_b = (_a = options === null || options === void 0 ? void 0 : options.overridePopoutGroup) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : this.getNextGroupId();
        const _window = new _popoutWindow__WEBPACK_IMPORTED_MODULE_22__.PopoutWindow(`${this.id}-${groupId}`, // unique id
        theme !== null && theme !== void 0 ? theme : '', {
            url: (_e = (_c = options === null || options === void 0 ? void 0 : options.popoutUrl) !== null && _c !== void 0 ? _c : (_d = this.options) === null || _d === void 0 ? void 0 : _d.popoutUrl) !== null && _e !== void 0 ? _e : '/popout.html',
            left: window.screenX + box.left,
            top: window.screenY + box.top,
            width: box.width,
            height: box.height,
            onDidOpen: options === null || options === void 0 ? void 0 : options.onDidOpen,
            onWillClose: options === null || options === void 0 ? void 0 : options.onWillClose,
        });
        const popoutWindowDisposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_4__.CompositeDisposable(_window, _window.onDidClose(() => {
            popoutWindowDisposable.dispose();
        }));
        return _window
            .open()
            .then((popoutContainer) => {
            var _a;
            if (_window.isDisposed) {
                return false;
            }
            if (popoutContainer === null) {
                popoutWindowDisposable.dispose();
                return false;
            }
            const gready = document.createElement('div');
            gready.className = 'dv-overlay-render-container';
            const overlayRenderContainer = new _overlay_overlayRenderContainer__WEBPACK_IMPORTED_MODULE_21__.OverlayRenderContainer(gready, this);
            const referenceGroup = itemToPopout instanceof _dockviewPanel__WEBPACK_IMPORTED_MODULE_3__.DockviewPanel
                ? itemToPopout.group
                : itemToPopout;
            const referenceLocation = itemToPopout.api.location.type;
            /**
             * The group that is being added doesn't already exist within the DOM, the most likely occurance
             * of this case is when being called from the `fromJSON(...)` method
             */
            const isGroupAddedToDom = referenceGroup.element.parentElement !== null;
            let group;
            if (!isGroupAddedToDom) {
                group = referenceGroup;
            }
            else if (options === null || options === void 0 ? void 0 : options.overridePopoutGroup) {
                group = options.overridePopoutGroup;
            }
            else {
                group = this.createGroup({ id: groupId });
                this._onDidAddGroup.fire(group);
            }
            group.model.renderContainer = overlayRenderContainer;
            group.layout(_window.window.innerWidth, _window.window.innerHeight);
            let floatingBox;
            if (!(options === null || options === void 0 ? void 0 : options.overridePopoutGroup) && isGroupAddedToDom) {
                if (itemToPopout instanceof _dockviewPanel__WEBPACK_IMPORTED_MODULE_3__.DockviewPanel) {
                    this.movingLock(() => {
                        const panel = referenceGroup.model.removePanel(itemToPopout);
                        group.model.openPanel(panel);
                    });
                }
                else {
                    this.movingLock(() => moveGroupWithoutDestroying({
                        from: referenceGroup,
                        to: group,
                    }));
                    switch (referenceLocation) {
                        case 'grid':
                            referenceGroup.api.setVisible(false);
                            break;
                        case 'floating':
                        case 'popout':
                            floatingBox = (_a = this._floatingGroups
                                .find((value) => value.group.api.id ===
                                itemToPopout.api.id)) === null || _a === void 0 ? void 0 : _a.overlay.toJSON();
                            this.removeGroup(referenceGroup);
                            break;
                    }
                }
            }
            popoutContainer.classList.add('dv-dockview');
            popoutContainer.style.overflow = 'hidden';
            popoutContainer.appendChild(gready);
            popoutContainer.appendChild(group.element);
            group.model.location = {
                type: 'popout',
                getWindow: () => _window.window,
                popoutUrl: options === null || options === void 0 ? void 0 : options.popoutUrl,
            };
            if (isGroupAddedToDom &&
                itemToPopout.api.location.type === 'grid') {
                itemToPopout.api.setVisible(false);
            }
            this.doSetGroupAndPanelActive(group);
            popoutWindowDisposable.addDisposables(group.api.onDidActiveChange((event) => {
                var _a;
                if (event.isActive) {
                    (_a = _window.window) === null || _a === void 0 ? void 0 : _a.focus();
                }
            }), group.api.onWillFocus(() => {
                var _a;
                (_a = _window.window) === null || _a === void 0 ? void 0 : _a.focus();
            }));
            let returnedGroup;
            const isValidReferenceGroup = isGroupAddedToDom &&
                referenceGroup &&
                this.getPanel(referenceGroup.id);
            const value = {
                window: _window,
                popoutGroup: group,
                referenceGroup: isValidReferenceGroup
                    ? referenceGroup.id
                    : undefined,
                disposable: {
                    dispose: () => {
                        popoutWindowDisposable.dispose();
                        return returnedGroup;
                    },
                },
            };
            popoutWindowDisposable.addDisposables(
            /**
             * ResizeObserver seems slow here, I do not know why but we don't need it
             * since we can reply on the window resize event as we will occupy the full
             * window dimensions
             */
            (0,_events__WEBPACK_IMPORTED_MODULE_5__.addDisposableWindowListener)(_window.window, 'resize', () => {
                group.layout(_window.window.innerWidth, _window.window.innerHeight);
            }), overlayRenderContainer, _lifecycle__WEBPACK_IMPORTED_MODULE_4__.Disposable.from(() => {
                if (this.isDisposed) {
                    return; // cleanup may run after instance is disposed
                }
                if (isGroupAddedToDom &&
                    this.getPanel(referenceGroup.id)) {
                    this.movingLock(() => moveGroupWithoutDestroying({
                        from: group,
                        to: referenceGroup,
                    }));
                    if (!referenceGroup.api.isVisible) {
                        referenceGroup.api.setVisible(true);
                    }
                    if (this.getPanel(group.id)) {
                        this.doRemoveGroup(group, {
                            skipPopoutAssociated: true,
                        });
                    }
                }
                else if (this.getPanel(group.id)) {
                    group.model.renderContainer =
                        this.overlayRenderContainer;
                    returnedGroup = group;
                    const alreadyRemoved = !this._popoutGroups.find((p) => p.popoutGroup === group);
                    if (alreadyRemoved) {
                        /**
                         * If this popout group was explicitly removed then we shouldn't run the additional
                         * steps. To tell if the running of this disposable is the result of this popout group
                         * being explicitly removed we can check if this popout group is still referenced in
                         * the `this._popoutGroups` list.
                         */
                        return;
                    }
                    if (floatingBox) {
                        this.addFloatingGroup(group, {
                            height: floatingBox.height,
                            width: floatingBox.width,
                            position: floatingBox,
                        });
                    }
                    else {
                        this.doRemoveGroup(group, {
                            skipDispose: true,
                            skipActive: true,
                            skipPopoutReturn: true,
                        });
                        group.model.location = { type: 'grid' };
                        this.movingLock(() => {
                            // suppress group add events since the group already exists
                            this.doAddGroup(group, [0]);
                        });
                    }
                    this.doSetGroupAndPanelActive(group);
                }
            }));
            this._popoutGroups.push(value);
            this.updateWatermark();
            return true;
        })
            .catch((err) => {
            console.error('dockview: failed to create popout window', err);
            return false;
        });
    }
    addFloatingGroup(item, options) {
        var _a, _b, _c, _d, _e;
        let group;
        if (item instanceof _dockviewPanel__WEBPACK_IMPORTED_MODULE_3__.DockviewPanel) {
            group = this.createGroup();
            this._onDidAddGroup.fire(group);
            this.movingLock(() => this.removePanel(item, {
                removeEmptyGroup: true,
                skipDispose: true,
                skipSetActiveGroup: true,
            }));
            this.movingLock(() => group.model.openPanel(item, { skipSetGroupActive: true }));
        }
        else {
            group = item;
            const popoutReferenceGroupId = (_a = this._popoutGroups.find((_) => _.popoutGroup === group)) === null || _a === void 0 ? void 0 : _a.referenceGroup;
            const popoutReferenceGroup = popoutReferenceGroupId
                ? this.getPanel(popoutReferenceGroupId)
                : undefined;
            const skip = typeof (options === null || options === void 0 ? void 0 : options.skipRemoveGroup) === 'boolean' &&
                options.skipRemoveGroup;
            if (!skip) {
                if (popoutReferenceGroup) {
                    this.movingLock(() => moveGroupWithoutDestroying({
                        from: item,
                        to: popoutReferenceGroup,
                    }));
                    this.doRemoveGroup(item, {
                        skipPopoutReturn: true,
                        skipPopoutAssociated: true,
                    });
                    this.doRemoveGroup(popoutReferenceGroup, {
                        skipDispose: true,
                    });
                    group = popoutReferenceGroup;
                }
                else {
                    this.doRemoveGroup(item, {
                        skipDispose: true,
                        skipPopoutReturn: true,
                        skipPopoutAssociated: false,
                    });
                }
            }
        }
        function getAnchoredBox() {
            if (options === null || options === void 0 ? void 0 : options.position) {
                const result = {};
                if ('left' in options.position) {
                    result.left = Math.max(options.position.left, 0);
                }
                else if ('right' in options.position) {
                    result.right = Math.max(options.position.right, 0);
                }
                else {
                    result.left = _constants__WEBPACK_IMPORTED_MODULE_20__.DEFAULT_FLOATING_GROUP_POSITION.left;
                }
                if ('top' in options.position) {
                    result.top = Math.max(options.position.top, 0);
                }
                else if ('bottom' in options.position) {
                    result.bottom = Math.max(options.position.bottom, 0);
                }
                else {
                    result.top = _constants__WEBPACK_IMPORTED_MODULE_20__.DEFAULT_FLOATING_GROUP_POSITION.top;
                }
                if (typeof options.width === 'number') {
                    result.width = Math.max(options.width, 0);
                }
                else {
                    result.width = _constants__WEBPACK_IMPORTED_MODULE_20__.DEFAULT_FLOATING_GROUP_POSITION.width;
                }
                if (typeof options.height === 'number') {
                    result.height = Math.max(options.height, 0);
                }
                else {
                    result.height = _constants__WEBPACK_IMPORTED_MODULE_20__.DEFAULT_FLOATING_GROUP_POSITION.height;
                }
                return result;
            }
            return {
                left: typeof (options === null || options === void 0 ? void 0 : options.x) === 'number'
                    ? Math.max(options.x, 0)
                    : _constants__WEBPACK_IMPORTED_MODULE_20__.DEFAULT_FLOATING_GROUP_POSITION.left,
                top: typeof (options === null || options === void 0 ? void 0 : options.y) === 'number'
                    ? Math.max(options.y, 0)
                    : _constants__WEBPACK_IMPORTED_MODULE_20__.DEFAULT_FLOATING_GROUP_POSITION.top,
                width: typeof (options === null || options === void 0 ? void 0 : options.width) === 'number'
                    ? Math.max(options.width, 0)
                    : _constants__WEBPACK_IMPORTED_MODULE_20__.DEFAULT_FLOATING_GROUP_POSITION.width,
                height: typeof (options === null || options === void 0 ? void 0 : options.height) === 'number'
                    ? Math.max(options.height, 0)
                    : _constants__WEBPACK_IMPORTED_MODULE_20__.DEFAULT_FLOATING_GROUP_POSITION.height,
            };
        }
        const anchoredBox = getAnchoredBox();
        const overlay = new _overlay_overlay__WEBPACK_IMPORTED_MODULE_17__.Overlay(Object.assign(Object.assign({ container: this.gridview.element, content: group.element }, anchoredBox), { minimumInViewportWidth: this.options.floatingGroupBounds === 'boundedWithinViewport'
                ? undefined
                : (_c = (_b = this.options.floatingGroupBounds) === null || _b === void 0 ? void 0 : _b.minimumWidthWithinViewport) !== null && _c !== void 0 ? _c : _constants__WEBPACK_IMPORTED_MODULE_20__.DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE, minimumInViewportHeight: this.options.floatingGroupBounds === 'boundedWithinViewport'
                ? undefined
                : (_e = (_d = this.options.floatingGroupBounds) === null || _d === void 0 ? void 0 : _d.minimumHeightWithinViewport) !== null && _e !== void 0 ? _e : _constants__WEBPACK_IMPORTED_MODULE_20__.DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE }));
        const el = group.element.querySelector('.dv-void-container');
        if (!el) {
            throw new Error('failed to find drag handle');
        }
        overlay.setupDrag(el, {
            inDragMode: typeof (options === null || options === void 0 ? void 0 : options.inDragMode) === 'boolean'
                ? options.inDragMode
                : false,
        });
        const floatingGroupPanel = new _dockviewFloatingGroupPanel__WEBPACK_IMPORTED_MODULE_19__.DockviewFloatingGroupPanel(group, overlay);
        const disposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_4__.CompositeDisposable(group.api.onDidActiveChange((event) => {
            if (event.isActive) {
                overlay.bringToFront();
            }
        }), (0,_dom__WEBPACK_IMPORTED_MODULE_18__.watchElementResize)(group.element, (entry) => {
            const { width, height } = entry.contentRect;
            group.layout(width, height); // let the group know it's size is changing so it can fire events to the panel
        }));
        floatingGroupPanel.addDisposables(overlay.onDidChange(() => {
            // this is either a resize or a move
            // to inform the panels .layout(...) the group with it's current size
            // don't care about resize since the above watcher handles that
            group.layout(group.width, group.height);
        }), overlay.onDidChangeEnd(() => {
            this._bufferOnDidLayoutChange.fire();
        }), group.onDidChange((event) => {
            overlay.setBounds({
                height: event === null || event === void 0 ? void 0 : event.height,
                width: event === null || event === void 0 ? void 0 : event.width,
            });
        }), {
            dispose: () => {
                disposable.dispose();
                (0,_array__WEBPACK_IMPORTED_MODULE_2__.remove)(this._floatingGroups, floatingGroupPanel);
                group.model.location = { type: 'grid' };
                this.updateWatermark();
            },
        });
        this._floatingGroups.push(floatingGroupPanel);
        group.model.location = { type: 'floating' };
        if (!(options === null || options === void 0 ? void 0 : options.skipActiveGroup)) {
            this.doSetGroupAndPanelActive(group);
        }
        this.updateWatermark();
    }
    orthogonalize(position) {
        switch (position) {
            case 'top':
            case 'bottom':
                if (this.gridview.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_12__.Orientation.HORIZONTAL) {
                    // we need to add to a vertical splitview but the current root is a horizontal splitview.
                    // insert a vertical splitview at the root level and add the existing view as a child
                    this.gridview.insertOrthogonalSplitviewAtRoot();
                }
                break;
            case 'left':
            case 'right':
                if (this.gridview.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_12__.Orientation.VERTICAL) {
                    // we need to add to a horizontal splitview but the current root is a vertical splitview.
                    // insert a horiziontal splitview at the root level and add the existing view as a child
                    this.gridview.insertOrthogonalSplitviewAtRoot();
                }
                break;
            default:
                break;
        }
        switch (position) {
            case 'top':
            case 'left':
            case 'center':
                return this.createGroupAtLocation([0]); // insert into first position
            case 'bottom':
            case 'right':
                return this.createGroupAtLocation([this.gridview.length]); // insert into last position
            default:
                throw new Error(`unsupported position ${position}`);
        }
    }
    updateOptions(options) {
        var _a, _b, _c, _d;
        super.updateOptions(options);
        if ('floatingGroupBounds' in options) {
            for (const group of this._floatingGroups) {
                switch (options.floatingGroupBounds) {
                    case 'boundedWithinViewport':
                        group.overlay.minimumInViewportHeight = undefined;
                        group.overlay.minimumInViewportWidth = undefined;
                        break;
                    case undefined:
                        group.overlay.minimumInViewportHeight =
                            _constants__WEBPACK_IMPORTED_MODULE_20__.DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE;
                        group.overlay.minimumInViewportWidth =
                            _constants__WEBPACK_IMPORTED_MODULE_20__.DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE;
                        break;
                    default:
                        group.overlay.minimumInViewportHeight =
                            (_a = options.floatingGroupBounds) === null || _a === void 0 ? void 0 : _a.minimumHeightWithinViewport;
                        group.overlay.minimumInViewportWidth =
                            (_b = options.floatingGroupBounds) === null || _b === void 0 ? void 0 : _b.minimumWidthWithinViewport;
                }
                group.overlay.setBounds();
            }
        }
        if ('rootOverlayModel' in options) {
            this._rootDropTarget.setOverlayModel((_c = options.rootOverlayModel) !== null && _c !== void 0 ? _c : DEFAULT_ROOT_OVERLAY_MODEL);
        }
        if ('gap' in options) {
            this.gridview.margin = (_d = options.gap) !== null && _d !== void 0 ? _d : 0;
        }
        this._options = Object.assign(Object.assign({}, this.options), options);
        this.layout(this.gridview.width, this.gridview.height, true);
    }
    layout(width, height, forceResize) {
        super.layout(width, height, forceResize);
        if (this._floatingGroups) {
            for (const floating of this._floatingGroups) {
                // ensure floting groups stay within visible boundaries
                floating.overlay.setBounds();
            }
        }
    }
    focus() {
        var _a;
        (_a = this.activeGroup) === null || _a === void 0 ? void 0 : _a.focus();
    }
    getGroupPanel(id) {
        return this.panels.find((panel) => panel.id === id);
    }
    setActivePanel(panel) {
        panel.group.model.openPanel(panel);
        this.doSetGroupAndPanelActive(panel.group);
    }
    moveToNext(options = {}) {
        var _a;
        if (!options.group) {
            if (!this.activeGroup) {
                return;
            }
            options.group = this.activeGroup;
        }
        if (options.includePanel && options.group) {
            if (options.group.activePanel !==
                options.group.panels[options.group.panels.length - 1]) {
                options.group.model.moveToNext({ suppressRoll: true });
                return;
            }
        }
        const location = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(options.group.element);
        const next = (_a = this.gridview.next(location)) === null || _a === void 0 ? void 0 : _a.view;
        this.doSetGroupAndPanelActive(next);
    }
    moveToPrevious(options = {}) {
        var _a;
        if (!options.group) {
            if (!this.activeGroup) {
                return;
            }
            options.group = this.activeGroup;
        }
        if (options.includePanel && options.group) {
            if (options.group.activePanel !== options.group.panels[0]) {
                options.group.model.moveToPrevious({ suppressRoll: true });
                return;
            }
        }
        const location = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(options.group.element);
        const next = (_a = this.gridview.previous(location)) === null || _a === void 0 ? void 0 : _a.view;
        if (next) {
            this.doSetGroupAndPanelActive(next);
        }
    }
    /**
     * Serialize the current state of the layout
     *
     * @returns A JSON respresentation of the layout
     */
    toJSON() {
        var _a;
        const data = this.gridview.serialize();
        const panels = this.panels.reduce((collection, panel) => {
            collection[panel.id] = panel.toJSON();
            return collection;
        }, {});
        const floats = this._floatingGroups.map((group) => {
            return {
                data: group.group.toJSON(),
                position: group.overlay.toJSON(),
            };
        });
        const popoutGroups = this._popoutGroups.map((group) => {
            return {
                data: group.popoutGroup.toJSON(),
                gridReferenceGroup: group.referenceGroup,
                position: group.window.dimensions(),
                url: group.popoutGroup.api.location.type === 'popout'
                    ? group.popoutGroup.api.location.popoutUrl
                    : undefined,
            };
        });
        const result = {
            grid: data,
            panels,
            activeGroup: (_a = this.activeGroup) === null || _a === void 0 ? void 0 : _a.id,
        };
        if (floats.length > 0) {
            result.floatingGroups = floats;
        }
        if (popoutGroups.length > 0) {
            result.popoutGroups = popoutGroups;
        }
        return result;
    }
    fromJSON(data) {
        var _a, _b, _c;
        this.clear();
        if (typeof data !== 'object' || data === null) {
            throw new Error('serialized layout must be a non-null object');
        }
        const { grid, panels, activeGroup } = data;
        if (grid.root.type !== 'branch' || !Array.isArray(grid.root.data)) {
            throw new Error('root must be of type branch');
        }
        try {
            // take note of the existing dimensions
            const width = this.width;
            const height = this.height;
            const createGroupFromSerializedState = (data) => {
                const { id, locked, hideHeader, views, activeView } = data;
                if (typeof id !== 'string') {
                    throw new Error('group id must be of type string');
                }
                const group = this.createGroup({
                    id,
                    locked: !!locked,
                    hideHeader: !!hideHeader,
                });
                this._onDidAddGroup.fire(group);
                const createdPanels = [];
                for (const child of views) {
                    /**
                     * Run the deserializer step seperately since this may fail to due corrupted external state.
                     * In running this section first we avoid firing lots of 'add' events in the event of a failure
                     * due to a corruption of input data.
                     */
                    const panel = this._deserializer.fromJSON(panels[child], group);
                    createdPanels.push(panel);
                }
                for (let i = 0; i < views.length; i++) {
                    const panel = createdPanels[i];
                    const isActive = typeof activeView === 'string' &&
                        activeView === panel.id;
                    group.model.openPanel(panel, {
                        skipSetActive: !isActive,
                        skipSetGroupActive: true,
                    });
                }
                if (!group.activePanel && group.panels.length > 0) {
                    group.model.openPanel(group.panels[group.panels.length - 1], {
                        skipSetGroupActive: true,
                    });
                }
                return group;
            };
            this.gridview.deserialize(grid, {
                fromJSON: (node) => {
                    return createGroupFromSerializedState(node.data);
                },
            });
            this.layout(width, height, true);
            const serializedFloatingGroups = (_a = data.floatingGroups) !== null && _a !== void 0 ? _a : [];
            for (const serializedFloatingGroup of serializedFloatingGroups) {
                const { data, position } = serializedFloatingGroup;
                const group = createGroupFromSerializedState(data);
                this.addFloatingGroup(group, {
                    position: position,
                    width: position.width,
                    height: position.height,
                    skipRemoveGroup: true,
                    inDragMode: false,
                });
            }
            const serializedPopoutGroups = (_b = data.popoutGroups) !== null && _b !== void 0 ? _b : [];
            for (const serializedPopoutGroup of serializedPopoutGroups) {
                const { data, position, gridReferenceGroup, url } = serializedPopoutGroup;
                const group = createGroupFromSerializedState(data);
                this.addPopoutGroup((_c = (gridReferenceGroup
                    ? this.getPanel(gridReferenceGroup)
                    : undefined)) !== null && _c !== void 0 ? _c : group, {
                    position: position !== null && position !== void 0 ? position : undefined,
                    overridePopoutGroup: gridReferenceGroup
                        ? group
                        : undefined,
                    popoutUrl: url,
                });
            }
            for (const floatingGroup of this._floatingGroups) {
                floatingGroup.overlay.setBounds();
            }
            if (typeof activeGroup === 'string') {
                const panel = this.getPanel(activeGroup);
                if (panel) {
                    this.doSetGroupAndPanelActive(panel);
                }
            }
        }
        catch (err) {
            console.error('dockview: failed to deserialize layout. Reverting changes', err);
            /**
             * Takes all the successfully created groups and remove all of their panels.
             */
            for (const group of this.groups) {
                for (const panel of group.panels) {
                    this.removePanel(panel, {
                        removeEmptyGroup: false,
                        skipDispose: false,
                    });
                }
            }
            /**
             * To remove a group we cannot call this.removeGroup(...) since this makes assumptions about
             * the underlying HTMLElement existing in the Gridview.
             */
            for (const group of this.groups) {
                group.dispose();
                this._groups.delete(group.id);
                this._onDidRemoveGroup.fire(group);
            }
            // iterate over a reassigned array since original array will be modified
            for (const floatingGroup of [...this._floatingGroups]) {
                floatingGroup.dispose();
            }
            // fires clean-up events and clears the underlying HTML gridview.
            this.clear();
            /**
             * even though we have cleaned-up we still want to inform the caller of their error
             * and we'll do this through re-throwing the original error since afterall you would
             * expect trying to load a corrupted layout to result in an error and not silently fail...
             */
            throw err;
        }
        this.updateWatermark();
        this._onDidLayoutFromJSON.fire();
    }
    clear() {
        const groups = Array.from(this._groups.values()).map((_) => _.value);
        const hasActiveGroup = !!this.activeGroup;
        for (const group of groups) {
            // remove the group will automatically remove the panels
            this.removeGroup(group, { skipActive: true });
        }
        if (hasActiveGroup) {
            this.doSetGroupAndPanelActive(undefined);
        }
        this.gridview.clear();
    }
    closeAllGroups() {
        for (const entry of this._groups.entries()) {
            const [_, group] = entry;
            group.value.model.closeAllPanels();
        }
    }
    addPanel(options) {
        var _a, _b;
        if (this.panels.find((_) => _.id === options.id)) {
            throw new Error(`panel with id ${options.id} already exists`);
        }
        let referenceGroup;
        if (options.position && options.floating) {
            throw new Error('you can only provide one of: position, floating as arguments to .addPanel(...)');
        }
        const initial = {
            width: options.initialWidth,
            height: options.initialHeight,
        };
        let index;
        if (options.position) {
            if ((0,_options__WEBPACK_IMPORTED_MODULE_9__.isPanelOptionsWithPanel)(options.position)) {
                const referencePanel = typeof options.position.referencePanel === 'string'
                    ? this.getGroupPanel(options.position.referencePanel)
                    : options.position.referencePanel;
                index = options.position.index;
                if (!referencePanel) {
                    throw new Error(`referencePanel '${options.position.referencePanel}' does not exist`);
                }
                referenceGroup = this.findGroup(referencePanel);
            }
            else if ((0,_options__WEBPACK_IMPORTED_MODULE_9__.isPanelOptionsWithGroup)(options.position)) {
                referenceGroup =
                    typeof options.position.referenceGroup === 'string'
                        ? (_a = this._groups.get(options.position.referenceGroup)) === null || _a === void 0 ? void 0 : _a.value
                        : options.position.referenceGroup;
                index = options.position.index;
                if (!referenceGroup) {
                    throw new Error(`referenceGroup '${options.position.referenceGroup}' does not exist`);
                }
            }
            else {
                const group = this.orthogonalize((0,_dnd_droptarget__WEBPACK_IMPORTED_MODULE_1__.directionToPosition)(options.position.direction));
                const panel = this.createPanel(options, group);
                group.model.openPanel(panel, {
                    skipSetActive: options.inactive,
                    skipSetGroupActive: options.inactive,
                    index,
                });
                if (!options.inactive) {
                    this.doSetGroupAndPanelActive(group);
                }
                group.api.setSize({
                    height: initial === null || initial === void 0 ? void 0 : initial.height,
                    width: initial === null || initial === void 0 ? void 0 : initial.width,
                });
                return panel;
            }
        }
        else {
            referenceGroup = this.activeGroup;
        }
        let panel;
        if (referenceGroup) {
            const target = (0,_gridview_baseComponentGridview__WEBPACK_IMPORTED_MODULE_10__.toTarget)(((_b = options.position) === null || _b === void 0 ? void 0 : _b.direction) || 'within');
            if (options.floating) {
                const group = this.createGroup();
                this._onDidAddGroup.fire(group);
                const floatingGroupOptions = typeof options.floating === 'object' &&
                    options.floating !== null
                    ? options.floating
                    : {};
                this.addFloatingGroup(group, Object.assign(Object.assign({}, floatingGroupOptions), { inDragMode: false, skipRemoveGroup: true, skipActiveGroup: true }));
                panel = this.createPanel(options, group);
                group.model.openPanel(panel, {
                    skipSetActive: options.inactive,
                    skipSetGroupActive: options.inactive,
                    index,
                });
            }
            else if (referenceGroup.api.location.type === 'floating' ||
                target === 'center') {
                panel = this.createPanel(options, referenceGroup);
                referenceGroup.model.openPanel(panel, {
                    skipSetActive: options.inactive,
                    skipSetGroupActive: options.inactive,
                    index,
                });
                referenceGroup.api.setSize({
                    width: initial === null || initial === void 0 ? void 0 : initial.width,
                    height: initial === null || initial === void 0 ? void 0 : initial.height,
                });
                if (!options.inactive) {
                    this.doSetGroupAndPanelActive(referenceGroup);
                }
            }
            else {
                const location = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(referenceGroup.element);
                const relativeLocation = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getRelativeLocation)(this.gridview.orientation, location, target);
                const group = this.createGroupAtLocation(relativeLocation, this.orientationAtLocation(relativeLocation) ===
                    _splitview_splitview__WEBPACK_IMPORTED_MODULE_12__.Orientation.VERTICAL
                    ? initial === null || initial === void 0 ? void 0 : initial.height
                    : initial === null || initial === void 0 ? void 0 : initial.width);
                panel = this.createPanel(options, group);
                group.model.openPanel(panel, {
                    skipSetActive: options.inactive,
                    skipSetGroupActive: options.inactive,
                    index,
                });
                if (!options.inactive) {
                    this.doSetGroupAndPanelActive(group);
                }
            }
        }
        else if (options.floating) {
            const group = this.createGroup();
            this._onDidAddGroup.fire(group);
            const coordinates = typeof options.floating === 'object' &&
                options.floating !== null
                ? options.floating
                : {};
            this.addFloatingGroup(group, Object.assign(Object.assign({}, coordinates), { inDragMode: false, skipRemoveGroup: true, skipActiveGroup: true }));
            panel = this.createPanel(options, group);
            group.model.openPanel(panel, {
                skipSetActive: options.inactive,
                skipSetGroupActive: options.inactive,
                index,
            });
        }
        else {
            const group = this.createGroupAtLocation([0], this.gridview.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_12__.Orientation.VERTICAL
                ? initial === null || initial === void 0 ? void 0 : initial.height
                : initial === null || initial === void 0 ? void 0 : initial.width);
            panel = this.createPanel(options, group);
            group.model.openPanel(panel, {
                skipSetActive: options.inactive,
                skipSetGroupActive: options.inactive,
                index,
            });
            if (!options.inactive) {
                this.doSetGroupAndPanelActive(group);
            }
        }
        return panel;
    }
    removePanel(panel, options = {
        removeEmptyGroup: true,
    }) {
        const group = panel.group;
        if (!group) {
            throw new Error(`cannot remove panel ${panel.id}. it's missing a group.`);
        }
        group.model.removePanel(panel, {
            skipSetActiveGroup: options.skipSetActiveGroup,
        });
        if (!options.skipDispose) {
            panel.group.model.renderContainer.detatch(panel);
            panel.dispose();
        }
        if (group.size === 0 && options.removeEmptyGroup) {
            this.removeGroup(group, { skipActive: options.skipSetActiveGroup });
        }
    }
    createWatermarkComponent() {
        if (this.options.createWatermarkComponent) {
            return this.options.createWatermarkComponent();
        }
        return new _components_watermark_watermark__WEBPACK_IMPORTED_MODULE_6__.Watermark();
    }
    updateWatermark() {
        var _a, _b;
        if (this.groups.filter((x) => x.api.location.type === 'grid' && x.api.isVisible).length === 0) {
            if (!this.watermark) {
                this.watermark = this.createWatermarkComponent();
                this.watermark.init({
                    containerApi: new _api_component_api__WEBPACK_IMPORTED_MODULE_11__.DockviewApi(this),
                });
                const watermarkContainer = document.createElement('div');
                watermarkContainer.className = 'dv-watermark-container';
                (0,_dom__WEBPACK_IMPORTED_MODULE_18__.addTestId)(watermarkContainer, 'watermark-component');
                watermarkContainer.appendChild(this.watermark.element);
                this.gridview.element.appendChild(watermarkContainer);
            }
        }
        else if (this.watermark) {
            this.watermark.element.parentElement.remove();
            (_b = (_a = this.watermark).dispose) === null || _b === void 0 ? void 0 : _b.call(_a);
            this.watermark = null;
        }
    }
    addGroup(options) {
        var _a;
        if (options) {
            let referenceGroup;
            if ((0,_options__WEBPACK_IMPORTED_MODULE_9__.isGroupOptionsWithPanel)(options)) {
                const referencePanel = typeof options.referencePanel === 'string'
                    ? this.panels.find((panel) => panel.id === options.referencePanel)
                    : options.referencePanel;
                if (!referencePanel) {
                    throw new Error(`reference panel ${options.referencePanel} does not exist`);
                }
                referenceGroup = this.findGroup(referencePanel);
                if (!referenceGroup) {
                    throw new Error(`reference group for reference panel ${options.referencePanel} does not exist`);
                }
            }
            else if ((0,_options__WEBPACK_IMPORTED_MODULE_9__.isGroupOptionsWithGroup)(options)) {
                referenceGroup =
                    typeof options.referenceGroup === 'string'
                        ? (_a = this._groups.get(options.referenceGroup)) === null || _a === void 0 ? void 0 : _a.value
                        : options.referenceGroup;
                if (!referenceGroup) {
                    throw new Error(`reference group ${options.referenceGroup} does not exist`);
                }
            }
            else {
                const group = this.orthogonalize((0,_dnd_droptarget__WEBPACK_IMPORTED_MODULE_1__.directionToPosition)(options.direction));
                if (!options.skipSetActive) {
                    this.doSetGroupAndPanelActive(group);
                }
                return group;
            }
            const target = (0,_gridview_baseComponentGridview__WEBPACK_IMPORTED_MODULE_10__.toTarget)(options.direction || 'within');
            const location = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(referenceGroup.element);
            const relativeLocation = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getRelativeLocation)(this.gridview.orientation, location, target);
            const group = this.createGroup(options);
            const size = this.getLocationOrientation(relativeLocation) ===
                _splitview_splitview__WEBPACK_IMPORTED_MODULE_12__.Orientation.VERTICAL
                ? options.initialHeight
                : options.initialWidth;
            this.doAddGroup(group, relativeLocation, size);
            if (!options.skipSetActive) {
                this.doSetGroupAndPanelActive(group);
            }
            return group;
        }
        else {
            const group = this.createGroup(options);
            this.doAddGroup(group);
            this.doSetGroupAndPanelActive(group);
            return group;
        }
    }
    getLocationOrientation(location) {
        return location.length % 2 == 0 &&
            this.gridview.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_12__.Orientation.HORIZONTAL
            ? _splitview_splitview__WEBPACK_IMPORTED_MODULE_12__.Orientation.HORIZONTAL
            : _splitview_splitview__WEBPACK_IMPORTED_MODULE_12__.Orientation.VERTICAL;
    }
    removeGroup(group, options) {
        this.doRemoveGroup(group, options);
    }
    doRemoveGroup(group, options) {
        var _a;
        const panels = [...group.panels]; // reassign since group panels will mutate
        if (!(options === null || options === void 0 ? void 0 : options.skipDispose)) {
            for (const panel of panels) {
                this.removePanel(panel, {
                    removeEmptyGroup: false,
                    skipDispose: (_a = options === null || options === void 0 ? void 0 : options.skipDispose) !== null && _a !== void 0 ? _a : false,
                });
            }
        }
        const activePanel = this.activePanel;
        if (group.api.location.type === 'floating') {
            const floatingGroup = this._floatingGroups.find((_) => _.group === group);
            if (floatingGroup) {
                if (!(options === null || options === void 0 ? void 0 : options.skipDispose)) {
                    floatingGroup.group.dispose();
                    this._groups.delete(group.id);
                    this._onDidRemoveGroup.fire(group);
                }
                (0,_array__WEBPACK_IMPORTED_MODULE_2__.remove)(this._floatingGroups, floatingGroup);
                floatingGroup.dispose();
                if (!(options === null || options === void 0 ? void 0 : options.skipActive) && this._activeGroup === group) {
                    const groups = Array.from(this._groups.values());
                    this.doSetGroupAndPanelActive(groups.length > 0 ? groups[0].value : undefined);
                }
                return floatingGroup.group;
            }
            throw new Error('failed to find floating group');
        }
        if (group.api.location.type === 'popout') {
            const selectedGroup = this._popoutGroups.find((_) => _.popoutGroup === group);
            if (selectedGroup) {
                if (!(options === null || options === void 0 ? void 0 : options.skipDispose)) {
                    if (!(options === null || options === void 0 ? void 0 : options.skipPopoutAssociated)) {
                        const refGroup = selectedGroup.referenceGroup
                            ? this.getPanel(selectedGroup.referenceGroup)
                            : undefined;
                        if (refGroup && refGroup.panels.length === 0) {
                            this.removeGroup(refGroup);
                        }
                    }
                    selectedGroup.popoutGroup.dispose();
                    this._groups.delete(group.id);
                    this._onDidRemoveGroup.fire(group);
                }
                (0,_array__WEBPACK_IMPORTED_MODULE_2__.remove)(this._popoutGroups, selectedGroup);
                const removedGroup = selectedGroup.disposable.dispose();
                if (!(options === null || options === void 0 ? void 0 : options.skipPopoutReturn) && removedGroup) {
                    this.doAddGroup(removedGroup, [0]);
                    this.doSetGroupAndPanelActive(removedGroup);
                }
                if (!(options === null || options === void 0 ? void 0 : options.skipActive) && this._activeGroup === group) {
                    const groups = Array.from(this._groups.values());
                    this.doSetGroupAndPanelActive(groups.length > 0 ? groups[0].value : undefined);
                }
                this.updateWatermark();
                return selectedGroup.popoutGroup;
            }
            throw new Error('failed to find popout group');
        }
        const re = super.doRemoveGroup(group, options);
        if (!(options === null || options === void 0 ? void 0 : options.skipActive)) {
            if (this.activePanel !== activePanel) {
                this._onDidActivePanelChange.fire(this.activePanel);
            }
        }
        return re;
    }
    movingLock(func) {
        const isMoving = this._moving;
        try {
            this._moving = true;
            return func();
        }
        finally {
            this._moving = isMoving;
        }
    }
    moveGroupOrPanel(options) {
        var _a;
        const destinationGroup = options.to.group;
        const sourceGroupId = options.from.groupId;
        const sourceItemId = options.from.panelId;
        const destinationTarget = options.to.position;
        const destinationIndex = options.to.index;
        const sourceGroup = sourceGroupId
            ? (_a = this._groups.get(sourceGroupId)) === null || _a === void 0 ? void 0 : _a.value
            : undefined;
        if (!sourceGroup) {
            throw new Error(`Failed to find group id ${sourceGroupId}`);
        }
        if (sourceItemId === undefined) {
            /**
             * Moving an entire group into another group
             */
            this.moveGroup({
                from: { group: sourceGroup },
                to: {
                    group: destinationGroup,
                    position: destinationTarget,
                },
            });
            return;
        }
        if (!destinationTarget || destinationTarget === 'center') {
            /**
             * Dropping a panel within another group
             */
            const removedPanel = this.movingLock(() => sourceGroup.model.removePanel(sourceItemId, {
                skipSetActive: false,
                skipSetActiveGroup: true,
            }));
            if (!removedPanel) {
                throw new Error(`No panel with id ${sourceItemId}`);
            }
            if (sourceGroup.model.size === 0) {
                // remove the group and do not set a new group as active
                this.doRemoveGroup(sourceGroup, { skipActive: true });
            }
            this.movingLock(() => destinationGroup.model.openPanel(removedPanel, {
                index: destinationIndex,
                skipSetGroupActive: true,
            }));
            this.doSetGroupAndPanelActive(destinationGroup);
            this._onDidMovePanel.fire({
                panel: removedPanel,
                from: sourceGroup,
            });
        }
        else {
            /**
             * Dropping a panel to the extremities of a group which will place that panel
             * into an adjacent group
             */
            const referenceLocation = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(destinationGroup.element);
            const targetLocation = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getRelativeLocation)(this.gridview.orientation, referenceLocation, destinationTarget);
            if (sourceGroup.size < 2) {
                /**
                 * If we are moving from a group which only has one panel left we will consider
                 * moving the group itself rather than moving the panel into a newly created group
                 */
                const [targetParentLocation, to] = (0,_array__WEBPACK_IMPORTED_MODULE_2__.tail)(targetLocation);
                if (sourceGroup.api.location.type === 'grid') {
                    const sourceLocation = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(sourceGroup.element);
                    const [sourceParentLocation, from] = (0,_array__WEBPACK_IMPORTED_MODULE_2__.tail)(sourceLocation);
                    if ((0,_array__WEBPACK_IMPORTED_MODULE_2__.sequenceEquals)(sourceParentLocation, targetParentLocation)) {
                        // special case when 'swapping' two views within same grid location
                        // if a group has one tab - we are essentially moving the 'group'
                        // which is equivalent to swapping two views in this case
                        this.gridview.moveView(sourceParentLocation, from, to);
                        this._onDidMovePanel.fire({
                            panel: this.getGroupPanel(sourceItemId),
                            from: sourceGroup,
                        });
                        return;
                    }
                }
                if (sourceGroup.api.location.type === 'popout') {
                    /**
                     * the source group is a popout group with a single panel
                     *
                     * 1. remove the panel from the group without triggering any events
                     * 2. remove the popout group
                     * 3. create a new group at the requested location and add that panel
                     */
                    const popoutGroup = this._popoutGroups.find((group) => group.popoutGroup === sourceGroup);
                    const removedPanel = this.movingLock(() => popoutGroup.popoutGroup.model.removePanel(popoutGroup.popoutGroup.panels[0], {
                        skipSetActive: true,
                        skipSetActiveGroup: true,
                    }));
                    this.doRemoveGroup(sourceGroup, { skipActive: true });
                    const newGroup = this.createGroupAtLocation(targetLocation);
                    this.movingLock(() => newGroup.model.openPanel(removedPanel));
                    this.doSetGroupAndPanelActive(newGroup);
                    this._onDidMovePanel.fire({
                        panel: this.getGroupPanel(sourceItemId),
                        from: sourceGroup,
                    });
                    return;
                }
                // source group will become empty so delete the group
                const targetGroup = this.movingLock(() => this.doRemoveGroup(sourceGroup, {
                    skipActive: true,
                    skipDispose: true,
                }));
                // after deleting the group we need to re-evaulate the ref location
                const updatedReferenceLocation = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(destinationGroup.element);
                const location = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getRelativeLocation)(this.gridview.orientation, updatedReferenceLocation, destinationTarget);
                this.movingLock(() => this.doAddGroup(targetGroup, location));
                this.doSetGroupAndPanelActive(targetGroup);
                this._onDidMovePanel.fire({
                    panel: this.getGroupPanel(sourceItemId),
                    from: sourceGroup,
                });
            }
            else {
                /**
                 * The group we are removing from has many panels, we need to remove the panels we are moving,
                 * create a new group, add the panels to that new group and add the new group in an appropiate position
                 */
                const removedPanel = this.movingLock(() => sourceGroup.model.removePanel(sourceItemId, {
                    skipSetActive: false,
                    skipSetActiveGroup: true,
                }));
                if (!removedPanel) {
                    throw new Error(`No panel with id ${sourceItemId}`);
                }
                const dropLocation = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getRelativeLocation)(this.gridview.orientation, referenceLocation, destinationTarget);
                const group = this.createGroupAtLocation(dropLocation);
                this.movingLock(() => group.model.openPanel(removedPanel, {
                    skipSetGroupActive: true,
                }));
                this.doSetGroupAndPanelActive(group);
                this._onDidMovePanel.fire({
                    panel: removedPanel,
                    from: sourceGroup,
                });
            }
        }
    }
    moveGroup(options) {
        const from = options.from.group;
        const to = options.to.group;
        const target = options.to.position;
        if (target === 'center') {
            const activePanel = from.activePanel;
            const panels = this.movingLock(() => [...from.panels].map((p) => from.model.removePanel(p.id, {
                skipSetActive: true,
            })));
            if ((from === null || from === void 0 ? void 0 : from.model.size) === 0) {
                this.doRemoveGroup(from, { skipActive: true });
            }
            this.movingLock(() => {
                for (const panel of panels) {
                    to.model.openPanel(panel, {
                        skipSetActive: panel !== activePanel,
                        skipSetGroupActive: true,
                    });
                }
            });
            this.doSetGroupAndPanelActive(to);
        }
        else {
            switch (from.api.location.type) {
                case 'grid':
                    this.gridview.removeView((0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(from.element));
                    break;
                case 'floating': {
                    const selectedFloatingGroup = this._floatingGroups.find((x) => x.group === from);
                    if (!selectedFloatingGroup) {
                        throw new Error('failed to find floating group');
                    }
                    selectedFloatingGroup.dispose();
                    break;
                }
                case 'popout': {
                    const selectedPopoutGroup = this._popoutGroups.find((x) => x.popoutGroup === from);
                    if (!selectedPopoutGroup) {
                        throw new Error('failed to find popout group');
                    }
                    selectedPopoutGroup.disposable.dispose();
                }
            }
            const referenceLocation = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(to.element);
            const dropLocation = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getRelativeLocation)(this.gridview.orientation, referenceLocation, target);
            let size;
            switch (this.gridview.orientation) {
                case _splitview_splitview__WEBPACK_IMPORTED_MODULE_12__.Orientation.VERTICAL:
                    size =
                        referenceLocation.length % 2 == 0
                            ? from.api.width
                            : from.api.height;
                    break;
                case _splitview_splitview__WEBPACK_IMPORTED_MODULE_12__.Orientation.HORIZONTAL:
                    size =
                        referenceLocation.length % 2 == 0
                            ? from.api.height
                            : from.api.width;
                    break;
            }
            this.gridview.addView(from, size, dropLocation);
        }
        from.panels.forEach((panel) => {
            this._onDidMovePanel.fire({ panel, from });
        });
    }
    doSetGroupActive(group) {
        super.doSetGroupActive(group);
        const activePanel = this.activePanel;
        if (!this._moving &&
            activePanel !== this._onDidActivePanelChange.value) {
            this._onDidActivePanelChange.fire(activePanel);
        }
    }
    doSetGroupAndPanelActive(group) {
        super.doSetGroupActive(group);
        const activePanel = this.activePanel;
        if (group &&
            this.hasMaximizedGroup() &&
            !this.isMaximizedGroup(group)) {
            this.exitMaximizedGroup();
        }
        if (!this._moving &&
            activePanel !== this._onDidActivePanelChange.value) {
            this._onDidActivePanelChange.fire(activePanel);
        }
    }
    getNextGroupId() {
        let id = this.nextGroupId.next();
        while (this._groups.has(id)) {
            id = this.nextGroupId.next();
        }
        return id;
    }
    createGroup(options) {
        if (!options) {
            options = {};
        }
        let id = options === null || options === void 0 ? void 0 : options.id;
        if (id && this._groups.has(options.id)) {
            console.warn(`dockview: Duplicate group id ${options === null || options === void 0 ? void 0 : options.id}. reassigning group id to avoid errors`);
            id = undefined;
        }
        if (!id) {
            id = this.nextGroupId.next();
            while (this._groups.has(id)) {
                id = this.nextGroupId.next();
            }
        }
        const view = new _dockviewGroupPanel__WEBPACK_IMPORTED_MODULE_14__.DockviewGroupPanel(this, id, options);
        view.init({ params: {}, accessor: this });
        if (!this._groups.has(view.id)) {
            const disposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_4__.CompositeDisposable(view.model.onTabDragStart((event) => {
                this._onWillDragPanel.fire(event);
            }), view.model.onGroupDragStart((event) => {
                this._onWillDragGroup.fire(event);
            }), view.model.onMove((event) => {
                const { groupId, itemId, target, index } = event;
                this.moveGroupOrPanel({
                    from: { groupId: groupId, panelId: itemId },
                    to: {
                        group: view,
                        position: target,
                        index,
                    },
                });
            }), view.model.onDidDrop((event) => {
                this._onDidDrop.fire(event);
            }), view.model.onWillDrop((event) => {
                this._onWillDrop.fire(event);
            }), view.model.onWillShowOverlay((event) => {
                if (this.options.disableDnd) {
                    event.preventDefault();
                    return;
                }
                this._onWillShowOverlay.fire(event);
            }), view.model.onUnhandledDragOverEvent((event) => {
                this._onUnhandledDragOverEvent.fire(event);
            }), view.model.onDidAddPanel((event) => {
                if (this._moving) {
                    return;
                }
                this._onDidAddPanel.fire(event.panel);
            }), view.model.onDidRemovePanel((event) => {
                if (this._moving) {
                    return;
                }
                this._onDidRemovePanel.fire(event.panel);
            }), view.model.onDidActivePanelChange((event) => {
                if (this._moving) {
                    return;
                }
                if (event.panel !== this.activePanel) {
                    return;
                }
                if (this._onDidActivePanelChange.value !== event.panel) {
                    this._onDidActivePanelChange.fire(event.panel);
                }
            }), _events__WEBPACK_IMPORTED_MODULE_5__.Event.any(view.model.onDidPanelTitleChange, view.model.onDidPanelParametersChange)(() => {
                this._bufferOnDidLayoutChange.fire();
            }));
            this._groups.set(view.id, { value: view, disposable });
        }
        // TODO: must be called after the above listeners have been setup, not an ideal pattern
        view.initialize();
        return view;
    }
    createPanel(options, group) {
        var _a, _b, _c;
        const contentComponent = options.component;
        const tabComponent = (_a = options.tabComponent) !== null && _a !== void 0 ? _a : this.options.defaultTabComponent;
        const view = new _dockviewPanelModel__WEBPACK_IMPORTED_MODULE_15__.DockviewPanelModel(this, options.id, contentComponent, tabComponent);
        const panel = new _dockviewPanel__WEBPACK_IMPORTED_MODULE_3__.DockviewPanel(options.id, contentComponent, tabComponent, this, this._api, group, view, {
            renderer: options.renderer,
            minimumWidth: options.minimumWidth,
            minimumHeight: options.minimumHeight,
            maximumWidth: options.maximumWidth,
            maximumHeight: options.maximumHeight,
        });
        panel.init({
            title: (_b = options.title) !== null && _b !== void 0 ? _b : options.id,
            params: (_c = options === null || options === void 0 ? void 0 : options.params) !== null && _c !== void 0 ? _c : {},
        });
        return panel;
    }
    createGroupAtLocation(location, size) {
        const group = this.createGroup();
        this.doAddGroup(group, location, size);
        return group;
    }
    findGroup(panel) {
        var _a;
        return (_a = Array.from(this._groups.values()).find((group) => group.value.model.containsPanel(panel))) === null || _a === void 0 ? void 0 : _a.value;
    }
    orientationAtLocation(location) {
        const rootOrientation = this.gridview.orientation;
        return location.length % 2 == 1
            ? rootOrientation
            : (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.orthogonal)(rootOrientation);
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/dockviewFloatingGroupPanel.js":
/*!************************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/dockviewFloatingGroupPanel.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DockviewFloatingGroupPanel: () => (/* binding */ DockviewFloatingGroupPanel)
/* harmony export */ });
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");

class DockviewFloatingGroupPanel extends _lifecycle__WEBPACK_IMPORTED_MODULE_0__.CompositeDisposable {
    constructor(group, overlay) {
        super();
        this.group = group;
        this.overlay = overlay;
        this.addDisposables(overlay);
    }
    position(bounds) {
        this.overlay.setBounds(bounds);
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/dockviewGroupPanel.js":
/*!****************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/dockviewGroupPanel.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DockviewGroupPanel: () => (/* binding */ DockviewGroupPanel)
/* harmony export */ });
/* harmony import */ var _dockviewGroupPanelModel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dockviewGroupPanelModel */ "./node_modules/dockview-core/dist/esm/dockview/dockviewGroupPanelModel.js");
/* harmony import */ var _gridview_gridviewPanel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../gridview/gridviewPanel */ "./node_modules/dockview-core/dist/esm/gridview/gridviewPanel.js");
/* harmony import */ var _api_dockviewGroupPanelApi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../api/dockviewGroupPanelApi */ "./node_modules/dockview-core/dist/esm/api/dockviewGroupPanelApi.js");



const MINIMUM_DOCKVIEW_GROUP_PANEL_WIDTH = 100;
const MINIMUM_DOCKVIEW_GROUP_PANEL_HEIGHT = 100;
class DockviewGroupPanel extends _gridview_gridviewPanel__WEBPACK_IMPORTED_MODULE_1__.GridviewPanel {
    get minimumWidth() {
        var _a;
        const activePanelMinimumWidth = (_a = this.activePanel) === null || _a === void 0 ? void 0 : _a.minimumWidth;
        if (typeof activePanelMinimumWidth === 'number') {
            return activePanelMinimumWidth;
        }
        return super.__minimumWidth();
    }
    get minimumHeight() {
        var _a;
        const activePanelMinimumHeight = (_a = this.activePanel) === null || _a === void 0 ? void 0 : _a.minimumHeight;
        if (typeof activePanelMinimumHeight === 'number') {
            return activePanelMinimumHeight;
        }
        return super.__minimumHeight();
    }
    get maximumWidth() {
        var _a;
        const activePanelMaximumWidth = (_a = this.activePanel) === null || _a === void 0 ? void 0 : _a.maximumWidth;
        if (typeof activePanelMaximumWidth === 'number') {
            return activePanelMaximumWidth;
        }
        return super.__maximumWidth();
    }
    get maximumHeight() {
        var _a;
        const activePanelMaximumHeight = (_a = this.activePanel) === null || _a === void 0 ? void 0 : _a.maximumHeight;
        if (typeof activePanelMaximumHeight === 'number') {
            return activePanelMaximumHeight;
        }
        return super.__maximumHeight();
    }
    get panels() {
        return this._model.panels;
    }
    get activePanel() {
        return this._model.activePanel;
    }
    get size() {
        return this._model.size;
    }
    get model() {
        return this._model;
    }
    get locked() {
        return this._model.locked;
    }
    set locked(value) {
        this._model.locked = value;
    }
    get header() {
        return this._model.header;
    }
    constructor(accessor, id, options) {
        var _a, _b, _c, _d, _e, _f;
        super(id, 'groupview_default', {
            minimumHeight: (_b = (_a = options.constraints) === null || _a === void 0 ? void 0 : _a.minimumHeight) !== null && _b !== void 0 ? _b : MINIMUM_DOCKVIEW_GROUP_PANEL_HEIGHT,
            minimumWidth: (_d = (_c = options.constraints) === null || _c === void 0 ? void 0 : _c.maximumHeight) !== null && _d !== void 0 ? _d : MINIMUM_DOCKVIEW_GROUP_PANEL_WIDTH,
            maximumHeight: (_e = options.constraints) === null || _e === void 0 ? void 0 : _e.maximumHeight,
            maximumWidth: (_f = options.constraints) === null || _f === void 0 ? void 0 : _f.maximumWidth,
        }, new _api_dockviewGroupPanelApi__WEBPACK_IMPORTED_MODULE_2__.DockviewGroupPanelApiImpl(id, accessor));
        this.api.initialize(this); // cannot use 'this' after after 'super' call
        this._model = new _dockviewGroupPanelModel__WEBPACK_IMPORTED_MODULE_0__.DockviewGroupPanelModel(this.element, accessor, id, options, this);
        this.addDisposables(this.model.onDidActivePanelChange((event) => {
            this.api._onDidActivePanelChange.fire(event);
        }));
    }
    focus() {
        if (!this.api.isActive) {
            this.api.setActive();
        }
        super.focus();
    }
    initialize() {
        this._model.initialize();
    }
    setActive(isActive) {
        super.setActive(isActive);
        this.model.setActive(isActive);
    }
    layout(width, height) {
        super.layout(width, height);
        this.model.layout(width, height);
    }
    getComponent() {
        return this._model;
    }
    toJSON() {
        return this.model.toJSON();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/dockviewGroupPanelModel.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/dockviewGroupPanelModel.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DockviewDidDropEvent: () => (/* binding */ DockviewDidDropEvent),
/* harmony export */   DockviewGroupPanelModel: () => (/* binding */ DockviewGroupPanelModel),
/* harmony export */   DockviewWillDropEvent: () => (/* binding */ DockviewWillDropEvent),
/* harmony export */   WillShowOverlayLocationEvent: () => (/* binding */ WillShowOverlayLocationEvent)
/* harmony export */ });
/* harmony import */ var _api_component_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api/component.api */ "./node_modules/dockview-core/dist/esm/api/component.api.js");
/* harmony import */ var _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dnd/dataTransfer */ "./node_modules/dockview-core/dist/esm/dnd/dataTransfer.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _components_panel_content__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components/panel/content */ "./node_modules/dockview-core/dist/esm/dockview/components/panel/content.js");
/* harmony import */ var _components_titlebar_tabsContainer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./components/titlebar/tabsContainer */ "./node_modules/dockview-core/dist/esm/dockview/components/titlebar/tabsContainer.js");
/* harmony import */ var _options__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./options */ "./node_modules/dockview-core/dist/esm/dockview/options.js");








class DockviewDidDropEvent extends _events__WEBPACK_IMPORTED_MODULE_3__.DockviewEvent {
    get nativeEvent() {
        return this.options.nativeEvent;
    }
    get position() {
        return this.options.position;
    }
    get panel() {
        return this.options.panel;
    }
    get group() {
        return this.options.group;
    }
    get api() {
        return this.options.api;
    }
    constructor(options) {
        super();
        this.options = options;
    }
    getData() {
        return this.options.getData();
    }
}
class DockviewWillDropEvent extends DockviewDidDropEvent {
    get kind() {
        return this._kind;
    }
    constructor(options) {
        super(options);
        this._kind = options.kind;
    }
}
class WillShowOverlayLocationEvent {
    get kind() {
        return this.options.kind;
    }
    get nativeEvent() {
        return this.event.nativeEvent;
    }
    get position() {
        return this.event.position;
    }
    get defaultPrevented() {
        return this.event.defaultPrevented;
    }
    get panel() {
        return this.options.panel;
    }
    get api() {
        return this.options.api;
    }
    get group() {
        return this.options.group;
    }
    preventDefault() {
        this.event.preventDefault();
    }
    getData() {
        return this.options.getData();
    }
    constructor(event, options) {
        this.event = event;
        this.options = options;
    }
}
class DockviewGroupPanelModel extends _lifecycle__WEBPACK_IMPORTED_MODULE_4__.CompositeDisposable {
    get element() {
        throw new Error('dockview: not supported');
    }
    get activePanel() {
        return this._activePanel;
    }
    get locked() {
        return this._locked;
    }
    set locked(value) {
        this._locked = value;
        (0,_dom__WEBPACK_IMPORTED_MODULE_2__.toggleClass)(this.container, 'dv-locked-groupview', value === 'no-drop-target' || value);
    }
    get isActive() {
        return this._isGroupActive;
    }
    get panels() {
        return this._panels;
    }
    get size() {
        return this._panels.length;
    }
    get isEmpty() {
        return this._panels.length === 0;
    }
    get hasWatermark() {
        return !!(this.watermark && this.container.contains(this.watermark.element));
    }
    get header() {
        return this.tabsContainer;
    }
    get isContentFocused() {
        if (!document.activeElement) {
            return false;
        }
        return (0,_dom__WEBPACK_IMPORTED_MODULE_2__.isAncestor)(document.activeElement, this.contentContainer.element);
    }
    get location() {
        return this._location;
    }
    set location(value) {
        this._location = value;
        (0,_dom__WEBPACK_IMPORTED_MODULE_2__.toggleClass)(this.container, 'dv-groupview-floating', false);
        (0,_dom__WEBPACK_IMPORTED_MODULE_2__.toggleClass)(this.container, 'dv-groupview-popout', false);
        switch (value.type) {
            case 'grid':
                this.contentContainer.dropTarget.setTargetZones([
                    'top',
                    'bottom',
                    'left',
                    'right',
                    'center',
                ]);
                break;
            case 'floating':
                this.contentContainer.dropTarget.setTargetZones(['center']);
                this.contentContainer.dropTarget.setTargetZones(value
                    ? ['center']
                    : ['top', 'bottom', 'left', 'right', 'center']);
                (0,_dom__WEBPACK_IMPORTED_MODULE_2__.toggleClass)(this.container, 'dv-groupview-floating', true);
                break;
            case 'popout':
                this.contentContainer.dropTarget.setTargetZones(['center']);
                (0,_dom__WEBPACK_IMPORTED_MODULE_2__.toggleClass)(this.container, 'dv-groupview-popout', true);
                break;
        }
        this.groupPanel.api._onDidLocationChange.fire({
            location: this.location,
        });
    }
    constructor(container, accessor, id, options, groupPanel) {
        var _a;
        super();
        this.container = container;
        this.accessor = accessor;
        this.id = id;
        this.options = options;
        this.groupPanel = groupPanel;
        this._isGroupActive = false;
        this._locked = false;
        this._location = { type: 'grid' };
        this.mostRecentlyUsed = [];
        this._overwriteRenderContainer = null;
        this._onDidChange = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onDidChange = this._onDidChange.event;
        this._width = 0;
        this._height = 0;
        this._panels = [];
        this._panelDisposables = new Map();
        this._onMove = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onMove = this._onMove.event;
        this._onDidDrop = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onDidDrop = this._onDidDrop.event;
        this._onWillDrop = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onWillDrop = this._onWillDrop.event;
        this._onWillShowOverlay = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onWillShowOverlay = this._onWillShowOverlay.event;
        this._onTabDragStart = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onTabDragStart = this._onTabDragStart.event;
        this._onGroupDragStart = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onGroupDragStart = this._onGroupDragStart.event;
        this._onDidAddPanel = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onDidAddPanel = this._onDidAddPanel.event;
        this._onDidPanelTitleChange = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onDidPanelTitleChange = this._onDidPanelTitleChange.event;
        this._onDidPanelParametersChange = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onDidPanelParametersChange = this._onDidPanelParametersChange.event;
        this._onDidRemovePanel = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onDidRemovePanel = this._onDidRemovePanel.event;
        this._onDidActivePanelChange = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onDidActivePanelChange = this._onDidActivePanelChange.event;
        this._onUnhandledDragOverEvent = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onUnhandledDragOverEvent = this._onUnhandledDragOverEvent.event;
        (0,_dom__WEBPACK_IMPORTED_MODULE_2__.toggleClass)(this.container, 'dv-groupview', true);
        this._api = new _api_component_api__WEBPACK_IMPORTED_MODULE_0__.DockviewApi(this.accessor);
        this.tabsContainer = new _components_titlebar_tabsContainer__WEBPACK_IMPORTED_MODULE_6__.TabsContainer(this.accessor, this.groupPanel);
        this.contentContainer = new _components_panel_content__WEBPACK_IMPORTED_MODULE_5__.ContentContainer(this.accessor, this);
        container.append(this.tabsContainer.element, this.contentContainer.element);
        this.header.hidden = !!options.hideHeader;
        this.locked = (_a = options.locked) !== null && _a !== void 0 ? _a : false;
        this.addDisposables(this._onTabDragStart, this._onGroupDragStart, this._onWillShowOverlay, this.tabsContainer.onTabDragStart((event) => {
            this._onTabDragStart.fire(event);
        }), this.tabsContainer.onGroupDragStart((event) => {
            this._onGroupDragStart.fire(event);
        }), this.tabsContainer.onDrop((event) => {
            this.handleDropEvent('header', event.event, 'center', event.index);
        }), this.contentContainer.onDidFocus(() => {
            this.accessor.doSetGroupActive(this.groupPanel);
        }), this.contentContainer.onDidBlur(() => {
            // noop
        }), this.contentContainer.dropTarget.onDrop((event) => {
            this.handleDropEvent('content', event.nativeEvent, event.position);
        }), this.tabsContainer.onWillShowOverlay((event) => {
            this._onWillShowOverlay.fire(event);
        }), this.contentContainer.dropTarget.onWillShowOverlay((event) => {
            this._onWillShowOverlay.fire(new WillShowOverlayLocationEvent(event, {
                kind: 'content',
                panel: this.activePanel,
                api: this._api,
                group: this.groupPanel,
                getData: _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_1__.getPanelData,
            }));
        }), this._onMove, this._onDidChange, this._onDidDrop, this._onWillDrop, this._onDidAddPanel, this._onDidRemovePanel, this._onDidActivePanelChange, this._onUnhandledDragOverEvent, this._onDidPanelTitleChange, this._onDidPanelParametersChange);
    }
    focusContent() {
        this.contentContainer.element.focus();
    }
    set renderContainer(value) {
        this.panels.forEach((panel) => {
            this.renderContainer.detatch(panel);
        });
        this._overwriteRenderContainer = value;
        this.panels.forEach((panel) => {
            this.rerender(panel);
        });
    }
    get renderContainer() {
        var _a;
        return ((_a = this._overwriteRenderContainer) !== null && _a !== void 0 ? _a : this.accessor.overlayRenderContainer);
    }
    initialize() {
        if (this.options.panels) {
            this.options.panels.forEach((panel) => {
                this.doAddPanel(panel);
            });
        }
        if (this.options.activePanel) {
            this.openPanel(this.options.activePanel);
        }
        // must be run after the constructor otherwise this.parent may not be
        // correctly initialized
        this.setActive(this.isActive, true);
        this.updateContainer();
        if (this.accessor.options.createRightHeaderActionComponent) {
            this._rightHeaderActions =
                this.accessor.options.createRightHeaderActionComponent(this.groupPanel);
            this.addDisposables(this._rightHeaderActions);
            this._rightHeaderActions.init({
                containerApi: this._api,
                api: this.groupPanel.api,
                group: this.groupPanel,
            });
            this.tabsContainer.setRightActionsElement(this._rightHeaderActions.element);
        }
        if (this.accessor.options.createLeftHeaderActionComponent) {
            this._leftHeaderActions =
                this.accessor.options.createLeftHeaderActionComponent(this.groupPanel);
            this.addDisposables(this._leftHeaderActions);
            this._leftHeaderActions.init({
                containerApi: this._api,
                api: this.groupPanel.api,
                group: this.groupPanel,
            });
            this.tabsContainer.setLeftActionsElement(this._leftHeaderActions.element);
        }
        if (this.accessor.options.createPrefixHeaderActionComponent) {
            this._prefixHeaderActions =
                this.accessor.options.createPrefixHeaderActionComponent(this.groupPanel);
            this.addDisposables(this._prefixHeaderActions);
            this._prefixHeaderActions.init({
                containerApi: this._api,
                api: this.groupPanel.api,
                group: this.groupPanel,
            });
            this.tabsContainer.setPrefixActionsElement(this._prefixHeaderActions.element);
        }
    }
    rerender(panel) {
        this.contentContainer.renderPanel(panel, { asActive: false });
    }
    indexOf(panel) {
        return this.tabsContainer.indexOf(panel.id);
    }
    toJSON() {
        var _a;
        const result = {
            views: this.tabsContainer.panels,
            activeView: (_a = this._activePanel) === null || _a === void 0 ? void 0 : _a.id,
            id: this.id,
        };
        if (this.locked !== false) {
            result.locked = this.locked;
        }
        if (this.header.hidden) {
            result.hideHeader = true;
        }
        return result;
    }
    moveToNext(options) {
        if (!options) {
            options = {};
        }
        if (!options.panel) {
            options.panel = this.activePanel;
        }
        const index = options.panel ? this.panels.indexOf(options.panel) : -1;
        let normalizedIndex;
        if (index < this.panels.length - 1) {
            normalizedIndex = index + 1;
        }
        else if (!options.suppressRoll) {
            normalizedIndex = 0;
        }
        else {
            return;
        }
        this.openPanel(this.panels[normalizedIndex]);
    }
    moveToPrevious(options) {
        if (!options) {
            options = {};
        }
        if (!options.panel) {
            options.panel = this.activePanel;
        }
        if (!options.panel) {
            return;
        }
        const index = this.panels.indexOf(options.panel);
        let normalizedIndex;
        if (index > 0) {
            normalizedIndex = index - 1;
        }
        else if (!options.suppressRoll) {
            normalizedIndex = this.panels.length - 1;
        }
        else {
            return;
        }
        this.openPanel(this.panels[normalizedIndex]);
    }
    containsPanel(panel) {
        return this.panels.includes(panel);
    }
    init(_params) {
        //noop
    }
    update(_params) {
        //noop
    }
    focus() {
        var _a;
        (_a = this._activePanel) === null || _a === void 0 ? void 0 : _a.focus();
    }
    openPanel(panel, options = {}) {
        /**
         * set the panel group
         * add the panel
         * check if group active
         * check if panel active
         */
        if (typeof options.index !== 'number' ||
            options.index > this.panels.length) {
            options.index = this.panels.length;
        }
        const skipSetActive = !!options.skipSetActive;
        // ensure the group is updated before we fire any events
        panel.updateParentGroup(this.groupPanel, {
            skipSetActive: options.skipSetActive,
        });
        this.doAddPanel(panel, options.index, {
            skipSetActive: skipSetActive,
        });
        if (this._activePanel === panel) {
            this.contentContainer.renderPanel(panel, { asActive: true });
            return;
        }
        if (!skipSetActive) {
            this.doSetActivePanel(panel);
        }
        if (!options.skipSetGroupActive) {
            this.accessor.doSetGroupActive(this.groupPanel);
        }
        if (!options.skipSetActive) {
            this.updateContainer();
        }
    }
    removePanel(groupItemOrId, options = {
        skipSetActive: false,
    }) {
        const id = typeof groupItemOrId === 'string'
            ? groupItemOrId
            : groupItemOrId.id;
        const panelToRemove = this._panels.find((panel) => panel.id === id);
        if (!panelToRemove) {
            throw new Error('invalid operation');
        }
        return this._removePanel(panelToRemove, options);
    }
    closeAllPanels() {
        if (this.panels.length > 0) {
            // take a copy since we will be edting the array as we iterate through
            const arrPanelCpy = [...this.panels];
            for (const panel of arrPanelCpy) {
                this.doClose(panel);
            }
        }
        else {
            this.accessor.removeGroup(this.groupPanel);
        }
    }
    closePanel(panel) {
        this.doClose(panel);
    }
    doClose(panel) {
        const isLast = this.panels.length === 1 && this.accessor.groups.length === 1;
        this.accessor.removePanel(panel, isLast && this.accessor.options.noPanelsOverlay === 'emptyGroup'
            ? { removeEmptyGroup: false }
            : undefined);
    }
    isPanelActive(panel) {
        return this._activePanel === panel;
    }
    updateActions(element) {
        this.tabsContainer.setRightActionsElement(element);
    }
    setActive(isGroupActive, force = false) {
        if (!force && this.isActive === isGroupActive) {
            return;
        }
        this._isGroupActive = isGroupActive;
        (0,_dom__WEBPACK_IMPORTED_MODULE_2__.toggleClass)(this.container, 'dv-active-group', isGroupActive);
        (0,_dom__WEBPACK_IMPORTED_MODULE_2__.toggleClass)(this.container, 'dv-inactive-group', !isGroupActive);
        this.tabsContainer.setActive(this.isActive);
        if (!this._activePanel && this.panels.length > 0) {
            this.doSetActivePanel(this.panels[0]);
        }
        this.updateContainer();
    }
    layout(width, height) {
        var _a;
        this._width = width;
        this._height = height;
        this.contentContainer.layout(this._width, this._height);
        if ((_a = this._activePanel) === null || _a === void 0 ? void 0 : _a.layout) {
            this._activePanel.layout(this._width, this._height);
        }
    }
    _removePanel(panel, options) {
        const isActivePanel = this._activePanel === panel;
        this.doRemovePanel(panel);
        if (isActivePanel && this.panels.length > 0) {
            const nextPanel = this.mostRecentlyUsed[0];
            this.openPanel(nextPanel, {
                skipSetActive: options.skipSetActive,
                skipSetGroupActive: options.skipSetActiveGroup,
            });
        }
        if (this._activePanel && this.panels.length === 0) {
            this.doSetActivePanel(undefined);
        }
        if (!options.skipSetActive) {
            this.updateContainer();
        }
        return panel;
    }
    doRemovePanel(panel) {
        const index = this.panels.indexOf(panel);
        if (this._activePanel === panel) {
            this.contentContainer.closePanel();
        }
        this.tabsContainer.delete(panel.id);
        this._panels.splice(index, 1);
        if (this.mostRecentlyUsed.includes(panel)) {
            const index = this.mostRecentlyUsed.indexOf(panel);
            this.mostRecentlyUsed.splice(index, 1);
        }
        const disposable = this._panelDisposables.get(panel.id);
        if (disposable) {
            disposable.dispose();
            this._panelDisposables.delete(panel.id);
        }
        this._onDidRemovePanel.fire({ panel });
    }
    doAddPanel(panel, index = this.panels.length, options = { skipSetActive: false }) {
        const existingPanel = this._panels.indexOf(panel);
        const hasExistingPanel = existingPanel > -1;
        this.tabsContainer.show();
        this.contentContainer.show();
        this.tabsContainer.openPanel(panel, index);
        if (!options.skipSetActive) {
            this.contentContainer.openPanel(panel);
        }
        if (hasExistingPanel) {
            // TODO - need to ensure ordering hasn't changed and if it has need to re-order this.panels
            return;
        }
        this.updateMru(panel);
        this.panels.splice(index, 0, panel);
        this._panelDisposables.set(panel.id, new _lifecycle__WEBPACK_IMPORTED_MODULE_4__.CompositeDisposable(panel.api.onDidTitleChange((event) => this._onDidPanelTitleChange.fire(event)), panel.api.onDidParametersChange((event) => this._onDidPanelParametersChange.fire(event))));
        this._onDidAddPanel.fire({ panel });
    }
    doSetActivePanel(panel) {
        if (this._activePanel === panel) {
            return;
        }
        this._activePanel = panel;
        if (panel) {
            this.tabsContainer.setActivePanel(panel);
            panel.layout(this._width, this._height);
            this.updateMru(panel);
            this._onDidActivePanelChange.fire({
                panel,
            });
        }
    }
    updateMru(panel) {
        if (this.mostRecentlyUsed.includes(panel)) {
            this.mostRecentlyUsed.splice(this.mostRecentlyUsed.indexOf(panel), 1);
        }
        this.mostRecentlyUsed = [panel, ...this.mostRecentlyUsed];
    }
    updateContainer() {
        var _a, _b;
        this.panels.forEach((panel) => panel.runEvents());
        if (this.isEmpty && !this.watermark) {
            const watermark = this.accessor.createWatermarkComponent();
            watermark.init({
                containerApi: this._api,
                group: this.groupPanel,
            });
            this.watermark = watermark;
            (0,_events__WEBPACK_IMPORTED_MODULE_3__.addDisposableListener)(this.watermark.element, 'pointerdown', () => {
                if (!this.isActive) {
                    this.accessor.doSetGroupActive(this.groupPanel);
                }
            });
            this.contentContainer.element.appendChild(this.watermark.element);
        }
        if (!this.isEmpty && this.watermark) {
            this.watermark.element.remove();
            (_b = (_a = this.watermark).dispose) === null || _b === void 0 ? void 0 : _b.call(_a);
            this.watermark = undefined;
        }
    }
    canDisplayOverlay(event, position, target) {
        const firedEvent = new _options__WEBPACK_IMPORTED_MODULE_7__.DockviewUnhandledDragOverEvent(event, target, position, _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_1__.getPanelData, this.accessor.getPanel(this.id));
        this._onUnhandledDragOverEvent.fire(firedEvent);
        return firedEvent.isAccepted;
    }
    handleDropEvent(type, event, position, index) {
        if (this.locked === 'no-drop-target') {
            return;
        }
        function getKind() {
            switch (type) {
                case 'header':
                    return typeof index === 'number' ? 'tab' : 'header_space';
                case 'content':
                    return 'content';
            }
        }
        const panel = typeof index === 'number' ? this.panels[index] : undefined;
        const willDropEvent = new DockviewWillDropEvent({
            nativeEvent: event,
            position,
            panel,
            getData: () => (0,_dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_1__.getPanelData)(),
            kind: getKind(),
            group: this.groupPanel,
            api: this._api,
        });
        this._onWillDrop.fire(willDropEvent);
        if (willDropEvent.defaultPrevented) {
            return;
        }
        const data = (0,_dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_1__.getPanelData)();
        if (data && data.viewId === this.accessor.id) {
            if (data.panelId === null) {
                // this is a group move dnd event
                const { groupId } = data;
                this._onMove.fire({
                    target: position,
                    groupId: groupId,
                    index,
                });
                return;
            }
            const fromSameGroup = this.tabsContainer.indexOf(data.panelId) !== -1;
            if (fromSameGroup && this.tabsContainer.size === 1) {
                return;
            }
            const { groupId, panelId } = data;
            const isSameGroup = this.id === groupId;
            if (isSameGroup && !position) {
                const oldIndex = this.tabsContainer.indexOf(panelId);
                if (oldIndex === index) {
                    return;
                }
            }
            this._onMove.fire({
                target: position,
                groupId: data.groupId,
                itemId: data.panelId,
                index,
            });
        }
        else {
            this._onDidDrop.fire(new DockviewDidDropEvent({
                nativeEvent: event,
                position,
                panel,
                getData: () => (0,_dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_1__.getPanelData)(),
                group: this.groupPanel,
                api: this._api,
            }));
        }
    }
    dispose() {
        var _a, _b, _c;
        super.dispose();
        (_a = this.watermark) === null || _a === void 0 ? void 0 : _a.element.remove();
        (_c = (_b = this.watermark) === null || _b === void 0 ? void 0 : _b.dispose) === null || _c === void 0 ? void 0 : _c.call(_b);
        this.watermark = undefined;
        for (const panel of this.panels) {
            panel.dispose();
        }
        this.tabsContainer.dispose();
        this.contentContainer.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/dockviewPanel.js":
/*!***********************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/dockviewPanel.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DockviewPanel: () => (/* binding */ DockviewPanel)
/* harmony export */ });
/* harmony import */ var _api_dockviewPanelApi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api/dockviewPanelApi */ "./node_modules/dockview-core/dist/esm/api/dockviewPanelApi.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _api_panelApi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../api/panelApi */ "./node_modules/dockview-core/dist/esm/api/panelApi.js");



class DockviewPanel extends _lifecycle__WEBPACK_IMPORTED_MODULE_1__.CompositeDisposable {
    get params() {
        return this._params;
    }
    get title() {
        return this._title;
    }
    get group() {
        return this._group;
    }
    get renderer() {
        var _a;
        return (_a = this._renderer) !== null && _a !== void 0 ? _a : this.accessor.renderer;
    }
    get minimumWidth() {
        return this._minimumWidth;
    }
    get minimumHeight() {
        return this._minimumHeight;
    }
    get maximumWidth() {
        return this._maximumWidth;
    }
    get maximumHeight() {
        return this._maximumHeight;
    }
    constructor(id, component, tabComponent, accessor, containerApi, group, view, options) {
        super();
        this.id = id;
        this.accessor = accessor;
        this.containerApi = containerApi;
        this.view = view;
        this._renderer = options.renderer;
        this._group = group;
        this._minimumWidth = options.minimumWidth;
        this._minimumHeight = options.minimumHeight;
        this._maximumWidth = options.maximumWidth;
        this._maximumHeight = options.maximumHeight;
        this.api = new _api_dockviewPanelApi__WEBPACK_IMPORTED_MODULE_0__.DockviewPanelApiImpl(this, this._group, accessor, component, tabComponent);
        this.addDisposables(this.api.onActiveChange(() => {
            accessor.setActivePanel(this);
        }), this.api.onDidSizeChange((event) => {
            // forward the resize event to the group since if you want to resize a panel
            // you are actually just resizing the panels parent which is the group
            this.group.api.setSize(event);
        }), this.api.onDidRendererChange(() => {
            this.group.model.rerender(this);
        }));
    }
    init(params) {
        this._params = params.params;
        this.view.init(Object.assign(Object.assign({}, params), { api: this.api, containerApi: this.containerApi }));
        this.setTitle(params.title);
    }
    focus() {
        const event = new _api_panelApi__WEBPACK_IMPORTED_MODULE_2__.WillFocusEvent();
        this.api._onWillFocus.fire(event);
        if (event.defaultPrevented) {
            return;
        }
        if (!this.api.isActive) {
            this.api.setActive();
        }
    }
    toJSON() {
        return {
            id: this.id,
            contentComponent: this.view.contentComponent,
            tabComponent: this.view.tabComponent,
            params: Object.keys(this._params || {}).length > 0
                ? this._params
                : undefined,
            title: this.title,
            renderer: this._renderer,
            minimumHeight: this._minimumHeight,
            maximumHeight: this._maximumHeight,
            minimumWidth: this._minimumWidth,
            maximumWidth: this._maximumWidth,
        };
    }
    setTitle(title) {
        const didTitleChange = title !== this.title;
        if (didTitleChange) {
            this._title = title;
            this.api._onDidTitleChange.fire({ title });
        }
    }
    setRenderer(renderer) {
        const didChange = renderer !== this.renderer;
        if (didChange) {
            this._renderer = renderer;
            this.api._onDidRendererChange.fire({
                renderer: renderer,
            });
        }
    }
    update(event) {
        var _a;
        // merge the new parameters with the existing parameters
        this._params = Object.assign(Object.assign({}, ((_a = this._params) !== null && _a !== void 0 ? _a : {})), event.params);
        /**
         * delete new keys that have a value of undefined,
         * allow values of null
         */
        for (const key of Object.keys(event.params)) {
            if (event.params[key] === undefined) {
                delete this._params[key];
            }
        }
        // update the view with the updated props
        this.view.update({
            params: this._params,
        });
    }
    updateParentGroup(group, options) {
        this._group = group;
        this.api.group = this._group;
        const isPanelVisible = this._group.model.isPanelActive(this);
        const isActive = this.group.api.isActive && isPanelVisible;
        if (!(options === null || options === void 0 ? void 0 : options.skipSetActive)) {
            if (this.api.isActive !== isActive) {
                this.api._onDidActiveChange.fire({
                    isActive: this.group.api.isActive && isPanelVisible,
                });
            }
        }
        if (this.api.isVisible !== isPanelVisible) {
            this.api._onDidVisibilityChange.fire({
                isVisible: isPanelVisible,
            });
        }
    }
    runEvents() {
        const isPanelVisible = this._group.model.isPanelActive(this);
        const isActive = this.group.api.isActive && isPanelVisible;
        if (this.api.isActive !== isActive) {
            this.api._onDidActiveChange.fire({
                isActive: this.group.api.isActive && isPanelVisible,
            });
        }
        if (this.api.isVisible !== isPanelVisible) {
            this.api._onDidVisibilityChange.fire({
                isVisible: isPanelVisible,
            });
        }
    }
    layout(width, height) {
        // TODO: Can we somehow do height without header height or indicate what the header height is?
        this.api._onDidDimensionChange.fire({
            width,
            height: height,
        });
        this.view.layout(width, height);
    }
    dispose() {
        this.api.dispose();
        this.view.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/dockviewPanelModel.js":
/*!****************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/dockviewPanelModel.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DockviewPanelModel: () => (/* binding */ DockviewPanelModel)
/* harmony export */ });
/* harmony import */ var _components_tab_defaultTab__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components/tab/defaultTab */ "./node_modules/dockview-core/dist/esm/dockview/components/tab/defaultTab.js");

class DockviewPanelModel {
    get content() {
        return this._content;
    }
    get tab() {
        return this._tab;
    }
    constructor(accessor, id, contentComponent, tabComponent) {
        this.accessor = accessor;
        this.id = id;
        this.contentComponent = contentComponent;
        this.tabComponent = tabComponent;
        this._content = this.createContentComponent(this.id, contentComponent);
        this._tab = this.createTabComponent(this.id, tabComponent);
    }
    init(params) {
        this.content.init(params);
        this.tab.init(params);
    }
    updateParentGroup(_group, _isPanelVisible) {
        // noop
    }
    layout(width, height) {
        var _a, _b;
        (_b = (_a = this.content).layout) === null || _b === void 0 ? void 0 : _b.call(_a, width, height);
    }
    update(event) {
        var _a, _b, _c, _d;
        (_b = (_a = this.content).update) === null || _b === void 0 ? void 0 : _b.call(_a, event);
        (_d = (_c = this.tab).update) === null || _d === void 0 ? void 0 : _d.call(_c, event);
    }
    dispose() {
        var _a, _b, _c, _d;
        (_b = (_a = this.content).dispose) === null || _b === void 0 ? void 0 : _b.call(_a);
        (_d = (_c = this.tab).dispose) === null || _d === void 0 ? void 0 : _d.call(_c);
    }
    createContentComponent(id, componentName) {
        return this.accessor.options.createComponent({
            id,
            name: componentName,
        });
    }
    createTabComponent(id, componentName) {
        const name = componentName !== null && componentName !== void 0 ? componentName : this.accessor.options.defaultTabComponent;
        if (name) {
            if (this.accessor.options.createTabComponent) {
                const component = this.accessor.options.createTabComponent({
                    id,
                    name,
                });
                if (component) {
                    return component;
                }
                else {
                    return new _components_tab_defaultTab__WEBPACK_IMPORTED_MODULE_0__.DefaultTab();
                }
            }
            console.warn(`dockview: tabComponent '${componentName}' was not found. falling back to the default tab.`);
        }
        return new _components_tab_defaultTab__WEBPACK_IMPORTED_MODULE_0__.DefaultTab();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/options.js":
/*!*****************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/options.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DockviewUnhandledDragOverEvent: () => (/* binding */ DockviewUnhandledDragOverEvent),
/* harmony export */   PROPERTY_KEYS_DOCKVIEW: () => (/* binding */ PROPERTY_KEYS_DOCKVIEW),
/* harmony export */   isGroupOptionsWithGroup: () => (/* binding */ isGroupOptionsWithGroup),
/* harmony export */   isGroupOptionsWithPanel: () => (/* binding */ isGroupOptionsWithPanel),
/* harmony export */   isPanelOptionsWithGroup: () => (/* binding */ isPanelOptionsWithGroup),
/* harmony export */   isPanelOptionsWithPanel: () => (/* binding */ isPanelOptionsWithPanel)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");

class DockviewUnhandledDragOverEvent extends _events__WEBPACK_IMPORTED_MODULE_0__.AcceptableEvent {
    constructor(nativeEvent, target, position, getData, group) {
        super();
        this.nativeEvent = nativeEvent;
        this.target = target;
        this.position = position;
        this.getData = getData;
        this.group = group;
    }
}
const PROPERTY_KEYS_DOCKVIEW = (() => {
    /**
     * by readong the keys from an empty value object TypeScript will error
     * when we add or remove new properties to `DockviewOptions`
     */
    const properties = {
        disableAutoResizing: undefined,
        hideBorders: undefined,
        singleTabMode: undefined,
        disableFloatingGroups: undefined,
        floatingGroupBounds: undefined,
        popoutUrl: undefined,
        defaultRenderer: undefined,
        debug: undefined,
        rootOverlayModel: undefined,
        locked: undefined,
        disableDnd: undefined,
        gap: undefined,
        className: undefined,
        noPanelsOverlay: undefined,
    };
    return Object.keys(properties);
})();
function isPanelOptionsWithPanel(data) {
    if (data.referencePanel) {
        return true;
    }
    return false;
}
function isPanelOptionsWithGroup(data) {
    if (data.referenceGroup) {
        return true;
    }
    return false;
}
function isGroupOptionsWithPanel(data) {
    if (data.referencePanel) {
        return true;
    }
    return false;
}
function isGroupOptionsWithGroup(data) {
    if (data.referenceGroup) {
        return true;
    }
    return false;
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/strictEventsSequencing.js":
/*!********************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/strictEventsSequencing.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StrictEventsSequencing: () => (/* binding */ StrictEventsSequencing)
/* harmony export */ });
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");

class StrictEventsSequencing extends _lifecycle__WEBPACK_IMPORTED_MODULE_0__.CompositeDisposable {
    constructor(accessor) {
        super();
        this.accessor = accessor;
        this.init();
    }
    init() {
        const panels = new Set();
        const groups = new Set();
        this.addDisposables(this.accessor.onDidAddPanel((panel) => {
            if (panels.has(panel.api.id)) {
                throw new Error(`dockview: Invalid event sequence. [onDidAddPanel] called for panel ${panel.api.id} but panel already exists`);
            }
            else {
                panels.add(panel.api.id);
            }
        }), this.accessor.onDidRemovePanel((panel) => {
            if (!panels.has(panel.api.id)) {
                throw new Error(`dockview: Invalid event sequence. [onDidRemovePanel] called for panel ${panel.api.id} but panel does not exists`);
            }
            else {
                panels.delete(panel.api.id);
            }
        }), this.accessor.onDidAddGroup((group) => {
            if (groups.has(group.api.id)) {
                throw new Error(`dockview: Invalid event sequence. [onDidAddGroup] called for group ${group.api.id} but group already exists`);
            }
            else {
                groups.add(group.api.id);
            }
        }), this.accessor.onDidRemoveGroup((group) => {
            if (!groups.has(group.api.id)) {
                throw new Error(`dockview: Invalid event sequence. [onDidRemoveGroup] called for group ${group.api.id} but group does not exists`);
            }
            else {
                groups.delete(group.api.id);
            }
        }));
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/types.js":
/*!***************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/types.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dom.js":
/*!****************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dom.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Classnames: () => (/* binding */ Classnames),
/* harmony export */   OverflowObserver: () => (/* binding */ OverflowObserver),
/* harmony export */   addClasses: () => (/* binding */ addClasses),
/* harmony export */   addStyles: () => (/* binding */ addStyles),
/* harmony export */   addTestId: () => (/* binding */ addTestId),
/* harmony export */   disableIframePointEvents: () => (/* binding */ disableIframePointEvents),
/* harmony export */   getDockviewTheme: () => (/* binding */ getDockviewTheme),
/* harmony export */   getDomNodePagePosition: () => (/* binding */ getDomNodePagePosition),
/* harmony export */   getElementsByTagName: () => (/* binding */ getElementsByTagName),
/* harmony export */   isAncestor: () => (/* binding */ isAncestor),
/* harmony export */   isInDocument: () => (/* binding */ isInDocument),
/* harmony export */   quasiDefaultPrevented: () => (/* binding */ quasiDefaultPrevented),
/* harmony export */   quasiPreventDefault: () => (/* binding */ quasiPreventDefault),
/* harmony export */   removeClasses: () => (/* binding */ removeClasses),
/* harmony export */   toggleClass: () => (/* binding */ toggleClass),
/* harmony export */   trackFocus: () => (/* binding */ trackFocus),
/* harmony export */   watchElementResize: () => (/* binding */ watchElementResize)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");


class OverflowObserver extends _lifecycle__WEBPACK_IMPORTED_MODULE_1__.CompositeDisposable {
    constructor(el) {
        super();
        this._onDidChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidChange = this._onDidChange.event;
        this._value = null;
        this.addDisposables(this._onDidChange, watchElementResize(el, (entry) => {
            const hasScrollX = entry.target.scrollWidth > entry.target.clientWidth;
            const hasScrollY = entry.target.scrollHeight > entry.target.clientHeight;
            this._value = { hasScrollX, hasScrollY };
            this._onDidChange.fire(this._value);
        }));
    }
}
function watchElementResize(element, cb) {
    const observer = new ResizeObserver((entires) => {
        /**
         * Fast browser window resize produces Error: ResizeObserver loop limit exceeded.
         * The error isn't visible in browser console, doesn't affect functionality, but degrades performance.
         * See https://stackoverflow.com/questions/49384120/resizeobserver-loop-limit-exceeded/58701523#58701523
         */
        requestAnimationFrame(() => {
            const firstEntry = entires[0];
            cb(firstEntry);
        });
    });
    observer.observe(element);
    return {
        dispose: () => {
            observer.unobserve(element);
            observer.disconnect();
        },
    };
}
const removeClasses = (element, ...classes) => {
    for (const classname of classes) {
        if (element.classList.contains(classname)) {
            element.classList.remove(classname);
        }
    }
};
const addClasses = (element, ...classes) => {
    for (const classname of classes) {
        if (!element.classList.contains(classname)) {
            element.classList.add(classname);
        }
    }
};
const toggleClass = (element, className, isToggled) => {
    const hasClass = element.classList.contains(className);
    if (isToggled && !hasClass) {
        element.classList.add(className);
    }
    if (!isToggled && hasClass) {
        element.classList.remove(className);
    }
};
function isAncestor(testChild, testAncestor) {
    while (testChild) {
        if (testChild === testAncestor) {
            return true;
        }
        testChild = testChild.parentNode;
    }
    return false;
}
function getElementsByTagName(tag) {
    return Array.prototype.slice.call(document.getElementsByTagName(tag), 0);
}
function trackFocus(element) {
    return new FocusTracker(element);
}
/**
 * Track focus on an element. Ensure tabIndex is set when an HTMLElement is not focusable by default
 */
class FocusTracker extends _lifecycle__WEBPACK_IMPORTED_MODULE_1__.CompositeDisposable {
    constructor(element) {
        super();
        this._onDidFocus = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidFocus = this._onDidFocus.event;
        this._onDidBlur = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidBlur = this._onDidBlur.event;
        this.addDisposables(this._onDidFocus, this._onDidBlur);
        let hasFocus = isAncestor(document.activeElement, element);
        let loosingFocus = false;
        const onFocus = () => {
            loosingFocus = false;
            if (!hasFocus) {
                hasFocus = true;
                this._onDidFocus.fire();
            }
        };
        const onBlur = () => {
            if (hasFocus) {
                loosingFocus = true;
                window.setTimeout(() => {
                    if (loosingFocus) {
                        loosingFocus = false;
                        hasFocus = false;
                        this._onDidBlur.fire();
                    }
                }, 0);
            }
        };
        this._refreshStateHandler = () => {
            const currentNodeHasFocus = isAncestor(document.activeElement, element);
            if (currentNodeHasFocus !== hasFocus) {
                if (hasFocus) {
                    onBlur();
                }
                else {
                    onFocus();
                }
            }
        };
        if (element instanceof HTMLElement) {
            this.addDisposables((0,_events__WEBPACK_IMPORTED_MODULE_0__.addDisposableListener)(element, 'focus', onFocus, true));
            this.addDisposables((0,_events__WEBPACK_IMPORTED_MODULE_0__.addDisposableListener)(element, 'blur', onBlur, true));
        }
        else {
            this.addDisposables((0,_events__WEBPACK_IMPORTED_MODULE_0__.addDisposableWindowListener)(element, 'focus', onFocus, true));
            this.addDisposables((0,_events__WEBPACK_IMPORTED_MODULE_0__.addDisposableWindowListener)(element, 'blur', onBlur, true));
        }
    }
    refreshState() {
        this._refreshStateHandler();
    }
}
// quasi: apparently, but not really; seemingly
const QUASI_PREVENT_DEFAULT_KEY = 'dv-quasiPreventDefault';
// mark an event directly for other listeners to check
function quasiPreventDefault(event) {
    event[QUASI_PREVENT_DEFAULT_KEY] = true;
}
// check if this event has been marked
function quasiDefaultPrevented(event) {
    return event[QUASI_PREVENT_DEFAULT_KEY];
}
function addStyles(document, styleSheetList) {
    const styleSheets = Array.from(styleSheetList);
    for (const styleSheet of styleSheets) {
        if (styleSheet.href) {
            const link = document.createElement('link');
            link.href = styleSheet.href;
            link.type = styleSheet.type;
            link.rel = 'stylesheet';
            document.head.appendChild(link);
        }
        let cssTexts = [];
        try {
            if (styleSheet.cssRules) {
                cssTexts = Array.from(styleSheet.cssRules).map((rule) => rule.cssText);
            }
        }
        catch (err) {
            // security errors (lack of permissions), ignore
        }
        for (const rule of cssTexts) {
            const style = document.createElement('style');
            style.appendChild(document.createTextNode(rule));
            document.head.appendChild(style);
        }
    }
}
function getDomNodePagePosition(domNode) {
    const { left, top, width, height } = domNode.getBoundingClientRect();
    return {
        left: left + window.scrollX,
        top: top + window.scrollY,
        width: width,
        height: height,
    };
}
/**
 * Check whether an element is in the DOM (including the Shadow DOM)
 * @see https://terodox.tech/how-to-tell-if-an-element-is-in-the-dom-including-the-shadow-dom/
 */
function isInDocument(element) {
    let currentElement = element;
    while (currentElement === null || currentElement === void 0 ? void 0 : currentElement.parentNode) {
        if (currentElement.parentNode === document) {
            return true;
        }
        else if (currentElement.parentNode instanceof DocumentFragment) {
            // handle shadow DOMs
            currentElement = currentElement.parentNode.host;
        }
        else {
            currentElement = currentElement.parentNode;
        }
    }
    return false;
}
function addTestId(element, id) {
    element.setAttribute('data-testid', id);
}
function disableIframePointEvents() {
    const iframes = [
        ...getElementsByTagName('iframe'),
        ...getElementsByTagName('webview'),
    ];
    const original = new WeakMap(); // don't hold onto HTMLElement references longer than required
    for (const iframe of iframes) {
        original.set(iframe, iframe.style.pointerEvents);
        iframe.style.pointerEvents = 'none';
    }
    return {
        release: () => {
            var _a;
            for (const iframe of iframes) {
                iframe.style.pointerEvents = (_a = original.get(iframe)) !== null && _a !== void 0 ? _a : 'auto';
            }
            iframes.splice(0, iframes.length); // don't hold onto HTMLElement references longer than required
        },
    };
}
function getDockviewTheme(element) {
    function toClassList(element) {
        const list = [];
        for (let i = 0; i < element.classList.length; i++) {
            list.push(element.classList.item(i));
        }
        return list;
    }
    let theme = undefined;
    let parent = element;
    while (parent !== null) {
        theme = toClassList(parent).find((cls) => cls.startsWith('dockview-theme-'));
        if (typeof theme === 'string') {
            break;
        }
        parent = parent.parentElement;
    }
    return theme;
}
class Classnames {
    constructor(element) {
        this.element = element;
        this._classNames = [];
    }
    setClassNames(classNames) {
        for (const className of this._classNames) {
            toggleClass(this.element, className, false);
        }
        this._classNames = classNames
            .split(' ')
            .filter((v) => v.trim().length > 0);
        for (const className of this._classNames) {
            toggleClass(this.element, className, true);
        }
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/events.js":
/*!*******************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/events.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AcceptableEvent: () => (/* binding */ AcceptableEvent),
/* harmony export */   AsapEvent: () => (/* binding */ AsapEvent),
/* harmony export */   DockviewEvent: () => (/* binding */ DockviewEvent),
/* harmony export */   Emitter: () => (/* binding */ Emitter),
/* harmony export */   Event: () => (/* binding */ Event),
/* harmony export */   addDisposableListener: () => (/* binding */ addDisposableListener),
/* harmony export */   addDisposableWindowListener: () => (/* binding */ addDisposableWindowListener)
/* harmony export */ });
var Event;
(function (Event) {
    Event.any = (...children) => {
        return (listener) => {
            const disposables = children.map((child) => child(listener));
            return {
                dispose: () => {
                    disposables.forEach((d) => {
                        d.dispose();
                    });
                },
            };
        };
    };
})(Event || (Event = {}));
class DockviewEvent {
    constructor() {
        this._defaultPrevented = false;
    }
    get defaultPrevented() {
        return this._defaultPrevented;
    }
    preventDefault() {
        this._defaultPrevented = true;
    }
}
class AcceptableEvent {
    constructor() {
        this._isAccepted = false;
    }
    get isAccepted() {
        return this._isAccepted;
    }
    accept() {
        this._isAccepted = true;
    }
}
class LeakageMonitor {
    constructor() {
        this.events = new Map();
    }
    get size() {
        return this.events.size;
    }
    add(event, stacktrace) {
        this.events.set(event, stacktrace);
    }
    delete(event) {
        this.events.delete(event);
    }
    clear() {
        this.events.clear();
    }
}
class Stacktrace {
    static create() {
        var _a;
        return new Stacktrace((_a = new Error().stack) !== null && _a !== void 0 ? _a : '');
    }
    constructor(value) {
        this.value = value;
    }
    print() {
        console.warn('dockview: stacktrace', this.value);
    }
}
class Listener {
    constructor(callback, stacktrace) {
        this.callback = callback;
        this.stacktrace = stacktrace;
    }
}
// relatively simple event emitter taken from https://github.com/microsoft/vscode/blob/master/src/vs/base/common/event.ts
class Emitter {
    static setLeakageMonitorEnabled(isEnabled) {
        if (isEnabled !== Emitter.ENABLE_TRACKING) {
            Emitter.MEMORY_LEAK_WATCHER.clear();
        }
        Emitter.ENABLE_TRACKING = isEnabled;
    }
    get value() {
        return this._last;
    }
    constructor(options) {
        this.options = options;
        this._listeners = [];
        this._disposed = false;
    }
    get event() {
        if (!this._event) {
            this._event = (callback) => {
                var _a;
                if (((_a = this.options) === null || _a === void 0 ? void 0 : _a.replay) && this._last !== undefined) {
                    callback(this._last);
                }
                const listener = new Listener(callback, Emitter.ENABLE_TRACKING ? Stacktrace.create() : undefined);
                this._listeners.push(listener);
                return {
                    dispose: () => {
                        const index = this._listeners.indexOf(listener);
                        if (index > -1) {
                            this._listeners.splice(index, 1);
                        }
                        else if (Emitter.ENABLE_TRACKING) {
                            // console.warn(
                            //     `dockview: listener already disposed`,
                            //     Stacktrace.create().print()
                            // );
                        }
                    },
                };
            };
            if (Emitter.ENABLE_TRACKING) {
                Emitter.MEMORY_LEAK_WATCHER.add(this._event, Stacktrace.create());
            }
        }
        return this._event;
    }
    fire(e) {
        this._last = e;
        for (const listener of this._listeners) {
            listener.callback(e);
        }
    }
    dispose() {
        if (!this._disposed) {
            this._disposed = true;
            if (this._listeners.length > 0) {
                if (Emitter.ENABLE_TRACKING) {
                    queueMicrotask(() => {
                        var _a;
                        // don't check until stack of execution is completed to allow for out-of-order disposals within the same execution block
                        for (const listener of this._listeners) {
                            console.warn('dockview: stacktrace', (_a = listener.stacktrace) === null || _a === void 0 ? void 0 : _a.print());
                        }
                    });
                }
                this._listeners = [];
            }
            if (Emitter.ENABLE_TRACKING && this._event) {
                Emitter.MEMORY_LEAK_WATCHER.delete(this._event);
            }
        }
    }
}
Emitter.ENABLE_TRACKING = false;
Emitter.MEMORY_LEAK_WATCHER = new LeakageMonitor();
function addDisposableWindowListener(element, type, listener, options) {
    element.addEventListener(type, listener, options);
    return {
        dispose: () => {
            element.removeEventListener(type, listener, options);
        },
    };
}
function addDisposableListener(element, type, listener, options) {
    element.addEventListener(type, listener, options);
    return {
        dispose: () => {
            element.removeEventListener(type, listener, options);
        },
    };
}
/**
 *
 * Event Emitter that fires events from a Microtask callback, only one event will fire per event-loop cycle.
 *
 * It's kind of like using an `asapScheduler` in RxJs with additional logic to only fire once per event-loop cycle.
 * This implementation exists to avoid external dependencies.
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/queueMicrotask
 * @see https://rxjs.dev/api/index/const/asapScheduler
 */
class AsapEvent {
    constructor() {
        this._onFired = new Emitter();
        this._currentFireCount = 0;
        this._queued = false;
        this.onEvent = (e) => {
            /**
             * when the event is first subscribed to take note of the current fire count
             */
            const fireCountAtTimeOfEventSubscription = this._currentFireCount;
            return this._onFired.event(() => {
                /**
                 * if the current fire count is greater than the fire count at event subscription
                 * then the event has been fired since we subscribed and it's ok to "on_next" the event.
                 *
                 * if the count is not greater then what we are recieving is an event from the microtask
                 * queue that was triggered before we actually subscribed and therfore we should ignore it.
                 */
                if (this._currentFireCount > fireCountAtTimeOfEventSubscription) {
                    e();
                }
            });
        };
    }
    fire() {
        this._currentFireCount++;
        if (this._queued) {
            return;
        }
        this._queued = true;
        queueMicrotask(() => {
            this._queued = false;
            this._onFired.fire();
        });
    }
    dispose() {
        this._onFired.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/gridview/baseComponentGridview.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/gridview/baseComponentGridview.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseGrid: () => (/* binding */ BaseGrid),
/* harmony export */   toTarget: () => (/* binding */ toTarget)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _gridview__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gridview */ "./node_modules/dockview-core/dist/esm/gridview/gridview.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math */ "./node_modules/dockview-core/dist/esm/math.js");
/* harmony import */ var _splitview_splitview__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../splitview/splitview */ "./node_modules/dockview-core/dist/esm/splitview/splitview.js");
/* harmony import */ var _resizable__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../resizable */ "./node_modules/dockview-core/dist/esm/resizable.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");







const nextLayoutId = (0,_math__WEBPACK_IMPORTED_MODULE_3__.sequentialNumberGenerator)();
function toTarget(direction) {
    switch (direction) {
        case 'left':
            return 'left';
        case 'right':
            return 'right';
        case 'above':
            return 'top';
        case 'below':
            return 'bottom';
        case 'within':
        default:
            return 'center';
    }
}
class BaseGrid extends _resizable__WEBPACK_IMPORTED_MODULE_5__.Resizable {
    get id() {
        return this._id;
    }
    get size() {
        return this._groups.size;
    }
    get groups() {
        return Array.from(this._groups.values()).map((_) => _.value);
    }
    get width() {
        return this.gridview.width;
    }
    get height() {
        return this.gridview.height;
    }
    get minimumHeight() {
        return this.gridview.minimumHeight;
    }
    get maximumHeight() {
        return this.gridview.maximumHeight;
    }
    get minimumWidth() {
        return this.gridview.minimumWidth;
    }
    get maximumWidth() {
        return this.gridview.maximumWidth;
    }
    get activeGroup() {
        return this._activeGroup;
    }
    get locked() {
        return this.gridview.locked;
    }
    set locked(value) {
        this.gridview.locked = value;
    }
    constructor(container, options) {
        var _a;
        super(document.createElement('div'), options.disableAutoResizing);
        this._id = nextLayoutId.next();
        this._groups = new Map();
        this._onDidRemove = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidRemove = this._onDidRemove.event;
        this._onDidAdd = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidAdd = this._onDidAdd.event;
        this._onDidMaximizedChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidMaximizedChange = this._onDidMaximizedChange.event;
        this._onDidActiveChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidActiveChange = this._onDidActiveChange.event;
        this._bufferOnDidLayoutChange = new _events__WEBPACK_IMPORTED_MODULE_0__.AsapEvent();
        this.onDidLayoutChange = this._bufferOnDidLayoutChange.onEvent;
        this._onDidViewVisibilityChangeMicroTaskQueue = new _events__WEBPACK_IMPORTED_MODULE_0__.AsapEvent();
        this.onDidViewVisibilityChangeMicroTaskQueue = this._onDidViewVisibilityChangeMicroTaskQueue.onEvent;
        this.element.style.height = '100%';
        this.element.style.width = '100%';
        this._classNames = new _dom__WEBPACK_IMPORTED_MODULE_6__.Classnames(this.element);
        this._classNames.setClassNames((_a = options.className) !== null && _a !== void 0 ? _a : '');
        // the container is owned by the third-party, do not modify/delete it
        container.appendChild(this.element);
        this.gridview = new _gridview__WEBPACK_IMPORTED_MODULE_1__.Gridview(!!options.proportionalLayout, options.styles, options.orientation, options.locked, options.margin);
        this.gridview.locked = !!options.locked;
        this.element.appendChild(this.gridview.element);
        this.layout(0, 0, true); // set some elements height/widths
        this.addDisposables(this.gridview.onDidMaximizedNodeChange((event) => {
            this._onDidMaximizedChange.fire({
                panel: event.view,
                isMaximized: event.isMaximized,
            });
        }), this.gridview.onDidViewVisibilityChange(() => this._onDidViewVisibilityChangeMicroTaskQueue.fire()), this.onDidViewVisibilityChangeMicroTaskQueue(() => {
            this.layout(this.width, this.height, true);
        }), _lifecycle__WEBPACK_IMPORTED_MODULE_2__.Disposable.from(() => {
            var _a;
            (_a = this.element.parentElement) === null || _a === void 0 ? void 0 : _a.removeChild(this.element);
        }), this.gridview.onDidChange(() => {
            this._bufferOnDidLayoutChange.fire();
        }), _events__WEBPACK_IMPORTED_MODULE_0__.Event.any(this.onDidAdd, this.onDidRemove, this.onDidActiveChange)(() => {
            this._bufferOnDidLayoutChange.fire();
        }), this._onDidMaximizedChange, this._onDidViewVisibilityChangeMicroTaskQueue, this._bufferOnDidLayoutChange);
    }
    setVisible(panel, visible) {
        this.gridview.setViewVisible((0,_gridview__WEBPACK_IMPORTED_MODULE_1__.getGridLocation)(panel.element), visible);
        this._bufferOnDidLayoutChange.fire();
    }
    isVisible(panel) {
        return this.gridview.isViewVisible((0,_gridview__WEBPACK_IMPORTED_MODULE_1__.getGridLocation)(panel.element));
    }
    updateOptions(options) {
        var _a, _b, _c, _d;
        if (typeof options.proportionalLayout === 'boolean') {
            // this.gridview.proportionalLayout = options.proportionalLayout; // not supported
        }
        if (options.orientation) {
            this.gridview.orientation = options.orientation;
        }
        if ('styles' in options) {
            // this.gridview.styles = options.styles; // not supported
        }
        if ('disableResizing' in options) {
            this.disableResizing = (_a = options.disableAutoResizing) !== null && _a !== void 0 ? _a : false;
        }
        if ('locked' in options) {
            this.locked = (_b = options.locked) !== null && _b !== void 0 ? _b : false;
        }
        if ('margin' in options) {
            this.gridview.margin = (_c = options.margin) !== null && _c !== void 0 ? _c : 0;
        }
        if ('className' in options) {
            this._classNames.setClassNames((_d = options.className) !== null && _d !== void 0 ? _d : '');
        }
    }
    maximizeGroup(panel) {
        this.gridview.maximizeView(panel);
        this.doSetGroupActive(panel);
    }
    isMaximizedGroup(panel) {
        return this.gridview.maximizedView() === panel;
    }
    exitMaximizedGroup() {
        this.gridview.exitMaximizedView();
    }
    hasMaximizedGroup() {
        return this.gridview.hasMaximizedView();
    }
    doAddGroup(group, location = [0], size) {
        this.gridview.addView(group, size !== null && size !== void 0 ? size : _splitview_splitview__WEBPACK_IMPORTED_MODULE_4__.Sizing.Distribute, location);
        this._onDidAdd.fire(group);
    }
    doRemoveGroup(group, options) {
        if (!this._groups.has(group.id)) {
            throw new Error('invalid operation');
        }
        const item = this._groups.get(group.id);
        const view = this.gridview.remove(group, _splitview_splitview__WEBPACK_IMPORTED_MODULE_4__.Sizing.Distribute);
        if (item && !(options === null || options === void 0 ? void 0 : options.skipDispose)) {
            item.disposable.dispose();
            item.value.dispose();
            this._groups.delete(group.id);
            this._onDidRemove.fire(group);
        }
        if (!(options === null || options === void 0 ? void 0 : options.skipActive) && this._activeGroup === group) {
            const groups = Array.from(this._groups.values());
            this.doSetGroupActive(groups.length > 0 ? groups[0].value : undefined);
        }
        return view;
    }
    getPanel(id) {
        var _a;
        return (_a = this._groups.get(id)) === null || _a === void 0 ? void 0 : _a.value;
    }
    doSetGroupActive(group) {
        if (this._activeGroup === group) {
            return;
        }
        if (this._activeGroup) {
            this._activeGroup.setActive(false);
        }
        if (group) {
            group.setActive(true);
        }
        this._activeGroup = group;
        this._onDidActiveChange.fire(group);
    }
    removeGroup(group) {
        this.doRemoveGroup(group);
    }
    moveToNext(options) {
        var _a;
        if (!options) {
            options = {};
        }
        if (!options.group) {
            if (!this.activeGroup) {
                return;
            }
            options.group = this.activeGroup;
        }
        const location = (0,_gridview__WEBPACK_IMPORTED_MODULE_1__.getGridLocation)(options.group.element);
        const next = (_a = this.gridview.next(location)) === null || _a === void 0 ? void 0 : _a.view;
        this.doSetGroupActive(next);
    }
    moveToPrevious(options) {
        var _a;
        if (!options) {
            options = {};
        }
        if (!options.group) {
            if (!this.activeGroup) {
                return;
            }
            options.group = this.activeGroup;
        }
        const location = (0,_gridview__WEBPACK_IMPORTED_MODULE_1__.getGridLocation)(options.group.element);
        const next = (_a = this.gridview.previous(location)) === null || _a === void 0 ? void 0 : _a.view;
        this.doSetGroupActive(next);
    }
    layout(width, height, forceResize) {
        const different = forceResize || width !== this.width || height !== this.height;
        if (!different) {
            return;
        }
        this.gridview.element.style.height = `${height}px`;
        this.gridview.element.style.width = `${width}px`;
        this.gridview.layout(width, height);
    }
    dispose() {
        this._onDidActiveChange.dispose();
        this._onDidAdd.dispose();
        this._onDidRemove.dispose();
        for (const group of this.groups) {
            group.dispose();
        }
        this.gridview.dispose();
        super.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/gridview/basePanelView.js":
/*!***********************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/gridview/basePanelView.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BasePanelView: () => (/* binding */ BasePanelView)
/* harmony export */ });
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _api_panelApi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../api/panelApi */ "./node_modules/dockview-core/dist/esm/api/panelApi.js");



class BasePanelView extends _lifecycle__WEBPACK_IMPORTED_MODULE_1__.CompositeDisposable {
    get element() {
        return this._element;
    }
    get width() {
        return this._width;
    }
    get height() {
        return this._height;
    }
    get params() {
        var _a;
        return (_a = this._params) === null || _a === void 0 ? void 0 : _a.params;
    }
    constructor(id, component, api) {
        super();
        this.id = id;
        this.component = component;
        this.api = api;
        this._height = 0;
        this._width = 0;
        this._element = document.createElement('div');
        this._element.tabIndex = -1;
        this._element.style.outline = 'none';
        this._element.style.height = '100%';
        this._element.style.width = '100%';
        this._element.style.overflow = 'hidden';
        const focusTracker = (0,_dom__WEBPACK_IMPORTED_MODULE_0__.trackFocus)(this._element);
        this.addDisposables(this.api, focusTracker.onDidFocus(() => {
            this.api._onDidChangeFocus.fire({ isFocused: true });
        }), focusTracker.onDidBlur(() => {
            this.api._onDidChangeFocus.fire({ isFocused: false });
        }), focusTracker);
    }
    focus() {
        const event = new _api_panelApi__WEBPACK_IMPORTED_MODULE_2__.WillFocusEvent();
        this.api._onWillFocus.fire(event);
        if (event.defaultPrevented) {
            return;
        }
        this._element.focus();
    }
    layout(width, height) {
        this._width = width;
        this._height = height;
        this.api._onDidDimensionChange.fire({ width, height });
        if (this.part) {
            if (this._params) {
                this.part.update(this._params.params);
            }
        }
    }
    init(parameters) {
        this._params = parameters;
        this.part = this.getComponent();
    }
    update(event) {
        var _a, _b;
        // merge the new parameters with the existing parameters
        this._params = Object.assign(Object.assign({}, this._params), { params: Object.assign(Object.assign({}, (_a = this._params) === null || _a === void 0 ? void 0 : _a.params), event.params) });
        /**
         * delete new keys that have a value of undefined,
         * allow values of null
         */
        for (const key of Object.keys(event.params)) {
            if (event.params[key] === undefined) {
                delete this._params.params[key];
            }
        }
        // update the view with the updated props
        (_b = this.part) === null || _b === void 0 ? void 0 : _b.update({ params: this._params.params });
    }
    toJSON() {
        var _a, _b;
        const params = (_b = (_a = this._params) === null || _a === void 0 ? void 0 : _a.params) !== null && _b !== void 0 ? _b : {};
        return {
            id: this.id,
            component: this.component,
            params: Object.keys(params).length > 0 ? params : undefined,
        };
    }
    dispose() {
        var _a;
        this.api.dispose();
        (_a = this.part) === null || _a === void 0 ? void 0 : _a.dispose();
        super.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/gridview/branchNode.js":
/*!********************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/gridview/branchNode.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BranchNode: () => (/* binding */ BranchNode)
/* harmony export */ });
/* harmony import */ var _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../splitview/splitview */ "./node_modules/dockview-core/dist/esm/splitview/splitview.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _leafNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./leafNode */ "./node_modules/dockview-core/dist/esm/gridview/leafNode.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/*---------------------------------------------------------------------------------------------
 * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:
 * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid
 *--------------------------------------------------------------------------------------------*/




class BranchNode extends _lifecycle__WEBPACK_IMPORTED_MODULE_3__.CompositeDisposable {
    get width() {
        return this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
            ? this.size
            : this.orthogonalSize;
    }
    get height() {
        return this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
            ? this.orthogonalSize
            : this.size;
    }
    get minimumSize() {
        return this.children.length === 0
            ? 0
            : Math.max(...this.children.map((c, index) => this.splitview.isViewVisible(index)
                ? c.minimumOrthogonalSize
                : 0));
    }
    get maximumSize() {
        return Math.min(...this.children.map((c, index) => this.splitview.isViewVisible(index)
            ? c.maximumOrthogonalSize
            : Number.POSITIVE_INFINITY));
    }
    get minimumOrthogonalSize() {
        return this.splitview.minimumSize;
    }
    get maximumOrthogonalSize() {
        return this.splitview.maximumSize;
    }
    get orthogonalSize() {
        return this._orthogonalSize;
    }
    get size() {
        return this._size;
    }
    get minimumWidth() {
        return this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
            ? this.minimumOrthogonalSize
            : this.minimumSize;
    }
    get minimumHeight() {
        return this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
            ? this.minimumSize
            : this.minimumOrthogonalSize;
    }
    get maximumWidth() {
        return this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
            ? this.maximumOrthogonalSize
            : this.maximumSize;
    }
    get maximumHeight() {
        return this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
            ? this.maximumSize
            : this.maximumOrthogonalSize;
    }
    get priority() {
        if (this.children.length === 0) {
            return _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.LayoutPriority.Normal;
        }
        const priorities = this.children.map((c) => typeof c.priority === 'undefined'
            ? _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.LayoutPriority.Normal
            : c.priority);
        if (priorities.some((p) => p === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.LayoutPriority.High)) {
            return _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.LayoutPriority.High;
        }
        else if (priorities.some((p) => p === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.LayoutPriority.Low)) {
            return _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.LayoutPriority.Low;
        }
        return _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.LayoutPriority.Normal;
    }
    get disabled() {
        return this.splitview.disabled;
    }
    set disabled(value) {
        this.splitview.disabled = value;
    }
    get margin() {
        return this.splitview.margin;
    }
    set margin(value) {
        this.splitview.margin = value;
        this.children.forEach((child) => {
            if (child instanceof BranchNode) {
                child.margin = value;
            }
        });
    }
    constructor(orientation, proportionalLayout, styles, size, orthogonalSize, disabled, margin, childDescriptors) {
        super();
        this.orientation = orientation;
        this.proportionalLayout = proportionalLayout;
        this.styles = styles;
        this._childrenDisposable = _lifecycle__WEBPACK_IMPORTED_MODULE_3__.Disposable.NONE;
        this.children = [];
        this._onDidChange = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidChange = this._onDidChange.event;
        this._onDidVisibilityChange = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidVisibilityChange = this._onDidVisibilityChange.event;
        this._orthogonalSize = orthogonalSize;
        this._size = size;
        this.element = document.createElement('div');
        this.element.className = 'dv-branch-node';
        if (!childDescriptors) {
            this.splitview = new _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Splitview(this.element, {
                orientation: this.orientation,
                proportionalLayout,
                styles,
                margin,
            });
            this.splitview.layout(this.size, this.orthogonalSize);
        }
        else {
            const descriptor = {
                views: childDescriptors.map((childDescriptor) => {
                    return {
                        view: childDescriptor.node,
                        size: childDescriptor.node.size,
                        visible: childDescriptor.node instanceof _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode &&
                            childDescriptor.visible !== undefined
                            ? childDescriptor.visible
                            : true,
                    };
                }),
                size: this.orthogonalSize,
            };
            this.children = childDescriptors.map((c) => c.node);
            this.splitview = new _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Splitview(this.element, {
                orientation: this.orientation,
                descriptor,
                proportionalLayout,
                styles,
                margin,
            });
        }
        this.disabled = disabled;
        this.addDisposables(this._onDidChange, this._onDidVisibilityChange, this.splitview.onDidSashEnd(() => {
            this._onDidChange.fire({});
        }));
        this.setupChildrenEvents();
    }
    setVisible(_visible) {
        // noop
    }
    isChildVisible(index) {
        if (index < 0 || index >= this.children.length) {
            throw new Error('Invalid index');
        }
        return this.splitview.isViewVisible(index);
    }
    setChildVisible(index, visible) {
        if (index < 0 || index >= this.children.length) {
            throw new Error('Invalid index');
        }
        if (this.splitview.isViewVisible(index) === visible) {
            return;
        }
        const wereAllChildrenHidden = this.splitview.contentSize === 0;
        this.splitview.setViewVisible(index, visible);
        // }
        const areAllChildrenHidden = this.splitview.contentSize === 0;
        // If all children are hidden then the parent should hide the entire splitview
        // If the entire splitview is hidden then the parent should show the splitview when a child is shown
        if ((visible && wereAllChildrenHidden) ||
            (!visible && areAllChildrenHidden)) {
            this._onDidVisibilityChange.fire({ visible });
        }
    }
    moveChild(from, to) {
        if (from === to) {
            return;
        }
        if (from < 0 || from >= this.children.length) {
            throw new Error('Invalid from index');
        }
        if (from < to) {
            to--;
        }
        this.splitview.moveView(from, to);
        const child = this._removeChild(from);
        this._addChild(child, to);
    }
    getChildSize(index) {
        if (index < 0 || index >= this.children.length) {
            throw new Error('Invalid index');
        }
        return this.splitview.getViewSize(index);
    }
    resizeChild(index, size) {
        if (index < 0 || index >= this.children.length) {
            throw new Error('Invalid index');
        }
        this.splitview.resizeView(index, size);
    }
    layout(size, orthogonalSize) {
        this._size = orthogonalSize;
        this._orthogonalSize = size;
        this.splitview.layout(orthogonalSize, size);
    }
    addChild(node, size, index, skipLayout) {
        if (index < 0 || index > this.children.length) {
            throw new Error('Invalid index');
        }
        this.splitview.addView(node, size, index, skipLayout);
        this._addChild(node, index);
    }
    getChildCachedVisibleSize(index) {
        if (index < 0 || index >= this.children.length) {
            throw new Error('Invalid index');
        }
        return this.splitview.getViewCachedVisibleSize(index);
    }
    removeChild(index, sizing) {
        if (index < 0 || index >= this.children.length) {
            throw new Error('Invalid index');
        }
        this.splitview.removeView(index, sizing);
        return this._removeChild(index);
    }
    _addChild(node, index) {
        this.children.splice(index, 0, node);
        this.setupChildrenEvents();
    }
    _removeChild(index) {
        const [child] = this.children.splice(index, 1);
        this.setupChildrenEvents();
        return child;
    }
    setupChildrenEvents() {
        this._childrenDisposable.dispose();
        this._childrenDisposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_3__.CompositeDisposable(_events__WEBPACK_IMPORTED_MODULE_1__.Event.any(...this.children.map((c) => c.onDidChange))((e) => {
            /**
             * indicate a change has occured to allows any re-rendering but don't bubble
             * event because that was specific to this branch
             */
            this._onDidChange.fire({ size: e.orthogonalSize });
        }), ...this.children.map((c, i) => {
            if (c instanceof BranchNode) {
                return c.onDidVisibilityChange(({ visible }) => {
                    this.setChildVisible(i, visible);
                });
            }
            return _lifecycle__WEBPACK_IMPORTED_MODULE_3__.Disposable.NONE;
        }));
    }
    dispose() {
        this._childrenDisposable.dispose();
        this.splitview.dispose();
        this.children.forEach((child) => child.dispose());
        super.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/gridview/gridview.js":
/*!******************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/gridview/gridview.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Gridview: () => (/* binding */ Gridview),
/* harmony export */   getDirectionOrientation: () => (/* binding */ getDirectionOrientation),
/* harmony export */   getGridLocation: () => (/* binding */ getGridLocation),
/* harmony export */   getLocationOrientation: () => (/* binding */ getLocationOrientation),
/* harmony export */   getRelativeLocation: () => (/* binding */ getRelativeLocation),
/* harmony export */   indexInParent: () => (/* binding */ indexInParent),
/* harmony export */   isGridBranchNode: () => (/* binding */ isGridBranchNode),
/* harmony export */   orthogonal: () => (/* binding */ orthogonal)
/* harmony export */ });
/* harmony import */ var _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../splitview/splitview */ "./node_modules/dockview-core/dist/esm/splitview/splitview.js");
/* harmony import */ var _array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../array */ "./node_modules/dockview-core/dist/esm/array.js");
/* harmony import */ var _leafNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./leafNode */ "./node_modules/dockview-core/dist/esm/gridview/leafNode.js");
/* harmony import */ var _branchNode__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./branchNode */ "./node_modules/dockview-core/dist/esm/gridview/branchNode.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/*---------------------------------------------------------------------------------------------
 * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:
 * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid
 *--------------------------------------------------------------------------------------------*/






function findLeaf(candiateNode, last) {
    if (candiateNode instanceof _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode) {
        return candiateNode;
    }
    if (candiateNode instanceof _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode) {
        return findLeaf(candiateNode.children[last ? candiateNode.children.length - 1 : 0], last);
    }
    throw new Error('invalid node');
}
function flipNode(node, size, orthogonalSize) {
    if (node instanceof _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode) {
        const result = new _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode(orthogonal(node.orientation), node.proportionalLayout, node.styles, size, orthogonalSize, node.disabled, node.margin);
        let totalSize = 0;
        for (let i = node.children.length - 1; i >= 0; i--) {
            const child = node.children[i];
            const childSize = child instanceof _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode ? child.orthogonalSize : child.size;
            let newSize = node.size === 0
                ? 0
                : Math.round((size * childSize) / node.size);
            totalSize += newSize;
            // The last view to add should adjust to rounding errors
            if (i === 0) {
                newSize += size - totalSize;
            }
            result.addChild(flipNode(child, orthogonalSize, newSize), newSize, 0, true);
        }
        return result;
    }
    else {
        return new _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode(node.view, orthogonal(node.orientation), orthogonalSize);
    }
}
function indexInParent(element) {
    const parentElement = element.parentElement;
    if (!parentElement) {
        throw new Error('Invalid grid element');
    }
    let el = parentElement.firstElementChild;
    let index = 0;
    while (el !== element && el !== parentElement.lastElementChild && el) {
        el = el.nextElementSibling;
        index++;
    }
    return index;
}
/**
 * Find the grid location of a specific DOM element by traversing the parent
 * chain and finding each child index on the way.
 *
 * This will break as soon as DOM structures of the Splitview or Gridview change.
 */
function getGridLocation(element) {
    const parentElement = element.parentElement;
    if (!parentElement) {
        throw new Error('Invalid grid element');
    }
    if (/\bdv-grid-view\b/.test(parentElement.className)) {
        return [];
    }
    const index = indexInParent(parentElement);
    const ancestor = parentElement.parentElement.parentElement.parentElement;
    return [...getGridLocation(ancestor), index];
}
function getRelativeLocation(rootOrientation, location, direction) {
    const orientation = getLocationOrientation(rootOrientation, location);
    const directionOrientation = getDirectionOrientation(direction);
    if (orientation === directionOrientation) {
        const [rest, _index] = (0,_array__WEBPACK_IMPORTED_MODULE_1__.tail)(location);
        let index = _index;
        if (direction === 'right' || direction === 'bottom') {
            index += 1;
        }
        return [...rest, index];
    }
    else {
        const index = direction === 'right' || direction === 'bottom' ? 1 : 0;
        return [...location, index];
    }
}
function getDirectionOrientation(direction) {
    return direction === 'top' || direction === 'bottom'
        ? _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.VERTICAL
        : _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL;
}
function getLocationOrientation(rootOrientation, location) {
    return location.length % 2 === 0
        ? orthogonal(rootOrientation)
        : rootOrientation;
}
const orthogonal = (orientation) => orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
    ? _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.VERTICAL
    : _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL;
function isGridBranchNode(node) {
    return !!node.children;
}
const serializeBranchNode = (node, orientation) => {
    const size = orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.VERTICAL ? node.box.width : node.box.height;
    if (!isGridBranchNode(node)) {
        if (typeof node.cachedVisibleSize === 'number') {
            return {
                type: 'leaf',
                data: node.view.toJSON(),
                size: node.cachedVisibleSize,
                visible: false,
            };
        }
        return { type: 'leaf', data: node.view.toJSON(), size };
    }
    return {
        type: 'branch',
        data: node.children.map((c) => serializeBranchNode(c, orthogonal(orientation))),
        size,
    };
};
class Gridview {
    get length() {
        return this._root ? this._root.children.length : 0;
    }
    get orientation() {
        return this.root.orientation;
    }
    set orientation(orientation) {
        if (this.root.orientation === orientation) {
            return;
        }
        const { size, orthogonalSize } = this.root;
        this.root = flipNode(this.root, orthogonalSize, size);
        this.root.layout(size, orthogonalSize);
    }
    get width() {
        return this.root.width;
    }
    get height() {
        return this.root.height;
    }
    get minimumWidth() {
        return this.root.minimumWidth;
    }
    get minimumHeight() {
        return this.root.minimumHeight;
    }
    get maximumWidth() {
        return this.root.maximumHeight;
    }
    get maximumHeight() {
        return this.root.maximumHeight;
    }
    get locked() {
        return this._locked;
    }
    set locked(value) {
        this._locked = value;
        const branch = [this.root];
        /**
         * simple depth-first-search to cover all nodes
         *
         * @see https://en.wikipedia.org/wiki/Depth-first_search
         */
        while (branch.length > 0) {
            const node = branch.pop();
            if (node instanceof _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode) {
                node.disabled = value;
                branch.push(...node.children);
            }
        }
    }
    get margin() {
        return this._margin;
    }
    set margin(value) {
        this._margin = value;
        this.root.margin = value;
    }
    maximizedView() {
        var _a;
        return (_a = this._maximizedNode) === null || _a === void 0 ? void 0 : _a.leaf.view;
    }
    hasMaximizedView() {
        return this._maximizedNode !== undefined;
    }
    maximizeView(view) {
        var _a;
        const location = getGridLocation(view.element);
        const [_, node] = this.getNode(location);
        if (!(node instanceof _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode)) {
            return;
        }
        if (((_a = this._maximizedNode) === null || _a === void 0 ? void 0 : _a.leaf) === node) {
            return;
        }
        if (this.hasMaximizedView()) {
            this.exitMaximizedView();
        }
        serializeBranchNode(this.getView(), this.orientation);
        const hiddenOnMaximize = [];
        function hideAllViewsBut(parent, exclude) {
            for (let i = 0; i < parent.children.length; i++) {
                const child = parent.children[i];
                if (child instanceof _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode) {
                    if (child !== exclude) {
                        if (parent.isChildVisible(i)) {
                            parent.setChildVisible(i, false);
                        }
                        else {
                            hiddenOnMaximize.push(child);
                        }
                    }
                }
                else {
                    hideAllViewsBut(child, exclude);
                }
            }
        }
        hideAllViewsBut(this.root, node);
        this._maximizedNode = { leaf: node, hiddenOnMaximize };
        this._onDidMaximizedNodeChange.fire({
            view: node.view,
            isMaximized: true,
        });
    }
    exitMaximizedView() {
        if (!this._maximizedNode) {
            return;
        }
        const hiddenOnMaximize = this._maximizedNode.hiddenOnMaximize;
        function showViewsInReverseOrder(parent) {
            for (let index = parent.children.length - 1; index >= 0; index--) {
                const child = parent.children[index];
                if (child instanceof _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode) {
                    if (!hiddenOnMaximize.includes(child)) {
                        parent.setChildVisible(index, true);
                    }
                }
                else {
                    showViewsInReverseOrder(child);
                }
            }
        }
        showViewsInReverseOrder(this.root);
        const tmp = this._maximizedNode.leaf;
        this._maximizedNode = undefined;
        this._onDidMaximizedNodeChange.fire({
            view: tmp.view,
            isMaximized: false,
        });
    }
    serialize() {
        const maximizedView = this.maximizedView();
        let maxmizedViewLocation;
        if (maximizedView) {
            /**
             * The minimum information we can get away with in order to serialize a maxmized view is it's location within the grid
             * which is represented as a branch of indices
             */
            maxmizedViewLocation = getGridLocation(maximizedView.element);
        }
        if (this.hasMaximizedView()) {
            /**
             * the saved layout cannot be in its maxmized state otherwise all of the underlying
             * view dimensions will be wrong
             *
             * To counteract this we temporaily remove the maximized view to compute the serialized output
             * of the grid before adding back the maxmized view as to not alter the layout from the users
             * perspective when `.toJSON()` is called
             */
            this.exitMaximizedView();
        }
        const root = serializeBranchNode(this.getView(), this.orientation);
        const resullt = {
            root,
            width: this.width,
            height: this.height,
            orientation: this.orientation,
        };
        if (maxmizedViewLocation) {
            resullt.maximizedNode = {
                location: maxmizedViewLocation,
            };
        }
        if (maximizedView) {
            // replace any maximzied view that was removed for serialization purposes
            this.maximizeView(maximizedView);
        }
        return resullt;
    }
    dispose() {
        this.disposable.dispose();
        this._onDidChange.dispose();
        this._onDidMaximizedNodeChange.dispose();
        this._onDidViewVisibilityChange.dispose();
        this.root.dispose();
        this._maximizedNode = undefined;
        this.element.remove();
    }
    clear() {
        const orientation = this.root.orientation;
        this.root = new _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode(orientation, this.proportionalLayout, this.styles, this.root.size, this.root.orthogonalSize, this.locked, this.margin);
    }
    deserialize(json, deserializer) {
        const orientation = json.orientation;
        const height = orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.VERTICAL ? json.height : json.width;
        this._deserialize(json.root, orientation, deserializer, height);
        /**
         * The deserialied layout must be positioned through this.layout(...)
         * before any maximizedNode can be positioned
         */
        this.layout(json.width, json.height);
        if (json.maximizedNode) {
            const location = json.maximizedNode.location;
            const [_, node] = this.getNode(location);
            if (!(node instanceof _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode)) {
                return;
            }
            this.maximizeView(node.view);
        }
    }
    _deserialize(root, orientation, deserializer, orthogonalSize) {
        this.root = this._deserializeNode(root, orientation, deserializer, orthogonalSize);
    }
    _deserializeNode(node, orientation, deserializer, orthogonalSize) {
        var _a;
        let result;
        if (node.type === 'branch') {
            const serializedChildren = node.data;
            const children = serializedChildren.map((serializedChild) => {
                return {
                    node: this._deserializeNode(serializedChild, orthogonal(orientation), deserializer, node.size),
                    visible: serializedChild.visible,
                };
            });
            result = new _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode(orientation, this.proportionalLayout, this.styles, node.size, // <- orthogonal size - flips at each depth
            orthogonalSize, // <- size - flips at each depth,
            this.locked, this.margin, children);
        }
        else {
            const view = deserializer.fromJSON(node);
            if (typeof node.visible === 'boolean') {
                (_a = view.setVisible) === null || _a === void 0 ? void 0 : _a.call(view, node.visible);
            }
            result = new _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode(view, orientation, orthogonalSize, node.size);
        }
        return result;
    }
    get root() {
        return this._root;
    }
    set root(root) {
        const oldRoot = this._root;
        if (oldRoot) {
            oldRoot.dispose();
            this._maximizedNode = undefined;
            this.element.removeChild(oldRoot.element);
        }
        this._root = root;
        this.element.appendChild(this._root.element);
        this.disposable.value = this._root.onDidChange((e) => {
            this._onDidChange.fire(e);
        });
    }
    /**
     * If the root is orientated as a VERTICAL node then nest the existing root within a new HORIZIONTAL root node
     * If the root is orientated as a HORIZONTAL node then nest the existing root within a new VERITCAL root node
     */
    insertOrthogonalSplitviewAtRoot() {
        if (!this._root) {
            return;
        }
        const oldRoot = this.root;
        oldRoot.element.remove();
        this._root = new _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode(orthogonal(oldRoot.orientation), this.proportionalLayout, this.styles, this.root.orthogonalSize, this.root.size, this.locked, this.margin);
        if (oldRoot.children.length === 0) {
            // no data so no need to add anything back in
        }
        else if (oldRoot.children.length === 1) {
            // can remove one level of redundant branching if there is only a single child
            const childReference = oldRoot.children[0];
            const child = oldRoot.removeChild(0); // remove to prevent disposal when disposing of unwanted root
            child.dispose();
            oldRoot.dispose();
            this._root.addChild(
            /**
             * the child node will have the same orientation as the new root since
             * we are removing the inbetween node.
             * the entire 'tree' must be flipped recursively to ensure that the orientation
             * flips at each level
             */
            flipNode(childReference, childReference.orthogonalSize, childReference.size), _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Sizing.Distribute, 0);
        }
        else {
            this._root.addChild(oldRoot, _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Sizing.Distribute, 0);
        }
        this.element.appendChild(this._root.element);
        this.disposable.value = this._root.onDidChange((e) => {
            this._onDidChange.fire(e);
        });
    }
    next(location) {
        return this.progmaticSelect(location);
    }
    previous(location) {
        return this.progmaticSelect(location, true);
    }
    getView(location) {
        const node = location ? this.getNode(location)[1] : this.root;
        return this._getViews(node, this.orientation);
    }
    _getViews(node, orientation, cachedVisibleSize) {
        const box = { height: node.height, width: node.width };
        if (node instanceof _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode) {
            return { box, view: node.view, cachedVisibleSize };
        }
        const children = [];
        for (let i = 0; i < node.children.length; i++) {
            const child = node.children[i];
            const nodeCachedVisibleSize = node.getChildCachedVisibleSize(i);
            children.push(this._getViews(child, orthogonal(orientation), nodeCachedVisibleSize));
        }
        return { box, children };
    }
    progmaticSelect(location, reverse = false) {
        const [path, node] = this.getNode(location);
        if (!(node instanceof _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode)) {
            throw new Error('invalid location');
        }
        for (let i = path.length - 1; i > -1; i--) {
            const n = path[i];
            const l = location[i] || 0;
            const canProgressInCurrentLevel = reverse
                ? l - 1 > -1
                : l + 1 < n.children.length;
            if (canProgressInCurrentLevel) {
                return findLeaf(n.children[reverse ? l - 1 : l + 1], reverse);
            }
        }
        return findLeaf(this.root, reverse);
    }
    constructor(proportionalLayout, styles, orientation, locked, margin) {
        this.proportionalLayout = proportionalLayout;
        this.styles = styles;
        this._locked = false;
        this._margin = 0;
        this._maximizedNode = undefined;
        this.disposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_5__.MutableDisposable();
        this._onDidChange = new _events__WEBPACK_IMPORTED_MODULE_4__.Emitter();
        this.onDidChange = this._onDidChange.event;
        this._onDidViewVisibilityChange = new _events__WEBPACK_IMPORTED_MODULE_4__.Emitter();
        this.onDidViewVisibilityChange = this._onDidViewVisibilityChange.event;
        this._onDidMaximizedNodeChange = new _events__WEBPACK_IMPORTED_MODULE_4__.Emitter();
        this.onDidMaximizedNodeChange = this._onDidMaximizedNodeChange.event;
        this.element = document.createElement('div');
        this.element.className = 'dv-grid-view';
        this._locked = locked !== null && locked !== void 0 ? locked : false;
        this._margin = margin !== null && margin !== void 0 ? margin : 0;
        this.root = new _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode(orientation, proportionalLayout, styles, 0, 0, this.locked, this.margin);
    }
    isViewVisible(location) {
        const [rest, index] = (0,_array__WEBPACK_IMPORTED_MODULE_1__.tail)(location);
        const [, parent] = this.getNode(rest);
        if (!(parent instanceof _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode)) {
            throw new Error('Invalid from location');
        }
        return parent.isChildVisible(index);
    }
    setViewVisible(location, visible) {
        if (this.hasMaximizedView()) {
            this.exitMaximizedView();
        }
        const [rest, index] = (0,_array__WEBPACK_IMPORTED_MODULE_1__.tail)(location);
        const [, parent] = this.getNode(rest);
        if (!(parent instanceof _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode)) {
            throw new Error('Invalid from location');
        }
        this._onDidViewVisibilityChange.fire();
        parent.setChildVisible(index, visible);
    }
    moveView(parentLocation, from, to) {
        if (this.hasMaximizedView()) {
            this.exitMaximizedView();
        }
        const [, parent] = this.getNode(parentLocation);
        if (!(parent instanceof _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode)) {
            throw new Error('Invalid location');
        }
        parent.moveChild(from, to);
    }
    addView(view, size, location) {
        if (this.hasMaximizedView()) {
            this.exitMaximizedView();
        }
        const [rest, index] = (0,_array__WEBPACK_IMPORTED_MODULE_1__.tail)(location);
        const [pathToParent, parent] = this.getNode(rest);
        if (parent instanceof _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode) {
            const node = new _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode(view, orthogonal(parent.orientation), parent.orthogonalSize);
            parent.addChild(node, size, index);
        }
        else {
            const [grandParent, ..._] = [...pathToParent].reverse();
            const [parentIndex, ...__] = [...rest].reverse();
            let newSiblingSize = 0;
            const newSiblingCachedVisibleSize = grandParent.getChildCachedVisibleSize(parentIndex);
            if (typeof newSiblingCachedVisibleSize === 'number') {
                newSiblingSize = _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Sizing.Invisible(newSiblingCachedVisibleSize);
            }
            const child = grandParent.removeChild(parentIndex);
            child.dispose();
            const newParent = new _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode(parent.orientation, this.proportionalLayout, this.styles, parent.size, parent.orthogonalSize, this.locked, this.margin);
            grandParent.addChild(newParent, parent.size, parentIndex);
            const newSibling = new _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode(parent.view, grandParent.orientation, parent.size);
            newParent.addChild(newSibling, newSiblingSize, 0);
            if (typeof size !== 'number' && size.type === 'split') {
                size = { type: 'split', index: 0 };
            }
            const node = new _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode(view, grandParent.orientation, parent.size);
            newParent.addChild(node, size, index);
        }
    }
    remove(view, sizing) {
        const location = getGridLocation(view.element);
        return this.removeView(location, sizing);
    }
    removeView(location, sizing) {
        if (this.hasMaximizedView()) {
            this.exitMaximizedView();
        }
        const [rest, index] = (0,_array__WEBPACK_IMPORTED_MODULE_1__.tail)(location);
        const [pathToParent, parent] = this.getNode(rest);
        if (!(parent instanceof _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode)) {
            throw new Error('Invalid location');
        }
        const nodeToRemove = parent.children[index];
        if (!(nodeToRemove instanceof _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode)) {
            throw new Error('Invalid location');
        }
        parent.removeChild(index, sizing);
        nodeToRemove.dispose();
        if (parent.children.length !== 1) {
            return nodeToRemove.view;
        }
        // if the parent has only one child and we know the parent is a BranchNode we can make the tree
        // more efficiently spaced by replacing the parent BranchNode with the child.
        // if that child is a LeafNode then we simply replace the BranchNode with the child otherwise if the child
        // is a BranchNode too we should spread it's children into the grandparent.
        // refer to the remaining child as the sibling
        const sibling = parent.children[0];
        if (pathToParent.length === 0) {
            // if the parent is root
            if (sibling instanceof _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode) {
                // if the sibling is a leaf node no action is required
                return nodeToRemove.view;
            }
            // otherwise the sibling is a branch node. since the parent is the root and the root has only one child
            // which is a branch node we can just set this branch node to be the new root node
            // for good housekeeping we'll removing the sibling from it's existing tree
            parent.removeChild(0, sizing);
            // and set that sibling node to be root
            this.root = sibling;
            return nodeToRemove.view;
        }
        // otherwise the parent is apart of a large sub-tree
        const [grandParent, ..._] = [...pathToParent].reverse();
        const [parentIndex, ...__] = [...rest].reverse();
        const isSiblingVisible = parent.isChildVisible(0);
        // either way we need to remove the sibling from it's existing tree
        parent.removeChild(0, sizing);
        // note the sizes of all of the grandparents children
        const sizes = grandParent.children.map((_size, i) => grandParent.getChildSize(i));
        // remove the parent from the grandparent since we are moving the sibling to take the parents place
        // this parent is no longer used and can be disposed of
        grandParent.removeChild(parentIndex, sizing).dispose();
        if (sibling instanceof _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode) {
            // replace the parent with the siblings children
            sizes.splice(parentIndex, 1, ...sibling.children.map((c) => c.size));
            // and add those siblings to the grandparent
            for (let i = 0; i < sibling.children.length; i++) {
                const child = sibling.children[i];
                grandParent.addChild(child, child.size, parentIndex + i);
            }
            /**
             * clean down the branch node since we need to dipose of it and
             * when .dispose() it called on a branch it will dispose of any
             * views it is holding onto.
             */
            while (sibling.children.length > 0) {
                sibling.removeChild(0);
            }
        }
        else {
            // otherwise create a new leaf node and add that to the grandparent
            const newSibling = new _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode(sibling.view, orthogonal(sibling.orientation), sibling.size);
            const siblingSizing = isSiblingVisible
                ? sibling.orthogonalSize
                : _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Sizing.Invisible(sibling.orthogonalSize);
            grandParent.addChild(newSibling, siblingSizing, parentIndex);
        }
        // the containing node of the sibling is no longer required and can be disposed of
        sibling.dispose();
        // resize everything
        for (let i = 0; i < sizes.length; i++) {
            grandParent.resizeChild(i, sizes[i]);
        }
        return nodeToRemove.view;
    }
    layout(width, height) {
        const [size, orthogonalSize] = this.root.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
            ? [height, width]
            : [width, height];
        this.root.layout(size, orthogonalSize);
    }
    getNode(location, node = this.root, path = []) {
        if (location.length === 0) {
            return [path, node];
        }
        if (!(node instanceof _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode)) {
            throw new Error('Invalid location');
        }
        const [index, ...rest] = location;
        if (index < 0 || index >= node.children.length) {
            throw new Error('Invalid location');
        }
        const child = node.children[index];
        path.push(node);
        return this.getNode(rest, child, path);
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/gridview/gridviewComponent.js":
/*!***************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/gridview/gridviewComponent.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GridviewComponent: () => (/* binding */ GridviewComponent)
/* harmony export */ });
/* harmony import */ var _gridview__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gridview */ "./node_modules/dockview-core/dist/esm/gridview/gridview.js");
/* harmony import */ var _array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../array */ "./node_modules/dockview-core/dist/esm/array.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _baseComponentGridview__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./baseComponentGridview */ "./node_modules/dockview-core/dist/esm/gridview/baseComponentGridview.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");





class GridviewComponent extends _baseComponentGridview__WEBPACK_IMPORTED_MODULE_3__.BaseGrid {
    get orientation() {
        return this.gridview.orientation;
    }
    set orientation(value) {
        this.gridview.orientation = value;
    }
    get options() {
        return this._options;
    }
    get deserializer() {
        return this._deserializer;
    }
    set deserializer(value) {
        this._deserializer = value;
    }
    constructor(container, options) {
        var _a;
        super(container, {
            proportionalLayout: (_a = options.proportionalLayout) !== null && _a !== void 0 ? _a : true,
            orientation: options.orientation,
            styles: options.hideBorders
                ? { separatorBorder: 'transparent' }
                : undefined,
            disableAutoResizing: options.disableAutoResizing,
            className: options.className,
        });
        this._onDidLayoutfromJSON = new _events__WEBPACK_IMPORTED_MODULE_4__.Emitter();
        this.onDidLayoutFromJSON = this._onDidLayoutfromJSON.event;
        this._onDidRemoveGroup = new _events__WEBPACK_IMPORTED_MODULE_4__.Emitter();
        this.onDidRemoveGroup = this._onDidRemoveGroup.event;
        this._onDidAddGroup = new _events__WEBPACK_IMPORTED_MODULE_4__.Emitter();
        this.onDidAddGroup = this._onDidAddGroup.event;
        this._onDidActiveGroupChange = new _events__WEBPACK_IMPORTED_MODULE_4__.Emitter();
        this.onDidActiveGroupChange = this._onDidActiveGroupChange.event;
        this._options = options;
        this.addDisposables(this._onDidAddGroup, this._onDidRemoveGroup, this._onDidActiveGroupChange, this.onDidAdd((event) => {
            this._onDidAddGroup.fire(event);
        }), this.onDidRemove((event) => {
            this._onDidRemoveGroup.fire(event);
        }), this.onDidActiveChange((event) => {
            this._onDidActiveGroupChange.fire(event);
        }));
    }
    updateOptions(options) {
        super.updateOptions(options);
        const hasOrientationChanged = typeof options.orientation === 'string' &&
            this.gridview.orientation !== options.orientation;
        this._options = Object.assign(Object.assign({}, this.options), options);
        if (hasOrientationChanged) {
            this.gridview.orientation = options.orientation;
        }
        this.layout(this.gridview.width, this.gridview.height, true);
    }
    removePanel(panel) {
        this.removeGroup(panel);
    }
    /**
     * Serialize the current state of the layout
     *
     * @returns A JSON respresentation of the layout
     */
    toJSON() {
        var _a;
        const data = this.gridview.serialize();
        return {
            grid: data,
            activePanel: (_a = this.activeGroup) === null || _a === void 0 ? void 0 : _a.id,
        };
    }
    setVisible(panel, visible) {
        this.gridview.setViewVisible((0,_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(panel.element), visible);
    }
    setActive(panel) {
        this._groups.forEach((value, _key) => {
            value.value.setActive(panel === value.value);
        });
    }
    focus() {
        var _a;
        (_a = this.activeGroup) === null || _a === void 0 ? void 0 : _a.focus();
    }
    fromJSON(serializedGridview) {
        this.clear();
        const { grid, activePanel } = serializedGridview;
        try {
            const queue = [];
            // take note of the existing dimensions
            const width = this.width;
            const height = this.height;
            this.gridview.deserialize(grid, {
                fromJSON: (node) => {
                    const { data } = node;
                    const view = this.options.createComponent({
                        id: data.id,
                        name: data.component,
                    });
                    queue.push(() => view.init({
                        params: data.params,
                        minimumWidth: data.minimumWidth,
                        maximumWidth: data.maximumWidth,
                        minimumHeight: data.minimumHeight,
                        maximumHeight: data.maximumHeight,
                        priority: data.priority,
                        snap: !!data.snap,
                        accessor: this,
                        isVisible: node.visible,
                    }));
                    this._onDidAddGroup.fire(view);
                    this.registerPanel(view);
                    return view;
                },
            });
            this.layout(width, height, true);
            queue.forEach((f) => f());
            if (typeof activePanel === 'string') {
                const panel = this.getPanel(activePanel);
                if (panel) {
                    this.doSetGroupActive(panel);
                }
            }
        }
        catch (err) {
            /**
             * To remove a group we cannot call this.removeGroup(...) since this makes assumptions about
             * the underlying HTMLElement existing in the Gridview.
             */
            for (const group of this.groups) {
                group.dispose();
                this._groups.delete(group.id);
                this._onDidRemoveGroup.fire(group);
            }
            // fires clean-up events and clears the underlying HTML gridview.
            this.clear();
            /**
             * even though we have cleaned-up we still want to inform the caller of their error
             * and we'll do this through re-throwing the original error since afterall you would
             * expect trying to load a corrupted layout to result in an error and not silently fail...
             */
            throw err;
        }
        this._onDidLayoutfromJSON.fire();
    }
    clear() {
        const hasActiveGroup = this.activeGroup;
        const groups = Array.from(this._groups.values()); // reassign since group panels will mutate
        for (const group of groups) {
            group.disposable.dispose();
            this.doRemoveGroup(group.value, { skipActive: true });
        }
        if (hasActiveGroup) {
            this.doSetGroupActive(undefined);
        }
        this.gridview.clear();
    }
    movePanel(panel, options) {
        var _a;
        let relativeLocation;
        const removedPanel = this.gridview.remove(panel);
        const referenceGroup = (_a = this._groups.get(options.reference)) === null || _a === void 0 ? void 0 : _a.value;
        if (!referenceGroup) {
            throw new Error(`reference group ${options.reference} does not exist`);
        }
        const target = (0,_baseComponentGridview__WEBPACK_IMPORTED_MODULE_3__.toTarget)(options.direction);
        if (target === 'center') {
            throw new Error(`${target} not supported as an option`);
        }
        else {
            const location = (0,_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(referenceGroup.element);
            relativeLocation = (0,_gridview__WEBPACK_IMPORTED_MODULE_0__.getRelativeLocation)(this.gridview.orientation, location, target);
        }
        this.doAddGroup(removedPanel, relativeLocation, options.size);
    }
    addPanel(options) {
        var _a, _b, _c, _d;
        let relativeLocation = (_a = options.location) !== null && _a !== void 0 ? _a : [0];
        if ((_b = options.position) === null || _b === void 0 ? void 0 : _b.referencePanel) {
            const referenceGroup = (_c = this._groups.get(options.position.referencePanel)) === null || _c === void 0 ? void 0 : _c.value;
            if (!referenceGroup) {
                throw new Error(`reference group ${options.position.referencePanel} does not exist`);
            }
            const target = (0,_baseComponentGridview__WEBPACK_IMPORTED_MODULE_3__.toTarget)(options.position.direction);
            if (target === 'center') {
                throw new Error(`${target} not supported as an option`);
            }
            else {
                const location = (0,_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(referenceGroup.element);
                relativeLocation = (0,_gridview__WEBPACK_IMPORTED_MODULE_0__.getRelativeLocation)(this.gridview.orientation, location, target);
            }
        }
        const view = this.options.createComponent({
            id: options.id,
            name: options.component,
        });
        view.init({
            params: (_d = options.params) !== null && _d !== void 0 ? _d : {},
            minimumWidth: options.minimumWidth,
            maximumWidth: options.maximumWidth,
            minimumHeight: options.minimumHeight,
            maximumHeight: options.maximumHeight,
            priority: options.priority,
            snap: !!options.snap,
            accessor: this,
            isVisible: true,
        });
        this.registerPanel(view);
        this.doAddGroup(view, relativeLocation, options.size);
        this.doSetGroupActive(view);
        return view;
    }
    registerPanel(panel) {
        const disposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable(panel.api.onDidFocusChange((event) => {
            if (!event.isFocused) {
                return;
            }
            this._groups.forEach((groupItem) => {
                const group = groupItem.value;
                if (group !== panel) {
                    group.setActive(false);
                }
                else {
                    group.setActive(true);
                }
            });
        }));
        this._groups.set(panel.id, {
            value: panel,
            disposable,
        });
    }
    moveGroup(referenceGroup, groupId, target) {
        const sourceGroup = this.getPanel(groupId);
        if (!sourceGroup) {
            throw new Error('invalid operation');
        }
        const referenceLocation = (0,_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(referenceGroup.element);
        const targetLocation = (0,_gridview__WEBPACK_IMPORTED_MODULE_0__.getRelativeLocation)(this.gridview.orientation, referenceLocation, target);
        const [targetParentLocation, to] = (0,_array__WEBPACK_IMPORTED_MODULE_1__.tail)(targetLocation);
        const sourceLocation = (0,_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(sourceGroup.element);
        const [sourceParentLocation, from] = (0,_array__WEBPACK_IMPORTED_MODULE_1__.tail)(sourceLocation);
        if ((0,_array__WEBPACK_IMPORTED_MODULE_1__.sequenceEquals)(sourceParentLocation, targetParentLocation)) {
            // special case when 'swapping' two views within same grid location
            // if a group has one tab - we are essentially moving the 'group'
            // which is equivalent to swapping two views in this case
            this.gridview.moveView(sourceParentLocation, from, to);
            return;
        }
        // source group will become empty so delete the group
        const targetGroup = this.doRemoveGroup(sourceGroup, {
            skipActive: true,
            skipDispose: true,
        });
        // after deleting the group we need to re-evaulate the ref location
        const updatedReferenceLocation = (0,_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(referenceGroup.element);
        const location = (0,_gridview__WEBPACK_IMPORTED_MODULE_0__.getRelativeLocation)(this.gridview.orientation, updatedReferenceLocation, target);
        this.doAddGroup(targetGroup, location);
    }
    removeGroup(group) {
        super.removeGroup(group);
    }
    dispose() {
        super.dispose();
        this._onDidLayoutfromJSON.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/gridview/gridviewPanel.js":
/*!***********************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/gridview/gridviewPanel.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GridviewPanel: () => (/* binding */ GridviewPanel)
/* harmony export */ });
/* harmony import */ var _basePanelView__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./basePanelView */ "./node_modules/dockview-core/dist/esm/gridview/basePanelView.js");
/* harmony import */ var _api_gridviewPanelApi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../api/gridviewPanelApi */ "./node_modules/dockview-core/dist/esm/api/gridviewPanelApi.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");



class GridviewPanel extends _basePanelView__WEBPACK_IMPORTED_MODULE_0__.BasePanelView {
    get priority() {
        return this._priority;
    }
    get snap() {
        return this._snap;
    }
    get minimumWidth() {
        /**
         * defer to protected function to allow subclasses to override easily.
         * see https://github.com/microsoft/TypeScript/issues/338
         */
        return this.__minimumWidth();
    }
    get minimumHeight() {
        /**
         * defer to protected function to allow subclasses to override easily.
         * see https://github.com/microsoft/TypeScript/issues/338
         */
        return this.__minimumHeight();
    }
    get maximumHeight() {
        /**
         * defer to protected function to allow subclasses to override easily.
         * see https://github.com/microsoft/TypeScript/issues/338
         */
        return this.__maximumHeight();
    }
    get maximumWidth() {
        /**
         * defer to protected function to allow subclasses to override easily.
         * see https://github.com/microsoft/TypeScript/issues/338
         */
        return this.__maximumWidth();
    }
    __minimumWidth() {
        const width = typeof this._minimumWidth === 'function'
            ? this._minimumWidth()
            : this._minimumWidth;
        if (width !== this._evaluatedMinimumWidth) {
            this._evaluatedMinimumWidth = width;
            this.updateConstraints();
        }
        return width;
    }
    __maximumWidth() {
        const width = typeof this._maximumWidth === 'function'
            ? this._maximumWidth()
            : this._maximumWidth;
        if (width !== this._evaluatedMaximumWidth) {
            this._evaluatedMaximumWidth = width;
            this.updateConstraints();
        }
        return width;
    }
    __minimumHeight() {
        const height = typeof this._minimumHeight === 'function'
            ? this._minimumHeight()
            : this._minimumHeight;
        if (height !== this._evaluatedMinimumHeight) {
            this._evaluatedMinimumHeight = height;
            this.updateConstraints();
        }
        return height;
    }
    __maximumHeight() {
        const height = typeof this._maximumHeight === 'function'
            ? this._maximumHeight()
            : this._maximumHeight;
        if (height !== this._evaluatedMaximumHeight) {
            this._evaluatedMaximumHeight = height;
            this.updateConstraints();
        }
        return height;
    }
    get isActive() {
        return this.api.isActive;
    }
    get isVisible() {
        return this.api.isVisible;
    }
    constructor(id, component, options, api) {
        super(id, component, api !== null && api !== void 0 ? api : new _api_gridviewPanelApi__WEBPACK_IMPORTED_MODULE_1__.GridviewPanelApiImpl(id, component));
        this._evaluatedMinimumWidth = 0;
        this._evaluatedMaximumWidth = Number.MAX_SAFE_INTEGER;
        this._evaluatedMinimumHeight = 0;
        this._evaluatedMaximumHeight = Number.MAX_SAFE_INTEGER;
        this._minimumWidth = 0;
        this._minimumHeight = 0;
        this._maximumWidth = Number.MAX_SAFE_INTEGER;
        this._maximumHeight = Number.MAX_SAFE_INTEGER;
        this._snap = false;
        this._onDidChange = new _events__WEBPACK_IMPORTED_MODULE_2__.Emitter();
        this.onDidChange = this._onDidChange.event;
        if (typeof (options === null || options === void 0 ? void 0 : options.minimumWidth) === 'number') {
            this._minimumWidth = options.minimumWidth;
        }
        if (typeof (options === null || options === void 0 ? void 0 : options.maximumWidth) === 'number') {
            this._maximumWidth = options.maximumWidth;
        }
        if (typeof (options === null || options === void 0 ? void 0 : options.minimumHeight) === 'number') {
            this._minimumHeight = options.minimumHeight;
        }
        if (typeof (options === null || options === void 0 ? void 0 : options.maximumHeight) === 'number') {
            this._maximumHeight = options.maximumHeight;
        }
        this.api.initialize(this); // TODO: required to by-pass 'super before this' requirement
        this.addDisposables(this.api.onWillVisibilityChange((event) => {
            const { isVisible } = event;
            const { accessor } = this._params;
            accessor.setVisible(this, isVisible);
        }), this.api.onActiveChange(() => {
            const { accessor } = this._params;
            accessor.doSetGroupActive(this);
        }), this.api.onDidConstraintsChangeInternal((event) => {
            if (typeof event.minimumWidth === 'number' ||
                typeof event.minimumWidth === 'function') {
                this._minimumWidth = event.minimumWidth;
            }
            if (typeof event.minimumHeight === 'number' ||
                typeof event.minimumHeight === 'function') {
                this._minimumHeight = event.minimumHeight;
            }
            if (typeof event.maximumWidth === 'number' ||
                typeof event.maximumWidth === 'function') {
                this._maximumWidth = event.maximumWidth;
            }
            if (typeof event.maximumHeight === 'number' ||
                typeof event.maximumHeight === 'function') {
                this._maximumHeight = event.maximumHeight;
            }
        }), this.api.onDidSizeChange((event) => {
            this._onDidChange.fire({
                height: event.height,
                width: event.width,
            });
        }), this._onDidChange);
    }
    setVisible(isVisible) {
        this.api._onDidVisibilityChange.fire({ isVisible });
    }
    setActive(isActive) {
        this.api._onDidActiveChange.fire({ isActive });
    }
    init(parameters) {
        if (parameters.maximumHeight) {
            this._maximumHeight = parameters.maximumHeight;
        }
        if (parameters.minimumHeight) {
            this._minimumHeight = parameters.minimumHeight;
        }
        if (parameters.maximumWidth) {
            this._maximumWidth = parameters.maximumWidth;
        }
        if (parameters.minimumWidth) {
            this._minimumWidth = parameters.minimumWidth;
        }
        this._priority = parameters.priority;
        this._snap = !!parameters.snap;
        super.init(parameters);
        if (typeof parameters.isVisible === 'boolean') {
            this.setVisible(parameters.isVisible);
        }
    }
    updateConstraints() {
        this.api._onDidConstraintsChange.fire({
            minimumWidth: this._evaluatedMinimumWidth,
            maximumWidth: this._evaluatedMaximumWidth,
            minimumHeight: this._evaluatedMinimumHeight,
            maximumHeight: this._evaluatedMaximumHeight,
        });
    }
    toJSON() {
        const state = super.toJSON();
        const maximum = (value) => value === Number.MAX_SAFE_INTEGER ? undefined : value;
        const minimum = (value) => (value <= 0 ? undefined : value);
        return Object.assign(Object.assign({}, state), { minimumHeight: minimum(this.minimumHeight), maximumHeight: maximum(this.maximumHeight), minimumWidth: minimum(this.minimumWidth), maximumWidth: maximum(this.maximumWidth), snap: this.snap, priority: this.priority });
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/gridview/leafNode.js":
/*!******************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/gridview/leafNode.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LeafNode: () => (/* binding */ LeafNode)
/* harmony export */ });
/* harmony import */ var _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../splitview/splitview */ "./node_modules/dockview-core/dist/esm/splitview/splitview.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/*---------------------------------------------------------------------------------------------
 * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:
 * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid
 *--------------------------------------------------------------------------------------------*/


class LeafNode {
    get minimumWidth() {
        return this.view.minimumWidth;
    }
    get maximumWidth() {
        return this.view.maximumWidth;
    }
    get minimumHeight() {
        return this.view.minimumHeight;
    }
    get maximumHeight() {
        return this.view.maximumHeight;
    }
    get priority() {
        return this.view.priority;
    }
    get snap() {
        return this.view.snap;
    }
    get minimumSize() {
        return this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
            ? this.minimumHeight
            : this.minimumWidth;
    }
    get maximumSize() {
        return this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
            ? this.maximumHeight
            : this.maximumWidth;
    }
    get minimumOrthogonalSize() {
        return this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
            ? this.minimumWidth
            : this.minimumHeight;
    }
    get maximumOrthogonalSize() {
        return this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
            ? this.maximumWidth
            : this.maximumHeight;
    }
    get orthogonalSize() {
        return this._orthogonalSize;
    }
    get size() {
        return this._size;
    }
    get element() {
        return this.view.element;
    }
    get width() {
        return this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
            ? this.orthogonalSize
            : this.size;
    }
    get height() {
        return this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
            ? this.size
            : this.orthogonalSize;
    }
    constructor(view, orientation, orthogonalSize, size = 0) {
        this.view = view;
        this.orientation = orientation;
        this._onDidChange = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidChange = this._onDidChange.event;
        this._orthogonalSize = orthogonalSize;
        this._size = size;
        this._disposable = this.view.onDidChange((event) => {
            if (event) {
                this._onDidChange.fire({
                    size: this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.VERTICAL
                        ? event.width
                        : event.height,
                    orthogonalSize: this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.VERTICAL
                        ? event.height
                        : event.width,
                });
            }
            else {
                this._onDidChange.fire({});
            }
        });
    }
    setVisible(visible) {
        if (this.view.setVisible) {
            this.view.setVisible(visible);
        }
    }
    layout(size, orthogonalSize) {
        this._size = size;
        this._orthogonalSize = orthogonalSize;
        this.view.layout(this.width, this.height);
    }
    dispose() {
        this._onDidChange.dispose();
        this._disposable.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/gridview/options.js":
/*!*****************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/gridview/options.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PROPERTY_KEYS_GRIDVIEW: () => (/* binding */ PROPERTY_KEYS_GRIDVIEW)
/* harmony export */ });
const PROPERTY_KEYS_GRIDVIEW = (() => {
    /**
     * by readong the keys from an empty value object TypeScript will error
     * when we add or remove new properties to `DockviewOptions`
     */
    const properties = {
        disableAutoResizing: undefined,
        proportionalLayout: undefined,
        orientation: undefined,
        hideBorders: undefined,
        className: undefined,
    };
    return Object.keys(properties);
})();


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/index.js":
/*!******************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseGrid: () => (/* reexport safe */ _gridview_baseComponentGridview__WEBPACK_IMPORTED_MODULE_9__.BaseGrid),
/* harmony export */   ContentContainer: () => (/* reexport safe */ _dockview_components_panel_content__WEBPACK_IMPORTED_MODULE_11__.ContentContainer),
/* harmony export */   DefaultDockviewDeserialzier: () => (/* reexport safe */ _dockview_deserializer__WEBPACK_IMPORTED_MODULE_19__.DefaultDockviewDeserialzier),
/* harmony export */   DefaultTab: () => (/* reexport safe */ _dockview_components_tab_defaultTab__WEBPACK_IMPORTED_MODULE_18__.DefaultTab),
/* harmony export */   DockviewApi: () => (/* reexport safe */ _api_component_api__WEBPACK_IMPORTED_MODULE_29__.DockviewApi),
/* harmony export */   DockviewComponent: () => (/* reexport safe */ _dockview_dockviewComponent__WEBPACK_IMPORTED_MODULE_20__.DockviewComponent),
/* harmony export */   DockviewCompositeDisposable: () => (/* reexport safe */ _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable),
/* harmony export */   DockviewDidDropEvent: () => (/* reexport safe */ _dockview_dockviewGroupPanelModel__WEBPACK_IMPORTED_MODULE_13__.DockviewDidDropEvent),
/* harmony export */   DockviewDisposable: () => (/* reexport safe */ _lifecycle__WEBPACK_IMPORTED_MODULE_2__.Disposable),
/* harmony export */   DockviewEmitter: () => (/* reexport safe */ _events__WEBPACK_IMPORTED_MODULE_1__.Emitter),
/* harmony export */   DockviewEvent: () => (/* reexport safe */ _events__WEBPACK_IMPORTED_MODULE_1__.Event),
/* harmony export */   DockviewGroupPanel: () => (/* reexport safe */ _dockview_dockviewGroupPanel__WEBPACK_IMPORTED_MODULE_15__.DockviewGroupPanel),
/* harmony export */   DockviewGroupPanelModel: () => (/* reexport safe */ _dockview_dockviewGroupPanelModel__WEBPACK_IMPORTED_MODULE_13__.DockviewGroupPanelModel),
/* harmony export */   DockviewMutableDisposable: () => (/* reexport safe */ _lifecycle__WEBPACK_IMPORTED_MODULE_2__.MutableDisposable),
/* harmony export */   DockviewPanel: () => (/* reexport safe */ _dockview_dockviewPanel__WEBPACK_IMPORTED_MODULE_17__.DockviewPanel),
/* harmony export */   DockviewUnhandledDragOverEvent: () => (/* reexport safe */ _dockview_options__WEBPACK_IMPORTED_MODULE_16__.DockviewUnhandledDragOverEvent),
/* harmony export */   DockviewWillDropEvent: () => (/* reexport safe */ _dockview_dockviewGroupPanelModel__WEBPACK_IMPORTED_MODULE_13__.DockviewWillDropEvent),
/* harmony export */   DraggablePaneviewPanel: () => (/* reexport safe */ _paneview_draggablePaneviewPanel__WEBPACK_IMPORTED_MODULE_10__.DraggablePaneviewPanel),
/* harmony export */   Gridview: () => (/* reexport safe */ _gridview_gridview__WEBPACK_IMPORTED_MODULE_7__.Gridview),
/* harmony export */   GridviewApi: () => (/* reexport safe */ _api_component_api__WEBPACK_IMPORTED_MODULE_29__.GridviewApi),
/* harmony export */   GridviewComponent: () => (/* reexport safe */ _gridview_gridviewComponent__WEBPACK_IMPORTED_MODULE_21__.GridviewComponent),
/* harmony export */   GridviewPanel: () => (/* reexport safe */ _gridview_gridviewPanel__WEBPACK_IMPORTED_MODULE_25__.GridviewPanel),
/* harmony export */   LayoutPriority: () => (/* reexport safe */ _splitview_splitview__WEBPACK_IMPORTED_MODULE_4__.LayoutPriority),
/* harmony export */   Orientation: () => (/* reexport safe */ _splitview_splitview__WEBPACK_IMPORTED_MODULE_4__.Orientation),
/* harmony export */   PROPERTY_KEYS_DOCKVIEW: () => (/* reexport safe */ _dockview_options__WEBPACK_IMPORTED_MODULE_16__.PROPERTY_KEYS_DOCKVIEW),
/* harmony export */   PROPERTY_KEYS_GRIDVIEW: () => (/* reexport safe */ _gridview_options__WEBPACK_IMPORTED_MODULE_8__.PROPERTY_KEYS_GRIDVIEW),
/* harmony export */   PROPERTY_KEYS_PANEVIEW: () => (/* reexport safe */ _paneview_options__WEBPACK_IMPORTED_MODULE_24__.PROPERTY_KEYS_PANEVIEW),
/* harmony export */   PROPERTY_KEYS_SPLITVIEW: () => (/* reexport safe */ _splitview_options__WEBPACK_IMPORTED_MODULE_5__.PROPERTY_KEYS_SPLITVIEW),
/* harmony export */   PaneFramework: () => (/* reexport safe */ _paneview_paneviewComponent__WEBPACK_IMPORTED_MODULE_23__.PaneFramework),
/* harmony export */   PaneTransfer: () => (/* reexport safe */ _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_0__.PaneTransfer),
/* harmony export */   PanelTransfer: () => (/* reexport safe */ _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_0__.PanelTransfer),
/* harmony export */   Paneview: () => (/* reexport safe */ _paneview_paneview__WEBPACK_IMPORTED_MODULE_6__.Paneview),
/* harmony export */   PaneviewApi: () => (/* reexport safe */ _api_component_api__WEBPACK_IMPORTED_MODULE_29__.PaneviewApi),
/* harmony export */   PaneviewComponent: () => (/* reexport safe */ _paneview_paneviewComponent__WEBPACK_IMPORTED_MODULE_23__.PaneviewComponent),
/* harmony export */   PaneviewPanel: () => (/* reexport safe */ _paneview_paneviewPanel__WEBPACK_IMPORTED_MODULE_27__.PaneviewPanel),
/* harmony export */   PaneviewUnhandledDragOverEvent: () => (/* reexport safe */ _paneview_options__WEBPACK_IMPORTED_MODULE_24__.PaneviewUnhandledDragOverEvent),
/* harmony export */   SashState: () => (/* reexport safe */ _splitview_splitview__WEBPACK_IMPORTED_MODULE_4__.SashState),
/* harmony export */   Sizing: () => (/* reexport safe */ _splitview_splitview__WEBPACK_IMPORTED_MODULE_4__.Sizing),
/* harmony export */   Splitview: () => (/* reexport safe */ _splitview_splitview__WEBPACK_IMPORTED_MODULE_4__.Splitview),
/* harmony export */   SplitviewApi: () => (/* reexport safe */ _api_component_api__WEBPACK_IMPORTED_MODULE_29__.SplitviewApi),
/* harmony export */   SplitviewComponent: () => (/* reexport safe */ _splitview_splitviewComponent__WEBPACK_IMPORTED_MODULE_22__.SplitviewComponent),
/* harmony export */   SplitviewPanel: () => (/* reexport safe */ _splitview_splitviewPanel__WEBPACK_IMPORTED_MODULE_26__.SplitviewPanel),
/* harmony export */   Tab: () => (/* reexport safe */ _dockview_components_tab_tab__WEBPACK_IMPORTED_MODULE_12__.Tab),
/* harmony export */   WillShowOverlayLocationEvent: () => (/* reexport safe */ _dockview_dockviewGroupPanelModel__WEBPACK_IMPORTED_MODULE_13__.WillShowOverlayLocationEvent),
/* harmony export */   createDockview: () => (/* reexport safe */ _api_entryPoints__WEBPACK_IMPORTED_MODULE_30__.createDockview),
/* harmony export */   createGridview: () => (/* reexport safe */ _api_entryPoints__WEBPACK_IMPORTED_MODULE_30__.createGridview),
/* harmony export */   createPaneview: () => (/* reexport safe */ _api_entryPoints__WEBPACK_IMPORTED_MODULE_30__.createPaneview),
/* harmony export */   createSplitview: () => (/* reexport safe */ _api_entryPoints__WEBPACK_IMPORTED_MODULE_30__.createSplitview),
/* harmony export */   directionToPosition: () => (/* reexport safe */ _dnd_droptarget__WEBPACK_IMPORTED_MODULE_28__.directionToPosition),
/* harmony export */   getDirectionOrientation: () => (/* reexport safe */ _gridview_gridview__WEBPACK_IMPORTED_MODULE_7__.getDirectionOrientation),
/* harmony export */   getGridLocation: () => (/* reexport safe */ _gridview_gridview__WEBPACK_IMPORTED_MODULE_7__.getGridLocation),
/* harmony export */   getLocationOrientation: () => (/* reexport safe */ _gridview_gridview__WEBPACK_IMPORTED_MODULE_7__.getLocationOrientation),
/* harmony export */   getPaneData: () => (/* reexport safe */ _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_0__.getPaneData),
/* harmony export */   getPanelData: () => (/* reexport safe */ _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_0__.getPanelData),
/* harmony export */   getRelativeLocation: () => (/* reexport safe */ _gridview_gridview__WEBPACK_IMPORTED_MODULE_7__.getRelativeLocation),
/* harmony export */   indexInParent: () => (/* reexport safe */ _gridview_gridview__WEBPACK_IMPORTED_MODULE_7__.indexInParent),
/* harmony export */   isGridBranchNode: () => (/* reexport safe */ _gridview_gridview__WEBPACK_IMPORTED_MODULE_7__.isGridBranchNode),
/* harmony export */   isGroupOptionsWithGroup: () => (/* reexport safe */ _dockview_options__WEBPACK_IMPORTED_MODULE_16__.isGroupOptionsWithGroup),
/* harmony export */   isGroupOptionsWithPanel: () => (/* reexport safe */ _dockview_options__WEBPACK_IMPORTED_MODULE_16__.isGroupOptionsWithPanel),
/* harmony export */   isPanelOptionsWithGroup: () => (/* reexport safe */ _dockview_options__WEBPACK_IMPORTED_MODULE_16__.isPanelOptionsWithGroup),
/* harmony export */   isPanelOptionsWithPanel: () => (/* reexport safe */ _dockview_options__WEBPACK_IMPORTED_MODULE_16__.isPanelOptionsWithPanel),
/* harmony export */   orthogonal: () => (/* reexport safe */ _gridview_gridview__WEBPACK_IMPORTED_MODULE_7__.orthogonal),
/* harmony export */   positionToDirection: () => (/* reexport safe */ _dnd_droptarget__WEBPACK_IMPORTED_MODULE_28__.positionToDirection),
/* harmony export */   toTarget: () => (/* reexport safe */ _gridview_baseComponentGridview__WEBPACK_IMPORTED_MODULE_9__.toTarget)
/* harmony export */ });
/* harmony import */ var _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dnd/dataTransfer */ "./node_modules/dockview-core/dist/esm/dnd/dataTransfer.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _panel_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./panel/types */ "./node_modules/dockview-core/dist/esm/panel/types.js");
/* harmony import */ var _splitview_splitview__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./splitview/splitview */ "./node_modules/dockview-core/dist/esm/splitview/splitview.js");
/* harmony import */ var _splitview_options__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./splitview/options */ "./node_modules/dockview-core/dist/esm/splitview/options.js");
/* harmony import */ var _paneview_paneview__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./paneview/paneview */ "./node_modules/dockview-core/dist/esm/paneview/paneview.js");
/* harmony import */ var _gridview_gridview__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./gridview/gridview */ "./node_modules/dockview-core/dist/esm/gridview/gridview.js");
/* harmony import */ var _gridview_options__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./gridview/options */ "./node_modules/dockview-core/dist/esm/gridview/options.js");
/* harmony import */ var _gridview_baseComponentGridview__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./gridview/baseComponentGridview */ "./node_modules/dockview-core/dist/esm/gridview/baseComponentGridview.js");
/* harmony import */ var _paneview_draggablePaneviewPanel__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./paneview/draggablePaneviewPanel */ "./node_modules/dockview-core/dist/esm/paneview/draggablePaneviewPanel.js");
/* harmony import */ var _dockview_components_panel_content__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./dockview/components/panel/content */ "./node_modules/dockview-core/dist/esm/dockview/components/panel/content.js");
/* harmony import */ var _dockview_components_tab_tab__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./dockview/components/tab/tab */ "./node_modules/dockview-core/dist/esm/dockview/components/tab/tab.js");
/* harmony import */ var _dockview_dockviewGroupPanelModel__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./dockview/dockviewGroupPanelModel */ "./node_modules/dockview-core/dist/esm/dockview/dockviewGroupPanelModel.js");
/* harmony import */ var _dockview_types__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./dockview/types */ "./node_modules/dockview-core/dist/esm/dockview/types.js");
/* harmony import */ var _dockview_dockviewGroupPanel__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./dockview/dockviewGroupPanel */ "./node_modules/dockview-core/dist/esm/dockview/dockviewGroupPanel.js");
/* harmony import */ var _dockview_options__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./dockview/options */ "./node_modules/dockview-core/dist/esm/dockview/options.js");
/* harmony import */ var _dockview_dockviewPanel__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./dockview/dockviewPanel */ "./node_modules/dockview-core/dist/esm/dockview/dockviewPanel.js");
/* harmony import */ var _dockview_components_tab_defaultTab__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./dockview/components/tab/defaultTab */ "./node_modules/dockview-core/dist/esm/dockview/components/tab/defaultTab.js");
/* harmony import */ var _dockview_deserializer__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./dockview/deserializer */ "./node_modules/dockview-core/dist/esm/dockview/deserializer.js");
/* harmony import */ var _dockview_dockviewComponent__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./dockview/dockviewComponent */ "./node_modules/dockview-core/dist/esm/dockview/dockviewComponent.js");
/* harmony import */ var _gridview_gridviewComponent__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./gridview/gridviewComponent */ "./node_modules/dockview-core/dist/esm/gridview/gridviewComponent.js");
/* harmony import */ var _splitview_splitviewComponent__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./splitview/splitviewComponent */ "./node_modules/dockview-core/dist/esm/splitview/splitviewComponent.js");
/* harmony import */ var _paneview_paneviewComponent__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./paneview/paneviewComponent */ "./node_modules/dockview-core/dist/esm/paneview/paneviewComponent.js");
/* harmony import */ var _paneview_options__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./paneview/options */ "./node_modules/dockview-core/dist/esm/paneview/options.js");
/* harmony import */ var _gridview_gridviewPanel__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./gridview/gridviewPanel */ "./node_modules/dockview-core/dist/esm/gridview/gridviewPanel.js");
/* harmony import */ var _splitview_splitviewPanel__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./splitview/splitviewPanel */ "./node_modules/dockview-core/dist/esm/splitview/splitviewPanel.js");
/* harmony import */ var _paneview_paneviewPanel__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./paneview/paneviewPanel */ "./node_modules/dockview-core/dist/esm/paneview/paneviewPanel.js");
/* harmony import */ var _dnd_droptarget__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./dnd/droptarget */ "./node_modules/dockview-core/dist/esm/dnd/droptarget.js");
/* harmony import */ var _api_component_api__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./api/component.api */ "./node_modules/dockview-core/dist/esm/api/component.api.js");
/* harmony import */ var _api_entryPoints__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./api/entryPoints */ "./node_modules/dockview-core/dist/esm/api/entryPoints.js");

/**
 * Events, Emitters and Disposables are very common concepts that many codebases will contain, however we need
 * to export them for dockview framework packages to use.
 * To be a good citizen these are exported with a `Dockview` prefix to prevent accidental use by others.
 */

































/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/lifecycle.js":
/*!**********************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/lifecycle.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CompositeDisposable: () => (/* binding */ CompositeDisposable),
/* harmony export */   Disposable: () => (/* binding */ Disposable),
/* harmony export */   MutableDisposable: () => (/* binding */ MutableDisposable)
/* harmony export */ });
var Disposable;
(function (Disposable) {
    Disposable.NONE = {
        dispose: () => {
            // noop
        },
    };
    function from(func) {
        return {
            dispose: () => {
                func();
            },
        };
    }
    Disposable.from = from;
})(Disposable || (Disposable = {}));
class CompositeDisposable {
    get isDisposed() {
        return this._isDisposed;
    }
    constructor(...args) {
        this._isDisposed = false;
        this._disposables = args;
    }
    addDisposables(...args) {
        args.forEach((arg) => this._disposables.push(arg));
    }
    dispose() {
        if (this._isDisposed) {
            return;
        }
        this._isDisposed = true;
        this._disposables.forEach((arg) => arg.dispose());
        this._disposables = [];
    }
}
class MutableDisposable {
    constructor() {
        this._disposable = Disposable.NONE;
    }
    set value(disposable) {
        if (this._disposable) {
            this._disposable.dispose();
        }
        this._disposable = disposable;
    }
    dispose() {
        if (this._disposable) {
            this._disposable.dispose();
            this._disposable = Disposable.NONE;
        }
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/math.js":
/*!*****************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/math.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   clamp: () => (/* binding */ clamp),
/* harmony export */   range: () => (/* binding */ range),
/* harmony export */   sequentialNumberGenerator: () => (/* binding */ sequentialNumberGenerator)
/* harmony export */ });
const clamp = (value, min, max) => {
    if (min > max) {
        /**
         * caveat: an error should be thrown here if this was a proper `clamp` function but we need to handle
         * cases where `min` > `max` and in those cases return `min`.
         */
        return min;
    }
    return Math.min(max, Math.max(value, min));
};
const sequentialNumberGenerator = () => {
    let value = 1;
    return { next: () => (value++).toString() };
};
const range = (from, to) => {
    const result = [];
    if (typeof to !== 'number') {
        to = from;
        from = 0;
    }
    if (from <= to) {
        for (let i = from; i < to; i++) {
            result.push(i);
        }
    }
    else {
        for (let i = from; i > to; i--) {
            result.push(i);
        }
    }
    return result;
};


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/overlay/overlay.js":
/*!****************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/overlay/overlay.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Overlay: () => (/* binding */ Overlay)
/* harmony export */ });
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math */ "./node_modules/dockview-core/dist/esm/math.js");




class AriaLevelTracker {
    constructor() {
        this._orderedList = [];
    }
    push(element) {
        this._orderedList = [
            ...this._orderedList.filter((item) => item !== element),
            element,
        ];
        this.update();
    }
    destroy(element) {
        this._orderedList = this._orderedList.filter((item) => item !== element);
        this.update();
    }
    update() {
        for (let i = 0; i < this._orderedList.length; i++) {
            this._orderedList[i].setAttribute('aria-level', `${i}`);
            this._orderedList[i].style.zIndex = `calc(var(--dv-overlay-z-index, 999) + ${i * 2})`;
        }
    }
}
const arialLevelTracker = new AriaLevelTracker();
class Overlay extends _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable {
    set minimumInViewportWidth(value) {
        this.options.minimumInViewportWidth = value;
    }
    set minimumInViewportHeight(value) {
        this.options.minimumInViewportHeight = value;
    }
    get element() {
        return this._element;
    }
    get isVisible() {
        return this._isVisible;
    }
    constructor(options) {
        super();
        this.options = options;
        this._element = document.createElement('div');
        this._onDidChange = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidChange = this._onDidChange.event;
        this._onDidChangeEnd = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidChangeEnd = this._onDidChangeEnd.event;
        this.addDisposables(this._onDidChange, this._onDidChangeEnd);
        this._element.className = 'dv-resize-container';
        this._isVisible = true;
        this.setupResize('top');
        this.setupResize('bottom');
        this.setupResize('left');
        this.setupResize('right');
        this.setupResize('topleft');
        this.setupResize('topright');
        this.setupResize('bottomleft');
        this.setupResize('bottomright');
        this._element.appendChild(this.options.content);
        this.options.container.appendChild(this._element);
        // if input bad resize within acceptable boundaries
        this.setBounds(Object.assign(Object.assign(Object.assign(Object.assign({ height: this.options.height, width: this.options.width }, ('top' in this.options && { top: this.options.top })), ('bottom' in this.options && { bottom: this.options.bottom })), ('left' in this.options && { left: this.options.left })), ('right' in this.options && { right: this.options.right })));
        arialLevelTracker.push(this._element);
    }
    setVisible(isVisible) {
        if (isVisible === this.isVisible) {
            return;
        }
        this._isVisible = isVisible;
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(this.element, 'dv-hidden', !this.isVisible);
    }
    bringToFront() {
        arialLevelTracker.push(this._element);
    }
    setBounds(bounds = {}) {
        if (typeof bounds.height === 'number') {
            this._element.style.height = `${bounds.height}px`;
        }
        if (typeof bounds.width === 'number') {
            this._element.style.width = `${bounds.width}px`;
        }
        if ('top' in bounds && typeof bounds.top === 'number') {
            this._element.style.top = `${bounds.top}px`;
            this._element.style.bottom = 'auto';
            this.verticalAlignment = 'top';
        }
        if ('bottom' in bounds && typeof bounds.bottom === 'number') {
            this._element.style.bottom = `${bounds.bottom}px`;
            this._element.style.top = 'auto';
            this.verticalAlignment = 'bottom';
        }
        if ('left' in bounds && typeof bounds.left === 'number') {
            this._element.style.left = `${bounds.left}px`;
            this._element.style.right = 'auto';
            this.horiziontalAlignment = 'left';
        }
        if ('right' in bounds && typeof bounds.right === 'number') {
            this._element.style.right = `${bounds.right}px`;
            this._element.style.left = 'auto';
            this.horiziontalAlignment = 'right';
        }
        const containerRect = this.options.container.getBoundingClientRect();
        const overlayRect = this._element.getBoundingClientRect();
        // region: ensure bounds within allowable limits
        // a minimum width of minimumViewportWidth must be inside the viewport
        const xOffset = Math.max(0, this.getMinimumWidth(overlayRect.width));
        // a minimum height of minimumViewportHeight must be inside the viewport
        const yOffset = Math.max(0, this.getMinimumHeight(overlayRect.height));
        if (this.verticalAlignment === 'top') {
            const top = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(overlayRect.top - containerRect.top, -yOffset, Math.max(0, containerRect.height - overlayRect.height + yOffset));
            this._element.style.top = `${top}px`;
            this._element.style.bottom = 'auto';
        }
        if (this.verticalAlignment === 'bottom') {
            const bottom = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(containerRect.bottom - overlayRect.bottom, -yOffset, Math.max(0, containerRect.height - overlayRect.height + yOffset));
            this._element.style.bottom = `${bottom}px`;
            this._element.style.top = 'auto';
        }
        if (this.horiziontalAlignment === 'left') {
            const left = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(overlayRect.left - containerRect.left, -xOffset, Math.max(0, containerRect.width - overlayRect.width + xOffset));
            this._element.style.left = `${left}px`;
            this._element.style.right = 'auto';
        }
        if (this.horiziontalAlignment === 'right') {
            const right = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(containerRect.right - overlayRect.right, -xOffset, Math.max(0, containerRect.width - overlayRect.width + xOffset));
            this._element.style.right = `${right}px`;
            this._element.style.left = 'auto';
        }
        this._onDidChange.fire();
    }
    toJSON() {
        const container = this.options.container.getBoundingClientRect();
        const element = this._element.getBoundingClientRect();
        const result = {};
        if (this.verticalAlignment === 'top') {
            result.top = parseFloat(this._element.style.top);
        }
        else if (this.verticalAlignment === 'bottom') {
            result.bottom = parseFloat(this._element.style.bottom);
        }
        else {
            result.top = element.top - container.top;
        }
        if (this.horiziontalAlignment === 'left') {
            result.left = parseFloat(this._element.style.left);
        }
        else if (this.horiziontalAlignment === 'right') {
            result.right = parseFloat(this._element.style.right);
        }
        else {
            result.left = element.left - container.left;
        }
        result.width = element.width;
        result.height = element.height;
        return result;
    }
    setupDrag(dragTarget, options = { inDragMode: false }) {
        const move = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.MutableDisposable();
        const track = () => {
            let offset = null;
            const iframes = (0,_dom__WEBPACK_IMPORTED_MODULE_0__.disableIframePointEvents)();
            move.value = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable({
                dispose: () => {
                    iframes.release();
                },
            }, (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableWindowListener)(window, 'pointermove', (e) => {
                const containerRect = this.options.container.getBoundingClientRect();
                const x = e.clientX - containerRect.left;
                const y = e.clientY - containerRect.top;
                (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(this._element, 'dv-resize-container-dragging', true);
                const overlayRect = this._element.getBoundingClientRect();
                if (offset === null) {
                    offset = {
                        x: e.clientX - overlayRect.left,
                        y: e.clientY - overlayRect.top,
                    };
                }
                const xOffset = Math.max(0, this.getMinimumWidth(overlayRect.width));
                const yOffset = Math.max(0, this.getMinimumHeight(overlayRect.height));
                const top = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(y - offset.y, -yOffset, Math.max(0, containerRect.height - overlayRect.height + yOffset));
                const bottom = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(offset.y -
                    y +
                    containerRect.height -
                    overlayRect.height, -yOffset, Math.max(0, containerRect.height - overlayRect.height + yOffset));
                const left = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(x - offset.x, -xOffset, Math.max(0, containerRect.width - overlayRect.width + xOffset));
                const right = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(offset.x - x + containerRect.width - overlayRect.width, -xOffset, Math.max(0, containerRect.width - overlayRect.width + xOffset));
                const bounds = {};
                // Anchor to top or to bottom depending on which one is closer
                if (top <= bottom) {
                    bounds.top = top;
                }
                else {
                    bounds.bottom = bottom;
                }
                // Anchor to left or to right depending on which one is closer
                if (left <= right) {
                    bounds.left = left;
                }
                else {
                    bounds.right = right;
                }
                this.setBounds(bounds);
            }), (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableWindowListener)(window, 'pointerup', () => {
                (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(this._element, 'dv-resize-container-dragging', false);
                move.dispose();
                this._onDidChangeEnd.fire();
            }));
        };
        this.addDisposables(move, (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(dragTarget, 'pointerdown', (event) => {
            if (event.defaultPrevented) {
                event.preventDefault();
                return;
            }
            // if somebody has marked this event then treat as a defaultPrevented
            // without actually calling event.preventDefault()
            if ((0,_dom__WEBPACK_IMPORTED_MODULE_0__.quasiDefaultPrevented)(event)) {
                return;
            }
            track();
        }), (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(this.options.content, 'pointerdown', (event) => {
            if (event.defaultPrevented) {
                return;
            }
            // if somebody has marked this event then treat as a defaultPrevented
            // without actually calling event.preventDefault()
            if ((0,_dom__WEBPACK_IMPORTED_MODULE_0__.quasiDefaultPrevented)(event)) {
                return;
            }
            if (event.shiftKey) {
                track();
            }
        }), (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(this.options.content, 'pointerdown', () => {
            arialLevelTracker.push(this._element);
        }, true));
        if (options.inDragMode) {
            track();
        }
    }
    setupResize(direction) {
        const resizeHandleElement = document.createElement('div');
        resizeHandleElement.className = `dv-resize-handle-${direction}`;
        this._element.appendChild(resizeHandleElement);
        const move = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.MutableDisposable();
        this.addDisposables(move, (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(resizeHandleElement, 'pointerdown', (e) => {
            e.preventDefault();
            let startPosition = null;
            const iframes = (0,_dom__WEBPACK_IMPORTED_MODULE_0__.disableIframePointEvents)();
            move.value = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable((0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableWindowListener)(window, 'pointermove', (e) => {
                const containerRect = this.options.container.getBoundingClientRect();
                const overlayRect = this._element.getBoundingClientRect();
                const y = e.clientY - containerRect.top;
                const x = e.clientX - containerRect.left;
                if (startPosition === null) {
                    // record the initial dimensions since as all subsequence moves are relative to this
                    startPosition = {
                        originalY: y,
                        originalHeight: overlayRect.height,
                        originalX: x,
                        originalWidth: overlayRect.width,
                    };
                }
                let top = undefined;
                let bottom = undefined;
                let height = undefined;
                let left = undefined;
                let right = undefined;
                let width = undefined;
                const moveTop = () => {
                    top = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(y, -Number.MAX_VALUE, startPosition.originalY +
                        startPosition.originalHeight >
                        containerRect.height
                        ? this.getMinimumHeight(containerRect.height)
                        : Math.max(0, startPosition.originalY +
                            startPosition.originalHeight -
                            Overlay.MINIMUM_HEIGHT));
                    height =
                        startPosition.originalY +
                            startPosition.originalHeight -
                            top;
                    bottom = containerRect.height - top - height;
                };
                const moveBottom = () => {
                    top =
                        startPosition.originalY -
                            startPosition.originalHeight;
                    height = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(y - top, top < 0 &&
                        typeof this.options
                            .minimumInViewportHeight === 'number'
                        ? -top +
                            this.options.minimumInViewportHeight
                        : Overlay.MINIMUM_HEIGHT, Number.MAX_VALUE);
                    bottom = containerRect.height - top - height;
                };
                const moveLeft = () => {
                    left = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(x, -Number.MAX_VALUE, startPosition.originalX +
                        startPosition.originalWidth >
                        containerRect.width
                        ? this.getMinimumWidth(containerRect.width)
                        : Math.max(0, startPosition.originalX +
                            startPosition.originalWidth -
                            Overlay.MINIMUM_WIDTH));
                    width =
                        startPosition.originalX +
                            startPosition.originalWidth -
                            left;
                    right = containerRect.width - left - width;
                };
                const moveRight = () => {
                    left =
                        startPosition.originalX -
                            startPosition.originalWidth;
                    width = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(x - left, left < 0 &&
                        typeof this.options
                            .minimumInViewportWidth === 'number'
                        ? -left +
                            this.options.minimumInViewportWidth
                        : Overlay.MINIMUM_WIDTH, Number.MAX_VALUE);
                    right = containerRect.width - left - width;
                };
                switch (direction) {
                    case 'top':
                        moveTop();
                        break;
                    case 'bottom':
                        moveBottom();
                        break;
                    case 'left':
                        moveLeft();
                        break;
                    case 'right':
                        moveRight();
                        break;
                    case 'topleft':
                        moveTop();
                        moveLeft();
                        break;
                    case 'topright':
                        moveTop();
                        moveRight();
                        break;
                    case 'bottomleft':
                        moveBottom();
                        moveLeft();
                        break;
                    case 'bottomright':
                        moveBottom();
                        moveRight();
                        break;
                }
                const bounds = {};
                // Anchor to top or to bottom depending on which one is closer
                if (top <= bottom) {
                    bounds.top = top;
                }
                else {
                    bounds.bottom = bottom;
                }
                // Anchor to left or to right depending on which one is closer
                if (left <= right) {
                    bounds.left = left;
                }
                else {
                    bounds.right = right;
                }
                bounds.height = height;
                bounds.width = width;
                this.setBounds(bounds);
            }), {
                dispose: () => {
                    iframes.release();
                },
            }, (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableWindowListener)(window, 'pointerup', () => {
                move.dispose();
                this._onDidChangeEnd.fire();
            }));
        }));
    }
    getMinimumWidth(width) {
        if (typeof this.options.minimumInViewportWidth === 'number') {
            return width - this.options.minimumInViewportWidth;
        }
        return 0;
    }
    getMinimumHeight(height) {
        if (typeof this.options.minimumInViewportHeight === 'number') {
            return height - this.options.minimumInViewportHeight;
        }
        return 0;
    }
    dispose() {
        arialLevelTracker.destroy(this._element);
        this._element.remove();
        super.dispose();
    }
}
Overlay.MINIMUM_HEIGHT = 20;
Overlay.MINIMUM_WIDTH = 20;


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/overlay/overlayRenderContainer.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/overlay/overlayRenderContainer.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   OverlayRenderContainer: () => (/* binding */ OverlayRenderContainer)
/* harmony export */ });
/* harmony import */ var _dnd_dnd__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dnd/dnd */ "./node_modules/dockview-core/dist/esm/dnd/dnd.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");



function createFocusableElement() {
    const element = document.createElement('div');
    element.tabIndex = -1;
    return element;
}
class OverlayRenderContainer extends _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable {
    constructor(element, accessor) {
        super();
        this.element = element;
        this.accessor = accessor;
        this.map = {};
        this._disposed = false;
        this.addDisposables(_lifecycle__WEBPACK_IMPORTED_MODULE_2__.Disposable.from(() => {
            for (const value of Object.values(this.map)) {
                value.disposable.dispose();
                value.destroy.dispose();
            }
            this._disposed = true;
        }));
    }
    detatch(panel) {
        if (this.map[panel.api.id]) {
            const { disposable, destroy } = this.map[panel.api.id];
            disposable.dispose();
            destroy.dispose();
            delete this.map[panel.api.id];
            return true;
        }
        return false;
    }
    attach(options) {
        const { panel, referenceContainer } = options;
        if (!this.map[panel.api.id]) {
            const element = createFocusableElement();
            element.className = 'dv-render-overlay';
            this.map[panel.api.id] = {
                panel,
                disposable: _lifecycle__WEBPACK_IMPORTED_MODULE_2__.Disposable.NONE,
                destroy: _lifecycle__WEBPACK_IMPORTED_MODULE_2__.Disposable.NONE,
                element,
            };
        }
        const focusContainer = this.map[panel.api.id].element;
        if (panel.view.content.element.parentElement !== focusContainer) {
            focusContainer.appendChild(panel.view.content.element);
        }
        if (focusContainer.parentElement !== this.element) {
            this.element.appendChild(focusContainer);
        }
        const resize = () => {
            // TODO propagate position to avoid getDomNodePagePosition calls, possible performance bottleneck?
            const box = (0,_dom__WEBPACK_IMPORTED_MODULE_1__.getDomNodePagePosition)(referenceContainer.element);
            const box2 = (0,_dom__WEBPACK_IMPORTED_MODULE_1__.getDomNodePagePosition)(this.element);
            focusContainer.style.left = `${box.left - box2.left}px`;
            focusContainer.style.top = `${box.top - box2.top}px`;
            focusContainer.style.width = `${box.width}px`;
            focusContainer.style.height = `${box.height}px`;
            (0,_dom__WEBPACK_IMPORTED_MODULE_1__.toggleClass)(focusContainer, 'dv-render-overlay-float', panel.group.api.location.type === 'floating');
        };
        const visibilityChanged = () => {
            if (panel.api.isVisible) {
                resize();
            }
            focusContainer.style.display = panel.api.isVisible ? '' : 'none';
        };
        const observerDisposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.MutableDisposable();
        const correctLayerPosition = () => {
            if (panel.api.location.type === 'floating') {
                queueMicrotask(() => {
                    const floatingGroup = this.accessor.floatingGroups.find((group) => group.group === panel.api.group);
                    if (!floatingGroup) {
                        return;
                    }
                    const element = floatingGroup.overlay.element;
                    const update = () => {
                        const level = Number(element.getAttribute('aria-level'));
                        focusContainer.style.zIndex = `calc(var(--dv-overlay-z-index, 999) + ${level * 2 + 1})`;
                    };
                    const observer = new MutationObserver(() => {
                        update();
                    });
                    observerDisposable.value = _lifecycle__WEBPACK_IMPORTED_MODULE_2__.Disposable.from(() => observer.disconnect());
                    observer.observe(element, {
                        attributeFilter: ['aria-level'],
                        attributes: true,
                    });
                    update();
                });
            }
            else {
                focusContainer.style.zIndex = ''; // reset the z-index, perhaps CSS will take over here
            }
        };
        const disposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable(observerDisposable, 
        /**
         * since container is positioned absoutely we must explicitly forward
         * the dnd events for the expect behaviours to continue to occur in terms of dnd
         *
         * the dnd observer does not need to be conditional on whether the panel is visible since
         * non-visible panels are 'display: none' and in such case the dnd observer will not fire.
         */
        new _dnd_dnd__WEBPACK_IMPORTED_MODULE_0__.DragAndDropObserver(focusContainer, {
            onDragEnd: (e) => {
                referenceContainer.dropTarget.dnd.onDragEnd(e);
            },
            onDragEnter: (e) => {
                referenceContainer.dropTarget.dnd.onDragEnter(e);
            },
            onDragLeave: (e) => {
                referenceContainer.dropTarget.dnd.onDragLeave(e);
            },
            onDrop: (e) => {
                referenceContainer.dropTarget.dnd.onDrop(e);
            },
            onDragOver: (e) => {
                referenceContainer.dropTarget.dnd.onDragOver(e);
            },
        }), panel.api.onDidVisibilityChange(() => {
            /**
             * Control the visibility of the content, however even when not visible (display: none)
             * the content is still maintained within the DOM hence DOM specific attributes
             * such as scroll position are maintained when next made visible.
             */
            visibilityChanged();
        }), panel.api.onDidDimensionsChange(() => {
            if (!panel.api.isVisible) {
                return;
            }
            resize();
        }), panel.api.onDidLocationChange(() => {
            correctLayerPosition();
        }));
        this.map[panel.api.id].destroy = _lifecycle__WEBPACK_IMPORTED_MODULE_2__.Disposable.from(() => {
            var _a;
            if (panel.view.content.element.parentElement === focusContainer) {
                focusContainer.removeChild(panel.view.content.element);
            }
            (_a = focusContainer.parentElement) === null || _a === void 0 ? void 0 : _a.removeChild(focusContainer);
        });
        correctLayerPosition();
        queueMicrotask(() => {
            if (this.isDisposed) {
                return;
            }
            /**
             * wait until everything has finished in the current stack-frame call before
             * calling the first resize as other size-altering events may still occur before
             * the end of the stack-frame.
             */
            visibilityChanged();
        });
        // dispose of logic asoccciated with previous reference-container
        this.map[panel.api.id].disposable.dispose();
        // and reset the disposable to the active reference-container
        this.map[panel.api.id].disposable = disposable;
        return focusContainer;
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/panel/types.js":
/*!************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/panel/types.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/paneview/defaultPaneviewHeader.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/paneview/defaultPaneviewHeader.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DefaultHeader: () => (/* binding */ DefaultHeader)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _svg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../svg */ "./node_modules/dockview-core/dist/esm/svg.js");




class DefaultHeader extends _lifecycle__WEBPACK_IMPORTED_MODULE_1__.CompositeDisposable {
    get element() {
        return this._element;
    }
    constructor() {
        super();
        this._expandedIcon = (0,_svg__WEBPACK_IMPORTED_MODULE_3__.createExpandMoreButton)();
        this._collapsedIcon = (0,_svg__WEBPACK_IMPORTED_MODULE_3__.createChevronRightButton)();
        this.disposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_1__.MutableDisposable();
        this.apiRef = {
            api: null,
        };
        this._element = document.createElement('div');
        this.element.className = 'dv-default-header';
        this._content = document.createElement('span');
        this._expander = document.createElement('div');
        this._expander.className = 'dv-pane-header-icon';
        this.element.appendChild(this._expander);
        this.element.appendChild(this._content);
        this.addDisposables((0,_events__WEBPACK_IMPORTED_MODULE_0__.addDisposableListener)(this._element, 'click', () => {
            var _a;
            (_a = this.apiRef.api) === null || _a === void 0 ? void 0 : _a.setExpanded(!this.apiRef.api.isExpanded);
        }));
    }
    init(params) {
        this.apiRef.api = params.api;
        this._content.textContent = params.title;
        this.updateIcon();
        this.disposable.value = params.api.onDidExpansionChange(() => {
            this.updateIcon();
        });
    }
    updateIcon() {
        var _a;
        const isExpanded = !!((_a = this.apiRef.api) === null || _a === void 0 ? void 0 : _a.isExpanded);
        (0,_dom__WEBPACK_IMPORTED_MODULE_2__.toggleClass)(this._expander, 'collapsed', !isExpanded);
        if (isExpanded) {
            if (this._expander.contains(this._collapsedIcon)) {
                this._collapsedIcon.remove();
            }
            if (!this._expander.contains(this._expandedIcon)) {
                this._expander.appendChild(this._expandedIcon);
            }
        }
        else {
            if (this._expander.contains(this._expandedIcon)) {
                this._expandedIcon.remove();
            }
            if (!this._expander.contains(this._collapsedIcon)) {
                this._expander.appendChild(this._collapsedIcon);
            }
        }
    }
    update(_params) {
        //
    }
    dispose() {
        this.disposable.dispose();
        super.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/paneview/draggablePaneviewPanel.js":
/*!********************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/paneview/draggablePaneviewPanel.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DraggablePaneviewPanel: () => (/* binding */ DraggablePaneviewPanel)
/* harmony export */ });
/* harmony import */ var _api_component_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api/component.api */ "./node_modules/dockview-core/dist/esm/api/component.api.js");
/* harmony import */ var _dnd_abstractDragHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dnd/abstractDragHandler */ "./node_modules/dockview-core/dist/esm/dnd/abstractDragHandler.js");
/* harmony import */ var _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dnd/dataTransfer */ "./node_modules/dockview-core/dist/esm/dnd/dataTransfer.js");
/* harmony import */ var _dnd_droptarget__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../dnd/droptarget */ "./node_modules/dockview-core/dist/esm/dnd/droptarget.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _options__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./options */ "./node_modules/dockview-core/dist/esm/paneview/options.js");
/* harmony import */ var _paneviewPanel__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./paneviewPanel */ "./node_modules/dockview-core/dist/esm/paneview/paneviewPanel.js");







class DraggablePaneviewPanel extends _paneviewPanel__WEBPACK_IMPORTED_MODULE_6__.PaneviewPanel {
    constructor(accessor, id, component, headerComponent, orientation, isExpanded, disableDnd) {
        super(id, component, headerComponent, orientation, isExpanded, true);
        this.accessor = accessor;
        this._onDidDrop = new _events__WEBPACK_IMPORTED_MODULE_4__.Emitter();
        this.onDidDrop = this._onDidDrop.event;
        this._onUnhandledDragOverEvent = new _events__WEBPACK_IMPORTED_MODULE_4__.Emitter();
        this.onUnhandledDragOverEvent = this._onUnhandledDragOverEvent.event;
        this.addDisposables(this._onDidDrop, this._onUnhandledDragOverEvent);
        if (!disableDnd) {
            this.initDragFeatures();
        }
    }
    initDragFeatures() {
        if (!this.header) {
            return;
        }
        const id = this.id;
        const accessorId = this.accessor.id;
        this.header.draggable = true;
        this.handler = new (class PaneDragHandler extends _dnd_abstractDragHandler__WEBPACK_IMPORTED_MODULE_1__.DragHandler {
            getData() {
                _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.LocalSelectionTransfer.getInstance().setData([new _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.PaneTransfer(accessorId, id)], _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.PaneTransfer.prototype);
                return {
                    dispose: () => {
                        _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.LocalSelectionTransfer.getInstance().clearData(_dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.PaneTransfer.prototype);
                    },
                };
            }
        })(this.header);
        this.target = new _dnd_droptarget__WEBPACK_IMPORTED_MODULE_3__.Droptarget(this.element, {
            acceptedTargetZones: ['top', 'bottom'],
            overlayModel: {
                activationSize: { type: 'percentage', value: 50 },
            },
            canDisplayOverlay: (event, position) => {
                const data = (0,_dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.getPaneData)();
                if (data) {
                    if (data.paneId !== this.id &&
                        data.viewId === this.accessor.id) {
                        return true;
                    }
                }
                const firedEvent = new _options__WEBPACK_IMPORTED_MODULE_5__.PaneviewUnhandledDragOverEvent(event, position, _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.getPaneData, this);
                this._onUnhandledDragOverEvent.fire(firedEvent);
                return firedEvent.isAccepted;
            },
        });
        this.addDisposables(this._onDidDrop, this.handler, this.target, this.target.onDrop((event) => {
            this.onDrop(event);
        }));
    }
    onDrop(event) {
        const data = (0,_dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.getPaneData)();
        if (!data || data.viewId !== this.accessor.id) {
            // if there is no local drag event for this panel
            // or if the drag event was creating by another Paneview instance
            this._onDidDrop.fire(Object.assign(Object.assign({}, event), { panel: this, api: new _api_component_api__WEBPACK_IMPORTED_MODULE_0__.PaneviewApi(this.accessor), getData: _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.getPaneData }));
            return;
        }
        const containerApi = this._params
            .containerApi;
        const panelId = data.paneId;
        const existingPanel = containerApi.getPanel(panelId);
        if (!existingPanel) {
            // if the panel doesn't exist
            this._onDidDrop.fire(Object.assign(Object.assign({}, event), { panel: this, getData: _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.getPaneData, api: new _api_component_api__WEBPACK_IMPORTED_MODULE_0__.PaneviewApi(this.accessor) }));
            return;
        }
        const allPanels = containerApi.panels;
        const fromIndex = allPanels.indexOf(existingPanel);
        let toIndex = containerApi.panels.indexOf(this);
        if (event.position === 'left' || event.position === 'top') {
            toIndex = Math.max(0, toIndex - 1);
        }
        if (event.position === 'right' || event.position === 'bottom') {
            if (fromIndex > toIndex) {
                toIndex++;
            }
            toIndex = Math.min(allPanels.length - 1, toIndex);
        }
        containerApi.movePanel(fromIndex, toIndex);
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/paneview/options.js":
/*!*****************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/paneview/options.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PROPERTY_KEYS_PANEVIEW: () => (/* binding */ PROPERTY_KEYS_PANEVIEW),
/* harmony export */   PaneviewUnhandledDragOverEvent: () => (/* binding */ PaneviewUnhandledDragOverEvent)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");

const PROPERTY_KEYS_PANEVIEW = (() => {
    /**
     * by readong the keys from an empty value object TypeScript will error
     * when we add or remove new properties to `DockviewOptions`
     */
    const properties = {
        disableAutoResizing: undefined,
        disableDnd: undefined,
        className: undefined,
    };
    return Object.keys(properties);
})();
class PaneviewUnhandledDragOverEvent extends _events__WEBPACK_IMPORTED_MODULE_0__.AcceptableEvent {
    constructor(nativeEvent, position, getData, panel) {
        super();
        this.nativeEvent = nativeEvent;
        this.position = position;
        this.getData = getData;
        this.panel = panel;
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/paneview/paneview.js":
/*!******************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/paneview/paneview.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Paneview: () => (/* binding */ Paneview)
/* harmony export */ });
/* harmony import */ var _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../splitview/splitview */ "./node_modules/dockview-core/dist/esm/splitview/splitview.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");




class Paneview extends _lifecycle__WEBPACK_IMPORTED_MODULE_1__.CompositeDisposable {
    get onDidAddView() {
        return this.splitview.onDidAddView;
    }
    get onDidRemoveView() {
        return this.splitview.onDidRemoveView;
    }
    get minimumSize() {
        return this.splitview.minimumSize;
    }
    get maximumSize() {
        return this.splitview.maximumSize;
    }
    get orientation() {
        return this.splitview.orientation;
    }
    get size() {
        return this.splitview.size;
    }
    get orthogonalSize() {
        return this.splitview.orthogonalSize;
    }
    constructor(container, options) {
        var _a;
        super();
        this.paneItems = [];
        this.skipAnimation = false;
        this._onDidChange = new _events__WEBPACK_IMPORTED_MODULE_2__.Emitter();
        this.onDidChange = this._onDidChange.event;
        this._orientation = (_a = options.orientation) !== null && _a !== void 0 ? _a : _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.VERTICAL;
        this.element = document.createElement('div');
        this.element.className = 'dv-pane-container';
        container.appendChild(this.element);
        this.splitview = new _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Splitview(this.element, {
            orientation: this._orientation,
            proportionalLayout: false,
            descriptor: options.descriptor,
        });
        // if we've added views from the descriptor we need to
        // add the panes to our Pane array and setup animation
        this.getPanes().forEach((pane) => {
            const disposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_1__.CompositeDisposable(pane.onDidChangeExpansionState(() => {
                this.setupAnimation();
                this._onDidChange.fire(undefined);
            }));
            const paneItem = {
                pane,
                disposable: {
                    dispose: () => {
                        disposable.dispose();
                    },
                },
            };
            this.paneItems.push(paneItem);
            pane.orthogonalSize = this.splitview.orthogonalSize;
        });
        this.addDisposables(this._onDidChange, this.splitview.onDidSashEnd(() => {
            this._onDidChange.fire(undefined);
        }), this.splitview.onDidAddView(() => {
            this._onDidChange.fire();
        }), this.splitview.onDidRemoveView(() => {
            this._onDidChange.fire();
        }));
    }
    setViewVisible(index, visible) {
        this.splitview.setViewVisible(index, visible);
    }
    addPane(pane, size, index = this.splitview.length, skipLayout = false) {
        const disposable = pane.onDidChangeExpansionState(() => {
            this.setupAnimation();
            this._onDidChange.fire(undefined);
        });
        const paneItem = {
            pane,
            disposable: {
                dispose: () => {
                    disposable.dispose();
                },
            },
        };
        this.paneItems.splice(index, 0, paneItem);
        pane.orthogonalSize = this.splitview.orthogonalSize;
        this.splitview.addView(pane, size, index, skipLayout);
    }
    getViewSize(index) {
        return this.splitview.getViewSize(index);
    }
    getPanes() {
        return this.splitview.getViews();
    }
    removePane(index, options = { skipDispose: false }) {
        const paneItem = this.paneItems.splice(index, 1)[0];
        this.splitview.removeView(index);
        if (!options.skipDispose) {
            paneItem.disposable.dispose();
            paneItem.pane.dispose();
        }
        return paneItem;
    }
    moveView(from, to) {
        if (from === to) {
            return;
        }
        const view = this.removePane(from, { skipDispose: true });
        this.skipAnimation = true;
        try {
            this.addPane(view.pane, view.pane.size, to, false);
        }
        finally {
            this.skipAnimation = false;
        }
    }
    layout(size, orthogonalSize) {
        this.splitview.layout(size, orthogonalSize);
    }
    setupAnimation() {
        if (this.skipAnimation) {
            return;
        }
        if (this.animationTimer) {
            clearTimeout(this.animationTimer);
            this.animationTimer = undefined;
        }
        (0,_dom__WEBPACK_IMPORTED_MODULE_3__.addClasses)(this.element, 'dv-animated');
        this.animationTimer = setTimeout(() => {
            this.animationTimer = undefined;
            (0,_dom__WEBPACK_IMPORTED_MODULE_3__.removeClasses)(this.element, 'dv-animated');
        }, 200);
    }
    dispose() {
        super.dispose();
        if (this.animationTimer) {
            clearTimeout(this.animationTimer);
            this.animationTimer = undefined;
        }
        this.paneItems.forEach((paneItem) => {
            paneItem.disposable.dispose();
            paneItem.pane.dispose();
        });
        this.paneItems = [];
        this.splitview.dispose();
        this.element.remove();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/paneview/paneviewComponent.js":
/*!***************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/paneview/paneviewComponent.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PaneFramework: () => (/* binding */ PaneFramework),
/* harmony export */   PaneviewComponent: () => (/* binding */ PaneviewComponent)
/* harmony export */ });
/* harmony import */ var _api_component_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api/component.api */ "./node_modules/dockview-core/dist/esm/api/component.api.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _splitview_splitview__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../splitview/splitview */ "./node_modules/dockview-core/dist/esm/splitview/splitview.js");
/* harmony import */ var _paneview__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./paneview */ "./node_modules/dockview-core/dist/esm/paneview/paneview.js");
/* harmony import */ var _draggablePaneviewPanel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./draggablePaneviewPanel */ "./node_modules/dockview-core/dist/esm/paneview/draggablePaneviewPanel.js");
/* harmony import */ var _defaultPaneviewHeader__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./defaultPaneviewHeader */ "./node_modules/dockview-core/dist/esm/paneview/defaultPaneviewHeader.js");
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../math */ "./node_modules/dockview-core/dist/esm/math.js");
/* harmony import */ var _resizable__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../resizable */ "./node_modules/dockview-core/dist/esm/resizable.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");










const nextLayoutId = (0,_math__WEBPACK_IMPORTED_MODULE_7__.sequentialNumberGenerator)();
class PaneFramework extends _draggablePaneviewPanel__WEBPACK_IMPORTED_MODULE_5__.DraggablePaneviewPanel {
    constructor(options) {
        super(options.accessor, options.id, options.component, options.headerComponent, options.orientation, options.isExpanded, options.disableDnd);
        this.options = options;
    }
    getBodyComponent() {
        return this.options.body;
    }
    getHeaderComponent() {
        return this.options.header;
    }
}
class PaneviewComponent extends _resizable__WEBPACK_IMPORTED_MODULE_8__.Resizable {
    get id() {
        return this._id;
    }
    get panels() {
        return this.paneview.getPanes();
    }
    set paneview(value) {
        this._paneview = value;
        this._disposable.value = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable(this._paneview.onDidChange(() => {
            this._onDidLayoutChange.fire(undefined);
        }), this._paneview.onDidAddView((e) => this._onDidAddView.fire(e)), this._paneview.onDidRemoveView((e) => this._onDidRemoveView.fire(e)));
    }
    get paneview() {
        return this._paneview;
    }
    get minimumSize() {
        return this.paneview.minimumSize;
    }
    get maximumSize() {
        return this.paneview.maximumSize;
    }
    get height() {
        return this.paneview.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_3__.Orientation.HORIZONTAL
            ? this.paneview.orthogonalSize
            : this.paneview.size;
    }
    get width() {
        return this.paneview.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_3__.Orientation.HORIZONTAL
            ? this.paneview.size
            : this.paneview.orthogonalSize;
    }
    get options() {
        return this._options;
    }
    constructor(container, options) {
        var _a;
        super(document.createElement('div'), options.disableAutoResizing);
        this._id = nextLayoutId.next();
        this._disposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.MutableDisposable();
        this._viewDisposables = new Map();
        this._onDidLayoutfromJSON = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidLayoutFromJSON = this._onDidLayoutfromJSON.event;
        this._onDidLayoutChange = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidLayoutChange = this._onDidLayoutChange.event;
        this._onDidDrop = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidDrop = this._onDidDrop.event;
        this._onDidAddView = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidAddView = this._onDidAddView.event;
        this._onDidRemoveView = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidRemoveView = this._onDidRemoveView.event;
        this._onUnhandledDragOverEvent = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onUnhandledDragOverEvent = this._onUnhandledDragOverEvent.event;
        this.element.style.height = '100%';
        this.element.style.width = '100%';
        this.addDisposables(this._onDidLayoutChange, this._onDidLayoutfromJSON, this._onDidDrop, this._onDidAddView, this._onDidRemoveView, this._onUnhandledDragOverEvent);
        this._classNames = new _dom__WEBPACK_IMPORTED_MODULE_9__.Classnames(this.element);
        this._classNames.setClassNames((_a = options.className) !== null && _a !== void 0 ? _a : '');
        // the container is owned by the third-party, do not modify/delete it
        container.appendChild(this.element);
        this._options = options;
        this.paneview = new _paneview__WEBPACK_IMPORTED_MODULE_4__.Paneview(this.element, {
            // only allow paneview in the vertical orientation for now
            orientation: _splitview_splitview__WEBPACK_IMPORTED_MODULE_3__.Orientation.VERTICAL,
        });
        this.addDisposables(this._disposable);
    }
    setVisible(panel, visible) {
        const index = this.panels.indexOf(panel);
        this.paneview.setViewVisible(index, visible);
    }
    focus() {
        //noop
    }
    updateOptions(options) {
        var _a, _b;
        if ('className' in options) {
            this._classNames.setClassNames((_a = options.className) !== null && _a !== void 0 ? _a : '');
        }
        if ('disableResizing' in options) {
            this.disableResizing = (_b = options.disableAutoResizing) !== null && _b !== void 0 ? _b : false;
        }
        this._options = Object.assign(Object.assign({}, this.options), options);
    }
    addPanel(options) {
        var _a;
        const body = this.options.createComponent({
            id: options.id,
            name: options.component,
        });
        let header;
        if (options.headerComponent && this.options.createHeaderComponent) {
            header = this.options.createHeaderComponent({
                id: options.id,
                name: options.headerComponent,
            });
        }
        if (!header) {
            header = new _defaultPaneviewHeader__WEBPACK_IMPORTED_MODULE_6__.DefaultHeader();
        }
        const view = new PaneFramework({
            id: options.id,
            component: options.component,
            headerComponent: options.headerComponent,
            header,
            body,
            orientation: _splitview_splitview__WEBPACK_IMPORTED_MODULE_3__.Orientation.VERTICAL,
            isExpanded: !!options.isExpanded,
            disableDnd: !!this.options.disableDnd,
            accessor: this,
        });
        this.doAddPanel(view);
        const size = typeof options.size === 'number' ? options.size : _splitview_splitview__WEBPACK_IMPORTED_MODULE_3__.Sizing.Distribute;
        const index = typeof options.index === 'number' ? options.index : undefined;
        view.init({
            params: (_a = options.params) !== null && _a !== void 0 ? _a : {},
            minimumBodySize: options.minimumBodySize,
            maximumBodySize: options.maximumBodySize,
            isExpanded: options.isExpanded,
            title: options.title,
            containerApi: new _api_component_api__WEBPACK_IMPORTED_MODULE_0__.PaneviewApi(this),
            accessor: this,
        });
        this.paneview.addPane(view, size, index);
        view.orientation = this.paneview.orientation;
        return view;
    }
    removePanel(panel) {
        const views = this.panels;
        const index = views.findIndex((_) => _ === panel);
        this.paneview.removePane(index);
        this.doRemovePanel(panel);
    }
    movePanel(from, to) {
        this.paneview.moveView(from, to);
    }
    getPanel(id) {
        return this.panels.find((view) => view.id === id);
    }
    layout(width, height) {
        const [size, orthogonalSize] = this.paneview.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_3__.Orientation.HORIZONTAL
            ? [width, height]
            : [height, width];
        this.paneview.layout(size, orthogonalSize);
    }
    toJSON() {
        const maximum = (value) => value === Number.MAX_SAFE_INTEGER ||
            value === Number.POSITIVE_INFINITY
            ? undefined
            : value;
        const minimum = (value) => (value <= 0 ? undefined : value);
        const views = this.paneview
            .getPanes()
            .map((view, i) => {
            const size = this.paneview.getViewSize(i);
            return {
                size,
                data: view.toJSON(),
                minimumSize: minimum(view.minimumBodySize),
                maximumSize: maximum(view.maximumBodySize),
                expanded: view.isExpanded(),
            };
        });
        return {
            views,
            size: this.paneview.size,
        };
    }
    fromJSON(serializedPaneview) {
        this.clear();
        const { views, size } = serializedPaneview;
        const queue = [];
        // take note of the existing dimensions
        const width = this.width;
        const height = this.height;
        this.paneview = new _paneview__WEBPACK_IMPORTED_MODULE_4__.Paneview(this.element, {
            orientation: _splitview_splitview__WEBPACK_IMPORTED_MODULE_3__.Orientation.VERTICAL,
            descriptor: {
                size,
                views: views.map((view) => {
                    const data = view.data;
                    const body = this.options.createComponent({
                        id: data.id,
                        name: data.component,
                    });
                    let header;
                    if (data.headerComponent &&
                        this.options.createHeaderComponent) {
                        header = this.options.createHeaderComponent({
                            id: data.id,
                            name: data.headerComponent,
                        });
                    }
                    if (!header) {
                        header = new _defaultPaneviewHeader__WEBPACK_IMPORTED_MODULE_6__.DefaultHeader();
                    }
                    const panel = new PaneFramework({
                        id: data.id,
                        component: data.component,
                        headerComponent: data.headerComponent,
                        header,
                        body,
                        orientation: _splitview_splitview__WEBPACK_IMPORTED_MODULE_3__.Orientation.VERTICAL,
                        isExpanded: !!view.expanded,
                        disableDnd: !!this.options.disableDnd,
                        accessor: this,
                    });
                    this.doAddPanel(panel);
                    queue.push(() => {
                        var _a;
                        panel.init({
                            params: (_a = data.params) !== null && _a !== void 0 ? _a : {},
                            minimumBodySize: view.minimumSize,
                            maximumBodySize: view.maximumSize,
                            title: data.title,
                            isExpanded: !!view.expanded,
                            containerApi: new _api_component_api__WEBPACK_IMPORTED_MODULE_0__.PaneviewApi(this),
                            accessor: this,
                        });
                        panel.orientation = this.paneview.orientation;
                    });
                    setTimeout(() => {
                        // the original onDidAddView events are missed since they are fired before we can subcribe to them
                        this._onDidAddView.fire(panel);
                    }, 0);
                    return { size: view.size, view: panel };
                }),
            },
        });
        this.layout(width, height);
        queue.forEach((f) => f());
        this._onDidLayoutfromJSON.fire();
    }
    clear() {
        for (const [_, value] of this._viewDisposables.entries()) {
            value.dispose();
        }
        this._viewDisposables.clear();
        this.paneview.dispose();
    }
    doAddPanel(panel) {
        const disposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable(panel.onDidDrop((event) => {
            this._onDidDrop.fire(event);
        }), panel.onUnhandledDragOverEvent((event) => {
            this._onUnhandledDragOverEvent.fire(event);
        }));
        this._viewDisposables.set(panel.id, disposable);
    }
    doRemovePanel(panel) {
        const disposable = this._viewDisposables.get(panel.id);
        if (disposable) {
            disposable.dispose();
            this._viewDisposables.delete(panel.id);
        }
    }
    dispose() {
        super.dispose();
        for (const [_, value] of this._viewDisposables.entries()) {
            value.dispose();
        }
        this._viewDisposables.clear();
        this.paneview.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/paneview/paneviewPanel.js":
/*!***********************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/paneview/paneviewPanel.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PaneviewPanel: () => (/* binding */ PaneviewPanel)
/* harmony export */ });
/* harmony import */ var _api_paneviewPanelApi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api/paneviewPanelApi */ "./node_modules/dockview-core/dist/esm/api/paneviewPanelApi.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _gridview_basePanelView__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../gridview/basePanelView */ "./node_modules/dockview-core/dist/esm/gridview/basePanelView.js");
/* harmony import */ var _splitview_splitview__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../splitview/splitview */ "./node_modules/dockview-core/dist/esm/splitview/splitview.js");





class PaneviewPanel extends _gridview_basePanelView__WEBPACK_IMPORTED_MODULE_3__.BasePanelView {
    set orientation(value) {
        this._orientation = value;
    }
    get orientation() {
        return this._orientation;
    }
    get minimumSize() {
        const headerSize = this.headerSize;
        const expanded = this.isExpanded();
        const minimumBodySize = expanded ? this._minimumBodySize : 0;
        return headerSize + minimumBodySize;
    }
    get maximumSize() {
        const headerSize = this.headerSize;
        const expanded = this.isExpanded();
        const maximumBodySize = expanded ? this._maximumBodySize : 0;
        return headerSize + maximumBodySize;
    }
    get size() {
        return this._size;
    }
    get orthogonalSize() {
        return this._orthogonalSize;
    }
    set orthogonalSize(size) {
        this._orthogonalSize = size;
    }
    get minimumBodySize() {
        return this._minimumBodySize;
    }
    set minimumBodySize(value) {
        this._minimumBodySize = typeof value === 'number' ? value : 0;
    }
    get maximumBodySize() {
        return this._maximumBodySize;
    }
    set maximumBodySize(value) {
        this._maximumBodySize =
            typeof value === 'number' ? value : Number.POSITIVE_INFINITY;
    }
    get headerVisible() {
        return this._headerVisible;
    }
    set headerVisible(value) {
        this._headerVisible = value;
        this.header.style.display = value ? '' : 'none';
    }
    constructor(id, component, headerComponent, orientation, isExpanded, isHeaderVisible) {
        super(id, component, new _api_paneviewPanelApi__WEBPACK_IMPORTED_MODULE_0__.PaneviewPanelApiImpl(id, component));
        this.headerComponent = headerComponent;
        this._onDidChangeExpansionState = new _events__WEBPACK_IMPORTED_MODULE_2__.Emitter({ replay: true });
        this.onDidChangeExpansionState = this._onDidChangeExpansionState.event;
        this._onDidChange = new _events__WEBPACK_IMPORTED_MODULE_2__.Emitter();
        this.onDidChange = this._onDidChange.event;
        this.headerSize = 22;
        this._orthogonalSize = 0;
        this._size = 0;
        this._minimumBodySize = 100;
        this._maximumBodySize = Number.POSITIVE_INFINITY;
        this._isExpanded = false;
        this.expandedSize = 0;
        this.api.pane = this; // TODO cannot use 'this' before 'super'
        this.api.initialize(this);
        this._isExpanded = isExpanded;
        this._headerVisible = isHeaderVisible;
        this._onDidChangeExpansionState.fire(this.isExpanded()); // initialize value
        this._orientation = orientation;
        this.element.classList.add('dv-pane');
        this.addDisposables(this.api.onWillVisibilityChange((event) => {
            const { isVisible } = event;
            const { accessor } = this._params;
            accessor.setVisible(this, isVisible);
        }), this.api.onDidSizeChange((event) => {
            this._onDidChange.fire({ size: event.size });
        }), (0,_events__WEBPACK_IMPORTED_MODULE_2__.addDisposableListener)(this.element, 'mouseenter', (ev) => {
            this.api._onMouseEnter.fire(ev);
        }), (0,_events__WEBPACK_IMPORTED_MODULE_2__.addDisposableListener)(this.element, 'mouseleave', (ev) => {
            this.api._onMouseLeave.fire(ev);
        }));
        this.addDisposables(this._onDidChangeExpansionState, this.onDidChangeExpansionState((isPanelExpanded) => {
            this.api._onDidExpansionChange.fire({
                isExpanded: isPanelExpanded,
            });
        }), this.api.onDidFocusChange((e) => {
            if (!this.header) {
                return;
            }
            if (e.isFocused) {
                (0,_dom__WEBPACK_IMPORTED_MODULE_1__.addClasses)(this.header, 'focused');
            }
            else {
                (0,_dom__WEBPACK_IMPORTED_MODULE_1__.removeClasses)(this.header, 'focused');
            }
        }));
        this.renderOnce();
    }
    setVisible(isVisible) {
        this.api._onDidVisibilityChange.fire({ isVisible });
    }
    setActive(isActive) {
        this.api._onDidActiveChange.fire({ isActive });
    }
    isExpanded() {
        return this._isExpanded;
    }
    setExpanded(expanded) {
        if (this._isExpanded === expanded) {
            return;
        }
        this._isExpanded = expanded;
        if (expanded) {
            if (this.animationTimer) {
                clearTimeout(this.animationTimer);
            }
            if (this.body) {
                this.element.appendChild(this.body);
            }
        }
        else {
            this.animationTimer = setTimeout(() => {
                var _a;
                (_a = this.body) === null || _a === void 0 ? void 0 : _a.remove();
            }, 200);
        }
        this._onDidChange.fire(expanded ? { size: this.width } : {});
        this._onDidChangeExpansionState.fire(expanded);
    }
    layout(size, orthogonalSize) {
        this._size = size;
        this._orthogonalSize = orthogonalSize;
        const [width, height] = this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_4__.Orientation.HORIZONTAL
            ? [size, orthogonalSize]
            : [orthogonalSize, size];
        if (this.isExpanded()) {
            this.expandedSize = width;
        }
        super.layout(width, height);
    }
    init(parameters) {
        var _a, _b;
        super.init(parameters);
        if (typeof parameters.minimumBodySize === 'number') {
            this.minimumBodySize = parameters.minimumBodySize;
        }
        if (typeof parameters.maximumBodySize === 'number') {
            this.maximumBodySize = parameters.maximumBodySize;
        }
        this.bodyPart = this.getBodyComponent();
        this.headerPart = this.getHeaderComponent();
        this.bodyPart.init(Object.assign(Object.assign({}, parameters), { api: this.api }));
        this.headerPart.init(Object.assign(Object.assign({}, parameters), { api: this.api }));
        (_a = this.body) === null || _a === void 0 ? void 0 : _a.append(this.bodyPart.element);
        (_b = this.header) === null || _b === void 0 ? void 0 : _b.append(this.headerPart.element);
        if (typeof parameters.isExpanded === 'boolean') {
            this.setExpanded(parameters.isExpanded);
        }
    }
    toJSON() {
        const params = this._params;
        return Object.assign(Object.assign({}, super.toJSON()), { headerComponent: this.headerComponent, title: params.title });
    }
    renderOnce() {
        this.header = document.createElement('div');
        this.header.tabIndex = 0;
        this.header.className = 'dv-pane-header';
        this.header.style.height = `${this.headerSize}px`;
        this.header.style.lineHeight = `${this.headerSize}px`;
        this.header.style.minHeight = `${this.headerSize}px`;
        this.header.style.maxHeight = `${this.headerSize}px`;
        this.element.appendChild(this.header);
        this.body = document.createElement('div');
        this.body.className = 'dv-pane-body';
        this.element.appendChild(this.body);
    }
    // TODO slightly hacky by-pass of the component to create a body and header component
    getComponent() {
        return {
            update: (params) => {
                var _a, _b;
                (_a = this.bodyPart) === null || _a === void 0 ? void 0 : _a.update({ params });
                (_b = this.headerPart) === null || _b === void 0 ? void 0 : _b.update({ params });
            },
            dispose: () => {
                var _a, _b;
                (_a = this.bodyPart) === null || _a === void 0 ? void 0 : _a.dispose();
                (_b = this.headerPart) === null || _b === void 0 ? void 0 : _b.dispose();
            },
        };
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/popoutWindow.js":
/*!*************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/popoutWindow.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PopoutWindow: () => (/* binding */ PopoutWindow)
/* harmony export */ });
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class PopoutWindow extends _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable {
    get window() {
        var _a, _b;
        return (_b = (_a = this._window) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : null;
    }
    constructor(target, className, options) {
        super();
        this.target = target;
        this.className = className;
        this.options = options;
        this._onWillClose = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onWillClose = this._onWillClose.event;
        this._onDidClose = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidClose = this._onDidClose.event;
        this._window = null;
        this.addDisposables(this._onWillClose, this._onDidClose, {
            dispose: () => {
                this.close();
            },
        });
    }
    dimensions() {
        if (!this._window) {
            return null;
        }
        const left = this._window.value.screenX;
        const top = this._window.value.screenY;
        const width = this._window.value.innerWidth;
        const height = this._window.value.innerHeight;
        return { top, left, width, height };
    }
    close() {
        var _a, _b;
        if (this._window) {
            this._onWillClose.fire();
            (_b = (_a = this.options).onWillClose) === null || _b === void 0 ? void 0 : _b.call(_a, {
                id: this.target,
                window: this._window.value,
            });
            this._window.disposable.dispose();
            this._window = null;
            this._onDidClose.fire();
        }
    }
    open() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            if (this._window) {
                throw new Error('instance of popout window is already open');
            }
            const url = `${this.options.url}`;
            const features = Object.entries({
                top: this.options.top,
                left: this.options.left,
                width: this.options.width,
                height: this.options.height,
            })
                .map(([key, value]) => `${key}=${value}`)
                .join(',');
            /**
             * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/open
             */
            const externalWindow = window.open(url, this.target, features);
            if (!externalWindow) {
                /**
                 * Popup blocked
                 */
                return null;
            }
            const disposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable();
            this._window = { value: externalWindow, disposable };
            disposable.addDisposables(_lifecycle__WEBPACK_IMPORTED_MODULE_2__.Disposable.from(() => {
                externalWindow.close();
            }), (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableWindowListener)(window, 'beforeunload', () => {
                /**
                 * before the main window closes we should close this popup too
                 * to be good citizens
                 *
                 * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event
                 */
                this.close();
            }));
            const container = this.createPopoutWindowContainer();
            if (this.className) {
                container.classList.add(this.className);
            }
            (_b = (_a = this.options).onDidOpen) === null || _b === void 0 ? void 0 : _b.call(_a, {
                id: this.target,
                window: externalWindow,
            });
            return new Promise((resolve, reject) => {
                externalWindow.addEventListener('unload', (e) => {
                    // if page fails to load before unloading
                    // this.close();
                });
                externalWindow.addEventListener('load', () => {
                    /**
                     * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event
                     */
                    try {
                        const externalDocument = externalWindow.document;
                        externalDocument.title = document.title;
                        externalDocument.body.appendChild(container);
                        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.addStyles)(externalDocument, window.document.styleSheets);
                        /**
                         * beforeunload must be registered after load for reasons I could not determine
                         * otherwise the beforeunload event will not fire when the window is closed
                         */
                        (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableWindowListener)(externalWindow, 'beforeunload', () => {
                            /**
                             * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event
                             */
                            this.close();
                        });
                        resolve(container);
                    }
                    catch (err) {
                        // only except this is the DOM isn't setup. e.g. in a in correctly configured test
                        reject(err);
                    }
                });
            });
        });
    }
    createPopoutWindowContainer() {
        const el = document.createElement('div');
        el.classList.add('dv-popout-window');
        el.id = 'dv-popout-window';
        el.style.position = 'absolute';
        el.style.width = '100%';
        el.style.height = '100%';
        el.style.top = '0px';
        el.style.left = '0px';
        return el;
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/resizable.js":
/*!**********************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/resizable.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Resizable: () => (/* binding */ Resizable)
/* harmony export */ });
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");


class Resizable extends _lifecycle__WEBPACK_IMPORTED_MODULE_1__.CompositeDisposable {
    get element() {
        return this._element;
    }
    get disableResizing() {
        return this._disableResizing;
    }
    set disableResizing(value) {
        this._disableResizing = value;
    }
    constructor(parentElement, disableResizing = false) {
        super();
        this._disableResizing = disableResizing;
        this._element = parentElement;
        this.addDisposables((0,_dom__WEBPACK_IMPORTED_MODULE_0__.watchElementResize)(this._element, (entry) => {
            if (this.isDisposed) {
                /**
                 * resize is delayed through requestAnimationFrame so there is a small chance
                 * the component has already been disposed of
                 */
                return;
            }
            if (this.disableResizing) {
                return;
            }
            if (!this._element.offsetParent) {
                /**
                 * offsetParent === null is equivalent to display: none being set on the element or one
                 * of it's parents. In the display: none case the size will become (0, 0) which we do
                 * not want to propagate.
                 *
                 * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent
                 *
                 * You could use checkVisibility() but at the time of writing it's not supported across
                 * all Browsers
                 *
                 * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/checkVisibility
                 */
                return;
            }
            if (!(0,_dom__WEBPACK_IMPORTED_MODULE_0__.isInDocument)(this._element)) {
                /**
                 * since the event is dispatched through requestAnimationFrame there is a small chance
                 * the component is no longer attached to the DOM, if that is the case the dimensions
                 * are mostly likely all zero and meaningless. we should skip this case.
                 */
                return;
            }
            const { width, height } = entry.contentRect;
            this.layout(width, height);
        }));
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/splitview/options.js":
/*!******************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/splitview/options.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PROPERTY_KEYS_SPLITVIEW: () => (/* binding */ PROPERTY_KEYS_SPLITVIEW)
/* harmony export */ });
const PROPERTY_KEYS_SPLITVIEW = (() => {
    /**
     * by readong the keys from an empty value object TypeScript will error
     * when we add or remove new properties to `DockviewOptions`
     */
    const properties = {
        orientation: undefined,
        descriptor: undefined,
        proportionalLayout: undefined,
        styles: undefined,
        margin: undefined,
        disableAutoResizing: undefined,
        className: undefined,
    };
    return Object.keys(properties);
})();


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/splitview/splitview.js":
/*!********************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/splitview/splitview.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LayoutPriority: () => (/* binding */ LayoutPriority),
/* harmony export */   Orientation: () => (/* binding */ Orientation),
/* harmony export */   SashState: () => (/* binding */ SashState),
/* harmony export */   Sizing: () => (/* binding */ Sizing),
/* harmony export */   Splitview: () => (/* binding */ Splitview)
/* harmony export */ });
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _array__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../array */ "./node_modules/dockview-core/dist/esm/array.js");
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math */ "./node_modules/dockview-core/dist/esm/math.js");
/* harmony import */ var _viewItem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./viewItem */ "./node_modules/dockview-core/dist/esm/splitview/viewItem.js");
/*---------------------------------------------------------------------------------------------
 * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:
 * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/splitview
 *--------------------------------------------------------------------------------------------*/





var Orientation;
(function (Orientation) {
    Orientation["HORIZONTAL"] = "HORIZONTAL";
    Orientation["VERTICAL"] = "VERTICAL";
})(Orientation || (Orientation = {}));
var SashState;
(function (SashState) {
    SashState[SashState["MAXIMUM"] = 0] = "MAXIMUM";
    SashState[SashState["MINIMUM"] = 1] = "MINIMUM";
    SashState[SashState["DISABLED"] = 2] = "DISABLED";
    SashState[SashState["ENABLED"] = 3] = "ENABLED";
})(SashState || (SashState = {}));
var LayoutPriority;
(function (LayoutPriority) {
    LayoutPriority["Low"] = "low";
    LayoutPriority["High"] = "high";
    LayoutPriority["Normal"] = "normal";
})(LayoutPriority || (LayoutPriority = {}));
var Sizing;
(function (Sizing) {
    Sizing.Distribute = { type: 'distribute' };
    function Split(index) {
        return { type: 'split', index };
    }
    Sizing.Split = Split;
    function Invisible(cachedVisibleSize) {
        return { type: 'invisible', cachedVisibleSize };
    }
    Sizing.Invisible = Invisible;
})(Sizing || (Sizing = {}));
class Splitview {
    get contentSize() {
        return this._contentSize;
    }
    get size() {
        return this._size;
    }
    set size(value) {
        this._size = value;
    }
    get orthogonalSize() {
        return this._orthogonalSize;
    }
    set orthogonalSize(value) {
        this._orthogonalSize = value;
    }
    get length() {
        return this.viewItems.length;
    }
    get proportions() {
        return this._proportions ? [...this._proportions] : undefined;
    }
    get orientation() {
        return this._orientation;
    }
    set orientation(value) {
        this._orientation = value;
        const tmp = this.size;
        this.size = this.orthogonalSize;
        this.orthogonalSize = tmp;
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.removeClasses)(this.element, 'dv-horizontal', 'dv-vertical');
        this.element.classList.add(this.orientation == Orientation.HORIZONTAL
            ? 'dv-horizontal'
            : 'dv-vertical');
    }
    get minimumSize() {
        return this.viewItems.reduce((r, item) => r + item.minimumSize, 0);
    }
    get maximumSize() {
        return this.length === 0
            ? Number.POSITIVE_INFINITY
            : this.viewItems.reduce((r, item) => r + item.maximumSize, 0);
    }
    get startSnappingEnabled() {
        return this._startSnappingEnabled;
    }
    set startSnappingEnabled(startSnappingEnabled) {
        if (this._startSnappingEnabled === startSnappingEnabled) {
            return;
        }
        this._startSnappingEnabled = startSnappingEnabled;
        this.updateSashEnablement();
    }
    get endSnappingEnabled() {
        return this._endSnappingEnabled;
    }
    set endSnappingEnabled(endSnappingEnabled) {
        if (this._endSnappingEnabled === endSnappingEnabled) {
            return;
        }
        this._endSnappingEnabled = endSnappingEnabled;
        this.updateSashEnablement();
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = value;
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(this.element, 'dv-splitview-disabled', value);
    }
    get margin() {
        return this._margin;
    }
    set margin(value) {
        this._margin = value;
    }
    constructor(container, options) {
        var _a, _b;
        this.container = container;
        this.viewItems = [];
        this.sashes = [];
        this._size = 0;
        this._orthogonalSize = 0;
        this._contentSize = 0;
        this._proportions = undefined;
        this._startSnappingEnabled = true;
        this._endSnappingEnabled = true;
        this._disabled = false;
        this._margin = 0;
        this._onDidSashEnd = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidSashEnd = this._onDidSashEnd.event;
        this._onDidAddView = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidAddView = this._onDidAddView.event;
        this._onDidRemoveView = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidRemoveView = this._onDidRemoveView.event;
        this.resize = (index, delta, sizes = this.viewItems.map((x) => x.size), lowPriorityIndexes, highPriorityIndexes, overloadMinDelta = Number.NEGATIVE_INFINITY, overloadMaxDelta = Number.POSITIVE_INFINITY, snapBefore, snapAfter) => {
            if (index < 0 || index > this.viewItems.length) {
                return 0;
            }
            const upIndexes = (0,_math__WEBPACK_IMPORTED_MODULE_3__.range)(index, -1);
            const downIndexes = (0,_math__WEBPACK_IMPORTED_MODULE_3__.range)(index + 1, this.viewItems.length);
            //
            if (highPriorityIndexes) {
                for (const i of highPriorityIndexes) {
                    (0,_array__WEBPACK_IMPORTED_MODULE_2__.pushToStart)(upIndexes, i);
                    (0,_array__WEBPACK_IMPORTED_MODULE_2__.pushToStart)(downIndexes, i);
                }
            }
            if (lowPriorityIndexes) {
                for (const i of lowPriorityIndexes) {
                    (0,_array__WEBPACK_IMPORTED_MODULE_2__.pushToEnd)(upIndexes, i);
                    (0,_array__WEBPACK_IMPORTED_MODULE_2__.pushToEnd)(downIndexes, i);
                }
            }
            //
            const upItems = upIndexes.map((i) => this.viewItems[i]);
            const upSizes = upIndexes.map((i) => sizes[i]);
            //
            const downItems = downIndexes.map((i) => this.viewItems[i]);
            const downSizes = downIndexes.map((i) => sizes[i]);
            //
            const minDeltaUp = upIndexes.reduce((_, i) => _ + this.viewItems[i].minimumSize - sizes[i], 0);
            const maxDeltaUp = upIndexes.reduce((_, i) => _ + this.viewItems[i].maximumSize - sizes[i], 0);
            //
            const maxDeltaDown = downIndexes.length === 0
                ? Number.POSITIVE_INFINITY
                : downIndexes.reduce((_, i) => _ + sizes[i] - this.viewItems[i].minimumSize, 0);
            const minDeltaDown = downIndexes.length === 0
                ? Number.NEGATIVE_INFINITY
                : downIndexes.reduce((_, i) => _ + sizes[i] - this.viewItems[i].maximumSize, 0);
            //
            const minDelta = Math.max(minDeltaUp, minDeltaDown);
            const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);
            //
            let snapped = false;
            if (snapBefore) {
                const snapView = this.viewItems[snapBefore.index];
                const visible = delta >= snapBefore.limitDelta;
                snapped = visible !== snapView.visible;
                snapView.setVisible(visible, snapBefore.size);
            }
            if (!snapped && snapAfter) {
                const snapView = this.viewItems[snapAfter.index];
                const visible = delta < snapAfter.limitDelta;
                snapped = visible !== snapView.visible;
                snapView.setVisible(visible, snapAfter.size);
            }
            if (snapped) {
                return this.resize(index, delta, sizes, lowPriorityIndexes, highPriorityIndexes, overloadMinDelta, overloadMaxDelta);
            }
            //
            const tentativeDelta = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(delta, minDelta, maxDelta);
            let actualDelta = 0;
            //
            let deltaUp = tentativeDelta;
            for (let i = 0; i < upItems.length; i++) {
                const item = upItems[i];
                const size = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(upSizes[i] + deltaUp, item.minimumSize, item.maximumSize);
                const viewDelta = size - upSizes[i];
                actualDelta += viewDelta;
                deltaUp -= viewDelta;
                item.size = size;
            }
            //
            let deltaDown = actualDelta;
            for (let i = 0; i < downItems.length; i++) {
                const item = downItems[i];
                const size = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(downSizes[i] - deltaDown, item.minimumSize, item.maximumSize);
                const viewDelta = size - downSizes[i];
                deltaDown += viewDelta;
                item.size = size;
            }
            //
            return delta;
        };
        this._orientation = (_a = options.orientation) !== null && _a !== void 0 ? _a : Orientation.VERTICAL;
        this.element = this.createContainer();
        this.margin = (_b = options.margin) !== null && _b !== void 0 ? _b : 0;
        this.proportionalLayout =
            options.proportionalLayout === undefined
                ? true
                : !!options.proportionalLayout;
        this.viewContainer = this.createViewContainer();
        this.sashContainer = this.createSashContainer();
        this.element.appendChild(this.sashContainer);
        this.element.appendChild(this.viewContainer);
        this.container.appendChild(this.element);
        this.style(options.styles);
        // We have an existing set of view, add them now
        if (options.descriptor) {
            this._size = options.descriptor.size;
            options.descriptor.views.forEach((viewDescriptor, index) => {
                const sizing = viewDescriptor.visible === undefined ||
                    viewDescriptor.visible
                    ? viewDescriptor.size
                    : {
                        type: 'invisible',
                        cachedVisibleSize: viewDescriptor.size,
                    };
                const view = viewDescriptor.view;
                this.addView(view, sizing, index, true
                // true skip layout
                );
            });
            // Initialize content size and proportions for first layout
            this._contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);
            this.saveProportions();
        }
    }
    style(styles) {
        if ((styles === null || styles === void 0 ? void 0 : styles.separatorBorder) === 'transparent') {
            (0,_dom__WEBPACK_IMPORTED_MODULE_0__.removeClasses)(this.element, 'dv-separator-border');
            this.element.style.removeProperty('--dv-separator-border');
        }
        else {
            (0,_dom__WEBPACK_IMPORTED_MODULE_0__.addClasses)(this.element, 'dv-separator-border');
            if (styles === null || styles === void 0 ? void 0 : styles.separatorBorder) {
                this.element.style.setProperty('--dv-separator-border', styles.separatorBorder);
            }
        }
    }
    isViewVisible(index) {
        if (index < 0 || index >= this.viewItems.length) {
            throw new Error('Index out of bounds');
        }
        const viewItem = this.viewItems[index];
        return viewItem.visible;
    }
    setViewVisible(index, visible) {
        if (index < 0 || index >= this.viewItems.length) {
            throw new Error('Index out of bounds');
        }
        const viewItem = this.viewItems[index];
        viewItem.setVisible(visible, viewItem.size);
        this.distributeEmptySpace(index);
        this.layoutViews();
        this.saveProportions();
    }
    getViewSize(index) {
        if (index < 0 || index >= this.viewItems.length) {
            return -1;
        }
        return this.viewItems[index].size;
    }
    resizeView(index, size) {
        if (index < 0 || index >= this.viewItems.length) {
            return;
        }
        const indexes = (0,_math__WEBPACK_IMPORTED_MODULE_3__.range)(this.viewItems.length).filter((i) => i !== index);
        const lowPriorityIndexes = [
            ...indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.Low),
            index,
        ];
        const highPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.High);
        const item = this.viewItems[index];
        size = Math.round(size);
        size = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(size, item.minimumSize, Math.min(item.maximumSize, this._size));
        item.size = size;
        this.relayout(lowPriorityIndexes, highPriorityIndexes);
    }
    getViews() {
        return this.viewItems.map((x) => x.view);
    }
    onDidChange(item, size) {
        const index = this.viewItems.indexOf(item);
        if (index < 0 || index >= this.viewItems.length) {
            return;
        }
        size = typeof size === 'number' ? size : item.size;
        size = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(size, item.minimumSize, item.maximumSize);
        item.size = size;
        const indexes = (0,_math__WEBPACK_IMPORTED_MODULE_3__.range)(this.viewItems.length).filter((i) => i !== index);
        const lowPriorityIndexes = [
            ...indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.Low),
            index,
        ];
        const highPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.High);
        /**
         * add this view we are changing to the low-index list since we have determined the size
         * here and don't want it changed
         */
        this.relayout([...lowPriorityIndexes, index], highPriorityIndexes);
    }
    addView(view, size = { type: 'distribute' }, index = this.viewItems.length, skipLayout) {
        const container = document.createElement('div');
        container.className = 'dv-view';
        container.appendChild(view.element);
        let viewSize;
        if (typeof size === 'number') {
            viewSize = size;
        }
        else if (size.type === 'split') {
            viewSize = this.getViewSize(size.index) / 2;
        }
        else if (size.type === 'invisible') {
            viewSize = { cachedVisibleSize: size.cachedVisibleSize };
        }
        else {
            viewSize = view.minimumSize;
        }
        const disposable = view.onDidChange((newSize) => this.onDidChange(viewItem, newSize.size));
        const viewItem = new _viewItem__WEBPACK_IMPORTED_MODULE_4__.ViewItem(container, view, viewSize, {
            dispose: () => {
                disposable.dispose();
                this.viewContainer.removeChild(container);
            },
        });
        if (index === this.viewItems.length) {
            this.viewContainer.appendChild(container);
        }
        else {
            this.viewContainer.insertBefore(container, this.viewContainer.children.item(index));
        }
        this.viewItems.splice(index, 0, viewItem);
        if (this.viewItems.length > 1) {
            //add sash
            const sash = document.createElement('div');
            sash.className = 'dv-sash';
            const onPointerStart = (event) => {
                for (const item of this.viewItems) {
                    item.enabled = false;
                }
                const iframes = (0,_dom__WEBPACK_IMPORTED_MODULE_0__.disableIframePointEvents)();
                const start = this._orientation === Orientation.HORIZONTAL
                    ? event.clientX
                    : event.clientY;
                const sashIndex = (0,_array__WEBPACK_IMPORTED_MODULE_2__.firstIndex)(this.sashes, (s) => s.container === sash);
                //
                const sizes = this.viewItems.map((x) => x.size);
                //
                let snapBefore;
                let snapAfter;
                const upIndexes = (0,_math__WEBPACK_IMPORTED_MODULE_3__.range)(sashIndex, -1);
                const downIndexes = (0,_math__WEBPACK_IMPORTED_MODULE_3__.range)(sashIndex + 1, this.viewItems.length);
                const minDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].minimumSize - sizes[i]), 0);
                const maxDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].viewMaximumSize - sizes[i]), 0);
                const maxDeltaDown = downIndexes.length === 0
                    ? Number.POSITIVE_INFINITY
                    : downIndexes.reduce((r, i) => r +
                        (sizes[i] - this.viewItems[i].minimumSize), 0);
                const minDeltaDown = downIndexes.length === 0
                    ? Number.NEGATIVE_INFINITY
                    : downIndexes.reduce((r, i) => r +
                        (sizes[i] -
                            this.viewItems[i].viewMaximumSize), 0);
                const minDelta = Math.max(minDeltaUp, minDeltaDown);
                const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);
                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);
                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);
                if (typeof snapBeforeIndex === 'number') {
                    const snappedViewItem = this.viewItems[snapBeforeIndex];
                    const halfSize = Math.floor(snappedViewItem.viewMinimumSize / 2);
                    snapBefore = {
                        index: snapBeforeIndex,
                        limitDelta: snappedViewItem.visible
                            ? minDelta - halfSize
                            : minDelta + halfSize,
                        size: snappedViewItem.size,
                    };
                }
                if (typeof snapAfterIndex === 'number') {
                    const snappedViewItem = this.viewItems[snapAfterIndex];
                    const halfSize = Math.floor(snappedViewItem.viewMinimumSize / 2);
                    snapAfter = {
                        index: snapAfterIndex,
                        limitDelta: snappedViewItem.visible
                            ? maxDelta + halfSize
                            : maxDelta - halfSize,
                        size: snappedViewItem.size,
                    };
                }
                const onPointerMove = (event) => {
                    const current = this._orientation === Orientation.HORIZONTAL
                        ? event.clientX
                        : event.clientY;
                    const delta = current - start;
                    this.resize(sashIndex, delta, sizes, undefined, undefined, minDelta, maxDelta, snapBefore, snapAfter);
                    this.distributeEmptySpace();
                    this.layoutViews();
                };
                const end = () => {
                    for (const item of this.viewItems) {
                        item.enabled = true;
                    }
                    iframes.release();
                    this.saveProportions();
                    document.removeEventListener('pointermove', onPointerMove);
                    document.removeEventListener('pointerup', end);
                    document.removeEventListener('pointercancel', end);
                    this._onDidSashEnd.fire(undefined);
                };
                document.addEventListener('pointermove', onPointerMove);
                document.addEventListener('pointerup', end);
                document.addEventListener('pointercancel', end);
            };
            sash.addEventListener('pointerdown', onPointerStart);
            const sashItem = {
                container: sash,
                disposable: () => {
                    sash.removeEventListener('pointerdown', onPointerStart);
                    this.sashContainer.removeChild(sash);
                },
            };
            this.sashContainer.appendChild(sash);
            this.sashes.push(sashItem);
        }
        if (!skipLayout) {
            this.relayout([index]);
        }
        if (!skipLayout &&
            typeof size !== 'number' &&
            size.type === 'distribute') {
            this.distributeViewSizes();
        }
        this._onDidAddView.fire(view);
    }
    distributeViewSizes() {
        const flexibleViewItems = [];
        let flexibleSize = 0;
        for (const item of this.viewItems) {
            if (item.maximumSize - item.minimumSize > 0) {
                flexibleViewItems.push(item);
                flexibleSize += item.size;
            }
        }
        const size = Math.floor(flexibleSize / flexibleViewItems.length);
        for (const item of flexibleViewItems) {
            item.size = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(size, item.minimumSize, item.maximumSize);
        }
        const indexes = (0,_math__WEBPACK_IMPORTED_MODULE_3__.range)(this.viewItems.length);
        const lowPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.Low);
        const highPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.High);
        this.relayout(lowPriorityIndexes, highPriorityIndexes);
    }
    removeView(index, sizing, skipLayout = false) {
        // Remove view
        const viewItem = this.viewItems.splice(index, 1)[0];
        viewItem.dispose();
        // Remove sash
        if (this.viewItems.length >= 1) {
            const sashIndex = Math.max(index - 1, 0);
            const sashItem = this.sashes.splice(sashIndex, 1)[0];
            sashItem.disposable();
        }
        if (!skipLayout) {
            this.relayout();
        }
        if (sizing && sizing.type === 'distribute') {
            this.distributeViewSizes();
        }
        this._onDidRemoveView.fire(viewItem.view);
        return viewItem.view;
    }
    getViewCachedVisibleSize(index) {
        if (index < 0 || index >= this.viewItems.length) {
            throw new Error('Index out of bounds');
        }
        const viewItem = this.viewItems[index];
        return viewItem.cachedVisibleSize;
    }
    moveView(from, to) {
        const cachedVisibleSize = this.getViewCachedVisibleSize(from);
        const sizing = typeof cachedVisibleSize === 'undefined'
            ? this.getViewSize(from)
            : Sizing.Invisible(cachedVisibleSize);
        const view = this.removeView(from, undefined, true);
        this.addView(view, sizing, to);
    }
    layout(size, orthogonalSize) {
        const previousSize = Math.max(this.size, this._contentSize);
        this.size = size;
        this.orthogonalSize = orthogonalSize;
        if (!this.proportions) {
            const indexes = (0,_math__WEBPACK_IMPORTED_MODULE_3__.range)(this.viewItems.length);
            const lowPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.Low);
            const highPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.High);
            this.resize(this.viewItems.length - 1, size - previousSize, undefined, lowPriorityIndexes, highPriorityIndexes);
        }
        else {
            let total = 0;
            for (let i = 0; i < this.viewItems.length; i++) {
                const item = this.viewItems[i];
                const proportion = this.proportions[i];
                if (typeof proportion === 'number') {
                    total += proportion;
                }
                else {
                    size -= item.size;
                }
            }
            for (let i = 0; i < this.viewItems.length; i++) {
                const item = this.viewItems[i];
                const proportion = this.proportions[i];
                if (typeof proportion === 'number' && total > 0) {
                    item.size = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(Math.round((proportion * size) / total), item.minimumSize, item.maximumSize);
                }
            }
        }
        this.distributeEmptySpace();
        this.layoutViews();
    }
    relayout(lowPriorityIndexes, highPriorityIndexes) {
        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);
        this.resize(this.viewItems.length - 1, this._size - contentSize, undefined, lowPriorityIndexes, highPriorityIndexes);
        this.distributeEmptySpace();
        this.layoutViews();
        this.saveProportions();
    }
    distributeEmptySpace(lowPriorityIndex) {
        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);
        let emptyDelta = this.size - contentSize;
        const indexes = (0,_math__WEBPACK_IMPORTED_MODULE_3__.range)(this.viewItems.length - 1, -1);
        const lowPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.Low);
        const highPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.High);
        for (const index of highPriorityIndexes) {
            (0,_array__WEBPACK_IMPORTED_MODULE_2__.pushToStart)(indexes, index);
        }
        for (const index of lowPriorityIndexes) {
            (0,_array__WEBPACK_IMPORTED_MODULE_2__.pushToEnd)(indexes, index);
        }
        if (typeof lowPriorityIndex === 'number') {
            (0,_array__WEBPACK_IMPORTED_MODULE_2__.pushToEnd)(indexes, lowPriorityIndex);
        }
        for (let i = 0; emptyDelta !== 0 && i < indexes.length; i++) {
            const item = this.viewItems[indexes[i]];
            const size = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(item.size + emptyDelta, item.minimumSize, item.maximumSize);
            const viewDelta = size - item.size;
            emptyDelta -= viewDelta;
            item.size = size;
        }
    }
    saveProportions() {
        if (this.proportionalLayout && this._contentSize > 0) {
            this._proportions = this.viewItems.map((i) => i.visible ? i.size / this._contentSize : undefined);
        }
    }
    /**
     * Margin explain:
     *
     * For `n` views in a splitview there will be `n-1` margins `m`.
     *
     * To fit the margins each view must reduce in size by `(m * (n - 1)) / n`.
     *
     * For each view `i` the offet must be adjusted by `m * i/(n - 1)`.
     */
    layoutViews() {
        this._contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);
        this.updateSashEnablement();
        if (this.viewItems.length === 0) {
            return;
        }
        const visibleViewItems = this.viewItems.filter((i) => i.visible);
        const sashCount = Math.max(0, visibleViewItems.length - 1);
        const marginReducedSize = (this.margin * sashCount) / Math.max(1, visibleViewItems.length);
        let totalLeftOffset = 0;
        const viewLeftOffsets = [];
        const sashWidth = 4; // hardcoded in css
        const runningVisiblePanelCount = this.viewItems.reduce((arr, viewItem, i) => {
            const flag = viewItem.visible ? 1 : 0;
            if (i === 0) {
                arr.push(flag);
            }
            else {
                arr.push(arr[i - 1] + flag);
            }
            return arr;
        }, []);
        // calculate both view and cash positions
        this.viewItems.forEach((view, i) => {
            totalLeftOffset += this.viewItems[i].size;
            viewLeftOffsets.push(totalLeftOffset);
            const size = view.visible ? view.size - marginReducedSize : 0;
            const visiblePanelsBeforeThisView = Math.max(0, runningVisiblePanelCount[i] - 1);
            const offset = i === 0 || visiblePanelsBeforeThisView === 0
                ? 0
                : viewLeftOffsets[i - 1] +
                    (visiblePanelsBeforeThisView / sashCount) *
                        marginReducedSize;
            if (i < this.viewItems.length - 1) {
                // calculate sash position
                const newSize = view.visible
                    ? offset + size - sashWidth / 2 + this.margin / 2
                    : offset;
                if (this._orientation === Orientation.HORIZONTAL) {
                    this.sashes[i].container.style.left = `${newSize}px`;
                    this.sashes[i].container.style.top = `0px`;
                }
                if (this._orientation === Orientation.VERTICAL) {
                    this.sashes[i].container.style.left = `0px`;
                    this.sashes[i].container.style.top = `${newSize}px`;
                }
            }
            // calculate view position
            if (this._orientation === Orientation.HORIZONTAL) {
                view.container.style.width = `${size}px`;
                view.container.style.left = `${offset}px`;
                view.container.style.top = '';
                view.container.style.height = '';
            }
            if (this._orientation === Orientation.VERTICAL) {
                view.container.style.height = `${size}px`;
                view.container.style.top = `${offset}px`;
                view.container.style.width = '';
                view.container.style.left = '';
            }
            view.view.layout(view.size - marginReducedSize, this._orthogonalSize);
        });
    }
    findFirstSnapIndex(indexes) {
        // visible views first
        for (const index of indexes) {
            const viewItem = this.viewItems[index];
            if (!viewItem.visible) {
                continue;
            }
            if (viewItem.snap) {
                return index;
            }
        }
        // then, hidden views
        for (const index of indexes) {
            const viewItem = this.viewItems[index];
            if (viewItem.visible &&
                viewItem.maximumSize - viewItem.minimumSize > 0) {
                return undefined;
            }
            if (!viewItem.visible && viewItem.snap) {
                return index;
            }
        }
        return undefined;
    }
    updateSashEnablement() {
        let previous = false;
        const collapsesDown = this.viewItems.map((i) => (previous = i.size - i.minimumSize > 0 || previous));
        previous = false;
        const expandsDown = this.viewItems.map((i) => (previous = i.maximumSize - i.size > 0 || previous));
        const reverseViews = [...this.viewItems].reverse();
        previous = false;
        const collapsesUp = reverseViews
            .map((i) => (previous = i.size - i.minimumSize > 0 || previous))
            .reverse();
        previous = false;
        const expandsUp = reverseViews
            .map((i) => (previous = i.maximumSize - i.size > 0 || previous))
            .reverse();
        let position = 0;
        for (let index = 0; index < this.sashes.length; index++) {
            const sash = this.sashes[index];
            const viewItem = this.viewItems[index];
            position += viewItem.size;
            const min = !(collapsesDown[index] && expandsUp[index + 1]);
            const max = !(expandsDown[index] && collapsesUp[index + 1]);
            if (min && max) {
                const upIndexes = (0,_math__WEBPACK_IMPORTED_MODULE_3__.range)(index, -1);
                const downIndexes = (0,_math__WEBPACK_IMPORTED_MODULE_3__.range)(index + 1, this.viewItems.length);
                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);
                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);
                const snappedBefore = typeof snapBeforeIndex === 'number' &&
                    !this.viewItems[snapBeforeIndex].visible;
                const snappedAfter = typeof snapAfterIndex === 'number' &&
                    !this.viewItems[snapAfterIndex].visible;
                if (snappedBefore &&
                    collapsesUp[index] &&
                    (position > 0 || this.startSnappingEnabled)) {
                    this.updateSash(sash, SashState.MINIMUM);
                }
                else if (snappedAfter &&
                    collapsesDown[index] &&
                    (position < this._contentSize || this.endSnappingEnabled)) {
                    this.updateSash(sash, SashState.MAXIMUM);
                }
                else {
                    this.updateSash(sash, SashState.DISABLED);
                }
            }
            else if (min && !max) {
                this.updateSash(sash, SashState.MINIMUM);
            }
            else if (!min && max) {
                this.updateSash(sash, SashState.MAXIMUM);
            }
            else {
                this.updateSash(sash, SashState.ENABLED);
            }
        }
    }
    updateSash(sash, state) {
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(sash.container, 'dv-disabled', state === SashState.DISABLED);
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(sash.container, 'dv-enabled', state === SashState.ENABLED);
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(sash.container, 'dv-maximum', state === SashState.MAXIMUM);
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(sash.container, 'dv-minimum', state === SashState.MINIMUM);
    }
    createViewContainer() {
        const element = document.createElement('div');
        element.className = 'dv-view-container';
        return element;
    }
    createSashContainer() {
        const element = document.createElement('div');
        element.className = 'dv-sash-container';
        return element;
    }
    createContainer() {
        const element = document.createElement('div');
        const orientationClassname = this._orientation === Orientation.HORIZONTAL
            ? 'dv-horizontal'
            : 'dv-vertical';
        element.className = `dv-split-view-container ${orientationClassname}`;
        return element;
    }
    dispose() {
        this._onDidSashEnd.dispose();
        this._onDidAddView.dispose();
        this._onDidRemoveView.dispose();
        for (let i = 0; i < this.element.children.length; i++) {
            if (this.element.children.item(i) === this.element) {
                this.element.removeChild(this.element);
                break;
            }
        }
        for (const viewItem of this.viewItems) {
            viewItem.dispose();
        }
        this.element.remove();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/splitview/splitviewComponent.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/splitview/splitviewComponent.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SplitviewComponent: () => (/* binding */ SplitviewComponent)
/* harmony export */ });
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _splitview__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./splitview */ "./node_modules/dockview-core/dist/esm/splitview/splitview.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _resizable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../resizable */ "./node_modules/dockview-core/dist/esm/resizable.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");





/**
 * A high-level implementation of splitview that works using 'panels'
 */
class SplitviewComponent extends _resizable__WEBPACK_IMPORTED_MODULE_3__.Resizable {
    get panels() {
        return this.splitview.getViews();
    }
    get options() {
        return this._options;
    }
    get length() {
        return this._panels.size;
    }
    get orientation() {
        return this.splitview.orientation;
    }
    get splitview() {
        return this._splitview;
    }
    set splitview(value) {
        this._splitview = value;
        this._splitviewChangeDisposable.value = new _lifecycle__WEBPACK_IMPORTED_MODULE_0__.CompositeDisposable(this._splitview.onDidSashEnd(() => {
            this._onDidLayoutChange.fire(undefined);
        }), this._splitview.onDidAddView((e) => this._onDidAddView.fire(e)), this._splitview.onDidRemoveView((e) => this._onDidRemoveView.fire(e)));
    }
    get minimumSize() {
        return this.splitview.minimumSize;
    }
    get maximumSize() {
        return this.splitview.maximumSize;
    }
    get height() {
        return this.splitview.orientation === _splitview__WEBPACK_IMPORTED_MODULE_1__.Orientation.HORIZONTAL
            ? this.splitview.orthogonalSize
            : this.splitview.size;
    }
    get width() {
        return this.splitview.orientation === _splitview__WEBPACK_IMPORTED_MODULE_1__.Orientation.HORIZONTAL
            ? this.splitview.size
            : this.splitview.orthogonalSize;
    }
    constructor(container, options) {
        var _a;
        super(document.createElement('div'), options.disableAutoResizing);
        this._splitviewChangeDisposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_0__.MutableDisposable();
        this._panels = new Map();
        this._onDidLayoutfromJSON = new _events__WEBPACK_IMPORTED_MODULE_2__.Emitter();
        this.onDidLayoutFromJSON = this._onDidLayoutfromJSON.event;
        this._onDidAddView = new _events__WEBPACK_IMPORTED_MODULE_2__.Emitter();
        this.onDidAddView = this._onDidAddView.event;
        this._onDidRemoveView = new _events__WEBPACK_IMPORTED_MODULE_2__.Emitter();
        this.onDidRemoveView = this._onDidRemoveView.event;
        this._onDidLayoutChange = new _events__WEBPACK_IMPORTED_MODULE_2__.Emitter();
        this.onDidLayoutChange = this._onDidLayoutChange.event;
        this.element.style.height = '100%';
        this.element.style.width = '100%';
        this._classNames = new _dom__WEBPACK_IMPORTED_MODULE_4__.Classnames(this.element);
        this._classNames.setClassNames((_a = options.className) !== null && _a !== void 0 ? _a : '');
        // the container is owned by the third-party, do not modify/delete it
        container.appendChild(this.element);
        this._options = options;
        this.splitview = new _splitview__WEBPACK_IMPORTED_MODULE_1__.Splitview(this.element, options);
        this.addDisposables(this._onDidAddView, this._onDidLayoutfromJSON, this._onDidRemoveView, this._onDidLayoutChange);
    }
    updateOptions(options) {
        var _a, _b;
        if ('className' in options) {
            this._classNames.setClassNames((_a = options.className) !== null && _a !== void 0 ? _a : '');
        }
        if ('disableResizing' in options) {
            this.disableResizing = (_b = options.disableAutoResizing) !== null && _b !== void 0 ? _b : false;
        }
        if (typeof options.orientation === 'string') {
            this.splitview.orientation = options.orientation;
        }
        this._options = Object.assign(Object.assign({}, this.options), options);
        this.splitview.layout(this.splitview.size, this.splitview.orthogonalSize);
    }
    focus() {
        var _a;
        (_a = this._activePanel) === null || _a === void 0 ? void 0 : _a.focus();
    }
    movePanel(from, to) {
        this.splitview.moveView(from, to);
    }
    setVisible(panel, visible) {
        const index = this.panels.indexOf(panel);
        this.splitview.setViewVisible(index, visible);
    }
    setActive(panel, skipFocus) {
        this._activePanel = panel;
        this.panels
            .filter((v) => v !== panel)
            .forEach((v) => {
            v.api._onDidActiveChange.fire({ isActive: false });
            if (!skipFocus) {
                v.focus();
            }
        });
        panel.api._onDidActiveChange.fire({ isActive: true });
        if (!skipFocus) {
            panel.focus();
        }
    }
    removePanel(panel, sizing) {
        const item = this._panels.get(panel.id);
        if (!item) {
            throw new Error(`unknown splitview panel ${panel.id}`);
        }
        item.dispose();
        this._panels.delete(panel.id);
        const index = this.panels.findIndex((_) => _ === panel);
        const removedView = this.splitview.removeView(index, sizing);
        removedView.dispose();
        const panels = this.panels;
        if (panels.length > 0) {
            this.setActive(panels[panels.length - 1]);
        }
    }
    getPanel(id) {
        return this.panels.find((view) => view.id === id);
    }
    addPanel(options) {
        var _a;
        if (this._panels.has(options.id)) {
            throw new Error(`panel ${options.id} already exists`);
        }
        const view = this.options.createComponent({
            id: options.id,
            name: options.component,
        });
        view.orientation = this.splitview.orientation;
        view.init({
            params: (_a = options.params) !== null && _a !== void 0 ? _a : {},
            minimumSize: options.minimumSize,
            maximumSize: options.maximumSize,
            snap: options.snap,
            priority: options.priority,
            accessor: this,
        });
        const size = typeof options.size === 'number' ? options.size : _splitview__WEBPACK_IMPORTED_MODULE_1__.Sizing.Distribute;
        const index = typeof options.index === 'number' ? options.index : undefined;
        this.splitview.addView(view, size, index);
        this.doAddView(view);
        this.setActive(view);
        return view;
    }
    layout(width, height) {
        const [size, orthogonalSize] = this.splitview.orientation === _splitview__WEBPACK_IMPORTED_MODULE_1__.Orientation.HORIZONTAL
            ? [width, height]
            : [height, width];
        this.splitview.layout(size, orthogonalSize);
    }
    doAddView(view) {
        const disposable = view.api.onDidFocusChange((event) => {
            if (!event.isFocused) {
                return;
            }
            this.setActive(view, true);
        });
        this._panels.set(view.id, disposable);
    }
    toJSON() {
        var _a;
        const views = this.splitview
            .getViews()
            .map((view, i) => {
            const size = this.splitview.getViewSize(i);
            return {
                size,
                data: view.toJSON(),
                snap: !!view.snap,
                priority: view.priority,
            };
        });
        return {
            views,
            activeView: (_a = this._activePanel) === null || _a === void 0 ? void 0 : _a.id,
            size: this.splitview.size,
            orientation: this.splitview.orientation,
        };
    }
    fromJSON(serializedSplitview) {
        this.clear();
        const { views, orientation, size, activeView } = serializedSplitview;
        const queue = [];
        // take note of the existing dimensions
        const width = this.width;
        const height = this.height;
        this.splitview = new _splitview__WEBPACK_IMPORTED_MODULE_1__.Splitview(this.element, {
            orientation,
            proportionalLayout: this.options.proportionalLayout,
            descriptor: {
                size,
                views: views.map((view) => {
                    const data = view.data;
                    if (this._panels.has(data.id)) {
                        throw new Error(`panel ${data.id} already exists`);
                    }
                    const panel = this.options.createComponent({
                        id: data.id,
                        name: data.component,
                    });
                    queue.push(() => {
                        var _a;
                        panel.init({
                            params: (_a = data.params) !== null && _a !== void 0 ? _a : {},
                            minimumSize: data.minimumSize,
                            maximumSize: data.maximumSize,
                            snap: view.snap,
                            priority: view.priority,
                            accessor: this,
                        });
                    });
                    panel.orientation = orientation;
                    this.doAddView(panel);
                    setTimeout(() => {
                        // the original onDidAddView events are missed since they are fired before we can subcribe to them
                        this._onDidAddView.fire(panel);
                    }, 0);
                    return { size: view.size, view: panel };
                }),
            },
        });
        this.layout(width, height);
        queue.forEach((f) => f());
        if (typeof activeView === 'string') {
            const panel = this.getPanel(activeView);
            if (panel) {
                this.setActive(panel);
            }
        }
        this._onDidLayoutfromJSON.fire();
    }
    clear() {
        for (const disposable of this._panels.values()) {
            disposable.dispose();
        }
        this._panels.clear();
        while (this.splitview.length > 0) {
            const view = this.splitview.removeView(0, _splitview__WEBPACK_IMPORTED_MODULE_1__.Sizing.Distribute, true);
            view.dispose();
        }
    }
    dispose() {
        for (const disposable of this._panels.values()) {
            disposable.dispose();
        }
        this._panels.clear();
        const views = this.splitview.getViews();
        this._splitviewChangeDisposable.dispose();
        this.splitview.dispose();
        for (const view of views) {
            view.dispose();
        }
        super.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/splitview/splitviewPanel.js":
/*!*************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/splitview/splitviewPanel.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SplitviewPanel: () => (/* binding */ SplitviewPanel)
/* harmony export */ });
/* harmony import */ var _gridview_basePanelView__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../gridview/basePanelView */ "./node_modules/dockview-core/dist/esm/gridview/basePanelView.js");
/* harmony import */ var _api_splitviewPanelApi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../api/splitviewPanelApi */ "./node_modules/dockview-core/dist/esm/api/splitviewPanelApi.js");
/* harmony import */ var _splitview__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./splitview */ "./node_modules/dockview-core/dist/esm/splitview/splitview.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");




class SplitviewPanel extends _gridview_basePanelView__WEBPACK_IMPORTED_MODULE_0__.BasePanelView {
    get priority() {
        return this._priority;
    }
    set orientation(value) {
        this._orientation = value;
    }
    get orientation() {
        return this._orientation;
    }
    get minimumSize() {
        const size = typeof this._minimumSize === 'function'
            ? this._minimumSize()
            : this._minimumSize;
        if (size !== this._evaluatedMinimumSize) {
            this._evaluatedMinimumSize = size;
            this.updateConstraints();
        }
        return size;
    }
    get maximumSize() {
        const size = typeof this._maximumSize === 'function'
            ? this._maximumSize()
            : this._maximumSize;
        if (size !== this._evaluatedMaximumSize) {
            this._evaluatedMaximumSize = size;
            this.updateConstraints();
        }
        return size;
    }
    get snap() {
        return this._snap;
    }
    constructor(id, componentName) {
        super(id, componentName, new _api_splitviewPanelApi__WEBPACK_IMPORTED_MODULE_1__.SplitviewPanelApiImpl(id, componentName));
        this._evaluatedMinimumSize = 0;
        this._evaluatedMaximumSize = Number.POSITIVE_INFINITY;
        this._minimumSize = 0;
        this._maximumSize = Number.POSITIVE_INFINITY;
        this._snap = false;
        this._onDidChange = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onDidChange = this._onDidChange.event;
        this.api.initialize(this);
        this.addDisposables(this._onDidChange, this.api.onWillVisibilityChange((event) => {
            const { isVisible } = event;
            const { accessor } = this._params;
            accessor.setVisible(this, isVisible);
        }), this.api.onActiveChange(() => {
            const { accessor } = this._params;
            accessor.setActive(this);
        }), this.api.onDidConstraintsChangeInternal((event) => {
            if (typeof event.minimumSize === 'number' ||
                typeof event.minimumSize === 'function') {
                this._minimumSize = event.minimumSize;
            }
            if (typeof event.maximumSize === 'number' ||
                typeof event.maximumSize === 'function') {
                this._maximumSize = event.maximumSize;
            }
            this.updateConstraints();
        }), this.api.onDidSizeChange((event) => {
            this._onDidChange.fire({ size: event.size });
        }));
    }
    setVisible(isVisible) {
        this.api._onDidVisibilityChange.fire({ isVisible });
    }
    setActive(isActive) {
        this.api._onDidActiveChange.fire({ isActive });
    }
    layout(size, orthogonalSize) {
        const [width, height] = this.orientation === _splitview__WEBPACK_IMPORTED_MODULE_2__.Orientation.HORIZONTAL
            ? [size, orthogonalSize]
            : [orthogonalSize, size];
        super.layout(width, height);
    }
    init(parameters) {
        super.init(parameters);
        this._priority = parameters.priority;
        if (parameters.minimumSize) {
            this._minimumSize = parameters.minimumSize;
        }
        if (parameters.maximumSize) {
            this._maximumSize = parameters.maximumSize;
        }
        if (parameters.snap) {
            this._snap = parameters.snap;
        }
    }
    toJSON() {
        const maximum = (value) => value === Number.MAX_SAFE_INTEGER ||
            value === Number.POSITIVE_INFINITY
            ? undefined
            : value;
        const minimum = (value) => (value <= 0 ? undefined : value);
        return Object.assign(Object.assign({}, super.toJSON()), { minimumSize: minimum(this.minimumSize), maximumSize: maximum(this.maximumSize) });
    }
    updateConstraints() {
        this.api._onDidConstraintsChange.fire({
            maximumSize: this._evaluatedMaximumSize,
            minimumSize: this._evaluatedMinimumSize,
        });
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/splitview/viewItem.js":
/*!*******************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/splitview/viewItem.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ViewItem: () => (/* binding */ ViewItem)
/* harmony export */ });
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math */ "./node_modules/dockview-core/dist/esm/math.js");

class ViewItem {
    set size(size) {
        this._size = size;
    }
    get size() {
        return this._size;
    }
    get cachedVisibleSize() {
        return this._cachedVisibleSize;
    }
    get visible() {
        return typeof this._cachedVisibleSize === 'undefined';
    }
    get minimumSize() {
        return this.visible ? this.view.minimumSize : 0;
    }
    get viewMinimumSize() {
        return this.view.minimumSize;
    }
    get maximumSize() {
        return this.visible ? this.view.maximumSize : 0;
    }
    get viewMaximumSize() {
        return this.view.maximumSize;
    }
    get priority() {
        return this.view.priority;
    }
    get snap() {
        return !!this.view.snap;
    }
    set enabled(enabled) {
        this.container.style.pointerEvents = enabled ? '' : 'none';
    }
    constructor(container, view, size, disposable) {
        this.container = container;
        this.view = view;
        this.disposable = disposable;
        this._cachedVisibleSize = undefined;
        if (typeof size === 'number') {
            this._size = size;
            this._cachedVisibleSize = undefined;
            container.classList.add('visible');
        }
        else {
            this._size = 0;
            this._cachedVisibleSize = size.cachedVisibleSize;
        }
    }
    setVisible(visible, size) {
        var _a;
        if (visible === this.visible) {
            return;
        }
        if (visible) {
            this.size = (0,_math__WEBPACK_IMPORTED_MODULE_0__.clamp)((_a = this._cachedVisibleSize) !== null && _a !== void 0 ? _a : 0, this.viewMinimumSize, this.viewMaximumSize);
            this._cachedVisibleSize = undefined;
        }
        else {
            this._cachedVisibleSize =
                typeof size === 'number' ? size : this.size;
            this.size = 0;
        }
        this.container.classList.toggle('visible', visible);
        if (this.view.setVisible) {
            this.view.setVisible(visible);
        }
    }
    dispose() {
        this.disposable.dispose();
        return this.view;
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/svg.js":
/*!****************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/svg.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createChevronRightButton: () => (/* binding */ createChevronRightButton),
/* harmony export */   createCloseButton: () => (/* binding */ createCloseButton),
/* harmony export */   createExpandMoreButton: () => (/* binding */ createExpandMoreButton)
/* harmony export */ });
const createSvgElementFromPath = (params) => {
    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    svg.setAttributeNS(null, 'height', params.height);
    svg.setAttributeNS(null, 'width', params.width);
    svg.setAttributeNS(null, 'viewBox', params.viewbox);
    svg.setAttributeNS(null, 'aria-hidden', 'false');
    svg.setAttributeNS(null, 'focusable', 'false');
    svg.classList.add('dv-svg');
    const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
    path.setAttributeNS(null, 'd', params.path);
    svg.appendChild(path);
    return svg;
};
const createCloseButton = () => createSvgElementFromPath({
    width: '11',
    height: '11',
    viewbox: '0 0 28 28',
    path: 'M2.1 27.3L0 25.2L11.55 13.65L0 2.1L2.1 0L13.65 11.55L25.2 0L27.3 2.1L15.75 13.65L27.3 25.2L25.2 27.3L13.65 15.75L2.1 27.3Z',
});
const createExpandMoreButton = () => createSvgElementFromPath({
    width: '11',
    height: '11',
    viewbox: '0 0 24 15',
    path: 'M12 14.15L0 2.15L2.15 0L12 9.9L21.85 0.0499992L24 2.2L12 14.15Z',
});
const createChevronRightButton = () => createSvgElementFromPath({
    width: '11',
    height: '11',
    viewbox: '0 0 15 25',
    path: 'M2.15 24.1L0 21.95L9.9 12.05L0 2.15L2.15 0L14.2 12.05L2.15 24.1Z',
});


/***/ }),

/***/ "./node_modules/dockview-core/dist/styles/dockview.css":
/*!*************************************************************!*\
  !*** ./node_modules/dockview-core/dist/styles/dockview.css ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _css_loader_dist_cjs_js_ruleSet_1_rules_0_use_1_dockview_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./dockview.css */ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/dockview-core/dist/styles/dockview.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_ruleSet_1_rules_0_use_1_dockview_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_ruleSet_1_rules_0_use_1_dockview_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _css_loader_dist_cjs_js_ruleSet_1_rules_0_use_1_dockview_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _css_loader_dist_cjs_js_ruleSet_1_rules_0_use_1_dockview_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {



var stylesInDOM = [];
function getIndexByIdentifier(identifier) {
  var result = -1;
  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }
  return result;
}
function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];
  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };
    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }
    identifiers.push(identifier);
  }
  return identifiers;
}
function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);
  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }
      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };
  return updater;
}
module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];
    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }
    var newLastIdentifiers = modulesToDom(newList, options);
    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];
      var _index = getIndexByIdentifier(_identifier);
      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();
        stylesInDOM.splice(_index, 1);
      }
    }
    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {



var memo = {};

/* istanbul ignore next  */
function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target);

    // Special case to return head of iframe instead of iframe itself
    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }
    memo[target] = styleTarget;
  }
  return memo[target];
}

/* istanbul ignore next  */
function insertBySelector(insert, style) {
  var target = getTarget(insert);
  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }
  target.appendChild(style);
}
module.exports = insertBySelector;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {



/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}
module.exports = insertStyleElement;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;
  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}
module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {



/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";
  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }
  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }
  var needLayer = typeof obj.layer !== "undefined";
  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }
  css += obj.css;
  if (needLayer) {
    css += "}";
  }
  if (obj.media) {
    css += "}";
  }
  if (obj.supports) {
    css += "}";
  }
  var sourceMap = obj.sourceMap;
  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  }

  // For old IE
  /* istanbul ignore if  */
  options.styleTagTransform(css, styleElement, options.options);
}
function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }
  styleElement.parentNode.removeChild(styleElement);
}

/* istanbul ignore next  */
function domAPI(options) {
  if (typeof document === "undefined") {
    return {
      update: function update() {},
      remove: function remove() {}
    };
  }
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}
module.exports = domAPI;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {



/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }
    styleElement.appendChild(document.createTextNode(css));
  }
}
module.exports = styleTagTransform;

/***/ }),

/***/ "widgets":
/*!******************************!*\
  !*** external "HTMLWidgets" ***!
  \******************************/
/***/ ((module) => {

module.exports = HTMLWidgets;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry needs to be wrapped in an IIFE because it needs to be isolated against other modules in the chunk.
(() => {
/*!************************************!*\
  !*** ./srcjs/widgets/dock_view.js ***!
  \************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var widgets__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! widgets */ "widgets");
/* harmony import */ var widgets__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(widgets__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var dockview_core_dist_styles_dockview_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! dockview-core/dist/styles/dockview.css */ "./node_modules/dockview-core/dist/styles/dockview.css");
/* harmony import */ var dockview_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dockview-core */ "./node_modules/dockview-core/dist/esm/index.js");





class Panel {
  get element() {
    return this._element
  }

  constructor() {
    this._element = document.createElement("div")
  }

  init(config) {
    this._element.id = config.params.id
    this._element.innerHTML = config.params.content.html
  }
}

HTMLWidgets.widget({

  name: 'dock_view',

  type: 'output',

  factory: function (el, width, height) {

    // TODO: define shared variables for this instance

    return {

      renderValue: function (x, id = el.id) {

        // TODO: code to render the widget, e.g.
        const api = (0,dockview_core__WEBPACK_IMPORTED_MODULE_2__.createDockview)(document.getElementById(id), {
          className: x.theme,
          createComponent: (options) => {
            switch (options.name) {
              case "default":
                return new Panel(options)
            }
          }
        })

        api.onDidAddPanel((e) => {
          // callback
          let pane = `#${e.params.id}`
          Shiny.initializeInputs($(pane))
        })

        api.onDidActivePanelChange((e) => {
          let pane = `#${e.params.id}`
          Shiny.bindAll($(pane))
        })

        // Init panels
        x.panels.map((panel) => {
          return (api.addPanel({
            id: panel.id,
            component: "default",
            title: panel.title,
            params: {
              content: panel.content,
              id: panel.id
            }
            //position: panel.position
          }))
        });

        Shiny.addCustomMessageHandler('add-panel', (m) => {
          // TBD dynacally insert a panel
        })
      },

      resize: function (width, height) {

        // TODO: code to re-render the widget with a new size

      }

    };
  }
});

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,