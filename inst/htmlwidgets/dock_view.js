/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/dockview-core/dist/styles/dockview.css":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/dockview-core/dist/styles/dockview.css ***!
  \*******************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.dv-svg {
  display: inline-block;
  fill: currentcolor;
  line-height: 1;
  stroke: currentcolor;
  stroke-width: 0;
}
.dockview-theme-dark {
  --dv-paneview-active-outline-color: dodgerblue;
  --dv-tabs-and-actions-container-font-size: 13px;
  --dv-tabs-and-actions-container-height: 35px;
  --dv-drag-over-background-color: rgba(83, 89, 93, 0.5);
  --dv-drag-over-border-color: white;
  --dv-tabs-container-scrollbar-color: #888;
  --dv-icon-hover-background-color: rgba(90, 93, 94, 0.31);
  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(83, 89, 93, 0.5);
  --dv-overlay-z-index: 999;
  --dv-active-sash-transition-duration: 0.1s;
  --dv-active-sash-transition-delay: 0.5s;
  --dv-group-view-background-color: #1e1e1e;
  --dv-tabs-and-actions-container-background-color: #252526;
  --dv-activegroup-visiblepanel-tab-background-color: #1e1e1e;
  --dv-activegroup-hiddenpanel-tab-background-color: #2d2d2d;
  --dv-inactivegroup-visiblepanel-tab-background-color: #1e1e1e;
  --dv-inactivegroup-hiddenpanel-tab-background-color: #2d2d2d;
  --dv-tab-divider-color: #1e1e1e;
  --dv-activegroup-visiblepanel-tab-color: white;
  --dv-activegroup-hiddenpanel-tab-color: #969696;
  --dv-inactivegroup-visiblepanel-tab-color: #8f8f8f;
  --dv-inactivegroup-hiddenpanel-tab-color: #626262;
  --dv-separator-border: rgb(68, 68, 68);
  --dv-paneview-header-border-color: rgba(204, 204, 204, 0.2);
}

.dockview-theme-light {
  --dv-paneview-active-outline-color: dodgerblue;
  --dv-tabs-and-actions-container-font-size: 13px;
  --dv-tabs-and-actions-container-height: 35px;
  --dv-drag-over-background-color: rgba(83, 89, 93, 0.5);
  --dv-drag-over-border-color: white;
  --dv-tabs-container-scrollbar-color: #888;
  --dv-icon-hover-background-color: rgba(90, 93, 94, 0.31);
  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(83, 89, 93, 0.5);
  --dv-overlay-z-index: 999;
  --dv-active-sash-transition-duration: 0.1s;
  --dv-active-sash-transition-delay: 0.5s;
  --dv-group-view-background-color: white;
  --dv-tabs-and-actions-container-background-color: #f3f3f3;
  --dv-activegroup-visiblepanel-tab-background-color: white;
  --dv-activegroup-hiddenpanel-tab-background-color: #ececec;
  --dv-inactivegroup-visiblepanel-tab-background-color: white;
  --dv-inactivegroup-hiddenpanel-tab-background-color: #ececec;
  --dv-tab-divider-color: white;
  --dv-activegroup-visiblepanel-tab-color: rgb(51, 51, 51);
  --dv-activegroup-hiddenpanel-tab-color: rgba(51, 51, 51, 0.7);
  --dv-inactivegroup-visiblepanel-tab-color: rgba(51, 51, 51, 0.7);
  --dv-inactivegroup-hiddenpanel-tab-color: rgba(51, 51, 51, 0.35);
  --dv-separator-border: rgba(128, 128, 128, 0.35);
  --dv-paneview-header-border-color: rgb(51, 51, 51);
}

.dockview-theme-vs {
  --dv-paneview-active-outline-color: dodgerblue;
  --dv-tabs-and-actions-container-font-size: 13px;
  --dv-tabs-and-actions-container-height: 35px;
  --dv-drag-over-background-color: rgba(83, 89, 93, 0.5);
  --dv-drag-over-border-color: white;
  --dv-tabs-container-scrollbar-color: #888;
  --dv-icon-hover-background-color: rgba(90, 93, 94, 0.31);
  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(83, 89, 93, 0.5);
  --dv-overlay-z-index: 999;
  --dv-active-sash-transition-duration: 0.1s;
  --dv-active-sash-transition-delay: 0.5s;
  --dv-group-view-background-color: #1e1e1e;
  --dv-tabs-and-actions-container-background-color: #252526;
  --dv-activegroup-visiblepanel-tab-background-color: #1e1e1e;
  --dv-activegroup-hiddenpanel-tab-background-color: #2d2d2d;
  --dv-inactivegroup-visiblepanel-tab-background-color: #1e1e1e;
  --dv-inactivegroup-hiddenpanel-tab-background-color: #2d2d2d;
  --dv-tab-divider-color: #1e1e1e;
  --dv-activegroup-visiblepanel-tab-color: white;
  --dv-activegroup-hiddenpanel-tab-color: #969696;
  --dv-inactivegroup-visiblepanel-tab-color: #8f8f8f;
  --dv-inactivegroup-hiddenpanel-tab-color: #626262;
  --dv-separator-border: rgb(68, 68, 68);
  --dv-paneview-header-border-color: rgba(204, 204, 204, 0.2);
  --dv-tabs-and-actions-container-background-color: #2d2d30;
  --dv-tabs-and-actions-container-height: 20px;
  --dv-tabs-and-actions-container-font-size: 11px;
  --dv-activegroup-visiblepanel-tab-background-color: #007acc;
  --dv-inactivegroup-visiblepanel-tab-background-color: #3f3f46;
  --dv-activegroup-visiblepanel-tab-color: white;
  --dv-activegroup-hiddenpanel-tab-color: white;
  --dv-inactivegroup-visiblepanel-tab-color: white;
  --dv-inactivegroup-hiddenpanel-tab-color: white;
}
.dockview-theme-vs .dv-groupview.dv-active-group > .dv-tabs-and-actions-container {
  box-sizing: content-box;
  border-bottom: 2px solid var(--dv-activegroup-visiblepanel-tab-background-color);
}
.dockview-theme-vs .dv-groupview.dv-active-group > .dv-tabs-and-actions-container .dv-tab.dv-active-tab {
  border-top: 2px solid var(--dv-activegroup-visiblepanel-tab-background-color);
}
.dockview-theme-vs .dv-groupview.dv-active-group > .dv-tabs-and-actions-container .dv-tab.dv-inactive-tab {
  border-top: 2px solid var(--dv-activegroup-hiddenpanel-tab-background-color);
}
.dockview-theme-vs .dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container {
  box-sizing: content-box;
  border-bottom: 2px solid var(--dv-inactivegroup-visiblepanel-tab-background-color);
}
.dockview-theme-vs .dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container .dv-tab.dv-active-tab {
  border-top: 2px solid var(--dv-inactivegroup-visiblepanel-tab-background-color);
}
.dockview-theme-vs .dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container .dv-tab.dv-inactive-tab {
  border-top: 2px solid var(--dv-inactivegroup-hiddenpanel-tab-background-color);
}

.dockview-theme-abyss {
  --dv-paneview-active-outline-color: dodgerblue;
  --dv-tabs-and-actions-container-font-size: 13px;
  --dv-tabs-and-actions-container-height: 35px;
  --dv-drag-over-background-color: rgba(83, 89, 93, 0.5);
  --dv-drag-over-border-color: white;
  --dv-tabs-container-scrollbar-color: #888;
  --dv-icon-hover-background-color: rgba(90, 93, 94, 0.31);
  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(83, 89, 93, 0.5);
  --dv-overlay-z-index: 999;
  --dv-active-sash-transition-duration: 0.1s;
  --dv-active-sash-transition-delay: 0.5s;
  --dv-group-view-background-color: #000c18;
  --dv-tabs-and-actions-container-background-color: #1c1c2a;
  --dv-activegroup-visiblepanel-tab-background-color: #000c18;
  --dv-activegroup-hiddenpanel-tab-background-color: #10192c;
  --dv-inactivegroup-visiblepanel-tab-background-color: #000c18;
  --dv-inactivegroup-hiddenpanel-tab-background-color: #10192c;
  --dv-tab-divider-color: #2b2b4a;
  --dv-activegroup-visiblepanel-tab-color: white;
  --dv-activegroup-hiddenpanel-tab-color: rgba(255, 255, 255, 0.5);
  --dv-inactivegroup-visiblepanel-tab-color: rgba(255, 255, 255, 0.5);
  --dv-inactivegroup-hiddenpanel-tab-color: rgba(255, 255, 255, 0.25);
  --dv-separator-border: #2b2b4a;
  --dv-paneview-header-border-color: #2b2b4a;
  --dv-paneview-active-outline-color: #596f99;
}

.dockview-theme-dracula {
  --dv-paneview-active-outline-color: dodgerblue;
  --dv-tabs-and-actions-container-font-size: 13px;
  --dv-tabs-and-actions-container-height: 35px;
  --dv-drag-over-background-color: rgba(83, 89, 93, 0.5);
  --dv-drag-over-border-color: white;
  --dv-tabs-container-scrollbar-color: #888;
  --dv-icon-hover-background-color: rgba(90, 93, 94, 0.31);
  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(83, 89, 93, 0.5);
  --dv-overlay-z-index: 999;
  --dv-active-sash-transition-duration: 0.1s;
  --dv-active-sash-transition-delay: 0.5s;
  --dv-group-view-background-color: #282a36;
  --dv-tabs-and-actions-container-background-color: #191a21;
  --dv-activegroup-visiblepanel-tab-background-color: #282a36;
  --dv-activegroup-hiddenpanel-tab-background-color: #21222c;
  --dv-inactivegroup-visiblepanel-tab-background-color: #282a36;
  --dv-inactivegroup-hiddenpanel-tab-background-color: #21222c;
  --dv-tab-divider-color: #191a21;
  --dv-activegroup-visiblepanel-tab-color: rgb(248, 248, 242);
  --dv-activegroup-hiddenpanel-tab-color: rgb(98, 114, 164);
  --dv-inactivegroup-visiblepanel-tab-color: rgba(248, 248, 242, 0.5);
  --dv-inactivegroup-hiddenpanel-tab-color: rgba(98, 114, 164, 0.5);
  --dv-separator-border: #bd93f9;
  --dv-paneview-header-border-color: #bd93f9;
  --dv-paneview-active-outline-color: #6272a4;
}
.dockview-theme-dracula .dv-groupview.dv-active-group > .dv-tabs-and-actions-container > .dv-tabs-container > .dv-tab.dv-active-tab {
  position: relative;
}
.dockview-theme-dracula .dv-groupview.dv-active-group > .dv-tabs-and-actions-container > .dv-tabs-container > .dv-tab.dv-active-tab::after {
  position: absolute;
  left: 0px;
  top: 0px;
  content: "";
  width: 100%;
  height: 1px;
  background-color: #94527e;
  z-index: 999;
}
.dockview-theme-dracula .dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container > .dv-tabs-container > .dv-tab.dv-active-tab {
  position: relative;
}
.dockview-theme-dracula .dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container > .dv-tabs-container > .dv-tab.dv-active-tab::after {
  position: absolute;
  left: 0px;
  bottom: 0px;
  content: "";
  width: 100%;
  height: 1px;
  background-color: #5e3d5a;
  z-index: 999;
}

.dockview-theme-replit {
  --dv-paneview-active-outline-color: dodgerblue;
  --dv-tabs-and-actions-container-font-size: 13px;
  --dv-tabs-and-actions-container-height: 35px;
  --dv-drag-over-background-color: rgba(83, 89, 93, 0.5);
  --dv-drag-over-border-color: white;
  --dv-tabs-container-scrollbar-color: #888;
  --dv-icon-hover-background-color: rgba(90, 93, 94, 0.31);
  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(83, 89, 93, 0.5);
  --dv-overlay-z-index: 999;
  --dv-active-sash-transition-duration: 0.1s;
  --dv-active-sash-transition-delay: 0.5s;
  --dv-group-view-background-color: #ebeced;
  --dv-tabs-and-actions-container-background-color: #fcfcfc;
  --dv-activegroup-visiblepanel-tab-background-color: #f0f1f2;
  --dv-activegroup-hiddenpanel-tab-background-color: #fcfcfc;
  --dv-inactivegroup-visiblepanel-tab-background-color: #f0f1f2;
  --dv-inactivegroup-hiddenpanel-tab-background-color: #fcfcfc;
  --dv-tab-divider-color: transparent;
  --dv-activegroup-visiblepanel-tab-color: rgb(51, 51, 51);
  --dv-activegroup-hiddenpanel-tab-color: rgb(51, 51, 51);
  --dv-inactivegroup-visiblepanel-tab-color: rgb(51, 51, 51);
  --dv-inactivegroup-hiddenpanel-tab-color: rgb(51, 51, 51);
  --dv-separator-border: transparent;
  --dv-paneview-header-border-color: rgb(51, 51, 51);
  --dv-separator-handle-background-color: #cfd1d3;
  --dv-separator-handle-hover-background-color: #babbbb;
}
.dockview-theme-replit .dv-resize-container:has(> .dv-groupview) {
  border-radius: 8px;
}
.dockview-theme-replit .dv-groupview {
  overflow: hidden;
  border-radius: 10px;
}
.dockview-theme-replit .dv-groupview .dv-tabs-and-actions-container {
  border-bottom: 1px solid rgba(128, 128, 128, 0.35);
}
.dockview-theme-replit .dv-groupview .dv-tabs-and-actions-container .dv-tab {
  margin: 4px;
  border-radius: 8px;
}
.dockview-theme-replit .dv-groupview .dv-tabs-and-actions-container .dv-tab .dv-svg {
  height: 8px;
  width: 8px;
}
.dockview-theme-replit .dv-groupview .dv-tabs-and-actions-container .dv-tab:hover {
  background-color: #e4e5e6 !important;
}
.dockview-theme-replit .dv-groupview .dv-content-container {
  background-color: #fcfcfc;
}
.dockview-theme-replit .dv-groupview.dv-active-group {
  border: 1px solid rgba(128, 128, 128, 0.35);
}
.dockview-theme-replit .dv-groupview.dv-inactive-group {
  border: 1px solid transparent;
}
.dockview-theme-replit .dv-vertical > .dv-sash-container > .dv-sash:not(.disabled)::after {
  content: "";
  height: 4px;
  width: 40px;
  border-radius: 2px;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background-color: var(--dv-separator-handle-background-color);
  position: absolute;
}
.dockview-theme-replit .dv-vertical > .dv-sash-container > .dv-sash:not(.disabled):hover::after {
  background-color: var(--dv-separator-handle-hover-background-color);
}
.dockview-theme-replit .dv-horizontal > .dv-sash-container > .dv-sash:not(.disabled)::after {
  content: "";
  height: 40px;
  width: 4px;
  border-radius: 2px;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background-color: var(--dv-separator-handle-background-color);
  position: absolute;
}
.dockview-theme-replit .dv-horizontal > .dv-sash-container > .dv-sash:not(.disabled):hover::after {
  background-color: var(--dv-separator-handle-hover-background-color);
}
.dv-drop-target {
  position: relative;
}
.dv-drop-target > .dv-drop-target-dropzone {
  position: absolute;
  left: 0px;
  top: 0px;
  height: 100%;
  width: 100%;
  z-index: 1000;
  pointer-events: none;
}
.dv-drop-target > .dv-drop-target-dropzone > .dv-drop-target-selection {
  position: relative;
  box-sizing: border-box;
  height: 100%;
  width: 100%;
  background-color: var(--dv-drag-over-background-color);
  transition: top 70ms ease-out, left 70ms ease-out, width 70ms ease-out, height 70ms ease-out, opacity 0.15s ease-out;
  will-change: transform;
  pointer-events: none;
}
.dv-drop-target > .dv-drop-target-dropzone > .dv-drop-target-selection.dv-drop-target-top.dv-drop-target-small-vertical {
  border-top: 1px solid var(--dv-drag-over-border-color);
}
.dv-drop-target > .dv-drop-target-dropzone > .dv-drop-target-selection.dv-drop-target-bottom.dv-drop-target-small-vertical {
  border-bottom: 1px solid var(--dv-drag-over-border-color);
}
.dv-drop-target > .dv-drop-target-dropzone > .dv-drop-target-selection.dv-drop-target-left.dv-drop-target-small-horizontal {
  border-left: 1px solid var(--dv-drag-over-border-color);
}
.dv-drop-target > .dv-drop-target-dropzone > .dv-drop-target-selection.dv-drop-target-right.dv-drop-target-small-horizontal {
  border-right: 1px solid var(--dv-drag-over-border-color);
}
.dv-dockview {
  position: relative;
  background-color: var(--dv-group-view-background-color);
}
.dv-dockview .dv-watermark-container {
  position: absolute;
  top: 0px;
  left: 0px;
  height: 100%;
  width: 100%;
  z-index: 1;
}
.dv-dockview .dv-overlay-render-container {
  position: relative;
}

.dv-groupview.dv-active-group > .dv-tabs-and-actions-container > .dv-tabs-container > .dv-tab.dv-active-tab {
  background-color: var(--dv-activegroup-visiblepanel-tab-background-color);
  color: var(--dv-activegroup-visiblepanel-tab-color);
}
.dv-groupview.dv-active-group > .dv-tabs-and-actions-container > .dv-tabs-container > .dv-tab.dv-inactive-tab {
  background-color: var(--dv-activegroup-hiddenpanel-tab-background-color);
  color: var(--dv-activegroup-hiddenpanel-tab-color);
}
.dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container > .dv-tabs-container > .dv-tab.dv-active-tab {
  background-color: var(--dv-inactivegroup-visiblepanel-tab-background-color);
  color: var(--dv-inactivegroup-visiblepanel-tab-color);
}
.dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container > .dv-tabs-container > .dv-tab.dv-inactive-tab {
  background-color: var(--dv-inactivegroup-hiddenpanel-tab-background-color);
  color: var(--dv-inactivegroup-hiddenpanel-tab-color);
}

/**
 * when a tab is dragged we lose the above stylings because they are conditional on parent elements
 * therefore we also set some stylings for the dragging event
 **/
.dv-tab.dv-tab-dragging {
  background-color: var(--dv-activegroup-visiblepanel-tab-background-color);
  color: var(--dv-activegroup-visiblepanel-tab-color);
}
.dv-groupview {
  display: flex;
  flex-direction: column;
  height: 100%;
  background-color: var(--dv-group-view-background-color);
  overflow: hidden;
}
.dv-groupview:focus {
  outline: none;
}
.dv-groupview > .dv-content-container {
  flex-grow: 1;
  min-height: 0;
  outline: none;
}
.dv-root-wrapper {
  height: 100%;
  width: 100%;
}
.dv-grid-view,
.dv-branch-node {
  height: 100%;
  width: 100%;
}
.dv-debug .dv-resize-container .dv-resize-handle-top {
  background-color: red;
}
.dv-debug .dv-resize-container .dv-resize-handle-bottom {
  background-color: green;
}
.dv-debug .dv-resize-container .dv-resize-handle-left {
  background-color: yellow;
}
.dv-debug .dv-resize-container .dv-resize-handle-right {
  background-color: blue;
}
.dv-debug .dv-resize-container .dv-resize-handle-topleft,
.dv-debug .dv-resize-container .dv-resize-handle-topright,
.dv-debug .dv-resize-container .dv-resize-handle-bottomleft,
.dv-debug .dv-resize-container .dv-resize-handle-bottomright {
  background-color: cyan;
}

.dv-resize-container {
  --dv-overlay-z-index: var(--dv-overlay-z-index, 999);
  position: absolute;
  z-index: calc(var(--dv-overlay-z-index) - 2);
  border: 1px solid var(--dv-tab-divider-color);
  box-shadow: var(--dv-floating-box-shadow);
}
.dv-resize-container.dv-hidden {
  display: none;
}
.dv-resize-container.dv-resize-container-dragging {
  opacity: 0.5;
}
.dv-resize-container .dv-resize-handle-top {
  height: 4px;
  width: calc(100% - 8px);
  left: 4px;
  top: -2px;
  z-index: var(--dv-overlay-z-index);
  position: absolute;
  cursor: ns-resize;
}
.dv-resize-container .dv-resize-handle-bottom {
  height: 4px;
  width: calc(100% - 8px);
  left: 4px;
  bottom: -2px;
  z-index: var(--dv-overlay-z-index);
  position: absolute;
  cursor: ns-resize;
}
.dv-resize-container .dv-resize-handle-left {
  height: calc(100% - 8px);
  width: 4px;
  left: -2px;
  top: 4px;
  z-index: var(--dv-overlay-z-index);
  position: absolute;
  cursor: ew-resize;
}
.dv-resize-container .dv-resize-handle-right {
  height: calc(100% - 8px);
  width: 4px;
  right: -2px;
  top: 4px;
  z-index: var(--dv-overlay-z-index);
  position: absolute;
  cursor: ew-resize;
}
.dv-resize-container .dv-resize-handle-topleft {
  height: 4px;
  width: 4px;
  top: -2px;
  left: -2px;
  z-index: var(--dv-overlay-z-index);
  position: absolute;
  cursor: nw-resize;
}
.dv-resize-container .dv-resize-handle-topright {
  height: 4px;
  width: 4px;
  right: -2px;
  top: -2px;
  z-index: var(--dv-overlay-z-index);
  position: absolute;
  cursor: ne-resize;
}
.dv-resize-container .dv-resize-handle-bottomleft {
  height: 4px;
  width: 4px;
  left: -2px;
  bottom: -2px;
  z-index: var(--dv-overlay-z-index);
  position: absolute;
  cursor: sw-resize;
}
.dv-resize-container .dv-resize-handle-bottomright {
  height: 4px;
  width: 4px;
  right: -2px;
  bottom: -2px;
  z-index: var(--dv-overlay-z-index);
  position: absolute;
  cursor: se-resize;
}
.dv-render-overlay {
  --dv-overlay-z-index: var(--dv-overlay-z-index, 999);
  position: absolute;
  z-index: 1;
  height: 100%;
}
.dv-render-overlay.dv-render-overlay-float {
  z-index: calc(var(--dv-overlay-z-index) - 1);
}

.dv-debug .dv-render-overlay {
  outline: 1px solid red;
  outline-offset: -1;
}
.dv-pane-container {
  height: 100%;
  width: 100%;
}
.dv-pane-container.dv-animated .dv-view {
  transition-duration: 0.15s;
  transition-timing-function: ease-out;
}
.dv-pane-container .dv-view {
  overflow: hidden;
  display: flex;
  flex-direction: column;
  padding: 0px !important;
}
.dv-pane-container .dv-view:not(:first-child)::before {
  background-color: transparent !important;
}
.dv-pane-container .dv-view:not(:first-child) .dv-pane > .dv-pane-header {
  border-top: 1px solid var(--dv-paneview-header-border-color);
}
.dv-pane-container .dv-view .dv-default-header {
  background-color: var(--dv-group-view-background-color);
  color: var(--dv-activegroup-visiblepanel-tab-color);
  display: flex;
  padding: 0px 8px;
  cursor: pointer;
}
.dv-pane-container .dv-view .dv-default-header .dv-pane-header-icon {
  display: flex;
  justify-content: center;
  align-items: center;
}
.dv-pane-container .dv-view .dv-default-header > span {
  padding-left: 8px;
  flex-grow: 1;
}
.dv-pane-container:first-of-type > .dv-pane > .dv-pane-header {
  border-top: none !important;
}
.dv-pane-container .dv-pane {
  display: flex;
  flex-direction: column;
  overflow: hidden;
  height: 100%;
}
.dv-pane-container .dv-pane .dv-pane-header {
  box-sizing: border-box;
  user-select: none;
  position: relative;
  outline: none;
}
.dv-pane-container .dv-pane .dv-pane-header.dv-pane-draggable {
  cursor: pointer;
}
.dv-pane-container .dv-pane .dv-pane-header:focus:before, .dv-pane-container .dv-pane .dv-pane-header:focus-within:before {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 5;
  content: "";
  pointer-events: none;
  outline: 1px solid;
  outline-width: -1px;
  outline-style: solid;
  outline-offset: -1px;
  outline-color: var(--dv-paneview-active-outline-color);
}
.dv-pane-container .dv-pane .dv-pane-body {
  overflow-y: auto;
  overflow-x: hidden;
  flex-grow: 1;
  position: relative;
  outline: none;
}
.dv-pane-container .dv-pane .dv-pane-body:focus:before, .dv-pane-container .dv-pane .dv-pane-body:focus-within:before {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 5;
  content: "";
  pointer-events: none;
  outline: 1px solid;
  outline-width: -1px;
  outline-style: solid;
  outline-offset: -1px;
  outline-color: var(--dv-paneview-active-outline-color);
}
.dv-debug .dv-split-view-container .dv-sash-container .dv-sash.dv-enabled {
  background-color: black;
}
.dv-debug .dv-split-view-container .dv-sash-container .dv-sash.dv-disabled {
  background-color: orange;
}
.dv-debug .dv-split-view-container .dv-sash-container .dv-sash.dv-maximum {
  background-color: green;
}
.dv-debug .dv-split-view-container .dv-sash-container .dv-sash.dv-minimum {
  background-color: red;
}

.dv-split-view-container {
  position: relative;
  overflow: hidden;
  height: 100%;
  width: 100%;
}
.dv-split-view-container.dv-splitview-disabled > .dv-sash-container > .dv-sash {
  pointer-events: none;
}
.dv-split-view-container.dv-animation .dv-view,
.dv-split-view-container.dv-animation .dv-sash {
  transition-duration: 0.15s;
  transition-timing-function: ease-out;
}
.dv-split-view-container.dv-horizontal {
  height: 100%;
}
.dv-split-view-container.dv-horizontal > .dv-sash-container > .dv-sash {
  height: 100%;
  width: 4px;
}
.dv-split-view-container.dv-horizontal > .dv-sash-container > .dv-sash.dv-enabled {
  cursor: ew-resize;
}
.dv-split-view-container.dv-horizontal > .dv-sash-container > .dv-sash.dv-disabled {
  cursor: default;
}
.dv-split-view-container.dv-horizontal > .dv-sash-container > .dv-sash.dv-maximum {
  cursor: w-resize;
}
.dv-split-view-container.dv-horizontal > .dv-sash-container > .dv-sash.dv-minimum {
  cursor: e-resize;
}
.dv-split-view-container.dv-horizontal > .dv-view-container > .dv-view:not(:first-child)::before {
  height: 100%;
  width: 1px;
}
.dv-split-view-container.dv-vertical {
  width: 100%;
}
.dv-split-view-container.dv-vertical > .dv-sash-container > .dv-sash {
  width: 100%;
  height: 4px;
}
.dv-split-view-container.dv-vertical > .dv-sash-container > .dv-sash.dv-enabled {
  cursor: ns-resize;
}
.dv-split-view-container.dv-vertical > .dv-sash-container > .dv-sash.dv-disabled {
  cursor: default;
}
.dv-split-view-container.dv-vertical > .dv-sash-container > .dv-sash.dv-maximum {
  cursor: n-resize;
}
.dv-split-view-container.dv-vertical > .dv-sash-container > .dv-sash.dv-minimum {
  cursor: s-resize;
}
.dv-split-view-container.dv-vertical > .dv-view-container > .dv-view {
  width: 100%;
}
.dv-split-view-container.dv-vertical > .dv-view-container > .dv-view:not(:first-child)::before {
  height: 1px;
  width: 100%;
}
.dv-split-view-container .dv-sash-container {
  height: 100%;
  width: 100%;
  position: absolute;
}
.dv-split-view-container .dv-sash-container .dv-sash {
  position: absolute;
  z-index: 99;
  outline: none;
  user-select: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  touch-action: none;
}
.dv-split-view-container .dv-sash-container .dv-sash:not(.disabled):active, .dv-split-view-container .dv-sash-container .dv-sash:not(.disabled):hover {
  background-color: var(--dv-active-sash-color, transparent);
  transition-property: background-color;
  transition-timing-function: ease-in-out;
  transition-duration: var(--dv-active-sash-transition-duration, 0.1s);
  transition-delay: var(--dv-active-sash-transition-delay, 0.5s);
}
.dv-split-view-container .dv-view-container {
  position: relative;
  height: 100%;
  width: 100%;
}
.dv-split-view-container .dv-view-container .dv-view {
  height: 100%;
  box-sizing: border-box;
  overflow: auto;
  position: absolute;
}
.dv-split-view-container.dv-separator-border .dv-view:not(:first-child)::before {
  content: " ";
  position: absolute;
  top: 0;
  left: 0;
  z-index: 5;
  pointer-events: none;
  background-color: var(--dv-separator-border);
}
.dv-dragged {
  transform: translate3d(0px, 0px, 0px); /* forces tab to be drawn on a separate layer (see https://github.com/microsoft/vscode/issues/18733) */
}

.dv-tab {
  flex-shrink: 0;
}
.dv-tab:focus-within, .dv-tab:focus {
  position: relative;
}
.dv-tab:focus-within::after, .dv-tab:focus::after {
  position: absolute;
  content: "";
  height: 100%;
  width: 100%;
  top: 0px;
  left: 0px;
  pointer-events: none;
  outline: 1px solid var(--dv-tab-divider-color) !important;
  outline-offset: -1px;
  z-index: 5;
}
.dv-tab.dv-tab-dragging .dv-default-tab-action {
  background-color: var(--dv-activegroup-visiblepanel-tab-color);
}
.dv-tab.dv-active-tab .dv-default-tab .dv-default-tab-action {
  visibility: visible;
}
.dv-tab.dv-inactive-tab .dv-default-tab .dv-default-tab-action {
  visibility: hidden;
}
.dv-tab.dv-inactive-tab .dv-default-tab:hover .dv-default-tab-action {
  visibility: visible;
}
.dv-tab .dv-default-tab {
  position: relative;
  height: 100%;
  display: flex;
  min-width: 80px;
  align-items: center;
  padding: 0px 8px;
  white-space: nowrap;
  text-overflow: ellipsis;
}
.dv-tab .dv-default-tab .dv-default-tab-content {
  padding: 0px 8px;
  flex-grow: 1;
}
.dv-tab .dv-default-tab .dv-default-tab-action {
  padding: 4px;
  display: flex;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
}
.dv-tab .dv-default-tab .dv-default-tab-action:hover {
  border-radius: 2px;
  background-color: var(--dv-icon-hover-background-color);
}
.dv-tabs-and-actions-container {
  display: flex;
  background-color: var(--dv-tabs-and-actions-container-background-color);
  flex-shrink: 0;
  box-sizing: border-box;
  height: var(--dv-tabs-and-actions-container-height);
  font-size: var(--dv-tabs-and-actions-container-font-size);
}
.dv-tabs-and-actions-container.dv-single-tab.dv-full-width-single-tab .dv-tabs-container {
  flex-grow: 1;
}
.dv-tabs-and-actions-container.dv-single-tab.dv-full-width-single-tab .dv-tabs-container .dv-tab {
  flex-grow: 1;
}
.dv-tabs-and-actions-container.dv-single-tab.dv-full-width-single-tab .dv-void-container {
  flex-grow: 0;
}
.dv-tabs-and-actions-container .dv-void-container {
  display: flex;
  flex-grow: 1;
  cursor: grab;
}
.dv-tabs-and-actions-container .dv-tabs-container {
  display: flex;
  overflow-x: overlay;
  overflow-y: hidden;
  scrollbar-width: thin;
  /* Track */
  /* Handle */
}
.dv-tabs-and-actions-container .dv-tabs-container::-webkit-scrollbar {
  height: 3px;
}
.dv-tabs-and-actions-container .dv-tabs-container::-webkit-scrollbar-track {
  background: transparent;
}
.dv-tabs-and-actions-container .dv-tabs-container::-webkit-scrollbar-thumb {
  background: var(--dv-tabs-container-scrollbar-color);
}
.dv-tabs-and-actions-container .dv-tabs-container .dv-tab {
  -webkit-user-drag: element;
  outline: none;
  min-width: 75px;
  cursor: pointer;
  position: relative;
  box-sizing: border-box;
}
.dv-tabs-and-actions-container .dv-tabs-container .dv-tab:not(:first-child)::before {
  content: " ";
  position: absolute;
  top: 0;
  left: 0;
  z-index: 5;
  pointer-events: none;
  background-color: var(--dv-tab-divider-color);
  width: 1px;
  height: 100%;
}
.dv-watermark {
  display: flex;
  height: 100%;
}`, "",{"version":3,"sources":["webpack://./node_modules/dockview-core/dist/styles/dockview.css"],"names":[],"mappings":"AAAA;EACE,qBAAqB;EACrB,kBAAkB;EAClB,cAAc;EACd,oBAAoB;EACpB,eAAe;AACjB;AACA;EACE,8CAA8C;EAC9C,+CAA+C;EAC/C,4CAA4C;EAC5C,sDAAsD;EACtD,kCAAkC;EAClC,yCAAyC;EACzC,wDAAwD;EACxD,+DAA+D;EAC/D,yBAAyB;EACzB,0CAA0C;EAC1C,uCAAuC;EACvC,yCAAyC;EACzC,yDAAyD;EACzD,2DAA2D;EAC3D,0DAA0D;EAC1D,6DAA6D;EAC7D,4DAA4D;EAC5D,+BAA+B;EAC/B,8CAA8C;EAC9C,+CAA+C;EAC/C,kDAAkD;EAClD,iDAAiD;EACjD,sCAAsC;EACtC,2DAA2D;AAC7D;;AAEA;EACE,8CAA8C;EAC9C,+CAA+C;EAC/C,4CAA4C;EAC5C,sDAAsD;EACtD,kCAAkC;EAClC,yCAAyC;EACzC,wDAAwD;EACxD,+DAA+D;EAC/D,yBAAyB;EACzB,0CAA0C;EAC1C,uCAAuC;EACvC,uCAAuC;EACvC,yDAAyD;EACzD,yDAAyD;EACzD,0DAA0D;EAC1D,2DAA2D;EAC3D,4DAA4D;EAC5D,6BAA6B;EAC7B,wDAAwD;EACxD,6DAA6D;EAC7D,gEAAgE;EAChE,gEAAgE;EAChE,gDAAgD;EAChD,kDAAkD;AACpD;;AAEA;EACE,8CAA8C;EAC9C,+CAA+C;EAC/C,4CAA4C;EAC5C,sDAAsD;EACtD,kCAAkC;EAClC,yCAAyC;EACzC,wDAAwD;EACxD,+DAA+D;EAC/D,yBAAyB;EACzB,0CAA0C;EAC1C,uCAAuC;EACvC,yCAAyC;EACzC,yDAAyD;EACzD,2DAA2D;EAC3D,0DAA0D;EAC1D,6DAA6D;EAC7D,4DAA4D;EAC5D,+BAA+B;EAC/B,8CAA8C;EAC9C,+CAA+C;EAC/C,kDAAkD;EAClD,iDAAiD;EACjD,sCAAsC;EACtC,2DAA2D;EAC3D,yDAAyD;EACzD,4CAA4C;EAC5C,+CAA+C;EAC/C,2DAA2D;EAC3D,6DAA6D;EAC7D,8CAA8C;EAC9C,6CAA6C;EAC7C,gDAAgD;EAChD,+CAA+C;AACjD;AACA;EACE,uBAAuB;EACvB,gFAAgF;AAClF;AACA;EACE,6EAA6E;AAC/E;AACA;EACE,4EAA4E;AAC9E;AACA;EACE,uBAAuB;EACvB,kFAAkF;AACpF;AACA;EACE,+EAA+E;AACjF;AACA;EACE,8EAA8E;AAChF;;AAEA;EACE,8CAA8C;EAC9C,+CAA+C;EAC/C,4CAA4C;EAC5C,sDAAsD;EACtD,kCAAkC;EAClC,yCAAyC;EACzC,wDAAwD;EACxD,+DAA+D;EAC/D,yBAAyB;EACzB,0CAA0C;EAC1C,uCAAuC;EACvC,yCAAyC;EACzC,yDAAyD;EACzD,2DAA2D;EAC3D,0DAA0D;EAC1D,6DAA6D;EAC7D,4DAA4D;EAC5D,+BAA+B;EAC/B,8CAA8C;EAC9C,gEAAgE;EAChE,mEAAmE;EACnE,mEAAmE;EACnE,8BAA8B;EAC9B,0CAA0C;EAC1C,2CAA2C;AAC7C;;AAEA;EACE,8CAA8C;EAC9C,+CAA+C;EAC/C,4CAA4C;EAC5C,sDAAsD;EACtD,kCAAkC;EAClC,yCAAyC;EACzC,wDAAwD;EACxD,+DAA+D;EAC/D,yBAAyB;EACzB,0CAA0C;EAC1C,uCAAuC;EACvC,yCAAyC;EACzC,yDAAyD;EACzD,2DAA2D;EAC3D,0DAA0D;EAC1D,6DAA6D;EAC7D,4DAA4D;EAC5D,+BAA+B;EAC/B,2DAA2D;EAC3D,yDAAyD;EACzD,mEAAmE;EACnE,iEAAiE;EACjE,8BAA8B;EAC9B,0CAA0C;EAC1C,2CAA2C;AAC7C;AACA;EACE,kBAAkB;AACpB;AACA;EACE,kBAAkB;EAClB,SAAS;EACT,QAAQ;EACR,WAAW;EACX,WAAW;EACX,WAAW;EACX,yBAAyB;EACzB,YAAY;AACd;AACA;EACE,kBAAkB;AACpB;AACA;EACE,kBAAkB;EAClB,SAAS;EACT,WAAW;EACX,WAAW;EACX,WAAW;EACX,WAAW;EACX,yBAAyB;EACzB,YAAY;AACd;;AAEA;EACE,8CAA8C;EAC9C,+CAA+C;EAC/C,4CAA4C;EAC5C,sDAAsD;EACtD,kCAAkC;EAClC,yCAAyC;EACzC,wDAAwD;EACxD,+DAA+D;EAC/D,yBAAyB;EACzB,0CAA0C;EAC1C,uCAAuC;EACvC,yCAAyC;EACzC,yDAAyD;EACzD,2DAA2D;EAC3D,0DAA0D;EAC1D,6DAA6D;EAC7D,4DAA4D;EAC5D,mCAAmC;EACnC,wDAAwD;EACxD,uDAAuD;EACvD,0DAA0D;EAC1D,yDAAyD;EACzD,kCAAkC;EAClC,kDAAkD;EAClD,+CAA+C;EAC/C,qDAAqD;AACvD;AACA;EACE,kBAAkB;AACpB;AACA;EACE,gBAAgB;EAChB,mBAAmB;AACrB;AACA;EACE,kDAAkD;AACpD;AACA;EACE,WAAW;EACX,kBAAkB;AACpB;AACA;EACE,WAAW;EACX,UAAU;AACZ;AACA;EACE,oCAAoC;AACtC;AACA;EACE,yBAAyB;AAC3B;AACA;EACE,2CAA2C;AAC7C;AACA;EACE,6BAA6B;AAC/B;AACA;EACE,WAAW;EACX,WAAW;EACX,WAAW;EACX,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,gCAAgC;EAChC,6DAA6D;EAC7D,kBAAkB;AACpB;AACA;EACE,mEAAmE;AACrE;AACA;EACE,WAAW;EACX,YAAY;EACZ,UAAU;EACV,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,gCAAgC;EAChC,6DAA6D;EAC7D,kBAAkB;AACpB;AACA;EACE,mEAAmE;AACrE;AACA;EACE,kBAAkB;AACpB;AACA;EACE,kBAAkB;EAClB,SAAS;EACT,QAAQ;EACR,YAAY;EACZ,WAAW;EACX,aAAa;EACb,oBAAoB;AACtB;AACA;EACE,kBAAkB;EAClB,sBAAsB;EACtB,YAAY;EACZ,WAAW;EACX,sDAAsD;EACtD,oHAAoH;EACpH,sBAAsB;EACtB,oBAAoB;AACtB;AACA;EACE,sDAAsD;AACxD;AACA;EACE,yDAAyD;AAC3D;AACA;EACE,uDAAuD;AACzD;AACA;EACE,wDAAwD;AAC1D;AACA;EACE,kBAAkB;EAClB,uDAAuD;AACzD;AACA;EACE,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,YAAY;EACZ,WAAW;EACX,UAAU;AACZ;AACA;EACE,kBAAkB;AACpB;;AAEA;EACE,yEAAyE;EACzE,mDAAmD;AACrD;AACA;EACE,wEAAwE;EACxE,kDAAkD;AACpD;AACA;EACE,2EAA2E;EAC3E,qDAAqD;AACvD;AACA;EACE,0EAA0E;EAC1E,oDAAoD;AACtD;;AAEA;;;GAGG;AACH;EACE,yEAAyE;EACzE,mDAAmD;AACrD;AACA;EACE,aAAa;EACb,sBAAsB;EACtB,YAAY;EACZ,uDAAuD;EACvD,gBAAgB;AAClB;AACA;EACE,aAAa;AACf;AACA;EACE,YAAY;EACZ,aAAa;EACb,aAAa;AACf;AACA;EACE,YAAY;EACZ,WAAW;AACb;AACA;;EAEE,YAAY;EACZ,WAAW;AACb;AACA;EACE,qBAAqB;AACvB;AACA;EACE,uBAAuB;AACzB;AACA;EACE,wBAAwB;AAC1B;AACA;EACE,sBAAsB;AACxB;AACA;;;;EAIE,sBAAsB;AACxB;;AAEA;EACE,oDAAoD;EACpD,kBAAkB;EAClB,4CAA4C;EAC5C,6CAA6C;EAC7C,yCAAyC;AAC3C;AACA;EACE,aAAa;AACf;AACA;EACE,YAAY;AACd;AACA;EACE,WAAW;EACX,uBAAuB;EACvB,SAAS;EACT,SAAS;EACT,kCAAkC;EAClC,kBAAkB;EAClB,iBAAiB;AACnB;AACA;EACE,WAAW;EACX,uBAAuB;EACvB,SAAS;EACT,YAAY;EACZ,kCAAkC;EAClC,kBAAkB;EAClB,iBAAiB;AACnB;AACA;EACE,wBAAwB;EACxB,UAAU;EACV,UAAU;EACV,QAAQ;EACR,kCAAkC;EAClC,kBAAkB;EAClB,iBAAiB;AACnB;AACA;EACE,wBAAwB;EACxB,UAAU;EACV,WAAW;EACX,QAAQ;EACR,kCAAkC;EAClC,kBAAkB;EAClB,iBAAiB;AACnB;AACA;EACE,WAAW;EACX,UAAU;EACV,SAAS;EACT,UAAU;EACV,kCAAkC;EAClC,kBAAkB;EAClB,iBAAiB;AACnB;AACA;EACE,WAAW;EACX,UAAU;EACV,WAAW;EACX,SAAS;EACT,kCAAkC;EAClC,kBAAkB;EAClB,iBAAiB;AACnB;AACA;EACE,WAAW;EACX,UAAU;EACV,UAAU;EACV,YAAY;EACZ,kCAAkC;EAClC,kBAAkB;EAClB,iBAAiB;AACnB;AACA;EACE,WAAW;EACX,UAAU;EACV,WAAW;EACX,YAAY;EACZ,kCAAkC;EAClC,kBAAkB;EAClB,iBAAiB;AACnB;AACA;EACE,oDAAoD;EACpD,kBAAkB;EAClB,UAAU;EACV,YAAY;AACd;AACA;EACE,4CAA4C;AAC9C;;AAEA;EACE,sBAAsB;EACtB,kBAAkB;AACpB;AACA;EACE,YAAY;EACZ,WAAW;AACb;AACA;EACE,0BAA0B;EAC1B,oCAAoC;AACtC;AACA;EACE,gBAAgB;EAChB,aAAa;EACb,sBAAsB;EACtB,uBAAuB;AACzB;AACA;EACE,wCAAwC;AAC1C;AACA;EACE,4DAA4D;AAC9D;AACA;EACE,uDAAuD;EACvD,mDAAmD;EACnD,aAAa;EACb,gBAAgB;EAChB,eAAe;AACjB;AACA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;AACA;EACE,iBAAiB;EACjB,YAAY;AACd;AACA;EACE,2BAA2B;AAC7B;AACA;EACE,aAAa;EACb,sBAAsB;EACtB,gBAAgB;EAChB,YAAY;AACd;AACA;EACE,sBAAsB;EACtB,iBAAiB;EACjB,kBAAkB;EAClB,aAAa;AACf;AACA;EACE,eAAe;AACjB;AACA;EACE,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,WAAW;EACX,YAAY;EACZ,UAAU;EACV,WAAW;EACX,oBAAoB;EACpB,kBAAkB;EAClB,mBAAmB;EACnB,oBAAoB;EACpB,oBAAoB;EACpB,sDAAsD;AACxD;AACA;EACE,gBAAgB;EAChB,kBAAkB;EAClB,YAAY;EACZ,kBAAkB;EAClB,aAAa;AACf;AACA;EACE,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,WAAW;EACX,YAAY;EACZ,UAAU;EACV,WAAW;EACX,oBAAoB;EACpB,kBAAkB;EAClB,mBAAmB;EACnB,oBAAoB;EACpB,oBAAoB;EACpB,sDAAsD;AACxD;AACA;EACE,uBAAuB;AACzB;AACA;EACE,wBAAwB;AAC1B;AACA;EACE,uBAAuB;AACzB;AACA;EACE,qBAAqB;AACvB;;AAEA;EACE,kBAAkB;EAClB,gBAAgB;EAChB,YAAY;EACZ,WAAW;AACb;AACA;EACE,oBAAoB;AACtB;AACA;;EAEE,0BAA0B;EAC1B,oCAAoC;AACtC;AACA;EACE,YAAY;AACd;AACA;EACE,YAAY;EACZ,UAAU;AACZ;AACA;EACE,iBAAiB;AACnB;AACA;EACE,eAAe;AACjB;AACA;EACE,gBAAgB;AAClB;AACA;EACE,gBAAgB;AAClB;AACA;EACE,YAAY;EACZ,UAAU;AACZ;AACA;EACE,WAAW;AACb;AACA;EACE,WAAW;EACX,WAAW;AACb;AACA;EACE,iBAAiB;AACnB;AACA;EACE,eAAe;AACjB;AACA;EACE,gBAAgB;AAClB;AACA;EACE,gBAAgB;AAClB;AACA;EACE,WAAW;AACb;AACA;EACE,WAAW;EACX,WAAW;AACb;AACA;EACE,YAAY;EACZ,WAAW;EACX,kBAAkB;AACpB;AACA;EACE,kBAAkB;EAClB,WAAW;EACX,aAAa;EACb,iBAAiB;EACjB,yBAAyB;EACzB,sBAAsB;EACtB,qBAAqB;EACrB,kBAAkB;AACpB;AACA;EACE,0DAA0D;EAC1D,qCAAqC;EACrC,uCAAuC;EACvC,oEAAoE;EACpE,8DAA8D;AAChE;AACA;EACE,kBAAkB;EAClB,YAAY;EACZ,WAAW;AACb;AACA;EACE,YAAY;EACZ,sBAAsB;EACtB,cAAc;EACd,kBAAkB;AACpB;AACA;EACE,YAAY;EACZ,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,UAAU;EACV,oBAAoB;EACpB,4CAA4C;AAC9C;AACA;EACE,qCAAqC,EAAE,sGAAsG;AAC/I;;AAEA;EACE,cAAc;AAChB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,WAAW;EACX,QAAQ;EACR,SAAS;EACT,oBAAoB;EACpB,yDAAyD;EACzD,oBAAoB;EACpB,UAAU;AACZ;AACA;EACE,8DAA8D;AAChE;AACA;EACE,mBAAmB;AACrB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,kBAAkB;EAClB,YAAY;EACZ,aAAa;EACb,eAAe;EACf,mBAAmB;EACnB,gBAAgB;EAChB,mBAAmB;EACnB,uBAAuB;AACzB;AACA;EACE,gBAAgB;EAChB,YAAY;AACd;AACA;EACE,YAAY;EACZ,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,sBAAsB;AACxB;AACA;EACE,kBAAkB;EAClB,uDAAuD;AACzD;AACA;EACE,aAAa;EACb,uEAAuE;EACvE,cAAc;EACd,sBAAsB;EACtB,mDAAmD;EACnD,yDAAyD;AAC3D;AACA;EACE,YAAY;AACd;AACA;EACE,YAAY;AACd;AACA;EACE,YAAY;AACd;AACA;EACE,aAAa;EACb,YAAY;EACZ,YAAY;AACd;AACA;EACE,aAAa;EACb,mBAAmB;EACnB,kBAAkB;EAClB,qBAAqB;EACrB,UAAU;EACV,WAAW;AACb;AACA;EACE,WAAW;AACb;AACA;EACE,uBAAuB;AACzB;AACA;EACE,oDAAoD;AACtD;AACA;EACE,0BAA0B;EAC1B,aAAa;EACb,eAAe;EACf,eAAe;EACf,kBAAkB;EAClB,sBAAsB;AACxB;AACA;EACE,YAAY;EACZ,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,UAAU;EACV,oBAAoB;EACpB,6CAA6C;EAC7C,UAAU;EACV,YAAY;AACd;AACA;EACE,aAAa;EACb,YAAY;AACd","sourcesContent":[".dv-svg {\n  display: inline-block;\n  fill: currentcolor;\n  line-height: 1;\n  stroke: currentcolor;\n  stroke-width: 0;\n}\n.dockview-theme-dark {\n  --dv-paneview-active-outline-color: dodgerblue;\n  --dv-tabs-and-actions-container-font-size: 13px;\n  --dv-tabs-and-actions-container-height: 35px;\n  --dv-drag-over-background-color: rgba(83, 89, 93, 0.5);\n  --dv-drag-over-border-color: white;\n  --dv-tabs-container-scrollbar-color: #888;\n  --dv-icon-hover-background-color: rgba(90, 93, 94, 0.31);\n  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(83, 89, 93, 0.5);\n  --dv-overlay-z-index: 999;\n  --dv-active-sash-transition-duration: 0.1s;\n  --dv-active-sash-transition-delay: 0.5s;\n  --dv-group-view-background-color: #1e1e1e;\n  --dv-tabs-and-actions-container-background-color: #252526;\n  --dv-activegroup-visiblepanel-tab-background-color: #1e1e1e;\n  --dv-activegroup-hiddenpanel-tab-background-color: #2d2d2d;\n  --dv-inactivegroup-visiblepanel-tab-background-color: #1e1e1e;\n  --dv-inactivegroup-hiddenpanel-tab-background-color: #2d2d2d;\n  --dv-tab-divider-color: #1e1e1e;\n  --dv-activegroup-visiblepanel-tab-color: white;\n  --dv-activegroup-hiddenpanel-tab-color: #969696;\n  --dv-inactivegroup-visiblepanel-tab-color: #8f8f8f;\n  --dv-inactivegroup-hiddenpanel-tab-color: #626262;\n  --dv-separator-border: rgb(68, 68, 68);\n  --dv-paneview-header-border-color: rgba(204, 204, 204, 0.2);\n}\n\n.dockview-theme-light {\n  --dv-paneview-active-outline-color: dodgerblue;\n  --dv-tabs-and-actions-container-font-size: 13px;\n  --dv-tabs-and-actions-container-height: 35px;\n  --dv-drag-over-background-color: rgba(83, 89, 93, 0.5);\n  --dv-drag-over-border-color: white;\n  --dv-tabs-container-scrollbar-color: #888;\n  --dv-icon-hover-background-color: rgba(90, 93, 94, 0.31);\n  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(83, 89, 93, 0.5);\n  --dv-overlay-z-index: 999;\n  --dv-active-sash-transition-duration: 0.1s;\n  --dv-active-sash-transition-delay: 0.5s;\n  --dv-group-view-background-color: white;\n  --dv-tabs-and-actions-container-background-color: #f3f3f3;\n  --dv-activegroup-visiblepanel-tab-background-color: white;\n  --dv-activegroup-hiddenpanel-tab-background-color: #ececec;\n  --dv-inactivegroup-visiblepanel-tab-background-color: white;\n  --dv-inactivegroup-hiddenpanel-tab-background-color: #ececec;\n  --dv-tab-divider-color: white;\n  --dv-activegroup-visiblepanel-tab-color: rgb(51, 51, 51);\n  --dv-activegroup-hiddenpanel-tab-color: rgba(51, 51, 51, 0.7);\n  --dv-inactivegroup-visiblepanel-tab-color: rgba(51, 51, 51, 0.7);\n  --dv-inactivegroup-hiddenpanel-tab-color: rgba(51, 51, 51, 0.35);\n  --dv-separator-border: rgba(128, 128, 128, 0.35);\n  --dv-paneview-header-border-color: rgb(51, 51, 51);\n}\n\n.dockview-theme-vs {\n  --dv-paneview-active-outline-color: dodgerblue;\n  --dv-tabs-and-actions-container-font-size: 13px;\n  --dv-tabs-and-actions-container-height: 35px;\n  --dv-drag-over-background-color: rgba(83, 89, 93, 0.5);\n  --dv-drag-over-border-color: white;\n  --dv-tabs-container-scrollbar-color: #888;\n  --dv-icon-hover-background-color: rgba(90, 93, 94, 0.31);\n  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(83, 89, 93, 0.5);\n  --dv-overlay-z-index: 999;\n  --dv-active-sash-transition-duration: 0.1s;\n  --dv-active-sash-transition-delay: 0.5s;\n  --dv-group-view-background-color: #1e1e1e;\n  --dv-tabs-and-actions-container-background-color: #252526;\n  --dv-activegroup-visiblepanel-tab-background-color: #1e1e1e;\n  --dv-activegroup-hiddenpanel-tab-background-color: #2d2d2d;\n  --dv-inactivegroup-visiblepanel-tab-background-color: #1e1e1e;\n  --dv-inactivegroup-hiddenpanel-tab-background-color: #2d2d2d;\n  --dv-tab-divider-color: #1e1e1e;\n  --dv-activegroup-visiblepanel-tab-color: white;\n  --dv-activegroup-hiddenpanel-tab-color: #969696;\n  --dv-inactivegroup-visiblepanel-tab-color: #8f8f8f;\n  --dv-inactivegroup-hiddenpanel-tab-color: #626262;\n  --dv-separator-border: rgb(68, 68, 68);\n  --dv-paneview-header-border-color: rgba(204, 204, 204, 0.2);\n  --dv-tabs-and-actions-container-background-color: #2d2d30;\n  --dv-tabs-and-actions-container-height: 20px;\n  --dv-tabs-and-actions-container-font-size: 11px;\n  --dv-activegroup-visiblepanel-tab-background-color: #007acc;\n  --dv-inactivegroup-visiblepanel-tab-background-color: #3f3f46;\n  --dv-activegroup-visiblepanel-tab-color: white;\n  --dv-activegroup-hiddenpanel-tab-color: white;\n  --dv-inactivegroup-visiblepanel-tab-color: white;\n  --dv-inactivegroup-hiddenpanel-tab-color: white;\n}\n.dockview-theme-vs .dv-groupview.dv-active-group > .dv-tabs-and-actions-container {\n  box-sizing: content-box;\n  border-bottom: 2px solid var(--dv-activegroup-visiblepanel-tab-background-color);\n}\n.dockview-theme-vs .dv-groupview.dv-active-group > .dv-tabs-and-actions-container .dv-tab.dv-active-tab {\n  border-top: 2px solid var(--dv-activegroup-visiblepanel-tab-background-color);\n}\n.dockview-theme-vs .dv-groupview.dv-active-group > .dv-tabs-and-actions-container .dv-tab.dv-inactive-tab {\n  border-top: 2px solid var(--dv-activegroup-hiddenpanel-tab-background-color);\n}\n.dockview-theme-vs .dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container {\n  box-sizing: content-box;\n  border-bottom: 2px solid var(--dv-inactivegroup-visiblepanel-tab-background-color);\n}\n.dockview-theme-vs .dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container .dv-tab.dv-active-tab {\n  border-top: 2px solid var(--dv-inactivegroup-visiblepanel-tab-background-color);\n}\n.dockview-theme-vs .dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container .dv-tab.dv-inactive-tab {\n  border-top: 2px solid var(--dv-inactivegroup-hiddenpanel-tab-background-color);\n}\n\n.dockview-theme-abyss {\n  --dv-paneview-active-outline-color: dodgerblue;\n  --dv-tabs-and-actions-container-font-size: 13px;\n  --dv-tabs-and-actions-container-height: 35px;\n  --dv-drag-over-background-color: rgba(83, 89, 93, 0.5);\n  --dv-drag-over-border-color: white;\n  --dv-tabs-container-scrollbar-color: #888;\n  --dv-icon-hover-background-color: rgba(90, 93, 94, 0.31);\n  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(83, 89, 93, 0.5);\n  --dv-overlay-z-index: 999;\n  --dv-active-sash-transition-duration: 0.1s;\n  --dv-active-sash-transition-delay: 0.5s;\n  --dv-group-view-background-color: #000c18;\n  --dv-tabs-and-actions-container-background-color: #1c1c2a;\n  --dv-activegroup-visiblepanel-tab-background-color: #000c18;\n  --dv-activegroup-hiddenpanel-tab-background-color: #10192c;\n  --dv-inactivegroup-visiblepanel-tab-background-color: #000c18;\n  --dv-inactivegroup-hiddenpanel-tab-background-color: #10192c;\n  --dv-tab-divider-color: #2b2b4a;\n  --dv-activegroup-visiblepanel-tab-color: white;\n  --dv-activegroup-hiddenpanel-tab-color: rgba(255, 255, 255, 0.5);\n  --dv-inactivegroup-visiblepanel-tab-color: rgba(255, 255, 255, 0.5);\n  --dv-inactivegroup-hiddenpanel-tab-color: rgba(255, 255, 255, 0.25);\n  --dv-separator-border: #2b2b4a;\n  --dv-paneview-header-border-color: #2b2b4a;\n  --dv-paneview-active-outline-color: #596f99;\n}\n\n.dockview-theme-dracula {\n  --dv-paneview-active-outline-color: dodgerblue;\n  --dv-tabs-and-actions-container-font-size: 13px;\n  --dv-tabs-and-actions-container-height: 35px;\n  --dv-drag-over-background-color: rgba(83, 89, 93, 0.5);\n  --dv-drag-over-border-color: white;\n  --dv-tabs-container-scrollbar-color: #888;\n  --dv-icon-hover-background-color: rgba(90, 93, 94, 0.31);\n  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(83, 89, 93, 0.5);\n  --dv-overlay-z-index: 999;\n  --dv-active-sash-transition-duration: 0.1s;\n  --dv-active-sash-transition-delay: 0.5s;\n  --dv-group-view-background-color: #282a36;\n  --dv-tabs-and-actions-container-background-color: #191a21;\n  --dv-activegroup-visiblepanel-tab-background-color: #282a36;\n  --dv-activegroup-hiddenpanel-tab-background-color: #21222c;\n  --dv-inactivegroup-visiblepanel-tab-background-color: #282a36;\n  --dv-inactivegroup-hiddenpanel-tab-background-color: #21222c;\n  --dv-tab-divider-color: #191a21;\n  --dv-activegroup-visiblepanel-tab-color: rgb(248, 248, 242);\n  --dv-activegroup-hiddenpanel-tab-color: rgb(98, 114, 164);\n  --dv-inactivegroup-visiblepanel-tab-color: rgba(248, 248, 242, 0.5);\n  --dv-inactivegroup-hiddenpanel-tab-color: rgba(98, 114, 164, 0.5);\n  --dv-separator-border: #bd93f9;\n  --dv-paneview-header-border-color: #bd93f9;\n  --dv-paneview-active-outline-color: #6272a4;\n}\n.dockview-theme-dracula .dv-groupview.dv-active-group > .dv-tabs-and-actions-container > .dv-tabs-container > .dv-tab.dv-active-tab {\n  position: relative;\n}\n.dockview-theme-dracula .dv-groupview.dv-active-group > .dv-tabs-and-actions-container > .dv-tabs-container > .dv-tab.dv-active-tab::after {\n  position: absolute;\n  left: 0px;\n  top: 0px;\n  content: \"\";\n  width: 100%;\n  height: 1px;\n  background-color: #94527e;\n  z-index: 999;\n}\n.dockview-theme-dracula .dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container > .dv-tabs-container > .dv-tab.dv-active-tab {\n  position: relative;\n}\n.dockview-theme-dracula .dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container > .dv-tabs-container > .dv-tab.dv-active-tab::after {\n  position: absolute;\n  left: 0px;\n  bottom: 0px;\n  content: \"\";\n  width: 100%;\n  height: 1px;\n  background-color: #5e3d5a;\n  z-index: 999;\n}\n\n.dockview-theme-replit {\n  --dv-paneview-active-outline-color: dodgerblue;\n  --dv-tabs-and-actions-container-font-size: 13px;\n  --dv-tabs-and-actions-container-height: 35px;\n  --dv-drag-over-background-color: rgba(83, 89, 93, 0.5);\n  --dv-drag-over-border-color: white;\n  --dv-tabs-container-scrollbar-color: #888;\n  --dv-icon-hover-background-color: rgba(90, 93, 94, 0.31);\n  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(83, 89, 93, 0.5);\n  --dv-overlay-z-index: 999;\n  --dv-active-sash-transition-duration: 0.1s;\n  --dv-active-sash-transition-delay: 0.5s;\n  --dv-group-view-background-color: #ebeced;\n  --dv-tabs-and-actions-container-background-color: #fcfcfc;\n  --dv-activegroup-visiblepanel-tab-background-color: #f0f1f2;\n  --dv-activegroup-hiddenpanel-tab-background-color: #fcfcfc;\n  --dv-inactivegroup-visiblepanel-tab-background-color: #f0f1f2;\n  --dv-inactivegroup-hiddenpanel-tab-background-color: #fcfcfc;\n  --dv-tab-divider-color: transparent;\n  --dv-activegroup-visiblepanel-tab-color: rgb(51, 51, 51);\n  --dv-activegroup-hiddenpanel-tab-color: rgb(51, 51, 51);\n  --dv-inactivegroup-visiblepanel-tab-color: rgb(51, 51, 51);\n  --dv-inactivegroup-hiddenpanel-tab-color: rgb(51, 51, 51);\n  --dv-separator-border: transparent;\n  --dv-paneview-header-border-color: rgb(51, 51, 51);\n  --dv-separator-handle-background-color: #cfd1d3;\n  --dv-separator-handle-hover-background-color: #babbbb;\n}\n.dockview-theme-replit .dv-resize-container:has(> .dv-groupview) {\n  border-radius: 8px;\n}\n.dockview-theme-replit .dv-groupview {\n  overflow: hidden;\n  border-radius: 10px;\n}\n.dockview-theme-replit .dv-groupview .dv-tabs-and-actions-container {\n  border-bottom: 1px solid rgba(128, 128, 128, 0.35);\n}\n.dockview-theme-replit .dv-groupview .dv-tabs-and-actions-container .dv-tab {\n  margin: 4px;\n  border-radius: 8px;\n}\n.dockview-theme-replit .dv-groupview .dv-tabs-and-actions-container .dv-tab .dv-svg {\n  height: 8px;\n  width: 8px;\n}\n.dockview-theme-replit .dv-groupview .dv-tabs-and-actions-container .dv-tab:hover {\n  background-color: #e4e5e6 !important;\n}\n.dockview-theme-replit .dv-groupview .dv-content-container {\n  background-color: #fcfcfc;\n}\n.dockview-theme-replit .dv-groupview.dv-active-group {\n  border: 1px solid rgba(128, 128, 128, 0.35);\n}\n.dockview-theme-replit .dv-groupview.dv-inactive-group {\n  border: 1px solid transparent;\n}\n.dockview-theme-replit .dv-vertical > .dv-sash-container > .dv-sash:not(.disabled)::after {\n  content: \"\";\n  height: 4px;\n  width: 40px;\n  border-radius: 2px;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--dv-separator-handle-background-color);\n  position: absolute;\n}\n.dockview-theme-replit .dv-vertical > .dv-sash-container > .dv-sash:not(.disabled):hover::after {\n  background-color: var(--dv-separator-handle-hover-background-color);\n}\n.dockview-theme-replit .dv-horizontal > .dv-sash-container > .dv-sash:not(.disabled)::after {\n  content: \"\";\n  height: 40px;\n  width: 4px;\n  border-radius: 2px;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--dv-separator-handle-background-color);\n  position: absolute;\n}\n.dockview-theme-replit .dv-horizontal > .dv-sash-container > .dv-sash:not(.disabled):hover::after {\n  background-color: var(--dv-separator-handle-hover-background-color);\n}\n.dv-drop-target {\n  position: relative;\n}\n.dv-drop-target > .dv-drop-target-dropzone {\n  position: absolute;\n  left: 0px;\n  top: 0px;\n  height: 100%;\n  width: 100%;\n  z-index: 1000;\n  pointer-events: none;\n}\n.dv-drop-target > .dv-drop-target-dropzone > .dv-drop-target-selection {\n  position: relative;\n  box-sizing: border-box;\n  height: 100%;\n  width: 100%;\n  background-color: var(--dv-drag-over-background-color);\n  transition: top 70ms ease-out, left 70ms ease-out, width 70ms ease-out, height 70ms ease-out, opacity 0.15s ease-out;\n  will-change: transform;\n  pointer-events: none;\n}\n.dv-drop-target > .dv-drop-target-dropzone > .dv-drop-target-selection.dv-drop-target-top.dv-drop-target-small-vertical {\n  border-top: 1px solid var(--dv-drag-over-border-color);\n}\n.dv-drop-target > .dv-drop-target-dropzone > .dv-drop-target-selection.dv-drop-target-bottom.dv-drop-target-small-vertical {\n  border-bottom: 1px solid var(--dv-drag-over-border-color);\n}\n.dv-drop-target > .dv-drop-target-dropzone > .dv-drop-target-selection.dv-drop-target-left.dv-drop-target-small-horizontal {\n  border-left: 1px solid var(--dv-drag-over-border-color);\n}\n.dv-drop-target > .dv-drop-target-dropzone > .dv-drop-target-selection.dv-drop-target-right.dv-drop-target-small-horizontal {\n  border-right: 1px solid var(--dv-drag-over-border-color);\n}\n.dv-dockview {\n  position: relative;\n  background-color: var(--dv-group-view-background-color);\n}\n.dv-dockview .dv-watermark-container {\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  height: 100%;\n  width: 100%;\n  z-index: 1;\n}\n.dv-dockview .dv-overlay-render-container {\n  position: relative;\n}\n\n.dv-groupview.dv-active-group > .dv-tabs-and-actions-container > .dv-tabs-container > .dv-tab.dv-active-tab {\n  background-color: var(--dv-activegroup-visiblepanel-tab-background-color);\n  color: var(--dv-activegroup-visiblepanel-tab-color);\n}\n.dv-groupview.dv-active-group > .dv-tabs-and-actions-container > .dv-tabs-container > .dv-tab.dv-inactive-tab {\n  background-color: var(--dv-activegroup-hiddenpanel-tab-background-color);\n  color: var(--dv-activegroup-hiddenpanel-tab-color);\n}\n.dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container > .dv-tabs-container > .dv-tab.dv-active-tab {\n  background-color: var(--dv-inactivegroup-visiblepanel-tab-background-color);\n  color: var(--dv-inactivegroup-visiblepanel-tab-color);\n}\n.dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container > .dv-tabs-container > .dv-tab.dv-inactive-tab {\n  background-color: var(--dv-inactivegroup-hiddenpanel-tab-background-color);\n  color: var(--dv-inactivegroup-hiddenpanel-tab-color);\n}\n\n/**\n * when a tab is dragged we lose the above stylings because they are conditional on parent elements\n * therefore we also set some stylings for the dragging event\n **/\n.dv-tab.dv-tab-dragging {\n  background-color: var(--dv-activegroup-visiblepanel-tab-background-color);\n  color: var(--dv-activegroup-visiblepanel-tab-color);\n}\n.dv-groupview {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background-color: var(--dv-group-view-background-color);\n  overflow: hidden;\n}\n.dv-groupview:focus {\n  outline: none;\n}\n.dv-groupview > .dv-content-container {\n  flex-grow: 1;\n  min-height: 0;\n  outline: none;\n}\n.dv-root-wrapper {\n  height: 100%;\n  width: 100%;\n}\n.dv-grid-view,\n.dv-branch-node {\n  height: 100%;\n  width: 100%;\n}\n.dv-debug .dv-resize-container .dv-resize-handle-top {\n  background-color: red;\n}\n.dv-debug .dv-resize-container .dv-resize-handle-bottom {\n  background-color: green;\n}\n.dv-debug .dv-resize-container .dv-resize-handle-left {\n  background-color: yellow;\n}\n.dv-debug .dv-resize-container .dv-resize-handle-right {\n  background-color: blue;\n}\n.dv-debug .dv-resize-container .dv-resize-handle-topleft,\n.dv-debug .dv-resize-container .dv-resize-handle-topright,\n.dv-debug .dv-resize-container .dv-resize-handle-bottomleft,\n.dv-debug .dv-resize-container .dv-resize-handle-bottomright {\n  background-color: cyan;\n}\n\n.dv-resize-container {\n  --dv-overlay-z-index: var(--dv-overlay-z-index, 999);\n  position: absolute;\n  z-index: calc(var(--dv-overlay-z-index) - 2);\n  border: 1px solid var(--dv-tab-divider-color);\n  box-shadow: var(--dv-floating-box-shadow);\n}\n.dv-resize-container.dv-hidden {\n  display: none;\n}\n.dv-resize-container.dv-resize-container-dragging {\n  opacity: 0.5;\n}\n.dv-resize-container .dv-resize-handle-top {\n  height: 4px;\n  width: calc(100% - 8px);\n  left: 4px;\n  top: -2px;\n  z-index: var(--dv-overlay-z-index);\n  position: absolute;\n  cursor: ns-resize;\n}\n.dv-resize-container .dv-resize-handle-bottom {\n  height: 4px;\n  width: calc(100% - 8px);\n  left: 4px;\n  bottom: -2px;\n  z-index: var(--dv-overlay-z-index);\n  position: absolute;\n  cursor: ns-resize;\n}\n.dv-resize-container .dv-resize-handle-left {\n  height: calc(100% - 8px);\n  width: 4px;\n  left: -2px;\n  top: 4px;\n  z-index: var(--dv-overlay-z-index);\n  position: absolute;\n  cursor: ew-resize;\n}\n.dv-resize-container .dv-resize-handle-right {\n  height: calc(100% - 8px);\n  width: 4px;\n  right: -2px;\n  top: 4px;\n  z-index: var(--dv-overlay-z-index);\n  position: absolute;\n  cursor: ew-resize;\n}\n.dv-resize-container .dv-resize-handle-topleft {\n  height: 4px;\n  width: 4px;\n  top: -2px;\n  left: -2px;\n  z-index: var(--dv-overlay-z-index);\n  position: absolute;\n  cursor: nw-resize;\n}\n.dv-resize-container .dv-resize-handle-topright {\n  height: 4px;\n  width: 4px;\n  right: -2px;\n  top: -2px;\n  z-index: var(--dv-overlay-z-index);\n  position: absolute;\n  cursor: ne-resize;\n}\n.dv-resize-container .dv-resize-handle-bottomleft {\n  height: 4px;\n  width: 4px;\n  left: -2px;\n  bottom: -2px;\n  z-index: var(--dv-overlay-z-index);\n  position: absolute;\n  cursor: sw-resize;\n}\n.dv-resize-container .dv-resize-handle-bottomright {\n  height: 4px;\n  width: 4px;\n  right: -2px;\n  bottom: -2px;\n  z-index: var(--dv-overlay-z-index);\n  position: absolute;\n  cursor: se-resize;\n}\n.dv-render-overlay {\n  --dv-overlay-z-index: var(--dv-overlay-z-index, 999);\n  position: absolute;\n  z-index: 1;\n  height: 100%;\n}\n.dv-render-overlay.dv-render-overlay-float {\n  z-index: calc(var(--dv-overlay-z-index) - 1);\n}\n\n.dv-debug .dv-render-overlay {\n  outline: 1px solid red;\n  outline-offset: -1;\n}\n.dv-pane-container {\n  height: 100%;\n  width: 100%;\n}\n.dv-pane-container.dv-animated .dv-view {\n  transition-duration: 0.15s;\n  transition-timing-function: ease-out;\n}\n.dv-pane-container .dv-view {\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  padding: 0px !important;\n}\n.dv-pane-container .dv-view:not(:first-child)::before {\n  background-color: transparent !important;\n}\n.dv-pane-container .dv-view:not(:first-child) .dv-pane > .dv-pane-header {\n  border-top: 1px solid var(--dv-paneview-header-border-color);\n}\n.dv-pane-container .dv-view .dv-default-header {\n  background-color: var(--dv-group-view-background-color);\n  color: var(--dv-activegroup-visiblepanel-tab-color);\n  display: flex;\n  padding: 0px 8px;\n  cursor: pointer;\n}\n.dv-pane-container .dv-view .dv-default-header .dv-pane-header-icon {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.dv-pane-container .dv-view .dv-default-header > span {\n  padding-left: 8px;\n  flex-grow: 1;\n}\n.dv-pane-container:first-of-type > .dv-pane > .dv-pane-header {\n  border-top: none !important;\n}\n.dv-pane-container .dv-pane {\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  height: 100%;\n}\n.dv-pane-container .dv-pane .dv-pane-header {\n  box-sizing: border-box;\n  user-select: none;\n  position: relative;\n  outline: none;\n}\n.dv-pane-container .dv-pane .dv-pane-header.dv-pane-draggable {\n  cursor: pointer;\n}\n.dv-pane-container .dv-pane .dv-pane-header:focus:before, .dv-pane-container .dv-pane .dv-pane-header:focus-within:before {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 5;\n  content: \"\";\n  pointer-events: none;\n  outline: 1px solid;\n  outline-width: -1px;\n  outline-style: solid;\n  outline-offset: -1px;\n  outline-color: var(--dv-paneview-active-outline-color);\n}\n.dv-pane-container .dv-pane .dv-pane-body {\n  overflow-y: auto;\n  overflow-x: hidden;\n  flex-grow: 1;\n  position: relative;\n  outline: none;\n}\n.dv-pane-container .dv-pane .dv-pane-body:focus:before, .dv-pane-container .dv-pane .dv-pane-body:focus-within:before {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 5;\n  content: \"\";\n  pointer-events: none;\n  outline: 1px solid;\n  outline-width: -1px;\n  outline-style: solid;\n  outline-offset: -1px;\n  outline-color: var(--dv-paneview-active-outline-color);\n}\n.dv-debug .dv-split-view-container .dv-sash-container .dv-sash.dv-enabled {\n  background-color: black;\n}\n.dv-debug .dv-split-view-container .dv-sash-container .dv-sash.dv-disabled {\n  background-color: orange;\n}\n.dv-debug .dv-split-view-container .dv-sash-container .dv-sash.dv-maximum {\n  background-color: green;\n}\n.dv-debug .dv-split-view-container .dv-sash-container .dv-sash.dv-minimum {\n  background-color: red;\n}\n\n.dv-split-view-container {\n  position: relative;\n  overflow: hidden;\n  height: 100%;\n  width: 100%;\n}\n.dv-split-view-container.dv-splitview-disabled > .dv-sash-container > .dv-sash {\n  pointer-events: none;\n}\n.dv-split-view-container.dv-animation .dv-view,\n.dv-split-view-container.dv-animation .dv-sash {\n  transition-duration: 0.15s;\n  transition-timing-function: ease-out;\n}\n.dv-split-view-container.dv-horizontal {\n  height: 100%;\n}\n.dv-split-view-container.dv-horizontal > .dv-sash-container > .dv-sash {\n  height: 100%;\n  width: 4px;\n}\n.dv-split-view-container.dv-horizontal > .dv-sash-container > .dv-sash.dv-enabled {\n  cursor: ew-resize;\n}\n.dv-split-view-container.dv-horizontal > .dv-sash-container > .dv-sash.dv-disabled {\n  cursor: default;\n}\n.dv-split-view-container.dv-horizontal > .dv-sash-container > .dv-sash.dv-maximum {\n  cursor: w-resize;\n}\n.dv-split-view-container.dv-horizontal > .dv-sash-container > .dv-sash.dv-minimum {\n  cursor: e-resize;\n}\n.dv-split-view-container.dv-horizontal > .dv-view-container > .dv-view:not(:first-child)::before {\n  height: 100%;\n  width: 1px;\n}\n.dv-split-view-container.dv-vertical {\n  width: 100%;\n}\n.dv-split-view-container.dv-vertical > .dv-sash-container > .dv-sash {\n  width: 100%;\n  height: 4px;\n}\n.dv-split-view-container.dv-vertical > .dv-sash-container > .dv-sash.dv-enabled {\n  cursor: ns-resize;\n}\n.dv-split-view-container.dv-vertical > .dv-sash-container > .dv-sash.dv-disabled {\n  cursor: default;\n}\n.dv-split-view-container.dv-vertical > .dv-sash-container > .dv-sash.dv-maximum {\n  cursor: n-resize;\n}\n.dv-split-view-container.dv-vertical > .dv-sash-container > .dv-sash.dv-minimum {\n  cursor: s-resize;\n}\n.dv-split-view-container.dv-vertical > .dv-view-container > .dv-view {\n  width: 100%;\n}\n.dv-split-view-container.dv-vertical > .dv-view-container > .dv-view:not(:first-child)::before {\n  height: 1px;\n  width: 100%;\n}\n.dv-split-view-container .dv-sash-container {\n  height: 100%;\n  width: 100%;\n  position: absolute;\n}\n.dv-split-view-container .dv-sash-container .dv-sash {\n  position: absolute;\n  z-index: 99;\n  outline: none;\n  user-select: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  touch-action: none;\n}\n.dv-split-view-container .dv-sash-container .dv-sash:not(.disabled):active, .dv-split-view-container .dv-sash-container .dv-sash:not(.disabled):hover {\n  background-color: var(--dv-active-sash-color, transparent);\n  transition-property: background-color;\n  transition-timing-function: ease-in-out;\n  transition-duration: var(--dv-active-sash-transition-duration, 0.1s);\n  transition-delay: var(--dv-active-sash-transition-delay, 0.5s);\n}\n.dv-split-view-container .dv-view-container {\n  position: relative;\n  height: 100%;\n  width: 100%;\n}\n.dv-split-view-container .dv-view-container .dv-view {\n  height: 100%;\n  box-sizing: border-box;\n  overflow: auto;\n  position: absolute;\n}\n.dv-split-view-container.dv-separator-border .dv-view:not(:first-child)::before {\n  content: \" \";\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 5;\n  pointer-events: none;\n  background-color: var(--dv-separator-border);\n}\n.dv-dragged {\n  transform: translate3d(0px, 0px, 0px); /* forces tab to be drawn on a separate layer (see https://github.com/microsoft/vscode/issues/18733) */\n}\n\n.dv-tab {\n  flex-shrink: 0;\n}\n.dv-tab:focus-within, .dv-tab:focus {\n  position: relative;\n}\n.dv-tab:focus-within::after, .dv-tab:focus::after {\n  position: absolute;\n  content: \"\";\n  height: 100%;\n  width: 100%;\n  top: 0px;\n  left: 0px;\n  pointer-events: none;\n  outline: 1px solid var(--dv-tab-divider-color) !important;\n  outline-offset: -1px;\n  z-index: 5;\n}\n.dv-tab.dv-tab-dragging .dv-default-tab-action {\n  background-color: var(--dv-activegroup-visiblepanel-tab-color);\n}\n.dv-tab.dv-active-tab .dv-default-tab .dv-default-tab-action {\n  visibility: visible;\n}\n.dv-tab.dv-inactive-tab .dv-default-tab .dv-default-tab-action {\n  visibility: hidden;\n}\n.dv-tab.dv-inactive-tab .dv-default-tab:hover .dv-default-tab-action {\n  visibility: visible;\n}\n.dv-tab .dv-default-tab {\n  position: relative;\n  height: 100%;\n  display: flex;\n  min-width: 80px;\n  align-items: center;\n  padding: 0px 8px;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n}\n.dv-tab .dv-default-tab .dv-default-tab-content {\n  padding: 0px 8px;\n  flex-grow: 1;\n}\n.dv-tab .dv-default-tab .dv-default-tab-action {\n  padding: 4px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-sizing: border-box;\n}\n.dv-tab .dv-default-tab .dv-default-tab-action:hover {\n  border-radius: 2px;\n  background-color: var(--dv-icon-hover-background-color);\n}\n.dv-tabs-and-actions-container {\n  display: flex;\n  background-color: var(--dv-tabs-and-actions-container-background-color);\n  flex-shrink: 0;\n  box-sizing: border-box;\n  height: var(--dv-tabs-and-actions-container-height);\n  font-size: var(--dv-tabs-and-actions-container-font-size);\n}\n.dv-tabs-and-actions-container.dv-single-tab.dv-full-width-single-tab .dv-tabs-container {\n  flex-grow: 1;\n}\n.dv-tabs-and-actions-container.dv-single-tab.dv-full-width-single-tab .dv-tabs-container .dv-tab {\n  flex-grow: 1;\n}\n.dv-tabs-and-actions-container.dv-single-tab.dv-full-width-single-tab .dv-void-container {\n  flex-grow: 0;\n}\n.dv-tabs-and-actions-container .dv-void-container {\n  display: flex;\n  flex-grow: 1;\n  cursor: grab;\n}\n.dv-tabs-and-actions-container .dv-tabs-container {\n  display: flex;\n  overflow-x: overlay;\n  overflow-y: hidden;\n  scrollbar-width: thin;\n  /* Track */\n  /* Handle */\n}\n.dv-tabs-and-actions-container .dv-tabs-container::-webkit-scrollbar {\n  height: 3px;\n}\n.dv-tabs-and-actions-container .dv-tabs-container::-webkit-scrollbar-track {\n  background: transparent;\n}\n.dv-tabs-and-actions-container .dv-tabs-container::-webkit-scrollbar-thumb {\n  background: var(--dv-tabs-container-scrollbar-color);\n}\n.dv-tabs-and-actions-container .dv-tabs-container .dv-tab {\n  -webkit-user-drag: element;\n  outline: none;\n  min-width: 75px;\n  cursor: pointer;\n  position: relative;\n  box-sizing: border-box;\n}\n.dv-tabs-and-actions-container .dv-tabs-container .dv-tab:not(:first-child)::before {\n  content: \" \";\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 5;\n  pointer-events: none;\n  background-color: var(--dv-tab-divider-color);\n  width: 1px;\n  height: 100%;\n}\n.dv-watermark {\n  display: flex;\n  height: 100%;\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {



/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
module.exports = function (cssWithMappingToString) {
  var list = [];

  // return the list of modules as css string
  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";
      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }
      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }
      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }
      content += cssWithMappingToString(item);
      if (needLayer) {
        content += "}";
      }
      if (item[2]) {
        content += "}";
      }
      if (item[4]) {
        content += "}";
      }
      return content;
    }).join("");
  };

  // import a list of modules into the list
  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }
    var alreadyImportedModules = {};
    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];
        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }
    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);
      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }
      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }
      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }
      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }
      list.push(item);
    }
  };
  return list;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/sourceMaps.js":
/*!************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/sourceMaps.js ***!
  \************************************************************/
/***/ ((module) => {



module.exports = function (item) {
  var content = item[1];
  var cssMapping = item[3];
  if (!cssMapping) {
    return content;
  }
  if (typeof btoa === "function") {
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
    var sourceMapping = "/*# ".concat(data, " */");
    return [content].concat([sourceMapping]).join("\n");
  }
  return [content].join("\n");
};

/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/api/component.api.js":
/*!******************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/api/component.api.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DockviewApi: () => (/* binding */ DockviewApi),
/* harmony export */   GridviewApi: () => (/* binding */ GridviewApi),
/* harmony export */   PaneviewApi: () => (/* binding */ PaneviewApi),
/* harmony export */   SplitviewApi: () => (/* binding */ SplitviewApi)
/* harmony export */ });
class SplitviewApi {
    /**
     * The minimum size  the component can reach where size is measured in the direction of orientation provided.
     */
    get minimumSize() {
        return this.component.minimumSize;
    }
    /**
     * The maximum size the component can reach where size is measured in the direction of orientation provided.
     */
    get maximumSize() {
        return this.component.maximumSize;
    }
    /**
     * Width of the component.
     */
    get width() {
        return this.component.width;
    }
    /**
     * Height of the component.
     */
    get height() {
        return this.component.height;
    }
    /**
     * The current number of panels.
     */
    get length() {
        return this.component.length;
    }
    /**
     * The current orientation of the component.
     */
    get orientation() {
        return this.component.orientation;
    }
    /**
     * The list of current panels.
     */
    get panels() {
        return this.component.panels;
    }
    /**
     * Invoked after a layout is loaded through the `fromJSON` method.
     */
    get onDidLayoutFromJSON() {
        return this.component.onDidLayoutFromJSON;
    }
    /**
     * Invoked whenever any aspect of the layout changes.
     * If listening to this event it may be worth debouncing ouputs.
     */
    get onDidLayoutChange() {
        return this.component.onDidLayoutChange;
    }
    /**
     * Invoked when a view is added.
     */
    get onDidAddView() {
        return this.component.onDidAddView;
    }
    /**
     * Invoked when a view is removed.
     */
    get onDidRemoveView() {
        return this.component.onDidRemoveView;
    }
    constructor(component) {
        this.component = component;
    }
    /**
     * Removes an existing panel and optionally provide a `Sizing` method
     * for the subsequent resize.
     */
    removePanel(panel, sizing) {
        this.component.removePanel(panel, sizing);
    }
    /**
     * Focus the component.
     */
    focus() {
        this.component.focus();
    }
    /**
     * Get the reference to a panel given it's `string` id.
     */
    getPanel(id) {
        return this.component.getPanel(id);
    }
    /**
     * Layout the panel with a width and height.
     */
    layout(width, height) {
        return this.component.layout(width, height);
    }
    /**
     * Add a new panel and return the created instance.
     */
    addPanel(options) {
        return this.component.addPanel(options);
    }
    /**
     * Move a panel given it's current and desired index.
     */
    movePanel(from, to) {
        this.component.movePanel(from, to);
    }
    /**
     * Deserialize a layout to built a splitivew.
     */
    fromJSON(data) {
        this.component.fromJSON(data);
    }
    /** Serialize a layout */
    toJSON() {
        return this.component.toJSON();
    }
    /**
     * Remove all panels and clear the component.
     */
    clear() {
        this.component.clear();
    }
    /**
     * Update configuratable options.
     */
    updateOptions(options) {
        this.component.updateOptions(options);
    }
    /**
     * Release resources and teardown component. Do not call when using framework versions of dockview.
     */
    dispose() {
        this.component.dispose();
    }
}
class PaneviewApi {
    /**
     * The minimum size  the component can reach where size is measured in the direction of orientation provided.
     */
    get minimumSize() {
        return this.component.minimumSize;
    }
    /**
     * The maximum size the component can reach where size is measured in the direction of orientation provided.
     */
    get maximumSize() {
        return this.component.maximumSize;
    }
    /**
     * Width of the component.
     */
    get width() {
        return this.component.width;
    }
    /**
     * Height of the component.
     */
    get height() {
        return this.component.height;
    }
    /**
     * All panel objects.
     */
    get panels() {
        return this.component.panels;
    }
    /**
     * Invoked when any layout change occures, an aggregation of many events.
     */
    get onDidLayoutChange() {
        return this.component.onDidLayoutChange;
    }
    /**
     * Invoked after a layout is deserialzied using the `fromJSON` method.
     */
    get onDidLayoutFromJSON() {
        return this.component.onDidLayoutFromJSON;
    }
    /**
     * Invoked when a panel is added. May be called multiple times when moving panels.
     */
    get onDidAddView() {
        return this.component.onDidAddView;
    }
    /**
     * Invoked when a panel is removed. May be called multiple times when moving panels.
     */
    get onDidRemoveView() {
        return this.component.onDidRemoveView;
    }
    /**
     * Invoked when a Drag'n'Drop event occurs that the component was unable to handle. Exposed for custom Drag'n'Drop functionality.
     */
    get onDidDrop() {
        return this.component.onDidDrop;
    }
    get onUnhandledDragOverEvent() {
        return this.component.onUnhandledDragOverEvent;
    }
    constructor(component) {
        this.component = component;
    }
    /**
     * Remove a panel given the panel object.
     */
    removePanel(panel) {
        this.component.removePanel(panel);
    }
    /**
     * Get a panel object given a `string` id. May return `undefined`.
     */
    getPanel(id) {
        return this.component.getPanel(id);
    }
    /**
     * Move a panel given it's current and desired index.
     */
    movePanel(from, to) {
        this.component.movePanel(from, to);
    }
    /**
     *  Focus the component. Will try to focus an active panel if one exists.
     */
    focus() {
        this.component.focus();
    }
    /**
     * Force resize the component to an exact width and height. Read about auto-resizing before using.
     */
    layout(width, height) {
        this.component.layout(width, height);
    }
    /**
     * Add a panel and return the created object.
     */
    addPanel(options) {
        return this.component.addPanel(options);
    }
    /**
     * Create a component from a serialized object.
     */
    fromJSON(data) {
        this.component.fromJSON(data);
    }
    /**
     * Create a serialized object of the current component.
     */
    toJSON() {
        return this.component.toJSON();
    }
    /**
     * Reset the component back to an empty and default state.
     */
    clear() {
        this.component.clear();
    }
    /**
     * Update configuratable options.
     */
    updateOptions(options) {
        this.component.updateOptions(options);
    }
    /**
     * Release resources and teardown component. Do not call when using framework versions of dockview.
     */
    dispose() {
        this.component.dispose();
    }
}
class GridviewApi {
    /**
     * Width of the component.
     */
    get width() {
        return this.component.width;
    }
    /**
     * Height of the component.
     */
    get height() {
        return this.component.height;
    }
    /**
     * Minimum height of the component.
     */
    get minimumHeight() {
        return this.component.minimumHeight;
    }
    /**
     * Maximum height of the component.
     */
    get maximumHeight() {
        return this.component.maximumHeight;
    }
    /**
     * Minimum width of the component.
     */
    get minimumWidth() {
        return this.component.minimumWidth;
    }
    /**
     * Maximum width of the component.
     */
    get maximumWidth() {
        return this.component.maximumWidth;
    }
    /**
     * Invoked when any layout change occures, an aggregation of many events.
     */
    get onDidLayoutChange() {
        return this.component.onDidLayoutChange;
    }
    /**
     * Invoked when a panel is added. May be called multiple times when moving panels.
     */
    get onDidAddPanel() {
        return this.component.onDidAddGroup;
    }
    /**
     * Invoked when a panel is removed. May be called multiple times when moving panels.
     */
    get onDidRemovePanel() {
        return this.component.onDidRemoveGroup;
    }
    /**
     * Invoked when the active panel changes. May be undefined if no panel is active.
     */
    get onDidActivePanelChange() {
        return this.component.onDidActiveGroupChange;
    }
    /**
     * Invoked after a layout is deserialzied using the `fromJSON` method.
     */
    get onDidLayoutFromJSON() {
        return this.component.onDidLayoutFromJSON;
    }
    /**
     * All panel objects.
     */
    get panels() {
        return this.component.groups;
    }
    /**
     * Current orientation. Can be changed after initialization.
     */
    get orientation() {
        return this.component.orientation;
    }
    set orientation(value) {
        this.component.updateOptions({ orientation: value });
    }
    constructor(component) {
        this.component = component;
    }
    /**
     *  Focus the component. Will try to focus an active panel if one exists.
     */
    focus() {
        this.component.focus();
    }
    /**
     * Force resize the component to an exact width and height. Read about auto-resizing before using.
     */
    layout(width, height, force = false) {
        this.component.layout(width, height, force);
    }
    /**
     * Add a panel and return the created object.
     */
    addPanel(options) {
        return this.component.addPanel(options);
    }
    /**
     * Remove a panel given the panel object.
     */
    removePanel(panel, sizing) {
        this.component.removePanel(panel, sizing);
    }
    /**
     * Move a panel in a particular direction relative to another panel.
     */
    movePanel(panel, options) {
        this.component.movePanel(panel, options);
    }
    /**
     * Get a panel object given a `string` id. May return `undefined`.
     */
    getPanel(id) {
        return this.component.getPanel(id);
    }
    /**
     * Create a component from a serialized object.
     */
    fromJSON(data) {
        return this.component.fromJSON(data);
    }
    /**
     * Create a serialized object of the current component.
     */
    toJSON() {
        return this.component.toJSON();
    }
    /**
     * Reset the component back to an empty and default state.
     */
    clear() {
        this.component.clear();
    }
    updateOptions(options) {
        this.component.updateOptions(options);
    }
    /**
     * Release resources and teardown component. Do not call when using framework versions of dockview.
     */
    dispose() {
        this.component.dispose();
    }
}
class DockviewApi {
    /**
     * The unique identifier for this instance. Used to manage scope of Drag'n'Drop events.
     */
    get id() {
        return this.component.id;
    }
    /**
     * Width of the component.
     */
    get width() {
        return this.component.width;
    }
    /**
     * Height of the component.
     */
    get height() {
        return this.component.height;
    }
    /**
     * Minimum height of the component.
     */
    get minimumHeight() {
        return this.component.minimumHeight;
    }
    /**
     * Maximum height of the component.
     */
    get maximumHeight() {
        return this.component.maximumHeight;
    }
    /**
     * Minimum width of the component.
     */
    get minimumWidth() {
        return this.component.minimumWidth;
    }
    /**
     * Maximum width of the component.
     */
    get maximumWidth() {
        return this.component.maximumWidth;
    }
    /**
     * Total number of groups.
     */
    get size() {
        return this.component.size;
    }
    /**
     * Total number of panels.
     */
    get totalPanels() {
        return this.component.totalPanels;
    }
    get gap() {
        return this.component.gap;
    }
    /**
     * Invoked when the active group changes. May be undefined if no group is active.
     */
    get onDidActiveGroupChange() {
        return this.component.onDidActiveGroupChange;
    }
    /**
     * Invoked when a group is added. May be called multiple times when moving groups.
     */
    get onDidAddGroup() {
        return this.component.onDidAddGroup;
    }
    /**
     * Invoked when a group is removed. May be called multiple times when moving groups.
     */
    get onDidRemoveGroup() {
        return this.component.onDidRemoveGroup;
    }
    /**
     * Invoked when the active panel changes. May be undefined if no panel is active.
     */
    get onDidActivePanelChange() {
        return this.component.onDidActivePanelChange;
    }
    /**
     * Invoked when a panel is added. May be called multiple times when moving panels.
     */
    get onDidAddPanel() {
        return this.component.onDidAddPanel;
    }
    /**
     * Invoked when a panel is removed. May be called multiple times when moving panels.
     */
    get onDidRemovePanel() {
        return this.component.onDidRemovePanel;
    }
    get onDidMovePanel() {
        return this.component.onDidMovePanel;
    }
    /**
     * Invoked after a layout is deserialzied using the `fromJSON` method.
     */
    get onDidLayoutFromJSON() {
        return this.component.onDidLayoutFromJSON;
    }
    /**
     * Invoked when any layout change occures, an aggregation of many events.
     */
    get onDidLayoutChange() {
        return this.component.onDidLayoutChange;
    }
    /**
     * Invoked when a Drag'n'Drop event occurs that the component was unable to handle. Exposed for custom Drag'n'Drop functionality.
     */
    get onDidDrop() {
        return this.component.onDidDrop;
    }
    /**
     * Invoked when a Drag'n'Drop event occurs but before dockview handles it giving the user an opportunity to intecept and
     * prevent the event from occuring using the standard `preventDefault()` syntax.
     *
     * Preventing certain events may causes unexpected behaviours, use carefully.
     */
    get onWillDrop() {
        return this.component.onWillDrop;
    }
    /**
     * Invoked before an overlay is shown indicating a drop target.
     *
     * Calling `event.preventDefault()` will prevent the overlay being shown and prevent
     * the any subsequent drop event.
     */
    get onWillShowOverlay() {
        return this.component.onWillShowOverlay;
    }
    /**
     * Invoked before a group is dragged.
     *
     * Calling `event.nativeEvent.preventDefault()` will prevent the group drag starting.
     *
     */
    get onWillDragGroup() {
        return this.component.onWillDragGroup;
    }
    /**
     * Invoked before a panel is dragged.
     *
     * Calling `event.nativeEvent.preventDefault()` will prevent the panel drag starting.
     */
    get onWillDragPanel() {
        return this.component.onWillDragPanel;
    }
    get onUnhandledDragOverEvent() {
        return this.component.onUnhandledDragOverEvent;
    }
    /**
     * All panel objects.
     */
    get panels() {
        return this.component.panels;
    }
    /**
     * All group objects.
     */
    get groups() {
        return this.component.groups;
    }
    /**
     *  Active panel object.
     */
    get activePanel() {
        return this.component.activePanel;
    }
    /**
     * Active group object.
     */
    get activeGroup() {
        return this.component.activeGroup;
    }
    constructor(component) {
        this.component = component;
    }
    /**
     *  Focus the component. Will try to focus an active panel if one exists.
     */
    focus() {
        this.component.focus();
    }
    /**
     * Get a panel object given a `string` id. May return `undefined`.
     */
    getPanel(id) {
        return this.component.getGroupPanel(id);
    }
    /**
     * Force resize the component to an exact width and height. Read about auto-resizing before using.
     */
    layout(width, height, force = false) {
        this.component.layout(width, height, force);
    }
    /**
     * Add a panel and return the created object.
     */
    addPanel(options) {
        return this.component.addPanel(options);
    }
    /**
     * Remove a panel given the panel object.
     */
    removePanel(panel) {
        this.component.removePanel(panel);
    }
    /**
     * Add a group and return the created object.
     */
    addGroup(options) {
        return this.component.addGroup(options);
    }
    /**
     * Close all groups and panels.
     */
    closeAllGroups() {
        return this.component.closeAllGroups();
    }
    /**
     * Remove a group and any panels within the group.
     */
    removeGroup(group) {
        this.component.removeGroup(group);
    }
    /**
     * Get a group object given a `string` id. May return undefined.
     */
    getGroup(id) {
        return this.component.getPanel(id);
    }
    /**
     * Add a floating group
     */
    addFloatingGroup(item, options) {
        return this.component.addFloatingGroup(item, options);
    }
    /**
     * Create a component from a serialized object.
     */
    fromJSON(data) {
        this.component.fromJSON(data);
    }
    /**
     * Create a serialized object of the current component.
     */
    toJSON() {
        return this.component.toJSON();
    }
    /**
     * Reset the component back to an empty and default state.
     */
    clear() {
        this.component.clear();
    }
    /**
     * Move the focus progmatically to the next panel or group.
     */
    moveToNext(options) {
        this.component.moveToNext(options);
    }
    /**
     * Move the focus progmatically to the previous panel or group.
     */
    moveToPrevious(options) {
        this.component.moveToPrevious(options);
    }
    maximizeGroup(panel) {
        this.component.maximizeGroup(panel.group);
    }
    hasMaximizedGroup() {
        return this.component.hasMaximizedGroup();
    }
    exitMaximizedGroup() {
        this.component.exitMaximizedGroup();
    }
    get onDidMaximizedGroupChange() {
        return this.component.onDidMaximizedGroupChange;
    }
    /**
     * Add a popout group in a new Window
     */
    addPopoutGroup(item, options) {
        return this.component.addPopoutGroup(item, options);
    }
    setGap(gap) {
        this.component.updateOptions({ gap });
    }
    updateOptions(options) {
        this.component.updateOptions(options);
    }
    /**
     * Release resources and teardown component. Do not call when using framework versions of dockview.
     */
    dispose() {
        this.component.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/api/dockviewGroupPanelApi.js":
/*!**************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/api/dockviewGroupPanelApi.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DockviewGroupPanelApiImpl: () => (/* binding */ DockviewGroupPanelApiImpl)
/* harmony export */ });
/* harmony import */ var _dnd_droptarget__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dnd/droptarget */ "./node_modules/dockview-core/dist/esm/dnd/droptarget.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _gridviewPanelApi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./gridviewPanelApi */ "./node_modules/dockview-core/dist/esm/api/gridviewPanelApi.js");



const NOT_INITIALIZED_MESSAGE = 'dockview: DockviewGroupPanelApiImpl not initialized';
class DockviewGroupPanelApiImpl extends _gridviewPanelApi__WEBPACK_IMPORTED_MODULE_2__.GridviewPanelApiImpl {
    get location() {
        if (!this._group) {
            throw new Error(NOT_INITIALIZED_MESSAGE);
        }
        return this._group.model.location;
    }
    constructor(id, accessor) {
        super(id, '__dockviewgroup__');
        this.accessor = accessor;
        this._onDidLocationChange = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidLocationChange = this._onDidLocationChange.event;
        this._onDidActivePanelChange = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidActivePanelChange = this._onDidActivePanelChange.event;
        this.addDisposables(this._onDidLocationChange, this._onDidActivePanelChange);
    }
    close() {
        if (!this._group) {
            return;
        }
        return this.accessor.removeGroup(this._group);
    }
    getWindow() {
        return this.location.type === 'popout'
            ? this.location.getWindow()
            : window;
    }
    moveTo(options) {
        var _a, _b, _c;
        if (!this._group) {
            throw new Error(NOT_INITIALIZED_MESSAGE);
        }
        const group = (_a = options.group) !== null && _a !== void 0 ? _a : this.accessor.addGroup({
            direction: (0,_dnd_droptarget__WEBPACK_IMPORTED_MODULE_0__.positionToDirection)((_b = options.position) !== null && _b !== void 0 ? _b : 'right'),
            skipSetActive: true,
        });
        this.accessor.moveGroupOrPanel({
            from: { groupId: this._group.id },
            to: {
                group,
                position: options.group
                    ? (_c = options.position) !== null && _c !== void 0 ? _c : 'center'
                    : 'center',
                index: options.index,
            },
        });
    }
    maximize() {
        if (!this._group) {
            throw new Error(NOT_INITIALIZED_MESSAGE);
        }
        if (this.location.type !== 'grid') {
            // only grid groups can be maximized
            return;
        }
        this.accessor.maximizeGroup(this._group);
    }
    isMaximized() {
        if (!this._group) {
            throw new Error(NOT_INITIALIZED_MESSAGE);
        }
        return this.accessor.isMaximizedGroup(this._group);
    }
    exitMaximized() {
        if (!this._group) {
            throw new Error(NOT_INITIALIZED_MESSAGE);
        }
        if (this.isMaximized()) {
            this.accessor.exitMaximizedGroup();
        }
    }
    initialize(group) {
        this._group = group;
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/api/dockviewPanelApi.js":
/*!*********************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/api/dockviewPanelApi.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DockviewPanelApiImpl: () => (/* binding */ DockviewPanelApiImpl)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _gridviewPanelApi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gridviewPanelApi */ "./node_modules/dockview-core/dist/esm/api/gridviewPanelApi.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");



class DockviewPanelApiImpl extends _gridviewPanelApi__WEBPACK_IMPORTED_MODULE_1__.GridviewPanelApiImpl {
    get location() {
        return this.group.api.location;
    }
    get title() {
        return this.panel.title;
    }
    get isGroupActive() {
        return this.group.isActive;
    }
    get renderer() {
        return this.panel.renderer;
    }
    set group(value) {
        const oldGroup = this._group;
        if (this._group !== value) {
            this._group = value;
            this._onDidGroupChange.fire({});
            this.setupGroupEventListeners(oldGroup);
            this._onDidLocationChange.fire({
                location: this.group.api.location,
            });
        }
    }
    get group() {
        return this._group;
    }
    get tabComponent() {
        return this._tabComponent;
    }
    constructor(panel, group, accessor, component, tabComponent) {
        super(panel.id, component);
        this.panel = panel;
        this.accessor = accessor;
        this._onDidTitleChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidTitleChange = this._onDidTitleChange.event;
        this._onDidActiveGroupChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidActiveGroupChange = this._onDidActiveGroupChange.event;
        this._onDidGroupChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidGroupChange = this._onDidGroupChange.event;
        this._onDidRendererChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidRendererChange = this._onDidRendererChange.event;
        this._onDidLocationChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidLocationChange = this._onDidLocationChange.event;
        this.groupEventsDisposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.MutableDisposable();
        this._tabComponent = tabComponent;
        this.initialize(panel);
        this._group = group;
        this.setupGroupEventListeners();
        this.addDisposables(this.groupEventsDisposable, this._onDidRendererChange, this._onDidTitleChange, this._onDidGroupChange, this._onDidActiveGroupChange, this._onDidLocationChange);
    }
    getWindow() {
        return this.group.api.getWindow();
    }
    moveTo(options) {
        var _a, _b;
        this.accessor.moveGroupOrPanel({
            from: { groupId: this._group.id, panelId: this.panel.id },
            to: {
                group: (_a = options.group) !== null && _a !== void 0 ? _a : this._group,
                position: options.group
                    ? (_b = options.position) !== null && _b !== void 0 ? _b : 'center'
                    : 'center',
                index: options.index,
            },
        });
    }
    setTitle(title) {
        this.panel.setTitle(title);
    }
    setRenderer(renderer) {
        this.panel.setRenderer(renderer);
    }
    close() {
        this.group.model.closePanel(this.panel);
    }
    maximize() {
        this.group.api.maximize();
    }
    isMaximized() {
        return this.group.api.isMaximized();
    }
    exitMaximized() {
        this.group.api.exitMaximized();
    }
    setupGroupEventListeners(previousGroup) {
        var _a;
        let _trackGroupActive = (_a = previousGroup === null || previousGroup === void 0 ? void 0 : previousGroup.isActive) !== null && _a !== void 0 ? _a : false; // prevent duplicate events with same state
        this.groupEventsDisposable.value = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable(this.group.api.onDidVisibilityChange((event) => {
            const hasBecomeHidden = !event.isVisible && this.isVisible;
            const hasBecomeVisible = event.isVisible && !this.isVisible;
            const isActivePanel = this.group.model.isPanelActive(this.panel);
            if (hasBecomeHidden || (hasBecomeVisible && isActivePanel)) {
                this._onDidVisibilityChange.fire(event);
            }
        }), this.group.api.onDidLocationChange((event) => {
            if (this.group !== this.panel.group) {
                return;
            }
            this._onDidLocationChange.fire(event);
        }), this.group.api.onDidActiveChange(() => {
            if (this.group !== this.panel.group) {
                return;
            }
            if (_trackGroupActive !== this.isGroupActive) {
                _trackGroupActive = this.isGroupActive;
                this._onDidActiveGroupChange.fire({
                    isActive: this.isGroupActive,
                });
            }
        }));
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/api/entryPoints.js":
/*!****************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/api/entryPoints.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createDockview: () => (/* binding */ createDockview),
/* harmony export */   createGridview: () => (/* binding */ createGridview),
/* harmony export */   createPaneview: () => (/* binding */ createPaneview),
/* harmony export */   createSplitview: () => (/* binding */ createSplitview)
/* harmony export */ });
/* harmony import */ var _api_component_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api/component.api */ "./node_modules/dockview-core/dist/esm/api/component.api.js");
/* harmony import */ var _dockview_dockviewComponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dockview/dockviewComponent */ "./node_modules/dockview-core/dist/esm/dockview/dockviewComponent.js");
/* harmony import */ var _gridview_gridviewComponent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../gridview/gridviewComponent */ "./node_modules/dockview-core/dist/esm/gridview/gridviewComponent.js");
/* harmony import */ var _paneview_paneviewComponent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../paneview/paneviewComponent */ "./node_modules/dockview-core/dist/esm/paneview/paneviewComponent.js");
/* harmony import */ var _splitview_splitviewComponent__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../splitview/splitviewComponent */ "./node_modules/dockview-core/dist/esm/splitview/splitviewComponent.js");





function createDockview(element, options) {
    const component = new _dockview_dockviewComponent__WEBPACK_IMPORTED_MODULE_1__.DockviewComponent(element, options);
    return component.api;
}
function createSplitview(element, options) {
    const component = new _splitview_splitviewComponent__WEBPACK_IMPORTED_MODULE_4__.SplitviewComponent(element, options);
    return new _api_component_api__WEBPACK_IMPORTED_MODULE_0__.SplitviewApi(component);
}
function createGridview(element, options) {
    const component = new _gridview_gridviewComponent__WEBPACK_IMPORTED_MODULE_2__.GridviewComponent(element, options);
    return new _api_component_api__WEBPACK_IMPORTED_MODULE_0__.GridviewApi(component);
}
function createPaneview(element, options) {
    const component = new _paneview_paneviewComponent__WEBPACK_IMPORTED_MODULE_3__.PaneviewComponent(element, options);
    return new _api_component_api__WEBPACK_IMPORTED_MODULE_0__.PaneviewApi(component);
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/api/gridviewPanelApi.js":
/*!*********************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/api/gridviewPanelApi.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GridviewPanelApiImpl: () => (/* binding */ GridviewPanelApiImpl)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _panelApi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./panelApi */ "./node_modules/dockview-core/dist/esm/api/panelApi.js");


class GridviewPanelApiImpl extends _panelApi__WEBPACK_IMPORTED_MODULE_1__.PanelApiImpl {
    constructor(id, component, panel) {
        super(id, component);
        this._onDidConstraintsChangeInternal = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidConstraintsChangeInternal = this._onDidConstraintsChangeInternal.event;
        this._onDidConstraintsChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidConstraintsChange = this._onDidConstraintsChange.event;
        this._onDidSizeChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidSizeChange = this._onDidSizeChange.event;
        this.addDisposables(this._onDidConstraintsChangeInternal, this._onDidConstraintsChange, this._onDidSizeChange);
        if (panel) {
            this.initialize(panel);
        }
    }
    setConstraints(value) {
        this._onDidConstraintsChangeInternal.fire(value);
    }
    setSize(event) {
        this._onDidSizeChange.fire(event);
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/api/panelApi.js":
/*!*************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/api/panelApi.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PanelApiImpl: () => (/* binding */ PanelApiImpl),
/* harmony export */   WillFocusEvent: () => (/* binding */ WillFocusEvent)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");


class WillFocusEvent extends _events__WEBPACK_IMPORTED_MODULE_0__.DockviewEvent {
    constructor() {
        super();
    }
}
/**
 * A core api implementation that should be used across all panel-like objects
 */
class PanelApiImpl extends _lifecycle__WEBPACK_IMPORTED_MODULE_1__.CompositeDisposable {
    get isFocused() {
        return this._isFocused;
    }
    get isActive() {
        return this._isActive;
    }
    get isVisible() {
        return this._isVisible;
    }
    get width() {
        return this._width;
    }
    get height() {
        return this._height;
    }
    constructor(id, component) {
        super();
        this.id = id;
        this.component = component;
        this._isFocused = false;
        this._isActive = false;
        this._isVisible = true;
        this._width = 0;
        this._height = 0;
        this._parameters = {};
        this.panelUpdatesDisposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_1__.MutableDisposable();
        this._onDidDimensionChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidDimensionsChange = this._onDidDimensionChange.event;
        this._onDidChangeFocus = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidFocusChange = this._onDidChangeFocus.event;
        //
        this._onWillFocus = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onWillFocus = this._onWillFocus.event;
        //
        this._onDidVisibilityChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidVisibilityChange = this._onDidVisibilityChange.event;
        this._onWillVisibilityChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onWillVisibilityChange = this._onWillVisibilityChange.event;
        this._onDidActiveChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidActiveChange = this._onDidActiveChange.event;
        this._onActiveChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onActiveChange = this._onActiveChange.event;
        this._onDidParametersChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidParametersChange = this._onDidParametersChange.event;
        this.addDisposables(this.onDidFocusChange((event) => {
            this._isFocused = event.isFocused;
        }), this.onDidActiveChange((event) => {
            this._isActive = event.isActive;
        }), this.onDidVisibilityChange((event) => {
            this._isVisible = event.isVisible;
        }), this.onDidDimensionsChange((event) => {
            this._width = event.width;
            this._height = event.height;
        }), this.panelUpdatesDisposable, this._onDidDimensionChange, this._onDidChangeFocus, this._onDidVisibilityChange, this._onDidActiveChange, this._onWillFocus, this._onActiveChange, this._onWillFocus, this._onWillVisibilityChange, this._onDidParametersChange);
    }
    getParameters() {
        return this._parameters;
    }
    initialize(panel) {
        this.panelUpdatesDisposable.value = this._onDidParametersChange.event((parameters) => {
            this._parameters = parameters;
            panel.update({
                params: parameters,
            });
        });
    }
    setVisible(isVisible) {
        this._onWillVisibilityChange.fire({ isVisible });
    }
    setActive() {
        this._onActiveChange.fire();
    }
    updateParameters(parameters) {
        this._onDidParametersChange.fire(parameters);
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/api/paneviewPanelApi.js":
/*!*********************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/api/paneviewPanelApi.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PaneviewPanelApiImpl: () => (/* binding */ PaneviewPanelApiImpl)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _splitviewPanelApi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./splitviewPanelApi */ "./node_modules/dockview-core/dist/esm/api/splitviewPanelApi.js");


class PaneviewPanelApiImpl extends _splitviewPanelApi__WEBPACK_IMPORTED_MODULE_1__.SplitviewPanelApiImpl {
    set pane(pane) {
        this._pane = pane;
    }
    constructor(id, component) {
        super(id, component);
        this._onDidExpansionChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter({
            replay: true,
        });
        this.onDidExpansionChange = this._onDidExpansionChange.event;
        this._onMouseEnter = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter({});
        this.onMouseEnter = this._onMouseEnter.event;
        this._onMouseLeave = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter({});
        this.onMouseLeave = this._onMouseLeave.event;
        this.addDisposables(this._onDidExpansionChange, this._onMouseEnter, this._onMouseLeave);
    }
    setExpanded(isExpanded) {
        var _a;
        (_a = this._pane) === null || _a === void 0 ? void 0 : _a.setExpanded(isExpanded);
    }
    get isExpanded() {
        var _a;
        return !!((_a = this._pane) === null || _a === void 0 ? void 0 : _a.isExpanded());
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/api/splitviewPanelApi.js":
/*!**********************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/api/splitviewPanelApi.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SplitviewPanelApiImpl: () => (/* binding */ SplitviewPanelApiImpl)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _panelApi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./panelApi */ "./node_modules/dockview-core/dist/esm/api/panelApi.js");


class SplitviewPanelApiImpl extends _panelApi__WEBPACK_IMPORTED_MODULE_1__.PanelApiImpl {
    //
    constructor(id, component) {
        super(id, component);
        this._onDidConstraintsChangeInternal = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidConstraintsChangeInternal = this._onDidConstraintsChangeInternal.event;
        //
        this._onDidConstraintsChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter({
            replay: true,
        });
        this.onDidConstraintsChange = this._onDidConstraintsChange.event;
        //
        this._onDidSizeChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidSizeChange = this._onDidSizeChange.event;
        this.addDisposables(this._onDidConstraintsChangeInternal, this._onDidConstraintsChange, this._onDidSizeChange);
    }
    setConstraints(value) {
        this._onDidConstraintsChangeInternal.fire(value);
    }
    setSize(event) {
        this._onDidSizeChange.fire(event);
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/array.js":
/*!******************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/array.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   firstIndex: () => (/* binding */ firstIndex),
/* harmony export */   last: () => (/* binding */ last),
/* harmony export */   pushToEnd: () => (/* binding */ pushToEnd),
/* harmony export */   pushToStart: () => (/* binding */ pushToStart),
/* harmony export */   remove: () => (/* binding */ remove),
/* harmony export */   sequenceEquals: () => (/* binding */ sequenceEquals),
/* harmony export */   tail: () => (/* binding */ tail)
/* harmony export */ });
function tail(arr) {
    if (arr.length === 0) {
        throw new Error('Invalid tail call');
    }
    return [arr.slice(0, arr.length - 1), arr[arr.length - 1]];
}
function last(arr) {
    return arr.length > 0 ? arr[arr.length - 1] : undefined;
}
function sequenceEquals(arr1, arr2) {
    if (arr1.length !== arr2.length) {
        return false;
    }
    for (let i = 0; i < arr1.length; i++) {
        if (arr1[i] !== arr2[i]) {
            return false;
        }
    }
    return true;
}
/**
 * Pushes an element to the start of the array, if found.
 */
function pushToStart(arr, value) {
    const index = arr.indexOf(value);
    if (index > -1) {
        arr.splice(index, 1);
        arr.unshift(value);
    }
}
/**
 * Pushes an element to the end of the array, if found.
 */
function pushToEnd(arr, value) {
    const index = arr.indexOf(value);
    if (index > -1) {
        arr.splice(index, 1);
        arr.push(value);
    }
}
function firstIndex(array, fn) {
    for (let i = 0; i < array.length; i++) {
        const element = array[i];
        if (fn(element)) {
            return i;
        }
    }
    return -1;
}
function remove(array, value) {
    const index = array.findIndex((t) => t === value);
    if (index > -1) {
        array.splice(index, 1);
        return true;
    }
    return false;
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/constants.js":
/*!**********************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/constants.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE: () => (/* binding */ DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE),
/* harmony export */   DEFAULT_FLOATING_GROUP_POSITION: () => (/* binding */ DEFAULT_FLOATING_GROUP_POSITION)
/* harmony export */ });
const DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE = 100;
const DEFAULT_FLOATING_GROUP_POSITION = { left: 100, top: 100, width: 300, height: 300 };


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dnd/abstractDragHandler.js":
/*!************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dnd/abstractDragHandler.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DragHandler: () => (/* binding */ DragHandler)
/* harmony export */ });
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");



class DragHandler extends _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable {
    constructor(el) {
        super();
        this.el = el;
        this.dataDisposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.MutableDisposable();
        this.pointerEventsDisposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.MutableDisposable();
        this._onDragStart = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDragStart = this._onDragStart.event;
        this.addDisposables(this._onDragStart, this.dataDisposable, this.pointerEventsDisposable);
        this.configure();
    }
    isCancelled(_event) {
        return false;
    }
    configure() {
        this.addDisposables(this._onDragStart, (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(this.el, 'dragstart', (event) => {
            if (event.defaultPrevented || this.isCancelled(event)) {
                event.preventDefault();
                return;
            }
            const iframes = (0,_dom__WEBPACK_IMPORTED_MODULE_0__.disableIframePointEvents)();
            this.pointerEventsDisposable.value = {
                dispose: () => {
                    iframes.release();
                },
            };
            this.el.classList.add('dv-dragged');
            setTimeout(() => this.el.classList.remove('dv-dragged'), 0);
            this.dataDisposable.value = this.getData(event);
            this._onDragStart.fire(event);
            if (event.dataTransfer) {
                event.dataTransfer.effectAllowed = 'move';
                const hasData = event.dataTransfer.items.length > 0;
                if (!hasData) {
                    /**
                     * Although this is not used by dockview many third party dnd libraries will check
                     * dataTransfer.types to determine valid drag events.
                     *
                     * For example: in react-dnd if dataTransfer.types is not set then the dragStart event will be cancelled
                     * through .preventDefault(). Since this is applied globally to all drag events this would break dockviews
                     * dnd logic. You can see the code at
                     * https://github.com/react-dnd/react-dnd/blob/main/packages/backend-html5/src/HTML5BackendImpl.ts#L542
                     */
                    event.dataTransfer.setData('text/plain', '');
                }
            }
        }), (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(this.el, 'dragend', () => {
            this.pointerEventsDisposable.dispose();
            this.dataDisposable.dispose();
        }));
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dnd/dataTransfer.js":
/*!*****************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dnd/dataTransfer.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LocalSelectionTransfer: () => (/* binding */ LocalSelectionTransfer),
/* harmony export */   PaneTransfer: () => (/* binding */ PaneTransfer),
/* harmony export */   PanelTransfer: () => (/* binding */ PanelTransfer),
/* harmony export */   getPaneData: () => (/* binding */ getPaneData),
/* harmony export */   getPanelData: () => (/* binding */ getPanelData)
/* harmony export */ });
class TransferObject {
}
class PanelTransfer extends TransferObject {
    constructor(viewId, groupId, panelId) {
        super();
        this.viewId = viewId;
        this.groupId = groupId;
        this.panelId = panelId;
    }
}
class PaneTransfer extends TransferObject {
    constructor(viewId, paneId) {
        super();
        this.viewId = viewId;
        this.paneId = paneId;
    }
}
/**
 * A singleton to store transfer data during drag & drop operations that are only valid within the application.
 */
class LocalSelectionTransfer {
    constructor() {
        // protect against external instantiation
    }
    static getInstance() {
        return LocalSelectionTransfer.INSTANCE;
    }
    hasData(proto) {
        return proto && proto === this.proto;
    }
    clearData(proto) {
        if (this.hasData(proto)) {
            this.proto = undefined;
            this.data = undefined;
        }
    }
    getData(proto) {
        if (this.hasData(proto)) {
            return this.data;
        }
        return undefined;
    }
    setData(data, proto) {
        if (proto) {
            this.data = data;
            this.proto = proto;
        }
    }
}
LocalSelectionTransfer.INSTANCE = new LocalSelectionTransfer();
function getPanelData() {
    const panelTransfer = LocalSelectionTransfer.getInstance();
    const isPanelEvent = panelTransfer.hasData(PanelTransfer.prototype);
    if (!isPanelEvent) {
        return undefined;
    }
    return panelTransfer.getData(PanelTransfer.prototype)[0];
}
function getPaneData() {
    const paneTransfer = LocalSelectionTransfer.getInstance();
    const isPanelEvent = paneTransfer.hasData(PaneTransfer.prototype);
    if (!isPanelEvent) {
        return undefined;
    }
    return paneTransfer.getData(PaneTransfer.prototype)[0];
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dnd/dnd.js":
/*!********************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dnd/dnd.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DragAndDropObserver: () => (/* binding */ DragAndDropObserver)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");


class DragAndDropObserver extends _lifecycle__WEBPACK_IMPORTED_MODULE_1__.CompositeDisposable {
    constructor(element, callbacks) {
        super();
        this.element = element;
        this.callbacks = callbacks;
        this.target = null;
        this.registerListeners();
    }
    onDragEnter(e) {
        this.target = e.target;
        this.callbacks.onDragEnter(e);
    }
    onDragOver(e) {
        e.preventDefault(); // needed so that the drop event fires (https://stackoverflow.com/questions/21339924/drop-event-not-firing-in-chrome)
        if (this.callbacks.onDragOver) {
            this.callbacks.onDragOver(e);
        }
    }
    onDragLeave(e) {
        if (this.target === e.target) {
            this.target = null;
            this.callbacks.onDragLeave(e);
        }
    }
    onDragEnd(e) {
        this.target = null;
        this.callbacks.onDragEnd(e);
    }
    onDrop(e) {
        this.callbacks.onDrop(e);
    }
    registerListeners() {
        this.addDisposables((0,_events__WEBPACK_IMPORTED_MODULE_0__.addDisposableListener)(this.element, 'dragenter', (e) => {
            this.onDragEnter(e);
        }, true));
        this.addDisposables((0,_events__WEBPACK_IMPORTED_MODULE_0__.addDisposableListener)(this.element, 'dragover', (e) => {
            this.onDragOver(e);
        }, true));
        this.addDisposables((0,_events__WEBPACK_IMPORTED_MODULE_0__.addDisposableListener)(this.element, 'dragleave', (e) => {
            this.onDragLeave(e);
        }));
        this.addDisposables((0,_events__WEBPACK_IMPORTED_MODULE_0__.addDisposableListener)(this.element, 'dragend', (e) => {
            this.onDragEnd(e);
        }));
        this.addDisposables((0,_events__WEBPACK_IMPORTED_MODULE_0__.addDisposableListener)(this.element, 'drop', (e) => {
            this.onDrop(e);
        }));
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dnd/droptarget.js":
/*!***************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dnd/droptarget.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Droptarget: () => (/* binding */ Droptarget),
/* harmony export */   WillShowOverlayEvent: () => (/* binding */ WillShowOverlayEvent),
/* harmony export */   calculateQuadrantAsPercentage: () => (/* binding */ calculateQuadrantAsPercentage),
/* harmony export */   calculateQuadrantAsPixels: () => (/* binding */ calculateQuadrantAsPixels),
/* harmony export */   directionToPosition: () => (/* binding */ directionToPosition),
/* harmony export */   positionToDirection: () => (/* binding */ positionToDirection)
/* harmony export */ });
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _dnd__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dnd */ "./node_modules/dockview-core/dist/esm/dnd/dnd.js");
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../math */ "./node_modules/dockview-core/dist/esm/math.js");





class WillShowOverlayEvent extends _events__WEBPACK_IMPORTED_MODULE_1__.DockviewEvent {
    get nativeEvent() {
        return this.options.nativeEvent;
    }
    get position() {
        return this.options.position;
    }
    constructor(options) {
        super();
        this.options = options;
    }
}
function directionToPosition(direction) {
    switch (direction) {
        case 'above':
            return 'top';
        case 'below':
            return 'bottom';
        case 'left':
            return 'left';
        case 'right':
            return 'right';
        case 'within':
            return 'center';
        default:
            throw new Error(`invalid direction '${direction}'`);
    }
}
function positionToDirection(position) {
    switch (position) {
        case 'top':
            return 'above';
        case 'bottom':
            return 'below';
        case 'left':
            return 'left';
        case 'right':
            return 'right';
        case 'center':
            return 'within';
        default:
            throw new Error(`invalid position '${position}'`);
    }
}
const DEFAULT_ACTIVATION_SIZE = {
    value: 20,
    type: 'percentage',
};
const DEFAULT_SIZE = {
    value: 50,
    type: 'percentage',
};
const SMALL_WIDTH_BOUNDARY = 100;
const SMALL_HEIGHT_BOUNDARY = 100;
class Droptarget extends _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable {
    get state() {
        return this._state;
    }
    constructor(element, options) {
        super();
        this.element = element;
        this.options = options;
        this._onDrop = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDrop = this._onDrop.event;
        this._onWillShowOverlay = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onWillShowOverlay = this._onWillShowOverlay.event;
        // use a set to take advantage of #<set>.has
        this._acceptedTargetZonesSet = new Set(this.options.acceptedTargetZones);
        this.dnd = new _dnd__WEBPACK_IMPORTED_MODULE_3__.DragAndDropObserver(this.element, {
            onDragEnter: () => undefined,
            onDragOver: (e) => {
                if (this._acceptedTargetZonesSet.size === 0) {
                    this.removeDropTarget();
                    return;
                }
                const width = this.element.clientWidth;
                const height = this.element.clientHeight;
                if (width === 0 || height === 0) {
                    return; // avoid div!0
                }
                const rect = e.currentTarget.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const y = e.clientY - rect.top;
                const quadrant = this.calculateQuadrant(this._acceptedTargetZonesSet, x, y, width, height);
                /**
                 * If the event has already been used by another DropTarget instance
                 * then don't show a second drop target, only one target should be
                 * active at any one time
                 */
                if (this.isAlreadyUsed(e) || quadrant === null) {
                    // no drop target should be displayed
                    this.removeDropTarget();
                    return;
                }
                if (!this.options.canDisplayOverlay(e, quadrant)) {
                    this.removeDropTarget();
                    return;
                }
                const willShowOverlayEvent = new WillShowOverlayEvent({
                    nativeEvent: e,
                    position: quadrant,
                });
                /**
                 * Provide an opportunity to prevent the overlay appearing and in turn
                 * any dnd behaviours
                 */
                this._onWillShowOverlay.fire(willShowOverlayEvent);
                if (willShowOverlayEvent.defaultPrevented) {
                    this.removeDropTarget();
                    return;
                }
                this.markAsUsed(e);
                if (!this.targetElement) {
                    this.targetElement = document.createElement('div');
                    this.targetElement.className = 'dv-drop-target-dropzone';
                    this.overlayElement = document.createElement('div');
                    this.overlayElement.className = 'dv-drop-target-selection';
                    this._state = 'center';
                    this.targetElement.appendChild(this.overlayElement);
                    this.element.classList.add('dv-drop-target');
                    this.element.append(this.targetElement);
                }
                this.toggleClasses(quadrant, width, height);
                this._state = quadrant;
            },
            onDragLeave: () => {
                this.removeDropTarget();
            },
            onDragEnd: () => {
                this.removeDropTarget();
            },
            onDrop: (e) => {
                e.preventDefault();
                const state = this._state;
                this.removeDropTarget();
                if (state) {
                    // only stop the propagation of the event if we are dealing with it
                    // which is only when the target has state
                    e.stopPropagation();
                    this._onDrop.fire({ position: state, nativeEvent: e });
                }
            },
        });
        this.addDisposables(this._onDrop, this._onWillShowOverlay, this.dnd);
    }
    setTargetZones(acceptedTargetZones) {
        this._acceptedTargetZonesSet = new Set(acceptedTargetZones);
    }
    setOverlayModel(model) {
        this.options.overlayModel = model;
    }
    dispose() {
        this.removeDropTarget();
        super.dispose();
    }
    /**
     * Add a property to the event object for other potential listeners to check
     */
    markAsUsed(event) {
        event[Droptarget.USED_EVENT_ID] = true;
    }
    /**
     * Check is the event has already been used by another instance of DropTarget
     */
    isAlreadyUsed(event) {
        const value = event[Droptarget.USED_EVENT_ID];
        return typeof value === 'boolean' && value;
    }
    toggleClasses(quadrant, width, height) {
        var _a, _b;
        if (!this.overlayElement) {
            return;
        }
        const isSmallX = width < SMALL_WIDTH_BOUNDARY;
        const isSmallY = height < SMALL_HEIGHT_BOUNDARY;
        const isLeft = quadrant === 'left';
        const isRight = quadrant === 'right';
        const isTop = quadrant === 'top';
        const isBottom = quadrant === 'bottom';
        const rightClass = !isSmallX && isRight;
        const leftClass = !isSmallX && isLeft;
        const topClass = !isSmallY && isTop;
        const bottomClass = !isSmallY && isBottom;
        let size = 1;
        const sizeOptions = (_b = (_a = this.options.overlayModel) === null || _a === void 0 ? void 0 : _a.size) !== null && _b !== void 0 ? _b : DEFAULT_SIZE;
        if (sizeOptions.type === 'percentage') {
            size = (0,_math__WEBPACK_IMPORTED_MODULE_4__.clamp)(sizeOptions.value, 0, 100) / 100;
        }
        else {
            if (rightClass || leftClass) {
                size = (0,_math__WEBPACK_IMPORTED_MODULE_4__.clamp)(0, sizeOptions.value, width) / width;
            }
            if (topClass || bottomClass) {
                size = (0,_math__WEBPACK_IMPORTED_MODULE_4__.clamp)(0, sizeOptions.value, height) / height;
            }
        }
        const box = { top: '0px', left: '0px', width: '100%', height: '100%' };
        /**
         * You can also achieve the overlay placement using the transform CSS property
         * to translate and scale the element however this has the undesired effect of
         * 'skewing' the element. Comment left here for anybody that ever revisits this.
         *
         * @see https://developer.mozilla.org/en-US/docs/Web/CSS/transform
         *
         * right
         * translateX(${100 * (1 - size) / 2}%) scaleX(${scale})
         *
         * left
         * translateX(-${100 * (1 - size) / 2}%) scaleX(${scale})
         *
         * top
         * translateY(-${100 * (1 - size) / 2}%) scaleY(${scale})
         *
         * bottom
         * translateY(${100 * (1 - size) / 2}%) scaleY(${scale})
         */
        if (rightClass) {
            box.left = `${100 * (1 - size)}%`;
            box.width = `${100 * size}%`;
        }
        else if (leftClass) {
            box.width = `${100 * size}%`;
        }
        else if (topClass) {
            box.height = `${100 * size}%`;
        }
        else if (bottomClass) {
            box.top = `${100 * (1 - size)}%`;
            box.height = `${100 * size}%`;
        }
        this.overlayElement.style.top = box.top;
        this.overlayElement.style.left = box.left;
        this.overlayElement.style.width = box.width;
        this.overlayElement.style.height = box.height;
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(this.overlayElement, 'dv-drop-target-small-vertical', isSmallY);
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(this.overlayElement, 'dv-drop-target-small-horizontal', isSmallX);
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(this.overlayElement, 'dv-drop-target-left', isLeft);
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(this.overlayElement, 'dv-drop-target-right', isRight);
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(this.overlayElement, 'dv-drop-target-top', isTop);
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(this.overlayElement, 'dv-drop-target-bottom', isBottom);
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(this.overlayElement, 'dv-drop-target-center', quadrant === 'center');
    }
    calculateQuadrant(overlayType, x, y, width, height) {
        var _a, _b;
        const activationSizeOptions = (_b = (_a = this.options.overlayModel) === null || _a === void 0 ? void 0 : _a.activationSize) !== null && _b !== void 0 ? _b : DEFAULT_ACTIVATION_SIZE;
        const isPercentage = activationSizeOptions.type === 'percentage';
        if (isPercentage) {
            return calculateQuadrantAsPercentage(overlayType, x, y, width, height, activationSizeOptions.value);
        }
        return calculateQuadrantAsPixels(overlayType, x, y, width, height, activationSizeOptions.value);
    }
    removeDropTarget() {
        if (this.targetElement) {
            this._state = undefined;
            this.element.removeChild(this.targetElement);
            this.targetElement = undefined;
            this.overlayElement = undefined;
            this.element.classList.remove('dv-drop-target');
        }
    }
}
Droptarget.USED_EVENT_ID = '__dockview_droptarget_event_is_used__';
function calculateQuadrantAsPercentage(overlayType, x, y, width, height, threshold) {
    const xp = (100 * x) / width;
    const yp = (100 * y) / height;
    if (overlayType.has('left') && xp < threshold) {
        return 'left';
    }
    if (overlayType.has('right') && xp > 100 - threshold) {
        return 'right';
    }
    if (overlayType.has('top') && yp < threshold) {
        return 'top';
    }
    if (overlayType.has('bottom') && yp > 100 - threshold) {
        return 'bottom';
    }
    if (!overlayType.has('center')) {
        return null;
    }
    return 'center';
}
function calculateQuadrantAsPixels(overlayType, x, y, width, height, threshold) {
    if (overlayType.has('left') && x < threshold) {
        return 'left';
    }
    if (overlayType.has('right') && x > width - threshold) {
        return 'right';
    }
    if (overlayType.has('top') && y < threshold) {
        return 'top';
    }
    if (overlayType.has('bottom') && y > height - threshold) {
        return 'bottom';
    }
    if (!overlayType.has('center')) {
        return null;
    }
    return 'center';
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dnd/ghost.js":
/*!**********************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dnd/ghost.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addGhostImage: () => (/* binding */ addGhostImage)
/* harmony export */ });
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");

function addGhostImage(dataTransfer, ghostElement) {
    // class dockview provides to force ghost image to be drawn on a different layer and prevent weird rendering issues
    (0,_dom__WEBPACK_IMPORTED_MODULE_0__.addClasses)(ghostElement, 'dv-dragged');
    document.body.appendChild(ghostElement);
    dataTransfer.setDragImage(ghostElement, 0, 0);
    setTimeout(() => {
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.removeClasses)(ghostElement, 'dv-dragged');
        ghostElement.remove();
    }, 0);
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dnd/groupDragHandler.js":
/*!*********************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dnd/groupDragHandler.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GroupDragHandler: () => (/* binding */ GroupDragHandler)
/* harmony export */ });
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _abstractDragHandler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./abstractDragHandler */ "./node_modules/dockview-core/dist/esm/dnd/abstractDragHandler.js");
/* harmony import */ var _dataTransfer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dataTransfer */ "./node_modules/dockview-core/dist/esm/dnd/dataTransfer.js");
/* harmony import */ var _ghost__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ghost */ "./node_modules/dockview-core/dist/esm/dnd/ghost.js");





class GroupDragHandler extends _abstractDragHandler__WEBPACK_IMPORTED_MODULE_2__.DragHandler {
    constructor(element, accessor, group) {
        super(element);
        this.accessor = accessor;
        this.group = group;
        this.panelTransfer = _dataTransfer__WEBPACK_IMPORTED_MODULE_3__.LocalSelectionTransfer.getInstance();
        this.addDisposables((0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(element, 'pointerdown', (e) => {
            if (e.shiftKey) {
                /**
                 * You cannot call e.preventDefault() because that will prevent drag events from firing
                 * but we also need to stop any group overlay drag events from occuring
                 * Use a custom event marker that can be checked by the overlay drag events
                 */
                (0,_dom__WEBPACK_IMPORTED_MODULE_0__.quasiPreventDefault)(e);
            }
        }, true));
    }
    isCancelled(_event) {
        if (this.group.api.location.type === 'floating' && !_event.shiftKey) {
            return true;
        }
        return false;
    }
    getData(dragEvent) {
        const dataTransfer = dragEvent.dataTransfer;
        this.panelTransfer.setData([new _dataTransfer__WEBPACK_IMPORTED_MODULE_3__.PanelTransfer(this.accessor.id, this.group.id, null)], _dataTransfer__WEBPACK_IMPORTED_MODULE_3__.PanelTransfer.prototype);
        const style = window.getComputedStyle(this.el);
        const bgColor = style.getPropertyValue('--dv-activegroup-visiblepanel-tab-background-color');
        const color = style.getPropertyValue('--dv-activegroup-visiblepanel-tab-color');
        if (dataTransfer) {
            const ghostElement = document.createElement('div');
            ghostElement.style.backgroundColor = bgColor;
            ghostElement.style.color = color;
            ghostElement.style.padding = '2px 8px';
            ghostElement.style.height = '24px';
            ghostElement.style.fontSize = '11px';
            ghostElement.style.lineHeight = '20px';
            ghostElement.style.borderRadius = '12px';
            ghostElement.style.position = 'absolute';
            ghostElement.textContent = `Multiple Panels (${this.group.size})`;
            (0,_ghost__WEBPACK_IMPORTED_MODULE_4__.addGhostImage)(dataTransfer, ghostElement);
        }
        return {
            dispose: () => {
                this.panelTransfer.clearData(_dataTransfer__WEBPACK_IMPORTED_MODULE_3__.PanelTransfer.prototype);
            },
        };
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/components/panel/content.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/components/panel/content.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ContentContainer: () => (/* binding */ ContentContainer)
/* harmony export */ });
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _dnd_droptarget__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../dnd/droptarget */ "./node_modules/dockview-core/dist/esm/dnd/droptarget.js");
/* harmony import */ var _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../dnd/dataTransfer */ "./node_modules/dockview-core/dist/esm/dnd/dataTransfer.js");





class ContentContainer extends _lifecycle__WEBPACK_IMPORTED_MODULE_0__.CompositeDisposable {
    get element() {
        return this._element;
    }
    constructor(accessor, group) {
        super();
        this.accessor = accessor;
        this.group = group;
        this.disposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_0__.MutableDisposable();
        this._onDidFocus = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidFocus = this._onDidFocus.event;
        this._onDidBlur = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidBlur = this._onDidBlur.event;
        this._element = document.createElement('div');
        this._element.className = 'dv-content-container';
        this._element.tabIndex = -1;
        this.addDisposables(this._onDidFocus, this._onDidBlur);
        this.dropTarget = new _dnd_droptarget__WEBPACK_IMPORTED_MODULE_3__.Droptarget(this.element, {
            acceptedTargetZones: ['top', 'bottom', 'left', 'right', 'center'],
            canDisplayOverlay: (event, position) => {
                if (this.group.locked === 'no-drop-target' ||
                    (this.group.locked && position === 'center')) {
                    return false;
                }
                const data = (0,_dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_4__.getPanelData)();
                if (!data &&
                    event.shiftKey &&
                    this.group.location.type !== 'floating') {
                    return false;
                }
                if (data && data.viewId === this.accessor.id) {
                    if (data.groupId === this.group.id) {
                        if (position === 'center') {
                            // don't allow to drop on self for center position
                            return false;
                        }
                        if (data.panelId === null) {
                            // don't allow group move to drop anywhere on self
                            return false;
                        }
                    }
                    const groupHasOnePanelAndIsActiveDragElement = this.group.panels.length === 1 &&
                        data.groupId === this.group.id;
                    return !groupHasOnePanelAndIsActiveDragElement;
                }
                return this.group.canDisplayOverlay(event, position, 'content');
            },
        });
        this.addDisposables(this.dropTarget);
    }
    show() {
        this.element.style.display = '';
    }
    hide() {
        this.element.style.display = 'none';
    }
    renderPanel(panel, options = { asActive: true }) {
        const doRender = options.asActive ||
            (this.panel && this.group.isPanelActive(this.panel));
        if (this.panel &&
            this.panel.view.content.element.parentElement === this._element) {
            /**
             * If the currently attached panel is mounted directly to the content then remove it
             */
            this._element.removeChild(this.panel.view.content.element);
        }
        this.panel = panel;
        let container;
        switch (panel.api.renderer) {
            case 'onlyWhenVisible':
                this.group.renderContainer.detatch(panel);
                if (this.panel) {
                    if (doRender) {
                        this._element.appendChild(this.panel.view.content.element);
                    }
                }
                container = this._element;
                break;
            case 'always':
                if (panel.view.content.element.parentElement === this._element) {
                    this._element.removeChild(panel.view.content.element);
                }
                container = this.group.renderContainer.attach({
                    panel,
                    referenceContainer: this,
                });
                break;
            default:
                throw new Error(`dockview: invalid renderer type '${panel.api.renderer}'`);
        }
        if (doRender) {
            const focusTracker = (0,_dom__WEBPACK_IMPORTED_MODULE_2__.trackFocus)(container);
            const disposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_0__.CompositeDisposable();
            disposable.addDisposables(focusTracker, focusTracker.onDidFocus(() => this._onDidFocus.fire()), focusTracker.onDidBlur(() => this._onDidBlur.fire()));
            this.disposable.value = disposable;
        }
    }
    openPanel(panel) {
        if (this.panel === panel) {
            return;
        }
        this.renderPanel(panel);
    }
    layout(_width, _height) {
        // noop
    }
    closePanel() {
        var _a;
        if (this.panel) {
            if (this.panel.api.renderer === 'onlyWhenVisible') {
                (_a = this.panel.view.content.element.parentElement) === null || _a === void 0 ? void 0 : _a.removeChild(this.panel.view.content.element);
            }
        }
        this.panel = undefined;
    }
    dispose() {
        this.disposable.dispose();
        super.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/components/tab/defaultTab.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/components/tab/defaultTab.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DefaultTab: () => (/* binding */ DefaultTab)
/* harmony export */ });
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _svg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../svg */ "./node_modules/dockview-core/dist/esm/svg.js");



class DefaultTab extends _lifecycle__WEBPACK_IMPORTED_MODULE_0__.CompositeDisposable {
    get element() {
        return this._element;
    }
    constructor() {
        super();
        this._element = document.createElement('div');
        this._element.className = 'dv-default-tab';
        this._content = document.createElement('div');
        this._content.className = 'dv-default-tab-content';
        this.action = document.createElement('div');
        this.action.className = 'dv-default-tab-action';
        this.action.appendChild((0,_svg__WEBPACK_IMPORTED_MODULE_2__.createCloseButton)());
        this._element.appendChild(this._content);
        this._element.appendChild(this.action);
        this.render();
    }
    init(params) {
        this._title = params.title;
        this.addDisposables(params.api.onDidTitleChange((event) => {
            this._title = event.title;
            this.render();
        }), (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(this.action, 'pointerdown', (ev) => {
            ev.preventDefault();
        }), (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(this.action, 'click', (ev) => {
            if (ev.defaultPrevented) {
                return;
            }
            ev.preventDefault();
            params.api.close();
        }));
        this.render();
    }
    render() {
        var _a;
        if (this._content.textContent !== this._title) {
            this._content.textContent = (_a = this._title) !== null && _a !== void 0 ? _a : '';
        }
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/components/tab/tab.js":
/*!****************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/components/tab/tab.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Tab: () => (/* binding */ Tab)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../dnd/dataTransfer */ "./node_modules/dockview-core/dist/esm/dnd/dataTransfer.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _dnd_droptarget__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../dnd/droptarget */ "./node_modules/dockview-core/dist/esm/dnd/droptarget.js");
/* harmony import */ var _dnd_abstractDragHandler__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../dnd/abstractDragHandler */ "./node_modules/dockview-core/dist/esm/dnd/abstractDragHandler.js");






class TabDragHandler extends _dnd_abstractDragHandler__WEBPACK_IMPORTED_MODULE_5__.DragHandler {
    constructor(element, accessor, group, panel) {
        super(element);
        this.accessor = accessor;
        this.group = group;
        this.panel = panel;
        this.panelTransfer = _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.LocalSelectionTransfer.getInstance();
    }
    getData(event) {
        this.panelTransfer.setData([new _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.PanelTransfer(this.accessor.id, this.group.id, this.panel.id)], _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.PanelTransfer.prototype);
        return {
            dispose: () => {
                this.panelTransfer.clearData(_dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.PanelTransfer.prototype);
            },
        };
    }
}
class Tab extends _lifecycle__WEBPACK_IMPORTED_MODULE_1__.CompositeDisposable {
    get element() {
        return this._element;
    }
    constructor(panel, accessor, group) {
        super();
        this.panel = panel;
        this.accessor = accessor;
        this.group = group;
        this.content = undefined;
        this._onPointDown = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onPointerDown = this._onPointDown.event;
        this._onDropped = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDrop = this._onDropped.event;
        this._onDragStart = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDragStart = this._onDragStart.event;
        this._element = document.createElement('div');
        this._element.className = 'dv-tab';
        this._element.tabIndex = 0;
        this._element.draggable = true;
        (0,_dom__WEBPACK_IMPORTED_MODULE_3__.toggleClass)(this.element, 'dv-inactive-tab', true);
        const dragHandler = new TabDragHandler(this._element, this.accessor, this.group, this.panel);
        this.dropTarget = new _dnd_droptarget__WEBPACK_IMPORTED_MODULE_4__.Droptarget(this._element, {
            acceptedTargetZones: ['center'],
            canDisplayOverlay: (event, position) => {
                if (this.group.locked) {
                    return false;
                }
                const data = (0,_dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.getPanelData)();
                if (data && this.accessor.id === data.viewId) {
                    if (data.panelId === null &&
                        data.groupId === this.group.id) {
                        // don't allow group move to drop on self
                        return false;
                    }
                    return this.panel.id !== data.panelId;
                }
                return this.group.model.canDisplayOverlay(event, position, 'tab');
            },
        });
        this.onWillShowOverlay = this.dropTarget.onWillShowOverlay;
        this.addDisposables(this._onPointDown, this._onDropped, this._onDragStart, dragHandler.onDragStart((event) => {
            this._onDragStart.fire(event);
        }), dragHandler, (0,_events__WEBPACK_IMPORTED_MODULE_0__.addDisposableListener)(this._element, 'pointerdown', (event) => {
            this._onPointDown.fire(event);
        }), this.dropTarget.onDrop((event) => {
            this._onDropped.fire(event);
        }), this.dropTarget);
    }
    setActive(isActive) {
        (0,_dom__WEBPACK_IMPORTED_MODULE_3__.toggleClass)(this.element, 'dv-active-tab', isActive);
        (0,_dom__WEBPACK_IMPORTED_MODULE_3__.toggleClass)(this.element, 'dv-inactive-tab', !isActive);
    }
    setContent(part) {
        if (this.content) {
            this._element.removeChild(this.content.element);
        }
        this.content = part;
        this._element.appendChild(this.content.element);
    }
    dispose() {
        super.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/components/titlebar/tabsContainer.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/components/titlebar/tabsContainer.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TabsContainer: () => (/* binding */ TabsContainer)
/* harmony export */ });
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _tab_tab__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tab/tab */ "./node_modules/dockview-core/dist/esm/dockview/components/tab/tab.js");
/* harmony import */ var _voidContainer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./voidContainer */ "./node_modules/dockview-core/dist/esm/dockview/components/titlebar/voidContainer.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _dockviewGroupPanelModel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../dockviewGroupPanelModel */ "./node_modules/dockview-core/dist/esm/dockview/dockviewGroupPanelModel.js");
/* harmony import */ var _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../dnd/dataTransfer */ "./node_modules/dockview-core/dist/esm/dnd/dataTransfer.js");







class TabsContainer extends _lifecycle__WEBPACK_IMPORTED_MODULE_0__.CompositeDisposable {
    get panels() {
        return this.tabs.map((_) => _.value.panel.id);
    }
    get size() {
        return this.tabs.length;
    }
    get hidden() {
        return this._hidden;
    }
    set hidden(value) {
        this._hidden = value;
        this.element.style.display = value ? 'none' : '';
    }
    show() {
        if (!this.hidden) {
            this.element.style.display = '';
        }
    }
    hide() {
        this._element.style.display = 'none';
    }
    setRightActionsElement(element) {
        if (this.rightActions === element) {
            return;
        }
        if (this.rightActions) {
            this.rightActions.remove();
            this.rightActions = undefined;
        }
        if (element) {
            this.rightActionsContainer.appendChild(element);
            this.rightActions = element;
        }
    }
    setLeftActionsElement(element) {
        if (this.leftActions === element) {
            return;
        }
        if (this.leftActions) {
            this.leftActions.remove();
            this.leftActions = undefined;
        }
        if (element) {
            this.leftActionsContainer.appendChild(element);
            this.leftActions = element;
        }
    }
    setPrefixActionsElement(element) {
        if (this.preActions === element) {
            return;
        }
        if (this.preActions) {
            this.preActions.remove();
            this.preActions = undefined;
        }
        if (element) {
            this.preActionsContainer.appendChild(element);
            this.preActions = element;
        }
    }
    get element() {
        return this._element;
    }
    isActive(tab) {
        return (this.selectedIndex > -1 &&
            this.tabs[this.selectedIndex].value === tab);
    }
    indexOf(id) {
        return this.tabs.findIndex((tab) => tab.value.panel.id === id);
    }
    constructor(accessor, group) {
        super();
        this.accessor = accessor;
        this.group = group;
        this.tabs = [];
        this.selectedIndex = -1;
        this._hidden = false;
        this._onDrop = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDrop = this._onDrop.event;
        this._onTabDragStart = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onTabDragStart = this._onTabDragStart.event;
        this._onGroupDragStart = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onGroupDragStart = this._onGroupDragStart.event;
        this._onWillShowOverlay = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onWillShowOverlay = this._onWillShowOverlay.event;
        this._element = document.createElement('div');
        this._element.className = 'dv-tabs-and-actions-container';
        (0,_dom__WEBPACK_IMPORTED_MODULE_4__.toggleClass)(this._element, 'dv-full-width-single-tab', this.accessor.options.singleTabMode === 'fullwidth');
        this.rightActionsContainer = document.createElement('div');
        this.rightActionsContainer.className = 'dv-right-actions-container';
        this.leftActionsContainer = document.createElement('div');
        this.leftActionsContainer.className = 'dv-left-actions-container';
        this.preActionsContainer = document.createElement('div');
        this.preActionsContainer.className = 'dv-pre-actions-container';
        this.tabContainer = document.createElement('div');
        this.tabContainer.className = 'dv-tabs-container';
        this.voidContainer = new _voidContainer__WEBPACK_IMPORTED_MODULE_3__.VoidContainer(this.accessor, this.group);
        this._element.appendChild(this.preActionsContainer);
        this._element.appendChild(this.tabContainer);
        this._element.appendChild(this.leftActionsContainer);
        this._element.appendChild(this.voidContainer.element);
        this._element.appendChild(this.rightActionsContainer);
        this.addDisposables(this._onWillShowOverlay, this._onDrop, this._onTabDragStart, this._onGroupDragStart, this.voidContainer, this.voidContainer.onDragStart((event) => {
            this._onGroupDragStart.fire({
                nativeEvent: event,
                group: this.group,
            });
        }), this.voidContainer.onDrop((event) => {
            this._onDrop.fire({
                event: event.nativeEvent,
                index: this.tabs.length,
            });
        }), this.voidContainer.onWillShowOverlay((event) => {
            this._onWillShowOverlay.fire(new _dockviewGroupPanelModel__WEBPACK_IMPORTED_MODULE_5__.WillShowOverlayLocationEvent(event, {
                kind: 'header_space',
                panel: this.group.activePanel,
                api: this.accessor.api,
                group: this.group,
                getData: _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_6__.getPanelData,
            }));
        }), (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(this.voidContainer.element, 'pointerdown', (event) => {
            const isFloatingGroupsEnabled = !this.accessor.options.disableFloatingGroups;
            if (isFloatingGroupsEnabled &&
                event.shiftKey &&
                this.group.api.location.type !== 'floating') {
                event.preventDefault();
                const { top, left } = this.element.getBoundingClientRect();
                const { top: rootTop, left: rootLeft } = this.accessor.element.getBoundingClientRect();
                this.accessor.addFloatingGroup(this.group, {
                    x: left - rootLeft + 20,
                    y: top - rootTop + 20,
                    inDragMode: true,
                });
            }
        }), (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(this.tabContainer, 'pointerdown', (event) => {
            if (event.defaultPrevented) {
                return;
            }
            const isLeftClick = event.button === 0;
            if (isLeftClick) {
                this.accessor.doSetGroupActive(this.group);
            }
        }));
    }
    setActive(_isGroupActive) {
        // noop
    }
    delete(id) {
        const index = this.tabs.findIndex((tab) => tab.value.panel.id === id);
        const tabToRemove = this.tabs.splice(index, 1)[0];
        if (!tabToRemove) {
            throw new Error(`dockview: Tab not found`);
        }
        const { value, disposable } = tabToRemove;
        disposable.dispose();
        value.dispose();
        value.element.remove();
        this.updateClassnames();
    }
    setActivePanel(panel) {
        this.tabs.forEach((tab) => {
            const isActivePanel = panel.id === tab.value.panel.id;
            tab.value.setActive(isActivePanel);
        });
    }
    openPanel(panel, index = this.tabs.length) {
        if (this.tabs.find((tab) => tab.value.panel.id === panel.id)) {
            return;
        }
        const tab = new _tab_tab__WEBPACK_IMPORTED_MODULE_2__.Tab(panel, this.accessor, this.group);
        tab.setContent(panel.view.tab);
        const disposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_0__.CompositeDisposable(tab.onDragStart((event) => {
            this._onTabDragStart.fire({ nativeEvent: event, panel });
        }), tab.onPointerDown((event) => {
            if (event.defaultPrevented) {
                return;
            }
            const isFloatingGroupsEnabled = !this.accessor.options.disableFloatingGroups;
            const isFloatingWithOnePanel = this.group.api.location.type === 'floating' &&
                this.size === 1;
            if (isFloatingGroupsEnabled &&
                !isFloatingWithOnePanel &&
                event.shiftKey) {
                event.preventDefault();
                const panel = this.accessor.getGroupPanel(tab.panel.id);
                const { top, left } = tab.element.getBoundingClientRect();
                const { top: rootTop, left: rootLeft } = this.accessor.element.getBoundingClientRect();
                this.accessor.addFloatingGroup(panel, {
                    x: left - rootLeft,
                    y: top - rootTop,
                    inDragMode: true,
                });
                return;
            }
            switch (event.button) {
                case 0: // left click or touch
                    if (this.group.activePanel !== panel) {
                        this.group.model.openPanel(panel);
                    }
                    break;
            }
        }), tab.onDrop((event) => {
            this._onDrop.fire({
                event: event.nativeEvent,
                index: this.tabs.findIndex((x) => x.value === tab),
            });
        }), tab.onWillShowOverlay((event) => {
            this._onWillShowOverlay.fire(new _dockviewGroupPanelModel__WEBPACK_IMPORTED_MODULE_5__.WillShowOverlayLocationEvent(event, {
                kind: 'tab',
                panel: this.group.activePanel,
                api: this.accessor.api,
                group: this.group,
                getData: _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_6__.getPanelData,
            }));
        }));
        const value = { value: tab, disposable };
        this.addTab(value, index);
    }
    closePanel(panel) {
        this.delete(panel.id);
    }
    dispose() {
        super.dispose();
        for (const { value, disposable } of this.tabs) {
            disposable.dispose();
            value.dispose();
        }
        this.tabs = [];
    }
    addTab(tab, index = this.tabs.length) {
        if (index < 0 || index > this.tabs.length) {
            throw new Error('invalid location');
        }
        this.tabContainer.insertBefore(tab.value.element, this.tabContainer.children[index]);
        this.tabs = [
            ...this.tabs.slice(0, index),
            tab,
            ...this.tabs.slice(index),
        ];
        if (this.selectedIndex < 0) {
            this.selectedIndex = index;
        }
        this.updateClassnames();
    }
    updateClassnames() {
        (0,_dom__WEBPACK_IMPORTED_MODULE_4__.toggleClass)(this._element, 'dv-single-tab', this.size === 1);
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/components/titlebar/voidContainer.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/components/titlebar/voidContainer.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VoidContainer: () => (/* binding */ VoidContainer)
/* harmony export */ });
/* harmony import */ var _array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../array */ "./node_modules/dockview-core/dist/esm/array.js");
/* harmony import */ var _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../dnd/dataTransfer */ "./node_modules/dockview-core/dist/esm/dnd/dataTransfer.js");
/* harmony import */ var _dnd_droptarget__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../dnd/droptarget */ "./node_modules/dockview-core/dist/esm/dnd/droptarget.js");
/* harmony import */ var _dnd_groupDragHandler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../dnd/groupDragHandler */ "./node_modules/dockview-core/dist/esm/dnd/groupDragHandler.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");






class VoidContainer extends _lifecycle__WEBPACK_IMPORTED_MODULE_5__.CompositeDisposable {
    get element() {
        return this._element;
    }
    constructor(accessor, group) {
        super();
        this.accessor = accessor;
        this.group = group;
        this._onDrop = new _events__WEBPACK_IMPORTED_MODULE_4__.Emitter();
        this.onDrop = this._onDrop.event;
        this._onDragStart = new _events__WEBPACK_IMPORTED_MODULE_4__.Emitter();
        this.onDragStart = this._onDragStart.event;
        this._element = document.createElement('div');
        this._element.className = 'dv-void-container';
        this._element.draggable = true;
        this.addDisposables(this._onDrop, this._onDragStart, (0,_events__WEBPACK_IMPORTED_MODULE_4__.addDisposableListener)(this._element, 'pointerdown', () => {
            this.accessor.doSetGroupActive(this.group);
        }));
        const handler = new _dnd_groupDragHandler__WEBPACK_IMPORTED_MODULE_3__.GroupDragHandler(this._element, accessor, group);
        this.dropTraget = new _dnd_droptarget__WEBPACK_IMPORTED_MODULE_2__.Droptarget(this._element, {
            acceptedTargetZones: ['center'],
            canDisplayOverlay: (event, position) => {
                var _a;
                const data = (0,_dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_1__.getPanelData)();
                if (data && this.accessor.id === data.viewId) {
                    if (data.panelId === null &&
                        data.groupId === this.group.id) {
                        // don't allow group move to drop on self
                        return false;
                    }
                    // don't show the overlay if the tab being dragged is the last panel of this group
                    return ((_a = (0,_array__WEBPACK_IMPORTED_MODULE_0__.last)(this.group.panels)) === null || _a === void 0 ? void 0 : _a.id) !== data.panelId;
                }
                return group.model.canDisplayOverlay(event, position, 'header_space');
            },
        });
        this.onWillShowOverlay = this.dropTraget.onWillShowOverlay;
        this.addDisposables(handler, handler.onDragStart((event) => {
            this._onDragStart.fire(event);
        }), this.dropTraget.onDrop((event) => {
            this._onDrop.fire(event);
        }), this.dropTraget);
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/components/watermark/watermark.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/components/watermark/watermark.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Watermark: () => (/* binding */ Watermark)
/* harmony export */ });
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");

class Watermark extends _lifecycle__WEBPACK_IMPORTED_MODULE_0__.CompositeDisposable {
    get element() {
        return this._element;
    }
    constructor() {
        super();
        this._element = document.createElement('div');
        this._element.className = 'dv-watermark';
    }
    init(_params) {
        // noop
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/deserializer.js":
/*!**********************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/deserializer.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DefaultDockviewDeserialzier: () => (/* binding */ DefaultDockviewDeserialzier)
/* harmony export */ });
/* harmony import */ var _dockviewPanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dockviewPanel */ "./node_modules/dockview-core/dist/esm/dockview/dockviewPanel.js");
/* harmony import */ var _dockviewPanelModel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dockviewPanelModel */ "./node_modules/dockview-core/dist/esm/dockview/dockviewPanelModel.js");
/* harmony import */ var _api_component_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../api/component.api */ "./node_modules/dockview-core/dist/esm/api/component.api.js");



class DefaultDockviewDeserialzier {
    constructor(accessor) {
        this.accessor = accessor;
    }
    fromJSON(panelData, group) {
        var _a, _b;
        const panelId = panelData.id;
        const params = panelData.params;
        const title = panelData.title;
        const viewData = panelData.view;
        const contentComponent = viewData
            ? viewData.content.id
            : (_a = panelData.contentComponent) !== null && _a !== void 0 ? _a : 'unknown';
        const tabComponent = viewData
            ? (_b = viewData.tab) === null || _b === void 0 ? void 0 : _b.id
            : panelData.tabComponent;
        const view = new _dockviewPanelModel__WEBPACK_IMPORTED_MODULE_1__.DockviewPanelModel(this.accessor, panelId, contentComponent, tabComponent);
        const panel = new _dockviewPanel__WEBPACK_IMPORTED_MODULE_0__.DockviewPanel(panelId, contentComponent, tabComponent, this.accessor, new _api_component_api__WEBPACK_IMPORTED_MODULE_2__.DockviewApi(this.accessor), group, view, {
            renderer: panelData.renderer,
            minimumWidth: panelData.minimumWidth,
            minimumHeight: panelData.minimumHeight,
            maximumWidth: panelData.maximumWidth,
            maximumHeight: panelData.maximumHeight,
        });
        panel.init({
            title: title !== null && title !== void 0 ? title : panelId,
            params: params !== null && params !== void 0 ? params : {},
        });
        return panel;
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/dockviewComponent.js":
/*!***************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/dockviewComponent.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DockviewComponent: () => (/* binding */ DockviewComponent)
/* harmony export */ });
/* harmony import */ var _gridview_gridview__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../gridview/gridview */ "./node_modules/dockview-core/dist/esm/gridview/gridview.js");
/* harmony import */ var _dnd_droptarget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dnd/droptarget */ "./node_modules/dockview-core/dist/esm/dnd/droptarget.js");
/* harmony import */ var _array__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../array */ "./node_modules/dockview-core/dist/esm/array.js");
/* harmony import */ var _dockviewPanel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dockviewPanel */ "./node_modules/dockview-core/dist/esm/dockview/dockviewPanel.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _components_watermark_watermark__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./components/watermark/watermark */ "./node_modules/dockview-core/dist/esm/dockview/components/watermark/watermark.js");
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../math */ "./node_modules/dockview-core/dist/esm/math.js");
/* harmony import */ var _deserializer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./deserializer */ "./node_modules/dockview-core/dist/esm/dockview/deserializer.js");
/* harmony import */ var _options__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./options */ "./node_modules/dockview-core/dist/esm/dockview/options.js");
/* harmony import */ var _gridview_baseComponentGridview__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../gridview/baseComponentGridview */ "./node_modules/dockview-core/dist/esm/gridview/baseComponentGridview.js");
/* harmony import */ var _api_component_api__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../api/component.api */ "./node_modules/dockview-core/dist/esm/api/component.api.js");
/* harmony import */ var _splitview_splitview__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../splitview/splitview */ "./node_modules/dockview-core/dist/esm/splitview/splitview.js");
/* harmony import */ var _dockviewGroupPanelModel__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./dockviewGroupPanelModel */ "./node_modules/dockview-core/dist/esm/dockview/dockviewGroupPanelModel.js");
/* harmony import */ var _dockviewGroupPanel__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./dockviewGroupPanel */ "./node_modules/dockview-core/dist/esm/dockview/dockviewGroupPanel.js");
/* harmony import */ var _dockviewPanelModel__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./dockviewPanelModel */ "./node_modules/dockview-core/dist/esm/dockview/dockviewPanelModel.js");
/* harmony import */ var _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../dnd/dataTransfer */ "./node_modules/dockview-core/dist/esm/dnd/dataTransfer.js");
/* harmony import */ var _overlay_overlay__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../overlay/overlay */ "./node_modules/dockview-core/dist/esm/overlay/overlay.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _dockviewFloatingGroupPanel__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./dockviewFloatingGroupPanel */ "./node_modules/dockview-core/dist/esm/dockview/dockviewFloatingGroupPanel.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../constants */ "./node_modules/dockview-core/dist/esm/constants.js");
/* harmony import */ var _overlay_overlayRenderContainer__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../overlay/overlayRenderContainer */ "./node_modules/dockview-core/dist/esm/overlay/overlayRenderContainer.js");
/* harmony import */ var _popoutWindow__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../popoutWindow */ "./node_modules/dockview-core/dist/esm/popoutWindow.js");
/* harmony import */ var _strictEventsSequencing__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./strictEventsSequencing */ "./node_modules/dockview-core/dist/esm/dockview/strictEventsSequencing.js");
























const DEFAULT_ROOT_OVERLAY_MODEL = {
    activationSize: { type: 'pixels', value: 10 },
    size: { type: 'pixels', value: 20 },
};
function moveGroupWithoutDestroying(options) {
    const activePanel = options.from.activePanel;
    const panels = [...options.from.panels].map((panel) => {
        const removedPanel = options.from.model.removePanel(panel);
        options.from.model.renderContainer.detatch(panel);
        return removedPanel;
    });
    panels.forEach((panel) => {
        options.to.model.openPanel(panel, {
            skipSetActive: activePanel !== panel,
            skipSetGroupActive: true,
        });
    });
}
class DockviewComponent extends _gridview_baseComponentGridview__WEBPACK_IMPORTED_MODULE_10__.BaseGrid {
    get orientation() {
        return this.gridview.orientation;
    }
    get totalPanels() {
        return this.panels.length;
    }
    get panels() {
        return this.groups.flatMap((group) => group.panels);
    }
    get options() {
        return this._options;
    }
    get activePanel() {
        const activeGroup = this.activeGroup;
        if (!activeGroup) {
            return undefined;
        }
        return activeGroup.activePanel;
    }
    get renderer() {
        var _a;
        return (_a = this.options.defaultRenderer) !== null && _a !== void 0 ? _a : 'onlyWhenVisible';
    }
    get api() {
        return this._api;
    }
    get gap() {
        return this.gridview.margin;
    }
    get floatingGroups() {
        return this._floatingGroups;
    }
    constructor(container, options) {
        var _a;
        super(container, {
            proportionalLayout: true,
            orientation: _splitview_splitview__WEBPACK_IMPORTED_MODULE_12__.Orientation.HORIZONTAL,
            styles: options.hideBorders
                ? { separatorBorder: 'transparent' }
                : undefined,
            disableAutoResizing: options.disableAutoResizing,
            locked: options.locked,
            margin: options.gap,
            className: options.className,
        });
        this.nextGroupId = (0,_math__WEBPACK_IMPORTED_MODULE_7__.sequentialNumberGenerator)();
        this._deserializer = new _deserializer__WEBPACK_IMPORTED_MODULE_8__.DefaultDockviewDeserialzier(this);
        this.watermark = null;
        this._onWillDragPanel = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onWillDragPanel = this._onWillDragPanel.event;
        this._onWillDragGroup = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onWillDragGroup = this._onWillDragGroup.event;
        this._onDidDrop = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onDidDrop = this._onDidDrop.event;
        this._onWillDrop = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onWillDrop = this._onWillDrop.event;
        this._onWillShowOverlay = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onWillShowOverlay = this._onWillShowOverlay.event;
        this._onUnhandledDragOverEvent = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onUnhandledDragOverEvent = this._onUnhandledDragOverEvent.event;
        this._onDidRemovePanel = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onDidRemovePanel = this._onDidRemovePanel.event;
        this._onDidAddPanel = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onDidAddPanel = this._onDidAddPanel.event;
        this._onDidLayoutFromJSON = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onDidLayoutFromJSON = this._onDidLayoutFromJSON.event;
        this._onDidActivePanelChange = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onDidActivePanelChange = this._onDidActivePanelChange.event;
        this._onDidMovePanel = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onDidMovePanel = this._onDidMovePanel.event;
        this._onDidMaximizedGroupChange = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onDidMaximizedGroupChange = this._onDidMaximizedGroupChange.event;
        this._floatingGroups = [];
        this._popoutGroups = [];
        this._onDidRemoveGroup = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onDidRemoveGroup = this._onDidRemoveGroup.event;
        this._onDidAddGroup = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onDidAddGroup = this._onDidAddGroup.event;
        this._onDidActiveGroupChange = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onDidActiveGroupChange = this._onDidActiveGroupChange.event;
        this._moving = false;
        this.overlayRenderContainer = new _overlay_overlayRenderContainer__WEBPACK_IMPORTED_MODULE_21__.OverlayRenderContainer(this.gridview.element, this);
        (0,_dom__WEBPACK_IMPORTED_MODULE_18__.toggleClass)(this.gridview.element, 'dv-dockview', true);
        (0,_dom__WEBPACK_IMPORTED_MODULE_18__.toggleClass)(this.element, 'dv-debug', !!options.debug);
        if (options.debug) {
            this.addDisposables(new _strictEventsSequencing__WEBPACK_IMPORTED_MODULE_23__.StrictEventsSequencing(this));
        }
        this.addDisposables(this.overlayRenderContainer, this._onWillDragPanel, this._onWillDragGroup, this._onWillShowOverlay, this._onDidActivePanelChange, this._onDidAddPanel, this._onDidRemovePanel, this._onDidLayoutFromJSON, this._onDidDrop, this._onWillDrop, this._onDidMovePanel, this._onDidAddGroup, this._onDidRemoveGroup, this._onDidActiveGroupChange, this._onUnhandledDragOverEvent, this._onDidMaximizedGroupChange, this.onDidViewVisibilityChangeMicroTaskQueue(() => {
            this.updateWatermark();
        }), this.onDidAdd((event) => {
            if (!this._moving) {
                this._onDidAddGroup.fire(event);
            }
        }), this.onDidRemove((event) => {
            if (!this._moving) {
                this._onDidRemoveGroup.fire(event);
            }
        }), this.onDidActiveChange((event) => {
            if (!this._moving) {
                this._onDidActiveGroupChange.fire(event);
            }
        }), this.onDidMaximizedChange((event) => {
            this._onDidMaximizedGroupChange.fire({
                group: event.panel,
                isMaximized: event.isMaximized,
            });
        }), _events__WEBPACK_IMPORTED_MODULE_5__.Event.any(this.onDidAdd, this.onDidRemove)(() => {
            this.updateWatermark();
        }), _events__WEBPACK_IMPORTED_MODULE_5__.Event.any(this.onDidAddPanel, this.onDidRemovePanel, this.onDidAddGroup, this.onDidRemove, this.onDidMovePanel, this.onDidActivePanelChange)(() => {
            this._bufferOnDidLayoutChange.fire();
        }), _lifecycle__WEBPACK_IMPORTED_MODULE_4__.Disposable.from(() => {
            // iterate over a copy of the array since .dispose() mutates the original array
            for (const group of [...this._floatingGroups]) {
                group.dispose();
            }
            // iterate over a copy of the array since .dispose() mutates the original array
            for (const group of [...this._popoutGroups]) {
                group.disposable.dispose();
            }
        }));
        this._options = options;
        this._rootDropTarget = new _dnd_droptarget__WEBPACK_IMPORTED_MODULE_1__.Droptarget(this.element, {
            canDisplayOverlay: (event, position) => {
                const data = (0,_dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_16__.getPanelData)();
                if (data) {
                    if (data.viewId !== this.id) {
                        return false;
                    }
                    if (position === 'center') {
                        // center drop target is only allowed if there are no panels in the grid
                        // floating panels are allowed
                        return this.gridview.length === 0;
                    }
                    return true;
                }
                if (position === 'center' && this.gridview.length !== 0) {
                    /**
                     * for external events only show the four-corner drag overlays, disable
                     * the center position so that external drag events can fall through to the group
                     * and panel drop target handlers
                     */
                    return false;
                }
                const firedEvent = new _options__WEBPACK_IMPORTED_MODULE_9__.DockviewUnhandledDragOverEvent(event, 'edge', position, _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_16__.getPanelData);
                this._onUnhandledDragOverEvent.fire(firedEvent);
                return firedEvent.isAccepted;
            },
            acceptedTargetZones: ['top', 'bottom', 'left', 'right', 'center'],
            overlayModel: (_a = this.options.rootOverlayModel) !== null && _a !== void 0 ? _a : DEFAULT_ROOT_OVERLAY_MODEL,
        });
        this.addDisposables(this._rootDropTarget, this._rootDropTarget.onWillShowOverlay((event) => {
            if (this.gridview.length > 0 && event.position === 'center') {
                // option only available when no panels in primary grid
                return;
            }
            this._onWillShowOverlay.fire(new _dockviewGroupPanelModel__WEBPACK_IMPORTED_MODULE_13__.WillShowOverlayLocationEvent(event, {
                kind: 'edge',
                panel: undefined,
                api: this._api,
                group: undefined,
                getData: _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_16__.getPanelData,
            }));
        }), this._rootDropTarget.onDrop((event) => {
            var _a;
            const willDropEvent = new _dockviewGroupPanelModel__WEBPACK_IMPORTED_MODULE_13__.DockviewWillDropEvent({
                nativeEvent: event.nativeEvent,
                position: event.position,
                panel: undefined,
                api: this._api,
                group: undefined,
                getData: _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_16__.getPanelData,
                kind: 'edge',
            });
            this._onWillDrop.fire(willDropEvent);
            if (willDropEvent.defaultPrevented) {
                return;
            }
            const data = (0,_dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_16__.getPanelData)();
            if (data) {
                this.moveGroupOrPanel({
                    from: {
                        groupId: data.groupId,
                        panelId: (_a = data.panelId) !== null && _a !== void 0 ? _a : undefined,
                    },
                    to: {
                        group: this.orthogonalize(event.position),
                        position: 'center',
                    },
                });
            }
            else {
                this._onDidDrop.fire(new _dockviewGroupPanelModel__WEBPACK_IMPORTED_MODULE_13__.DockviewDidDropEvent({
                    nativeEvent: event.nativeEvent,
                    position: event.position,
                    panel: undefined,
                    api: this._api,
                    group: undefined,
                    getData: _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_16__.getPanelData,
                }));
            }
        }), this._rootDropTarget);
        this._api = new _api_component_api__WEBPACK_IMPORTED_MODULE_11__.DockviewApi(this);
        this.updateWatermark();
    }
    setVisible(panel, visible) {
        switch (panel.api.location.type) {
            case 'grid':
                super.setVisible(panel, visible);
                break;
            case 'floating': {
                const item = this.floatingGroups.find((floatingGroup) => floatingGroup.group === panel);
                if (item) {
                    item.overlay.setVisible(visible);
                    panel.api._onDidVisibilityChange.fire({
                        isVisible: visible,
                    });
                }
                break;
            }
            case 'popout':
                console.warn('dockview: You cannot hide a group that is in a popout window');
                break;
        }
    }
    addPopoutGroup(itemToPopout, options) {
        var _a, _b, _c, _d, _e;
        if (itemToPopout instanceof _dockviewPanel__WEBPACK_IMPORTED_MODULE_3__.DockviewPanel &&
            itemToPopout.group.size === 1) {
            return this.addPopoutGroup(itemToPopout.group, options);
        }
        const theme = (0,_dom__WEBPACK_IMPORTED_MODULE_18__.getDockviewTheme)(this.gridview.element);
        const element = this.element;
        function getBox() {
            if (options === null || options === void 0 ? void 0 : options.position) {
                return options.position;
            }
            if (itemToPopout instanceof _dockviewGroupPanel__WEBPACK_IMPORTED_MODULE_14__.DockviewGroupPanel) {
                return itemToPopout.element.getBoundingClientRect();
            }
            if (itemToPopout.group) {
                return itemToPopout.group.element.getBoundingClientRect();
            }
            return element.getBoundingClientRect();
        }
        const box = getBox();
        const groupId = (_b = (_a = options === null || options === void 0 ? void 0 : options.overridePopoutGroup) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : this.getNextGroupId();
        const _window = new _popoutWindow__WEBPACK_IMPORTED_MODULE_22__.PopoutWindow(`${this.id}-${groupId}`, // unique id
        theme !== null && theme !== void 0 ? theme : '', {
            url: (_e = (_c = options === null || options === void 0 ? void 0 : options.popoutUrl) !== null && _c !== void 0 ? _c : (_d = this.options) === null || _d === void 0 ? void 0 : _d.popoutUrl) !== null && _e !== void 0 ? _e : '/popout.html',
            left: window.screenX + box.left,
            top: window.screenY + box.top,
            width: box.width,
            height: box.height,
            onDidOpen: options === null || options === void 0 ? void 0 : options.onDidOpen,
            onWillClose: options === null || options === void 0 ? void 0 : options.onWillClose,
        });
        const popoutWindowDisposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_4__.CompositeDisposable(_window, _window.onDidClose(() => {
            popoutWindowDisposable.dispose();
        }));
        return _window
            .open()
            .then((popoutContainer) => {
            var _a;
            if (_window.isDisposed) {
                return false;
            }
            if (popoutContainer === null) {
                popoutWindowDisposable.dispose();
                return false;
            }
            const gready = document.createElement('div');
            gready.className = 'dv-overlay-render-container';
            const overlayRenderContainer = new _overlay_overlayRenderContainer__WEBPACK_IMPORTED_MODULE_21__.OverlayRenderContainer(gready, this);
            const referenceGroup = itemToPopout instanceof _dockviewPanel__WEBPACK_IMPORTED_MODULE_3__.DockviewPanel
                ? itemToPopout.group
                : itemToPopout;
            const referenceLocation = itemToPopout.api.location.type;
            /**
             * The group that is being added doesn't already exist within the DOM, the most likely occurance
             * of this case is when being called from the `fromJSON(...)` method
             */
            const isGroupAddedToDom = referenceGroup.element.parentElement !== null;
            let group;
            if (!isGroupAddedToDom) {
                group = referenceGroup;
            }
            else if (options === null || options === void 0 ? void 0 : options.overridePopoutGroup) {
                group = options.overridePopoutGroup;
            }
            else {
                group = this.createGroup({ id: groupId });
                this._onDidAddGroup.fire(group);
            }
            group.model.renderContainer = overlayRenderContainer;
            group.layout(_window.window.innerWidth, _window.window.innerHeight);
            let floatingBox;
            if (!(options === null || options === void 0 ? void 0 : options.overridePopoutGroup) && isGroupAddedToDom) {
                if (itemToPopout instanceof _dockviewPanel__WEBPACK_IMPORTED_MODULE_3__.DockviewPanel) {
                    this.movingLock(() => {
                        const panel = referenceGroup.model.removePanel(itemToPopout);
                        group.model.openPanel(panel);
                    });
                }
                else {
                    this.movingLock(() => moveGroupWithoutDestroying({
                        from: referenceGroup,
                        to: group,
                    }));
                    switch (referenceLocation) {
                        case 'grid':
                            referenceGroup.api.setVisible(false);
                            break;
                        case 'floating':
                        case 'popout':
                            floatingBox = (_a = this._floatingGroups
                                .find((value) => value.group.api.id ===
                                itemToPopout.api.id)) === null || _a === void 0 ? void 0 : _a.overlay.toJSON();
                            this.removeGroup(referenceGroup);
                            break;
                    }
                }
            }
            popoutContainer.classList.add('dv-dockview');
            popoutContainer.style.overflow = 'hidden';
            popoutContainer.appendChild(gready);
            popoutContainer.appendChild(group.element);
            group.model.location = {
                type: 'popout',
                getWindow: () => _window.window,
                popoutUrl: options === null || options === void 0 ? void 0 : options.popoutUrl,
            };
            if (isGroupAddedToDom &&
                itemToPopout.api.location.type === 'grid') {
                itemToPopout.api.setVisible(false);
            }
            this.doSetGroupAndPanelActive(group);
            popoutWindowDisposable.addDisposables(group.api.onDidActiveChange((event) => {
                var _a;
                if (event.isActive) {
                    (_a = _window.window) === null || _a === void 0 ? void 0 : _a.focus();
                }
            }), group.api.onWillFocus(() => {
                var _a;
                (_a = _window.window) === null || _a === void 0 ? void 0 : _a.focus();
            }));
            let returnedGroup;
            const isValidReferenceGroup = isGroupAddedToDom &&
                referenceGroup &&
                this.getPanel(referenceGroup.id);
            const value = {
                window: _window,
                popoutGroup: group,
                referenceGroup: isValidReferenceGroup
                    ? referenceGroup.id
                    : undefined,
                disposable: {
                    dispose: () => {
                        popoutWindowDisposable.dispose();
                        return returnedGroup;
                    },
                },
            };
            popoutWindowDisposable.addDisposables(
            /**
             * ResizeObserver seems slow here, I do not know why but we don't need it
             * since we can reply on the window resize event as we will occupy the full
             * window dimensions
             */
            (0,_events__WEBPACK_IMPORTED_MODULE_5__.addDisposableWindowListener)(_window.window, 'resize', () => {
                group.layout(_window.window.innerWidth, _window.window.innerHeight);
            }), overlayRenderContainer, _lifecycle__WEBPACK_IMPORTED_MODULE_4__.Disposable.from(() => {
                if (this.isDisposed) {
                    return; // cleanup may run after instance is disposed
                }
                if (isGroupAddedToDom &&
                    this.getPanel(referenceGroup.id)) {
                    this.movingLock(() => moveGroupWithoutDestroying({
                        from: group,
                        to: referenceGroup,
                    }));
                    if (!referenceGroup.api.isVisible) {
                        referenceGroup.api.setVisible(true);
                    }
                    if (this.getPanel(group.id)) {
                        this.doRemoveGroup(group, {
                            skipPopoutAssociated: true,
                        });
                    }
                }
                else if (this.getPanel(group.id)) {
                    group.model.renderContainer =
                        this.overlayRenderContainer;
                    returnedGroup = group;
                    const alreadyRemoved = !this._popoutGroups.find((p) => p.popoutGroup === group);
                    if (alreadyRemoved) {
                        /**
                         * If this popout group was explicitly removed then we shouldn't run the additional
                         * steps. To tell if the running of this disposable is the result of this popout group
                         * being explicitly removed we can check if this popout group is still referenced in
                         * the `this._popoutGroups` list.
                         */
                        return;
                    }
                    if (floatingBox) {
                        this.addFloatingGroup(group, {
                            height: floatingBox.height,
                            width: floatingBox.width,
                            position: floatingBox,
                        });
                    }
                    else {
                        this.doRemoveGroup(group, {
                            skipDispose: true,
                            skipActive: true,
                            skipPopoutReturn: true,
                        });
                        group.model.location = { type: 'grid' };
                        this.movingLock(() => {
                            // suppress group add events since the group already exists
                            this.doAddGroup(group, [0]);
                        });
                    }
                    this.doSetGroupAndPanelActive(group);
                }
            }));
            this._popoutGroups.push(value);
            this.updateWatermark();
            return true;
        })
            .catch((err) => {
            console.error('dockview: failed to create popout window', err);
            return false;
        });
    }
    addFloatingGroup(item, options) {
        var _a, _b, _c, _d, _e;
        let group;
        if (item instanceof _dockviewPanel__WEBPACK_IMPORTED_MODULE_3__.DockviewPanel) {
            group = this.createGroup();
            this._onDidAddGroup.fire(group);
            this.movingLock(() => this.removePanel(item, {
                removeEmptyGroup: true,
                skipDispose: true,
                skipSetActiveGroup: true,
            }));
            this.movingLock(() => group.model.openPanel(item, { skipSetGroupActive: true }));
        }
        else {
            group = item;
            const popoutReferenceGroupId = (_a = this._popoutGroups.find((_) => _.popoutGroup === group)) === null || _a === void 0 ? void 0 : _a.referenceGroup;
            const popoutReferenceGroup = popoutReferenceGroupId
                ? this.getPanel(popoutReferenceGroupId)
                : undefined;
            const skip = typeof (options === null || options === void 0 ? void 0 : options.skipRemoveGroup) === 'boolean' &&
                options.skipRemoveGroup;
            if (!skip) {
                if (popoutReferenceGroup) {
                    this.movingLock(() => moveGroupWithoutDestroying({
                        from: item,
                        to: popoutReferenceGroup,
                    }));
                    this.doRemoveGroup(item, {
                        skipPopoutReturn: true,
                        skipPopoutAssociated: true,
                    });
                    this.doRemoveGroup(popoutReferenceGroup, {
                        skipDispose: true,
                    });
                    group = popoutReferenceGroup;
                }
                else {
                    this.doRemoveGroup(item, {
                        skipDispose: true,
                        skipPopoutReturn: true,
                        skipPopoutAssociated: false,
                    });
                }
            }
        }
        function getAnchoredBox() {
            if (options === null || options === void 0 ? void 0 : options.position) {
                const result = {};
                if ('left' in options.position) {
                    result.left = Math.max(options.position.left, 0);
                }
                else if ('right' in options.position) {
                    result.right = Math.max(options.position.right, 0);
                }
                else {
                    result.left = _constants__WEBPACK_IMPORTED_MODULE_20__.DEFAULT_FLOATING_GROUP_POSITION.left;
                }
                if ('top' in options.position) {
                    result.top = Math.max(options.position.top, 0);
                }
                else if ('bottom' in options.position) {
                    result.bottom = Math.max(options.position.bottom, 0);
                }
                else {
                    result.top = _constants__WEBPACK_IMPORTED_MODULE_20__.DEFAULT_FLOATING_GROUP_POSITION.top;
                }
                if (typeof options.width === 'number') {
                    result.width = Math.max(options.width, 0);
                }
                else {
                    result.width = _constants__WEBPACK_IMPORTED_MODULE_20__.DEFAULT_FLOATING_GROUP_POSITION.width;
                }
                if (typeof options.height === 'number') {
                    result.height = Math.max(options.height, 0);
                }
                else {
                    result.height = _constants__WEBPACK_IMPORTED_MODULE_20__.DEFAULT_FLOATING_GROUP_POSITION.height;
                }
                return result;
            }
            return {
                left: typeof (options === null || options === void 0 ? void 0 : options.x) === 'number'
                    ? Math.max(options.x, 0)
                    : _constants__WEBPACK_IMPORTED_MODULE_20__.DEFAULT_FLOATING_GROUP_POSITION.left,
                top: typeof (options === null || options === void 0 ? void 0 : options.y) === 'number'
                    ? Math.max(options.y, 0)
                    : _constants__WEBPACK_IMPORTED_MODULE_20__.DEFAULT_FLOATING_GROUP_POSITION.top,
                width: typeof (options === null || options === void 0 ? void 0 : options.width) === 'number'
                    ? Math.max(options.width, 0)
                    : _constants__WEBPACK_IMPORTED_MODULE_20__.DEFAULT_FLOATING_GROUP_POSITION.width,
                height: typeof (options === null || options === void 0 ? void 0 : options.height) === 'number'
                    ? Math.max(options.height, 0)
                    : _constants__WEBPACK_IMPORTED_MODULE_20__.DEFAULT_FLOATING_GROUP_POSITION.height,
            };
        }
        const anchoredBox = getAnchoredBox();
        const overlay = new _overlay_overlay__WEBPACK_IMPORTED_MODULE_17__.Overlay(Object.assign(Object.assign({ container: this.gridview.element, content: group.element }, anchoredBox), { minimumInViewportWidth: this.options.floatingGroupBounds === 'boundedWithinViewport'
                ? undefined
                : (_c = (_b = this.options.floatingGroupBounds) === null || _b === void 0 ? void 0 : _b.minimumWidthWithinViewport) !== null && _c !== void 0 ? _c : _constants__WEBPACK_IMPORTED_MODULE_20__.DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE, minimumInViewportHeight: this.options.floatingGroupBounds === 'boundedWithinViewport'
                ? undefined
                : (_e = (_d = this.options.floatingGroupBounds) === null || _d === void 0 ? void 0 : _d.minimumHeightWithinViewport) !== null && _e !== void 0 ? _e : _constants__WEBPACK_IMPORTED_MODULE_20__.DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE }));
        const el = group.element.querySelector('.dv-void-container');
        if (!el) {
            throw new Error('failed to find drag handle');
        }
        overlay.setupDrag(el, {
            inDragMode: typeof (options === null || options === void 0 ? void 0 : options.inDragMode) === 'boolean'
                ? options.inDragMode
                : false,
        });
        const floatingGroupPanel = new _dockviewFloatingGroupPanel__WEBPACK_IMPORTED_MODULE_19__.DockviewFloatingGroupPanel(group, overlay);
        const disposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_4__.CompositeDisposable(group.api.onDidActiveChange((event) => {
            if (event.isActive) {
                overlay.bringToFront();
            }
        }), (0,_dom__WEBPACK_IMPORTED_MODULE_18__.watchElementResize)(group.element, (entry) => {
            const { width, height } = entry.contentRect;
            group.layout(width, height); // let the group know it's size is changing so it can fire events to the panel
        }));
        floatingGroupPanel.addDisposables(overlay.onDidChange(() => {
            // this is either a resize or a move
            // to inform the panels .layout(...) the group with it's current size
            // don't care about resize since the above watcher handles that
            group.layout(group.width, group.height);
        }), overlay.onDidChangeEnd(() => {
            this._bufferOnDidLayoutChange.fire();
        }), group.onDidChange((event) => {
            overlay.setBounds({
                height: event === null || event === void 0 ? void 0 : event.height,
                width: event === null || event === void 0 ? void 0 : event.width,
            });
        }), {
            dispose: () => {
                disposable.dispose();
                (0,_array__WEBPACK_IMPORTED_MODULE_2__.remove)(this._floatingGroups, floatingGroupPanel);
                group.model.location = { type: 'grid' };
                this.updateWatermark();
            },
        });
        this._floatingGroups.push(floatingGroupPanel);
        group.model.location = { type: 'floating' };
        if (!(options === null || options === void 0 ? void 0 : options.skipActiveGroup)) {
            this.doSetGroupAndPanelActive(group);
        }
        this.updateWatermark();
    }
    orthogonalize(position) {
        switch (position) {
            case 'top':
            case 'bottom':
                if (this.gridview.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_12__.Orientation.HORIZONTAL) {
                    // we need to add to a vertical splitview but the current root is a horizontal splitview.
                    // insert a vertical splitview at the root level and add the existing view as a child
                    this.gridview.insertOrthogonalSplitviewAtRoot();
                }
                break;
            case 'left':
            case 'right':
                if (this.gridview.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_12__.Orientation.VERTICAL) {
                    // we need to add to a horizontal splitview but the current root is a vertical splitview.
                    // insert a horiziontal splitview at the root level and add the existing view as a child
                    this.gridview.insertOrthogonalSplitviewAtRoot();
                }
                break;
            default:
                break;
        }
        switch (position) {
            case 'top':
            case 'left':
            case 'center':
                return this.createGroupAtLocation([0]); // insert into first position
            case 'bottom':
            case 'right':
                return this.createGroupAtLocation([this.gridview.length]); // insert into last position
            default:
                throw new Error(`unsupported position ${position}`);
        }
    }
    updateOptions(options) {
        var _a, _b, _c, _d;
        super.updateOptions(options);
        if ('floatingGroupBounds' in options) {
            for (const group of this._floatingGroups) {
                switch (options.floatingGroupBounds) {
                    case 'boundedWithinViewport':
                        group.overlay.minimumInViewportHeight = undefined;
                        group.overlay.minimumInViewportWidth = undefined;
                        break;
                    case undefined:
                        group.overlay.minimumInViewportHeight =
                            _constants__WEBPACK_IMPORTED_MODULE_20__.DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE;
                        group.overlay.minimumInViewportWidth =
                            _constants__WEBPACK_IMPORTED_MODULE_20__.DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE;
                        break;
                    default:
                        group.overlay.minimumInViewportHeight =
                            (_a = options.floatingGroupBounds) === null || _a === void 0 ? void 0 : _a.minimumHeightWithinViewport;
                        group.overlay.minimumInViewportWidth =
                            (_b = options.floatingGroupBounds) === null || _b === void 0 ? void 0 : _b.minimumWidthWithinViewport;
                }
                group.overlay.setBounds();
            }
        }
        if ('rootOverlayModel' in options) {
            this._rootDropTarget.setOverlayModel((_c = options.rootOverlayModel) !== null && _c !== void 0 ? _c : DEFAULT_ROOT_OVERLAY_MODEL);
        }
        if ('gap' in options) {
            this.gridview.margin = (_d = options.gap) !== null && _d !== void 0 ? _d : 0;
        }
        this._options = Object.assign(Object.assign({}, this.options), options);
        this.layout(this.gridview.width, this.gridview.height, true);
    }
    layout(width, height, forceResize) {
        super.layout(width, height, forceResize);
        if (this._floatingGroups) {
            for (const floating of this._floatingGroups) {
                // ensure floting groups stay within visible boundaries
                floating.overlay.setBounds();
            }
        }
    }
    focus() {
        var _a;
        (_a = this.activeGroup) === null || _a === void 0 ? void 0 : _a.focus();
    }
    getGroupPanel(id) {
        return this.panels.find((panel) => panel.id === id);
    }
    setActivePanel(panel) {
        panel.group.model.openPanel(panel);
        this.doSetGroupAndPanelActive(panel.group);
    }
    moveToNext(options = {}) {
        var _a;
        if (!options.group) {
            if (!this.activeGroup) {
                return;
            }
            options.group = this.activeGroup;
        }
        if (options.includePanel && options.group) {
            if (options.group.activePanel !==
                options.group.panels[options.group.panels.length - 1]) {
                options.group.model.moveToNext({ suppressRoll: true });
                return;
            }
        }
        const location = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(options.group.element);
        const next = (_a = this.gridview.next(location)) === null || _a === void 0 ? void 0 : _a.view;
        this.doSetGroupAndPanelActive(next);
    }
    moveToPrevious(options = {}) {
        var _a;
        if (!options.group) {
            if (!this.activeGroup) {
                return;
            }
            options.group = this.activeGroup;
        }
        if (options.includePanel && options.group) {
            if (options.group.activePanel !== options.group.panels[0]) {
                options.group.model.moveToPrevious({ suppressRoll: true });
                return;
            }
        }
        const location = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(options.group.element);
        const next = (_a = this.gridview.previous(location)) === null || _a === void 0 ? void 0 : _a.view;
        if (next) {
            this.doSetGroupAndPanelActive(next);
        }
    }
    /**
     * Serialize the current state of the layout
     *
     * @returns A JSON respresentation of the layout
     */
    toJSON() {
        var _a;
        const data = this.gridview.serialize();
        const panels = this.panels.reduce((collection, panel) => {
            collection[panel.id] = panel.toJSON();
            return collection;
        }, {});
        const floats = this._floatingGroups.map((group) => {
            return {
                data: group.group.toJSON(),
                position: group.overlay.toJSON(),
            };
        });
        const popoutGroups = this._popoutGroups.map((group) => {
            return {
                data: group.popoutGroup.toJSON(),
                gridReferenceGroup: group.referenceGroup,
                position: group.window.dimensions(),
                url: group.popoutGroup.api.location.type === 'popout'
                    ? group.popoutGroup.api.location.popoutUrl
                    : undefined,
            };
        });
        const result = {
            grid: data,
            panels,
            activeGroup: (_a = this.activeGroup) === null || _a === void 0 ? void 0 : _a.id,
        };
        if (floats.length > 0) {
            result.floatingGroups = floats;
        }
        if (popoutGroups.length > 0) {
            result.popoutGroups = popoutGroups;
        }
        return result;
    }
    fromJSON(data) {
        var _a, _b, _c;
        this.clear();
        if (typeof data !== 'object' || data === null) {
            throw new Error('serialized layout must be a non-null object');
        }
        const { grid, panels, activeGroup } = data;
        if (grid.root.type !== 'branch' || !Array.isArray(grid.root.data)) {
            throw new Error('root must be of type branch');
        }
        try {
            // take note of the existing dimensions
            const width = this.width;
            const height = this.height;
            const createGroupFromSerializedState = (data) => {
                const { id, locked, hideHeader, views, activeView } = data;
                if (typeof id !== 'string') {
                    throw new Error('group id must be of type string');
                }
                const group = this.createGroup({
                    id,
                    locked: !!locked,
                    hideHeader: !!hideHeader,
                });
                this._onDidAddGroup.fire(group);
                const createdPanels = [];
                for (const child of views) {
                    /**
                     * Run the deserializer step seperately since this may fail to due corrupted external state.
                     * In running this section first we avoid firing lots of 'add' events in the event of a failure
                     * due to a corruption of input data.
                     */
                    const panel = this._deserializer.fromJSON(panels[child], group);
                    createdPanels.push(panel);
                }
                for (let i = 0; i < views.length; i++) {
                    const panel = createdPanels[i];
                    const isActive = typeof activeView === 'string' &&
                        activeView === panel.id;
                    group.model.openPanel(panel, {
                        skipSetActive: !isActive,
                        skipSetGroupActive: true,
                    });
                }
                if (!group.activePanel && group.panels.length > 0) {
                    group.model.openPanel(group.panels[group.panels.length - 1], {
                        skipSetGroupActive: true,
                    });
                }
                return group;
            };
            this.gridview.deserialize(grid, {
                fromJSON: (node) => {
                    return createGroupFromSerializedState(node.data);
                },
            });
            this.layout(width, height, true);
            const serializedFloatingGroups = (_a = data.floatingGroups) !== null && _a !== void 0 ? _a : [];
            for (const serializedFloatingGroup of serializedFloatingGroups) {
                const { data, position } = serializedFloatingGroup;
                const group = createGroupFromSerializedState(data);
                this.addFloatingGroup(group, {
                    position: position,
                    width: position.width,
                    height: position.height,
                    skipRemoveGroup: true,
                    inDragMode: false,
                });
            }
            const serializedPopoutGroups = (_b = data.popoutGroups) !== null && _b !== void 0 ? _b : [];
            for (const serializedPopoutGroup of serializedPopoutGroups) {
                const { data, position, gridReferenceGroup, url } = serializedPopoutGroup;
                const group = createGroupFromSerializedState(data);
                this.addPopoutGroup((_c = (gridReferenceGroup
                    ? this.getPanel(gridReferenceGroup)
                    : undefined)) !== null && _c !== void 0 ? _c : group, {
                    position: position !== null && position !== void 0 ? position : undefined,
                    overridePopoutGroup: gridReferenceGroup
                        ? group
                        : undefined,
                    popoutUrl: url,
                });
            }
            for (const floatingGroup of this._floatingGroups) {
                floatingGroup.overlay.setBounds();
            }
            if (typeof activeGroup === 'string') {
                const panel = this.getPanel(activeGroup);
                if (panel) {
                    this.doSetGroupAndPanelActive(panel);
                }
            }
        }
        catch (err) {
            console.error('dockview: failed to deserialize layout. Reverting changes', err);
            /**
             * Takes all the successfully created groups and remove all of their panels.
             */
            for (const group of this.groups) {
                for (const panel of group.panels) {
                    this.removePanel(panel, {
                        removeEmptyGroup: false,
                        skipDispose: false,
                    });
                }
            }
            /**
             * To remove a group we cannot call this.removeGroup(...) since this makes assumptions about
             * the underlying HTMLElement existing in the Gridview.
             */
            for (const group of this.groups) {
                group.dispose();
                this._groups.delete(group.id);
                this._onDidRemoveGroup.fire(group);
            }
            // iterate over a reassigned array since original array will be modified
            for (const floatingGroup of [...this._floatingGroups]) {
                floatingGroup.dispose();
            }
            // fires clean-up events and clears the underlying HTML gridview.
            this.clear();
            /**
             * even though we have cleaned-up we still want to inform the caller of their error
             * and we'll do this through re-throwing the original error since afterall you would
             * expect trying to load a corrupted layout to result in an error and not silently fail...
             */
            throw err;
        }
        this.updateWatermark();
        this._onDidLayoutFromJSON.fire();
    }
    clear() {
        const groups = Array.from(this._groups.values()).map((_) => _.value);
        const hasActiveGroup = !!this.activeGroup;
        for (const group of groups) {
            // remove the group will automatically remove the panels
            this.removeGroup(group, { skipActive: true });
        }
        if (hasActiveGroup) {
            this.doSetGroupAndPanelActive(undefined);
        }
        this.gridview.clear();
    }
    closeAllGroups() {
        for (const entry of this._groups.entries()) {
            const [_, group] = entry;
            group.value.model.closeAllPanels();
        }
    }
    addPanel(options) {
        var _a, _b;
        if (this.panels.find((_) => _.id === options.id)) {
            throw new Error(`panel with id ${options.id} already exists`);
        }
        let referenceGroup;
        if (options.position && options.floating) {
            throw new Error('you can only provide one of: position, floating as arguments to .addPanel(...)');
        }
        const initial = {
            width: options.initialWidth,
            height: options.initialHeight,
        };
        let index;
        if (options.position) {
            if ((0,_options__WEBPACK_IMPORTED_MODULE_9__.isPanelOptionsWithPanel)(options.position)) {
                const referencePanel = typeof options.position.referencePanel === 'string'
                    ? this.getGroupPanel(options.position.referencePanel)
                    : options.position.referencePanel;
                index = options.position.index;
                if (!referencePanel) {
                    throw new Error(`referencePanel '${options.position.referencePanel}' does not exist`);
                }
                referenceGroup = this.findGroup(referencePanel);
            }
            else if ((0,_options__WEBPACK_IMPORTED_MODULE_9__.isPanelOptionsWithGroup)(options.position)) {
                referenceGroup =
                    typeof options.position.referenceGroup === 'string'
                        ? (_a = this._groups.get(options.position.referenceGroup)) === null || _a === void 0 ? void 0 : _a.value
                        : options.position.referenceGroup;
                index = options.position.index;
                if (!referenceGroup) {
                    throw new Error(`referenceGroup '${options.position.referenceGroup}' does not exist`);
                }
            }
            else {
                const group = this.orthogonalize((0,_dnd_droptarget__WEBPACK_IMPORTED_MODULE_1__.directionToPosition)(options.position.direction));
                const panel = this.createPanel(options, group);
                group.model.openPanel(panel, {
                    skipSetActive: options.inactive,
                    skipSetGroupActive: options.inactive,
                    index,
                });
                if (!options.inactive) {
                    this.doSetGroupAndPanelActive(group);
                }
                group.api.setSize({
                    height: initial === null || initial === void 0 ? void 0 : initial.height,
                    width: initial === null || initial === void 0 ? void 0 : initial.width,
                });
                return panel;
            }
        }
        else {
            referenceGroup = this.activeGroup;
        }
        let panel;
        if (referenceGroup) {
            const target = (0,_gridview_baseComponentGridview__WEBPACK_IMPORTED_MODULE_10__.toTarget)(((_b = options.position) === null || _b === void 0 ? void 0 : _b.direction) || 'within');
            if (options.floating) {
                const group = this.createGroup();
                this._onDidAddGroup.fire(group);
                const floatingGroupOptions = typeof options.floating === 'object' &&
                    options.floating !== null
                    ? options.floating
                    : {};
                this.addFloatingGroup(group, Object.assign(Object.assign({}, floatingGroupOptions), { inDragMode: false, skipRemoveGroup: true, skipActiveGroup: true }));
                panel = this.createPanel(options, group);
                group.model.openPanel(panel, {
                    skipSetActive: options.inactive,
                    skipSetGroupActive: options.inactive,
                    index,
                });
            }
            else if (referenceGroup.api.location.type === 'floating' ||
                target === 'center') {
                panel = this.createPanel(options, referenceGroup);
                referenceGroup.model.openPanel(panel, {
                    skipSetActive: options.inactive,
                    skipSetGroupActive: options.inactive,
                    index,
                });
                referenceGroup.api.setSize({
                    width: initial === null || initial === void 0 ? void 0 : initial.width,
                    height: initial === null || initial === void 0 ? void 0 : initial.height,
                });
                if (!options.inactive) {
                    this.doSetGroupAndPanelActive(referenceGroup);
                }
            }
            else {
                const location = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(referenceGroup.element);
                const relativeLocation = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getRelativeLocation)(this.gridview.orientation, location, target);
                const group = this.createGroupAtLocation(relativeLocation, this.orientationAtLocation(relativeLocation) ===
                    _splitview_splitview__WEBPACK_IMPORTED_MODULE_12__.Orientation.VERTICAL
                    ? initial === null || initial === void 0 ? void 0 : initial.height
                    : initial === null || initial === void 0 ? void 0 : initial.width);
                panel = this.createPanel(options, group);
                group.model.openPanel(panel, {
                    skipSetActive: options.inactive,
                    skipSetGroupActive: options.inactive,
                    index,
                });
                if (!options.inactive) {
                    this.doSetGroupAndPanelActive(group);
                }
            }
        }
        else if (options.floating) {
            const group = this.createGroup();
            this._onDidAddGroup.fire(group);
            const coordinates = typeof options.floating === 'object' &&
                options.floating !== null
                ? options.floating
                : {};
            this.addFloatingGroup(group, Object.assign(Object.assign({}, coordinates), { inDragMode: false, skipRemoveGroup: true, skipActiveGroup: true }));
            panel = this.createPanel(options, group);
            group.model.openPanel(panel, {
                skipSetActive: options.inactive,
                skipSetGroupActive: options.inactive,
                index,
            });
        }
        else {
            const group = this.createGroupAtLocation([0], this.gridview.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_12__.Orientation.VERTICAL
                ? initial === null || initial === void 0 ? void 0 : initial.height
                : initial === null || initial === void 0 ? void 0 : initial.width);
            panel = this.createPanel(options, group);
            group.model.openPanel(panel, {
                skipSetActive: options.inactive,
                skipSetGroupActive: options.inactive,
                index,
            });
            if (!options.inactive) {
                this.doSetGroupAndPanelActive(group);
            }
        }
        return panel;
    }
    removePanel(panel, options = {
        removeEmptyGroup: true,
    }) {
        const group = panel.group;
        if (!group) {
            throw new Error(`cannot remove panel ${panel.id}. it's missing a group.`);
        }
        group.model.removePanel(panel, {
            skipSetActiveGroup: options.skipSetActiveGroup,
        });
        if (!options.skipDispose) {
            panel.group.model.renderContainer.detatch(panel);
            panel.dispose();
        }
        if (group.size === 0 && options.removeEmptyGroup) {
            this.removeGroup(group, { skipActive: options.skipSetActiveGroup });
        }
    }
    createWatermarkComponent() {
        if (this.options.createWatermarkComponent) {
            return this.options.createWatermarkComponent();
        }
        return new _components_watermark_watermark__WEBPACK_IMPORTED_MODULE_6__.Watermark();
    }
    updateWatermark() {
        var _a, _b;
        if (this.groups.filter((x) => x.api.location.type === 'grid' && x.api.isVisible).length === 0) {
            if (!this.watermark) {
                this.watermark = this.createWatermarkComponent();
                this.watermark.init({
                    containerApi: new _api_component_api__WEBPACK_IMPORTED_MODULE_11__.DockviewApi(this),
                });
                const watermarkContainer = document.createElement('div');
                watermarkContainer.className = 'dv-watermark-container';
                (0,_dom__WEBPACK_IMPORTED_MODULE_18__.addTestId)(watermarkContainer, 'watermark-component');
                watermarkContainer.appendChild(this.watermark.element);
                this.gridview.element.appendChild(watermarkContainer);
            }
        }
        else if (this.watermark) {
            this.watermark.element.parentElement.remove();
            (_b = (_a = this.watermark).dispose) === null || _b === void 0 ? void 0 : _b.call(_a);
            this.watermark = null;
        }
    }
    addGroup(options) {
        var _a;
        if (options) {
            let referenceGroup;
            if ((0,_options__WEBPACK_IMPORTED_MODULE_9__.isGroupOptionsWithPanel)(options)) {
                const referencePanel = typeof options.referencePanel === 'string'
                    ? this.panels.find((panel) => panel.id === options.referencePanel)
                    : options.referencePanel;
                if (!referencePanel) {
                    throw new Error(`reference panel ${options.referencePanel} does not exist`);
                }
                referenceGroup = this.findGroup(referencePanel);
                if (!referenceGroup) {
                    throw new Error(`reference group for reference panel ${options.referencePanel} does not exist`);
                }
            }
            else if ((0,_options__WEBPACK_IMPORTED_MODULE_9__.isGroupOptionsWithGroup)(options)) {
                referenceGroup =
                    typeof options.referenceGroup === 'string'
                        ? (_a = this._groups.get(options.referenceGroup)) === null || _a === void 0 ? void 0 : _a.value
                        : options.referenceGroup;
                if (!referenceGroup) {
                    throw new Error(`reference group ${options.referenceGroup} does not exist`);
                }
            }
            else {
                const group = this.orthogonalize((0,_dnd_droptarget__WEBPACK_IMPORTED_MODULE_1__.directionToPosition)(options.direction));
                if (!options.skipSetActive) {
                    this.doSetGroupAndPanelActive(group);
                }
                return group;
            }
            const target = (0,_gridview_baseComponentGridview__WEBPACK_IMPORTED_MODULE_10__.toTarget)(options.direction || 'within');
            const location = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(referenceGroup.element);
            const relativeLocation = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getRelativeLocation)(this.gridview.orientation, location, target);
            const group = this.createGroup(options);
            const size = this.getLocationOrientation(relativeLocation) ===
                _splitview_splitview__WEBPACK_IMPORTED_MODULE_12__.Orientation.VERTICAL
                ? options.initialHeight
                : options.initialWidth;
            this.doAddGroup(group, relativeLocation, size);
            if (!options.skipSetActive) {
                this.doSetGroupAndPanelActive(group);
            }
            return group;
        }
        else {
            const group = this.createGroup(options);
            this.doAddGroup(group);
            this.doSetGroupAndPanelActive(group);
            return group;
        }
    }
    getLocationOrientation(location) {
        return location.length % 2 == 0 &&
            this.gridview.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_12__.Orientation.HORIZONTAL
            ? _splitview_splitview__WEBPACK_IMPORTED_MODULE_12__.Orientation.HORIZONTAL
            : _splitview_splitview__WEBPACK_IMPORTED_MODULE_12__.Orientation.VERTICAL;
    }
    removeGroup(group, options) {
        this.doRemoveGroup(group, options);
    }
    doRemoveGroup(group, options) {
        var _a;
        const panels = [...group.panels]; // reassign since group panels will mutate
        if (!(options === null || options === void 0 ? void 0 : options.skipDispose)) {
            for (const panel of panels) {
                this.removePanel(panel, {
                    removeEmptyGroup: false,
                    skipDispose: (_a = options === null || options === void 0 ? void 0 : options.skipDispose) !== null && _a !== void 0 ? _a : false,
                });
            }
        }
        const activePanel = this.activePanel;
        if (group.api.location.type === 'floating') {
            const floatingGroup = this._floatingGroups.find((_) => _.group === group);
            if (floatingGroup) {
                if (!(options === null || options === void 0 ? void 0 : options.skipDispose)) {
                    floatingGroup.group.dispose();
                    this._groups.delete(group.id);
                    this._onDidRemoveGroup.fire(group);
                }
                (0,_array__WEBPACK_IMPORTED_MODULE_2__.remove)(this._floatingGroups, floatingGroup);
                floatingGroup.dispose();
                if (!(options === null || options === void 0 ? void 0 : options.skipActive) && this._activeGroup === group) {
                    const groups = Array.from(this._groups.values());
                    this.doSetGroupAndPanelActive(groups.length > 0 ? groups[0].value : undefined);
                }
                return floatingGroup.group;
            }
            throw new Error('failed to find floating group');
        }
        if (group.api.location.type === 'popout') {
            const selectedGroup = this._popoutGroups.find((_) => _.popoutGroup === group);
            if (selectedGroup) {
                if (!(options === null || options === void 0 ? void 0 : options.skipDispose)) {
                    if (!(options === null || options === void 0 ? void 0 : options.skipPopoutAssociated)) {
                        const refGroup = selectedGroup.referenceGroup
                            ? this.getPanel(selectedGroup.referenceGroup)
                            : undefined;
                        if (refGroup && refGroup.panels.length === 0) {
                            this.removeGroup(refGroup);
                        }
                    }
                    selectedGroup.popoutGroup.dispose();
                    this._groups.delete(group.id);
                    this._onDidRemoveGroup.fire(group);
                }
                (0,_array__WEBPACK_IMPORTED_MODULE_2__.remove)(this._popoutGroups, selectedGroup);
                const removedGroup = selectedGroup.disposable.dispose();
                if (!(options === null || options === void 0 ? void 0 : options.skipPopoutReturn) && removedGroup) {
                    this.doAddGroup(removedGroup, [0]);
                    this.doSetGroupAndPanelActive(removedGroup);
                }
                if (!(options === null || options === void 0 ? void 0 : options.skipActive) && this._activeGroup === group) {
                    const groups = Array.from(this._groups.values());
                    this.doSetGroupAndPanelActive(groups.length > 0 ? groups[0].value : undefined);
                }
                this.updateWatermark();
                return selectedGroup.popoutGroup;
            }
            throw new Error('failed to find popout group');
        }
        const re = super.doRemoveGroup(group, options);
        if (!(options === null || options === void 0 ? void 0 : options.skipActive)) {
            if (this.activePanel !== activePanel) {
                this._onDidActivePanelChange.fire(this.activePanel);
            }
        }
        return re;
    }
    movingLock(func) {
        const isMoving = this._moving;
        try {
            this._moving = true;
            return func();
        }
        finally {
            this._moving = isMoving;
        }
    }
    moveGroupOrPanel(options) {
        var _a;
        const destinationGroup = options.to.group;
        const sourceGroupId = options.from.groupId;
        const sourceItemId = options.from.panelId;
        const destinationTarget = options.to.position;
        const destinationIndex = options.to.index;
        const sourceGroup = sourceGroupId
            ? (_a = this._groups.get(sourceGroupId)) === null || _a === void 0 ? void 0 : _a.value
            : undefined;
        if (!sourceGroup) {
            throw new Error(`Failed to find group id ${sourceGroupId}`);
        }
        if (sourceItemId === undefined) {
            /**
             * Moving an entire group into another group
             */
            this.moveGroup({
                from: { group: sourceGroup },
                to: {
                    group: destinationGroup,
                    position: destinationTarget,
                },
            });
            return;
        }
        if (!destinationTarget || destinationTarget === 'center') {
            /**
             * Dropping a panel within another group
             */
            const removedPanel = this.movingLock(() => sourceGroup.model.removePanel(sourceItemId, {
                skipSetActive: false,
                skipSetActiveGroup: true,
            }));
            if (!removedPanel) {
                throw new Error(`No panel with id ${sourceItemId}`);
            }
            if (sourceGroup.model.size === 0) {
                // remove the group and do not set a new group as active
                this.doRemoveGroup(sourceGroup, { skipActive: true });
            }
            this.movingLock(() => destinationGroup.model.openPanel(removedPanel, {
                index: destinationIndex,
                skipSetGroupActive: true,
            }));
            this.doSetGroupAndPanelActive(destinationGroup);
            this._onDidMovePanel.fire({
                panel: removedPanel,
                from: sourceGroup,
            });
        }
        else {
            /**
             * Dropping a panel to the extremities of a group which will place that panel
             * into an adjacent group
             */
            const referenceLocation = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(destinationGroup.element);
            const targetLocation = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getRelativeLocation)(this.gridview.orientation, referenceLocation, destinationTarget);
            if (sourceGroup.size < 2) {
                /**
                 * If we are moving from a group which only has one panel left we will consider
                 * moving the group itself rather than moving the panel into a newly created group
                 */
                const [targetParentLocation, to] = (0,_array__WEBPACK_IMPORTED_MODULE_2__.tail)(targetLocation);
                if (sourceGroup.api.location.type === 'grid') {
                    const sourceLocation = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(sourceGroup.element);
                    const [sourceParentLocation, from] = (0,_array__WEBPACK_IMPORTED_MODULE_2__.tail)(sourceLocation);
                    if ((0,_array__WEBPACK_IMPORTED_MODULE_2__.sequenceEquals)(sourceParentLocation, targetParentLocation)) {
                        // special case when 'swapping' two views within same grid location
                        // if a group has one tab - we are essentially moving the 'group'
                        // which is equivalent to swapping two views in this case
                        this.gridview.moveView(sourceParentLocation, from, to);
                        this._onDidMovePanel.fire({
                            panel: this.getGroupPanel(sourceItemId),
                            from: sourceGroup,
                        });
                        return;
                    }
                }
                if (sourceGroup.api.location.type === 'popout') {
                    /**
                     * the source group is a popout group with a single panel
                     *
                     * 1. remove the panel from the group without triggering any events
                     * 2. remove the popout group
                     * 3. create a new group at the requested location and add that panel
                     */
                    const popoutGroup = this._popoutGroups.find((group) => group.popoutGroup === sourceGroup);
                    const removedPanel = this.movingLock(() => popoutGroup.popoutGroup.model.removePanel(popoutGroup.popoutGroup.panels[0], {
                        skipSetActive: true,
                        skipSetActiveGroup: true,
                    }));
                    this.doRemoveGroup(sourceGroup, { skipActive: true });
                    const newGroup = this.createGroupAtLocation(targetLocation);
                    this.movingLock(() => newGroup.model.openPanel(removedPanel));
                    this.doSetGroupAndPanelActive(newGroup);
                    this._onDidMovePanel.fire({
                        panel: this.getGroupPanel(sourceItemId),
                        from: sourceGroup,
                    });
                    return;
                }
                // source group will become empty so delete the group
                const targetGroup = this.movingLock(() => this.doRemoveGroup(sourceGroup, {
                    skipActive: true,
                    skipDispose: true,
                }));
                // after deleting the group we need to re-evaulate the ref location
                const updatedReferenceLocation = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(destinationGroup.element);
                const location = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getRelativeLocation)(this.gridview.orientation, updatedReferenceLocation, destinationTarget);
                this.movingLock(() => this.doAddGroup(targetGroup, location));
                this.doSetGroupAndPanelActive(targetGroup);
                this._onDidMovePanel.fire({
                    panel: this.getGroupPanel(sourceItemId),
                    from: sourceGroup,
                });
            }
            else {
                /**
                 * The group we are removing from has many panels, we need to remove the panels we are moving,
                 * create a new group, add the panels to that new group and add the new group in an appropiate position
                 */
                const removedPanel = this.movingLock(() => sourceGroup.model.removePanel(sourceItemId, {
                    skipSetActive: false,
                    skipSetActiveGroup: true,
                }));
                if (!removedPanel) {
                    throw new Error(`No panel with id ${sourceItemId}`);
                }
                const dropLocation = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getRelativeLocation)(this.gridview.orientation, referenceLocation, destinationTarget);
                const group = this.createGroupAtLocation(dropLocation);
                this.movingLock(() => group.model.openPanel(removedPanel, {
                    skipSetGroupActive: true,
                }));
                this.doSetGroupAndPanelActive(group);
                this._onDidMovePanel.fire({
                    panel: removedPanel,
                    from: sourceGroup,
                });
            }
        }
    }
    moveGroup(options) {
        const from = options.from.group;
        const to = options.to.group;
        const target = options.to.position;
        if (target === 'center') {
            const activePanel = from.activePanel;
            const panels = this.movingLock(() => [...from.panels].map((p) => from.model.removePanel(p.id, {
                skipSetActive: true,
            })));
            if ((from === null || from === void 0 ? void 0 : from.model.size) === 0) {
                this.doRemoveGroup(from, { skipActive: true });
            }
            this.movingLock(() => {
                for (const panel of panels) {
                    to.model.openPanel(panel, {
                        skipSetActive: panel !== activePanel,
                        skipSetGroupActive: true,
                    });
                }
            });
            this.doSetGroupAndPanelActive(to);
        }
        else {
            switch (from.api.location.type) {
                case 'grid':
                    this.gridview.removeView((0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(from.element));
                    break;
                case 'floating': {
                    const selectedFloatingGroup = this._floatingGroups.find((x) => x.group === from);
                    if (!selectedFloatingGroup) {
                        throw new Error('failed to find floating group');
                    }
                    selectedFloatingGroup.dispose();
                    break;
                }
                case 'popout': {
                    const selectedPopoutGroup = this._popoutGroups.find((x) => x.popoutGroup === from);
                    if (!selectedPopoutGroup) {
                        throw new Error('failed to find popout group');
                    }
                    selectedPopoutGroup.disposable.dispose();
                }
            }
            const referenceLocation = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(to.element);
            const dropLocation = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getRelativeLocation)(this.gridview.orientation, referenceLocation, target);
            let size;
            switch (this.gridview.orientation) {
                case _splitview_splitview__WEBPACK_IMPORTED_MODULE_12__.Orientation.VERTICAL:
                    size =
                        referenceLocation.length % 2 == 0
                            ? from.api.width
                            : from.api.height;
                    break;
                case _splitview_splitview__WEBPACK_IMPORTED_MODULE_12__.Orientation.HORIZONTAL:
                    size =
                        referenceLocation.length % 2 == 0
                            ? from.api.height
                            : from.api.width;
                    break;
            }
            this.gridview.addView(from, size, dropLocation);
        }
        from.panels.forEach((panel) => {
            this._onDidMovePanel.fire({ panel, from });
        });
    }
    doSetGroupActive(group) {
        super.doSetGroupActive(group);
        const activePanel = this.activePanel;
        if (!this._moving &&
            activePanel !== this._onDidActivePanelChange.value) {
            this._onDidActivePanelChange.fire(activePanel);
        }
    }
    doSetGroupAndPanelActive(group) {
        super.doSetGroupActive(group);
        const activePanel = this.activePanel;
        if (group &&
            this.hasMaximizedGroup() &&
            !this.isMaximizedGroup(group)) {
            this.exitMaximizedGroup();
        }
        if (!this._moving &&
            activePanel !== this._onDidActivePanelChange.value) {
            this._onDidActivePanelChange.fire(activePanel);
        }
    }
    getNextGroupId() {
        let id = this.nextGroupId.next();
        while (this._groups.has(id)) {
            id = this.nextGroupId.next();
        }
        return id;
    }
    createGroup(options) {
        if (!options) {
            options = {};
        }
        let id = options === null || options === void 0 ? void 0 : options.id;
        if (id && this._groups.has(options.id)) {
            console.warn(`dockview: Duplicate group id ${options === null || options === void 0 ? void 0 : options.id}. reassigning group id to avoid errors`);
            id = undefined;
        }
        if (!id) {
            id = this.nextGroupId.next();
            while (this._groups.has(id)) {
                id = this.nextGroupId.next();
            }
        }
        const view = new _dockviewGroupPanel__WEBPACK_IMPORTED_MODULE_14__.DockviewGroupPanel(this, id, options);
        view.init({ params: {}, accessor: this });
        if (!this._groups.has(view.id)) {
            const disposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_4__.CompositeDisposable(view.model.onTabDragStart((event) => {
                this._onWillDragPanel.fire(event);
            }), view.model.onGroupDragStart((event) => {
                this._onWillDragGroup.fire(event);
            }), view.model.onMove((event) => {
                const { groupId, itemId, target, index } = event;
                this.moveGroupOrPanel({
                    from: { groupId: groupId, panelId: itemId },
                    to: {
                        group: view,
                        position: target,
                        index,
                    },
                });
            }), view.model.onDidDrop((event) => {
                this._onDidDrop.fire(event);
            }), view.model.onWillDrop((event) => {
                this._onWillDrop.fire(event);
            }), view.model.onWillShowOverlay((event) => {
                if (this.options.disableDnd) {
                    event.preventDefault();
                    return;
                }
                this._onWillShowOverlay.fire(event);
            }), view.model.onUnhandledDragOverEvent((event) => {
                this._onUnhandledDragOverEvent.fire(event);
            }), view.model.onDidAddPanel((event) => {
                if (this._moving) {
                    return;
                }
                this._onDidAddPanel.fire(event.panel);
            }), view.model.onDidRemovePanel((event) => {
                if (this._moving) {
                    return;
                }
                this._onDidRemovePanel.fire(event.panel);
            }), view.model.onDidActivePanelChange((event) => {
                if (this._moving) {
                    return;
                }
                if (event.panel !== this.activePanel) {
                    return;
                }
                if (this._onDidActivePanelChange.value !== event.panel) {
                    this._onDidActivePanelChange.fire(event.panel);
                }
            }), _events__WEBPACK_IMPORTED_MODULE_5__.Event.any(view.model.onDidPanelTitleChange, view.model.onDidPanelParametersChange)(() => {
                this._bufferOnDidLayoutChange.fire();
            }));
            this._groups.set(view.id, { value: view, disposable });
        }
        // TODO: must be called after the above listeners have been setup, not an ideal pattern
        view.initialize();
        return view;
    }
    createPanel(options, group) {
        var _a, _b, _c;
        const contentComponent = options.component;
        const tabComponent = (_a = options.tabComponent) !== null && _a !== void 0 ? _a : this.options.defaultTabComponent;
        const view = new _dockviewPanelModel__WEBPACK_IMPORTED_MODULE_15__.DockviewPanelModel(this, options.id, contentComponent, tabComponent);
        const panel = new _dockviewPanel__WEBPACK_IMPORTED_MODULE_3__.DockviewPanel(options.id, contentComponent, tabComponent, this, this._api, group, view, {
            renderer: options.renderer,
            minimumWidth: options.minimumWidth,
            minimumHeight: options.minimumHeight,
            maximumWidth: options.maximumWidth,
            maximumHeight: options.maximumHeight,
        });
        panel.init({
            title: (_b = options.title) !== null && _b !== void 0 ? _b : options.id,
            params: (_c = options === null || options === void 0 ? void 0 : options.params) !== null && _c !== void 0 ? _c : {},
        });
        return panel;
    }
    createGroupAtLocation(location, size) {
        const group = this.createGroup();
        this.doAddGroup(group, location, size);
        return group;
    }
    findGroup(panel) {
        var _a;
        return (_a = Array.from(this._groups.values()).find((group) => group.value.model.containsPanel(panel))) === null || _a === void 0 ? void 0 : _a.value;
    }
    orientationAtLocation(location) {
        const rootOrientation = this.gridview.orientation;
        return location.length % 2 == 1
            ? rootOrientation
            : (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.orthogonal)(rootOrientation);
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/dockviewFloatingGroupPanel.js":
/*!************************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/dockviewFloatingGroupPanel.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DockviewFloatingGroupPanel: () => (/* binding */ DockviewFloatingGroupPanel)
/* harmony export */ });
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");

class DockviewFloatingGroupPanel extends _lifecycle__WEBPACK_IMPORTED_MODULE_0__.CompositeDisposable {
    constructor(group, overlay) {
        super();
        this.group = group;
        this.overlay = overlay;
        this.addDisposables(overlay);
    }
    position(bounds) {
        this.overlay.setBounds(bounds);
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/dockviewGroupPanel.js":
/*!****************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/dockviewGroupPanel.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DockviewGroupPanel: () => (/* binding */ DockviewGroupPanel)
/* harmony export */ });
/* harmony import */ var _dockviewGroupPanelModel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dockviewGroupPanelModel */ "./node_modules/dockview-core/dist/esm/dockview/dockviewGroupPanelModel.js");
/* harmony import */ var _gridview_gridviewPanel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../gridview/gridviewPanel */ "./node_modules/dockview-core/dist/esm/gridview/gridviewPanel.js");
/* harmony import */ var _api_dockviewGroupPanelApi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../api/dockviewGroupPanelApi */ "./node_modules/dockview-core/dist/esm/api/dockviewGroupPanelApi.js");



const MINIMUM_DOCKVIEW_GROUP_PANEL_WIDTH = 100;
const MINIMUM_DOCKVIEW_GROUP_PANEL_HEIGHT = 100;
class DockviewGroupPanel extends _gridview_gridviewPanel__WEBPACK_IMPORTED_MODULE_1__.GridviewPanel {
    get minimumWidth() {
        var _a;
        const activePanelMinimumWidth = (_a = this.activePanel) === null || _a === void 0 ? void 0 : _a.minimumWidth;
        if (typeof activePanelMinimumWidth === 'number') {
            return activePanelMinimumWidth;
        }
        return super.__minimumWidth();
    }
    get minimumHeight() {
        var _a;
        const activePanelMinimumHeight = (_a = this.activePanel) === null || _a === void 0 ? void 0 : _a.minimumHeight;
        if (typeof activePanelMinimumHeight === 'number') {
            return activePanelMinimumHeight;
        }
        return super.__minimumHeight();
    }
    get maximumWidth() {
        var _a;
        const activePanelMaximumWidth = (_a = this.activePanel) === null || _a === void 0 ? void 0 : _a.maximumWidth;
        if (typeof activePanelMaximumWidth === 'number') {
            return activePanelMaximumWidth;
        }
        return super.__maximumWidth();
    }
    get maximumHeight() {
        var _a;
        const activePanelMaximumHeight = (_a = this.activePanel) === null || _a === void 0 ? void 0 : _a.maximumHeight;
        if (typeof activePanelMaximumHeight === 'number') {
            return activePanelMaximumHeight;
        }
        return super.__maximumHeight();
    }
    get panels() {
        return this._model.panels;
    }
    get activePanel() {
        return this._model.activePanel;
    }
    get size() {
        return this._model.size;
    }
    get model() {
        return this._model;
    }
    get locked() {
        return this._model.locked;
    }
    set locked(value) {
        this._model.locked = value;
    }
    get header() {
        return this._model.header;
    }
    constructor(accessor, id, options) {
        var _a, _b, _c, _d, _e, _f;
        super(id, 'groupview_default', {
            minimumHeight: (_b = (_a = options.constraints) === null || _a === void 0 ? void 0 : _a.minimumHeight) !== null && _b !== void 0 ? _b : MINIMUM_DOCKVIEW_GROUP_PANEL_HEIGHT,
            minimumWidth: (_d = (_c = options.constraints) === null || _c === void 0 ? void 0 : _c.maximumHeight) !== null && _d !== void 0 ? _d : MINIMUM_DOCKVIEW_GROUP_PANEL_WIDTH,
            maximumHeight: (_e = options.constraints) === null || _e === void 0 ? void 0 : _e.maximumHeight,
            maximumWidth: (_f = options.constraints) === null || _f === void 0 ? void 0 : _f.maximumWidth,
        }, new _api_dockviewGroupPanelApi__WEBPACK_IMPORTED_MODULE_2__.DockviewGroupPanelApiImpl(id, accessor));
        this.api.initialize(this); // cannot use 'this' after after 'super' call
        this._model = new _dockviewGroupPanelModel__WEBPACK_IMPORTED_MODULE_0__.DockviewGroupPanelModel(this.element, accessor, id, options, this);
        this.addDisposables(this.model.onDidActivePanelChange((event) => {
            this.api._onDidActivePanelChange.fire(event);
        }));
    }
    focus() {
        if (!this.api.isActive) {
            this.api.setActive();
        }
        super.focus();
    }
    initialize() {
        this._model.initialize();
    }
    setActive(isActive) {
        super.setActive(isActive);
        this.model.setActive(isActive);
    }
    layout(width, height) {
        super.layout(width, height);
        this.model.layout(width, height);
    }
    getComponent() {
        return this._model;
    }
    toJSON() {
        return this.model.toJSON();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/dockviewGroupPanelModel.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/dockviewGroupPanelModel.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DockviewDidDropEvent: () => (/* binding */ DockviewDidDropEvent),
/* harmony export */   DockviewGroupPanelModel: () => (/* binding */ DockviewGroupPanelModel),
/* harmony export */   DockviewWillDropEvent: () => (/* binding */ DockviewWillDropEvent),
/* harmony export */   WillShowOverlayLocationEvent: () => (/* binding */ WillShowOverlayLocationEvent)
/* harmony export */ });
/* harmony import */ var _api_component_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api/component.api */ "./node_modules/dockview-core/dist/esm/api/component.api.js");
/* harmony import */ var _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dnd/dataTransfer */ "./node_modules/dockview-core/dist/esm/dnd/dataTransfer.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _components_panel_content__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components/panel/content */ "./node_modules/dockview-core/dist/esm/dockview/components/panel/content.js");
/* harmony import */ var _components_titlebar_tabsContainer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./components/titlebar/tabsContainer */ "./node_modules/dockview-core/dist/esm/dockview/components/titlebar/tabsContainer.js");
/* harmony import */ var _options__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./options */ "./node_modules/dockview-core/dist/esm/dockview/options.js");








class DockviewDidDropEvent extends _events__WEBPACK_IMPORTED_MODULE_3__.DockviewEvent {
    get nativeEvent() {
        return this.options.nativeEvent;
    }
    get position() {
        return this.options.position;
    }
    get panel() {
        return this.options.panel;
    }
    get group() {
        return this.options.group;
    }
    get api() {
        return this.options.api;
    }
    constructor(options) {
        super();
        this.options = options;
    }
    getData() {
        return this.options.getData();
    }
}
class DockviewWillDropEvent extends DockviewDidDropEvent {
    get kind() {
        return this._kind;
    }
    constructor(options) {
        super(options);
        this._kind = options.kind;
    }
}
class WillShowOverlayLocationEvent {
    get kind() {
        return this.options.kind;
    }
    get nativeEvent() {
        return this.event.nativeEvent;
    }
    get position() {
        return this.event.position;
    }
    get defaultPrevented() {
        return this.event.defaultPrevented;
    }
    get panel() {
        return this.options.panel;
    }
    get api() {
        return this.options.api;
    }
    get group() {
        return this.options.group;
    }
    preventDefault() {
        this.event.preventDefault();
    }
    getData() {
        return this.options.getData();
    }
    constructor(event, options) {
        this.event = event;
        this.options = options;
    }
}
class DockviewGroupPanelModel extends _lifecycle__WEBPACK_IMPORTED_MODULE_4__.CompositeDisposable {
    get element() {
        throw new Error('dockview: not supported');
    }
    get activePanel() {
        return this._activePanel;
    }
    get locked() {
        return this._locked;
    }
    set locked(value) {
        this._locked = value;
        (0,_dom__WEBPACK_IMPORTED_MODULE_2__.toggleClass)(this.container, 'dv-locked-groupview', value === 'no-drop-target' || value);
    }
    get isActive() {
        return this._isGroupActive;
    }
    get panels() {
        return this._panels;
    }
    get size() {
        return this._panels.length;
    }
    get isEmpty() {
        return this._panels.length === 0;
    }
    get hasWatermark() {
        return !!(this.watermark && this.container.contains(this.watermark.element));
    }
    get header() {
        return this.tabsContainer;
    }
    get isContentFocused() {
        if (!document.activeElement) {
            return false;
        }
        return (0,_dom__WEBPACK_IMPORTED_MODULE_2__.isAncestor)(document.activeElement, this.contentContainer.element);
    }
    get location() {
        return this._location;
    }
    set location(value) {
        this._location = value;
        (0,_dom__WEBPACK_IMPORTED_MODULE_2__.toggleClass)(this.container, 'dv-groupview-floating', false);
        (0,_dom__WEBPACK_IMPORTED_MODULE_2__.toggleClass)(this.container, 'dv-groupview-popout', false);
        switch (value.type) {
            case 'grid':
                this.contentContainer.dropTarget.setTargetZones([
                    'top',
                    'bottom',
                    'left',
                    'right',
                    'center',
                ]);
                break;
            case 'floating':
                this.contentContainer.dropTarget.setTargetZones(['center']);
                this.contentContainer.dropTarget.setTargetZones(value
                    ? ['center']
                    : ['top', 'bottom', 'left', 'right', 'center']);
                (0,_dom__WEBPACK_IMPORTED_MODULE_2__.toggleClass)(this.container, 'dv-groupview-floating', true);
                break;
            case 'popout':
                this.contentContainer.dropTarget.setTargetZones(['center']);
                (0,_dom__WEBPACK_IMPORTED_MODULE_2__.toggleClass)(this.container, 'dv-groupview-popout', true);
                break;
        }
        this.groupPanel.api._onDidLocationChange.fire({
            location: this.location,
        });
    }
    constructor(container, accessor, id, options, groupPanel) {
        var _a;
        super();
        this.container = container;
        this.accessor = accessor;
        this.id = id;
        this.options = options;
        this.groupPanel = groupPanel;
        this._isGroupActive = false;
        this._locked = false;
        this._location = { type: 'grid' };
        this.mostRecentlyUsed = [];
        this._overwriteRenderContainer = null;
        this._onDidChange = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onDidChange = this._onDidChange.event;
        this._width = 0;
        this._height = 0;
        this._panels = [];
        this._panelDisposables = new Map();
        this._onMove = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onMove = this._onMove.event;
        this._onDidDrop = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onDidDrop = this._onDidDrop.event;
        this._onWillDrop = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onWillDrop = this._onWillDrop.event;
        this._onWillShowOverlay = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onWillShowOverlay = this._onWillShowOverlay.event;
        this._onTabDragStart = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onTabDragStart = this._onTabDragStart.event;
        this._onGroupDragStart = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onGroupDragStart = this._onGroupDragStart.event;
        this._onDidAddPanel = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onDidAddPanel = this._onDidAddPanel.event;
        this._onDidPanelTitleChange = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onDidPanelTitleChange = this._onDidPanelTitleChange.event;
        this._onDidPanelParametersChange = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onDidPanelParametersChange = this._onDidPanelParametersChange.event;
        this._onDidRemovePanel = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onDidRemovePanel = this._onDidRemovePanel.event;
        this._onDidActivePanelChange = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onDidActivePanelChange = this._onDidActivePanelChange.event;
        this._onUnhandledDragOverEvent = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onUnhandledDragOverEvent = this._onUnhandledDragOverEvent.event;
        (0,_dom__WEBPACK_IMPORTED_MODULE_2__.toggleClass)(this.container, 'dv-groupview', true);
        this._api = new _api_component_api__WEBPACK_IMPORTED_MODULE_0__.DockviewApi(this.accessor);
        this.tabsContainer = new _components_titlebar_tabsContainer__WEBPACK_IMPORTED_MODULE_6__.TabsContainer(this.accessor, this.groupPanel);
        this.contentContainer = new _components_panel_content__WEBPACK_IMPORTED_MODULE_5__.ContentContainer(this.accessor, this);
        container.append(this.tabsContainer.element, this.contentContainer.element);
        this.header.hidden = !!options.hideHeader;
        this.locked = (_a = options.locked) !== null && _a !== void 0 ? _a : false;
        this.addDisposables(this._onTabDragStart, this._onGroupDragStart, this._onWillShowOverlay, this.tabsContainer.onTabDragStart((event) => {
            this._onTabDragStart.fire(event);
        }), this.tabsContainer.onGroupDragStart((event) => {
            this._onGroupDragStart.fire(event);
        }), this.tabsContainer.onDrop((event) => {
            this.handleDropEvent('header', event.event, 'center', event.index);
        }), this.contentContainer.onDidFocus(() => {
            this.accessor.doSetGroupActive(this.groupPanel);
        }), this.contentContainer.onDidBlur(() => {
            // noop
        }), this.contentContainer.dropTarget.onDrop((event) => {
            this.handleDropEvent('content', event.nativeEvent, event.position);
        }), this.tabsContainer.onWillShowOverlay((event) => {
            this._onWillShowOverlay.fire(event);
        }), this.contentContainer.dropTarget.onWillShowOverlay((event) => {
            this._onWillShowOverlay.fire(new WillShowOverlayLocationEvent(event, {
                kind: 'content',
                panel: this.activePanel,
                api: this._api,
                group: this.groupPanel,
                getData: _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_1__.getPanelData,
            }));
        }), this._onMove, this._onDidChange, this._onDidDrop, this._onWillDrop, this._onDidAddPanel, this._onDidRemovePanel, this._onDidActivePanelChange, this._onUnhandledDragOverEvent, this._onDidPanelTitleChange, this._onDidPanelParametersChange);
    }
    focusContent() {
        this.contentContainer.element.focus();
    }
    set renderContainer(value) {
        this.panels.forEach((panel) => {
            this.renderContainer.detatch(panel);
        });
        this._overwriteRenderContainer = value;
        this.panels.forEach((panel) => {
            this.rerender(panel);
        });
    }
    get renderContainer() {
        var _a;
        return ((_a = this._overwriteRenderContainer) !== null && _a !== void 0 ? _a : this.accessor.overlayRenderContainer);
    }
    initialize() {
        if (this.options.panels) {
            this.options.panels.forEach((panel) => {
                this.doAddPanel(panel);
            });
        }
        if (this.options.activePanel) {
            this.openPanel(this.options.activePanel);
        }
        // must be run after the constructor otherwise this.parent may not be
        // correctly initialized
        this.setActive(this.isActive, true);
        this.updateContainer();
        if (this.accessor.options.createRightHeaderActionComponent) {
            this._rightHeaderActions =
                this.accessor.options.createRightHeaderActionComponent(this.groupPanel);
            this.addDisposables(this._rightHeaderActions);
            this._rightHeaderActions.init({
                containerApi: this._api,
                api: this.groupPanel.api,
                group: this.groupPanel,
            });
            this.tabsContainer.setRightActionsElement(this._rightHeaderActions.element);
        }
        if (this.accessor.options.createLeftHeaderActionComponent) {
            this._leftHeaderActions =
                this.accessor.options.createLeftHeaderActionComponent(this.groupPanel);
            this.addDisposables(this._leftHeaderActions);
            this._leftHeaderActions.init({
                containerApi: this._api,
                api: this.groupPanel.api,
                group: this.groupPanel,
            });
            this.tabsContainer.setLeftActionsElement(this._leftHeaderActions.element);
        }
        if (this.accessor.options.createPrefixHeaderActionComponent) {
            this._prefixHeaderActions =
                this.accessor.options.createPrefixHeaderActionComponent(this.groupPanel);
            this.addDisposables(this._prefixHeaderActions);
            this._prefixHeaderActions.init({
                containerApi: this._api,
                api: this.groupPanel.api,
                group: this.groupPanel,
            });
            this.tabsContainer.setPrefixActionsElement(this._prefixHeaderActions.element);
        }
    }
    rerender(panel) {
        this.contentContainer.renderPanel(panel, { asActive: false });
    }
    indexOf(panel) {
        return this.tabsContainer.indexOf(panel.id);
    }
    toJSON() {
        var _a;
        const result = {
            views: this.tabsContainer.panels,
            activeView: (_a = this._activePanel) === null || _a === void 0 ? void 0 : _a.id,
            id: this.id,
        };
        if (this.locked !== false) {
            result.locked = this.locked;
        }
        if (this.header.hidden) {
            result.hideHeader = true;
        }
        return result;
    }
    moveToNext(options) {
        if (!options) {
            options = {};
        }
        if (!options.panel) {
            options.panel = this.activePanel;
        }
        const index = options.panel ? this.panels.indexOf(options.panel) : -1;
        let normalizedIndex;
        if (index < this.panels.length - 1) {
            normalizedIndex = index + 1;
        }
        else if (!options.suppressRoll) {
            normalizedIndex = 0;
        }
        else {
            return;
        }
        this.openPanel(this.panels[normalizedIndex]);
    }
    moveToPrevious(options) {
        if (!options) {
            options = {};
        }
        if (!options.panel) {
            options.panel = this.activePanel;
        }
        if (!options.panel) {
            return;
        }
        const index = this.panels.indexOf(options.panel);
        let normalizedIndex;
        if (index > 0) {
            normalizedIndex = index - 1;
        }
        else if (!options.suppressRoll) {
            normalizedIndex = this.panels.length - 1;
        }
        else {
            return;
        }
        this.openPanel(this.panels[normalizedIndex]);
    }
    containsPanel(panel) {
        return this.panels.includes(panel);
    }
    init(_params) {
        //noop
    }
    update(_params) {
        //noop
    }
    focus() {
        var _a;
        (_a = this._activePanel) === null || _a === void 0 ? void 0 : _a.focus();
    }
    openPanel(panel, options = {}) {
        /**
         * set the panel group
         * add the panel
         * check if group active
         * check if panel active
         */
        if (typeof options.index !== 'number' ||
            options.index > this.panels.length) {
            options.index = this.panels.length;
        }
        const skipSetActive = !!options.skipSetActive;
        // ensure the group is updated before we fire any events
        panel.updateParentGroup(this.groupPanel, {
            skipSetActive: options.skipSetActive,
        });
        this.doAddPanel(panel, options.index, {
            skipSetActive: skipSetActive,
        });
        if (this._activePanel === panel) {
            this.contentContainer.renderPanel(panel, { asActive: true });
            return;
        }
        if (!skipSetActive) {
            this.doSetActivePanel(panel);
        }
        if (!options.skipSetGroupActive) {
            this.accessor.doSetGroupActive(this.groupPanel);
        }
        if (!options.skipSetActive) {
            this.updateContainer();
        }
    }
    removePanel(groupItemOrId, options = {
        skipSetActive: false,
    }) {
        const id = typeof groupItemOrId === 'string'
            ? groupItemOrId
            : groupItemOrId.id;
        const panelToRemove = this._panels.find((panel) => panel.id === id);
        if (!panelToRemove) {
            throw new Error('invalid operation');
        }
        return this._removePanel(panelToRemove, options);
    }
    closeAllPanels() {
        if (this.panels.length > 0) {
            // take a copy since we will be edting the array as we iterate through
            const arrPanelCpy = [...this.panels];
            for (const panel of arrPanelCpy) {
                this.doClose(panel);
            }
        }
        else {
            this.accessor.removeGroup(this.groupPanel);
        }
    }
    closePanel(panel) {
        this.doClose(panel);
    }
    doClose(panel) {
        const isLast = this.panels.length === 1 && this.accessor.groups.length === 1;
        this.accessor.removePanel(panel, isLast && this.accessor.options.noPanelsOverlay === 'emptyGroup'
            ? { removeEmptyGroup: false }
            : undefined);
    }
    isPanelActive(panel) {
        return this._activePanel === panel;
    }
    updateActions(element) {
        this.tabsContainer.setRightActionsElement(element);
    }
    setActive(isGroupActive, force = false) {
        if (!force && this.isActive === isGroupActive) {
            return;
        }
        this._isGroupActive = isGroupActive;
        (0,_dom__WEBPACK_IMPORTED_MODULE_2__.toggleClass)(this.container, 'dv-active-group', isGroupActive);
        (0,_dom__WEBPACK_IMPORTED_MODULE_2__.toggleClass)(this.container, 'dv-inactive-group', !isGroupActive);
        this.tabsContainer.setActive(this.isActive);
        if (!this._activePanel && this.panels.length > 0) {
            this.doSetActivePanel(this.panels[0]);
        }
        this.updateContainer();
    }
    layout(width, height) {
        var _a;
        this._width = width;
        this._height = height;
        this.contentContainer.layout(this._width, this._height);
        if ((_a = this._activePanel) === null || _a === void 0 ? void 0 : _a.layout) {
            this._activePanel.layout(this._width, this._height);
        }
    }
    _removePanel(panel, options) {
        const isActivePanel = this._activePanel === panel;
        this.doRemovePanel(panel);
        if (isActivePanel && this.panels.length > 0) {
            const nextPanel = this.mostRecentlyUsed[0];
            this.openPanel(nextPanel, {
                skipSetActive: options.skipSetActive,
                skipSetGroupActive: options.skipSetActiveGroup,
            });
        }
        if (this._activePanel && this.panels.length === 0) {
            this.doSetActivePanel(undefined);
        }
        if (!options.skipSetActive) {
            this.updateContainer();
        }
        return panel;
    }
    doRemovePanel(panel) {
        const index = this.panels.indexOf(panel);
        if (this._activePanel === panel) {
            this.contentContainer.closePanel();
        }
        this.tabsContainer.delete(panel.id);
        this._panels.splice(index, 1);
        if (this.mostRecentlyUsed.includes(panel)) {
            const index = this.mostRecentlyUsed.indexOf(panel);
            this.mostRecentlyUsed.splice(index, 1);
        }
        const disposable = this._panelDisposables.get(panel.id);
        if (disposable) {
            disposable.dispose();
            this._panelDisposables.delete(panel.id);
        }
        this._onDidRemovePanel.fire({ panel });
    }
    doAddPanel(panel, index = this.panels.length, options = { skipSetActive: false }) {
        const existingPanel = this._panels.indexOf(panel);
        const hasExistingPanel = existingPanel > -1;
        this.tabsContainer.show();
        this.contentContainer.show();
        this.tabsContainer.openPanel(panel, index);
        if (!options.skipSetActive) {
            this.contentContainer.openPanel(panel);
        }
        if (hasExistingPanel) {
            // TODO - need to ensure ordering hasn't changed and if it has need to re-order this.panels
            return;
        }
        this.updateMru(panel);
        this.panels.splice(index, 0, panel);
        this._panelDisposables.set(panel.id, new _lifecycle__WEBPACK_IMPORTED_MODULE_4__.CompositeDisposable(panel.api.onDidTitleChange((event) => this._onDidPanelTitleChange.fire(event)), panel.api.onDidParametersChange((event) => this._onDidPanelParametersChange.fire(event))));
        this._onDidAddPanel.fire({ panel });
    }
    doSetActivePanel(panel) {
        if (this._activePanel === panel) {
            return;
        }
        this._activePanel = panel;
        if (panel) {
            this.tabsContainer.setActivePanel(panel);
            panel.layout(this._width, this._height);
            this.updateMru(panel);
            this._onDidActivePanelChange.fire({
                panel,
            });
        }
    }
    updateMru(panel) {
        if (this.mostRecentlyUsed.includes(panel)) {
            this.mostRecentlyUsed.splice(this.mostRecentlyUsed.indexOf(panel), 1);
        }
        this.mostRecentlyUsed = [panel, ...this.mostRecentlyUsed];
    }
    updateContainer() {
        var _a, _b;
        this.panels.forEach((panel) => panel.runEvents());
        if (this.isEmpty && !this.watermark) {
            const watermark = this.accessor.createWatermarkComponent();
            watermark.init({
                containerApi: this._api,
                group: this.groupPanel,
            });
            this.watermark = watermark;
            (0,_events__WEBPACK_IMPORTED_MODULE_3__.addDisposableListener)(this.watermark.element, 'pointerdown', () => {
                if (!this.isActive) {
                    this.accessor.doSetGroupActive(this.groupPanel);
                }
            });
            this.contentContainer.element.appendChild(this.watermark.element);
        }
        if (!this.isEmpty && this.watermark) {
            this.watermark.element.remove();
            (_b = (_a = this.watermark).dispose) === null || _b === void 0 ? void 0 : _b.call(_a);
            this.watermark = undefined;
        }
    }
    canDisplayOverlay(event, position, target) {
        const firedEvent = new _options__WEBPACK_IMPORTED_MODULE_7__.DockviewUnhandledDragOverEvent(event, target, position, _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_1__.getPanelData, this.accessor.getPanel(this.id));
        this._onUnhandledDragOverEvent.fire(firedEvent);
        return firedEvent.isAccepted;
    }
    handleDropEvent(type, event, position, index) {
        if (this.locked === 'no-drop-target') {
            return;
        }
        function getKind() {
            switch (type) {
                case 'header':
                    return typeof index === 'number' ? 'tab' : 'header_space';
                case 'content':
                    return 'content';
            }
        }
        const panel = typeof index === 'number' ? this.panels[index] : undefined;
        const willDropEvent = new DockviewWillDropEvent({
            nativeEvent: event,
            position,
            panel,
            getData: () => (0,_dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_1__.getPanelData)(),
            kind: getKind(),
            group: this.groupPanel,
            api: this._api,
        });
        this._onWillDrop.fire(willDropEvent);
        if (willDropEvent.defaultPrevented) {
            return;
        }
        const data = (0,_dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_1__.getPanelData)();
        if (data && data.viewId === this.accessor.id) {
            if (data.panelId === null) {
                // this is a group move dnd event
                const { groupId } = data;
                this._onMove.fire({
                    target: position,
                    groupId: groupId,
                    index,
                });
                return;
            }
            const fromSameGroup = this.tabsContainer.indexOf(data.panelId) !== -1;
            if (fromSameGroup && this.tabsContainer.size === 1) {
                return;
            }
            const { groupId, panelId } = data;
            const isSameGroup = this.id === groupId;
            if (isSameGroup && !position) {
                const oldIndex = this.tabsContainer.indexOf(panelId);
                if (oldIndex === index) {
                    return;
                }
            }
            this._onMove.fire({
                target: position,
                groupId: data.groupId,
                itemId: data.panelId,
                index,
            });
        }
        else {
            this._onDidDrop.fire(new DockviewDidDropEvent({
                nativeEvent: event,
                position,
                panel,
                getData: () => (0,_dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_1__.getPanelData)(),
                group: this.groupPanel,
                api: this._api,
            }));
        }
    }
    dispose() {
        var _a, _b, _c;
        super.dispose();
        (_a = this.watermark) === null || _a === void 0 ? void 0 : _a.element.remove();
        (_c = (_b = this.watermark) === null || _b === void 0 ? void 0 : _b.dispose) === null || _c === void 0 ? void 0 : _c.call(_b);
        this.watermark = undefined;
        for (const panel of this.panels) {
            panel.dispose();
        }
        this.tabsContainer.dispose();
        this.contentContainer.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/dockviewPanel.js":
/*!***********************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/dockviewPanel.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DockviewPanel: () => (/* binding */ DockviewPanel)
/* harmony export */ });
/* harmony import */ var _api_dockviewPanelApi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api/dockviewPanelApi */ "./node_modules/dockview-core/dist/esm/api/dockviewPanelApi.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _api_panelApi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../api/panelApi */ "./node_modules/dockview-core/dist/esm/api/panelApi.js");



class DockviewPanel extends _lifecycle__WEBPACK_IMPORTED_MODULE_1__.CompositeDisposable {
    get params() {
        return this._params;
    }
    get title() {
        return this._title;
    }
    get group() {
        return this._group;
    }
    get renderer() {
        var _a;
        return (_a = this._renderer) !== null && _a !== void 0 ? _a : this.accessor.renderer;
    }
    get minimumWidth() {
        return this._minimumWidth;
    }
    get minimumHeight() {
        return this._minimumHeight;
    }
    get maximumWidth() {
        return this._maximumWidth;
    }
    get maximumHeight() {
        return this._maximumHeight;
    }
    constructor(id, component, tabComponent, accessor, containerApi, group, view, options) {
        super();
        this.id = id;
        this.accessor = accessor;
        this.containerApi = containerApi;
        this.view = view;
        this._renderer = options.renderer;
        this._group = group;
        this._minimumWidth = options.minimumWidth;
        this._minimumHeight = options.minimumHeight;
        this._maximumWidth = options.maximumWidth;
        this._maximumHeight = options.maximumHeight;
        this.api = new _api_dockviewPanelApi__WEBPACK_IMPORTED_MODULE_0__.DockviewPanelApiImpl(this, this._group, accessor, component, tabComponent);
        this.addDisposables(this.api.onActiveChange(() => {
            accessor.setActivePanel(this);
        }), this.api.onDidSizeChange((event) => {
            // forward the resize event to the group since if you want to resize a panel
            // you are actually just resizing the panels parent which is the group
            this.group.api.setSize(event);
        }), this.api.onDidRendererChange(() => {
            this.group.model.rerender(this);
        }));
    }
    init(params) {
        this._params = params.params;
        this.view.init(Object.assign(Object.assign({}, params), { api: this.api, containerApi: this.containerApi }));
        this.setTitle(params.title);
    }
    focus() {
        const event = new _api_panelApi__WEBPACK_IMPORTED_MODULE_2__.WillFocusEvent();
        this.api._onWillFocus.fire(event);
        if (event.defaultPrevented) {
            return;
        }
        if (!this.api.isActive) {
            this.api.setActive();
        }
    }
    toJSON() {
        return {
            id: this.id,
            contentComponent: this.view.contentComponent,
            tabComponent: this.view.tabComponent,
            params: Object.keys(this._params || {}).length > 0
                ? this._params
                : undefined,
            title: this.title,
            renderer: this._renderer,
            minimumHeight: this._minimumHeight,
            maximumHeight: this._maximumHeight,
            minimumWidth: this._minimumWidth,
            maximumWidth: this._maximumWidth,
        };
    }
    setTitle(title) {
        const didTitleChange = title !== this.title;
        if (didTitleChange) {
            this._title = title;
            this.api._onDidTitleChange.fire({ title });
        }
    }
    setRenderer(renderer) {
        const didChange = renderer !== this.renderer;
        if (didChange) {
            this._renderer = renderer;
            this.api._onDidRendererChange.fire({
                renderer: renderer,
            });
        }
    }
    update(event) {
        var _a;
        // merge the new parameters with the existing parameters
        this._params = Object.assign(Object.assign({}, ((_a = this._params) !== null && _a !== void 0 ? _a : {})), event.params);
        /**
         * delete new keys that have a value of undefined,
         * allow values of null
         */
        for (const key of Object.keys(event.params)) {
            if (event.params[key] === undefined) {
                delete this._params[key];
            }
        }
        // update the view with the updated props
        this.view.update({
            params: this._params,
        });
    }
    updateParentGroup(group, options) {
        this._group = group;
        this.api.group = this._group;
        const isPanelVisible = this._group.model.isPanelActive(this);
        const isActive = this.group.api.isActive && isPanelVisible;
        if (!(options === null || options === void 0 ? void 0 : options.skipSetActive)) {
            if (this.api.isActive !== isActive) {
                this.api._onDidActiveChange.fire({
                    isActive: this.group.api.isActive && isPanelVisible,
                });
            }
        }
        if (this.api.isVisible !== isPanelVisible) {
            this.api._onDidVisibilityChange.fire({
                isVisible: isPanelVisible,
            });
        }
    }
    runEvents() {
        const isPanelVisible = this._group.model.isPanelActive(this);
        const isActive = this.group.api.isActive && isPanelVisible;
        if (this.api.isActive !== isActive) {
            this.api._onDidActiveChange.fire({
                isActive: this.group.api.isActive && isPanelVisible,
            });
        }
        if (this.api.isVisible !== isPanelVisible) {
            this.api._onDidVisibilityChange.fire({
                isVisible: isPanelVisible,
            });
        }
    }
    layout(width, height) {
        // TODO: Can we somehow do height without header height or indicate what the header height is?
        this.api._onDidDimensionChange.fire({
            width,
            height: height,
        });
        this.view.layout(width, height);
    }
    dispose() {
        this.api.dispose();
        this.view.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/dockviewPanelModel.js":
/*!****************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/dockviewPanelModel.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DockviewPanelModel: () => (/* binding */ DockviewPanelModel)
/* harmony export */ });
/* harmony import */ var _components_tab_defaultTab__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components/tab/defaultTab */ "./node_modules/dockview-core/dist/esm/dockview/components/tab/defaultTab.js");

class DockviewPanelModel {
    get content() {
        return this._content;
    }
    get tab() {
        return this._tab;
    }
    constructor(accessor, id, contentComponent, tabComponent) {
        this.accessor = accessor;
        this.id = id;
        this.contentComponent = contentComponent;
        this.tabComponent = tabComponent;
        this._content = this.createContentComponent(this.id, contentComponent);
        this._tab = this.createTabComponent(this.id, tabComponent);
    }
    init(params) {
        this.content.init(params);
        this.tab.init(params);
    }
    updateParentGroup(_group, _isPanelVisible) {
        // noop
    }
    layout(width, height) {
        var _a, _b;
        (_b = (_a = this.content).layout) === null || _b === void 0 ? void 0 : _b.call(_a, width, height);
    }
    update(event) {
        var _a, _b, _c, _d;
        (_b = (_a = this.content).update) === null || _b === void 0 ? void 0 : _b.call(_a, event);
        (_d = (_c = this.tab).update) === null || _d === void 0 ? void 0 : _d.call(_c, event);
    }
    dispose() {
        var _a, _b, _c, _d;
        (_b = (_a = this.content).dispose) === null || _b === void 0 ? void 0 : _b.call(_a);
        (_d = (_c = this.tab).dispose) === null || _d === void 0 ? void 0 : _d.call(_c);
    }
    createContentComponent(id, componentName) {
        return this.accessor.options.createComponent({
            id,
            name: componentName,
        });
    }
    createTabComponent(id, componentName) {
        const name = componentName !== null && componentName !== void 0 ? componentName : this.accessor.options.defaultTabComponent;
        if (name) {
            if (this.accessor.options.createTabComponent) {
                const component = this.accessor.options.createTabComponent({
                    id,
                    name,
                });
                if (component) {
                    return component;
                }
                else {
                    return new _components_tab_defaultTab__WEBPACK_IMPORTED_MODULE_0__.DefaultTab();
                }
            }
            console.warn(`dockview: tabComponent '${componentName}' was not found. falling back to the default tab.`);
        }
        return new _components_tab_defaultTab__WEBPACK_IMPORTED_MODULE_0__.DefaultTab();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/options.js":
/*!*****************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/options.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DockviewUnhandledDragOverEvent: () => (/* binding */ DockviewUnhandledDragOverEvent),
/* harmony export */   PROPERTY_KEYS_DOCKVIEW: () => (/* binding */ PROPERTY_KEYS_DOCKVIEW),
/* harmony export */   isGroupOptionsWithGroup: () => (/* binding */ isGroupOptionsWithGroup),
/* harmony export */   isGroupOptionsWithPanel: () => (/* binding */ isGroupOptionsWithPanel),
/* harmony export */   isPanelOptionsWithGroup: () => (/* binding */ isPanelOptionsWithGroup),
/* harmony export */   isPanelOptionsWithPanel: () => (/* binding */ isPanelOptionsWithPanel)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");

class DockviewUnhandledDragOverEvent extends _events__WEBPACK_IMPORTED_MODULE_0__.AcceptableEvent {
    constructor(nativeEvent, target, position, getData, group) {
        super();
        this.nativeEvent = nativeEvent;
        this.target = target;
        this.position = position;
        this.getData = getData;
        this.group = group;
    }
}
const PROPERTY_KEYS_DOCKVIEW = (() => {
    /**
     * by readong the keys from an empty value object TypeScript will error
     * when we add or remove new properties to `DockviewOptions`
     */
    const properties = {
        disableAutoResizing: undefined,
        hideBorders: undefined,
        singleTabMode: undefined,
        disableFloatingGroups: undefined,
        floatingGroupBounds: undefined,
        popoutUrl: undefined,
        defaultRenderer: undefined,
        debug: undefined,
        rootOverlayModel: undefined,
        locked: undefined,
        disableDnd: undefined,
        gap: undefined,
        className: undefined,
        noPanelsOverlay: undefined,
    };
    return Object.keys(properties);
})();
function isPanelOptionsWithPanel(data) {
    if (data.referencePanel) {
        return true;
    }
    return false;
}
function isPanelOptionsWithGroup(data) {
    if (data.referenceGroup) {
        return true;
    }
    return false;
}
function isGroupOptionsWithPanel(data) {
    if (data.referencePanel) {
        return true;
    }
    return false;
}
function isGroupOptionsWithGroup(data) {
    if (data.referenceGroup) {
        return true;
    }
    return false;
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/strictEventsSequencing.js":
/*!********************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/strictEventsSequencing.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StrictEventsSequencing: () => (/* binding */ StrictEventsSequencing)
/* harmony export */ });
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");

class StrictEventsSequencing extends _lifecycle__WEBPACK_IMPORTED_MODULE_0__.CompositeDisposable {
    constructor(accessor) {
        super();
        this.accessor = accessor;
        this.init();
    }
    init() {
        const panels = new Set();
        const groups = new Set();
        this.addDisposables(this.accessor.onDidAddPanel((panel) => {
            if (panels.has(panel.api.id)) {
                throw new Error(`dockview: Invalid event sequence. [onDidAddPanel] called for panel ${panel.api.id} but panel already exists`);
            }
            else {
                panels.add(panel.api.id);
            }
        }), this.accessor.onDidRemovePanel((panel) => {
            if (!panels.has(panel.api.id)) {
                throw new Error(`dockview: Invalid event sequence. [onDidRemovePanel] called for panel ${panel.api.id} but panel does not exists`);
            }
            else {
                panels.delete(panel.api.id);
            }
        }), this.accessor.onDidAddGroup((group) => {
            if (groups.has(group.api.id)) {
                throw new Error(`dockview: Invalid event sequence. [onDidAddGroup] called for group ${group.api.id} but group already exists`);
            }
            else {
                groups.add(group.api.id);
            }
        }), this.accessor.onDidRemoveGroup((group) => {
            if (!groups.has(group.api.id)) {
                throw new Error(`dockview: Invalid event sequence. [onDidRemoveGroup] called for group ${group.api.id} but group does not exists`);
            }
            else {
                groups.delete(group.api.id);
            }
        }));
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/types.js":
/*!***************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/types.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dom.js":
/*!****************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dom.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Classnames: () => (/* binding */ Classnames),
/* harmony export */   OverflowObserver: () => (/* binding */ OverflowObserver),
/* harmony export */   addClasses: () => (/* binding */ addClasses),
/* harmony export */   addStyles: () => (/* binding */ addStyles),
/* harmony export */   addTestId: () => (/* binding */ addTestId),
/* harmony export */   disableIframePointEvents: () => (/* binding */ disableIframePointEvents),
/* harmony export */   getDockviewTheme: () => (/* binding */ getDockviewTheme),
/* harmony export */   getDomNodePagePosition: () => (/* binding */ getDomNodePagePosition),
/* harmony export */   getElementsByTagName: () => (/* binding */ getElementsByTagName),
/* harmony export */   isAncestor: () => (/* binding */ isAncestor),
/* harmony export */   isInDocument: () => (/* binding */ isInDocument),
/* harmony export */   quasiDefaultPrevented: () => (/* binding */ quasiDefaultPrevented),
/* harmony export */   quasiPreventDefault: () => (/* binding */ quasiPreventDefault),
/* harmony export */   removeClasses: () => (/* binding */ removeClasses),
/* harmony export */   toggleClass: () => (/* binding */ toggleClass),
/* harmony export */   trackFocus: () => (/* binding */ trackFocus),
/* harmony export */   watchElementResize: () => (/* binding */ watchElementResize)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");


class OverflowObserver extends _lifecycle__WEBPACK_IMPORTED_MODULE_1__.CompositeDisposable {
    constructor(el) {
        super();
        this._onDidChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidChange = this._onDidChange.event;
        this._value = null;
        this.addDisposables(this._onDidChange, watchElementResize(el, (entry) => {
            const hasScrollX = entry.target.scrollWidth > entry.target.clientWidth;
            const hasScrollY = entry.target.scrollHeight > entry.target.clientHeight;
            this._value = { hasScrollX, hasScrollY };
            this._onDidChange.fire(this._value);
        }));
    }
}
function watchElementResize(element, cb) {
    const observer = new ResizeObserver((entires) => {
        /**
         * Fast browser window resize produces Error: ResizeObserver loop limit exceeded.
         * The error isn't visible in browser console, doesn't affect functionality, but degrades performance.
         * See https://stackoverflow.com/questions/49384120/resizeobserver-loop-limit-exceeded/58701523#58701523
         */
        requestAnimationFrame(() => {
            const firstEntry = entires[0];
            cb(firstEntry);
        });
    });
    observer.observe(element);
    return {
        dispose: () => {
            observer.unobserve(element);
            observer.disconnect();
        },
    };
}
const removeClasses = (element, ...classes) => {
    for (const classname of classes) {
        if (element.classList.contains(classname)) {
            element.classList.remove(classname);
        }
    }
};
const addClasses = (element, ...classes) => {
    for (const classname of classes) {
        if (!element.classList.contains(classname)) {
            element.classList.add(classname);
        }
    }
};
const toggleClass = (element, className, isToggled) => {
    const hasClass = element.classList.contains(className);
    if (isToggled && !hasClass) {
        element.classList.add(className);
    }
    if (!isToggled && hasClass) {
        element.classList.remove(className);
    }
};
function isAncestor(testChild, testAncestor) {
    while (testChild) {
        if (testChild === testAncestor) {
            return true;
        }
        testChild = testChild.parentNode;
    }
    return false;
}
function getElementsByTagName(tag) {
    return Array.prototype.slice.call(document.getElementsByTagName(tag), 0);
}
function trackFocus(element) {
    return new FocusTracker(element);
}
/**
 * Track focus on an element. Ensure tabIndex is set when an HTMLElement is not focusable by default
 */
class FocusTracker extends _lifecycle__WEBPACK_IMPORTED_MODULE_1__.CompositeDisposable {
    constructor(element) {
        super();
        this._onDidFocus = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidFocus = this._onDidFocus.event;
        this._onDidBlur = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidBlur = this._onDidBlur.event;
        this.addDisposables(this._onDidFocus, this._onDidBlur);
        let hasFocus = isAncestor(document.activeElement, element);
        let loosingFocus = false;
        const onFocus = () => {
            loosingFocus = false;
            if (!hasFocus) {
                hasFocus = true;
                this._onDidFocus.fire();
            }
        };
        const onBlur = () => {
            if (hasFocus) {
                loosingFocus = true;
                window.setTimeout(() => {
                    if (loosingFocus) {
                        loosingFocus = false;
                        hasFocus = false;
                        this._onDidBlur.fire();
                    }
                }, 0);
            }
        };
        this._refreshStateHandler = () => {
            const currentNodeHasFocus = isAncestor(document.activeElement, element);
            if (currentNodeHasFocus !== hasFocus) {
                if (hasFocus) {
                    onBlur();
                }
                else {
                    onFocus();
                }
            }
        };
        if (element instanceof HTMLElement) {
            this.addDisposables((0,_events__WEBPACK_IMPORTED_MODULE_0__.addDisposableListener)(element, 'focus', onFocus, true));
            this.addDisposables((0,_events__WEBPACK_IMPORTED_MODULE_0__.addDisposableListener)(element, 'blur', onBlur, true));
        }
        else {
            this.addDisposables((0,_events__WEBPACK_IMPORTED_MODULE_0__.addDisposableWindowListener)(element, 'focus', onFocus, true));
            this.addDisposables((0,_events__WEBPACK_IMPORTED_MODULE_0__.addDisposableWindowListener)(element, 'blur', onBlur, true));
        }
    }
    refreshState() {
        this._refreshStateHandler();
    }
}
// quasi: apparently, but not really; seemingly
const QUASI_PREVENT_DEFAULT_KEY = 'dv-quasiPreventDefault';
// mark an event directly for other listeners to check
function quasiPreventDefault(event) {
    event[QUASI_PREVENT_DEFAULT_KEY] = true;
}
// check if this event has been marked
function quasiDefaultPrevented(event) {
    return event[QUASI_PREVENT_DEFAULT_KEY];
}
function addStyles(document, styleSheetList) {
    const styleSheets = Array.from(styleSheetList);
    for (const styleSheet of styleSheets) {
        if (styleSheet.href) {
            const link = document.createElement('link');
            link.href = styleSheet.href;
            link.type = styleSheet.type;
            link.rel = 'stylesheet';
            document.head.appendChild(link);
        }
        let cssTexts = [];
        try {
            if (styleSheet.cssRules) {
                cssTexts = Array.from(styleSheet.cssRules).map((rule) => rule.cssText);
            }
        }
        catch (err) {
            // security errors (lack of permissions), ignore
        }
        for (const rule of cssTexts) {
            const style = document.createElement('style');
            style.appendChild(document.createTextNode(rule));
            document.head.appendChild(style);
        }
    }
}
function getDomNodePagePosition(domNode) {
    const { left, top, width, height } = domNode.getBoundingClientRect();
    return {
        left: left + window.scrollX,
        top: top + window.scrollY,
        width: width,
        height: height,
    };
}
/**
 * Check whether an element is in the DOM (including the Shadow DOM)
 * @see https://terodox.tech/how-to-tell-if-an-element-is-in-the-dom-including-the-shadow-dom/
 */
function isInDocument(element) {
    let currentElement = element;
    while (currentElement === null || currentElement === void 0 ? void 0 : currentElement.parentNode) {
        if (currentElement.parentNode === document) {
            return true;
        }
        else if (currentElement.parentNode instanceof DocumentFragment) {
            // handle shadow DOMs
            currentElement = currentElement.parentNode.host;
        }
        else {
            currentElement = currentElement.parentNode;
        }
    }
    return false;
}
function addTestId(element, id) {
    element.setAttribute('data-testid', id);
}
function disableIframePointEvents() {
    const iframes = [
        ...getElementsByTagName('iframe'),
        ...getElementsByTagName('webview'),
    ];
    const original = new WeakMap(); // don't hold onto HTMLElement references longer than required
    for (const iframe of iframes) {
        original.set(iframe, iframe.style.pointerEvents);
        iframe.style.pointerEvents = 'none';
    }
    return {
        release: () => {
            var _a;
            for (const iframe of iframes) {
                iframe.style.pointerEvents = (_a = original.get(iframe)) !== null && _a !== void 0 ? _a : 'auto';
            }
            iframes.splice(0, iframes.length); // don't hold onto HTMLElement references longer than required
        },
    };
}
function getDockviewTheme(element) {
    function toClassList(element) {
        const list = [];
        for (let i = 0; i < element.classList.length; i++) {
            list.push(element.classList.item(i));
        }
        return list;
    }
    let theme = undefined;
    let parent = element;
    while (parent !== null) {
        theme = toClassList(parent).find((cls) => cls.startsWith('dockview-theme-'));
        if (typeof theme === 'string') {
            break;
        }
        parent = parent.parentElement;
    }
    return theme;
}
class Classnames {
    constructor(element) {
        this.element = element;
        this._classNames = [];
    }
    setClassNames(classNames) {
        for (const className of this._classNames) {
            toggleClass(this.element, className, false);
        }
        this._classNames = classNames
            .split(' ')
            .filter((v) => v.trim().length > 0);
        for (const className of this._classNames) {
            toggleClass(this.element, className, true);
        }
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/events.js":
/*!*******************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/events.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AcceptableEvent: () => (/* binding */ AcceptableEvent),
/* harmony export */   AsapEvent: () => (/* binding */ AsapEvent),
/* harmony export */   DockviewEvent: () => (/* binding */ DockviewEvent),
/* harmony export */   Emitter: () => (/* binding */ Emitter),
/* harmony export */   Event: () => (/* binding */ Event),
/* harmony export */   addDisposableListener: () => (/* binding */ addDisposableListener),
/* harmony export */   addDisposableWindowListener: () => (/* binding */ addDisposableWindowListener)
/* harmony export */ });
var Event;
(function (Event) {
    Event.any = (...children) => {
        return (listener) => {
            const disposables = children.map((child) => child(listener));
            return {
                dispose: () => {
                    disposables.forEach((d) => {
                        d.dispose();
                    });
                },
            };
        };
    };
})(Event || (Event = {}));
class DockviewEvent {
    constructor() {
        this._defaultPrevented = false;
    }
    get defaultPrevented() {
        return this._defaultPrevented;
    }
    preventDefault() {
        this._defaultPrevented = true;
    }
}
class AcceptableEvent {
    constructor() {
        this._isAccepted = false;
    }
    get isAccepted() {
        return this._isAccepted;
    }
    accept() {
        this._isAccepted = true;
    }
}
class LeakageMonitor {
    constructor() {
        this.events = new Map();
    }
    get size() {
        return this.events.size;
    }
    add(event, stacktrace) {
        this.events.set(event, stacktrace);
    }
    delete(event) {
        this.events.delete(event);
    }
    clear() {
        this.events.clear();
    }
}
class Stacktrace {
    static create() {
        var _a;
        return new Stacktrace((_a = new Error().stack) !== null && _a !== void 0 ? _a : '');
    }
    constructor(value) {
        this.value = value;
    }
    print() {
        console.warn('dockview: stacktrace', this.value);
    }
}
class Listener {
    constructor(callback, stacktrace) {
        this.callback = callback;
        this.stacktrace = stacktrace;
    }
}
// relatively simple event emitter taken from https://github.com/microsoft/vscode/blob/master/src/vs/base/common/event.ts
class Emitter {
    static setLeakageMonitorEnabled(isEnabled) {
        if (isEnabled !== Emitter.ENABLE_TRACKING) {
            Emitter.MEMORY_LEAK_WATCHER.clear();
        }
        Emitter.ENABLE_TRACKING = isEnabled;
    }
    get value() {
        return this._last;
    }
    constructor(options) {
        this.options = options;
        this._listeners = [];
        this._disposed = false;
    }
    get event() {
        if (!this._event) {
            this._event = (callback) => {
                var _a;
                if (((_a = this.options) === null || _a === void 0 ? void 0 : _a.replay) && this._last !== undefined) {
                    callback(this._last);
                }
                const listener = new Listener(callback, Emitter.ENABLE_TRACKING ? Stacktrace.create() : undefined);
                this._listeners.push(listener);
                return {
                    dispose: () => {
                        const index = this._listeners.indexOf(listener);
                        if (index > -1) {
                            this._listeners.splice(index, 1);
                        }
                        else if (Emitter.ENABLE_TRACKING) {
                            // console.warn(
                            //     `dockview: listener already disposed`,
                            //     Stacktrace.create().print()
                            // );
                        }
                    },
                };
            };
            if (Emitter.ENABLE_TRACKING) {
                Emitter.MEMORY_LEAK_WATCHER.add(this._event, Stacktrace.create());
            }
        }
        return this._event;
    }
    fire(e) {
        this._last = e;
        for (const listener of this._listeners) {
            listener.callback(e);
        }
    }
    dispose() {
        if (!this._disposed) {
            this._disposed = true;
            if (this._listeners.length > 0) {
                if (Emitter.ENABLE_TRACKING) {
                    queueMicrotask(() => {
                        var _a;
                        // don't check until stack of execution is completed to allow for out-of-order disposals within the same execution block
                        for (const listener of this._listeners) {
                            console.warn('dockview: stacktrace', (_a = listener.stacktrace) === null || _a === void 0 ? void 0 : _a.print());
                        }
                    });
                }
                this._listeners = [];
            }
            if (Emitter.ENABLE_TRACKING && this._event) {
                Emitter.MEMORY_LEAK_WATCHER.delete(this._event);
            }
        }
    }
}
Emitter.ENABLE_TRACKING = false;
Emitter.MEMORY_LEAK_WATCHER = new LeakageMonitor();
function addDisposableWindowListener(element, type, listener, options) {
    element.addEventListener(type, listener, options);
    return {
        dispose: () => {
            element.removeEventListener(type, listener, options);
        },
    };
}
function addDisposableListener(element, type, listener, options) {
    element.addEventListener(type, listener, options);
    return {
        dispose: () => {
            element.removeEventListener(type, listener, options);
        },
    };
}
/**
 *
 * Event Emitter that fires events from a Microtask callback, only one event will fire per event-loop cycle.
 *
 * It's kind of like using an `asapScheduler` in RxJs with additional logic to only fire once per event-loop cycle.
 * This implementation exists to avoid external dependencies.
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/queueMicrotask
 * @see https://rxjs.dev/api/index/const/asapScheduler
 */
class AsapEvent {
    constructor() {
        this._onFired = new Emitter();
        this._currentFireCount = 0;
        this._queued = false;
        this.onEvent = (e) => {
            /**
             * when the event is first subscribed to take note of the current fire count
             */
            const fireCountAtTimeOfEventSubscription = this._currentFireCount;
            return this._onFired.event(() => {
                /**
                 * if the current fire count is greater than the fire count at event subscription
                 * then the event has been fired since we subscribed and it's ok to "on_next" the event.
                 *
                 * if the count is not greater then what we are recieving is an event from the microtask
                 * queue that was triggered before we actually subscribed and therfore we should ignore it.
                 */
                if (this._currentFireCount > fireCountAtTimeOfEventSubscription) {
                    e();
                }
            });
        };
    }
    fire() {
        this._currentFireCount++;
        if (this._queued) {
            return;
        }
        this._queued = true;
        queueMicrotask(() => {
            this._queued = false;
            this._onFired.fire();
        });
    }
    dispose() {
        this._onFired.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/gridview/baseComponentGridview.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/gridview/baseComponentGridview.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseGrid: () => (/* binding */ BaseGrid),
/* harmony export */   toTarget: () => (/* binding */ toTarget)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _gridview__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gridview */ "./node_modules/dockview-core/dist/esm/gridview/gridview.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math */ "./node_modules/dockview-core/dist/esm/math.js");
/* harmony import */ var _splitview_splitview__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../splitview/splitview */ "./node_modules/dockview-core/dist/esm/splitview/splitview.js");
/* harmony import */ var _resizable__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../resizable */ "./node_modules/dockview-core/dist/esm/resizable.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");







const nextLayoutId = (0,_math__WEBPACK_IMPORTED_MODULE_3__.sequentialNumberGenerator)();
function toTarget(direction) {
    switch (direction) {
        case 'left':
            return 'left';
        case 'right':
            return 'right';
        case 'above':
            return 'top';
        case 'below':
            return 'bottom';
        case 'within':
        default:
            return 'center';
    }
}
class BaseGrid extends _resizable__WEBPACK_IMPORTED_MODULE_5__.Resizable {
    get id() {
        return this._id;
    }
    get size() {
        return this._groups.size;
    }
    get groups() {
        return Array.from(this._groups.values()).map((_) => _.value);
    }
    get width() {
        return this.gridview.width;
    }
    get height() {
        return this.gridview.height;
    }
    get minimumHeight() {
        return this.gridview.minimumHeight;
    }
    get maximumHeight() {
        return this.gridview.maximumHeight;
    }
    get minimumWidth() {
        return this.gridview.minimumWidth;
    }
    get maximumWidth() {
        return this.gridview.maximumWidth;
    }
    get activeGroup() {
        return this._activeGroup;
    }
    get locked() {
        return this.gridview.locked;
    }
    set locked(value) {
        this.gridview.locked = value;
    }
    constructor(container, options) {
        var _a;
        super(document.createElement('div'), options.disableAutoResizing);
        this._id = nextLayoutId.next();
        this._groups = new Map();
        this._onDidRemove = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidRemove = this._onDidRemove.event;
        this._onDidAdd = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidAdd = this._onDidAdd.event;
        this._onDidMaximizedChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidMaximizedChange = this._onDidMaximizedChange.event;
        this._onDidActiveChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidActiveChange = this._onDidActiveChange.event;
        this._bufferOnDidLayoutChange = new _events__WEBPACK_IMPORTED_MODULE_0__.AsapEvent();
        this.onDidLayoutChange = this._bufferOnDidLayoutChange.onEvent;
        this._onDidViewVisibilityChangeMicroTaskQueue = new _events__WEBPACK_IMPORTED_MODULE_0__.AsapEvent();
        this.onDidViewVisibilityChangeMicroTaskQueue = this._onDidViewVisibilityChangeMicroTaskQueue.onEvent;
        this.element.style.height = '100%';
        this.element.style.width = '100%';
        this._classNames = new _dom__WEBPACK_IMPORTED_MODULE_6__.Classnames(this.element);
        this._classNames.setClassNames((_a = options.className) !== null && _a !== void 0 ? _a : '');
        // the container is owned by the third-party, do not modify/delete it
        container.appendChild(this.element);
        this.gridview = new _gridview__WEBPACK_IMPORTED_MODULE_1__.Gridview(!!options.proportionalLayout, options.styles, options.orientation, options.locked, options.margin);
        this.gridview.locked = !!options.locked;
        this.element.appendChild(this.gridview.element);
        this.layout(0, 0, true); // set some elements height/widths
        this.addDisposables(this.gridview.onDidMaximizedNodeChange((event) => {
            this._onDidMaximizedChange.fire({
                panel: event.view,
                isMaximized: event.isMaximized,
            });
        }), this.gridview.onDidViewVisibilityChange(() => this._onDidViewVisibilityChangeMicroTaskQueue.fire()), this.onDidViewVisibilityChangeMicroTaskQueue(() => {
            this.layout(this.width, this.height, true);
        }), _lifecycle__WEBPACK_IMPORTED_MODULE_2__.Disposable.from(() => {
            var _a;
            (_a = this.element.parentElement) === null || _a === void 0 ? void 0 : _a.removeChild(this.element);
        }), this.gridview.onDidChange(() => {
            this._bufferOnDidLayoutChange.fire();
        }), _events__WEBPACK_IMPORTED_MODULE_0__.Event.any(this.onDidAdd, this.onDidRemove, this.onDidActiveChange)(() => {
            this._bufferOnDidLayoutChange.fire();
        }), this._onDidMaximizedChange, this._onDidViewVisibilityChangeMicroTaskQueue, this._bufferOnDidLayoutChange);
    }
    setVisible(panel, visible) {
        this.gridview.setViewVisible((0,_gridview__WEBPACK_IMPORTED_MODULE_1__.getGridLocation)(panel.element), visible);
        this._bufferOnDidLayoutChange.fire();
    }
    isVisible(panel) {
        return this.gridview.isViewVisible((0,_gridview__WEBPACK_IMPORTED_MODULE_1__.getGridLocation)(panel.element));
    }
    updateOptions(options) {
        var _a, _b, _c, _d;
        if (typeof options.proportionalLayout === 'boolean') {
            // this.gridview.proportionalLayout = options.proportionalLayout; // not supported
        }
        if (options.orientation) {
            this.gridview.orientation = options.orientation;
        }
        if ('styles' in options) {
            // this.gridview.styles = options.styles; // not supported
        }
        if ('disableResizing' in options) {
            this.disableResizing = (_a = options.disableAutoResizing) !== null && _a !== void 0 ? _a : false;
        }
        if ('locked' in options) {
            this.locked = (_b = options.locked) !== null && _b !== void 0 ? _b : false;
        }
        if ('margin' in options) {
            this.gridview.margin = (_c = options.margin) !== null && _c !== void 0 ? _c : 0;
        }
        if ('className' in options) {
            this._classNames.setClassNames((_d = options.className) !== null && _d !== void 0 ? _d : '');
        }
    }
    maximizeGroup(panel) {
        this.gridview.maximizeView(panel);
        this.doSetGroupActive(panel);
    }
    isMaximizedGroup(panel) {
        return this.gridview.maximizedView() === panel;
    }
    exitMaximizedGroup() {
        this.gridview.exitMaximizedView();
    }
    hasMaximizedGroup() {
        return this.gridview.hasMaximizedView();
    }
    doAddGroup(group, location = [0], size) {
        this.gridview.addView(group, size !== null && size !== void 0 ? size : _splitview_splitview__WEBPACK_IMPORTED_MODULE_4__.Sizing.Distribute, location);
        this._onDidAdd.fire(group);
    }
    doRemoveGroup(group, options) {
        if (!this._groups.has(group.id)) {
            throw new Error('invalid operation');
        }
        const item = this._groups.get(group.id);
        const view = this.gridview.remove(group, _splitview_splitview__WEBPACK_IMPORTED_MODULE_4__.Sizing.Distribute);
        if (item && !(options === null || options === void 0 ? void 0 : options.skipDispose)) {
            item.disposable.dispose();
            item.value.dispose();
            this._groups.delete(group.id);
            this._onDidRemove.fire(group);
        }
        if (!(options === null || options === void 0 ? void 0 : options.skipActive) && this._activeGroup === group) {
            const groups = Array.from(this._groups.values());
            this.doSetGroupActive(groups.length > 0 ? groups[0].value : undefined);
        }
        return view;
    }
    getPanel(id) {
        var _a;
        return (_a = this._groups.get(id)) === null || _a === void 0 ? void 0 : _a.value;
    }
    doSetGroupActive(group) {
        if (this._activeGroup === group) {
            return;
        }
        if (this._activeGroup) {
            this._activeGroup.setActive(false);
        }
        if (group) {
            group.setActive(true);
        }
        this._activeGroup = group;
        this._onDidActiveChange.fire(group);
    }
    removeGroup(group) {
        this.doRemoveGroup(group);
    }
    moveToNext(options) {
        var _a;
        if (!options) {
            options = {};
        }
        if (!options.group) {
            if (!this.activeGroup) {
                return;
            }
            options.group = this.activeGroup;
        }
        const location = (0,_gridview__WEBPACK_IMPORTED_MODULE_1__.getGridLocation)(options.group.element);
        const next = (_a = this.gridview.next(location)) === null || _a === void 0 ? void 0 : _a.view;
        this.doSetGroupActive(next);
    }
    moveToPrevious(options) {
        var _a;
        if (!options) {
            options = {};
        }
        if (!options.group) {
            if (!this.activeGroup) {
                return;
            }
            options.group = this.activeGroup;
        }
        const location = (0,_gridview__WEBPACK_IMPORTED_MODULE_1__.getGridLocation)(options.group.element);
        const next = (_a = this.gridview.previous(location)) === null || _a === void 0 ? void 0 : _a.view;
        this.doSetGroupActive(next);
    }
    layout(width, height, forceResize) {
        const different = forceResize || width !== this.width || height !== this.height;
        if (!different) {
            return;
        }
        this.gridview.element.style.height = `${height}px`;
        this.gridview.element.style.width = `${width}px`;
        this.gridview.layout(width, height);
    }
    dispose() {
        this._onDidActiveChange.dispose();
        this._onDidAdd.dispose();
        this._onDidRemove.dispose();
        for (const group of this.groups) {
            group.dispose();
        }
        this.gridview.dispose();
        super.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/gridview/basePanelView.js":
/*!***********************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/gridview/basePanelView.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BasePanelView: () => (/* binding */ BasePanelView)
/* harmony export */ });
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _api_panelApi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../api/panelApi */ "./node_modules/dockview-core/dist/esm/api/panelApi.js");



class BasePanelView extends _lifecycle__WEBPACK_IMPORTED_MODULE_1__.CompositeDisposable {
    get element() {
        return this._element;
    }
    get width() {
        return this._width;
    }
    get height() {
        return this._height;
    }
    get params() {
        var _a;
        return (_a = this._params) === null || _a === void 0 ? void 0 : _a.params;
    }
    constructor(id, component, api) {
        super();
        this.id = id;
        this.component = component;
        this.api = api;
        this._height = 0;
        this._width = 0;
        this._element = document.createElement('div');
        this._element.tabIndex = -1;
        this._element.style.outline = 'none';
        this._element.style.height = '100%';
        this._element.style.width = '100%';
        this._element.style.overflow = 'hidden';
        const focusTracker = (0,_dom__WEBPACK_IMPORTED_MODULE_0__.trackFocus)(this._element);
        this.addDisposables(this.api, focusTracker.onDidFocus(() => {
            this.api._onDidChangeFocus.fire({ isFocused: true });
        }), focusTracker.onDidBlur(() => {
            this.api._onDidChangeFocus.fire({ isFocused: false });
        }), focusTracker);
    }
    focus() {
        const event = new _api_panelApi__WEBPACK_IMPORTED_MODULE_2__.WillFocusEvent();
        this.api._onWillFocus.fire(event);
        if (event.defaultPrevented) {
            return;
        }
        this._element.focus();
    }
    layout(width, height) {
        this._width = width;
        this._height = height;
        this.api._onDidDimensionChange.fire({ width, height });
        if (this.part) {
            if (this._params) {
                this.part.update(this._params.params);
            }
        }
    }
    init(parameters) {
        this._params = parameters;
        this.part = this.getComponent();
    }
    update(event) {
        var _a, _b;
        // merge the new parameters with the existing parameters
        this._params = Object.assign(Object.assign({}, this._params), { params: Object.assign(Object.assign({}, (_a = this._params) === null || _a === void 0 ? void 0 : _a.params), event.params) });
        /**
         * delete new keys that have a value of undefined,
         * allow values of null
         */
        for (const key of Object.keys(event.params)) {
            if (event.params[key] === undefined) {
                delete this._params.params[key];
            }
        }
        // update the view with the updated props
        (_b = this.part) === null || _b === void 0 ? void 0 : _b.update({ params: this._params.params });
    }
    toJSON() {
        var _a, _b;
        const params = (_b = (_a = this._params) === null || _a === void 0 ? void 0 : _a.params) !== null && _b !== void 0 ? _b : {};
        return {
            id: this.id,
            component: this.component,
            params: Object.keys(params).length > 0 ? params : undefined,
        };
    }
    dispose() {
        var _a;
        this.api.dispose();
        (_a = this.part) === null || _a === void 0 ? void 0 : _a.dispose();
        super.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/gridview/branchNode.js":
/*!********************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/gridview/branchNode.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BranchNode: () => (/* binding */ BranchNode)
/* harmony export */ });
/* harmony import */ var _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../splitview/splitview */ "./node_modules/dockview-core/dist/esm/splitview/splitview.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _leafNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./leafNode */ "./node_modules/dockview-core/dist/esm/gridview/leafNode.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/*---------------------------------------------------------------------------------------------
 * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:
 * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid
 *--------------------------------------------------------------------------------------------*/




class BranchNode extends _lifecycle__WEBPACK_IMPORTED_MODULE_3__.CompositeDisposable {
    get width() {
        return this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
            ? this.size
            : this.orthogonalSize;
    }
    get height() {
        return this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
            ? this.orthogonalSize
            : this.size;
    }
    get minimumSize() {
        return this.children.length === 0
            ? 0
            : Math.max(...this.children.map((c, index) => this.splitview.isViewVisible(index)
                ? c.minimumOrthogonalSize
                : 0));
    }
    get maximumSize() {
        return Math.min(...this.children.map((c, index) => this.splitview.isViewVisible(index)
            ? c.maximumOrthogonalSize
            : Number.POSITIVE_INFINITY));
    }
    get minimumOrthogonalSize() {
        return this.splitview.minimumSize;
    }
    get maximumOrthogonalSize() {
        return this.splitview.maximumSize;
    }
    get orthogonalSize() {
        return this._orthogonalSize;
    }
    get size() {
        return this._size;
    }
    get minimumWidth() {
        return this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
            ? this.minimumOrthogonalSize
            : this.minimumSize;
    }
    get minimumHeight() {
        return this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
            ? this.minimumSize
            : this.minimumOrthogonalSize;
    }
    get maximumWidth() {
        return this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
            ? this.maximumOrthogonalSize
            : this.maximumSize;
    }
    get maximumHeight() {
        return this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
            ? this.maximumSize
            : this.maximumOrthogonalSize;
    }
    get priority() {
        if (this.children.length === 0) {
            return _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.LayoutPriority.Normal;
        }
        const priorities = this.children.map((c) => typeof c.priority === 'undefined'
            ? _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.LayoutPriority.Normal
            : c.priority);
        if (priorities.some((p) => p === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.LayoutPriority.High)) {
            return _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.LayoutPriority.High;
        }
        else if (priorities.some((p) => p === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.LayoutPriority.Low)) {
            return _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.LayoutPriority.Low;
        }
        return _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.LayoutPriority.Normal;
    }
    get disabled() {
        return this.splitview.disabled;
    }
    set disabled(value) {
        this.splitview.disabled = value;
    }
    get margin() {
        return this.splitview.margin;
    }
    set margin(value) {
        this.splitview.margin = value;
        this.children.forEach((child) => {
            if (child instanceof BranchNode) {
                child.margin = value;
            }
        });
    }
    constructor(orientation, proportionalLayout, styles, size, orthogonalSize, disabled, margin, childDescriptors) {
        super();
        this.orientation = orientation;
        this.proportionalLayout = proportionalLayout;
        this.styles = styles;
        this._childrenDisposable = _lifecycle__WEBPACK_IMPORTED_MODULE_3__.Disposable.NONE;
        this.children = [];
        this._onDidChange = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidChange = this._onDidChange.event;
        this._onDidVisibilityChange = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidVisibilityChange = this._onDidVisibilityChange.event;
        this._orthogonalSize = orthogonalSize;
        this._size = size;
        this.element = document.createElement('div');
        this.element.className = 'dv-branch-node';
        if (!childDescriptors) {
            this.splitview = new _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Splitview(this.element, {
                orientation: this.orientation,
                proportionalLayout,
                styles,
                margin,
            });
            this.splitview.layout(this.size, this.orthogonalSize);
        }
        else {
            const descriptor = {
                views: childDescriptors.map((childDescriptor) => {
                    return {
                        view: childDescriptor.node,
                        size: childDescriptor.node.size,
                        visible: childDescriptor.node instanceof _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode &&
                            childDescriptor.visible !== undefined
                            ? childDescriptor.visible
                            : true,
                    };
                }),
                size: this.orthogonalSize,
            };
            this.children = childDescriptors.map((c) => c.node);
            this.splitview = new _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Splitview(this.element, {
                orientation: this.orientation,
                descriptor,
                proportionalLayout,
                styles,
                margin,
            });
        }
        this.disabled = disabled;
        this.addDisposables(this._onDidChange, this._onDidVisibilityChange, this.splitview.onDidSashEnd(() => {
            this._onDidChange.fire({});
        }));
        this.setupChildrenEvents();
    }
    setVisible(_visible) {
        // noop
    }
    isChildVisible(index) {
        if (index < 0 || index >= this.children.length) {
            throw new Error('Invalid index');
        }
        return this.splitview.isViewVisible(index);
    }
    setChildVisible(index, visible) {
        if (index < 0 || index >= this.children.length) {
            throw new Error('Invalid index');
        }
        if (this.splitview.isViewVisible(index) === visible) {
            return;
        }
        const wereAllChildrenHidden = this.splitview.contentSize === 0;
        this.splitview.setViewVisible(index, visible);
        // }
        const areAllChildrenHidden = this.splitview.contentSize === 0;
        // If all children are hidden then the parent should hide the entire splitview
        // If the entire splitview is hidden then the parent should show the splitview when a child is shown
        if ((visible && wereAllChildrenHidden) ||
            (!visible && areAllChildrenHidden)) {
            this._onDidVisibilityChange.fire({ visible });
        }
    }
    moveChild(from, to) {
        if (from === to) {
            return;
        }
        if (from < 0 || from >= this.children.length) {
            throw new Error('Invalid from index');
        }
        if (from < to) {
            to--;
        }
        this.splitview.moveView(from, to);
        const child = this._removeChild(from);
        this._addChild(child, to);
    }
    getChildSize(index) {
        if (index < 0 || index >= this.children.length) {
            throw new Error('Invalid index');
        }
        return this.splitview.getViewSize(index);
    }
    resizeChild(index, size) {
        if (index < 0 || index >= this.children.length) {
            throw new Error('Invalid index');
        }
        this.splitview.resizeView(index, size);
    }
    layout(size, orthogonalSize) {
        this._size = orthogonalSize;
        this._orthogonalSize = size;
        this.splitview.layout(orthogonalSize, size);
    }
    addChild(node, size, index, skipLayout) {
        if (index < 0 || index > this.children.length) {
            throw new Error('Invalid index');
        }
        this.splitview.addView(node, size, index, skipLayout);
        this._addChild(node, index);
    }
    getChildCachedVisibleSize(index) {
        if (index < 0 || index >= this.children.length) {
            throw new Error('Invalid index');
        }
        return this.splitview.getViewCachedVisibleSize(index);
    }
    removeChild(index, sizing) {
        if (index < 0 || index >= this.children.length) {
            throw new Error('Invalid index');
        }
        this.splitview.removeView(index, sizing);
        return this._removeChild(index);
    }
    _addChild(node, index) {
        this.children.splice(index, 0, node);
        this.setupChildrenEvents();
    }
    _removeChild(index) {
        const [child] = this.children.splice(index, 1);
        this.setupChildrenEvents();
        return child;
    }
    setupChildrenEvents() {
        this._childrenDisposable.dispose();
        this._childrenDisposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_3__.CompositeDisposable(_events__WEBPACK_IMPORTED_MODULE_1__.Event.any(...this.children.map((c) => c.onDidChange))((e) => {
            /**
             * indicate a change has occured to allows any re-rendering but don't bubble
             * event because that was specific to this branch
             */
            this._onDidChange.fire({ size: e.orthogonalSize });
        }), ...this.children.map((c, i) => {
            if (c instanceof BranchNode) {
                return c.onDidVisibilityChange(({ visible }) => {
                    this.setChildVisible(i, visible);
                });
            }
            return _lifecycle__WEBPACK_IMPORTED_MODULE_3__.Disposable.NONE;
        }));
    }
    dispose() {
        this._childrenDisposable.dispose();
        this.splitview.dispose();
        this.children.forEach((child) => child.dispose());
        super.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/gridview/gridview.js":
/*!******************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/gridview/gridview.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Gridview: () => (/* binding */ Gridview),
/* harmony export */   getDirectionOrientation: () => (/* binding */ getDirectionOrientation),
/* harmony export */   getGridLocation: () => (/* binding */ getGridLocation),
/* harmony export */   getLocationOrientation: () => (/* binding */ getLocationOrientation),
/* harmony export */   getRelativeLocation: () => (/* binding */ getRelativeLocation),
/* harmony export */   indexInParent: () => (/* binding */ indexInParent),
/* harmony export */   isGridBranchNode: () => (/* binding */ isGridBranchNode),
/* harmony export */   orthogonal: () => (/* binding */ orthogonal)
/* harmony export */ });
/* harmony import */ var _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../splitview/splitview */ "./node_modules/dockview-core/dist/esm/splitview/splitview.js");
/* harmony import */ var _array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../array */ "./node_modules/dockview-core/dist/esm/array.js");
/* harmony import */ var _leafNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./leafNode */ "./node_modules/dockview-core/dist/esm/gridview/leafNode.js");
/* harmony import */ var _branchNode__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./branchNode */ "./node_modules/dockview-core/dist/esm/gridview/branchNode.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/*---------------------------------------------------------------------------------------------
 * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:
 * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid
 *--------------------------------------------------------------------------------------------*/






function findLeaf(candiateNode, last) {
    if (candiateNode instanceof _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode) {
        return candiateNode;
    }
    if (candiateNode instanceof _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode) {
        return findLeaf(candiateNode.children[last ? candiateNode.children.length - 1 : 0], last);
    }
    throw new Error('invalid node');
}
function flipNode(node, size, orthogonalSize) {
    if (node instanceof _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode) {
        const result = new _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode(orthogonal(node.orientation), node.proportionalLayout, node.styles, size, orthogonalSize, node.disabled, node.margin);
        let totalSize = 0;
        for (let i = node.children.length - 1; i >= 0; i--) {
            const child = node.children[i];
            const childSize = child instanceof _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode ? child.orthogonalSize : child.size;
            let newSize = node.size === 0
                ? 0
                : Math.round((size * childSize) / node.size);
            totalSize += newSize;
            // The last view to add should adjust to rounding errors
            if (i === 0) {
                newSize += size - totalSize;
            }
            result.addChild(flipNode(child, orthogonalSize, newSize), newSize, 0, true);
        }
        return result;
    }
    else {
        return new _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode(node.view, orthogonal(node.orientation), orthogonalSize);
    }
}
function indexInParent(element) {
    const parentElement = element.parentElement;
    if (!parentElement) {
        throw new Error('Invalid grid element');
    }
    let el = parentElement.firstElementChild;
    let index = 0;
    while (el !== element && el !== parentElement.lastElementChild && el) {
        el = el.nextElementSibling;
        index++;
    }
    return index;
}
/**
 * Find the grid location of a specific DOM element by traversing the parent
 * chain and finding each child index on the way.
 *
 * This will break as soon as DOM structures of the Splitview or Gridview change.
 */
function getGridLocation(element) {
    const parentElement = element.parentElement;
    if (!parentElement) {
        throw new Error('Invalid grid element');
    }
    if (/\bdv-grid-view\b/.test(parentElement.className)) {
        return [];
    }
    const index = indexInParent(parentElement);
    const ancestor = parentElement.parentElement.parentElement.parentElement;
    return [...getGridLocation(ancestor), index];
}
function getRelativeLocation(rootOrientation, location, direction) {
    const orientation = getLocationOrientation(rootOrientation, location);
    const directionOrientation = getDirectionOrientation(direction);
    if (orientation === directionOrientation) {
        const [rest, _index] = (0,_array__WEBPACK_IMPORTED_MODULE_1__.tail)(location);
        let index = _index;
        if (direction === 'right' || direction === 'bottom') {
            index += 1;
        }
        return [...rest, index];
    }
    else {
        const index = direction === 'right' || direction === 'bottom' ? 1 : 0;
        return [...location, index];
    }
}
function getDirectionOrientation(direction) {
    return direction === 'top' || direction === 'bottom'
        ? _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.VERTICAL
        : _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL;
}
function getLocationOrientation(rootOrientation, location) {
    return location.length % 2 === 0
        ? orthogonal(rootOrientation)
        : rootOrientation;
}
const orthogonal = (orientation) => orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
    ? _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.VERTICAL
    : _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL;
function isGridBranchNode(node) {
    return !!node.children;
}
const serializeBranchNode = (node, orientation) => {
    const size = orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.VERTICAL ? node.box.width : node.box.height;
    if (!isGridBranchNode(node)) {
        if (typeof node.cachedVisibleSize === 'number') {
            return {
                type: 'leaf',
                data: node.view.toJSON(),
                size: node.cachedVisibleSize,
                visible: false,
            };
        }
        return { type: 'leaf', data: node.view.toJSON(), size };
    }
    return {
        type: 'branch',
        data: node.children.map((c) => serializeBranchNode(c, orthogonal(orientation))),
        size,
    };
};
class Gridview {
    get length() {
        return this._root ? this._root.children.length : 0;
    }
    get orientation() {
        return this.root.orientation;
    }
    set orientation(orientation) {
        if (this.root.orientation === orientation) {
            return;
        }
        const { size, orthogonalSize } = this.root;
        this.root = flipNode(this.root, orthogonalSize, size);
        this.root.layout(size, orthogonalSize);
    }
    get width() {
        return this.root.width;
    }
    get height() {
        return this.root.height;
    }
    get minimumWidth() {
        return this.root.minimumWidth;
    }
    get minimumHeight() {
        return this.root.minimumHeight;
    }
    get maximumWidth() {
        return this.root.maximumHeight;
    }
    get maximumHeight() {
        return this.root.maximumHeight;
    }
    get locked() {
        return this._locked;
    }
    set locked(value) {
        this._locked = value;
        const branch = [this.root];
        /**
         * simple depth-first-search to cover all nodes
         *
         * @see https://en.wikipedia.org/wiki/Depth-first_search
         */
        while (branch.length > 0) {
            const node = branch.pop();
            if (node instanceof _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode) {
                node.disabled = value;
                branch.push(...node.children);
            }
        }
    }
    get margin() {
        return this._margin;
    }
    set margin(value) {
        this._margin = value;
        this.root.margin = value;
    }
    maximizedView() {
        var _a;
        return (_a = this._maximizedNode) === null || _a === void 0 ? void 0 : _a.leaf.view;
    }
    hasMaximizedView() {
        return this._maximizedNode !== undefined;
    }
    maximizeView(view) {
        var _a;
        const location = getGridLocation(view.element);
        const [_, node] = this.getNode(location);
        if (!(node instanceof _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode)) {
            return;
        }
        if (((_a = this._maximizedNode) === null || _a === void 0 ? void 0 : _a.leaf) === node) {
            return;
        }
        if (this.hasMaximizedView()) {
            this.exitMaximizedView();
        }
        serializeBranchNode(this.getView(), this.orientation);
        const hiddenOnMaximize = [];
        function hideAllViewsBut(parent, exclude) {
            for (let i = 0; i < parent.children.length; i++) {
                const child = parent.children[i];
                if (child instanceof _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode) {
                    if (child !== exclude) {
                        if (parent.isChildVisible(i)) {
                            parent.setChildVisible(i, false);
                        }
                        else {
                            hiddenOnMaximize.push(child);
                        }
                    }
                }
                else {
                    hideAllViewsBut(child, exclude);
                }
            }
        }
        hideAllViewsBut(this.root, node);
        this._maximizedNode = { leaf: node, hiddenOnMaximize };
        this._onDidMaximizedNodeChange.fire({
            view: node.view,
            isMaximized: true,
        });
    }
    exitMaximizedView() {
        if (!this._maximizedNode) {
            return;
        }
        const hiddenOnMaximize = this._maximizedNode.hiddenOnMaximize;
        function showViewsInReverseOrder(parent) {
            for (let index = parent.children.length - 1; index >= 0; index--) {
                const child = parent.children[index];
                if (child instanceof _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode) {
                    if (!hiddenOnMaximize.includes(child)) {
                        parent.setChildVisible(index, true);
                    }
                }
                else {
                    showViewsInReverseOrder(child);
                }
            }
        }
        showViewsInReverseOrder(this.root);
        const tmp = this._maximizedNode.leaf;
        this._maximizedNode = undefined;
        this._onDidMaximizedNodeChange.fire({
            view: tmp.view,
            isMaximized: false,
        });
    }
    serialize() {
        const maximizedView = this.maximizedView();
        let maxmizedViewLocation;
        if (maximizedView) {
            /**
             * The minimum information we can get away with in order to serialize a maxmized view is it's location within the grid
             * which is represented as a branch of indices
             */
            maxmizedViewLocation = getGridLocation(maximizedView.element);
        }
        if (this.hasMaximizedView()) {
            /**
             * the saved layout cannot be in its maxmized state otherwise all of the underlying
             * view dimensions will be wrong
             *
             * To counteract this we temporaily remove the maximized view to compute the serialized output
             * of the grid before adding back the maxmized view as to not alter the layout from the users
             * perspective when `.toJSON()` is called
             */
            this.exitMaximizedView();
        }
        const root = serializeBranchNode(this.getView(), this.orientation);
        const resullt = {
            root,
            width: this.width,
            height: this.height,
            orientation: this.orientation,
        };
        if (maxmizedViewLocation) {
            resullt.maximizedNode = {
                location: maxmizedViewLocation,
            };
        }
        if (maximizedView) {
            // replace any maximzied view that was removed for serialization purposes
            this.maximizeView(maximizedView);
        }
        return resullt;
    }
    dispose() {
        this.disposable.dispose();
        this._onDidChange.dispose();
        this._onDidMaximizedNodeChange.dispose();
        this._onDidViewVisibilityChange.dispose();
        this.root.dispose();
        this._maximizedNode = undefined;
        this.element.remove();
    }
    clear() {
        const orientation = this.root.orientation;
        this.root = new _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode(orientation, this.proportionalLayout, this.styles, this.root.size, this.root.orthogonalSize, this.locked, this.margin);
    }
    deserialize(json, deserializer) {
        const orientation = json.orientation;
        const height = orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.VERTICAL ? json.height : json.width;
        this._deserialize(json.root, orientation, deserializer, height);
        /**
         * The deserialied layout must be positioned through this.layout(...)
         * before any maximizedNode can be positioned
         */
        this.layout(json.width, json.height);
        if (json.maximizedNode) {
            const location = json.maximizedNode.location;
            const [_, node] = this.getNode(location);
            if (!(node instanceof _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode)) {
                return;
            }
            this.maximizeView(node.view);
        }
    }
    _deserialize(root, orientation, deserializer, orthogonalSize) {
        this.root = this._deserializeNode(root, orientation, deserializer, orthogonalSize);
    }
    _deserializeNode(node, orientation, deserializer, orthogonalSize) {
        var _a;
        let result;
        if (node.type === 'branch') {
            const serializedChildren = node.data;
            const children = serializedChildren.map((serializedChild) => {
                return {
                    node: this._deserializeNode(serializedChild, orthogonal(orientation), deserializer, node.size),
                    visible: serializedChild.visible,
                };
            });
            result = new _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode(orientation, this.proportionalLayout, this.styles, node.size, // <- orthogonal size - flips at each depth
            orthogonalSize, // <- size - flips at each depth,
            this.locked, this.margin, children);
        }
        else {
            const view = deserializer.fromJSON(node);
            if (typeof node.visible === 'boolean') {
                (_a = view.setVisible) === null || _a === void 0 ? void 0 : _a.call(view, node.visible);
            }
            result = new _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode(view, orientation, orthogonalSize, node.size);
        }
        return result;
    }
    get root() {
        return this._root;
    }
    set root(root) {
        const oldRoot = this._root;
        if (oldRoot) {
            oldRoot.dispose();
            this._maximizedNode = undefined;
            this.element.removeChild(oldRoot.element);
        }
        this._root = root;
        this.element.appendChild(this._root.element);
        this.disposable.value = this._root.onDidChange((e) => {
            this._onDidChange.fire(e);
        });
    }
    /**
     * If the root is orientated as a VERTICAL node then nest the existing root within a new HORIZIONTAL root node
     * If the root is orientated as a HORIZONTAL node then nest the existing root within a new VERITCAL root node
     */
    insertOrthogonalSplitviewAtRoot() {
        if (!this._root) {
            return;
        }
        const oldRoot = this.root;
        oldRoot.element.remove();
        this._root = new _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode(orthogonal(oldRoot.orientation), this.proportionalLayout, this.styles, this.root.orthogonalSize, this.root.size, this.locked, this.margin);
        if (oldRoot.children.length === 0) {
            // no data so no need to add anything back in
        }
        else if (oldRoot.children.length === 1) {
            // can remove one level of redundant branching if there is only a single child
            const childReference = oldRoot.children[0];
            const child = oldRoot.removeChild(0); // remove to prevent disposal when disposing of unwanted root
            child.dispose();
            oldRoot.dispose();
            this._root.addChild(
            /**
             * the child node will have the same orientation as the new root since
             * we are removing the inbetween node.
             * the entire 'tree' must be flipped recursively to ensure that the orientation
             * flips at each level
             */
            flipNode(childReference, childReference.orthogonalSize, childReference.size), _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Sizing.Distribute, 0);
        }
        else {
            this._root.addChild(oldRoot, _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Sizing.Distribute, 0);
        }
        this.element.appendChild(this._root.element);
        this.disposable.value = this._root.onDidChange((e) => {
            this._onDidChange.fire(e);
        });
    }
    next(location) {
        return this.progmaticSelect(location);
    }
    previous(location) {
        return this.progmaticSelect(location, true);
    }
    getView(location) {
        const node = location ? this.getNode(location)[1] : this.root;
        return this._getViews(node, this.orientation);
    }
    _getViews(node, orientation, cachedVisibleSize) {
        const box = { height: node.height, width: node.width };
        if (node instanceof _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode) {
            return { box, view: node.view, cachedVisibleSize };
        }
        const children = [];
        for (let i = 0; i < node.children.length; i++) {
            const child = node.children[i];
            const nodeCachedVisibleSize = node.getChildCachedVisibleSize(i);
            children.push(this._getViews(child, orthogonal(orientation), nodeCachedVisibleSize));
        }
        return { box, children };
    }
    progmaticSelect(location, reverse = false) {
        const [path, node] = this.getNode(location);
        if (!(node instanceof _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode)) {
            throw new Error('invalid location');
        }
        for (let i = path.length - 1; i > -1; i--) {
            const n = path[i];
            const l = location[i] || 0;
            const canProgressInCurrentLevel = reverse
                ? l - 1 > -1
                : l + 1 < n.children.length;
            if (canProgressInCurrentLevel) {
                return findLeaf(n.children[reverse ? l - 1 : l + 1], reverse);
            }
        }
        return findLeaf(this.root, reverse);
    }
    constructor(proportionalLayout, styles, orientation, locked, margin) {
        this.proportionalLayout = proportionalLayout;
        this.styles = styles;
        this._locked = false;
        this._margin = 0;
        this._maximizedNode = undefined;
        this.disposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_5__.MutableDisposable();
        this._onDidChange = new _events__WEBPACK_IMPORTED_MODULE_4__.Emitter();
        this.onDidChange = this._onDidChange.event;
        this._onDidViewVisibilityChange = new _events__WEBPACK_IMPORTED_MODULE_4__.Emitter();
        this.onDidViewVisibilityChange = this._onDidViewVisibilityChange.event;
        this._onDidMaximizedNodeChange = new _events__WEBPACK_IMPORTED_MODULE_4__.Emitter();
        this.onDidMaximizedNodeChange = this._onDidMaximizedNodeChange.event;
        this.element = document.createElement('div');
        this.element.className = 'dv-grid-view';
        this._locked = locked !== null && locked !== void 0 ? locked : false;
        this._margin = margin !== null && margin !== void 0 ? margin : 0;
        this.root = new _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode(orientation, proportionalLayout, styles, 0, 0, this.locked, this.margin);
    }
    isViewVisible(location) {
        const [rest, index] = (0,_array__WEBPACK_IMPORTED_MODULE_1__.tail)(location);
        const [, parent] = this.getNode(rest);
        if (!(parent instanceof _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode)) {
            throw new Error('Invalid from location');
        }
        return parent.isChildVisible(index);
    }
    setViewVisible(location, visible) {
        if (this.hasMaximizedView()) {
            this.exitMaximizedView();
        }
        const [rest, index] = (0,_array__WEBPACK_IMPORTED_MODULE_1__.tail)(location);
        const [, parent] = this.getNode(rest);
        if (!(parent instanceof _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode)) {
            throw new Error('Invalid from location');
        }
        this._onDidViewVisibilityChange.fire();
        parent.setChildVisible(index, visible);
    }
    moveView(parentLocation, from, to) {
        if (this.hasMaximizedView()) {
            this.exitMaximizedView();
        }
        const [, parent] = this.getNode(parentLocation);
        if (!(parent instanceof _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode)) {
            throw new Error('Invalid location');
        }
        parent.moveChild(from, to);
    }
    addView(view, size, location) {
        if (this.hasMaximizedView()) {
            this.exitMaximizedView();
        }
        const [rest, index] = (0,_array__WEBPACK_IMPORTED_MODULE_1__.tail)(location);
        const [pathToParent, parent] = this.getNode(rest);
        if (parent instanceof _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode) {
            const node = new _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode(view, orthogonal(parent.orientation), parent.orthogonalSize);
            parent.addChild(node, size, index);
        }
        else {
            const [grandParent, ..._] = [...pathToParent].reverse();
            const [parentIndex, ...__] = [...rest].reverse();
            let newSiblingSize = 0;
            const newSiblingCachedVisibleSize = grandParent.getChildCachedVisibleSize(parentIndex);
            if (typeof newSiblingCachedVisibleSize === 'number') {
                newSiblingSize = _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Sizing.Invisible(newSiblingCachedVisibleSize);
            }
            const child = grandParent.removeChild(parentIndex);
            child.dispose();
            const newParent = new _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode(parent.orientation, this.proportionalLayout, this.styles, parent.size, parent.orthogonalSize, this.locked, this.margin);
            grandParent.addChild(newParent, parent.size, parentIndex);
            const newSibling = new _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode(parent.view, grandParent.orientation, parent.size);
            newParent.addChild(newSibling, newSiblingSize, 0);
            if (typeof size !== 'number' && size.type === 'split') {
                size = { type: 'split', index: 0 };
            }
            const node = new _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode(view, grandParent.orientation, parent.size);
            newParent.addChild(node, size, index);
        }
    }
    remove(view, sizing) {
        const location = getGridLocation(view.element);
        return this.removeView(location, sizing);
    }
    removeView(location, sizing) {
        if (this.hasMaximizedView()) {
            this.exitMaximizedView();
        }
        const [rest, index] = (0,_array__WEBPACK_IMPORTED_MODULE_1__.tail)(location);
        const [pathToParent, parent] = this.getNode(rest);
        if (!(parent instanceof _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode)) {
            throw new Error('Invalid location');
        }
        const nodeToRemove = parent.children[index];
        if (!(nodeToRemove instanceof _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode)) {
            throw new Error('Invalid location');
        }
        parent.removeChild(index, sizing);
        nodeToRemove.dispose();
        if (parent.children.length !== 1) {
            return nodeToRemove.view;
        }
        // if the parent has only one child and we know the parent is a BranchNode we can make the tree
        // more efficiently spaced by replacing the parent BranchNode with the child.
        // if that child is a LeafNode then we simply replace the BranchNode with the child otherwise if the child
        // is a BranchNode too we should spread it's children into the grandparent.
        // refer to the remaining child as the sibling
        const sibling = parent.children[0];
        if (pathToParent.length === 0) {
            // if the parent is root
            if (sibling instanceof _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode) {
                // if the sibling is a leaf node no action is required
                return nodeToRemove.view;
            }
            // otherwise the sibling is a branch node. since the parent is the root and the root has only one child
            // which is a branch node we can just set this branch node to be the new root node
            // for good housekeeping we'll removing the sibling from it's existing tree
            parent.removeChild(0, sizing);
            // and set that sibling node to be root
            this.root = sibling;
            return nodeToRemove.view;
        }
        // otherwise the parent is apart of a large sub-tree
        const [grandParent, ..._] = [...pathToParent].reverse();
        const [parentIndex, ...__] = [...rest].reverse();
        const isSiblingVisible = parent.isChildVisible(0);
        // either way we need to remove the sibling from it's existing tree
        parent.removeChild(0, sizing);
        // note the sizes of all of the grandparents children
        const sizes = grandParent.children.map((_size, i) => grandParent.getChildSize(i));
        // remove the parent from the grandparent since we are moving the sibling to take the parents place
        // this parent is no longer used and can be disposed of
        grandParent.removeChild(parentIndex, sizing).dispose();
        if (sibling instanceof _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode) {
            // replace the parent with the siblings children
            sizes.splice(parentIndex, 1, ...sibling.children.map((c) => c.size));
            // and add those siblings to the grandparent
            for (let i = 0; i < sibling.children.length; i++) {
                const child = sibling.children[i];
                grandParent.addChild(child, child.size, parentIndex + i);
            }
            /**
             * clean down the branch node since we need to dipose of it and
             * when .dispose() it called on a branch it will dispose of any
             * views it is holding onto.
             */
            while (sibling.children.length > 0) {
                sibling.removeChild(0);
            }
        }
        else {
            // otherwise create a new leaf node and add that to the grandparent
            const newSibling = new _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode(sibling.view, orthogonal(sibling.orientation), sibling.size);
            const siblingSizing = isSiblingVisible
                ? sibling.orthogonalSize
                : _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Sizing.Invisible(sibling.orthogonalSize);
            grandParent.addChild(newSibling, siblingSizing, parentIndex);
        }
        // the containing node of the sibling is no longer required and can be disposed of
        sibling.dispose();
        // resize everything
        for (let i = 0; i < sizes.length; i++) {
            grandParent.resizeChild(i, sizes[i]);
        }
        return nodeToRemove.view;
    }
    layout(width, height) {
        const [size, orthogonalSize] = this.root.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
            ? [height, width]
            : [width, height];
        this.root.layout(size, orthogonalSize);
    }
    getNode(location, node = this.root, path = []) {
        if (location.length === 0) {
            return [path, node];
        }
        if (!(node instanceof _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode)) {
            throw new Error('Invalid location');
        }
        const [index, ...rest] = location;
        if (index < 0 || index >= node.children.length) {
            throw new Error('Invalid location');
        }
        const child = node.children[index];
        path.push(node);
        return this.getNode(rest, child, path);
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/gridview/gridviewComponent.js":
/*!***************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/gridview/gridviewComponent.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GridviewComponent: () => (/* binding */ GridviewComponent)
/* harmony export */ });
/* harmony import */ var _gridview__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gridview */ "./node_modules/dockview-core/dist/esm/gridview/gridview.js");
/* harmony import */ var _array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../array */ "./node_modules/dockview-core/dist/esm/array.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _baseComponentGridview__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./baseComponentGridview */ "./node_modules/dockview-core/dist/esm/gridview/baseComponentGridview.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");





class GridviewComponent extends _baseComponentGridview__WEBPACK_IMPORTED_MODULE_3__.BaseGrid {
    get orientation() {
        return this.gridview.orientation;
    }
    set orientation(value) {
        this.gridview.orientation = value;
    }
    get options() {
        return this._options;
    }
    get deserializer() {
        return this._deserializer;
    }
    set deserializer(value) {
        this._deserializer = value;
    }
    constructor(container, options) {
        var _a;
        super(container, {
            proportionalLayout: (_a = options.proportionalLayout) !== null && _a !== void 0 ? _a : true,
            orientation: options.orientation,
            styles: options.hideBorders
                ? { separatorBorder: 'transparent' }
                : undefined,
            disableAutoResizing: options.disableAutoResizing,
            className: options.className,
        });
        this._onDidLayoutfromJSON = new _events__WEBPACK_IMPORTED_MODULE_4__.Emitter();
        this.onDidLayoutFromJSON = this._onDidLayoutfromJSON.event;
        this._onDidRemoveGroup = new _events__WEBPACK_IMPORTED_MODULE_4__.Emitter();
        this.onDidRemoveGroup = this._onDidRemoveGroup.event;
        this._onDidAddGroup = new _events__WEBPACK_IMPORTED_MODULE_4__.Emitter();
        this.onDidAddGroup = this._onDidAddGroup.event;
        this._onDidActiveGroupChange = new _events__WEBPACK_IMPORTED_MODULE_4__.Emitter();
        this.onDidActiveGroupChange = this._onDidActiveGroupChange.event;
        this._options = options;
        this.addDisposables(this._onDidAddGroup, this._onDidRemoveGroup, this._onDidActiveGroupChange, this.onDidAdd((event) => {
            this._onDidAddGroup.fire(event);
        }), this.onDidRemove((event) => {
            this._onDidRemoveGroup.fire(event);
        }), this.onDidActiveChange((event) => {
            this._onDidActiveGroupChange.fire(event);
        }));
    }
    updateOptions(options) {
        super.updateOptions(options);
        const hasOrientationChanged = typeof options.orientation === 'string' &&
            this.gridview.orientation !== options.orientation;
        this._options = Object.assign(Object.assign({}, this.options), options);
        if (hasOrientationChanged) {
            this.gridview.orientation = options.orientation;
        }
        this.layout(this.gridview.width, this.gridview.height, true);
    }
    removePanel(panel) {
        this.removeGroup(panel);
    }
    /**
     * Serialize the current state of the layout
     *
     * @returns A JSON respresentation of the layout
     */
    toJSON() {
        var _a;
        const data = this.gridview.serialize();
        return {
            grid: data,
            activePanel: (_a = this.activeGroup) === null || _a === void 0 ? void 0 : _a.id,
        };
    }
    setVisible(panel, visible) {
        this.gridview.setViewVisible((0,_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(panel.element), visible);
    }
    setActive(panel) {
        this._groups.forEach((value, _key) => {
            value.value.setActive(panel === value.value);
        });
    }
    focus() {
        var _a;
        (_a = this.activeGroup) === null || _a === void 0 ? void 0 : _a.focus();
    }
    fromJSON(serializedGridview) {
        this.clear();
        const { grid, activePanel } = serializedGridview;
        try {
            const queue = [];
            // take note of the existing dimensions
            const width = this.width;
            const height = this.height;
            this.gridview.deserialize(grid, {
                fromJSON: (node) => {
                    const { data } = node;
                    const view = this.options.createComponent({
                        id: data.id,
                        name: data.component,
                    });
                    queue.push(() => view.init({
                        params: data.params,
                        minimumWidth: data.minimumWidth,
                        maximumWidth: data.maximumWidth,
                        minimumHeight: data.minimumHeight,
                        maximumHeight: data.maximumHeight,
                        priority: data.priority,
                        snap: !!data.snap,
                        accessor: this,
                        isVisible: node.visible,
                    }));
                    this._onDidAddGroup.fire(view);
                    this.registerPanel(view);
                    return view;
                },
            });
            this.layout(width, height, true);
            queue.forEach((f) => f());
            if (typeof activePanel === 'string') {
                const panel = this.getPanel(activePanel);
                if (panel) {
                    this.doSetGroupActive(panel);
                }
            }
        }
        catch (err) {
            /**
             * To remove a group we cannot call this.removeGroup(...) since this makes assumptions about
             * the underlying HTMLElement existing in the Gridview.
             */
            for (const group of this.groups) {
                group.dispose();
                this._groups.delete(group.id);
                this._onDidRemoveGroup.fire(group);
            }
            // fires clean-up events and clears the underlying HTML gridview.
            this.clear();
            /**
             * even though we have cleaned-up we still want to inform the caller of their error
             * and we'll do this through re-throwing the original error since afterall you would
             * expect trying to load a corrupted layout to result in an error and not silently fail...
             */
            throw err;
        }
        this._onDidLayoutfromJSON.fire();
    }
    clear() {
        const hasActiveGroup = this.activeGroup;
        const groups = Array.from(this._groups.values()); // reassign since group panels will mutate
        for (const group of groups) {
            group.disposable.dispose();
            this.doRemoveGroup(group.value, { skipActive: true });
        }
        if (hasActiveGroup) {
            this.doSetGroupActive(undefined);
        }
        this.gridview.clear();
    }
    movePanel(panel, options) {
        var _a;
        let relativeLocation;
        const removedPanel = this.gridview.remove(panel);
        const referenceGroup = (_a = this._groups.get(options.reference)) === null || _a === void 0 ? void 0 : _a.value;
        if (!referenceGroup) {
            throw new Error(`reference group ${options.reference} does not exist`);
        }
        const target = (0,_baseComponentGridview__WEBPACK_IMPORTED_MODULE_3__.toTarget)(options.direction);
        if (target === 'center') {
            throw new Error(`${target} not supported as an option`);
        }
        else {
            const location = (0,_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(referenceGroup.element);
            relativeLocation = (0,_gridview__WEBPACK_IMPORTED_MODULE_0__.getRelativeLocation)(this.gridview.orientation, location, target);
        }
        this.doAddGroup(removedPanel, relativeLocation, options.size);
    }
    addPanel(options) {
        var _a, _b, _c, _d;
        let relativeLocation = (_a = options.location) !== null && _a !== void 0 ? _a : [0];
        if ((_b = options.position) === null || _b === void 0 ? void 0 : _b.referencePanel) {
            const referenceGroup = (_c = this._groups.get(options.position.referencePanel)) === null || _c === void 0 ? void 0 : _c.value;
            if (!referenceGroup) {
                throw new Error(`reference group ${options.position.referencePanel} does not exist`);
            }
            const target = (0,_baseComponentGridview__WEBPACK_IMPORTED_MODULE_3__.toTarget)(options.position.direction);
            if (target === 'center') {
                throw new Error(`${target} not supported as an option`);
            }
            else {
                const location = (0,_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(referenceGroup.element);
                relativeLocation = (0,_gridview__WEBPACK_IMPORTED_MODULE_0__.getRelativeLocation)(this.gridview.orientation, location, target);
            }
        }
        const view = this.options.createComponent({
            id: options.id,
            name: options.component,
        });
        view.init({
            params: (_d = options.params) !== null && _d !== void 0 ? _d : {},
            minimumWidth: options.minimumWidth,
            maximumWidth: options.maximumWidth,
            minimumHeight: options.minimumHeight,
            maximumHeight: options.maximumHeight,
            priority: options.priority,
            snap: !!options.snap,
            accessor: this,
            isVisible: true,
        });
        this.registerPanel(view);
        this.doAddGroup(view, relativeLocation, options.size);
        this.doSetGroupActive(view);
        return view;
    }
    registerPanel(panel) {
        const disposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable(panel.api.onDidFocusChange((event) => {
            if (!event.isFocused) {
                return;
            }
            this._groups.forEach((groupItem) => {
                const group = groupItem.value;
                if (group !== panel) {
                    group.setActive(false);
                }
                else {
                    group.setActive(true);
                }
            });
        }));
        this._groups.set(panel.id, {
            value: panel,
            disposable,
        });
    }
    moveGroup(referenceGroup, groupId, target) {
        const sourceGroup = this.getPanel(groupId);
        if (!sourceGroup) {
            throw new Error('invalid operation');
        }
        const referenceLocation = (0,_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(referenceGroup.element);
        const targetLocation = (0,_gridview__WEBPACK_IMPORTED_MODULE_0__.getRelativeLocation)(this.gridview.orientation, referenceLocation, target);
        const [targetParentLocation, to] = (0,_array__WEBPACK_IMPORTED_MODULE_1__.tail)(targetLocation);
        const sourceLocation = (0,_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(sourceGroup.element);
        const [sourceParentLocation, from] = (0,_array__WEBPACK_IMPORTED_MODULE_1__.tail)(sourceLocation);
        if ((0,_array__WEBPACK_IMPORTED_MODULE_1__.sequenceEquals)(sourceParentLocation, targetParentLocation)) {
            // special case when 'swapping' two views within same grid location
            // if a group has one tab - we are essentially moving the 'group'
            // which is equivalent to swapping two views in this case
            this.gridview.moveView(sourceParentLocation, from, to);
            return;
        }
        // source group will become empty so delete the group
        const targetGroup = this.doRemoveGroup(sourceGroup, {
            skipActive: true,
            skipDispose: true,
        });
        // after deleting the group we need to re-evaulate the ref location
        const updatedReferenceLocation = (0,_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(referenceGroup.element);
        const location = (0,_gridview__WEBPACK_IMPORTED_MODULE_0__.getRelativeLocation)(this.gridview.orientation, updatedReferenceLocation, target);
        this.doAddGroup(targetGroup, location);
    }
    removeGroup(group) {
        super.removeGroup(group);
    }
    dispose() {
        super.dispose();
        this._onDidLayoutfromJSON.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/gridview/gridviewPanel.js":
/*!***********************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/gridview/gridviewPanel.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GridviewPanel: () => (/* binding */ GridviewPanel)
/* harmony export */ });
/* harmony import */ var _basePanelView__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./basePanelView */ "./node_modules/dockview-core/dist/esm/gridview/basePanelView.js");
/* harmony import */ var _api_gridviewPanelApi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../api/gridviewPanelApi */ "./node_modules/dockview-core/dist/esm/api/gridviewPanelApi.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");



class GridviewPanel extends _basePanelView__WEBPACK_IMPORTED_MODULE_0__.BasePanelView {
    get priority() {
        return this._priority;
    }
    get snap() {
        return this._snap;
    }
    get minimumWidth() {
        /**
         * defer to protected function to allow subclasses to override easily.
         * see https://github.com/microsoft/TypeScript/issues/338
         */
        return this.__minimumWidth();
    }
    get minimumHeight() {
        /**
         * defer to protected function to allow subclasses to override easily.
         * see https://github.com/microsoft/TypeScript/issues/338
         */
        return this.__minimumHeight();
    }
    get maximumHeight() {
        /**
         * defer to protected function to allow subclasses to override easily.
         * see https://github.com/microsoft/TypeScript/issues/338
         */
        return this.__maximumHeight();
    }
    get maximumWidth() {
        /**
         * defer to protected function to allow subclasses to override easily.
         * see https://github.com/microsoft/TypeScript/issues/338
         */
        return this.__maximumWidth();
    }
    __minimumWidth() {
        const width = typeof this._minimumWidth === 'function'
            ? this._minimumWidth()
            : this._minimumWidth;
        if (width !== this._evaluatedMinimumWidth) {
            this._evaluatedMinimumWidth = width;
            this.updateConstraints();
        }
        return width;
    }
    __maximumWidth() {
        const width = typeof this._maximumWidth === 'function'
            ? this._maximumWidth()
            : this._maximumWidth;
        if (width !== this._evaluatedMaximumWidth) {
            this._evaluatedMaximumWidth = width;
            this.updateConstraints();
        }
        return width;
    }
    __minimumHeight() {
        const height = typeof this._minimumHeight === 'function'
            ? this._minimumHeight()
            : this._minimumHeight;
        if (height !== this._evaluatedMinimumHeight) {
            this._evaluatedMinimumHeight = height;
            this.updateConstraints();
        }
        return height;
    }
    __maximumHeight() {
        const height = typeof this._maximumHeight === 'function'
            ? this._maximumHeight()
            : this._maximumHeight;
        if (height !== this._evaluatedMaximumHeight) {
            this._evaluatedMaximumHeight = height;
            this.updateConstraints();
        }
        return height;
    }
    get isActive() {
        return this.api.isActive;
    }
    get isVisible() {
        return this.api.isVisible;
    }
    constructor(id, component, options, api) {
        super(id, component, api !== null && api !== void 0 ? api : new _api_gridviewPanelApi__WEBPACK_IMPORTED_MODULE_1__.GridviewPanelApiImpl(id, component));
        this._evaluatedMinimumWidth = 0;
        this._evaluatedMaximumWidth = Number.MAX_SAFE_INTEGER;
        this._evaluatedMinimumHeight = 0;
        this._evaluatedMaximumHeight = Number.MAX_SAFE_INTEGER;
        this._minimumWidth = 0;
        this._minimumHeight = 0;
        this._maximumWidth = Number.MAX_SAFE_INTEGER;
        this._maximumHeight = Number.MAX_SAFE_INTEGER;
        this._snap = false;
        this._onDidChange = new _events__WEBPACK_IMPORTED_MODULE_2__.Emitter();
        this.onDidChange = this._onDidChange.event;
        if (typeof (options === null || options === void 0 ? void 0 : options.minimumWidth) === 'number') {
            this._minimumWidth = options.minimumWidth;
        }
        if (typeof (options === null || options === void 0 ? void 0 : options.maximumWidth) === 'number') {
            this._maximumWidth = options.maximumWidth;
        }
        if (typeof (options === null || options === void 0 ? void 0 : options.minimumHeight) === 'number') {
            this._minimumHeight = options.minimumHeight;
        }
        if (typeof (options === null || options === void 0 ? void 0 : options.maximumHeight) === 'number') {
            this._maximumHeight = options.maximumHeight;
        }
        this.api.initialize(this); // TODO: required to by-pass 'super before this' requirement
        this.addDisposables(this.api.onWillVisibilityChange((event) => {
            const { isVisible } = event;
            const { accessor } = this._params;
            accessor.setVisible(this, isVisible);
        }), this.api.onActiveChange(() => {
            const { accessor } = this._params;
            accessor.doSetGroupActive(this);
        }), this.api.onDidConstraintsChangeInternal((event) => {
            if (typeof event.minimumWidth === 'number' ||
                typeof event.minimumWidth === 'function') {
                this._minimumWidth = event.minimumWidth;
            }
            if (typeof event.minimumHeight === 'number' ||
                typeof event.minimumHeight === 'function') {
                this._minimumHeight = event.minimumHeight;
            }
            if (typeof event.maximumWidth === 'number' ||
                typeof event.maximumWidth === 'function') {
                this._maximumWidth = event.maximumWidth;
            }
            if (typeof event.maximumHeight === 'number' ||
                typeof event.maximumHeight === 'function') {
                this._maximumHeight = event.maximumHeight;
            }
        }), this.api.onDidSizeChange((event) => {
            this._onDidChange.fire({
                height: event.height,
                width: event.width,
            });
        }), this._onDidChange);
    }
    setVisible(isVisible) {
        this.api._onDidVisibilityChange.fire({ isVisible });
    }
    setActive(isActive) {
        this.api._onDidActiveChange.fire({ isActive });
    }
    init(parameters) {
        if (parameters.maximumHeight) {
            this._maximumHeight = parameters.maximumHeight;
        }
        if (parameters.minimumHeight) {
            this._minimumHeight = parameters.minimumHeight;
        }
        if (parameters.maximumWidth) {
            this._maximumWidth = parameters.maximumWidth;
        }
        if (parameters.minimumWidth) {
            this._minimumWidth = parameters.minimumWidth;
        }
        this._priority = parameters.priority;
        this._snap = !!parameters.snap;
        super.init(parameters);
        if (typeof parameters.isVisible === 'boolean') {
            this.setVisible(parameters.isVisible);
        }
    }
    updateConstraints() {
        this.api._onDidConstraintsChange.fire({
            minimumWidth: this._evaluatedMinimumWidth,
            maximumWidth: this._evaluatedMaximumWidth,
            minimumHeight: this._evaluatedMinimumHeight,
            maximumHeight: this._evaluatedMaximumHeight,
        });
    }
    toJSON() {
        const state = super.toJSON();
        const maximum = (value) => value === Number.MAX_SAFE_INTEGER ? undefined : value;
        const minimum = (value) => (value <= 0 ? undefined : value);
        return Object.assign(Object.assign({}, state), { minimumHeight: minimum(this.minimumHeight), maximumHeight: maximum(this.maximumHeight), minimumWidth: minimum(this.minimumWidth), maximumWidth: maximum(this.maximumWidth), snap: this.snap, priority: this.priority });
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/gridview/leafNode.js":
/*!******************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/gridview/leafNode.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LeafNode: () => (/* binding */ LeafNode)
/* harmony export */ });
/* harmony import */ var _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../splitview/splitview */ "./node_modules/dockview-core/dist/esm/splitview/splitview.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/*---------------------------------------------------------------------------------------------
 * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:
 * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid
 *--------------------------------------------------------------------------------------------*/


class LeafNode {
    get minimumWidth() {
        return this.view.minimumWidth;
    }
    get maximumWidth() {
        return this.view.maximumWidth;
    }
    get minimumHeight() {
        return this.view.minimumHeight;
    }
    get maximumHeight() {
        return this.view.maximumHeight;
    }
    get priority() {
        return this.view.priority;
    }
    get snap() {
        return this.view.snap;
    }
    get minimumSize() {
        return this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
            ? this.minimumHeight
            : this.minimumWidth;
    }
    get maximumSize() {
        return this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
            ? this.maximumHeight
            : this.maximumWidth;
    }
    get minimumOrthogonalSize() {
        return this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
            ? this.minimumWidth
            : this.minimumHeight;
    }
    get maximumOrthogonalSize() {
        return this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
            ? this.maximumWidth
            : this.maximumHeight;
    }
    get orthogonalSize() {
        return this._orthogonalSize;
    }
    get size() {
        return this._size;
    }
    get element() {
        return this.view.element;
    }
    get width() {
        return this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
            ? this.orthogonalSize
            : this.size;
    }
    get height() {
        return this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
            ? this.size
            : this.orthogonalSize;
    }
    constructor(view, orientation, orthogonalSize, size = 0) {
        this.view = view;
        this.orientation = orientation;
        this._onDidChange = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidChange = this._onDidChange.event;
        this._orthogonalSize = orthogonalSize;
        this._size = size;
        this._disposable = this.view.onDidChange((event) => {
            if (event) {
                this._onDidChange.fire({
                    size: this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.VERTICAL
                        ? event.width
                        : event.height,
                    orthogonalSize: this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.VERTICAL
                        ? event.height
                        : event.width,
                });
            }
            else {
                this._onDidChange.fire({});
            }
        });
    }
    setVisible(visible) {
        if (this.view.setVisible) {
            this.view.setVisible(visible);
        }
    }
    layout(size, orthogonalSize) {
        this._size = size;
        this._orthogonalSize = orthogonalSize;
        this.view.layout(this.width, this.height);
    }
    dispose() {
        this._onDidChange.dispose();
        this._disposable.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/gridview/options.js":
/*!*****************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/gridview/options.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PROPERTY_KEYS_GRIDVIEW: () => (/* binding */ PROPERTY_KEYS_GRIDVIEW)
/* harmony export */ });
const PROPERTY_KEYS_GRIDVIEW = (() => {
    /**
     * by readong the keys from an empty value object TypeScript will error
     * when we add or remove new properties to `DockviewOptions`
     */
    const properties = {
        disableAutoResizing: undefined,
        proportionalLayout: undefined,
        orientation: undefined,
        hideBorders: undefined,
        className: undefined,
    };
    return Object.keys(properties);
})();


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/index.js":
/*!******************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseGrid: () => (/* reexport safe */ _gridview_baseComponentGridview__WEBPACK_IMPORTED_MODULE_9__.BaseGrid),
/* harmony export */   ContentContainer: () => (/* reexport safe */ _dockview_components_panel_content__WEBPACK_IMPORTED_MODULE_11__.ContentContainer),
/* harmony export */   DefaultDockviewDeserialzier: () => (/* reexport safe */ _dockview_deserializer__WEBPACK_IMPORTED_MODULE_19__.DefaultDockviewDeserialzier),
/* harmony export */   DefaultTab: () => (/* reexport safe */ _dockview_components_tab_defaultTab__WEBPACK_IMPORTED_MODULE_18__.DefaultTab),
/* harmony export */   DockviewApi: () => (/* reexport safe */ _api_component_api__WEBPACK_IMPORTED_MODULE_29__.DockviewApi),
/* harmony export */   DockviewComponent: () => (/* reexport safe */ _dockview_dockviewComponent__WEBPACK_IMPORTED_MODULE_20__.DockviewComponent),
/* harmony export */   DockviewCompositeDisposable: () => (/* reexport safe */ _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable),
/* harmony export */   DockviewDidDropEvent: () => (/* reexport safe */ _dockview_dockviewGroupPanelModel__WEBPACK_IMPORTED_MODULE_13__.DockviewDidDropEvent),
/* harmony export */   DockviewDisposable: () => (/* reexport safe */ _lifecycle__WEBPACK_IMPORTED_MODULE_2__.Disposable),
/* harmony export */   DockviewEmitter: () => (/* reexport safe */ _events__WEBPACK_IMPORTED_MODULE_1__.Emitter),
/* harmony export */   DockviewEvent: () => (/* reexport safe */ _events__WEBPACK_IMPORTED_MODULE_1__.Event),
/* harmony export */   DockviewGroupPanel: () => (/* reexport safe */ _dockview_dockviewGroupPanel__WEBPACK_IMPORTED_MODULE_15__.DockviewGroupPanel),
/* harmony export */   DockviewGroupPanelModel: () => (/* reexport safe */ _dockview_dockviewGroupPanelModel__WEBPACK_IMPORTED_MODULE_13__.DockviewGroupPanelModel),
/* harmony export */   DockviewMutableDisposable: () => (/* reexport safe */ _lifecycle__WEBPACK_IMPORTED_MODULE_2__.MutableDisposable),
/* harmony export */   DockviewPanel: () => (/* reexport safe */ _dockview_dockviewPanel__WEBPACK_IMPORTED_MODULE_17__.DockviewPanel),
/* harmony export */   DockviewUnhandledDragOverEvent: () => (/* reexport safe */ _dockview_options__WEBPACK_IMPORTED_MODULE_16__.DockviewUnhandledDragOverEvent),
/* harmony export */   DockviewWillDropEvent: () => (/* reexport safe */ _dockview_dockviewGroupPanelModel__WEBPACK_IMPORTED_MODULE_13__.DockviewWillDropEvent),
/* harmony export */   DraggablePaneviewPanel: () => (/* reexport safe */ _paneview_draggablePaneviewPanel__WEBPACK_IMPORTED_MODULE_10__.DraggablePaneviewPanel),
/* harmony export */   Gridview: () => (/* reexport safe */ _gridview_gridview__WEBPACK_IMPORTED_MODULE_7__.Gridview),
/* harmony export */   GridviewApi: () => (/* reexport safe */ _api_component_api__WEBPACK_IMPORTED_MODULE_29__.GridviewApi),
/* harmony export */   GridviewComponent: () => (/* reexport safe */ _gridview_gridviewComponent__WEBPACK_IMPORTED_MODULE_21__.GridviewComponent),
/* harmony export */   GridviewPanel: () => (/* reexport safe */ _gridview_gridviewPanel__WEBPACK_IMPORTED_MODULE_25__.GridviewPanel),
/* harmony export */   LayoutPriority: () => (/* reexport safe */ _splitview_splitview__WEBPACK_IMPORTED_MODULE_4__.LayoutPriority),
/* harmony export */   Orientation: () => (/* reexport safe */ _splitview_splitview__WEBPACK_IMPORTED_MODULE_4__.Orientation),
/* harmony export */   PROPERTY_KEYS_DOCKVIEW: () => (/* reexport safe */ _dockview_options__WEBPACK_IMPORTED_MODULE_16__.PROPERTY_KEYS_DOCKVIEW),
/* harmony export */   PROPERTY_KEYS_GRIDVIEW: () => (/* reexport safe */ _gridview_options__WEBPACK_IMPORTED_MODULE_8__.PROPERTY_KEYS_GRIDVIEW),
/* harmony export */   PROPERTY_KEYS_PANEVIEW: () => (/* reexport safe */ _paneview_options__WEBPACK_IMPORTED_MODULE_24__.PROPERTY_KEYS_PANEVIEW),
/* harmony export */   PROPERTY_KEYS_SPLITVIEW: () => (/* reexport safe */ _splitview_options__WEBPACK_IMPORTED_MODULE_5__.PROPERTY_KEYS_SPLITVIEW),
/* harmony export */   PaneFramework: () => (/* reexport safe */ _paneview_paneviewComponent__WEBPACK_IMPORTED_MODULE_23__.PaneFramework),
/* harmony export */   PaneTransfer: () => (/* reexport safe */ _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_0__.PaneTransfer),
/* harmony export */   PanelTransfer: () => (/* reexport safe */ _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_0__.PanelTransfer),
/* harmony export */   Paneview: () => (/* reexport safe */ _paneview_paneview__WEBPACK_IMPORTED_MODULE_6__.Paneview),
/* harmony export */   PaneviewApi: () => (/* reexport safe */ _api_component_api__WEBPACK_IMPORTED_MODULE_29__.PaneviewApi),
/* harmony export */   PaneviewComponent: () => (/* reexport safe */ _paneview_paneviewComponent__WEBPACK_IMPORTED_MODULE_23__.PaneviewComponent),
/* harmony export */   PaneviewPanel: () => (/* reexport safe */ _paneview_paneviewPanel__WEBPACK_IMPORTED_MODULE_27__.PaneviewPanel),
/* harmony export */   PaneviewUnhandledDragOverEvent: () => (/* reexport safe */ _paneview_options__WEBPACK_IMPORTED_MODULE_24__.PaneviewUnhandledDragOverEvent),
/* harmony export */   SashState: () => (/* reexport safe */ _splitview_splitview__WEBPACK_IMPORTED_MODULE_4__.SashState),
/* harmony export */   Sizing: () => (/* reexport safe */ _splitview_splitview__WEBPACK_IMPORTED_MODULE_4__.Sizing),
/* harmony export */   Splitview: () => (/* reexport safe */ _splitview_splitview__WEBPACK_IMPORTED_MODULE_4__.Splitview),
/* harmony export */   SplitviewApi: () => (/* reexport safe */ _api_component_api__WEBPACK_IMPORTED_MODULE_29__.SplitviewApi),
/* harmony export */   SplitviewComponent: () => (/* reexport safe */ _splitview_splitviewComponent__WEBPACK_IMPORTED_MODULE_22__.SplitviewComponent),
/* harmony export */   SplitviewPanel: () => (/* reexport safe */ _splitview_splitviewPanel__WEBPACK_IMPORTED_MODULE_26__.SplitviewPanel),
/* harmony export */   Tab: () => (/* reexport safe */ _dockview_components_tab_tab__WEBPACK_IMPORTED_MODULE_12__.Tab),
/* harmony export */   WillShowOverlayLocationEvent: () => (/* reexport safe */ _dockview_dockviewGroupPanelModel__WEBPACK_IMPORTED_MODULE_13__.WillShowOverlayLocationEvent),
/* harmony export */   createDockview: () => (/* reexport safe */ _api_entryPoints__WEBPACK_IMPORTED_MODULE_30__.createDockview),
/* harmony export */   createGridview: () => (/* reexport safe */ _api_entryPoints__WEBPACK_IMPORTED_MODULE_30__.createGridview),
/* harmony export */   createPaneview: () => (/* reexport safe */ _api_entryPoints__WEBPACK_IMPORTED_MODULE_30__.createPaneview),
/* harmony export */   createSplitview: () => (/* reexport safe */ _api_entryPoints__WEBPACK_IMPORTED_MODULE_30__.createSplitview),
/* harmony export */   directionToPosition: () => (/* reexport safe */ _dnd_droptarget__WEBPACK_IMPORTED_MODULE_28__.directionToPosition),
/* harmony export */   getDirectionOrientation: () => (/* reexport safe */ _gridview_gridview__WEBPACK_IMPORTED_MODULE_7__.getDirectionOrientation),
/* harmony export */   getGridLocation: () => (/* reexport safe */ _gridview_gridview__WEBPACK_IMPORTED_MODULE_7__.getGridLocation),
/* harmony export */   getLocationOrientation: () => (/* reexport safe */ _gridview_gridview__WEBPACK_IMPORTED_MODULE_7__.getLocationOrientation),
/* harmony export */   getPaneData: () => (/* reexport safe */ _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_0__.getPaneData),
/* harmony export */   getPanelData: () => (/* reexport safe */ _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_0__.getPanelData),
/* harmony export */   getRelativeLocation: () => (/* reexport safe */ _gridview_gridview__WEBPACK_IMPORTED_MODULE_7__.getRelativeLocation),
/* harmony export */   indexInParent: () => (/* reexport safe */ _gridview_gridview__WEBPACK_IMPORTED_MODULE_7__.indexInParent),
/* harmony export */   isGridBranchNode: () => (/* reexport safe */ _gridview_gridview__WEBPACK_IMPORTED_MODULE_7__.isGridBranchNode),
/* harmony export */   isGroupOptionsWithGroup: () => (/* reexport safe */ _dockview_options__WEBPACK_IMPORTED_MODULE_16__.isGroupOptionsWithGroup),
/* harmony export */   isGroupOptionsWithPanel: () => (/* reexport safe */ _dockview_options__WEBPACK_IMPORTED_MODULE_16__.isGroupOptionsWithPanel),
/* harmony export */   isPanelOptionsWithGroup: () => (/* reexport safe */ _dockview_options__WEBPACK_IMPORTED_MODULE_16__.isPanelOptionsWithGroup),
/* harmony export */   isPanelOptionsWithPanel: () => (/* reexport safe */ _dockview_options__WEBPACK_IMPORTED_MODULE_16__.isPanelOptionsWithPanel),
/* harmony export */   orthogonal: () => (/* reexport safe */ _gridview_gridview__WEBPACK_IMPORTED_MODULE_7__.orthogonal),
/* harmony export */   positionToDirection: () => (/* reexport safe */ _dnd_droptarget__WEBPACK_IMPORTED_MODULE_28__.positionToDirection),
/* harmony export */   toTarget: () => (/* reexport safe */ _gridview_baseComponentGridview__WEBPACK_IMPORTED_MODULE_9__.toTarget)
/* harmony export */ });
/* harmony import */ var _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dnd/dataTransfer */ "./node_modules/dockview-core/dist/esm/dnd/dataTransfer.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _panel_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./panel/types */ "./node_modules/dockview-core/dist/esm/panel/types.js");
/* harmony import */ var _splitview_splitview__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./splitview/splitview */ "./node_modules/dockview-core/dist/esm/splitview/splitview.js");
/* harmony import */ var _splitview_options__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./splitview/options */ "./node_modules/dockview-core/dist/esm/splitview/options.js");
/* harmony import */ var _paneview_paneview__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./paneview/paneview */ "./node_modules/dockview-core/dist/esm/paneview/paneview.js");
/* harmony import */ var _gridview_gridview__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./gridview/gridview */ "./node_modules/dockview-core/dist/esm/gridview/gridview.js");
/* harmony import */ var _gridview_options__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./gridview/options */ "./node_modules/dockview-core/dist/esm/gridview/options.js");
/* harmony import */ var _gridview_baseComponentGridview__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./gridview/baseComponentGridview */ "./node_modules/dockview-core/dist/esm/gridview/baseComponentGridview.js");
/* harmony import */ var _paneview_draggablePaneviewPanel__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./paneview/draggablePaneviewPanel */ "./node_modules/dockview-core/dist/esm/paneview/draggablePaneviewPanel.js");
/* harmony import */ var _dockview_components_panel_content__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./dockview/components/panel/content */ "./node_modules/dockview-core/dist/esm/dockview/components/panel/content.js");
/* harmony import */ var _dockview_components_tab_tab__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./dockview/components/tab/tab */ "./node_modules/dockview-core/dist/esm/dockview/components/tab/tab.js");
/* harmony import */ var _dockview_dockviewGroupPanelModel__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./dockview/dockviewGroupPanelModel */ "./node_modules/dockview-core/dist/esm/dockview/dockviewGroupPanelModel.js");
/* harmony import */ var _dockview_types__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./dockview/types */ "./node_modules/dockview-core/dist/esm/dockview/types.js");
/* harmony import */ var _dockview_dockviewGroupPanel__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./dockview/dockviewGroupPanel */ "./node_modules/dockview-core/dist/esm/dockview/dockviewGroupPanel.js");
/* harmony import */ var _dockview_options__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./dockview/options */ "./node_modules/dockview-core/dist/esm/dockview/options.js");
/* harmony import */ var _dockview_dockviewPanel__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./dockview/dockviewPanel */ "./node_modules/dockview-core/dist/esm/dockview/dockviewPanel.js");
/* harmony import */ var _dockview_components_tab_defaultTab__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./dockview/components/tab/defaultTab */ "./node_modules/dockview-core/dist/esm/dockview/components/tab/defaultTab.js");
/* harmony import */ var _dockview_deserializer__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./dockview/deserializer */ "./node_modules/dockview-core/dist/esm/dockview/deserializer.js");
/* harmony import */ var _dockview_dockviewComponent__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./dockview/dockviewComponent */ "./node_modules/dockview-core/dist/esm/dockview/dockviewComponent.js");
/* harmony import */ var _gridview_gridviewComponent__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./gridview/gridviewComponent */ "./node_modules/dockview-core/dist/esm/gridview/gridviewComponent.js");
/* harmony import */ var _splitview_splitviewComponent__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./splitview/splitviewComponent */ "./node_modules/dockview-core/dist/esm/splitview/splitviewComponent.js");
/* harmony import */ var _paneview_paneviewComponent__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./paneview/paneviewComponent */ "./node_modules/dockview-core/dist/esm/paneview/paneviewComponent.js");
/* harmony import */ var _paneview_options__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./paneview/options */ "./node_modules/dockview-core/dist/esm/paneview/options.js");
/* harmony import */ var _gridview_gridviewPanel__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./gridview/gridviewPanel */ "./node_modules/dockview-core/dist/esm/gridview/gridviewPanel.js");
/* harmony import */ var _splitview_splitviewPanel__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./splitview/splitviewPanel */ "./node_modules/dockview-core/dist/esm/splitview/splitviewPanel.js");
/* harmony import */ var _paneview_paneviewPanel__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./paneview/paneviewPanel */ "./node_modules/dockview-core/dist/esm/paneview/paneviewPanel.js");
/* harmony import */ var _dnd_droptarget__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./dnd/droptarget */ "./node_modules/dockview-core/dist/esm/dnd/droptarget.js");
/* harmony import */ var _api_component_api__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./api/component.api */ "./node_modules/dockview-core/dist/esm/api/component.api.js");
/* harmony import */ var _api_entryPoints__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./api/entryPoints */ "./node_modules/dockview-core/dist/esm/api/entryPoints.js");

/**
 * Events, Emitters and Disposables are very common concepts that many codebases will contain, however we need
 * to export them for dockview framework packages to use.
 * To be a good citizen these are exported with a `Dockview` prefix to prevent accidental use by others.
 */

































/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/lifecycle.js":
/*!**********************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/lifecycle.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CompositeDisposable: () => (/* binding */ CompositeDisposable),
/* harmony export */   Disposable: () => (/* binding */ Disposable),
/* harmony export */   MutableDisposable: () => (/* binding */ MutableDisposable)
/* harmony export */ });
var Disposable;
(function (Disposable) {
    Disposable.NONE = {
        dispose: () => {
            // noop
        },
    };
    function from(func) {
        return {
            dispose: () => {
                func();
            },
        };
    }
    Disposable.from = from;
})(Disposable || (Disposable = {}));
class CompositeDisposable {
    get isDisposed() {
        return this._isDisposed;
    }
    constructor(...args) {
        this._isDisposed = false;
        this._disposables = args;
    }
    addDisposables(...args) {
        args.forEach((arg) => this._disposables.push(arg));
    }
    dispose() {
        if (this._isDisposed) {
            return;
        }
        this._isDisposed = true;
        this._disposables.forEach((arg) => arg.dispose());
        this._disposables = [];
    }
}
class MutableDisposable {
    constructor() {
        this._disposable = Disposable.NONE;
    }
    set value(disposable) {
        if (this._disposable) {
            this._disposable.dispose();
        }
        this._disposable = disposable;
    }
    dispose() {
        if (this._disposable) {
            this._disposable.dispose();
            this._disposable = Disposable.NONE;
        }
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/math.js":
/*!*****************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/math.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   clamp: () => (/* binding */ clamp),
/* harmony export */   range: () => (/* binding */ range),
/* harmony export */   sequentialNumberGenerator: () => (/* binding */ sequentialNumberGenerator)
/* harmony export */ });
const clamp = (value, min, max) => {
    if (min > max) {
        /**
         * caveat: an error should be thrown here if this was a proper `clamp` function but we need to handle
         * cases where `min` > `max` and in those cases return `min`.
         */
        return min;
    }
    return Math.min(max, Math.max(value, min));
};
const sequentialNumberGenerator = () => {
    let value = 1;
    return { next: () => (value++).toString() };
};
const range = (from, to) => {
    const result = [];
    if (typeof to !== 'number') {
        to = from;
        from = 0;
    }
    if (from <= to) {
        for (let i = from; i < to; i++) {
            result.push(i);
        }
    }
    else {
        for (let i = from; i > to; i--) {
            result.push(i);
        }
    }
    return result;
};


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/overlay/overlay.js":
/*!****************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/overlay/overlay.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Overlay: () => (/* binding */ Overlay)
/* harmony export */ });
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math */ "./node_modules/dockview-core/dist/esm/math.js");




class AriaLevelTracker {
    constructor() {
        this._orderedList = [];
    }
    push(element) {
        this._orderedList = [
            ...this._orderedList.filter((item) => item !== element),
            element,
        ];
        this.update();
    }
    destroy(element) {
        this._orderedList = this._orderedList.filter((item) => item !== element);
        this.update();
    }
    update() {
        for (let i = 0; i < this._orderedList.length; i++) {
            this._orderedList[i].setAttribute('aria-level', `${i}`);
            this._orderedList[i].style.zIndex = `calc(var(--dv-overlay-z-index, 999) + ${i * 2})`;
        }
    }
}
const arialLevelTracker = new AriaLevelTracker();
class Overlay extends _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable {
    set minimumInViewportWidth(value) {
        this.options.minimumInViewportWidth = value;
    }
    set minimumInViewportHeight(value) {
        this.options.minimumInViewportHeight = value;
    }
    get element() {
        return this._element;
    }
    get isVisible() {
        return this._isVisible;
    }
    constructor(options) {
        super();
        this.options = options;
        this._element = document.createElement('div');
        this._onDidChange = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidChange = this._onDidChange.event;
        this._onDidChangeEnd = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidChangeEnd = this._onDidChangeEnd.event;
        this.addDisposables(this._onDidChange, this._onDidChangeEnd);
        this._element.className = 'dv-resize-container';
        this._isVisible = true;
        this.setupResize('top');
        this.setupResize('bottom');
        this.setupResize('left');
        this.setupResize('right');
        this.setupResize('topleft');
        this.setupResize('topright');
        this.setupResize('bottomleft');
        this.setupResize('bottomright');
        this._element.appendChild(this.options.content);
        this.options.container.appendChild(this._element);
        // if input bad resize within acceptable boundaries
        this.setBounds(Object.assign(Object.assign(Object.assign(Object.assign({ height: this.options.height, width: this.options.width }, ('top' in this.options && { top: this.options.top })), ('bottom' in this.options && { bottom: this.options.bottom })), ('left' in this.options && { left: this.options.left })), ('right' in this.options && { right: this.options.right })));
        arialLevelTracker.push(this._element);
    }
    setVisible(isVisible) {
        if (isVisible === this.isVisible) {
            return;
        }
        this._isVisible = isVisible;
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(this.element, 'dv-hidden', !this.isVisible);
    }
    bringToFront() {
        arialLevelTracker.push(this._element);
    }
    setBounds(bounds = {}) {
        if (typeof bounds.height === 'number') {
            this._element.style.height = `${bounds.height}px`;
        }
        if (typeof bounds.width === 'number') {
            this._element.style.width = `${bounds.width}px`;
        }
        if ('top' in bounds && typeof bounds.top === 'number') {
            this._element.style.top = `${bounds.top}px`;
            this._element.style.bottom = 'auto';
            this.verticalAlignment = 'top';
        }
        if ('bottom' in bounds && typeof bounds.bottom === 'number') {
            this._element.style.bottom = `${bounds.bottom}px`;
            this._element.style.top = 'auto';
            this.verticalAlignment = 'bottom';
        }
        if ('left' in bounds && typeof bounds.left === 'number') {
            this._element.style.left = `${bounds.left}px`;
            this._element.style.right = 'auto';
            this.horiziontalAlignment = 'left';
        }
        if ('right' in bounds && typeof bounds.right === 'number') {
            this._element.style.right = `${bounds.right}px`;
            this._element.style.left = 'auto';
            this.horiziontalAlignment = 'right';
        }
        const containerRect = this.options.container.getBoundingClientRect();
        const overlayRect = this._element.getBoundingClientRect();
        // region: ensure bounds within allowable limits
        // a minimum width of minimumViewportWidth must be inside the viewport
        const xOffset = Math.max(0, this.getMinimumWidth(overlayRect.width));
        // a minimum height of minimumViewportHeight must be inside the viewport
        const yOffset = Math.max(0, this.getMinimumHeight(overlayRect.height));
        if (this.verticalAlignment === 'top') {
            const top = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(overlayRect.top - containerRect.top, -yOffset, Math.max(0, containerRect.height - overlayRect.height + yOffset));
            this._element.style.top = `${top}px`;
            this._element.style.bottom = 'auto';
        }
        if (this.verticalAlignment === 'bottom') {
            const bottom = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(containerRect.bottom - overlayRect.bottom, -yOffset, Math.max(0, containerRect.height - overlayRect.height + yOffset));
            this._element.style.bottom = `${bottom}px`;
            this._element.style.top = 'auto';
        }
        if (this.horiziontalAlignment === 'left') {
            const left = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(overlayRect.left - containerRect.left, -xOffset, Math.max(0, containerRect.width - overlayRect.width + xOffset));
            this._element.style.left = `${left}px`;
            this._element.style.right = 'auto';
        }
        if (this.horiziontalAlignment === 'right') {
            const right = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(containerRect.right - overlayRect.right, -xOffset, Math.max(0, containerRect.width - overlayRect.width + xOffset));
            this._element.style.right = `${right}px`;
            this._element.style.left = 'auto';
        }
        this._onDidChange.fire();
    }
    toJSON() {
        const container = this.options.container.getBoundingClientRect();
        const element = this._element.getBoundingClientRect();
        const result = {};
        if (this.verticalAlignment === 'top') {
            result.top = parseFloat(this._element.style.top);
        }
        else if (this.verticalAlignment === 'bottom') {
            result.bottom = parseFloat(this._element.style.bottom);
        }
        else {
            result.top = element.top - container.top;
        }
        if (this.horiziontalAlignment === 'left') {
            result.left = parseFloat(this._element.style.left);
        }
        else if (this.horiziontalAlignment === 'right') {
            result.right = parseFloat(this._element.style.right);
        }
        else {
            result.left = element.left - container.left;
        }
        result.width = element.width;
        result.height = element.height;
        return result;
    }
    setupDrag(dragTarget, options = { inDragMode: false }) {
        const move = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.MutableDisposable();
        const track = () => {
            let offset = null;
            const iframes = (0,_dom__WEBPACK_IMPORTED_MODULE_0__.disableIframePointEvents)();
            move.value = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable({
                dispose: () => {
                    iframes.release();
                },
            }, (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableWindowListener)(window, 'pointermove', (e) => {
                const containerRect = this.options.container.getBoundingClientRect();
                const x = e.clientX - containerRect.left;
                const y = e.clientY - containerRect.top;
                (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(this._element, 'dv-resize-container-dragging', true);
                const overlayRect = this._element.getBoundingClientRect();
                if (offset === null) {
                    offset = {
                        x: e.clientX - overlayRect.left,
                        y: e.clientY - overlayRect.top,
                    };
                }
                const xOffset = Math.max(0, this.getMinimumWidth(overlayRect.width));
                const yOffset = Math.max(0, this.getMinimumHeight(overlayRect.height));
                const top = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(y - offset.y, -yOffset, Math.max(0, containerRect.height - overlayRect.height + yOffset));
                const bottom = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(offset.y -
                    y +
                    containerRect.height -
                    overlayRect.height, -yOffset, Math.max(0, containerRect.height - overlayRect.height + yOffset));
                const left = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(x - offset.x, -xOffset, Math.max(0, containerRect.width - overlayRect.width + xOffset));
                const right = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(offset.x - x + containerRect.width - overlayRect.width, -xOffset, Math.max(0, containerRect.width - overlayRect.width + xOffset));
                const bounds = {};
                // Anchor to top or to bottom depending on which one is closer
                if (top <= bottom) {
                    bounds.top = top;
                }
                else {
                    bounds.bottom = bottom;
                }
                // Anchor to left or to right depending on which one is closer
                if (left <= right) {
                    bounds.left = left;
                }
                else {
                    bounds.right = right;
                }
                this.setBounds(bounds);
            }), (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableWindowListener)(window, 'pointerup', () => {
                (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(this._element, 'dv-resize-container-dragging', false);
                move.dispose();
                this._onDidChangeEnd.fire();
            }));
        };
        this.addDisposables(move, (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(dragTarget, 'pointerdown', (event) => {
            if (event.defaultPrevented) {
                event.preventDefault();
                return;
            }
            // if somebody has marked this event then treat as a defaultPrevented
            // without actually calling event.preventDefault()
            if ((0,_dom__WEBPACK_IMPORTED_MODULE_0__.quasiDefaultPrevented)(event)) {
                return;
            }
            track();
        }), (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(this.options.content, 'pointerdown', (event) => {
            if (event.defaultPrevented) {
                return;
            }
            // if somebody has marked this event then treat as a defaultPrevented
            // without actually calling event.preventDefault()
            if ((0,_dom__WEBPACK_IMPORTED_MODULE_0__.quasiDefaultPrevented)(event)) {
                return;
            }
            if (event.shiftKey) {
                track();
            }
        }), (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(this.options.content, 'pointerdown', () => {
            arialLevelTracker.push(this._element);
        }, true));
        if (options.inDragMode) {
            track();
        }
    }
    setupResize(direction) {
        const resizeHandleElement = document.createElement('div');
        resizeHandleElement.className = `dv-resize-handle-${direction}`;
        this._element.appendChild(resizeHandleElement);
        const move = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.MutableDisposable();
        this.addDisposables(move, (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(resizeHandleElement, 'pointerdown', (e) => {
            e.preventDefault();
            let startPosition = null;
            const iframes = (0,_dom__WEBPACK_IMPORTED_MODULE_0__.disableIframePointEvents)();
            move.value = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable((0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableWindowListener)(window, 'pointermove', (e) => {
                const containerRect = this.options.container.getBoundingClientRect();
                const overlayRect = this._element.getBoundingClientRect();
                const y = e.clientY - containerRect.top;
                const x = e.clientX - containerRect.left;
                if (startPosition === null) {
                    // record the initial dimensions since as all subsequence moves are relative to this
                    startPosition = {
                        originalY: y,
                        originalHeight: overlayRect.height,
                        originalX: x,
                        originalWidth: overlayRect.width,
                    };
                }
                let top = undefined;
                let bottom = undefined;
                let height = undefined;
                let left = undefined;
                let right = undefined;
                let width = undefined;
                const moveTop = () => {
                    top = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(y, -Number.MAX_VALUE, startPosition.originalY +
                        startPosition.originalHeight >
                        containerRect.height
                        ? this.getMinimumHeight(containerRect.height)
                        : Math.max(0, startPosition.originalY +
                            startPosition.originalHeight -
                            Overlay.MINIMUM_HEIGHT));
                    height =
                        startPosition.originalY +
                            startPosition.originalHeight -
                            top;
                    bottom = containerRect.height - top - height;
                };
                const moveBottom = () => {
                    top =
                        startPosition.originalY -
                            startPosition.originalHeight;
                    height = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(y - top, top < 0 &&
                        typeof this.options
                            .minimumInViewportHeight === 'number'
                        ? -top +
                            this.options.minimumInViewportHeight
                        : Overlay.MINIMUM_HEIGHT, Number.MAX_VALUE);
                    bottom = containerRect.height - top - height;
                };
                const moveLeft = () => {
                    left = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(x, -Number.MAX_VALUE, startPosition.originalX +
                        startPosition.originalWidth >
                        containerRect.width
                        ? this.getMinimumWidth(containerRect.width)
                        : Math.max(0, startPosition.originalX +
                            startPosition.originalWidth -
                            Overlay.MINIMUM_WIDTH));
                    width =
                        startPosition.originalX +
                            startPosition.originalWidth -
                            left;
                    right = containerRect.width - left - width;
                };
                const moveRight = () => {
                    left =
                        startPosition.originalX -
                            startPosition.originalWidth;
                    width = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(x - left, left < 0 &&
                        typeof this.options
                            .minimumInViewportWidth === 'number'
                        ? -left +
                            this.options.minimumInViewportWidth
                        : Overlay.MINIMUM_WIDTH, Number.MAX_VALUE);
                    right = containerRect.width - left - width;
                };
                switch (direction) {
                    case 'top':
                        moveTop();
                        break;
                    case 'bottom':
                        moveBottom();
                        break;
                    case 'left':
                        moveLeft();
                        break;
                    case 'right':
                        moveRight();
                        break;
                    case 'topleft':
                        moveTop();
                        moveLeft();
                        break;
                    case 'topright':
                        moveTop();
                        moveRight();
                        break;
                    case 'bottomleft':
                        moveBottom();
                        moveLeft();
                        break;
                    case 'bottomright':
                        moveBottom();
                        moveRight();
                        break;
                }
                const bounds = {};
                // Anchor to top or to bottom depending on which one is closer
                if (top <= bottom) {
                    bounds.top = top;
                }
                else {
                    bounds.bottom = bottom;
                }
                // Anchor to left or to right depending on which one is closer
                if (left <= right) {
                    bounds.left = left;
                }
                else {
                    bounds.right = right;
                }
                bounds.height = height;
                bounds.width = width;
                this.setBounds(bounds);
            }), {
                dispose: () => {
                    iframes.release();
                },
            }, (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableWindowListener)(window, 'pointerup', () => {
                move.dispose();
                this._onDidChangeEnd.fire();
            }));
        }));
    }
    getMinimumWidth(width) {
        if (typeof this.options.minimumInViewportWidth === 'number') {
            return width - this.options.minimumInViewportWidth;
        }
        return 0;
    }
    getMinimumHeight(height) {
        if (typeof this.options.minimumInViewportHeight === 'number') {
            return height - this.options.minimumInViewportHeight;
        }
        return 0;
    }
    dispose() {
        arialLevelTracker.destroy(this._element);
        this._element.remove();
        super.dispose();
    }
}
Overlay.MINIMUM_HEIGHT = 20;
Overlay.MINIMUM_WIDTH = 20;


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/overlay/overlayRenderContainer.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/overlay/overlayRenderContainer.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   OverlayRenderContainer: () => (/* binding */ OverlayRenderContainer)
/* harmony export */ });
/* harmony import */ var _dnd_dnd__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dnd/dnd */ "./node_modules/dockview-core/dist/esm/dnd/dnd.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");



function createFocusableElement() {
    const element = document.createElement('div');
    element.tabIndex = -1;
    return element;
}
class OverlayRenderContainer extends _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable {
    constructor(element, accessor) {
        super();
        this.element = element;
        this.accessor = accessor;
        this.map = {};
        this._disposed = false;
        this.addDisposables(_lifecycle__WEBPACK_IMPORTED_MODULE_2__.Disposable.from(() => {
            for (const value of Object.values(this.map)) {
                value.disposable.dispose();
                value.destroy.dispose();
            }
            this._disposed = true;
        }));
    }
    detatch(panel) {
        if (this.map[panel.api.id]) {
            const { disposable, destroy } = this.map[panel.api.id];
            disposable.dispose();
            destroy.dispose();
            delete this.map[panel.api.id];
            return true;
        }
        return false;
    }
    attach(options) {
        const { panel, referenceContainer } = options;
        if (!this.map[panel.api.id]) {
            const element = createFocusableElement();
            element.className = 'dv-render-overlay';
            this.map[panel.api.id] = {
                panel,
                disposable: _lifecycle__WEBPACK_IMPORTED_MODULE_2__.Disposable.NONE,
                destroy: _lifecycle__WEBPACK_IMPORTED_MODULE_2__.Disposable.NONE,
                element,
            };
        }
        const focusContainer = this.map[panel.api.id].element;
        if (panel.view.content.element.parentElement !== focusContainer) {
            focusContainer.appendChild(panel.view.content.element);
        }
        if (focusContainer.parentElement !== this.element) {
            this.element.appendChild(focusContainer);
        }
        const resize = () => {
            // TODO propagate position to avoid getDomNodePagePosition calls, possible performance bottleneck?
            const box = (0,_dom__WEBPACK_IMPORTED_MODULE_1__.getDomNodePagePosition)(referenceContainer.element);
            const box2 = (0,_dom__WEBPACK_IMPORTED_MODULE_1__.getDomNodePagePosition)(this.element);
            focusContainer.style.left = `${box.left - box2.left}px`;
            focusContainer.style.top = `${box.top - box2.top}px`;
            focusContainer.style.width = `${box.width}px`;
            focusContainer.style.height = `${box.height}px`;
            (0,_dom__WEBPACK_IMPORTED_MODULE_1__.toggleClass)(focusContainer, 'dv-render-overlay-float', panel.group.api.location.type === 'floating');
        };
        const visibilityChanged = () => {
            if (panel.api.isVisible) {
                resize();
            }
            focusContainer.style.display = panel.api.isVisible ? '' : 'none';
        };
        const observerDisposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.MutableDisposable();
        const correctLayerPosition = () => {
            if (panel.api.location.type === 'floating') {
                queueMicrotask(() => {
                    const floatingGroup = this.accessor.floatingGroups.find((group) => group.group === panel.api.group);
                    if (!floatingGroup) {
                        return;
                    }
                    const element = floatingGroup.overlay.element;
                    const update = () => {
                        const level = Number(element.getAttribute('aria-level'));
                        focusContainer.style.zIndex = `calc(var(--dv-overlay-z-index, 999) + ${level * 2 + 1})`;
                    };
                    const observer = new MutationObserver(() => {
                        update();
                    });
                    observerDisposable.value = _lifecycle__WEBPACK_IMPORTED_MODULE_2__.Disposable.from(() => observer.disconnect());
                    observer.observe(element, {
                        attributeFilter: ['aria-level'],
                        attributes: true,
                    });
                    update();
                });
            }
            else {
                focusContainer.style.zIndex = ''; // reset the z-index, perhaps CSS will take over here
            }
        };
        const disposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable(observerDisposable, 
        /**
         * since container is positioned absoutely we must explicitly forward
         * the dnd events for the expect behaviours to continue to occur in terms of dnd
         *
         * the dnd observer does not need to be conditional on whether the panel is visible since
         * non-visible panels are 'display: none' and in such case the dnd observer will not fire.
         */
        new _dnd_dnd__WEBPACK_IMPORTED_MODULE_0__.DragAndDropObserver(focusContainer, {
            onDragEnd: (e) => {
                referenceContainer.dropTarget.dnd.onDragEnd(e);
            },
            onDragEnter: (e) => {
                referenceContainer.dropTarget.dnd.onDragEnter(e);
            },
            onDragLeave: (e) => {
                referenceContainer.dropTarget.dnd.onDragLeave(e);
            },
            onDrop: (e) => {
                referenceContainer.dropTarget.dnd.onDrop(e);
            },
            onDragOver: (e) => {
                referenceContainer.dropTarget.dnd.onDragOver(e);
            },
        }), panel.api.onDidVisibilityChange(() => {
            /**
             * Control the visibility of the content, however even when not visible (display: none)
             * the content is still maintained within the DOM hence DOM specific attributes
             * such as scroll position are maintained when next made visible.
             */
            visibilityChanged();
        }), panel.api.onDidDimensionsChange(() => {
            if (!panel.api.isVisible) {
                return;
            }
            resize();
        }), panel.api.onDidLocationChange(() => {
            correctLayerPosition();
        }));
        this.map[panel.api.id].destroy = _lifecycle__WEBPACK_IMPORTED_MODULE_2__.Disposable.from(() => {
            var _a;
            if (panel.view.content.element.parentElement === focusContainer) {
                focusContainer.removeChild(panel.view.content.element);
            }
            (_a = focusContainer.parentElement) === null || _a === void 0 ? void 0 : _a.removeChild(focusContainer);
        });
        correctLayerPosition();
        queueMicrotask(() => {
            if (this.isDisposed) {
                return;
            }
            /**
             * wait until everything has finished in the current stack-frame call before
             * calling the first resize as other size-altering events may still occur before
             * the end of the stack-frame.
             */
            visibilityChanged();
        });
        // dispose of logic asoccciated with previous reference-container
        this.map[panel.api.id].disposable.dispose();
        // and reset the disposable to the active reference-container
        this.map[panel.api.id].disposable = disposable;
        return focusContainer;
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/panel/types.js":
/*!************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/panel/types.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/paneview/defaultPaneviewHeader.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/paneview/defaultPaneviewHeader.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DefaultHeader: () => (/* binding */ DefaultHeader)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _svg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../svg */ "./node_modules/dockview-core/dist/esm/svg.js");




class DefaultHeader extends _lifecycle__WEBPACK_IMPORTED_MODULE_1__.CompositeDisposable {
    get element() {
        return this._element;
    }
    constructor() {
        super();
        this._expandedIcon = (0,_svg__WEBPACK_IMPORTED_MODULE_3__.createExpandMoreButton)();
        this._collapsedIcon = (0,_svg__WEBPACK_IMPORTED_MODULE_3__.createChevronRightButton)();
        this.disposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_1__.MutableDisposable();
        this.apiRef = {
            api: null,
        };
        this._element = document.createElement('div');
        this.element.className = 'dv-default-header';
        this._content = document.createElement('span');
        this._expander = document.createElement('div');
        this._expander.className = 'dv-pane-header-icon';
        this.element.appendChild(this._expander);
        this.element.appendChild(this._content);
        this.addDisposables((0,_events__WEBPACK_IMPORTED_MODULE_0__.addDisposableListener)(this._element, 'click', () => {
            var _a;
            (_a = this.apiRef.api) === null || _a === void 0 ? void 0 : _a.setExpanded(!this.apiRef.api.isExpanded);
        }));
    }
    init(params) {
        this.apiRef.api = params.api;
        this._content.textContent = params.title;
        this.updateIcon();
        this.disposable.value = params.api.onDidExpansionChange(() => {
            this.updateIcon();
        });
    }
    updateIcon() {
        var _a;
        const isExpanded = !!((_a = this.apiRef.api) === null || _a === void 0 ? void 0 : _a.isExpanded);
        (0,_dom__WEBPACK_IMPORTED_MODULE_2__.toggleClass)(this._expander, 'collapsed', !isExpanded);
        if (isExpanded) {
            if (this._expander.contains(this._collapsedIcon)) {
                this._collapsedIcon.remove();
            }
            if (!this._expander.contains(this._expandedIcon)) {
                this._expander.appendChild(this._expandedIcon);
            }
        }
        else {
            if (this._expander.contains(this._expandedIcon)) {
                this._expandedIcon.remove();
            }
            if (!this._expander.contains(this._collapsedIcon)) {
                this._expander.appendChild(this._collapsedIcon);
            }
        }
    }
    update(_params) {
        //
    }
    dispose() {
        this.disposable.dispose();
        super.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/paneview/draggablePaneviewPanel.js":
/*!********************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/paneview/draggablePaneviewPanel.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DraggablePaneviewPanel: () => (/* binding */ DraggablePaneviewPanel)
/* harmony export */ });
/* harmony import */ var _api_component_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api/component.api */ "./node_modules/dockview-core/dist/esm/api/component.api.js");
/* harmony import */ var _dnd_abstractDragHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dnd/abstractDragHandler */ "./node_modules/dockview-core/dist/esm/dnd/abstractDragHandler.js");
/* harmony import */ var _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dnd/dataTransfer */ "./node_modules/dockview-core/dist/esm/dnd/dataTransfer.js");
/* harmony import */ var _dnd_droptarget__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../dnd/droptarget */ "./node_modules/dockview-core/dist/esm/dnd/droptarget.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _options__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./options */ "./node_modules/dockview-core/dist/esm/paneview/options.js");
/* harmony import */ var _paneviewPanel__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./paneviewPanel */ "./node_modules/dockview-core/dist/esm/paneview/paneviewPanel.js");







class DraggablePaneviewPanel extends _paneviewPanel__WEBPACK_IMPORTED_MODULE_6__.PaneviewPanel {
    constructor(accessor, id, component, headerComponent, orientation, isExpanded, disableDnd) {
        super(id, component, headerComponent, orientation, isExpanded, true);
        this.accessor = accessor;
        this._onDidDrop = new _events__WEBPACK_IMPORTED_MODULE_4__.Emitter();
        this.onDidDrop = this._onDidDrop.event;
        this._onUnhandledDragOverEvent = new _events__WEBPACK_IMPORTED_MODULE_4__.Emitter();
        this.onUnhandledDragOverEvent = this._onUnhandledDragOverEvent.event;
        this.addDisposables(this._onDidDrop, this._onUnhandledDragOverEvent);
        if (!disableDnd) {
            this.initDragFeatures();
        }
    }
    initDragFeatures() {
        if (!this.header) {
            return;
        }
        const id = this.id;
        const accessorId = this.accessor.id;
        this.header.draggable = true;
        this.handler = new (class PaneDragHandler extends _dnd_abstractDragHandler__WEBPACK_IMPORTED_MODULE_1__.DragHandler {
            getData() {
                _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.LocalSelectionTransfer.getInstance().setData([new _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.PaneTransfer(accessorId, id)], _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.PaneTransfer.prototype);
                return {
                    dispose: () => {
                        _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.LocalSelectionTransfer.getInstance().clearData(_dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.PaneTransfer.prototype);
                    },
                };
            }
        })(this.header);
        this.target = new _dnd_droptarget__WEBPACK_IMPORTED_MODULE_3__.Droptarget(this.element, {
            acceptedTargetZones: ['top', 'bottom'],
            overlayModel: {
                activationSize: { type: 'percentage', value: 50 },
            },
            canDisplayOverlay: (event, position) => {
                const data = (0,_dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.getPaneData)();
                if (data) {
                    if (data.paneId !== this.id &&
                        data.viewId === this.accessor.id) {
                        return true;
                    }
                }
                const firedEvent = new _options__WEBPACK_IMPORTED_MODULE_5__.PaneviewUnhandledDragOverEvent(event, position, _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.getPaneData, this);
                this._onUnhandledDragOverEvent.fire(firedEvent);
                return firedEvent.isAccepted;
            },
        });
        this.addDisposables(this._onDidDrop, this.handler, this.target, this.target.onDrop((event) => {
            this.onDrop(event);
        }));
    }
    onDrop(event) {
        const data = (0,_dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.getPaneData)();
        if (!data || data.viewId !== this.accessor.id) {
            // if there is no local drag event for this panel
            // or if the drag event was creating by another Paneview instance
            this._onDidDrop.fire(Object.assign(Object.assign({}, event), { panel: this, api: new _api_component_api__WEBPACK_IMPORTED_MODULE_0__.PaneviewApi(this.accessor), getData: _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.getPaneData }));
            return;
        }
        const containerApi = this._params
            .containerApi;
        const panelId = data.paneId;
        const existingPanel = containerApi.getPanel(panelId);
        if (!existingPanel) {
            // if the panel doesn't exist
            this._onDidDrop.fire(Object.assign(Object.assign({}, event), { panel: this, getData: _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.getPaneData, api: new _api_component_api__WEBPACK_IMPORTED_MODULE_0__.PaneviewApi(this.accessor) }));
            return;
        }
        const allPanels = containerApi.panels;
        const fromIndex = allPanels.indexOf(existingPanel);
        let toIndex = containerApi.panels.indexOf(this);
        if (event.position === 'left' || event.position === 'top') {
            toIndex = Math.max(0, toIndex - 1);
        }
        if (event.position === 'right' || event.position === 'bottom') {
            if (fromIndex > toIndex) {
                toIndex++;
            }
            toIndex = Math.min(allPanels.length - 1, toIndex);
        }
        containerApi.movePanel(fromIndex, toIndex);
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/paneview/options.js":
/*!*****************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/paneview/options.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PROPERTY_KEYS_PANEVIEW: () => (/* binding */ PROPERTY_KEYS_PANEVIEW),
/* harmony export */   PaneviewUnhandledDragOverEvent: () => (/* binding */ PaneviewUnhandledDragOverEvent)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");

const PROPERTY_KEYS_PANEVIEW = (() => {
    /**
     * by readong the keys from an empty value object TypeScript will error
     * when we add or remove new properties to `DockviewOptions`
     */
    const properties = {
        disableAutoResizing: undefined,
        disableDnd: undefined,
        className: undefined,
    };
    return Object.keys(properties);
})();
class PaneviewUnhandledDragOverEvent extends _events__WEBPACK_IMPORTED_MODULE_0__.AcceptableEvent {
    constructor(nativeEvent, position, getData, panel) {
        super();
        this.nativeEvent = nativeEvent;
        this.position = position;
        this.getData = getData;
        this.panel = panel;
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/paneview/paneview.js":
/*!******************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/paneview/paneview.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Paneview: () => (/* binding */ Paneview)
/* harmony export */ });
/* harmony import */ var _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../splitview/splitview */ "./node_modules/dockview-core/dist/esm/splitview/splitview.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");




class Paneview extends _lifecycle__WEBPACK_IMPORTED_MODULE_1__.CompositeDisposable {
    get onDidAddView() {
        return this.splitview.onDidAddView;
    }
    get onDidRemoveView() {
        return this.splitview.onDidRemoveView;
    }
    get minimumSize() {
        return this.splitview.minimumSize;
    }
    get maximumSize() {
        return this.splitview.maximumSize;
    }
    get orientation() {
        return this.splitview.orientation;
    }
    get size() {
        return this.splitview.size;
    }
    get orthogonalSize() {
        return this.splitview.orthogonalSize;
    }
    constructor(container, options) {
        var _a;
        super();
        this.paneItems = [];
        this.skipAnimation = false;
        this._onDidChange = new _events__WEBPACK_IMPORTED_MODULE_2__.Emitter();
        this.onDidChange = this._onDidChange.event;
        this._orientation = (_a = options.orientation) !== null && _a !== void 0 ? _a : _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.VERTICAL;
        this.element = document.createElement('div');
        this.element.className = 'dv-pane-container';
        container.appendChild(this.element);
        this.splitview = new _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Splitview(this.element, {
            orientation: this._orientation,
            proportionalLayout: false,
            descriptor: options.descriptor,
        });
        // if we've added views from the descriptor we need to
        // add the panes to our Pane array and setup animation
        this.getPanes().forEach((pane) => {
            const disposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_1__.CompositeDisposable(pane.onDidChangeExpansionState(() => {
                this.setupAnimation();
                this._onDidChange.fire(undefined);
            }));
            const paneItem = {
                pane,
                disposable: {
                    dispose: () => {
                        disposable.dispose();
                    },
                },
            };
            this.paneItems.push(paneItem);
            pane.orthogonalSize = this.splitview.orthogonalSize;
        });
        this.addDisposables(this._onDidChange, this.splitview.onDidSashEnd(() => {
            this._onDidChange.fire(undefined);
        }), this.splitview.onDidAddView(() => {
            this._onDidChange.fire();
        }), this.splitview.onDidRemoveView(() => {
            this._onDidChange.fire();
        }));
    }
    setViewVisible(index, visible) {
        this.splitview.setViewVisible(index, visible);
    }
    addPane(pane, size, index = this.splitview.length, skipLayout = false) {
        const disposable = pane.onDidChangeExpansionState(() => {
            this.setupAnimation();
            this._onDidChange.fire(undefined);
        });
        const paneItem = {
            pane,
            disposable: {
                dispose: () => {
                    disposable.dispose();
                },
            },
        };
        this.paneItems.splice(index, 0, paneItem);
        pane.orthogonalSize = this.splitview.orthogonalSize;
        this.splitview.addView(pane, size, index, skipLayout);
    }
    getViewSize(index) {
        return this.splitview.getViewSize(index);
    }
    getPanes() {
        return this.splitview.getViews();
    }
    removePane(index, options = { skipDispose: false }) {
        const paneItem = this.paneItems.splice(index, 1)[0];
        this.splitview.removeView(index);
        if (!options.skipDispose) {
            paneItem.disposable.dispose();
            paneItem.pane.dispose();
        }
        return paneItem;
    }
    moveView(from, to) {
        if (from === to) {
            return;
        }
        const view = this.removePane(from, { skipDispose: true });
        this.skipAnimation = true;
        try {
            this.addPane(view.pane, view.pane.size, to, false);
        }
        finally {
            this.skipAnimation = false;
        }
    }
    layout(size, orthogonalSize) {
        this.splitview.layout(size, orthogonalSize);
    }
    setupAnimation() {
        if (this.skipAnimation) {
            return;
        }
        if (this.animationTimer) {
            clearTimeout(this.animationTimer);
            this.animationTimer = undefined;
        }
        (0,_dom__WEBPACK_IMPORTED_MODULE_3__.addClasses)(this.element, 'dv-animated');
        this.animationTimer = setTimeout(() => {
            this.animationTimer = undefined;
            (0,_dom__WEBPACK_IMPORTED_MODULE_3__.removeClasses)(this.element, 'dv-animated');
        }, 200);
    }
    dispose() {
        super.dispose();
        if (this.animationTimer) {
            clearTimeout(this.animationTimer);
            this.animationTimer = undefined;
        }
        this.paneItems.forEach((paneItem) => {
            paneItem.disposable.dispose();
            paneItem.pane.dispose();
        });
        this.paneItems = [];
        this.splitview.dispose();
        this.element.remove();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/paneview/paneviewComponent.js":
/*!***************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/paneview/paneviewComponent.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PaneFramework: () => (/* binding */ PaneFramework),
/* harmony export */   PaneviewComponent: () => (/* binding */ PaneviewComponent)
/* harmony export */ });
/* harmony import */ var _api_component_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api/component.api */ "./node_modules/dockview-core/dist/esm/api/component.api.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _splitview_splitview__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../splitview/splitview */ "./node_modules/dockview-core/dist/esm/splitview/splitview.js");
/* harmony import */ var _paneview__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./paneview */ "./node_modules/dockview-core/dist/esm/paneview/paneview.js");
/* harmony import */ var _draggablePaneviewPanel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./draggablePaneviewPanel */ "./node_modules/dockview-core/dist/esm/paneview/draggablePaneviewPanel.js");
/* harmony import */ var _defaultPaneviewHeader__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./defaultPaneviewHeader */ "./node_modules/dockview-core/dist/esm/paneview/defaultPaneviewHeader.js");
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../math */ "./node_modules/dockview-core/dist/esm/math.js");
/* harmony import */ var _resizable__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../resizable */ "./node_modules/dockview-core/dist/esm/resizable.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");










const nextLayoutId = (0,_math__WEBPACK_IMPORTED_MODULE_7__.sequentialNumberGenerator)();
class PaneFramework extends _draggablePaneviewPanel__WEBPACK_IMPORTED_MODULE_5__.DraggablePaneviewPanel {
    constructor(options) {
        super(options.accessor, options.id, options.component, options.headerComponent, options.orientation, options.isExpanded, options.disableDnd);
        this.options = options;
    }
    getBodyComponent() {
        return this.options.body;
    }
    getHeaderComponent() {
        return this.options.header;
    }
}
class PaneviewComponent extends _resizable__WEBPACK_IMPORTED_MODULE_8__.Resizable {
    get id() {
        return this._id;
    }
    get panels() {
        return this.paneview.getPanes();
    }
    set paneview(value) {
        this._paneview = value;
        this._disposable.value = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable(this._paneview.onDidChange(() => {
            this._onDidLayoutChange.fire(undefined);
        }), this._paneview.onDidAddView((e) => this._onDidAddView.fire(e)), this._paneview.onDidRemoveView((e) => this._onDidRemoveView.fire(e)));
    }
    get paneview() {
        return this._paneview;
    }
    get minimumSize() {
        return this.paneview.minimumSize;
    }
    get maximumSize() {
        return this.paneview.maximumSize;
    }
    get height() {
        return this.paneview.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_3__.Orientation.HORIZONTAL
            ? this.paneview.orthogonalSize
            : this.paneview.size;
    }
    get width() {
        return this.paneview.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_3__.Orientation.HORIZONTAL
            ? this.paneview.size
            : this.paneview.orthogonalSize;
    }
    get options() {
        return this._options;
    }
    constructor(container, options) {
        var _a;
        super(document.createElement('div'), options.disableAutoResizing);
        this._id = nextLayoutId.next();
        this._disposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.MutableDisposable();
        this._viewDisposables = new Map();
        this._onDidLayoutfromJSON = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidLayoutFromJSON = this._onDidLayoutfromJSON.event;
        this._onDidLayoutChange = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidLayoutChange = this._onDidLayoutChange.event;
        this._onDidDrop = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidDrop = this._onDidDrop.event;
        this._onDidAddView = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidAddView = this._onDidAddView.event;
        this._onDidRemoveView = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidRemoveView = this._onDidRemoveView.event;
        this._onUnhandledDragOverEvent = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onUnhandledDragOverEvent = this._onUnhandledDragOverEvent.event;
        this.element.style.height = '100%';
        this.element.style.width = '100%';
        this.addDisposables(this._onDidLayoutChange, this._onDidLayoutfromJSON, this._onDidDrop, this._onDidAddView, this._onDidRemoveView, this._onUnhandledDragOverEvent);
        this._classNames = new _dom__WEBPACK_IMPORTED_MODULE_9__.Classnames(this.element);
        this._classNames.setClassNames((_a = options.className) !== null && _a !== void 0 ? _a : '');
        // the container is owned by the third-party, do not modify/delete it
        container.appendChild(this.element);
        this._options = options;
        this.paneview = new _paneview__WEBPACK_IMPORTED_MODULE_4__.Paneview(this.element, {
            // only allow paneview in the vertical orientation for now
            orientation: _splitview_splitview__WEBPACK_IMPORTED_MODULE_3__.Orientation.VERTICAL,
        });
        this.addDisposables(this._disposable);
    }
    setVisible(panel, visible) {
        const index = this.panels.indexOf(panel);
        this.paneview.setViewVisible(index, visible);
    }
    focus() {
        //noop
    }
    updateOptions(options) {
        var _a, _b;
        if ('className' in options) {
            this._classNames.setClassNames((_a = options.className) !== null && _a !== void 0 ? _a : '');
        }
        if ('disableResizing' in options) {
            this.disableResizing = (_b = options.disableAutoResizing) !== null && _b !== void 0 ? _b : false;
        }
        this._options = Object.assign(Object.assign({}, this.options), options);
    }
    addPanel(options) {
        var _a;
        const body = this.options.createComponent({
            id: options.id,
            name: options.component,
        });
        let header;
        if (options.headerComponent && this.options.createHeaderComponent) {
            header = this.options.createHeaderComponent({
                id: options.id,
                name: options.headerComponent,
            });
        }
        if (!header) {
            header = new _defaultPaneviewHeader__WEBPACK_IMPORTED_MODULE_6__.DefaultHeader();
        }
        const view = new PaneFramework({
            id: options.id,
            component: options.component,
            headerComponent: options.headerComponent,
            header,
            body,
            orientation: _splitview_splitview__WEBPACK_IMPORTED_MODULE_3__.Orientation.VERTICAL,
            isExpanded: !!options.isExpanded,
            disableDnd: !!this.options.disableDnd,
            accessor: this,
        });
        this.doAddPanel(view);
        const size = typeof options.size === 'number' ? options.size : _splitview_splitview__WEBPACK_IMPORTED_MODULE_3__.Sizing.Distribute;
        const index = typeof options.index === 'number' ? options.index : undefined;
        view.init({
            params: (_a = options.params) !== null && _a !== void 0 ? _a : {},
            minimumBodySize: options.minimumBodySize,
            maximumBodySize: options.maximumBodySize,
            isExpanded: options.isExpanded,
            title: options.title,
            containerApi: new _api_component_api__WEBPACK_IMPORTED_MODULE_0__.PaneviewApi(this),
            accessor: this,
        });
        this.paneview.addPane(view, size, index);
        view.orientation = this.paneview.orientation;
        return view;
    }
    removePanel(panel) {
        const views = this.panels;
        const index = views.findIndex((_) => _ === panel);
        this.paneview.removePane(index);
        this.doRemovePanel(panel);
    }
    movePanel(from, to) {
        this.paneview.moveView(from, to);
    }
    getPanel(id) {
        return this.panels.find((view) => view.id === id);
    }
    layout(width, height) {
        const [size, orthogonalSize] = this.paneview.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_3__.Orientation.HORIZONTAL
            ? [width, height]
            : [height, width];
        this.paneview.layout(size, orthogonalSize);
    }
    toJSON() {
        const maximum = (value) => value === Number.MAX_SAFE_INTEGER ||
            value === Number.POSITIVE_INFINITY
            ? undefined
            : value;
        const minimum = (value) => (value <= 0 ? undefined : value);
        const views = this.paneview
            .getPanes()
            .map((view, i) => {
            const size = this.paneview.getViewSize(i);
            return {
                size,
                data: view.toJSON(),
                minimumSize: minimum(view.minimumBodySize),
                maximumSize: maximum(view.maximumBodySize),
                expanded: view.isExpanded(),
            };
        });
        return {
            views,
            size: this.paneview.size,
        };
    }
    fromJSON(serializedPaneview) {
        this.clear();
        const { views, size } = serializedPaneview;
        const queue = [];
        // take note of the existing dimensions
        const width = this.width;
        const height = this.height;
        this.paneview = new _paneview__WEBPACK_IMPORTED_MODULE_4__.Paneview(this.element, {
            orientation: _splitview_splitview__WEBPACK_IMPORTED_MODULE_3__.Orientation.VERTICAL,
            descriptor: {
                size,
                views: views.map((view) => {
                    const data = view.data;
                    const body = this.options.createComponent({
                        id: data.id,
                        name: data.component,
                    });
                    let header;
                    if (data.headerComponent &&
                        this.options.createHeaderComponent) {
                        header = this.options.createHeaderComponent({
                            id: data.id,
                            name: data.headerComponent,
                        });
                    }
                    if (!header) {
                        header = new _defaultPaneviewHeader__WEBPACK_IMPORTED_MODULE_6__.DefaultHeader();
                    }
                    const panel = new PaneFramework({
                        id: data.id,
                        component: data.component,
                        headerComponent: data.headerComponent,
                        header,
                        body,
                        orientation: _splitview_splitview__WEBPACK_IMPORTED_MODULE_3__.Orientation.VERTICAL,
                        isExpanded: !!view.expanded,
                        disableDnd: !!this.options.disableDnd,
                        accessor: this,
                    });
                    this.doAddPanel(panel);
                    queue.push(() => {
                        var _a;
                        panel.init({
                            params: (_a = data.params) !== null && _a !== void 0 ? _a : {},
                            minimumBodySize: view.minimumSize,
                            maximumBodySize: view.maximumSize,
                            title: data.title,
                            isExpanded: !!view.expanded,
                            containerApi: new _api_component_api__WEBPACK_IMPORTED_MODULE_0__.PaneviewApi(this),
                            accessor: this,
                        });
                        panel.orientation = this.paneview.orientation;
                    });
                    setTimeout(() => {
                        // the original onDidAddView events are missed since they are fired before we can subcribe to them
                        this._onDidAddView.fire(panel);
                    }, 0);
                    return { size: view.size, view: panel };
                }),
            },
        });
        this.layout(width, height);
        queue.forEach((f) => f());
        this._onDidLayoutfromJSON.fire();
    }
    clear() {
        for (const [_, value] of this._viewDisposables.entries()) {
            value.dispose();
        }
        this._viewDisposables.clear();
        this.paneview.dispose();
    }
    doAddPanel(panel) {
        const disposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable(panel.onDidDrop((event) => {
            this._onDidDrop.fire(event);
        }), panel.onUnhandledDragOverEvent((event) => {
            this._onUnhandledDragOverEvent.fire(event);
        }));
        this._viewDisposables.set(panel.id, disposable);
    }
    doRemovePanel(panel) {
        const disposable = this._viewDisposables.get(panel.id);
        if (disposable) {
            disposable.dispose();
            this._viewDisposables.delete(panel.id);
        }
    }
    dispose() {
        super.dispose();
        for (const [_, value] of this._viewDisposables.entries()) {
            value.dispose();
        }
        this._viewDisposables.clear();
        this.paneview.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/paneview/paneviewPanel.js":
/*!***********************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/paneview/paneviewPanel.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PaneviewPanel: () => (/* binding */ PaneviewPanel)
/* harmony export */ });
/* harmony import */ var _api_paneviewPanelApi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api/paneviewPanelApi */ "./node_modules/dockview-core/dist/esm/api/paneviewPanelApi.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _gridview_basePanelView__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../gridview/basePanelView */ "./node_modules/dockview-core/dist/esm/gridview/basePanelView.js");
/* harmony import */ var _splitview_splitview__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../splitview/splitview */ "./node_modules/dockview-core/dist/esm/splitview/splitview.js");





class PaneviewPanel extends _gridview_basePanelView__WEBPACK_IMPORTED_MODULE_3__.BasePanelView {
    set orientation(value) {
        this._orientation = value;
    }
    get orientation() {
        return this._orientation;
    }
    get minimumSize() {
        const headerSize = this.headerSize;
        const expanded = this.isExpanded();
        const minimumBodySize = expanded ? this._minimumBodySize : 0;
        return headerSize + minimumBodySize;
    }
    get maximumSize() {
        const headerSize = this.headerSize;
        const expanded = this.isExpanded();
        const maximumBodySize = expanded ? this._maximumBodySize : 0;
        return headerSize + maximumBodySize;
    }
    get size() {
        return this._size;
    }
    get orthogonalSize() {
        return this._orthogonalSize;
    }
    set orthogonalSize(size) {
        this._orthogonalSize = size;
    }
    get minimumBodySize() {
        return this._minimumBodySize;
    }
    set minimumBodySize(value) {
        this._minimumBodySize = typeof value === 'number' ? value : 0;
    }
    get maximumBodySize() {
        return this._maximumBodySize;
    }
    set maximumBodySize(value) {
        this._maximumBodySize =
            typeof value === 'number' ? value : Number.POSITIVE_INFINITY;
    }
    get headerVisible() {
        return this._headerVisible;
    }
    set headerVisible(value) {
        this._headerVisible = value;
        this.header.style.display = value ? '' : 'none';
    }
    constructor(id, component, headerComponent, orientation, isExpanded, isHeaderVisible) {
        super(id, component, new _api_paneviewPanelApi__WEBPACK_IMPORTED_MODULE_0__.PaneviewPanelApiImpl(id, component));
        this.headerComponent = headerComponent;
        this._onDidChangeExpansionState = new _events__WEBPACK_IMPORTED_MODULE_2__.Emitter({ replay: true });
        this.onDidChangeExpansionState = this._onDidChangeExpansionState.event;
        this._onDidChange = new _events__WEBPACK_IMPORTED_MODULE_2__.Emitter();
        this.onDidChange = this._onDidChange.event;
        this.headerSize = 22;
        this._orthogonalSize = 0;
        this._size = 0;
        this._minimumBodySize = 100;
        this._maximumBodySize = Number.POSITIVE_INFINITY;
        this._isExpanded = false;
        this.expandedSize = 0;
        this.api.pane = this; // TODO cannot use 'this' before 'super'
        this.api.initialize(this);
        this._isExpanded = isExpanded;
        this._headerVisible = isHeaderVisible;
        this._onDidChangeExpansionState.fire(this.isExpanded()); // initialize value
        this._orientation = orientation;
        this.element.classList.add('dv-pane');
        this.addDisposables(this.api.onWillVisibilityChange((event) => {
            const { isVisible } = event;
            const { accessor } = this._params;
            accessor.setVisible(this, isVisible);
        }), this.api.onDidSizeChange((event) => {
            this._onDidChange.fire({ size: event.size });
        }), (0,_events__WEBPACK_IMPORTED_MODULE_2__.addDisposableListener)(this.element, 'mouseenter', (ev) => {
            this.api._onMouseEnter.fire(ev);
        }), (0,_events__WEBPACK_IMPORTED_MODULE_2__.addDisposableListener)(this.element, 'mouseleave', (ev) => {
            this.api._onMouseLeave.fire(ev);
        }));
        this.addDisposables(this._onDidChangeExpansionState, this.onDidChangeExpansionState((isPanelExpanded) => {
            this.api._onDidExpansionChange.fire({
                isExpanded: isPanelExpanded,
            });
        }), this.api.onDidFocusChange((e) => {
            if (!this.header) {
                return;
            }
            if (e.isFocused) {
                (0,_dom__WEBPACK_IMPORTED_MODULE_1__.addClasses)(this.header, 'focused');
            }
            else {
                (0,_dom__WEBPACK_IMPORTED_MODULE_1__.removeClasses)(this.header, 'focused');
            }
        }));
        this.renderOnce();
    }
    setVisible(isVisible) {
        this.api._onDidVisibilityChange.fire({ isVisible });
    }
    setActive(isActive) {
        this.api._onDidActiveChange.fire({ isActive });
    }
    isExpanded() {
        return this._isExpanded;
    }
    setExpanded(expanded) {
        if (this._isExpanded === expanded) {
            return;
        }
        this._isExpanded = expanded;
        if (expanded) {
            if (this.animationTimer) {
                clearTimeout(this.animationTimer);
            }
            if (this.body) {
                this.element.appendChild(this.body);
            }
        }
        else {
            this.animationTimer = setTimeout(() => {
                var _a;
                (_a = this.body) === null || _a === void 0 ? void 0 : _a.remove();
            }, 200);
        }
        this._onDidChange.fire(expanded ? { size: this.width } : {});
        this._onDidChangeExpansionState.fire(expanded);
    }
    layout(size, orthogonalSize) {
        this._size = size;
        this._orthogonalSize = orthogonalSize;
        const [width, height] = this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_4__.Orientation.HORIZONTAL
            ? [size, orthogonalSize]
            : [orthogonalSize, size];
        if (this.isExpanded()) {
            this.expandedSize = width;
        }
        super.layout(width, height);
    }
    init(parameters) {
        var _a, _b;
        super.init(parameters);
        if (typeof parameters.minimumBodySize === 'number') {
            this.minimumBodySize = parameters.minimumBodySize;
        }
        if (typeof parameters.maximumBodySize === 'number') {
            this.maximumBodySize = parameters.maximumBodySize;
        }
        this.bodyPart = this.getBodyComponent();
        this.headerPart = this.getHeaderComponent();
        this.bodyPart.init(Object.assign(Object.assign({}, parameters), { api: this.api }));
        this.headerPart.init(Object.assign(Object.assign({}, parameters), { api: this.api }));
        (_a = this.body) === null || _a === void 0 ? void 0 : _a.append(this.bodyPart.element);
        (_b = this.header) === null || _b === void 0 ? void 0 : _b.append(this.headerPart.element);
        if (typeof parameters.isExpanded === 'boolean') {
            this.setExpanded(parameters.isExpanded);
        }
    }
    toJSON() {
        const params = this._params;
        return Object.assign(Object.assign({}, super.toJSON()), { headerComponent: this.headerComponent, title: params.title });
    }
    renderOnce() {
        this.header = document.createElement('div');
        this.header.tabIndex = 0;
        this.header.className = 'dv-pane-header';
        this.header.style.height = `${this.headerSize}px`;
        this.header.style.lineHeight = `${this.headerSize}px`;
        this.header.style.minHeight = `${this.headerSize}px`;
        this.header.style.maxHeight = `${this.headerSize}px`;
        this.element.appendChild(this.header);
        this.body = document.createElement('div');
        this.body.className = 'dv-pane-body';
        this.element.appendChild(this.body);
    }
    // TODO slightly hacky by-pass of the component to create a body and header component
    getComponent() {
        return {
            update: (params) => {
                var _a, _b;
                (_a = this.bodyPart) === null || _a === void 0 ? void 0 : _a.update({ params });
                (_b = this.headerPart) === null || _b === void 0 ? void 0 : _b.update({ params });
            },
            dispose: () => {
                var _a, _b;
                (_a = this.bodyPart) === null || _a === void 0 ? void 0 : _a.dispose();
                (_b = this.headerPart) === null || _b === void 0 ? void 0 : _b.dispose();
            },
        };
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/popoutWindow.js":
/*!*************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/popoutWindow.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PopoutWindow: () => (/* binding */ PopoutWindow)
/* harmony export */ });
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class PopoutWindow extends _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable {
    get window() {
        var _a, _b;
        return (_b = (_a = this._window) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : null;
    }
    constructor(target, className, options) {
        super();
        this.target = target;
        this.className = className;
        this.options = options;
        this._onWillClose = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onWillClose = this._onWillClose.event;
        this._onDidClose = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidClose = this._onDidClose.event;
        this._window = null;
        this.addDisposables(this._onWillClose, this._onDidClose, {
            dispose: () => {
                this.close();
            },
        });
    }
    dimensions() {
        if (!this._window) {
            return null;
        }
        const left = this._window.value.screenX;
        const top = this._window.value.screenY;
        const width = this._window.value.innerWidth;
        const height = this._window.value.innerHeight;
        return { top, left, width, height };
    }
    close() {
        var _a, _b;
        if (this._window) {
            this._onWillClose.fire();
            (_b = (_a = this.options).onWillClose) === null || _b === void 0 ? void 0 : _b.call(_a, {
                id: this.target,
                window: this._window.value,
            });
            this._window.disposable.dispose();
            this._window = null;
            this._onDidClose.fire();
        }
    }
    open() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            if (this._window) {
                throw new Error('instance of popout window is already open');
            }
            const url = `${this.options.url}`;
            const features = Object.entries({
                top: this.options.top,
                left: this.options.left,
                width: this.options.width,
                height: this.options.height,
            })
                .map(([key, value]) => `${key}=${value}`)
                .join(',');
            /**
             * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/open
             */
            const externalWindow = window.open(url, this.target, features);
            if (!externalWindow) {
                /**
                 * Popup blocked
                 */
                return null;
            }
            const disposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable();
            this._window = { value: externalWindow, disposable };
            disposable.addDisposables(_lifecycle__WEBPACK_IMPORTED_MODULE_2__.Disposable.from(() => {
                externalWindow.close();
            }), (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableWindowListener)(window, 'beforeunload', () => {
                /**
                 * before the main window closes we should close this popup too
                 * to be good citizens
                 *
                 * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event
                 */
                this.close();
            }));
            const container = this.createPopoutWindowContainer();
            if (this.className) {
                container.classList.add(this.className);
            }
            (_b = (_a = this.options).onDidOpen) === null || _b === void 0 ? void 0 : _b.call(_a, {
                id: this.target,
                window: externalWindow,
            });
            return new Promise((resolve, reject) => {
                externalWindow.addEventListener('unload', (e) => {
                    // if page fails to load before unloading
                    // this.close();
                });
                externalWindow.addEventListener('load', () => {
                    /**
                     * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event
                     */
                    try {
                        const externalDocument = externalWindow.document;
                        externalDocument.title = document.title;
                        externalDocument.body.appendChild(container);
                        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.addStyles)(externalDocument, window.document.styleSheets);
                        /**
                         * beforeunload must be registered after load for reasons I could not determine
                         * otherwise the beforeunload event will not fire when the window is closed
                         */
                        (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableWindowListener)(externalWindow, 'beforeunload', () => {
                            /**
                             * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event
                             */
                            this.close();
                        });
                        resolve(container);
                    }
                    catch (err) {
                        // only except this is the DOM isn't setup. e.g. in a in correctly configured test
                        reject(err);
                    }
                });
            });
        });
    }
    createPopoutWindowContainer() {
        const el = document.createElement('div');
        el.classList.add('dv-popout-window');
        el.id = 'dv-popout-window';
        el.style.position = 'absolute';
        el.style.width = '100%';
        el.style.height = '100%';
        el.style.top = '0px';
        el.style.left = '0px';
        return el;
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/resizable.js":
/*!**********************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/resizable.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Resizable: () => (/* binding */ Resizable)
/* harmony export */ });
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");


class Resizable extends _lifecycle__WEBPACK_IMPORTED_MODULE_1__.CompositeDisposable {
    get element() {
        return this._element;
    }
    get disableResizing() {
        return this._disableResizing;
    }
    set disableResizing(value) {
        this._disableResizing = value;
    }
    constructor(parentElement, disableResizing = false) {
        super();
        this._disableResizing = disableResizing;
        this._element = parentElement;
        this.addDisposables((0,_dom__WEBPACK_IMPORTED_MODULE_0__.watchElementResize)(this._element, (entry) => {
            if (this.isDisposed) {
                /**
                 * resize is delayed through requestAnimationFrame so there is a small chance
                 * the component has already been disposed of
                 */
                return;
            }
            if (this.disableResizing) {
                return;
            }
            if (!this._element.offsetParent) {
                /**
                 * offsetParent === null is equivalent to display: none being set on the element or one
                 * of it's parents. In the display: none case the size will become (0, 0) which we do
                 * not want to propagate.
                 *
                 * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent
                 *
                 * You could use checkVisibility() but at the time of writing it's not supported across
                 * all Browsers
                 *
                 * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/checkVisibility
                 */
                return;
            }
            if (!(0,_dom__WEBPACK_IMPORTED_MODULE_0__.isInDocument)(this._element)) {
                /**
                 * since the event is dispatched through requestAnimationFrame there is a small chance
                 * the component is no longer attached to the DOM, if that is the case the dimensions
                 * are mostly likely all zero and meaningless. we should skip this case.
                 */
                return;
            }
            const { width, height } = entry.contentRect;
            this.layout(width, height);
        }));
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/splitview/options.js":
/*!******************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/splitview/options.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PROPERTY_KEYS_SPLITVIEW: () => (/* binding */ PROPERTY_KEYS_SPLITVIEW)
/* harmony export */ });
const PROPERTY_KEYS_SPLITVIEW = (() => {
    /**
     * by readong the keys from an empty value object TypeScript will error
     * when we add or remove new properties to `DockviewOptions`
     */
    const properties = {
        orientation: undefined,
        descriptor: undefined,
        proportionalLayout: undefined,
        styles: undefined,
        margin: undefined,
        disableAutoResizing: undefined,
        className: undefined,
    };
    return Object.keys(properties);
})();


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/splitview/splitview.js":
/*!********************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/splitview/splitview.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LayoutPriority: () => (/* binding */ LayoutPriority),
/* harmony export */   Orientation: () => (/* binding */ Orientation),
/* harmony export */   SashState: () => (/* binding */ SashState),
/* harmony export */   Sizing: () => (/* binding */ Sizing),
/* harmony export */   Splitview: () => (/* binding */ Splitview)
/* harmony export */ });
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _array__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../array */ "./node_modules/dockview-core/dist/esm/array.js");
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math */ "./node_modules/dockview-core/dist/esm/math.js");
/* harmony import */ var _viewItem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./viewItem */ "./node_modules/dockview-core/dist/esm/splitview/viewItem.js");
/*---------------------------------------------------------------------------------------------
 * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:
 * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/splitview
 *--------------------------------------------------------------------------------------------*/





var Orientation;
(function (Orientation) {
    Orientation["HORIZONTAL"] = "HORIZONTAL";
    Orientation["VERTICAL"] = "VERTICAL";
})(Orientation || (Orientation = {}));
var SashState;
(function (SashState) {
    SashState[SashState["MAXIMUM"] = 0] = "MAXIMUM";
    SashState[SashState["MINIMUM"] = 1] = "MINIMUM";
    SashState[SashState["DISABLED"] = 2] = "DISABLED";
    SashState[SashState["ENABLED"] = 3] = "ENABLED";
})(SashState || (SashState = {}));
var LayoutPriority;
(function (LayoutPriority) {
    LayoutPriority["Low"] = "low";
    LayoutPriority["High"] = "high";
    LayoutPriority["Normal"] = "normal";
})(LayoutPriority || (LayoutPriority = {}));
var Sizing;
(function (Sizing) {
    Sizing.Distribute = { type: 'distribute' };
    function Split(index) {
        return { type: 'split', index };
    }
    Sizing.Split = Split;
    function Invisible(cachedVisibleSize) {
        return { type: 'invisible', cachedVisibleSize };
    }
    Sizing.Invisible = Invisible;
})(Sizing || (Sizing = {}));
class Splitview {
    get contentSize() {
        return this._contentSize;
    }
    get size() {
        return this._size;
    }
    set size(value) {
        this._size = value;
    }
    get orthogonalSize() {
        return this._orthogonalSize;
    }
    set orthogonalSize(value) {
        this._orthogonalSize = value;
    }
    get length() {
        return this.viewItems.length;
    }
    get proportions() {
        return this._proportions ? [...this._proportions] : undefined;
    }
    get orientation() {
        return this._orientation;
    }
    set orientation(value) {
        this._orientation = value;
        const tmp = this.size;
        this.size = this.orthogonalSize;
        this.orthogonalSize = tmp;
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.removeClasses)(this.element, 'dv-horizontal', 'dv-vertical');
        this.element.classList.add(this.orientation == Orientation.HORIZONTAL
            ? 'dv-horizontal'
            : 'dv-vertical');
    }
    get minimumSize() {
        return this.viewItems.reduce((r, item) => r + item.minimumSize, 0);
    }
    get maximumSize() {
        return this.length === 0
            ? Number.POSITIVE_INFINITY
            : this.viewItems.reduce((r, item) => r + item.maximumSize, 0);
    }
    get startSnappingEnabled() {
        return this._startSnappingEnabled;
    }
    set startSnappingEnabled(startSnappingEnabled) {
        if (this._startSnappingEnabled === startSnappingEnabled) {
            return;
        }
        this._startSnappingEnabled = startSnappingEnabled;
        this.updateSashEnablement();
    }
    get endSnappingEnabled() {
        return this._endSnappingEnabled;
    }
    set endSnappingEnabled(endSnappingEnabled) {
        if (this._endSnappingEnabled === endSnappingEnabled) {
            return;
        }
        this._endSnappingEnabled = endSnappingEnabled;
        this.updateSashEnablement();
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = value;
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(this.element, 'dv-splitview-disabled', value);
    }
    get margin() {
        return this._margin;
    }
    set margin(value) {
        this._margin = value;
    }
    constructor(container, options) {
        var _a, _b;
        this.container = container;
        this.viewItems = [];
        this.sashes = [];
        this._size = 0;
        this._orthogonalSize = 0;
        this._contentSize = 0;
        this._proportions = undefined;
        this._startSnappingEnabled = true;
        this._endSnappingEnabled = true;
        this._disabled = false;
        this._margin = 0;
        this._onDidSashEnd = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidSashEnd = this._onDidSashEnd.event;
        this._onDidAddView = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidAddView = this._onDidAddView.event;
        this._onDidRemoveView = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidRemoveView = this._onDidRemoveView.event;
        this.resize = (index, delta, sizes = this.viewItems.map((x) => x.size), lowPriorityIndexes, highPriorityIndexes, overloadMinDelta = Number.NEGATIVE_INFINITY, overloadMaxDelta = Number.POSITIVE_INFINITY, snapBefore, snapAfter) => {
            if (index < 0 || index > this.viewItems.length) {
                return 0;
            }
            const upIndexes = (0,_math__WEBPACK_IMPORTED_MODULE_3__.range)(index, -1);
            const downIndexes = (0,_math__WEBPACK_IMPORTED_MODULE_3__.range)(index + 1, this.viewItems.length);
            //
            if (highPriorityIndexes) {
                for (const i of highPriorityIndexes) {
                    (0,_array__WEBPACK_IMPORTED_MODULE_2__.pushToStart)(upIndexes, i);
                    (0,_array__WEBPACK_IMPORTED_MODULE_2__.pushToStart)(downIndexes, i);
                }
            }
            if (lowPriorityIndexes) {
                for (const i of lowPriorityIndexes) {
                    (0,_array__WEBPACK_IMPORTED_MODULE_2__.pushToEnd)(upIndexes, i);
                    (0,_array__WEBPACK_IMPORTED_MODULE_2__.pushToEnd)(downIndexes, i);
                }
            }
            //
            const upItems = upIndexes.map((i) => this.viewItems[i]);
            const upSizes = upIndexes.map((i) => sizes[i]);
            //
            const downItems = downIndexes.map((i) => this.viewItems[i]);
            const downSizes = downIndexes.map((i) => sizes[i]);
            //
            const minDeltaUp = upIndexes.reduce((_, i) => _ + this.viewItems[i].minimumSize - sizes[i], 0);
            const maxDeltaUp = upIndexes.reduce((_, i) => _ + this.viewItems[i].maximumSize - sizes[i], 0);
            //
            const maxDeltaDown = downIndexes.length === 0
                ? Number.POSITIVE_INFINITY
                : downIndexes.reduce((_, i) => _ + sizes[i] - this.viewItems[i].minimumSize, 0);
            const minDeltaDown = downIndexes.length === 0
                ? Number.NEGATIVE_INFINITY
                : downIndexes.reduce((_, i) => _ + sizes[i] - this.viewItems[i].maximumSize, 0);
            //
            const minDelta = Math.max(minDeltaUp, minDeltaDown);
            const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);
            //
            let snapped = false;
            if (snapBefore) {
                const snapView = this.viewItems[snapBefore.index];
                const visible = delta >= snapBefore.limitDelta;
                snapped = visible !== snapView.visible;
                snapView.setVisible(visible, snapBefore.size);
            }
            if (!snapped && snapAfter) {
                const snapView = this.viewItems[snapAfter.index];
                const visible = delta < snapAfter.limitDelta;
                snapped = visible !== snapView.visible;
                snapView.setVisible(visible, snapAfter.size);
            }
            if (snapped) {
                return this.resize(index, delta, sizes, lowPriorityIndexes, highPriorityIndexes, overloadMinDelta, overloadMaxDelta);
            }
            //
            const tentativeDelta = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(delta, minDelta, maxDelta);
            let actualDelta = 0;
            //
            let deltaUp = tentativeDelta;
            for (let i = 0; i < upItems.length; i++) {
                const item = upItems[i];
                const size = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(upSizes[i] + deltaUp, item.minimumSize, item.maximumSize);
                const viewDelta = size - upSizes[i];
                actualDelta += viewDelta;
                deltaUp -= viewDelta;
                item.size = size;
            }
            //
            let deltaDown = actualDelta;
            for (let i = 0; i < downItems.length; i++) {
                const item = downItems[i];
                const size = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(downSizes[i] - deltaDown, item.minimumSize, item.maximumSize);
                const viewDelta = size - downSizes[i];
                deltaDown += viewDelta;
                item.size = size;
            }
            //
            return delta;
        };
        this._orientation = (_a = options.orientation) !== null && _a !== void 0 ? _a : Orientation.VERTICAL;
        this.element = this.createContainer();
        this.margin = (_b = options.margin) !== null && _b !== void 0 ? _b : 0;
        this.proportionalLayout =
            options.proportionalLayout === undefined
                ? true
                : !!options.proportionalLayout;
        this.viewContainer = this.createViewContainer();
        this.sashContainer = this.createSashContainer();
        this.element.appendChild(this.sashContainer);
        this.element.appendChild(this.viewContainer);
        this.container.appendChild(this.element);
        this.style(options.styles);
        // We have an existing set of view, add them now
        if (options.descriptor) {
            this._size = options.descriptor.size;
            options.descriptor.views.forEach((viewDescriptor, index) => {
                const sizing = viewDescriptor.visible === undefined ||
                    viewDescriptor.visible
                    ? viewDescriptor.size
                    : {
                        type: 'invisible',
                        cachedVisibleSize: viewDescriptor.size,
                    };
                const view = viewDescriptor.view;
                this.addView(view, sizing, index, true
                // true skip layout
                );
            });
            // Initialize content size and proportions for first layout
            this._contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);
            this.saveProportions();
        }
    }
    style(styles) {
        if ((styles === null || styles === void 0 ? void 0 : styles.separatorBorder) === 'transparent') {
            (0,_dom__WEBPACK_IMPORTED_MODULE_0__.removeClasses)(this.element, 'dv-separator-border');
            this.element.style.removeProperty('--dv-separator-border');
        }
        else {
            (0,_dom__WEBPACK_IMPORTED_MODULE_0__.addClasses)(this.element, 'dv-separator-border');
            if (styles === null || styles === void 0 ? void 0 : styles.separatorBorder) {
                this.element.style.setProperty('--dv-separator-border', styles.separatorBorder);
            }
        }
    }
    isViewVisible(index) {
        if (index < 0 || index >= this.viewItems.length) {
            throw new Error('Index out of bounds');
        }
        const viewItem = this.viewItems[index];
        return viewItem.visible;
    }
    setViewVisible(index, visible) {
        if (index < 0 || index >= this.viewItems.length) {
            throw new Error('Index out of bounds');
        }
        const viewItem = this.viewItems[index];
        viewItem.setVisible(visible, viewItem.size);
        this.distributeEmptySpace(index);
        this.layoutViews();
        this.saveProportions();
    }
    getViewSize(index) {
        if (index < 0 || index >= this.viewItems.length) {
            return -1;
        }
        return this.viewItems[index].size;
    }
    resizeView(index, size) {
        if (index < 0 || index >= this.viewItems.length) {
            return;
        }
        const indexes = (0,_math__WEBPACK_IMPORTED_MODULE_3__.range)(this.viewItems.length).filter((i) => i !== index);
        const lowPriorityIndexes = [
            ...indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.Low),
            index,
        ];
        const highPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.High);
        const item = this.viewItems[index];
        size = Math.round(size);
        size = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(size, item.minimumSize, Math.min(item.maximumSize, this._size));
        item.size = size;
        this.relayout(lowPriorityIndexes, highPriorityIndexes);
    }
    getViews() {
        return this.viewItems.map((x) => x.view);
    }
    onDidChange(item, size) {
        const index = this.viewItems.indexOf(item);
        if (index < 0 || index >= this.viewItems.length) {
            return;
        }
        size = typeof size === 'number' ? size : item.size;
        size = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(size, item.minimumSize, item.maximumSize);
        item.size = size;
        const indexes = (0,_math__WEBPACK_IMPORTED_MODULE_3__.range)(this.viewItems.length).filter((i) => i !== index);
        const lowPriorityIndexes = [
            ...indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.Low),
            index,
        ];
        const highPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.High);
        /**
         * add this view we are changing to the low-index list since we have determined the size
         * here and don't want it changed
         */
        this.relayout([...lowPriorityIndexes, index], highPriorityIndexes);
    }
    addView(view, size = { type: 'distribute' }, index = this.viewItems.length, skipLayout) {
        const container = document.createElement('div');
        container.className = 'dv-view';
        container.appendChild(view.element);
        let viewSize;
        if (typeof size === 'number') {
            viewSize = size;
        }
        else if (size.type === 'split') {
            viewSize = this.getViewSize(size.index) / 2;
        }
        else if (size.type === 'invisible') {
            viewSize = { cachedVisibleSize: size.cachedVisibleSize };
        }
        else {
            viewSize = view.minimumSize;
        }
        const disposable = view.onDidChange((newSize) => this.onDidChange(viewItem, newSize.size));
        const viewItem = new _viewItem__WEBPACK_IMPORTED_MODULE_4__.ViewItem(container, view, viewSize, {
            dispose: () => {
                disposable.dispose();
                this.viewContainer.removeChild(container);
            },
        });
        if (index === this.viewItems.length) {
            this.viewContainer.appendChild(container);
        }
        else {
            this.viewContainer.insertBefore(container, this.viewContainer.children.item(index));
        }
        this.viewItems.splice(index, 0, viewItem);
        if (this.viewItems.length > 1) {
            //add sash
            const sash = document.createElement('div');
            sash.className = 'dv-sash';
            const onPointerStart = (event) => {
                for (const item of this.viewItems) {
                    item.enabled = false;
                }
                const iframes = (0,_dom__WEBPACK_IMPORTED_MODULE_0__.disableIframePointEvents)();
                const start = this._orientation === Orientation.HORIZONTAL
                    ? event.clientX
                    : event.clientY;
                const sashIndex = (0,_array__WEBPACK_IMPORTED_MODULE_2__.firstIndex)(this.sashes, (s) => s.container === sash);
                //
                const sizes = this.viewItems.map((x) => x.size);
                //
                let snapBefore;
                let snapAfter;
                const upIndexes = (0,_math__WEBPACK_IMPORTED_MODULE_3__.range)(sashIndex, -1);
                const downIndexes = (0,_math__WEBPACK_IMPORTED_MODULE_3__.range)(sashIndex + 1, this.viewItems.length);
                const minDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].minimumSize - sizes[i]), 0);
                const maxDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].viewMaximumSize - sizes[i]), 0);
                const maxDeltaDown = downIndexes.length === 0
                    ? Number.POSITIVE_INFINITY
                    : downIndexes.reduce((r, i) => r +
                        (sizes[i] - this.viewItems[i].minimumSize), 0);
                const minDeltaDown = downIndexes.length === 0
                    ? Number.NEGATIVE_INFINITY
                    : downIndexes.reduce((r, i) => r +
                        (sizes[i] -
                            this.viewItems[i].viewMaximumSize), 0);
                const minDelta = Math.max(minDeltaUp, minDeltaDown);
                const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);
                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);
                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);
                if (typeof snapBeforeIndex === 'number') {
                    const snappedViewItem = this.viewItems[snapBeforeIndex];
                    const halfSize = Math.floor(snappedViewItem.viewMinimumSize / 2);
                    snapBefore = {
                        index: snapBeforeIndex,
                        limitDelta: snappedViewItem.visible
                            ? minDelta - halfSize
                            : minDelta + halfSize,
                        size: snappedViewItem.size,
                    };
                }
                if (typeof snapAfterIndex === 'number') {
                    const snappedViewItem = this.viewItems[snapAfterIndex];
                    const halfSize = Math.floor(snappedViewItem.viewMinimumSize / 2);
                    snapAfter = {
                        index: snapAfterIndex,
                        limitDelta: snappedViewItem.visible
                            ? maxDelta + halfSize
                            : maxDelta - halfSize,
                        size: snappedViewItem.size,
                    };
                }
                const onPointerMove = (event) => {
                    const current = this._orientation === Orientation.HORIZONTAL
                        ? event.clientX
                        : event.clientY;
                    const delta = current - start;
                    this.resize(sashIndex, delta, sizes, undefined, undefined, minDelta, maxDelta, snapBefore, snapAfter);
                    this.distributeEmptySpace();
                    this.layoutViews();
                };
                const end = () => {
                    for (const item of this.viewItems) {
                        item.enabled = true;
                    }
                    iframes.release();
                    this.saveProportions();
                    document.removeEventListener('pointermove', onPointerMove);
                    document.removeEventListener('pointerup', end);
                    document.removeEventListener('pointercancel', end);
                    this._onDidSashEnd.fire(undefined);
                };
                document.addEventListener('pointermove', onPointerMove);
                document.addEventListener('pointerup', end);
                document.addEventListener('pointercancel', end);
            };
            sash.addEventListener('pointerdown', onPointerStart);
            const sashItem = {
                container: sash,
                disposable: () => {
                    sash.removeEventListener('pointerdown', onPointerStart);
                    this.sashContainer.removeChild(sash);
                },
            };
            this.sashContainer.appendChild(sash);
            this.sashes.push(sashItem);
        }
        if (!skipLayout) {
            this.relayout([index]);
        }
        if (!skipLayout &&
            typeof size !== 'number' &&
            size.type === 'distribute') {
            this.distributeViewSizes();
        }
        this._onDidAddView.fire(view);
    }
    distributeViewSizes() {
        const flexibleViewItems = [];
        let flexibleSize = 0;
        for (const item of this.viewItems) {
            if (item.maximumSize - item.minimumSize > 0) {
                flexibleViewItems.push(item);
                flexibleSize += item.size;
            }
        }
        const size = Math.floor(flexibleSize / flexibleViewItems.length);
        for (const item of flexibleViewItems) {
            item.size = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(size, item.minimumSize, item.maximumSize);
        }
        const indexes = (0,_math__WEBPACK_IMPORTED_MODULE_3__.range)(this.viewItems.length);
        const lowPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.Low);
        const highPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.High);
        this.relayout(lowPriorityIndexes, highPriorityIndexes);
    }
    removeView(index, sizing, skipLayout = false) {
        // Remove view
        const viewItem = this.viewItems.splice(index, 1)[0];
        viewItem.dispose();
        // Remove sash
        if (this.viewItems.length >= 1) {
            const sashIndex = Math.max(index - 1, 0);
            const sashItem = this.sashes.splice(sashIndex, 1)[0];
            sashItem.disposable();
        }
        if (!skipLayout) {
            this.relayout();
        }
        if (sizing && sizing.type === 'distribute') {
            this.distributeViewSizes();
        }
        this._onDidRemoveView.fire(viewItem.view);
        return viewItem.view;
    }
    getViewCachedVisibleSize(index) {
        if (index < 0 || index >= this.viewItems.length) {
            throw new Error('Index out of bounds');
        }
        const viewItem = this.viewItems[index];
        return viewItem.cachedVisibleSize;
    }
    moveView(from, to) {
        const cachedVisibleSize = this.getViewCachedVisibleSize(from);
        const sizing = typeof cachedVisibleSize === 'undefined'
            ? this.getViewSize(from)
            : Sizing.Invisible(cachedVisibleSize);
        const view = this.removeView(from, undefined, true);
        this.addView(view, sizing, to);
    }
    layout(size, orthogonalSize) {
        const previousSize = Math.max(this.size, this._contentSize);
        this.size = size;
        this.orthogonalSize = orthogonalSize;
        if (!this.proportions) {
            const indexes = (0,_math__WEBPACK_IMPORTED_MODULE_3__.range)(this.viewItems.length);
            const lowPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.Low);
            const highPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.High);
            this.resize(this.viewItems.length - 1, size - previousSize, undefined, lowPriorityIndexes, highPriorityIndexes);
        }
        else {
            let total = 0;
            for (let i = 0; i < this.viewItems.length; i++) {
                const item = this.viewItems[i];
                const proportion = this.proportions[i];
                if (typeof proportion === 'number') {
                    total += proportion;
                }
                else {
                    size -= item.size;
                }
            }
            for (let i = 0; i < this.viewItems.length; i++) {
                const item = this.viewItems[i];
                const proportion = this.proportions[i];
                if (typeof proportion === 'number' && total > 0) {
                    item.size = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(Math.round((proportion * size) / total), item.minimumSize, item.maximumSize);
                }
            }
        }
        this.distributeEmptySpace();
        this.layoutViews();
    }
    relayout(lowPriorityIndexes, highPriorityIndexes) {
        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);
        this.resize(this.viewItems.length - 1, this._size - contentSize, undefined, lowPriorityIndexes, highPriorityIndexes);
        this.distributeEmptySpace();
        this.layoutViews();
        this.saveProportions();
    }
    distributeEmptySpace(lowPriorityIndex) {
        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);
        let emptyDelta = this.size - contentSize;
        const indexes = (0,_math__WEBPACK_IMPORTED_MODULE_3__.range)(this.viewItems.length - 1, -1);
        const lowPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.Low);
        const highPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.High);
        for (const index of highPriorityIndexes) {
            (0,_array__WEBPACK_IMPORTED_MODULE_2__.pushToStart)(indexes, index);
        }
        for (const index of lowPriorityIndexes) {
            (0,_array__WEBPACK_IMPORTED_MODULE_2__.pushToEnd)(indexes, index);
        }
        if (typeof lowPriorityIndex === 'number') {
            (0,_array__WEBPACK_IMPORTED_MODULE_2__.pushToEnd)(indexes, lowPriorityIndex);
        }
        for (let i = 0; emptyDelta !== 0 && i < indexes.length; i++) {
            const item = this.viewItems[indexes[i]];
            const size = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(item.size + emptyDelta, item.minimumSize, item.maximumSize);
            const viewDelta = size - item.size;
            emptyDelta -= viewDelta;
            item.size = size;
        }
    }
    saveProportions() {
        if (this.proportionalLayout && this._contentSize > 0) {
            this._proportions = this.viewItems.map((i) => i.visible ? i.size / this._contentSize : undefined);
        }
    }
    /**
     * Margin explain:
     *
     * For `n` views in a splitview there will be `n-1` margins `m`.
     *
     * To fit the margins each view must reduce in size by `(m * (n - 1)) / n`.
     *
     * For each view `i` the offet must be adjusted by `m * i/(n - 1)`.
     */
    layoutViews() {
        this._contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);
        this.updateSashEnablement();
        if (this.viewItems.length === 0) {
            return;
        }
        const visibleViewItems = this.viewItems.filter((i) => i.visible);
        const sashCount = Math.max(0, visibleViewItems.length - 1);
        const marginReducedSize = (this.margin * sashCount) / Math.max(1, visibleViewItems.length);
        let totalLeftOffset = 0;
        const viewLeftOffsets = [];
        const sashWidth = 4; // hardcoded in css
        const runningVisiblePanelCount = this.viewItems.reduce((arr, viewItem, i) => {
            const flag = viewItem.visible ? 1 : 0;
            if (i === 0) {
                arr.push(flag);
            }
            else {
                arr.push(arr[i - 1] + flag);
            }
            return arr;
        }, []);
        // calculate both view and cash positions
        this.viewItems.forEach((view, i) => {
            totalLeftOffset += this.viewItems[i].size;
            viewLeftOffsets.push(totalLeftOffset);
            const size = view.visible ? view.size - marginReducedSize : 0;
            const visiblePanelsBeforeThisView = Math.max(0, runningVisiblePanelCount[i] - 1);
            const offset = i === 0 || visiblePanelsBeforeThisView === 0
                ? 0
                : viewLeftOffsets[i - 1] +
                    (visiblePanelsBeforeThisView / sashCount) *
                        marginReducedSize;
            if (i < this.viewItems.length - 1) {
                // calculate sash position
                const newSize = view.visible
                    ? offset + size - sashWidth / 2 + this.margin / 2
                    : offset;
                if (this._orientation === Orientation.HORIZONTAL) {
                    this.sashes[i].container.style.left = `${newSize}px`;
                    this.sashes[i].container.style.top = `0px`;
                }
                if (this._orientation === Orientation.VERTICAL) {
                    this.sashes[i].container.style.left = `0px`;
                    this.sashes[i].container.style.top = `${newSize}px`;
                }
            }
            // calculate view position
            if (this._orientation === Orientation.HORIZONTAL) {
                view.container.style.width = `${size}px`;
                view.container.style.left = `${offset}px`;
                view.container.style.top = '';
                view.container.style.height = '';
            }
            if (this._orientation === Orientation.VERTICAL) {
                view.container.style.height = `${size}px`;
                view.container.style.top = `${offset}px`;
                view.container.style.width = '';
                view.container.style.left = '';
            }
            view.view.layout(view.size - marginReducedSize, this._orthogonalSize);
        });
    }
    findFirstSnapIndex(indexes) {
        // visible views first
        for (const index of indexes) {
            const viewItem = this.viewItems[index];
            if (!viewItem.visible) {
                continue;
            }
            if (viewItem.snap) {
                return index;
            }
        }
        // then, hidden views
        for (const index of indexes) {
            const viewItem = this.viewItems[index];
            if (viewItem.visible &&
                viewItem.maximumSize - viewItem.minimumSize > 0) {
                return undefined;
            }
            if (!viewItem.visible && viewItem.snap) {
                return index;
            }
        }
        return undefined;
    }
    updateSashEnablement() {
        let previous = false;
        const collapsesDown = this.viewItems.map((i) => (previous = i.size - i.minimumSize > 0 || previous));
        previous = false;
        const expandsDown = this.viewItems.map((i) => (previous = i.maximumSize - i.size > 0 || previous));
        const reverseViews = [...this.viewItems].reverse();
        previous = false;
        const collapsesUp = reverseViews
            .map((i) => (previous = i.size - i.minimumSize > 0 || previous))
            .reverse();
        previous = false;
        const expandsUp = reverseViews
            .map((i) => (previous = i.maximumSize - i.size > 0 || previous))
            .reverse();
        let position = 0;
        for (let index = 0; index < this.sashes.length; index++) {
            const sash = this.sashes[index];
            const viewItem = this.viewItems[index];
            position += viewItem.size;
            const min = !(collapsesDown[index] && expandsUp[index + 1]);
            const max = !(expandsDown[index] && collapsesUp[index + 1]);
            if (min && max) {
                const upIndexes = (0,_math__WEBPACK_IMPORTED_MODULE_3__.range)(index, -1);
                const downIndexes = (0,_math__WEBPACK_IMPORTED_MODULE_3__.range)(index + 1, this.viewItems.length);
                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);
                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);
                const snappedBefore = typeof snapBeforeIndex === 'number' &&
                    !this.viewItems[snapBeforeIndex].visible;
                const snappedAfter = typeof snapAfterIndex === 'number' &&
                    !this.viewItems[snapAfterIndex].visible;
                if (snappedBefore &&
                    collapsesUp[index] &&
                    (position > 0 || this.startSnappingEnabled)) {
                    this.updateSash(sash, SashState.MINIMUM);
                }
                else if (snappedAfter &&
                    collapsesDown[index] &&
                    (position < this._contentSize || this.endSnappingEnabled)) {
                    this.updateSash(sash, SashState.MAXIMUM);
                }
                else {
                    this.updateSash(sash, SashState.DISABLED);
                }
            }
            else if (min && !max) {
                this.updateSash(sash, SashState.MINIMUM);
            }
            else if (!min && max) {
                this.updateSash(sash, SashState.MAXIMUM);
            }
            else {
                this.updateSash(sash, SashState.ENABLED);
            }
        }
    }
    updateSash(sash, state) {
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(sash.container, 'dv-disabled', state === SashState.DISABLED);
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(sash.container, 'dv-enabled', state === SashState.ENABLED);
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(sash.container, 'dv-maximum', state === SashState.MAXIMUM);
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(sash.container, 'dv-minimum', state === SashState.MINIMUM);
    }
    createViewContainer() {
        const element = document.createElement('div');
        element.className = 'dv-view-container';
        return element;
    }
    createSashContainer() {
        const element = document.createElement('div');
        element.className = 'dv-sash-container';
        return element;
    }
    createContainer() {
        const element = document.createElement('div');
        const orientationClassname = this._orientation === Orientation.HORIZONTAL
            ? 'dv-horizontal'
            : 'dv-vertical';
        element.className = `dv-split-view-container ${orientationClassname}`;
        return element;
    }
    dispose() {
        this._onDidSashEnd.dispose();
        this._onDidAddView.dispose();
        this._onDidRemoveView.dispose();
        for (let i = 0; i < this.element.children.length; i++) {
            if (this.element.children.item(i) === this.element) {
                this.element.removeChild(this.element);
                break;
            }
        }
        for (const viewItem of this.viewItems) {
            viewItem.dispose();
        }
        this.element.remove();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/splitview/splitviewComponent.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/splitview/splitviewComponent.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SplitviewComponent: () => (/* binding */ SplitviewComponent)
/* harmony export */ });
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _splitview__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./splitview */ "./node_modules/dockview-core/dist/esm/splitview/splitview.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _resizable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../resizable */ "./node_modules/dockview-core/dist/esm/resizable.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");





/**
 * A high-level implementation of splitview that works using 'panels'
 */
class SplitviewComponent extends _resizable__WEBPACK_IMPORTED_MODULE_3__.Resizable {
    get panels() {
        return this.splitview.getViews();
    }
    get options() {
        return this._options;
    }
    get length() {
        return this._panels.size;
    }
    get orientation() {
        return this.splitview.orientation;
    }
    get splitview() {
        return this._splitview;
    }
    set splitview(value) {
        this._splitview = value;
        this._splitviewChangeDisposable.value = new _lifecycle__WEBPACK_IMPORTED_MODULE_0__.CompositeDisposable(this._splitview.onDidSashEnd(() => {
            this._onDidLayoutChange.fire(undefined);
        }), this._splitview.onDidAddView((e) => this._onDidAddView.fire(e)), this._splitview.onDidRemoveView((e) => this._onDidRemoveView.fire(e)));
    }
    get minimumSize() {
        return this.splitview.minimumSize;
    }
    get maximumSize() {
        return this.splitview.maximumSize;
    }
    get height() {
        return this.splitview.orientation === _splitview__WEBPACK_IMPORTED_MODULE_1__.Orientation.HORIZONTAL
            ? this.splitview.orthogonalSize
            : this.splitview.size;
    }
    get width() {
        return this.splitview.orientation === _splitview__WEBPACK_IMPORTED_MODULE_1__.Orientation.HORIZONTAL
            ? this.splitview.size
            : this.splitview.orthogonalSize;
    }
    constructor(container, options) {
        var _a;
        super(document.createElement('div'), options.disableAutoResizing);
        this._splitviewChangeDisposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_0__.MutableDisposable();
        this._panels = new Map();
        this._onDidLayoutfromJSON = new _events__WEBPACK_IMPORTED_MODULE_2__.Emitter();
        this.onDidLayoutFromJSON = this._onDidLayoutfromJSON.event;
        this._onDidAddView = new _events__WEBPACK_IMPORTED_MODULE_2__.Emitter();
        this.onDidAddView = this._onDidAddView.event;
        this._onDidRemoveView = new _events__WEBPACK_IMPORTED_MODULE_2__.Emitter();
        this.onDidRemoveView = this._onDidRemoveView.event;
        this._onDidLayoutChange = new _events__WEBPACK_IMPORTED_MODULE_2__.Emitter();
        this.onDidLayoutChange = this._onDidLayoutChange.event;
        this.element.style.height = '100%';
        this.element.style.width = '100%';
        this._classNames = new _dom__WEBPACK_IMPORTED_MODULE_4__.Classnames(this.element);
        this._classNames.setClassNames((_a = options.className) !== null && _a !== void 0 ? _a : '');
        // the container is owned by the third-party, do not modify/delete it
        container.appendChild(this.element);
        this._options = options;
        this.splitview = new _splitview__WEBPACK_IMPORTED_MODULE_1__.Splitview(this.element, options);
        this.addDisposables(this._onDidAddView, this._onDidLayoutfromJSON, this._onDidRemoveView, this._onDidLayoutChange);
    }
    updateOptions(options) {
        var _a, _b;
        if ('className' in options) {
            this._classNames.setClassNames((_a = options.className) !== null && _a !== void 0 ? _a : '');
        }
        if ('disableResizing' in options) {
            this.disableResizing = (_b = options.disableAutoResizing) !== null && _b !== void 0 ? _b : false;
        }
        if (typeof options.orientation === 'string') {
            this.splitview.orientation = options.orientation;
        }
        this._options = Object.assign(Object.assign({}, this.options), options);
        this.splitview.layout(this.splitview.size, this.splitview.orthogonalSize);
    }
    focus() {
        var _a;
        (_a = this._activePanel) === null || _a === void 0 ? void 0 : _a.focus();
    }
    movePanel(from, to) {
        this.splitview.moveView(from, to);
    }
    setVisible(panel, visible) {
        const index = this.panels.indexOf(panel);
        this.splitview.setViewVisible(index, visible);
    }
    setActive(panel, skipFocus) {
        this._activePanel = panel;
        this.panels
            .filter((v) => v !== panel)
            .forEach((v) => {
            v.api._onDidActiveChange.fire({ isActive: false });
            if (!skipFocus) {
                v.focus();
            }
        });
        panel.api._onDidActiveChange.fire({ isActive: true });
        if (!skipFocus) {
            panel.focus();
        }
    }
    removePanel(panel, sizing) {
        const item = this._panels.get(panel.id);
        if (!item) {
            throw new Error(`unknown splitview panel ${panel.id}`);
        }
        item.dispose();
        this._panels.delete(panel.id);
        const index = this.panels.findIndex((_) => _ === panel);
        const removedView = this.splitview.removeView(index, sizing);
        removedView.dispose();
        const panels = this.panels;
        if (panels.length > 0) {
            this.setActive(panels[panels.length - 1]);
        }
    }
    getPanel(id) {
        return this.panels.find((view) => view.id === id);
    }
    addPanel(options) {
        var _a;
        if (this._panels.has(options.id)) {
            throw new Error(`panel ${options.id} already exists`);
        }
        const view = this.options.createComponent({
            id: options.id,
            name: options.component,
        });
        view.orientation = this.splitview.orientation;
        view.init({
            params: (_a = options.params) !== null && _a !== void 0 ? _a : {},
            minimumSize: options.minimumSize,
            maximumSize: options.maximumSize,
            snap: options.snap,
            priority: options.priority,
            accessor: this,
        });
        const size = typeof options.size === 'number' ? options.size : _splitview__WEBPACK_IMPORTED_MODULE_1__.Sizing.Distribute;
        const index = typeof options.index === 'number' ? options.index : undefined;
        this.splitview.addView(view, size, index);
        this.doAddView(view);
        this.setActive(view);
        return view;
    }
    layout(width, height) {
        const [size, orthogonalSize] = this.splitview.orientation === _splitview__WEBPACK_IMPORTED_MODULE_1__.Orientation.HORIZONTAL
            ? [width, height]
            : [height, width];
        this.splitview.layout(size, orthogonalSize);
    }
    doAddView(view) {
        const disposable = view.api.onDidFocusChange((event) => {
            if (!event.isFocused) {
                return;
            }
            this.setActive(view, true);
        });
        this._panels.set(view.id, disposable);
    }
    toJSON() {
        var _a;
        const views = this.splitview
            .getViews()
            .map((view, i) => {
            const size = this.splitview.getViewSize(i);
            return {
                size,
                data: view.toJSON(),
                snap: !!view.snap,
                priority: view.priority,
            };
        });
        return {
            views,
            activeView: (_a = this._activePanel) === null || _a === void 0 ? void 0 : _a.id,
            size: this.splitview.size,
            orientation: this.splitview.orientation,
        };
    }
    fromJSON(serializedSplitview) {
        this.clear();
        const { views, orientation, size, activeView } = serializedSplitview;
        const queue = [];
        // take note of the existing dimensions
        const width = this.width;
        const height = this.height;
        this.splitview = new _splitview__WEBPACK_IMPORTED_MODULE_1__.Splitview(this.element, {
            orientation,
            proportionalLayout: this.options.proportionalLayout,
            descriptor: {
                size,
                views: views.map((view) => {
                    const data = view.data;
                    if (this._panels.has(data.id)) {
                        throw new Error(`panel ${data.id} already exists`);
                    }
                    const panel = this.options.createComponent({
                        id: data.id,
                        name: data.component,
                    });
                    queue.push(() => {
                        var _a;
                        panel.init({
                            params: (_a = data.params) !== null && _a !== void 0 ? _a : {},
                            minimumSize: data.minimumSize,
                            maximumSize: data.maximumSize,
                            snap: view.snap,
                            priority: view.priority,
                            accessor: this,
                        });
                    });
                    panel.orientation = orientation;
                    this.doAddView(panel);
                    setTimeout(() => {
                        // the original onDidAddView events are missed since they are fired before we can subcribe to them
                        this._onDidAddView.fire(panel);
                    }, 0);
                    return { size: view.size, view: panel };
                }),
            },
        });
        this.layout(width, height);
        queue.forEach((f) => f());
        if (typeof activeView === 'string') {
            const panel = this.getPanel(activeView);
            if (panel) {
                this.setActive(panel);
            }
        }
        this._onDidLayoutfromJSON.fire();
    }
    clear() {
        for (const disposable of this._panels.values()) {
            disposable.dispose();
        }
        this._panels.clear();
        while (this.splitview.length > 0) {
            const view = this.splitview.removeView(0, _splitview__WEBPACK_IMPORTED_MODULE_1__.Sizing.Distribute, true);
            view.dispose();
        }
    }
    dispose() {
        for (const disposable of this._panels.values()) {
            disposable.dispose();
        }
        this._panels.clear();
        const views = this.splitview.getViews();
        this._splitviewChangeDisposable.dispose();
        this.splitview.dispose();
        for (const view of views) {
            view.dispose();
        }
        super.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/splitview/splitviewPanel.js":
/*!*************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/splitview/splitviewPanel.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SplitviewPanel: () => (/* binding */ SplitviewPanel)
/* harmony export */ });
/* harmony import */ var _gridview_basePanelView__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../gridview/basePanelView */ "./node_modules/dockview-core/dist/esm/gridview/basePanelView.js");
/* harmony import */ var _api_splitviewPanelApi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../api/splitviewPanelApi */ "./node_modules/dockview-core/dist/esm/api/splitviewPanelApi.js");
/* harmony import */ var _splitview__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./splitview */ "./node_modules/dockview-core/dist/esm/splitview/splitview.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");




class SplitviewPanel extends _gridview_basePanelView__WEBPACK_IMPORTED_MODULE_0__.BasePanelView {
    get priority() {
        return this._priority;
    }
    set orientation(value) {
        this._orientation = value;
    }
    get orientation() {
        return this._orientation;
    }
    get minimumSize() {
        const size = typeof this._minimumSize === 'function'
            ? this._minimumSize()
            : this._minimumSize;
        if (size !== this._evaluatedMinimumSize) {
            this._evaluatedMinimumSize = size;
            this.updateConstraints();
        }
        return size;
    }
    get maximumSize() {
        const size = typeof this._maximumSize === 'function'
            ? this._maximumSize()
            : this._maximumSize;
        if (size !== this._evaluatedMaximumSize) {
            this._evaluatedMaximumSize = size;
            this.updateConstraints();
        }
        return size;
    }
    get snap() {
        return this._snap;
    }
    constructor(id, componentName) {
        super(id, componentName, new _api_splitviewPanelApi__WEBPACK_IMPORTED_MODULE_1__.SplitviewPanelApiImpl(id, componentName));
        this._evaluatedMinimumSize = 0;
        this._evaluatedMaximumSize = Number.POSITIVE_INFINITY;
        this._minimumSize = 0;
        this._maximumSize = Number.POSITIVE_INFINITY;
        this._snap = false;
        this._onDidChange = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onDidChange = this._onDidChange.event;
        this.api.initialize(this);
        this.addDisposables(this._onDidChange, this.api.onWillVisibilityChange((event) => {
            const { isVisible } = event;
            const { accessor } = this._params;
            accessor.setVisible(this, isVisible);
        }), this.api.onActiveChange(() => {
            const { accessor } = this._params;
            accessor.setActive(this);
        }), this.api.onDidConstraintsChangeInternal((event) => {
            if (typeof event.minimumSize === 'number' ||
                typeof event.minimumSize === 'function') {
                this._minimumSize = event.minimumSize;
            }
            if (typeof event.maximumSize === 'number' ||
                typeof event.maximumSize === 'function') {
                this._maximumSize = event.maximumSize;
            }
            this.updateConstraints();
        }), this.api.onDidSizeChange((event) => {
            this._onDidChange.fire({ size: event.size });
        }));
    }
    setVisible(isVisible) {
        this.api._onDidVisibilityChange.fire({ isVisible });
    }
    setActive(isActive) {
        this.api._onDidActiveChange.fire({ isActive });
    }
    layout(size, orthogonalSize) {
        const [width, height] = this.orientation === _splitview__WEBPACK_IMPORTED_MODULE_2__.Orientation.HORIZONTAL
            ? [size, orthogonalSize]
            : [orthogonalSize, size];
        super.layout(width, height);
    }
    init(parameters) {
        super.init(parameters);
        this._priority = parameters.priority;
        if (parameters.minimumSize) {
            this._minimumSize = parameters.minimumSize;
        }
        if (parameters.maximumSize) {
            this._maximumSize = parameters.maximumSize;
        }
        if (parameters.snap) {
            this._snap = parameters.snap;
        }
    }
    toJSON() {
        const maximum = (value) => value === Number.MAX_SAFE_INTEGER ||
            value === Number.POSITIVE_INFINITY
            ? undefined
            : value;
        const minimum = (value) => (value <= 0 ? undefined : value);
        return Object.assign(Object.assign({}, super.toJSON()), { minimumSize: minimum(this.minimumSize), maximumSize: maximum(this.maximumSize) });
    }
    updateConstraints() {
        this.api._onDidConstraintsChange.fire({
            maximumSize: this._evaluatedMaximumSize,
            minimumSize: this._evaluatedMinimumSize,
        });
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/splitview/viewItem.js":
/*!*******************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/splitview/viewItem.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ViewItem: () => (/* binding */ ViewItem)
/* harmony export */ });
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math */ "./node_modules/dockview-core/dist/esm/math.js");

class ViewItem {
    set size(size) {
        this._size = size;
    }
    get size() {
        return this._size;
    }
    get cachedVisibleSize() {
        return this._cachedVisibleSize;
    }
    get visible() {
        return typeof this._cachedVisibleSize === 'undefined';
    }
    get minimumSize() {
        return this.visible ? this.view.minimumSize : 0;
    }
    get viewMinimumSize() {
        return this.view.minimumSize;
    }
    get maximumSize() {
        return this.visible ? this.view.maximumSize : 0;
    }
    get viewMaximumSize() {
        return this.view.maximumSize;
    }
    get priority() {
        return this.view.priority;
    }
    get snap() {
        return !!this.view.snap;
    }
    set enabled(enabled) {
        this.container.style.pointerEvents = enabled ? '' : 'none';
    }
    constructor(container, view, size, disposable) {
        this.container = container;
        this.view = view;
        this.disposable = disposable;
        this._cachedVisibleSize = undefined;
        if (typeof size === 'number') {
            this._size = size;
            this._cachedVisibleSize = undefined;
            container.classList.add('visible');
        }
        else {
            this._size = 0;
            this._cachedVisibleSize = size.cachedVisibleSize;
        }
    }
    setVisible(visible, size) {
        var _a;
        if (visible === this.visible) {
            return;
        }
        if (visible) {
            this.size = (0,_math__WEBPACK_IMPORTED_MODULE_0__.clamp)((_a = this._cachedVisibleSize) !== null && _a !== void 0 ? _a : 0, this.viewMinimumSize, this.viewMaximumSize);
            this._cachedVisibleSize = undefined;
        }
        else {
            this._cachedVisibleSize =
                typeof size === 'number' ? size : this.size;
            this.size = 0;
        }
        this.container.classList.toggle('visible', visible);
        if (this.view.setVisible) {
            this.view.setVisible(visible);
        }
    }
    dispose() {
        this.disposable.dispose();
        return this.view;
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/svg.js":
/*!****************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/svg.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createChevronRightButton: () => (/* binding */ createChevronRightButton),
/* harmony export */   createCloseButton: () => (/* binding */ createCloseButton),
/* harmony export */   createExpandMoreButton: () => (/* binding */ createExpandMoreButton)
/* harmony export */ });
const createSvgElementFromPath = (params) => {
    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    svg.setAttributeNS(null, 'height', params.height);
    svg.setAttributeNS(null, 'width', params.width);
    svg.setAttributeNS(null, 'viewBox', params.viewbox);
    svg.setAttributeNS(null, 'aria-hidden', 'false');
    svg.setAttributeNS(null, 'focusable', 'false');
    svg.classList.add('dv-svg');
    const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
    path.setAttributeNS(null, 'd', params.path);
    svg.appendChild(path);
    return svg;
};
const createCloseButton = () => createSvgElementFromPath({
    width: '11',
    height: '11',
    viewbox: '0 0 28 28',
    path: 'M2.1 27.3L0 25.2L11.55 13.65L0 2.1L2.1 0L13.65 11.55L25.2 0L27.3 2.1L15.75 13.65L27.3 25.2L25.2 27.3L13.65 15.75L2.1 27.3Z',
});
const createExpandMoreButton = () => createSvgElementFromPath({
    width: '11',
    height: '11',
    viewbox: '0 0 24 15',
    path: 'M12 14.15L0 2.15L2.15 0L12 9.9L21.85 0.0499992L24 2.2L12 14.15Z',
});
const createChevronRightButton = () => createSvgElementFromPath({
    width: '11',
    height: '11',
    viewbox: '0 0 15 25',
    path: 'M2.15 24.1L0 21.95L9.9 12.05L0 2.15L2.15 0L14.2 12.05L2.15 24.1Z',
});


/***/ }),

/***/ "./node_modules/dockview-core/dist/styles/dockview.css":
/*!*************************************************************!*\
  !*** ./node_modules/dockview-core/dist/styles/dockview.css ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _css_loader_dist_cjs_js_ruleSet_1_rules_0_use_1_dockview_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./dockview.css */ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/dockview-core/dist/styles/dockview.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_ruleSet_1_rules_0_use_1_dockview_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_ruleSet_1_rules_0_use_1_dockview_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _css_loader_dist_cjs_js_ruleSet_1_rules_0_use_1_dockview_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _css_loader_dist_cjs_js_ruleSet_1_rules_0_use_1_dockview_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {



var stylesInDOM = [];
function getIndexByIdentifier(identifier) {
  var result = -1;
  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }
  return result;
}
function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];
  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };
    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }
    identifiers.push(identifier);
  }
  return identifiers;
}
function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);
  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }
      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };
  return updater;
}
module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];
    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }
    var newLastIdentifiers = modulesToDom(newList, options);
    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];
      var _index = getIndexByIdentifier(_identifier);
      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();
        stylesInDOM.splice(_index, 1);
      }
    }
    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {



var memo = {};

/* istanbul ignore next  */
function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target);

    // Special case to return head of iframe instead of iframe itself
    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }
    memo[target] = styleTarget;
  }
  return memo[target];
}

/* istanbul ignore next  */
function insertBySelector(insert, style) {
  var target = getTarget(insert);
  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }
  target.appendChild(style);
}
module.exports = insertBySelector;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {



/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}
module.exports = insertStyleElement;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;
  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}
module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {



/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";
  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }
  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }
  var needLayer = typeof obj.layer !== "undefined";
  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }
  css += obj.css;
  if (needLayer) {
    css += "}";
  }
  if (obj.media) {
    css += "}";
  }
  if (obj.supports) {
    css += "}";
  }
  var sourceMap = obj.sourceMap;
  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  }

  // For old IE
  /* istanbul ignore if  */
  options.styleTagTransform(css, styleElement, options.options);
}
function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }
  styleElement.parentNode.removeChild(styleElement);
}

/* istanbul ignore next  */
function domAPI(options) {
  if (typeof document === "undefined") {
    return {
      update: function update() {},
      remove: function remove() {}
    };
  }
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}
module.exports = domAPI;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {



/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }
    styleElement.appendChild(document.createTextNode(css));
  }
}
module.exports = styleTagTransform;

/***/ }),

/***/ "widgets":
/*!******************************!*\
  !*** external "HTMLWidgets" ***!
  \******************************/
/***/ ((module) => {

module.exports = HTMLWidgets;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry needs to be wrapped in an IIFE because it needs to be isolated against other modules in the chunk.
(() => {
/*!************************************!*\
  !*** ./srcjs/widgets/dock_view.js ***!
  \************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var widgets__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! widgets */ "widgets");
/* harmony import */ var widgets__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(widgets__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var dockview_core_dist_styles_dockview_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! dockview-core/dist/styles/dockview.css */ "./node_modules/dockview-core/dist/styles/dockview.css");
/* harmony import */ var dockview_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dockview-core */ "./node_modules/dockview-core/dist/esm/index.js");





class Panel {
  get element() {
    return this._element
  }

  constructor() {
    this._element = document.createElement("div")
    this._element.style.color = "white"
  }

  init(parameters) {
    this._element.textContent = "Hello World"
  }
}

HTMLWidgets.widget({

  name: 'dock_view',

  type: 'output',

  factory: function (el, width, height) {

    // TODO: define shared variables for this instance

    return {

      renderValue: function (x, id = el.id) {

        // TODO: code to render the widget, e.g.
        const api = (0,dockview_core__WEBPACK_IMPORTED_MODULE_2__.createDockview)(document.getElementById(id), {
          className: "dockview-theme-abyss",
          createComponent: options => {
            switch (options.name) {
              case "default":
                return new Panel()
            }
          }
        })

        api.addPanel({
          id: "panel_1",
          component: "default",
          title: "Panel 1"
        })

        api.addPanel({
          id: "panel_2",
          component: "default",
          position: { referencePanel: "panel_1", direction: "right" },
          title: "Panel 2"
        })

      },

      resize: function (width, height) {

        // TODO: code to re-render the widget with a new size

      }

    };
  }
});

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9ja192aWV3LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ21HO0FBQ2pCO0FBQ2xGLDhCQUE4QixzRUFBMkIsQ0FBQywrRUFBcUM7QUFDL0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLE9BQU8sc0hBQXNILFlBQVksYUFBYSxXQUFXLFlBQVksV0FBVyxNQUFNLEtBQUssWUFBWSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsT0FBTyxLQUFLLFlBQVksYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLE9BQU8sS0FBSyxZQUFZLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxNQUFNLEtBQUssWUFBWSxhQUFhLE1BQU0sS0FBSyxZQUFZLE1BQU0sS0FBSyxZQUFZLE1BQU0sS0FBSyxZQUFZLGFBQWEsTUFBTSxLQUFLLFlBQVksTUFBTSxLQUFLLFlBQVksT0FBTyxLQUFLLFlBQVksYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsT0FBTyxLQUFLLFlBQVksYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsTUFBTSxLQUFLLFlBQVksTUFBTSxLQUFLLFlBQVksV0FBVyxVQUFVLFVBQVUsVUFBVSxVQUFVLFlBQVksV0FBVyxLQUFLLEtBQUssWUFBWSxNQUFNLEtBQUssWUFBWSxXQUFXLFVBQVUsVUFBVSxVQUFVLFVBQVUsWUFBWSxXQUFXLE1BQU0sS0FBSyxZQUFZLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsTUFBTSxLQUFLLFlBQVksTUFBTSxLQUFLLFlBQVksYUFBYSxNQUFNLEtBQUssWUFBWSxNQUFNLEtBQUssVUFBVSxZQUFZLE1BQU0sS0FBSyxVQUFVLFVBQVUsS0FBSyxLQUFLLFlBQVksTUFBTSxLQUFLLFlBQVksTUFBTSxLQUFLLFlBQVksTUFBTSxLQUFLLFlBQVksTUFBTSxLQUFLLFVBQVUsVUFBVSxVQUFVLFlBQVksV0FBVyxVQUFVLFlBQVksYUFBYSxhQUFhLE1BQU0sS0FBSyxZQUFZLE1BQU0sS0FBSyxVQUFVLFVBQVUsVUFBVSxZQUFZLFdBQVcsVUFBVSxZQUFZLGFBQWEsYUFBYSxNQUFNLEtBQUssWUFBWSxNQUFNLEtBQUssWUFBWSxNQUFNLEtBQUssWUFBWSxXQUFXLFVBQVUsVUFBVSxVQUFVLFVBQVUsWUFBWSxNQUFNLEtBQUssWUFBWSxhQUFhLFdBQVcsVUFBVSxZQUFZLGFBQWEsYUFBYSxhQUFhLE1BQU0sS0FBSyxZQUFZLE1BQU0sS0FBSyxZQUFZLE1BQU0sS0FBSyxZQUFZLE1BQU0sS0FBSyxZQUFZLE1BQU0sS0FBSyxZQUFZLGFBQWEsTUFBTSxLQUFLLFlBQVksV0FBVyxVQUFVLFVBQVUsVUFBVSxVQUFVLEtBQUssS0FBSyxZQUFZLE9BQU8sS0FBSyxZQUFZLGFBQWEsTUFBTSxLQUFLLFlBQVksYUFBYSxNQUFNLEtBQUssWUFBWSxhQUFhLE1BQU0sS0FBSyxZQUFZLGFBQWEsT0FBTyxPQUFPLEtBQUssS0FBSyxZQUFZLGFBQWEsTUFBTSxLQUFLLFVBQVUsWUFBWSxXQUFXLFlBQVksYUFBYSxNQUFNLEtBQUssVUFBVSxLQUFLLEtBQUssVUFBVSxVQUFVLFVBQVUsS0FBSyxLQUFLLFVBQVUsVUFBVSxLQUFLLE1BQU0sVUFBVSxVQUFVLEtBQUssS0FBSyxZQUFZLE1BQU0sS0FBSyxZQUFZLE1BQU0sS0FBSyxZQUFZLE1BQU0sS0FBSyxZQUFZLE1BQU0sUUFBUSxZQUFZLE9BQU8sS0FBSyxZQUFZLGFBQWEsYUFBYSxhQUFhLGFBQWEsTUFBTSxLQUFLLFVBQVUsS0FBSyxLQUFLLFVBQVUsS0FBSyxLQUFLLFVBQVUsWUFBWSxXQUFXLFVBQVUsWUFBWSxhQUFhLGFBQWEsTUFBTSxLQUFLLFVBQVUsWUFBWSxXQUFXLFVBQVUsWUFBWSxhQUFhLGFBQWEsTUFBTSxLQUFLLFlBQVksV0FBVyxVQUFVLFVBQVUsWUFBWSxhQUFhLGFBQWEsTUFBTSxLQUFLLFlBQVksV0FBVyxVQUFVLFVBQVUsWUFBWSxhQUFhLGFBQWEsTUFBTSxLQUFLLFVBQVUsVUFBVSxVQUFVLFVBQVUsWUFBWSxhQUFhLGFBQWEsTUFBTSxLQUFLLFVBQVUsVUFBVSxVQUFVLFVBQVUsWUFBWSxhQUFhLGFBQWEsTUFBTSxLQUFLLFVBQVUsVUFBVSxVQUFVLFVBQVUsWUFBWSxhQUFhLGFBQWEsTUFBTSxLQUFLLFVBQVUsVUFBVSxVQUFVLFVBQVUsWUFBWSxhQUFhLGFBQWEsTUFBTSxLQUFLLFlBQVksYUFBYSxXQUFXLFVBQVUsS0FBSyxLQUFLLFlBQVksT0FBTyxLQUFLLFlBQVksYUFBYSxNQUFNLEtBQUssVUFBVSxVQUFVLEtBQUssS0FBSyxZQUFZLGFBQWEsTUFBTSxLQUFLLFlBQVksV0FBVyxZQUFZLGFBQWEsTUFBTSxLQUFLLFlBQVksTUFBTSxLQUFLLFlBQVksTUFBTSxLQUFLLFlBQVksYUFBYSxXQUFXLFlBQVksV0FBVyxNQUFNLEtBQUssVUFBVSxZQUFZLGFBQWEsTUFBTSxLQUFLLFlBQVksV0FBVyxLQUFLLEtBQUssWUFBWSxNQUFNLEtBQUssVUFBVSxZQUFZLGFBQWEsV0FBVyxLQUFLLEtBQUssWUFBWSxhQUFhLGFBQWEsV0FBVyxLQUFLLEtBQUssVUFBVSxNQUFNLEtBQUssWUFBWSxXQUFXLFVBQVUsVUFBVSxVQUFVLFVBQVUsVUFBVSxZQUFZLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxNQUFNLEtBQUssWUFBWSxhQUFhLFdBQVcsWUFBWSxXQUFXLEtBQUssS0FBSyxZQUFZLFdBQVcsVUFBVSxVQUFVLFVBQVUsVUFBVSxVQUFVLFlBQVksYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLE1BQU0sS0FBSyxZQUFZLE1BQU0sS0FBSyxZQUFZLE1BQU0sS0FBSyxZQUFZLE1BQU0sS0FBSyxZQUFZLE9BQU8sS0FBSyxZQUFZLGFBQWEsV0FBVyxVQUFVLEtBQUssS0FBSyxZQUFZLE1BQU0sTUFBTSxZQUFZLGFBQWEsTUFBTSxLQUFLLFVBQVUsS0FBSyxLQUFLLFVBQVUsVUFBVSxLQUFLLEtBQUssWUFBWSxNQUFNLEtBQUssVUFBVSxNQUFNLEtBQUssWUFBWSxNQUFNLEtBQUssWUFBWSxNQUFNLEtBQUssVUFBVSxVQUFVLEtBQUssS0FBSyxVQUFVLEtBQUssS0FBSyxVQUFVLFVBQVUsS0FBSyxLQUFLLFlBQVksTUFBTSxLQUFLLFVBQVUsTUFBTSxLQUFLLFlBQVksTUFBTSxLQUFLLFlBQVksTUFBTSxLQUFLLFVBQVUsS0FBSyxLQUFLLFVBQVUsVUFBVSxLQUFLLEtBQUssVUFBVSxVQUFVLFlBQVksTUFBTSxLQUFLLFlBQVksV0FBVyxVQUFVLFlBQVksYUFBYSxhQUFhLGFBQWEsYUFBYSxNQUFNLEtBQUssWUFBWSxhQUFhLGFBQWEsYUFBYSxhQUFhLE1BQU0sS0FBSyxZQUFZLFdBQVcsVUFBVSxLQUFLLEtBQUssVUFBVSxZQUFZLFdBQVcsWUFBWSxNQUFNLEtBQUssVUFBVSxZQUFZLFdBQVcsVUFBVSxVQUFVLFlBQVksYUFBYSxNQUFNLEtBQUssd0JBQXdCLE9BQU8sS0FBSyxVQUFVLE1BQU0sS0FBSyxZQUFZLE1BQU0sS0FBSyxZQUFZLFdBQVcsVUFBVSxVQUFVLFVBQVUsVUFBVSxZQUFZLGFBQWEsYUFBYSxXQUFXLEtBQUssS0FBSyxZQUFZLE1BQU0sS0FBSyxZQUFZLE1BQU0sS0FBSyxZQUFZLE1BQU0sS0FBSyxZQUFZLE1BQU0sS0FBSyxZQUFZLFdBQVcsVUFBVSxVQUFVLFlBQVksYUFBYSxhQUFhLGFBQWEsTUFBTSxLQUFLLFlBQVksV0FBVyxLQUFLLEtBQUssVUFBVSxVQUFVLFlBQVksYUFBYSxhQUFhLE1BQU0sS0FBSyxZQUFZLGFBQWEsTUFBTSxLQUFLLFVBQVUsWUFBWSxXQUFXLFlBQVksYUFBYSxhQUFhLE1BQU0sS0FBSyxVQUFVLEtBQUssS0FBSyxVQUFVLEtBQUssS0FBSyxVQUFVLEtB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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxvQkFBb0I7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLEtBQUs7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDaHRC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QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLDJEQUFZO0FBQ3JDLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxpQkFBaUI7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlD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QUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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Q0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7OztBQzVEYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7OztBQ2JBOzs7Ozs7VUNBQTtVQUNBOztVQUVBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBOztVQUVBO1VBQ0E7O1VBRUE7VUFDQTtVQUNBOzs7OztXQ3RCQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0EsaUNBQWlDLFdBQVc7V0FDNUM7V0FDQTs7Ozs7V0NQQTtXQUNBO1dBQ0E7V0FDQTtXQUNBLHlDQUF5Qyx3Q0FBd0M7V0FDakY7V0FDQTtXQUNBOzs7OztXQ1BBOzs7OztXQ0FBO1dBQ0E7V0FDQTtXQUNBLHVEQUF1RCxpQkFBaUI7V0FDeEU7V0FDQSxnREFBZ0QsYUFBYTtXQUM3RDs7Ozs7V0NOQTs7Ozs7Ozs7Ozs7Ozs7O0FDQWlCOztBQUU4QjtBQUNEOztBQUU5QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBLG9CQUFvQiw2REFBYztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiwrQ0FBK0M7QUFDckU7QUFDQSxTQUFTOztBQUVULE9BQU87O0FBRVA7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L3N0eWxlcy9kb2Nrdmlldy5jc3MiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L2VzbS9hcGkvY29tcG9uZW50LmFwaS5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L2VzbS9hcGkvZG9ja3ZpZXdHcm91cFBhbmVsQXBpLmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL2FwaS9kb2Nrdmlld1BhbmVsQXBpLmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL2FwaS9lbnRyeVBvaW50cy5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L2VzbS9hcGkvZ3JpZHZpZXdQYW5lbEFwaS5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L2VzbS9hcGkvcGFuZWxBcGkuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vYXBpL3BhbmV2aWV3UGFuZWxBcGkuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vYXBpL3NwbGl0dmlld1BhbmVsQXBpLmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL2FycmF5LmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L2VzbS9kbmQvYWJzdHJhY3REcmFnSGFuZGxlci5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L2VzbS9kbmQvZGF0YVRyYW5zZmVyLmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL2RuZC9kbmQuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vZG5kL2Ryb3B0YXJnZXQuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vZG5kL2dob3N0LmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL2RuZC9ncm91cERyYWdIYW5kbGVyLmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL2RvY2t2aWV3L2NvbXBvbmVudHMvcGFuZWwvY29udGVudC5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L2VzbS9kb2Nrdmlldy9jb21wb25lbnRzL3RhYi9kZWZhdWx0VGFiLmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL2RvY2t2aWV3L2NvbXBvbmVudHMvdGFiL3RhYi5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L2VzbS9kb2Nrdmlldy9jb21wb25lbnRzL3RpdGxlYmFyL3RhYnNDb250YWluZXIuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vZG9ja3ZpZXcvY29tcG9uZW50cy90aXRsZWJhci92b2lkQ29udGFpbmVyLmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL2RvY2t2aWV3L2NvbXBvbmVudHMvd2F0ZXJtYXJrL3dhdGVybWFyay5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L2VzbS9kb2Nrdmlldy9kZXNlcmlhbGl6ZXIuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vZG9ja3ZpZXcvZG9ja3ZpZXdDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vZG9ja3ZpZXcvZG9ja3ZpZXdGbG9hdGluZ0dyb3VwUGFuZWwuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vZG9ja3ZpZXcvZG9ja3ZpZXdHcm91cFBhbmVsLmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL2RvY2t2aWV3L2RvY2t2aWV3R3JvdXBQYW5lbE1vZGVsLmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL2RvY2t2aWV3L2RvY2t2aWV3UGFuZWwuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vZG9ja3ZpZXcvZG9ja3ZpZXdQYW5lbE1vZGVsLmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL2RvY2t2aWV3L29wdGlvbnMuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vZG9ja3ZpZXcvc3RyaWN0RXZlbnRzU2VxdWVuY2luZy5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L2VzbS9kb2Nrdmlldy90eXBlcy5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L2VzbS9kb20uanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vZXZlbnRzLmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL2dyaWR2aWV3L2Jhc2VDb21wb25lbnRHcmlkdmlldy5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L2VzbS9ncmlkdmlldy9iYXNlUGFuZWxWaWV3LmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL2dyaWR2aWV3L2JyYW5jaE5vZGUuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vZ3JpZHZpZXcvZ3JpZHZpZXcuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vZ3JpZHZpZXcvZ3JpZHZpZXdDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vZ3JpZHZpZXcvZ3JpZHZpZXdQYW5lbC5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L2VzbS9ncmlkdmlldy9sZWFmTm9kZS5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L2VzbS9ncmlkdmlldy9vcHRpb25zLmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL2luZGV4LmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL2xpZmVjeWNsZS5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L2VzbS9tYXRoLmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL292ZXJsYXkvb3ZlcmxheS5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L2VzbS9vdmVybGF5L292ZXJsYXlSZW5kZXJDb250YWluZXIuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vcGFuZWwvdHlwZXMuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vcGFuZXZpZXcvZGVmYXVsdFBhbmV2aWV3SGVhZGVyLmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL3BhbmV2aWV3L2RyYWdnYWJsZVBhbmV2aWV3UGFuZWwuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vcGFuZXZpZXcvb3B0aW9ucy5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L2VzbS9wYW5ldmlldy9wYW5ldmlldy5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L2VzbS9wYW5ldmlldy9wYW5ldmlld0NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L2VzbS9wYW5ldmlldy9wYW5ldmlld1BhbmVsLmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL3BvcG91dFdpbmRvdy5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L2VzbS9yZXNpemFibGUuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vc3BsaXR2aWV3L29wdGlvbnMuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vc3BsaXR2aWV3L3NwbGl0dmlldy5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L2VzbS9zcGxpdHZpZXcvc3BsaXR2aWV3Q29tcG9uZW50LmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL3NwbGl0dmlldy9zcGxpdHZpZXdQYW5lbC5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L2VzbS9zcGxpdHZpZXcvdmlld0l0ZW0uanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vc3ZnLmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3Qvc3R5bGVzL2RvY2t2aWV3LmNzcz9lYmMyIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyL2V4dGVybmFsIHZhciBcIkhUTUxXaWRnZXRzXCIiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2RvY2t2aWV3ci93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9kb2Nrdmlld3Ivd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2RvY2t2aWV3ci93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2RvY2t2aWV3ci93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL2RvY2t2aWV3ci93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vc3JjanMvd2lkZ2V0cy9kb2NrX3ZpZXcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuZHYtc3ZnIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBmaWxsOiBjdXJyZW50Y29sb3I7XG4gIGxpbmUtaGVpZ2h0OiAxO1xuICBzdHJva2U6IGN1cnJlbnRjb2xvcjtcbiAgc3Ryb2tlLXdpZHRoOiAwO1xufVxuLmRvY2t2aWV3LXRoZW1lLWRhcmsge1xuICAtLWR2LXBhbmV2aWV3LWFjdGl2ZS1vdXRsaW5lLWNvbG9yOiBkb2RnZXJibHVlO1xuICAtLWR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLWZvbnQtc2l6ZTogMTNweDtcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1oZWlnaHQ6IDM1cHg7XG4gIC0tZHYtZHJhZy1vdmVyLWJhY2tncm91bmQtY29sb3I6IHJnYmEoODMsIDg5LCA5MywgMC41KTtcbiAgLS1kdi1kcmFnLW92ZXItYm9yZGVyLWNvbG9yOiB3aGl0ZTtcbiAgLS1kdi10YWJzLWNvbnRhaW5lci1zY3JvbGxiYXItY29sb3I6ICM4ODg7XG4gIC0tZHYtaWNvbi1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDkwLCA5MywgOTQsIDAuMzEpO1xuICAtLWR2LWZsb2F0aW5nLWJveC1zaGFkb3c6IDhweCA4cHggOHB4IDBweCByZ2JhKDgzLCA4OSwgOTMsIDAuNSk7XG4gIC0tZHYtb3ZlcmxheS16LWluZGV4OiA5OTk7XG4gIC0tZHYtYWN0aXZlLXNhc2gtdHJhbnNpdGlvbi1kdXJhdGlvbjogMC4xcztcbiAgLS1kdi1hY3RpdmUtc2FzaC10cmFuc2l0aW9uLWRlbGF5OiAwLjVzO1xuICAtLWR2LWdyb3VwLXZpZXctYmFja2dyb3VuZC1jb2xvcjogIzFlMWUxZTtcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1iYWNrZ3JvdW5kLWNvbG9yOiAjMjUyNTI2O1xuICAtLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogIzFlMWUxZTtcbiAgLS1kdi1hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogIzJkMmQyZDtcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogIzFlMWUxZTtcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yOiAjMmQyZDJkO1xuICAtLWR2LXRhYi1kaXZpZGVyLWNvbG9yOiAjMWUxZTFlO1xuICAtLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItY29sb3I6IHdoaXRlO1xuICAtLWR2LWFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1jb2xvcjogIzk2OTY5NjtcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItY29sb3I6ICM4ZjhmOGY7XG4gIC0tZHYtaW5hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItY29sb3I6ICM2MjYyNjI7XG4gIC0tZHYtc2VwYXJhdG9yLWJvcmRlcjogcmdiKDY4LCA2OCwgNjgpO1xuICAtLWR2LXBhbmV2aWV3LWhlYWRlci1ib3JkZXItY29sb3I6IHJnYmEoMjA0LCAyMDQsIDIwNCwgMC4yKTtcbn1cblxuLmRvY2t2aWV3LXRoZW1lLWxpZ2h0IHtcbiAgLS1kdi1wYW5ldmlldy1hY3RpdmUtb3V0bGluZS1jb2xvcjogZG9kZ2VyYmx1ZTtcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1mb250LXNpemU6IDEzcHg7XG4gIC0tZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXItaGVpZ2h0OiAzNXB4O1xuICAtLWR2LWRyYWctb3Zlci1iYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDgzLCA4OSwgOTMsIDAuNSk7XG4gIC0tZHYtZHJhZy1vdmVyLWJvcmRlci1jb2xvcjogd2hpdGU7XG4gIC0tZHYtdGFicy1jb250YWluZXItc2Nyb2xsYmFyLWNvbG9yOiAjODg4O1xuICAtLWR2LWljb24taG92ZXItYmFja2dyb3VuZC1jb2xvcjogcmdiYSg5MCwgOTMsIDk0LCAwLjMxKTtcbiAgLS1kdi1mbG9hdGluZy1ib3gtc2hhZG93OiA4cHggOHB4IDhweCAwcHggcmdiYSg4MywgODksIDkzLCAwLjUpO1xuICAtLWR2LW92ZXJsYXktei1pbmRleDogOTk5O1xuICAtLWR2LWFjdGl2ZS1zYXNoLXRyYW5zaXRpb24tZHVyYXRpb246IDAuMXM7XG4gIC0tZHYtYWN0aXZlLXNhc2gtdHJhbnNpdGlvbi1kZWxheTogMC41cztcbiAgLS1kdi1ncm91cC12aWV3LWJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAtLWR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLWJhY2tncm91bmQtY29sb3I6ICNmM2YzZjM7XG4gIC0tZHYtYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgLS1kdi1hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogI2VjZWNlYztcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gIC0tZHYtaW5hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogI2VjZWNlYztcbiAgLS1kdi10YWItZGl2aWRlci1jb2xvcjogd2hpdGU7XG4gIC0tZHYtYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1jb2xvcjogcmdiKDUxLCA1MSwgNTEpO1xuICAtLWR2LWFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1jb2xvcjogcmdiYSg1MSwgNTEsIDUxLCAwLjcpO1xuICAtLWR2LWluYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1jb2xvcjogcmdiYSg1MSwgNTEsIDUxLCAwLjcpO1xuICAtLWR2LWluYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWNvbG9yOiByZ2JhKDUxLCA1MSwgNTEsIDAuMzUpO1xuICAtLWR2LXNlcGFyYXRvci1ib3JkZXI6IHJnYmEoMTI4LCAxMjgsIDEyOCwgMC4zNSk7XG4gIC0tZHYtcGFuZXZpZXctaGVhZGVyLWJvcmRlci1jb2xvcjogcmdiKDUxLCA1MSwgNTEpO1xufVxuXG4uZG9ja3ZpZXctdGhlbWUtdnMge1xuICAtLWR2LXBhbmV2aWV3LWFjdGl2ZS1vdXRsaW5lLWNvbG9yOiBkb2RnZXJibHVlO1xuICAtLWR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLWZvbnQtc2l6ZTogMTNweDtcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1oZWlnaHQ6IDM1cHg7XG4gIC0tZHYtZHJhZy1vdmVyLWJhY2tncm91bmQtY29sb3I6IHJnYmEoODMsIDg5LCA5MywgMC41KTtcbiAgLS1kdi1kcmFnLW92ZXItYm9yZGVyLWNvbG9yOiB3aGl0ZTtcbiAgLS1kdi10YWJzLWNvbnRhaW5lci1zY3JvbGxiYXItY29sb3I6ICM4ODg7XG4gIC0tZHYtaWNvbi1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDkwLCA5MywgOTQsIDAuMzEpO1xuICAtLWR2LWZsb2F0aW5nLWJveC1zaGFkb3c6IDhweCA4cHggOHB4IDBweCByZ2JhKDgzLCA4OSwgOTMsIDAuNSk7XG4gIC0tZHYtb3ZlcmxheS16LWluZGV4OiA5OTk7XG4gIC0tZHYtYWN0aXZlLXNhc2gtdHJhbnNpdGlvbi1kdXJhdGlvbjogMC4xcztcbiAgLS1kdi1hY3RpdmUtc2FzaC10cmFuc2l0aW9uLWRlbGF5OiAwLjVzO1xuICAtLWR2LWdyb3VwLXZpZXctYmFja2dyb3VuZC1jb2xvcjogIzFlMWUxZTtcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1iYWNrZ3JvdW5kLWNvbG9yOiAjMjUyNTI2O1xuICAtLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogIzFlMWUxZTtcbiAgLS1kdi1hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogIzJkMmQyZDtcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogIzFlMWUxZTtcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yOiAjMmQyZDJkO1xuICAtLWR2LXRhYi1kaXZpZGVyLWNvbG9yOiAjMWUxZTFlO1xuICAtLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItY29sb3I6IHdoaXRlO1xuICAtLWR2LWFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1jb2xvcjogIzk2OTY5NjtcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItY29sb3I6ICM4ZjhmOGY7XG4gIC0tZHYtaW5hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItY29sb3I6ICM2MjYyNjI7XG4gIC0tZHYtc2VwYXJhdG9yLWJvcmRlcjogcmdiKDY4LCA2OCwgNjgpO1xuICAtLWR2LXBhbmV2aWV3LWhlYWRlci1ib3JkZXItY29sb3I6IHJnYmEoMjA0LCAyMDQsIDIwNCwgMC4yKTtcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1iYWNrZ3JvdW5kLWNvbG9yOiAjMmQyZDMwO1xuICAtLWR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLWhlaWdodDogMjBweDtcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1mb250LXNpemU6IDExcHg7XG4gIC0tZHYtYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yOiAjMDA3YWNjO1xuICAtLWR2LWluYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yOiAjM2YzZjQ2O1xuICAtLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItY29sb3I6IHdoaXRlO1xuICAtLWR2LWFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1jb2xvcjogd2hpdGU7XG4gIC0tZHYtaW5hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWNvbG9yOiB3aGl0ZTtcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1jb2xvcjogd2hpdGU7XG59XG4uZG9ja3ZpZXctdGhlbWUtdnMgLmR2LWdyb3Vwdmlldy5kdi1hY3RpdmUtZ3JvdXAgPiAuZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXIge1xuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbiAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkIHZhcigtLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcik7XG59XG4uZG9ja3ZpZXctdGhlbWUtdnMgLmR2LWdyb3Vwdmlldy5kdi1hY3RpdmUtZ3JvdXAgPiAuZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXIgLmR2LXRhYi5kdi1hY3RpdmUtdGFiIHtcbiAgYm9yZGVyLXRvcDogMnB4IHNvbGlkIHZhcigtLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcik7XG59XG4uZG9ja3ZpZXctdGhlbWUtdnMgLmR2LWdyb3Vwdmlldy5kdi1hY3RpdmUtZ3JvdXAgPiAuZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXIgLmR2LXRhYi5kdi1pbmFjdGl2ZS10YWIge1xuICBib3JkZXItdG9wOiAycHggc29saWQgdmFyKC0tZHYtYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3IpO1xufVxuLmRvY2t2aWV3LXRoZW1lLXZzIC5kdi1ncm91cHZpZXcuZHYtaW5hY3RpdmUtZ3JvdXAgPiAuZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXIge1xuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbiAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkIHZhcigtLWR2LWluYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yKTtcbn1cbi5kb2Nrdmlldy10aGVtZS12cyAuZHYtZ3JvdXB2aWV3LmR2LWluYWN0aXZlLWdyb3VwID4gLmR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyIC5kdi10YWIuZHYtYWN0aXZlLXRhYiB7XG4gIGJvcmRlci10b3A6IDJweCBzb2xpZCB2YXIoLS1kdi1pbmFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcik7XG59XG4uZG9ja3ZpZXctdGhlbWUtdnMgLmR2LWdyb3Vwdmlldy5kdi1pbmFjdGl2ZS1ncm91cCA+IC5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lciAuZHYtdGFiLmR2LWluYWN0aXZlLXRhYiB7XG4gIGJvcmRlci10b3A6IDJweCBzb2xpZCB2YXIoLS1kdi1pbmFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yKTtcbn1cblxuLmRvY2t2aWV3LXRoZW1lLWFieXNzIHtcbiAgLS1kdi1wYW5ldmlldy1hY3RpdmUtb3V0bGluZS1jb2xvcjogZG9kZ2VyYmx1ZTtcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1mb250LXNpemU6IDEzcHg7XG4gIC0tZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXItaGVpZ2h0OiAzNXB4O1xuICAtLWR2LWRyYWctb3Zlci1iYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDgzLCA4OSwgOTMsIDAuNSk7XG4gIC0tZHYtZHJhZy1vdmVyLWJvcmRlci1jb2xvcjogd2hpdGU7XG4gIC0tZHYtdGFicy1jb250YWluZXItc2Nyb2xsYmFyLWNvbG9yOiAjODg4O1xuICAtLWR2LWljb24taG92ZXItYmFja2dyb3VuZC1jb2xvcjogcmdiYSg5MCwgOTMsIDk0LCAwLjMxKTtcbiAgLS1kdi1mbG9hdGluZy1ib3gtc2hhZG93OiA4cHggOHB4IDhweCAwcHggcmdiYSg4MywgODksIDkzLCAwLjUpO1xuICAtLWR2LW92ZXJsYXktei1pbmRleDogOTk5O1xuICAtLWR2LWFjdGl2ZS1zYXNoLXRyYW5zaXRpb24tZHVyYXRpb246IDAuMXM7XG4gIC0tZHYtYWN0aXZlLXNhc2gtdHJhbnNpdGlvbi1kZWxheTogMC41cztcbiAgLS1kdi1ncm91cC12aWV3LWJhY2tncm91bmQtY29sb3I6ICMwMDBjMTg7XG4gIC0tZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXItYmFja2dyb3VuZC1jb2xvcjogIzFjMWMyYTtcbiAgLS1kdi1hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3I6ICMwMDBjMTg7XG4gIC0tZHYtYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3I6ICMxMDE5MmM7XG4gIC0tZHYtaW5hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3I6ICMwMDBjMTg7XG4gIC0tZHYtaW5hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogIzEwMTkyYztcbiAgLS1kdi10YWItZGl2aWRlci1jb2xvcjogIzJiMmI0YTtcbiAgLS1kdi1hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWNvbG9yOiB3aGl0ZTtcbiAgLS1kdi1hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTtcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTtcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjI1KTtcbiAgLS1kdi1zZXBhcmF0b3ItYm9yZGVyOiAjMmIyYjRhO1xuICAtLWR2LXBhbmV2aWV3LWhlYWRlci1ib3JkZXItY29sb3I6ICMyYjJiNGE7XG4gIC0tZHYtcGFuZXZpZXctYWN0aXZlLW91dGxpbmUtY29sb3I6ICM1OTZmOTk7XG59XG5cbi5kb2Nrdmlldy10aGVtZS1kcmFjdWxhIHtcbiAgLS1kdi1wYW5ldmlldy1hY3RpdmUtb3V0bGluZS1jb2xvcjogZG9kZ2VyYmx1ZTtcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1mb250LXNpemU6IDEzcHg7XG4gIC0tZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXItaGVpZ2h0OiAzNXB4O1xuICAtLWR2LWRyYWctb3Zlci1iYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDgzLCA4OSwgOTMsIDAuNSk7XG4gIC0tZHYtZHJhZy1vdmVyLWJvcmRlci1jb2xvcjogd2hpdGU7XG4gIC0tZHYtdGFicy1jb250YWluZXItc2Nyb2xsYmFyLWNvbG9yOiAjODg4O1xuICAtLWR2LWljb24taG92ZXItYmFja2dyb3VuZC1jb2xvcjogcmdiYSg5MCwgOTMsIDk0LCAwLjMxKTtcbiAgLS1kdi1mbG9hdGluZy1ib3gtc2hhZG93OiA4cHggOHB4IDhweCAwcHggcmdiYSg4MywgODksIDkzLCAwLjUpO1xuICAtLWR2LW92ZXJsYXktei1pbmRleDogOTk5O1xuICAtLWR2LWFjdGl2ZS1zYXNoLXRyYW5zaXRpb24tZHVyYXRpb246IDAuMXM7XG4gIC0tZHYtYWN0aXZlLXNhc2gtdHJhbnNpdGlvbi1kZWxheTogMC41cztcbiAgLS1kdi1ncm91cC12aWV3LWJhY2tncm91bmQtY29sb3I6ICMyODJhMzY7XG4gIC0tZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXItYmFja2dyb3VuZC1jb2xvcjogIzE5MWEyMTtcbiAgLS1kdi1hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3I6ICMyODJhMzY7XG4gIC0tZHYtYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3I6ICMyMTIyMmM7XG4gIC0tZHYtaW5hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3I6ICMyODJhMzY7XG4gIC0tZHYtaW5hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogIzIxMjIyYztcbiAgLS1kdi10YWItZGl2aWRlci1jb2xvcjogIzE5MWEyMTtcbiAgLS1kdi1hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWNvbG9yOiByZ2IoMjQ4LCAyNDgsIDI0Mik7XG4gIC0tZHYtYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWNvbG9yOiByZ2IoOTgsIDExNCwgMTY0KTtcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItY29sb3I6IHJnYmEoMjQ4LCAyNDgsIDI0MiwgMC41KTtcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1jb2xvcjogcmdiYSg5OCwgMTE0LCAxNjQsIDAuNSk7XG4gIC0tZHYtc2VwYXJhdG9yLWJvcmRlcjogI2JkOTNmOTtcbiAgLS1kdi1wYW5ldmlldy1oZWFkZXItYm9yZGVyLWNvbG9yOiAjYmQ5M2Y5O1xuICAtLWR2LXBhbmV2aWV3LWFjdGl2ZS1vdXRsaW5lLWNvbG9yOiAjNjI3MmE0O1xufVxuLmRvY2t2aWV3LXRoZW1lLWRyYWN1bGEgLmR2LWdyb3Vwdmlldy5kdi1hY3RpdmUtZ3JvdXAgPiAuZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXIgPiAuZHYtdGFicy1jb250YWluZXIgPiAuZHYtdGFiLmR2LWFjdGl2ZS10YWIge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG4uZG9ja3ZpZXctdGhlbWUtZHJhY3VsYSAuZHYtZ3JvdXB2aWV3LmR2LWFjdGl2ZS1ncm91cCA+IC5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lciA+IC5kdi10YWJzLWNvbnRhaW5lciA+IC5kdi10YWIuZHYtYWN0aXZlLXRhYjo6YWZ0ZXIge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGxlZnQ6IDBweDtcbiAgdG9wOiAwcHg7XG4gIGNvbnRlbnQ6IFwiXCI7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDFweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzk0NTI3ZTtcbiAgei1pbmRleDogOTk5O1xufVxuLmRvY2t2aWV3LXRoZW1lLWRyYWN1bGEgLmR2LWdyb3Vwdmlldy5kdi1pbmFjdGl2ZS1ncm91cCA+IC5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lciA+IC5kdi10YWJzLWNvbnRhaW5lciA+IC5kdi10YWIuZHYtYWN0aXZlLXRhYiB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbn1cbi5kb2Nrdmlldy10aGVtZS1kcmFjdWxhIC5kdi1ncm91cHZpZXcuZHYtaW5hY3RpdmUtZ3JvdXAgPiAuZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXIgPiAuZHYtdGFicy1jb250YWluZXIgPiAuZHYtdGFiLmR2LWFjdGl2ZS10YWI6OmFmdGVyIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBsZWZ0OiAwcHg7XG4gIGJvdHRvbTogMHB4O1xuICBjb250ZW50OiBcIlwiO1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxcHg7XG4gIGJhY2tncm91bmQtY29sb3I6ICM1ZTNkNWE7XG4gIHotaW5kZXg6IDk5OTtcbn1cblxuLmRvY2t2aWV3LXRoZW1lLXJlcGxpdCB7XG4gIC0tZHYtcGFuZXZpZXctYWN0aXZlLW91dGxpbmUtY29sb3I6IGRvZGdlcmJsdWU7XG4gIC0tZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXItZm9udC1zaXplOiAxM3B4O1xuICAtLWR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLWhlaWdodDogMzVweDtcbiAgLS1kdi1kcmFnLW92ZXItYmFja2dyb3VuZC1jb2xvcjogcmdiYSg4MywgODksIDkzLCAwLjUpO1xuICAtLWR2LWRyYWctb3Zlci1ib3JkZXItY29sb3I6IHdoaXRlO1xuICAtLWR2LXRhYnMtY29udGFpbmVyLXNjcm9sbGJhci1jb2xvcjogIzg4ODtcbiAgLS1kdi1pY29uLWhvdmVyLWJhY2tncm91bmQtY29sb3I6IHJnYmEoOTAsIDkzLCA5NCwgMC4zMSk7XG4gIC0tZHYtZmxvYXRpbmctYm94LXNoYWRvdzogOHB4IDhweCA4cHggMHB4IHJnYmEoODMsIDg5LCA5MywgMC41KTtcbiAgLS1kdi1vdmVybGF5LXotaW5kZXg6IDk5OTtcbiAgLS1kdi1hY3RpdmUtc2FzaC10cmFuc2l0aW9uLWR1cmF0aW9uOiAwLjFzO1xuICAtLWR2LWFjdGl2ZS1zYXNoLXRyYW5zaXRpb24tZGVsYXk6IDAuNXM7XG4gIC0tZHYtZ3JvdXAtdmlldy1iYWNrZ3JvdW5kLWNvbG9yOiAjZWJlY2VkO1xuICAtLWR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLWJhY2tncm91bmQtY29sb3I6ICNmY2ZjZmM7XG4gIC0tZHYtYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yOiAjZjBmMWYyO1xuICAtLWR2LWFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yOiAjZmNmY2ZjO1xuICAtLWR2LWluYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yOiAjZjBmMWYyO1xuICAtLWR2LWluYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3I6ICNmY2ZjZmM7XG4gIC0tZHYtdGFiLWRpdmlkZXItY29sb3I6IHRyYW5zcGFyZW50O1xuICAtLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItY29sb3I6IHJnYig1MSwgNTEsIDUxKTtcbiAgLS1kdi1hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItY29sb3I6IHJnYig1MSwgNTEsIDUxKTtcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItY29sb3I6IHJnYig1MSwgNTEsIDUxKTtcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1jb2xvcjogcmdiKDUxLCA1MSwgNTEpO1xuICAtLWR2LXNlcGFyYXRvci1ib3JkZXI6IHRyYW5zcGFyZW50O1xuICAtLWR2LXBhbmV2aWV3LWhlYWRlci1ib3JkZXItY29sb3I6IHJnYig1MSwgNTEsIDUxKTtcbiAgLS1kdi1zZXBhcmF0b3ItaGFuZGxlLWJhY2tncm91bmQtY29sb3I6ICNjZmQxZDM7XG4gIC0tZHYtc2VwYXJhdG9yLWhhbmRsZS1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yOiAjYmFiYmJiO1xufVxuLmRvY2t2aWV3LXRoZW1lLXJlcGxpdCAuZHYtcmVzaXplLWNvbnRhaW5lcjpoYXMoPiAuZHYtZ3JvdXB2aWV3KSB7XG4gIGJvcmRlci1yYWRpdXM6IDhweDtcbn1cbi5kb2Nrdmlldy10aGVtZS1yZXBsaXQgLmR2LWdyb3VwdmlldyB7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIGJvcmRlci1yYWRpdXM6IDEwcHg7XG59XG4uZG9ja3ZpZXctdGhlbWUtcmVwbGl0IC5kdi1ncm91cHZpZXcgLmR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyIHtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHJnYmEoMTI4LCAxMjgsIDEyOCwgMC4zNSk7XG59XG4uZG9ja3ZpZXctdGhlbWUtcmVwbGl0IC5kdi1ncm91cHZpZXcgLmR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyIC5kdi10YWIge1xuICBtYXJnaW46IDRweDtcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xufVxuLmRvY2t2aWV3LXRoZW1lLXJlcGxpdCAuZHYtZ3JvdXB2aWV3IC5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lciAuZHYtdGFiIC5kdi1zdmcge1xuICBoZWlnaHQ6IDhweDtcbiAgd2lkdGg6IDhweDtcbn1cbi5kb2Nrdmlldy10aGVtZS1yZXBsaXQgLmR2LWdyb3VwdmlldyAuZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXIgLmR2LXRhYjpob3ZlciB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNlNGU1ZTYgIWltcG9ydGFudDtcbn1cbi5kb2Nrdmlldy10aGVtZS1yZXBsaXQgLmR2LWdyb3VwdmlldyAuZHYtY29udGVudC1jb250YWluZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmNmY2ZjO1xufVxuLmRvY2t2aWV3LXRoZW1lLXJlcGxpdCAuZHYtZ3JvdXB2aWV3LmR2LWFjdGl2ZS1ncm91cCB7XG4gIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMTI4LCAxMjgsIDEyOCwgMC4zNSk7XG59XG4uZG9ja3ZpZXctdGhlbWUtcmVwbGl0IC5kdi1ncm91cHZpZXcuZHYtaW5hY3RpdmUtZ3JvdXAge1xuICBib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudDtcbn1cbi5kb2Nrdmlldy10aGVtZS1yZXBsaXQgLmR2LXZlcnRpY2FsID4gLmR2LXNhc2gtY29udGFpbmVyID4gLmR2LXNhc2g6bm90KC5kaXNhYmxlZCk6OmFmdGVyIHtcbiAgY29udGVudDogXCJcIjtcbiAgaGVpZ2h0OiA0cHg7XG4gIHdpZHRoOiA0MHB4O1xuICBib3JkZXItcmFkaXVzOiAycHg7XG4gIHRvcDogNTAlO1xuICBsZWZ0OiA1MCU7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kdi1zZXBhcmF0b3ItaGFuZGxlLWJhY2tncm91bmQtY29sb3IpO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG59XG4uZG9ja3ZpZXctdGhlbWUtcmVwbGl0IC5kdi12ZXJ0aWNhbCA+IC5kdi1zYXNoLWNvbnRhaW5lciA+IC5kdi1zYXNoOm5vdCguZGlzYWJsZWQpOmhvdmVyOjphZnRlciB7XG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWR2LXNlcGFyYXRvci1oYW5kbGUtaG92ZXItYmFja2dyb3VuZC1jb2xvcik7XG59XG4uZG9ja3ZpZXctdGhlbWUtcmVwbGl0IC5kdi1ob3Jpem9udGFsID4gLmR2LXNhc2gtY29udGFpbmVyID4gLmR2LXNhc2g6bm90KC5kaXNhYmxlZCk6OmFmdGVyIHtcbiAgY29udGVudDogXCJcIjtcbiAgaGVpZ2h0OiA0MHB4O1xuICB3aWR0aDogNHB4O1xuICBib3JkZXItcmFkaXVzOiAycHg7XG4gIHRvcDogNTAlO1xuICBsZWZ0OiA1MCU7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kdi1zZXBhcmF0b3ItaGFuZGxlLWJhY2tncm91bmQtY29sb3IpO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG59XG4uZG9ja3ZpZXctdGhlbWUtcmVwbGl0IC5kdi1ob3Jpem9udGFsID4gLmR2LXNhc2gtY29udGFpbmVyID4gLmR2LXNhc2g6bm90KC5kaXNhYmxlZCk6aG92ZXI6OmFmdGVyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZHYtc2VwYXJhdG9yLWhhbmRsZS1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yKTtcbn1cbi5kdi1kcm9wLXRhcmdldCB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbn1cbi5kdi1kcm9wLXRhcmdldCA+IC5kdi1kcm9wLXRhcmdldC1kcm9wem9uZSB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgbGVmdDogMHB4O1xuICB0b3A6IDBweDtcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogMTAwJTtcbiAgei1pbmRleDogMTAwMDtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG59XG4uZHYtZHJvcC10YXJnZXQgPiAuZHYtZHJvcC10YXJnZXQtZHJvcHpvbmUgPiAuZHYtZHJvcC10YXJnZXQtc2VsZWN0aW9uIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMDAlO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kdi1kcmFnLW92ZXItYmFja2dyb3VuZC1jb2xvcik7XG4gIHRyYW5zaXRpb246IHRvcCA3MG1zIGVhc2Utb3V0LCBsZWZ0IDcwbXMgZWFzZS1vdXQsIHdpZHRoIDcwbXMgZWFzZS1vdXQsIGhlaWdodCA3MG1zIGVhc2Utb3V0LCBvcGFjaXR5IDAuMTVzIGVhc2Utb3V0O1xuICB3aWxsLWNoYW5nZTogdHJhbnNmb3JtO1xuICBwb2ludGVyLWV2ZW50czogbm9uZTtcbn1cbi5kdi1kcm9wLXRhcmdldCA+IC5kdi1kcm9wLXRhcmdldC1kcm9wem9uZSA+IC5kdi1kcm9wLXRhcmdldC1zZWxlY3Rpb24uZHYtZHJvcC10YXJnZXQtdG9wLmR2LWRyb3AtdGFyZ2V0LXNtYWxsLXZlcnRpY2FsIHtcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkIHZhcigtLWR2LWRyYWctb3Zlci1ib3JkZXItY29sb3IpO1xufVxuLmR2LWRyb3AtdGFyZ2V0ID4gLmR2LWRyb3AtdGFyZ2V0LWRyb3B6b25lID4gLmR2LWRyb3AtdGFyZ2V0LXNlbGVjdGlvbi5kdi1kcm9wLXRhcmdldC1ib3R0b20uZHYtZHJvcC10YXJnZXQtc21hbGwtdmVydGljYWwge1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgdmFyKC0tZHYtZHJhZy1vdmVyLWJvcmRlci1jb2xvcik7XG59XG4uZHYtZHJvcC10YXJnZXQgPiAuZHYtZHJvcC10YXJnZXQtZHJvcHpvbmUgPiAuZHYtZHJvcC10YXJnZXQtc2VsZWN0aW9uLmR2LWRyb3AtdGFyZ2V0LWxlZnQuZHYtZHJvcC10YXJnZXQtc21hbGwtaG9yaXpvbnRhbCB7XG4gIGJvcmRlci1sZWZ0OiAxcHggc29saWQgdmFyKC0tZHYtZHJhZy1vdmVyLWJvcmRlci1jb2xvcik7XG59XG4uZHYtZHJvcC10YXJnZXQgPiAuZHYtZHJvcC10YXJnZXQtZHJvcHpvbmUgPiAuZHYtZHJvcC10YXJnZXQtc2VsZWN0aW9uLmR2LWRyb3AtdGFyZ2V0LXJpZ2h0LmR2LWRyb3AtdGFyZ2V0LXNtYWxsLWhvcml6b250YWwge1xuICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCB2YXIoLS1kdi1kcmFnLW92ZXItYm9yZGVyLWNvbG9yKTtcbn1cbi5kdi1kb2NrdmlldyB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZHYtZ3JvdXAtdmlldy1iYWNrZ3JvdW5kLWNvbG9yKTtcbn1cbi5kdi1kb2NrdmlldyAuZHYtd2F0ZXJtYXJrLWNvbnRhaW5lciB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwcHg7XG4gIGxlZnQ6IDBweDtcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogMTAwJTtcbiAgei1pbmRleDogMTtcbn1cbi5kdi1kb2NrdmlldyAuZHYtb3ZlcmxheS1yZW5kZXItY29udGFpbmVyIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuXG4uZHYtZ3JvdXB2aWV3LmR2LWFjdGl2ZS1ncm91cCA+IC5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lciA+IC5kdi10YWJzLWNvbnRhaW5lciA+IC5kdi10YWIuZHYtYWN0aXZlLXRhYiB7XG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcik7XG4gIGNvbG9yOiB2YXIoLS1kdi1hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWNvbG9yKTtcbn1cbi5kdi1ncm91cHZpZXcuZHYtYWN0aXZlLWdyb3VwID4gLmR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyID4gLmR2LXRhYnMtY29udGFpbmVyID4gLmR2LXRhYi5kdi1pbmFjdGl2ZS10YWIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kdi1hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcik7XG4gIGNvbG9yOiB2YXIoLS1kdi1hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItY29sb3IpO1xufVxuLmR2LWdyb3Vwdmlldy5kdi1pbmFjdGl2ZS1ncm91cCA+IC5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lciA+IC5kdi10YWJzLWNvbnRhaW5lciA+IC5kdi10YWIuZHYtYWN0aXZlLXRhYiB7XG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWR2LWluYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yKTtcbiAgY29sb3I6IHZhcigtLWR2LWluYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1jb2xvcik7XG59XG4uZHYtZ3JvdXB2aWV3LmR2LWluYWN0aXZlLWdyb3VwID4gLmR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyID4gLmR2LXRhYnMtY29udGFpbmVyID4gLmR2LXRhYi5kdi1pbmFjdGl2ZS10YWIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kdi1pbmFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yKTtcbiAgY29sb3I6IHZhcigtLWR2LWluYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWNvbG9yKTtcbn1cblxuLyoqXG4gKiB3aGVuIGEgdGFiIGlzIGRyYWdnZWQgd2UgbG9zZSB0aGUgYWJvdmUgc3R5bGluZ3MgYmVjYXVzZSB0aGV5IGFyZSBjb25kaXRpb25hbCBvbiBwYXJlbnQgZWxlbWVudHNcbiAqIHRoZXJlZm9yZSB3ZSBhbHNvIHNldCBzb21lIHN0eWxpbmdzIGZvciB0aGUgZHJhZ2dpbmcgZXZlbnRcbiAqKi9cbi5kdi10YWIuZHYtdGFiLWRyYWdnaW5nIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZHYtYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yKTtcbiAgY29sb3I6IHZhcigtLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItY29sb3IpO1xufVxuLmR2LWdyb3VwdmlldyB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGhlaWdodDogMTAwJTtcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZHYtZ3JvdXAtdmlldy1iYWNrZ3JvdW5kLWNvbG9yKTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cbi5kdi1ncm91cHZpZXc6Zm9jdXMge1xuICBvdXRsaW5lOiBub25lO1xufVxuLmR2LWdyb3VwdmlldyA+IC5kdi1jb250ZW50LWNvbnRhaW5lciB7XG4gIGZsZXgtZ3JvdzogMTtcbiAgbWluLWhlaWdodDogMDtcbiAgb3V0bGluZTogbm9uZTtcbn1cbi5kdi1yb290LXdyYXBwZXIge1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMDAlO1xufVxuLmR2LWdyaWQtdmlldyxcbi5kdi1icmFuY2gtbm9kZSB7XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG59XG4uZHYtZGVidWcgLmR2LXJlc2l6ZS1jb250YWluZXIgLmR2LXJlc2l6ZS1oYW5kbGUtdG9wIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogcmVkO1xufVxuLmR2LWRlYnVnIC5kdi1yZXNpemUtY29udGFpbmVyIC5kdi1yZXNpemUtaGFuZGxlLWJvdHRvbSB7XG4gIGJhY2tncm91bmQtY29sb3I6IGdyZWVuO1xufVxuLmR2LWRlYnVnIC5kdi1yZXNpemUtY29udGFpbmVyIC5kdi1yZXNpemUtaGFuZGxlLWxlZnQge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB5ZWxsb3c7XG59XG4uZHYtZGVidWcgLmR2LXJlc2l6ZS1jb250YWluZXIgLmR2LXJlc2l6ZS1oYW5kbGUtcmlnaHQge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiBibHVlO1xufVxuLmR2LWRlYnVnIC5kdi1yZXNpemUtY29udGFpbmVyIC5kdi1yZXNpemUtaGFuZGxlLXRvcGxlZnQsXG4uZHYtZGVidWcgLmR2LXJlc2l6ZS1jb250YWluZXIgLmR2LXJlc2l6ZS1oYW5kbGUtdG9wcmlnaHQsXG4uZHYtZGVidWcgLmR2LXJlc2l6ZS1jb250YWluZXIgLmR2LXJlc2l6ZS1oYW5kbGUtYm90dG9tbGVmdCxcbi5kdi1kZWJ1ZyAuZHYtcmVzaXplLWNvbnRhaW5lciAuZHYtcmVzaXplLWhhbmRsZS1ib3R0b21yaWdodCB7XG4gIGJhY2tncm91bmQtY29sb3I6IGN5YW47XG59XG5cbi5kdi1yZXNpemUtY29udGFpbmVyIHtcbiAgLS1kdi1vdmVybGF5LXotaW5kZXg6IHZhcigtLWR2LW92ZXJsYXktei1pbmRleCwgOTk5KTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB6LWluZGV4OiBjYWxjKHZhcigtLWR2LW92ZXJsYXktei1pbmRleCkgLSAyKTtcbiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tZHYtdGFiLWRpdmlkZXItY29sb3IpO1xuICBib3gtc2hhZG93OiB2YXIoLS1kdi1mbG9hdGluZy1ib3gtc2hhZG93KTtcbn1cbi5kdi1yZXNpemUtY29udGFpbmVyLmR2LWhpZGRlbiB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG4uZHYtcmVzaXplLWNvbnRhaW5lci5kdi1yZXNpemUtY29udGFpbmVyLWRyYWdnaW5nIHtcbiAgb3BhY2l0eTogMC41O1xufVxuLmR2LXJlc2l6ZS1jb250YWluZXIgLmR2LXJlc2l6ZS1oYW5kbGUtdG9wIHtcbiAgaGVpZ2h0OiA0cHg7XG4gIHdpZHRoOiBjYWxjKDEwMCUgLSA4cHgpO1xuICBsZWZ0OiA0cHg7XG4gIHRvcDogLTJweDtcbiAgei1pbmRleDogdmFyKC0tZHYtb3ZlcmxheS16LWluZGV4KTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBjdXJzb3I6IG5zLXJlc2l6ZTtcbn1cbi5kdi1yZXNpemUtY29udGFpbmVyIC5kdi1yZXNpemUtaGFuZGxlLWJvdHRvbSB7XG4gIGhlaWdodDogNHB4O1xuICB3aWR0aDogY2FsYygxMDAlIC0gOHB4KTtcbiAgbGVmdDogNHB4O1xuICBib3R0b206IC0ycHg7XG4gIHotaW5kZXg6IHZhcigtLWR2LW92ZXJsYXktei1pbmRleCk7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgY3Vyc29yOiBucy1yZXNpemU7XG59XG4uZHYtcmVzaXplLWNvbnRhaW5lciAuZHYtcmVzaXplLWhhbmRsZS1sZWZ0IHtcbiAgaGVpZ2h0OiBjYWxjKDEwMCUgLSA4cHgpO1xuICB3aWR0aDogNHB4O1xuICBsZWZ0OiAtMnB4O1xuICB0b3A6IDRweDtcbiAgei1pbmRleDogdmFyKC0tZHYtb3ZlcmxheS16LWluZGV4KTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBjdXJzb3I6IGV3LXJlc2l6ZTtcbn1cbi5kdi1yZXNpemUtY29udGFpbmVyIC5kdi1yZXNpemUtaGFuZGxlLXJpZ2h0IHtcbiAgaGVpZ2h0OiBjYWxjKDEwMCUgLSA4cHgpO1xuICB3aWR0aDogNHB4O1xuICByaWdodDogLTJweDtcbiAgdG9wOiA0cHg7XG4gIHotaW5kZXg6IHZhcigtLWR2LW92ZXJsYXktei1pbmRleCk7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgY3Vyc29yOiBldy1yZXNpemU7XG59XG4uZHYtcmVzaXplLWNvbnRhaW5lciAuZHYtcmVzaXplLWhhbmRsZS10b3BsZWZ0IHtcbiAgaGVpZ2h0OiA0cHg7XG4gIHdpZHRoOiA0cHg7XG4gIHRvcDogLTJweDtcbiAgbGVmdDogLTJweDtcbiAgei1pbmRleDogdmFyKC0tZHYtb3ZlcmxheS16LWluZGV4KTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBjdXJzb3I6IG53LXJlc2l6ZTtcbn1cbi5kdi1yZXNpemUtY29udGFpbmVyIC5kdi1yZXNpemUtaGFuZGxlLXRvcHJpZ2h0IHtcbiAgaGVpZ2h0OiA0cHg7XG4gIHdpZHRoOiA0cHg7XG4gIHJpZ2h0OiAtMnB4O1xuICB0b3A6IC0ycHg7XG4gIHotaW5kZXg6IHZhcigtLWR2LW92ZXJsYXktei1pbmRleCk7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgY3Vyc29yOiBuZS1yZXNpemU7XG59XG4uZHYtcmVzaXplLWNvbnRhaW5lciAuZHYtcmVzaXplLWhhbmRsZS1ib3R0b21sZWZ0IHtcbiAgaGVpZ2h0OiA0cHg7XG4gIHdpZHRoOiA0cHg7XG4gIGxlZnQ6IC0ycHg7XG4gIGJvdHRvbTogLTJweDtcbiAgei1pbmRleDogdmFyKC0tZHYtb3ZlcmxheS16LWluZGV4KTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBjdXJzb3I6IHN3LXJlc2l6ZTtcbn1cbi5kdi1yZXNpemUtY29udGFpbmVyIC5kdi1yZXNpemUtaGFuZGxlLWJvdHRvbXJpZ2h0IHtcbiAgaGVpZ2h0OiA0cHg7XG4gIHdpZHRoOiA0cHg7XG4gIHJpZ2h0OiAtMnB4O1xuICBib3R0b206IC0ycHg7XG4gIHotaW5kZXg6IHZhcigtLWR2LW92ZXJsYXktei1pbmRleCk7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgY3Vyc29yOiBzZS1yZXNpemU7XG59XG4uZHYtcmVuZGVyLW92ZXJsYXkge1xuICAtLWR2LW92ZXJsYXktei1pbmRleDogdmFyKC0tZHYtb3ZlcmxheS16LWluZGV4LCA5OTkpO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHotaW5kZXg6IDE7XG4gIGhlaWdodDogMTAwJTtcbn1cbi5kdi1yZW5kZXItb3ZlcmxheS5kdi1yZW5kZXItb3ZlcmxheS1mbG9hdCB7XG4gIHotaW5kZXg6IGNhbGModmFyKC0tZHYtb3ZlcmxheS16LWluZGV4KSAtIDEpO1xufVxuXG4uZHYtZGVidWcgLmR2LXJlbmRlci1vdmVybGF5IHtcbiAgb3V0bGluZTogMXB4IHNvbGlkIHJlZDtcbiAgb3V0bGluZS1vZmZzZXQ6IC0xO1xufVxuLmR2LXBhbmUtY29udGFpbmVyIHtcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogMTAwJTtcbn1cbi5kdi1wYW5lLWNvbnRhaW5lci5kdi1hbmltYXRlZCAuZHYtdmlldyB7XG4gIHRyYW5zaXRpb24tZHVyYXRpb246IDAuMTVzO1xuICB0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1vdXQ7XG59XG4uZHYtcGFuZS1jb250YWluZXIgLmR2LXZpZXcge1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBwYWRkaW5nOiAwcHggIWltcG9ydGFudDtcbn1cbi5kdi1wYW5lLWNvbnRhaW5lciAuZHYtdmlldzpub3QoOmZpcnN0LWNoaWxkKTo6YmVmb3JlIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQgIWltcG9ydGFudDtcbn1cbi5kdi1wYW5lLWNvbnRhaW5lciAuZHYtdmlldzpub3QoOmZpcnN0LWNoaWxkKSAuZHYtcGFuZSA+IC5kdi1wYW5lLWhlYWRlciB7XG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCB2YXIoLS1kdi1wYW5ldmlldy1oZWFkZXItYm9yZGVyLWNvbG9yKTtcbn1cbi5kdi1wYW5lLWNvbnRhaW5lciAuZHYtdmlldyAuZHYtZGVmYXVsdC1oZWFkZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kdi1ncm91cC12aWV3LWJhY2tncm91bmQtY29sb3IpO1xuICBjb2xvcjogdmFyKC0tZHYtYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1jb2xvcik7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIHBhZGRpbmc6IDBweCA4cHg7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cbi5kdi1wYW5lLWNvbnRhaW5lciAuZHYtdmlldyAuZHYtZGVmYXVsdC1oZWFkZXIgLmR2LXBhbmUtaGVhZGVyLWljb24ge1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbn1cbi5kdi1wYW5lLWNvbnRhaW5lciAuZHYtdmlldyAuZHYtZGVmYXVsdC1oZWFkZXIgPiBzcGFuIHtcbiAgcGFkZGluZy1sZWZ0OiA4cHg7XG4gIGZsZXgtZ3JvdzogMTtcbn1cbi5kdi1wYW5lLWNvbnRhaW5lcjpmaXJzdC1vZi10eXBlID4gLmR2LXBhbmUgPiAuZHYtcGFuZS1oZWFkZXIge1xuICBib3JkZXItdG9wOiBub25lICFpbXBvcnRhbnQ7XG59XG4uZHYtcGFuZS1jb250YWluZXIgLmR2LXBhbmUge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBoZWlnaHQ6IDEwMCU7XG59XG4uZHYtcGFuZS1jb250YWluZXIgLmR2LXBhbmUgLmR2LXBhbmUtaGVhZGVyIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgb3V0bGluZTogbm9uZTtcbn1cbi5kdi1wYW5lLWNvbnRhaW5lciAuZHYtcGFuZSAuZHYtcGFuZS1oZWFkZXIuZHYtcGFuZS1kcmFnZ2FibGUge1xuICBjdXJzb3I6IHBvaW50ZXI7XG59XG4uZHYtcGFuZS1jb250YWluZXIgLmR2LXBhbmUgLmR2LXBhbmUtaGVhZGVyOmZvY3VzOmJlZm9yZSwgLmR2LXBhbmUtY29udGFpbmVyIC5kdi1wYW5lIC5kdi1wYW5lLWhlYWRlcjpmb2N1cy13aXRoaW46YmVmb3JlIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDA7XG4gIGxlZnQ6IDA7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHotaW5kZXg6IDU7XG4gIGNvbnRlbnQ6IFwiXCI7XG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICBvdXRsaW5lOiAxcHggc29saWQ7XG4gIG91dGxpbmUtd2lkdGg6IC0xcHg7XG4gIG91dGxpbmUtc3R5bGU6IHNvbGlkO1xuICBvdXRsaW5lLW9mZnNldDogLTFweDtcbiAgb3V0bGluZS1jb2xvcjogdmFyKC0tZHYtcGFuZXZpZXctYWN0aXZlLW91dGxpbmUtY29sb3IpO1xufVxuLmR2LXBhbmUtY29udGFpbmVyIC5kdi1wYW5lIC5kdi1wYW5lLWJvZHkge1xuICBvdmVyZmxvdy15OiBhdXRvO1xuICBvdmVyZmxvdy14OiBoaWRkZW47XG4gIGZsZXgtZ3JvdzogMTtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBvdXRsaW5lOiBub25lO1xufVxuLmR2LXBhbmUtY29udGFpbmVyIC5kdi1wYW5lIC5kdi1wYW5lLWJvZHk6Zm9jdXM6YmVmb3JlLCAuZHYtcGFuZS1jb250YWluZXIgLmR2LXBhbmUgLmR2LXBhbmUtYm9keTpmb2N1cy13aXRoaW46YmVmb3JlIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDA7XG4gIGxlZnQ6IDA7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHotaW5kZXg6IDU7XG4gIGNvbnRlbnQ6IFwiXCI7XG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICBvdXRsaW5lOiAxcHggc29saWQ7XG4gIG91dGxpbmUtd2lkdGg6IC0xcHg7XG4gIG91dGxpbmUtc3R5bGU6IHNvbGlkO1xuICBvdXRsaW5lLW9mZnNldDogLTFweDtcbiAgb3V0bGluZS1jb2xvcjogdmFyKC0tZHYtcGFuZXZpZXctYWN0aXZlLW91dGxpbmUtY29sb3IpO1xufVxuLmR2LWRlYnVnIC5kdi1zcGxpdC12aWV3LWNvbnRhaW5lciAuZHYtc2FzaC1jb250YWluZXIgLmR2LXNhc2guZHYtZW5hYmxlZCB7XG4gIGJhY2tncm91bmQtY29sb3I6IGJsYWNrO1xufVxuLmR2LWRlYnVnIC5kdi1zcGxpdC12aWV3LWNvbnRhaW5lciAuZHYtc2FzaC1jb250YWluZXIgLmR2LXNhc2guZHYtZGlzYWJsZWQge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiBvcmFuZ2U7XG59XG4uZHYtZGVidWcgLmR2LXNwbGl0LXZpZXctY29udGFpbmVyIC5kdi1zYXNoLWNvbnRhaW5lciAuZHYtc2FzaC5kdi1tYXhpbXVtIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogZ3JlZW47XG59XG4uZHYtZGVidWcgLmR2LXNwbGl0LXZpZXctY29udGFpbmVyIC5kdi1zYXNoLWNvbnRhaW5lciAuZHYtc2FzaC5kdi1taW5pbXVtIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogcmVkO1xufVxuXG4uZHYtc3BsaXQtdmlldy1jb250YWluZXIge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG59XG4uZHYtc3BsaXQtdmlldy1jb250YWluZXIuZHYtc3BsaXR2aWV3LWRpc2FibGVkID4gLmR2LXNhc2gtY29udGFpbmVyID4gLmR2LXNhc2gge1xuICBwb2ludGVyLWV2ZW50czogbm9uZTtcbn1cbi5kdi1zcGxpdC12aWV3LWNvbnRhaW5lci5kdi1hbmltYXRpb24gLmR2LXZpZXcsXG4uZHYtc3BsaXQtdmlldy1jb250YWluZXIuZHYtYW5pbWF0aW9uIC5kdi1zYXNoIHtcbiAgdHJhbnNpdGlvbi1kdXJhdGlvbjogMC4xNXM7XG4gIHRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLW91dDtcbn1cbi5kdi1zcGxpdC12aWV3LWNvbnRhaW5lci5kdi1ob3Jpem9udGFsIHtcbiAgaGVpZ2h0OiAxMDAlO1xufVxuLmR2LXNwbGl0LXZpZXctY29udGFpbmVyLmR2LWhvcml6b250YWwgPiAuZHYtc2FzaC1jb250YWluZXIgPiAuZHYtc2FzaCB7XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDRweDtcbn1cbi5kdi1zcGxpdC12aWV3LWNvbnRhaW5lci5kdi1ob3Jpem9udGFsID4gLmR2LXNhc2gtY29udGFpbmVyID4gLmR2LXNhc2guZHYtZW5hYmxlZCB7XG4gIGN1cnNvcjogZXctcmVzaXplO1xufVxuLmR2LXNwbGl0LXZpZXctY29udGFpbmVyLmR2LWhvcml6b250YWwgPiAuZHYtc2FzaC1jb250YWluZXIgPiAuZHYtc2FzaC5kdi1kaXNhYmxlZCB7XG4gIGN1cnNvcjogZGVmYXVsdDtcbn1cbi5kdi1zcGxpdC12aWV3LWNvbnRhaW5lci5kdi1ob3Jpem9udGFsID4gLmR2LXNhc2gtY29udGFpbmVyID4gLmR2LXNhc2guZHYtbWF4aW11bSB7XG4gIGN1cnNvcjogdy1yZXNpemU7XG59XG4uZHYtc3BsaXQtdmlldy1jb250YWluZXIuZHYtaG9yaXpvbnRhbCA+IC5kdi1zYXNoLWNvbnRhaW5lciA+IC5kdi1zYXNoLmR2LW1pbmltdW0ge1xuICBjdXJzb3I6IGUtcmVzaXplO1xufVxuLmR2LXNwbGl0LXZpZXctY29udGFpbmVyLmR2LWhvcml6b250YWwgPiAuZHYtdmlldy1jb250YWluZXIgPiAuZHYtdmlldzpub3QoOmZpcnN0LWNoaWxkKTo6YmVmb3JlIHtcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogMXB4O1xufVxuLmR2LXNwbGl0LXZpZXctY29udGFpbmVyLmR2LXZlcnRpY2FsIHtcbiAgd2lkdGg6IDEwMCU7XG59XG4uZHYtc3BsaXQtdmlldy1jb250YWluZXIuZHYtdmVydGljYWwgPiAuZHYtc2FzaC1jb250YWluZXIgPiAuZHYtc2FzaCB7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDRweDtcbn1cbi5kdi1zcGxpdC12aWV3LWNvbnRhaW5lci5kdi12ZXJ0aWNhbCA+IC5kdi1zYXNoLWNvbnRhaW5lciA+IC5kdi1zYXNoLmR2LWVuYWJsZWQge1xuICBjdXJzb3I6IG5zLXJlc2l6ZTtcbn1cbi5kdi1zcGxpdC12aWV3LWNvbnRhaW5lci5kdi12ZXJ0aWNhbCA+IC5kdi1zYXNoLWNvbnRhaW5lciA+IC5kdi1zYXNoLmR2LWRpc2FibGVkIHtcbiAgY3Vyc29yOiBkZWZhdWx0O1xufVxuLmR2LXNwbGl0LXZpZXctY29udGFpbmVyLmR2LXZlcnRpY2FsID4gLmR2LXNhc2gtY29udGFpbmVyID4gLmR2LXNhc2guZHYtbWF4aW11bSB7XG4gIGN1cnNvcjogbi1yZXNpemU7XG59XG4uZHYtc3BsaXQtdmlldy1jb250YWluZXIuZHYtdmVydGljYWwgPiAuZHYtc2FzaC1jb250YWluZXIgPiAuZHYtc2FzaC5kdi1taW5pbXVtIHtcbiAgY3Vyc29yOiBzLXJlc2l6ZTtcbn1cbi5kdi1zcGxpdC12aWV3LWNvbnRhaW5lci5kdi12ZXJ0aWNhbCA+IC5kdi12aWV3LWNvbnRhaW5lciA+IC5kdi12aWV3IHtcbiAgd2lkdGg6IDEwMCU7XG59XG4uZHYtc3BsaXQtdmlldy1jb250YWluZXIuZHYtdmVydGljYWwgPiAuZHYtdmlldy1jb250YWluZXIgPiAuZHYtdmlldzpub3QoOmZpcnN0LWNoaWxkKTo6YmVmb3JlIHtcbiAgaGVpZ2h0OiAxcHg7XG4gIHdpZHRoOiAxMDAlO1xufVxuLmR2LXNwbGl0LXZpZXctY29udGFpbmVyIC5kdi1zYXNoLWNvbnRhaW5lciB7XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbn1cbi5kdi1zcGxpdC12aWV3LWNvbnRhaW5lciAuZHYtc2FzaC1jb250YWluZXIgLmR2LXNhc2gge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHotaW5kZXg6IDk5O1xuICBvdXRsaW5lOiBub25lO1xuICB1c2VyLXNlbGVjdDogbm9uZTtcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcbiAgLW1vei11c2VyLXNlbGVjdDogbm9uZTtcbiAgLW1zLXVzZXItc2VsZWN0OiBub25lO1xuICB0b3VjaC1hY3Rpb246IG5vbmU7XG59XG4uZHYtc3BsaXQtdmlldy1jb250YWluZXIgLmR2LXNhc2gtY29udGFpbmVyIC5kdi1zYXNoOm5vdCguZGlzYWJsZWQpOmFjdGl2ZSwgLmR2LXNwbGl0LXZpZXctY29udGFpbmVyIC5kdi1zYXNoLWNvbnRhaW5lciAuZHYtc2FzaDpub3QoLmRpc2FibGVkKTpob3ZlciB7XG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWR2LWFjdGl2ZS1zYXNoLWNvbG9yLCB0cmFuc3BhcmVudCk7XG4gIHRyYW5zaXRpb24tcHJvcGVydHk6IGJhY2tncm91bmQtY29sb3I7XG4gIHRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLWluLW91dDtcbiAgdHJhbnNpdGlvbi1kdXJhdGlvbjogdmFyKC0tZHYtYWN0aXZlLXNhc2gtdHJhbnNpdGlvbi1kdXJhdGlvbiwgMC4xcyk7XG4gIHRyYW5zaXRpb24tZGVsYXk6IHZhcigtLWR2LWFjdGl2ZS1zYXNoLXRyYW5zaXRpb24tZGVsYXksIDAuNXMpO1xufVxuLmR2LXNwbGl0LXZpZXctY29udGFpbmVyIC5kdi12aWV3LWNvbnRhaW5lciB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogMTAwJTtcbn1cbi5kdi1zcGxpdC12aWV3LWNvbnRhaW5lciAuZHYtdmlldy1jb250YWluZXIgLmR2LXZpZXcge1xuICBoZWlnaHQ6IDEwMCU7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIG92ZXJmbG93OiBhdXRvO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG59XG4uZHYtc3BsaXQtdmlldy1jb250YWluZXIuZHYtc2VwYXJhdG9yLWJvcmRlciAuZHYtdmlldzpub3QoOmZpcnN0LWNoaWxkKTo6YmVmb3JlIHtcbiAgY29udGVudDogXCIgXCI7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICB6LWluZGV4OiA1O1xuICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZHYtc2VwYXJhdG9yLWJvcmRlcik7XG59XG4uZHYtZHJhZ2dlZCB7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMHB4LCAwcHgsIDBweCk7IC8qIGZvcmNlcyB0YWIgdG8gYmUgZHJhd24gb24gYSBzZXBhcmF0ZSBsYXllciAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvdnNjb2RlL2lzc3Vlcy8xODczMykgKi9cbn1cblxuLmR2LXRhYiB7XG4gIGZsZXgtc2hyaW5rOiAwO1xufVxuLmR2LXRhYjpmb2N1cy13aXRoaW4sIC5kdi10YWI6Zm9jdXMge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG4uZHYtdGFiOmZvY3VzLXdpdGhpbjo6YWZ0ZXIsIC5kdi10YWI6Zm9jdXM6OmFmdGVyIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBjb250ZW50OiBcIlwiO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMDAlO1xuICB0b3A6IDBweDtcbiAgbGVmdDogMHB4O1xuICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgb3V0bGluZTogMXB4IHNvbGlkIHZhcigtLWR2LXRhYi1kaXZpZGVyLWNvbG9yKSAhaW1wb3J0YW50O1xuICBvdXRsaW5lLW9mZnNldDogLTFweDtcbiAgei1pbmRleDogNTtcbn1cbi5kdi10YWIuZHYtdGFiLWRyYWdnaW5nIC5kdi1kZWZhdWx0LXRhYi1hY3Rpb24ge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kdi1hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWNvbG9yKTtcbn1cbi5kdi10YWIuZHYtYWN0aXZlLXRhYiAuZHYtZGVmYXVsdC10YWIgLmR2LWRlZmF1bHQtdGFiLWFjdGlvbiB7XG4gIHZpc2liaWxpdHk6IHZpc2libGU7XG59XG4uZHYtdGFiLmR2LWluYWN0aXZlLXRhYiAuZHYtZGVmYXVsdC10YWIgLmR2LWRlZmF1bHQtdGFiLWFjdGlvbiB7XG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcbn1cbi5kdi10YWIuZHYtaW5hY3RpdmUtdGFiIC5kdi1kZWZhdWx0LXRhYjpob3ZlciAuZHYtZGVmYXVsdC10YWItYWN0aW9uIHtcbiAgdmlzaWJpbGl0eTogdmlzaWJsZTtcbn1cbi5kdi10YWIgLmR2LWRlZmF1bHQtdGFiIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIG1pbi13aWR0aDogODBweDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgcGFkZGluZzogMHB4IDhweDtcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG59XG4uZHYtdGFiIC5kdi1kZWZhdWx0LXRhYiAuZHYtZGVmYXVsdC10YWItY29udGVudCB7XG4gIHBhZGRpbmc6IDBweCA4cHg7XG4gIGZsZXgtZ3JvdzogMTtcbn1cbi5kdi10YWIgLmR2LWRlZmF1bHQtdGFiIC5kdi1kZWZhdWx0LXRhYi1hY3Rpb24ge1xuICBwYWRkaW5nOiA0cHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xufVxuLmR2LXRhYiAuZHYtZGVmYXVsdC10YWIgLmR2LWRlZmF1bHQtdGFiLWFjdGlvbjpob3ZlciB7XG4gIGJvcmRlci1yYWRpdXM6IDJweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZHYtaWNvbi1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yKTtcbn1cbi5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lciB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLWJhY2tncm91bmQtY29sb3IpO1xuICBmbGV4LXNocmluazogMDtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgaGVpZ2h0OiB2YXIoLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1oZWlnaHQpO1xuICBmb250LXNpemU6IHZhcigtLWR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLWZvbnQtc2l6ZSk7XG59XG4uZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXIuZHYtc2luZ2xlLXRhYi5kdi1mdWxsLXdpZHRoLXNpbmdsZS10YWIgLmR2LXRhYnMtY29udGFpbmVyIHtcbiAgZmxleC1ncm93OiAxO1xufVxuLmR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLmR2LXNpbmdsZS10YWIuZHYtZnVsbC13aWR0aC1zaW5nbGUtdGFiIC5kdi10YWJzLWNvbnRhaW5lciAuZHYtdGFiIHtcbiAgZmxleC1ncm93OiAxO1xufVxuLmR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLmR2LXNpbmdsZS10YWIuZHYtZnVsbC13aWR0aC1zaW5nbGUtdGFiIC5kdi12b2lkLWNvbnRhaW5lciB7XG4gIGZsZXgtZ3JvdzogMDtcbn1cbi5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lciAuZHYtdm9pZC1jb250YWluZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWdyb3c6IDE7XG4gIGN1cnNvcjogZ3JhYjtcbn1cbi5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lciAuZHYtdGFicy1jb250YWluZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBvdmVyZmxvdy14OiBvdmVybGF5O1xuICBvdmVyZmxvdy15OiBoaWRkZW47XG4gIHNjcm9sbGJhci13aWR0aDogdGhpbjtcbiAgLyogVHJhY2sgKi9cbiAgLyogSGFuZGxlICovXG59XG4uZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXIgLmR2LXRhYnMtY29udGFpbmVyOjotd2Via2l0LXNjcm9sbGJhciB7XG4gIGhlaWdodDogM3B4O1xufVxuLmR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyIC5kdi10YWJzLWNvbnRhaW5lcjo6LXdlYmtpdC1zY3JvbGxiYXItdHJhY2sge1xuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbn1cbi5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lciAuZHYtdGFicy1jb250YWluZXI6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iIHtcbiAgYmFja2dyb3VuZDogdmFyKC0tZHYtdGFicy1jb250YWluZXItc2Nyb2xsYmFyLWNvbG9yKTtcbn1cbi5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lciAuZHYtdGFicy1jb250YWluZXIgLmR2LXRhYiB7XG4gIC13ZWJraXQtdXNlci1kcmFnOiBlbGVtZW50O1xuICBvdXRsaW5lOiBub25lO1xuICBtaW4td2lkdGg6IDc1cHg7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xufVxuLmR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyIC5kdi10YWJzLWNvbnRhaW5lciAuZHYtdGFiOm5vdCg6Zmlyc3QtY2hpbGQpOjpiZWZvcmUge1xuICBjb250ZW50OiBcIiBcIjtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDA7XG4gIGxlZnQ6IDA7XG4gIHotaW5kZXg6IDU7XG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kdi10YWItZGl2aWRlci1jb2xvcik7XG4gIHdpZHRoOiAxcHg7XG4gIGhlaWdodDogMTAwJTtcbn1cbi5kdi13YXRlcm1hcmsge1xuICBkaXNwbGF5OiBmbGV4O1xuICBoZWlnaHQ6IDEwMCU7XG59YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L3N0eWxlcy9kb2Nrdmlldy5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxxQkFBcUI7RUFDckIsa0JBQWtCO0VBQ2xCLGNBQWM7RUFDZCxvQkFBb0I7RUFDcEIsZUFBZTtBQUNqQjtBQUNBO0VBQ0UsOENBQThDO0VBQzlDLCtDQUErQztFQUMvQyw0Q0FBNEM7RUFDNUMsc0RBQXNEO0VBQ3RELGtDQUFrQztFQUNsQyx5Q0FBeUM7RUFDekMsd0RBQXdEO0VBQ3hELCtEQUErRDtFQUMvRCx5QkFBeUI7RUFDekIsMENBQTBDO0VBQzFDLHVDQUF1QztFQUN2Qyx5Q0FBeUM7RUFDekMseURBQXlEO0VBQ3pELDJEQUEyRDtFQUMzRCwwREFBMEQ7RUFDMUQsNkRBQTZEO0VBQzdELDREQUE0RDtFQUM1RCwrQkFBK0I7RUFDL0IsOENBQThDO0VBQzlDLCtDQUErQztFQUMvQyxrREFBa0Q7RUFDbEQsaURBQWlEO0VBQ2pE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LGFBQWE7RUFDYixtQkFBbUI7RUFDbkIsa0JBQWtCO0VBQ2xCLHFCQUFxQjtFQUNyQixVQUFVO0VBQ1YsV0FBVztBQUNiO0FBQ0E7RUFDRSxXQUFXO0FBQ2I7QUFDQTtFQUNFLHVCQUF1QjtBQUN6QjtBQUNBO0VBQ0Usb0RBQW9EO0FBQ3REO0FBQ0E7RUFDRSwwQkFBMEI7RUFDMUIsYUFBYTtFQUNiLGVBQWU7RUFDZixlQUFlO0VBQ2Ysa0JBQWtCO0VBQ2xCLHNCQUFzQjtBQUN4QjtBQUNBO0VBQ0UsWUFBWTtFQUNaLGtCQUFrQjtFQUNsQixNQUFNO0VBQ04sT0FBTztFQUNQLFVBQVU7RUFDVixvQkFBb0I7RUFDcEIsNkNBQTZDO0VBQzdDLFVBQVU7RUFDVixZQUFZO0FBQ2Q7QUFDQTtFQUNFLGFBQWE7RUFDYixZQUFZO0FBQ2RcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmR2LXN2ZyB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBmaWxsOiBjdXJyZW50Y29sb3I7XFxuICBsaW5lLWhlaWdodDogMTtcXG4gIHN0cm9rZTogY3VycmVudGNvbG9yO1xcbiAgc3Ryb2tlLXdpZHRoOiAwO1xcbn1cXG4uZG9ja3ZpZXctdGhlbWUtZGFyayB7XFxuICAtLWR2LXBhbmV2aWV3LWFjdGl2ZS1vdXRsaW5lLWNvbG9yOiBkb2RnZXJibHVlO1xcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1mb250LXNpemU6IDEzcHg7XFxuICAtLWR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLWhlaWdodDogMzVweDtcXG4gIC0tZHYtZHJhZy1vdmVyLWJhY2tncm91bmQtY29sb3I6IHJnYmEoODMsIDg5LCA5MywgMC41KTtcXG4gIC0tZHYtZHJhZy1vdmVyLWJvcmRlci1jb2xvcjogd2hpdGU7XFxuICAtLWR2LXRhYnMtY29udGFpbmVyLXNjcm9sbGJhci1jb2xvcjogIzg4ODtcXG4gIC0tZHYtaWNvbi1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDkwLCA5MywgOTQsIDAuMzEpO1xcbiAgLS1kdi1mbG9hdGluZy1ib3gtc2hhZG93OiA4cHggOHB4IDhweCAwcHggcmdiYSg4MywgODksIDkzLCAwLjUpO1xcbiAgLS1kdi1vdmVybGF5LXotaW5kZXg6IDk5OTtcXG4gIC0tZHYtYWN0aXZlLXNhc2gtdHJhbnNpdGlvbi1kdXJhdGlvbjogMC4xcztcXG4gIC0tZHYtYWN0aXZlLXNhc2gtdHJhbnNpdGlvbi1kZWxheTogMC41cztcXG4gIC0tZHYtZ3JvdXAtdmlldy1iYWNrZ3JvdW5kLWNvbG9yOiAjMWUxZTFlO1xcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1iYWNrZ3JvdW5kLWNvbG9yOiAjMjUyNTI2O1xcbiAgLS1kdi1hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3I6ICMxZTFlMWU7XFxuICAtLWR2LWFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yOiAjMmQyZDJkO1xcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogIzFlMWUxZTtcXG4gIC0tZHYtaW5hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogIzJkMmQyZDtcXG4gIC0tZHYtdGFiLWRpdmlkZXItY29sb3I6ICMxZTFlMWU7XFxuICAtLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItY29sb3I6IHdoaXRlO1xcbiAgLS1kdi1hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItY29sb3I6ICM5Njk2OTY7XFxuICAtLWR2LWluYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1jb2xvcjogIzhmOGY4ZjtcXG4gIC0tZHYtaW5hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItY29sb3I6ICM2MjYyNjI7XFxuICAtLWR2LXNlcGFyYXRvci1ib3JkZXI6IHJnYig2OCwgNjgsIDY4KTtcXG4gIC0tZHYtcGFuZXZpZXctaGVhZGVyLWJvcmRlci1jb2xvcjogcmdiYSgyMDQsIDIwNCwgMjA0LCAwLjIpO1xcbn1cXG5cXG4uZG9ja3ZpZXctdGhlbWUtbGlnaHQge1xcbiAgLS1kdi1wYW5ldmlldy1hY3RpdmUtb3V0bGluZS1jb2xvcjogZG9kZ2VyYmx1ZTtcXG4gIC0tZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXItZm9udC1zaXplOiAxM3B4O1xcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1oZWlnaHQ6IDM1cHg7XFxuICAtLWR2LWRyYWctb3Zlci1iYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDgzLCA4OSwgOTMsIDAuNSk7XFxuICAtLWR2LWRyYWctb3Zlci1ib3JkZXItY29sb3I6IHdoaXRlO1xcbiAgLS1kdi10YWJzLWNvbnRhaW5lci1zY3JvbGxiYXItY29sb3I6ICM4ODg7XFxuICAtLWR2LWljb24taG92ZXItYmFja2dyb3VuZC1jb2xvcjogcmdiYSg5MCwgOTMsIDk0LCAwLjMxKTtcXG4gIC0tZHYtZmxvYXRpbmctYm94LXNoYWRvdzogOHB4IDhweCA4cHggMHB4IHJnYmEoODMsIDg5LCA5MywgMC41KTtcXG4gIC0tZHYtb3ZlcmxheS16LWluZGV4OiA5OTk7XFxuICAtLWR2LWFjdGl2ZS1zYXNoLXRyYW5zaXRpb24tZHVyYXRpb246IDAuMXM7XFxuICAtLWR2LWFjdGl2ZS1zYXNoLXRyYW5zaXRpb24tZGVsYXk6IDAuNXM7XFxuICAtLWR2LWdyb3VwLXZpZXctYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICAtLWR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLWJhY2tncm91bmQtY29sb3I6ICNmM2YzZjM7XFxuICAtLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICAtLWR2LWFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yOiAjZWNlY2VjO1xcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICAtLWR2LWluYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3I6ICNlY2VjZWM7XFxuICAtLWR2LXRhYi1kaXZpZGVyLWNvbG9yOiB3aGl0ZTtcXG4gIC0tZHYtYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1jb2xvcjogcmdiKDUxLCA1MSwgNTEpO1xcbiAgLS1kdi1hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItY29sb3I6IHJnYmEoNTEsIDUxLCA1MSwgMC43KTtcXG4gIC0tZHYtaW5hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWNvbG9yOiByZ2JhKDUxLCA1MSwgNTEsIDAuNyk7XFxuICAtLWR2LWluYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWNvbG9yOiByZ2JhKDUxLCA1MSwgNTEsIDAuMzUpO1xcbiAgLS1kdi1zZXBhcmF0b3ItYm9yZGVyOiByZ2JhKDEyOCwgMTI4LCAxMjgsIDAuMzUpO1xcbiAgLS1kdi1wYW5ldmlldy1oZWFkZXItYm9yZGVyLWNvbG9yOiByZ2IoNTEsIDUxLCA1MSk7XFxufVxcblxcbi5kb2Nrdmlldy10aGVtZS12cyB7XFxuICAtLWR2LXBhbmV2aWV3LWFjdGl2ZS1vdXRsaW5lLWNvbG9yOiBkb2RnZXJibHVlO1xcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1mb250LXNpemU6IDEzcHg7XFxuICAtLWR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLWhlaWdodDogMzVweDtcXG4gIC0tZHYtZHJhZy1vdmVyLWJhY2tncm91bmQtY29sb3I6IHJnYmEoODMsIDg5LCA5MywgMC41KTtcXG4gIC0tZHYtZHJhZy1vdmVyLWJvcmRlci1jb2xvcjogd2hpdGU7XFxuICAtLWR2LXRhYnMtY29udGFpbmVyLXNjcm9sbGJhci1jb2xvcjogIzg4ODtcXG4gIC0tZHYtaWNvbi1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDkwLCA5MywgOTQsIDAuMzEpO1xcbiAgLS1kdi1mbG9hdGluZy1ib3gtc2hhZG93OiA4cHggOHB4IDhweCAwcHggcmdiYSg4MywgODksIDkzLCAwLjUpO1xcbiAgLS1kdi1vdmVybGF5LXotaW5kZXg6IDk5OTtcXG4gIC0tZHYtYWN0aXZlLXNhc2gtdHJhbnNpdGlvbi1kdXJhdGlvbjogMC4xcztcXG4gIC0tZHYtYWN0aXZlLXNhc2gtdHJhbnNpdGlvbi1kZWxheTogMC41cztcXG4gIC0tZHYtZ3JvdXAtdmlldy1iYWNrZ3JvdW5kLWNvbG9yOiAjMWUxZTFlO1xcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1iYWNrZ3JvdW5kLWNvbG9yOiAjMjUyNTI2O1xcbiAgLS1kdi1hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3I6ICMxZTFlMWU7XFxuICAtLWR2LWFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yOiAjMmQyZDJkO1xcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogIzFlMWUxZTtcXG4gIC0tZHYtaW5hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogIzJkMmQyZDtcXG4gIC0tZHYtdGFiLWRpdmlkZXItY29sb3I6ICMxZTFlMWU7XFxuICAtLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItY29sb3I6IHdoaXRlO1xcbiAgLS1kdi1hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItY29sb3I6ICM5Njk2OTY7XFxuICAtLWR2LWluYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1jb2xvcjogIzhmOGY4ZjtcXG4gIC0tZHYtaW5hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItY29sb3I6ICM2MjYyNjI7XFxuICAtLWR2LXNlcGFyYXRvci1ib3JkZXI6IHJnYig2OCwgNjgsIDY4KTtcXG4gIC0tZHYtcGFuZXZpZXctaGVhZGVyLWJvcmRlci1jb2xvcjogcmdiYSgyMDQsIDIwNCwgMjA0LCAwLjIpO1xcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1iYWNrZ3JvdW5kLWNvbG9yOiAjMmQyZDMwO1xcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1oZWlnaHQ6IDIwcHg7XFxuICAtLWR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLWZvbnQtc2l6ZTogMTFweDtcXG4gIC0tZHYtYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yOiAjMDA3YWNjO1xcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogIzNmM2Y0NjtcXG4gIC0tZHYtYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1jb2xvcjogd2hpdGU7XFxuICAtLWR2LWFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1jb2xvcjogd2hpdGU7XFxuICAtLWR2LWluYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1jb2xvcjogd2hpdGU7XFxuICAtLWR2LWluYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWNvbG9yOiB3aGl0ZTtcXG59XFxuLmRvY2t2aWV3LXRoZW1lLXZzIC5kdi1ncm91cHZpZXcuZHYtYWN0aXZlLWdyb3VwID4gLmR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyIHtcXG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xcbiAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkIHZhcigtLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcik7XFxufVxcbi5kb2Nrdmlldy10aGVtZS12cyAuZHYtZ3JvdXB2aWV3LmR2LWFjdGl2ZS1ncm91cCA+IC5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lciAuZHYtdGFiLmR2LWFjdGl2ZS10YWIge1xcbiAgYm9yZGVyLXRvcDogMnB4IHNvbGlkIHZhcigtLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcik7XFxufVxcbi5kb2Nrdmlldy10aGVtZS12cyAuZHYtZ3JvdXB2aWV3LmR2LWFjdGl2ZS1ncm91cCA+IC5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lciAuZHYtdGFiLmR2LWluYWN0aXZlLXRhYiB7XFxuICBib3JkZXItdG9wOiAycHggc29saWQgdmFyKC0tZHYtYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3IpO1xcbn1cXG4uZG9ja3ZpZXctdGhlbWUtdnMgLmR2LWdyb3Vwdmlldy5kdi1pbmFjdGl2ZS1ncm91cCA+IC5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lciB7XFxuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcXG4gIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCB2YXIoLS1kdi1pbmFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcik7XFxufVxcbi5kb2Nrdmlldy10aGVtZS12cyAuZHYtZ3JvdXB2aWV3LmR2LWluYWN0aXZlLWdyb3VwID4gLmR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyIC5kdi10YWIuZHYtYWN0aXZlLXRhYiB7XFxuICBib3JkZXItdG9wOiAycHggc29saWQgdmFyKC0tZHYtaW5hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3IpO1xcbn1cXG4uZG9ja3ZpZXctdGhlbWUtdnMgLmR2LWdyb3Vwdmlldy5kdi1pbmFjdGl2ZS1ncm91cCA+IC5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lciAuZHYtdGFiLmR2LWluYWN0aXZlLXRhYiB7XFxuICBib3JkZXItdG9wOiAycHggc29saWQgdmFyKC0tZHYtaW5hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcik7XFxufVxcblxcbi5kb2Nrdmlldy10aGVtZS1hYnlzcyB7XFxuICAtLWR2LXBhbmV2aWV3LWFjdGl2ZS1vdXRsaW5lLWNvbG9yOiBkb2RnZXJibHVlO1xcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1mb250LXNpemU6IDEzcHg7XFxuICAtLWR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLWhlaWdodDogMzVweDtcXG4gIC0tZHYtZHJhZy1vdmVyLWJhY2tncm91bmQtY29sb3I6IHJnYmEoODMsIDg5LCA5MywgMC41KTtcXG4gIC0tZHYtZHJhZy1vdmVyLWJvcmRlci1jb2xvcjogd2hpdGU7XFxuICAtLWR2LXRhYnMtY29udGFpbmVyLXNjcm9sbGJhci1jb2xvcjogIzg4ODtcXG4gIC0tZHYtaWNvbi1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDkwLCA5MywgOTQsIDAuMzEpO1xcbiAgLS1kdi1mbG9hdGluZy1ib3gtc2hhZG93OiA4cHggOHB4IDhweCAwcHggcmdiYSg4MywgODksIDkzLCAwLjUpO1xcbiAgLS1kdi1vdmVybGF5LXotaW5kZXg6IDk5OTtcXG4gIC0tZHYtYWN0aXZlLXNhc2gtdHJhbnNpdGlvbi1kdXJhdGlvbjogMC4xcztcXG4gIC0tZHYtYWN0aXZlLXNhc2gtdHJhbnNpdGlvbi1kZWxheTogMC41cztcXG4gIC0tZHYtZ3JvdXAtdmlldy1iYWNrZ3JvdW5kLWNvbG9yOiAjMDAwYzE4O1xcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1iYWNrZ3JvdW5kLWNvbG9yOiAjMWMxYzJhO1xcbiAgLS1kdi1hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3I6ICMwMDBjMTg7XFxuICAtLWR2LWFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yOiAjMTAxOTJjO1xcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogIzAwMGMxODtcXG4gIC0tZHYtaW5hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogIzEwMTkyYztcXG4gIC0tZHYtdGFiLWRpdmlkZXItY29sb3I6ICMyYjJiNGE7XFxuICAtLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItY29sb3I6IHdoaXRlO1xcbiAgLS1kdi1hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTtcXG4gIC0tZHYtaW5hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSk7XFxuICAtLWR2LWluYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMjUpO1xcbiAgLS1kdi1zZXBhcmF0b3ItYm9yZGVyOiAjMmIyYjRhO1xcbiAgLS1kdi1wYW5ldmlldy1oZWFkZXItYm9yZGVyLWNvbG9yOiAjMmIyYjRhO1xcbiAgLS1kdi1wYW5ldmlldy1hY3RpdmUtb3V0bGluZS1jb2xvcjogIzU5NmY5OTtcXG59XFxuXFxuLmRvY2t2aWV3LXRoZW1lLWRyYWN1bGEge1xcbiAgLS1kdi1wYW5ldmlldy1hY3RpdmUtb3V0bGluZS1jb2xvcjogZG9kZ2VyYmx1ZTtcXG4gIC0tZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXItZm9udC1zaXplOiAxM3B4O1xcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1oZWlnaHQ6IDM1cHg7XFxuICAtLWR2LWRyYWctb3Zlci1iYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDgzLCA4OSwgOTMsIDAuNSk7XFxuICAtLWR2LWRyYWctb3Zlci1ib3JkZXItY29sb3I6IHdoaXRlO1xcbiAgLS1kdi10YWJzLWNvbnRhaW5lci1zY3JvbGxiYXItY29sb3I6ICM4ODg7XFxuICAtLWR2LWljb24taG92ZXItYmFja2dyb3VuZC1jb2xvcjogcmdiYSg5MCwgOTMsIDk0LCAwLjMxKTtcXG4gIC0tZHYtZmxvYXRpbmctYm94LXNoYWRvdzogOHB4IDhweCA4cHggMHB4IHJnYmEoODMsIDg5LCA5MywgMC41KTtcXG4gIC0tZHYtb3ZlcmxheS16LWluZGV4OiA5OTk7XFxuICAtLWR2LWFjdGl2ZS1zYXNoLXRyYW5zaXRpb24tZHVyYXRpb246IDAuMXM7XFxuICAtLWR2LWFjdGl2ZS1zYXNoLXRyYW5zaXRpb24tZGVsYXk6IDAuNXM7XFxuICAtLWR2LWdyb3VwLXZpZXctYmFja2dyb3VuZC1jb2xvcjogIzI4MmEzNjtcXG4gIC0tZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXItYmFja2dyb3VuZC1jb2xvcjogIzE5MWEyMTtcXG4gIC0tZHYtYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yOiAjMjgyYTM2O1xcbiAgLS1kdi1hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogIzIxMjIyYztcXG4gIC0tZHYtaW5hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3I6ICMyODJhMzY7XFxuICAtLWR2LWluYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3I6ICMyMTIyMmM7XFxuICAtLWR2LXRhYi1kaXZpZGVyLWNvbG9yOiAjMTkxYTIxO1xcbiAgLS1kdi1hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWNvbG9yOiByZ2IoMjQ4LCAyNDgsIDI0Mik7XFxuICAtLWR2LWFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1jb2xvcjogcmdiKDk4LCAxMTQsIDE2NCk7XFxuICAtLWR2LWluYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1jb2xvcjogcmdiYSgyNDgsIDI0OCwgMjQyLCAwLjUpO1xcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1jb2xvcjogcmdiYSg5OCwgMTE0LCAxNjQsIDAuNSk7XFxuICAtLWR2LXNlcGFyYXRvci1ib3JkZXI6ICNiZDkzZjk7XFxuICAtLWR2LXBhbmV2aWV3LWhlYWRlci1ib3JkZXItY29sb3I6ICNiZDkzZjk7XFxuICAtLWR2LXBhbmV2aWV3LWFjdGl2ZS1vdXRsaW5lLWNvbG9yOiAjNjI3MmE0O1xcbn1cXG4uZG9ja3ZpZXctdGhlbWUtZHJhY3VsYSAuZHYtZ3JvdXB2aWV3LmR2LWFjdGl2ZS1ncm91cCA+IC5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lciA+IC5kdi10YWJzLWNvbnRhaW5lciA+IC5kdi10YWIuZHYtYWN0aXZlLXRhYiB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcbi5kb2Nrdmlldy10aGVtZS1kcmFjdWxhIC5kdi1ncm91cHZpZXcuZHYtYWN0aXZlLWdyb3VwID4gLmR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyID4gLmR2LXRhYnMtY29udGFpbmVyID4gLmR2LXRhYi5kdi1hY3RpdmUtdGFiOjphZnRlciB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBsZWZ0OiAwcHg7XFxuICB0b3A6IDBweDtcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDFweDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM5NDUyN2U7XFxuICB6LWluZGV4OiA5OTk7XFxufVxcbi5kb2Nrdmlldy10aGVtZS1kcmFjdWxhIC5kdi1ncm91cHZpZXcuZHYtaW5hY3RpdmUtZ3JvdXAgPiAuZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXIgPiAuZHYtdGFicy1jb250YWluZXIgPiAuZHYtdGFiLmR2LWFjdGl2ZS10YWIge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG4uZG9ja3ZpZXctdGhlbWUtZHJhY3VsYSAuZHYtZ3JvdXB2aWV3LmR2LWluYWN0aXZlLWdyb3VwID4gLmR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyID4gLmR2LXRhYnMtY29udGFpbmVyID4gLmR2LXRhYi5kdi1hY3RpdmUtdGFiOjphZnRlciB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBsZWZ0OiAwcHg7XFxuICBib3R0b206IDBweDtcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDFweDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM1ZTNkNWE7XFxuICB6LWluZGV4OiA5OTk7XFxufVxcblxcbi5kb2Nrdmlldy10aGVtZS1yZXBsaXQge1xcbiAgLS1kdi1wYW5ldmlldy1hY3RpdmUtb3V0bGluZS1jb2xvcjogZG9kZ2VyYmx1ZTtcXG4gIC0tZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXItZm9udC1zaXplOiAxM3B4O1xcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1oZWlnaHQ6IDM1cHg7XFxuICAtLWR2LWRyYWctb3Zlci1iYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDgzLCA4OSwgOTMsIDAuNSk7XFxuICAtLWR2LWRyYWctb3Zlci1ib3JkZXItY29sb3I6IHdoaXRlO1xcbiAgLS1kdi10YWJzLWNvbnRhaW5lci1zY3JvbGxiYXItY29sb3I6ICM4ODg7XFxuICAtLWR2LWljb24taG92ZXItYmFja2dyb3VuZC1jb2xvcjogcmdiYSg5MCwgOTMsIDk0LCAwLjMxKTtcXG4gIC0tZHYtZmxvYXRpbmctYm94LXNoYWRvdzogOHB4IDhweCA4cHggMHB4IHJnYmEoODMsIDg5LCA5MywgMC41KTtcXG4gIC0tZHYtb3ZlcmxheS16LWluZGV4OiA5OTk7XFxuICAtLWR2LWFjdGl2ZS1zYXNoLXRyYW5zaXRpb24tZHVyYXRpb246IDAuMXM7XFxuICAtLWR2LWFjdGl2ZS1zYXNoLXRyYW5zaXRpb24tZGVsYXk6IDAuNXM7XFxuICAtLWR2LWdyb3VwLXZpZXctYmFja2dyb3VuZC1jb2xvcjogI2ViZWNlZDtcXG4gIC0tZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXItYmFja2dyb3VuZC1jb2xvcjogI2ZjZmNmYztcXG4gIC0tZHYtYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yOiAjZjBmMWYyO1xcbiAgLS1kdi1hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogI2ZjZmNmYztcXG4gIC0tZHYtaW5hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3I6ICNmMGYxZjI7XFxuICAtLWR2LWluYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3I6ICNmY2ZjZmM7XFxuICAtLWR2LXRhYi1kaXZpZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIC0tZHYtYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1jb2xvcjogcmdiKDUxLCA1MSwgNTEpO1xcbiAgLS1kdi1hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItY29sb3I6IHJnYig1MSwgNTEsIDUxKTtcXG4gIC0tZHYtaW5hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWNvbG9yOiByZ2IoNTEsIDUxLCA1MSk7XFxuICAtLWR2LWluYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWNvbG9yOiByZ2IoNTEsIDUxLCA1MSk7XFxuICAtLWR2LXNlcGFyYXRvci1ib3JkZXI6IHRyYW5zcGFyZW50O1xcbiAgLS1kdi1wYW5ldmlldy1oZWFkZXItYm9yZGVyLWNvbG9yOiByZ2IoNTEsIDUxLCA1MSk7XFxuICAtLWR2LXNlcGFyYXRvci1oYW5kbGUtYmFja2dyb3VuZC1jb2xvcjogI2NmZDFkMztcXG4gIC0tZHYtc2VwYXJhdG9yLWhhbmRsZS1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yOiAjYmFiYmJiO1xcbn1cXG4uZG9ja3ZpZXctdGhlbWUtcmVwbGl0IC5kdi1yZXNpemUtY29udGFpbmVyOmhhcyg+IC5kdi1ncm91cHZpZXcpIHtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG59XFxuLmRvY2t2aWV3LXRoZW1lLXJlcGxpdCAuZHYtZ3JvdXB2aWV3IHtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBib3JkZXItcmFkaXVzOiAxMHB4O1xcbn1cXG4uZG9ja3ZpZXctdGhlbWUtcmVwbGl0IC5kdi1ncm91cHZpZXcgLmR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyIHtcXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCByZ2JhKDEyOCwgMTI4LCAxMjgsIDAuMzUpO1xcbn1cXG4uZG9ja3ZpZXctdGhlbWUtcmVwbGl0IC5kdi1ncm91cHZpZXcgLmR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyIC5kdi10YWIge1xcbiAgbWFyZ2luOiA0cHg7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxufVxcbi5kb2Nrdmlldy10aGVtZS1yZXBsaXQgLmR2LWdyb3VwdmlldyAuZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXIgLmR2LXRhYiAuZHYtc3ZnIHtcXG4gIGhlaWdodDogOHB4O1xcbiAgd2lkdGg6IDhweDtcXG59XFxuLmRvY2t2aWV3LXRoZW1lLXJlcGxpdCAuZHYtZ3JvdXB2aWV3IC5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lciAuZHYtdGFiOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlNGU1ZTYgIWltcG9ydGFudDtcXG59XFxuLmRvY2t2aWV3LXRoZW1lLXJlcGxpdCAuZHYtZ3JvdXB2aWV3IC5kdi1jb250ZW50LWNvbnRhaW5lciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmNmY2ZjO1xcbn1cXG4uZG9ja3ZpZXctdGhlbWUtcmVwbGl0IC5kdi1ncm91cHZpZXcuZHYtYWN0aXZlLWdyb3VwIHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMTI4LCAxMjgsIDEyOCwgMC4zNSk7XFxufVxcbi5kb2Nrdmlldy10aGVtZS1yZXBsaXQgLmR2LWdyb3Vwdmlldy5kdi1pbmFjdGl2ZS1ncm91cCB7XFxuICBib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudDtcXG59XFxuLmRvY2t2aWV3LXRoZW1lLXJlcGxpdCAuZHYtdmVydGljYWwgPiAuZHYtc2FzaC1jb250YWluZXIgPiAuZHYtc2FzaDpub3QoLmRpc2FibGVkKTo6YWZ0ZXIge1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBoZWlnaHQ6IDRweDtcXG4gIHdpZHRoOiA0MHB4O1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgdG9wOiA1MCU7XFxuICBsZWZ0OiA1MCU7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWR2LXNlcGFyYXRvci1oYW5kbGUtYmFja2dyb3VuZC1jb2xvcik7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxufVxcbi5kb2Nrdmlldy10aGVtZS1yZXBsaXQgLmR2LXZlcnRpY2FsID4gLmR2LXNhc2gtY29udGFpbmVyID4gLmR2LXNhc2g6bm90KC5kaXNhYmxlZCk6aG92ZXI6OmFmdGVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWR2LXNlcGFyYXRvci1oYW5kbGUtaG92ZXItYmFja2dyb3VuZC1jb2xvcik7XFxufVxcbi5kb2Nrdmlldy10aGVtZS1yZXBsaXQgLmR2LWhvcml6b250YWwgPiAuZHYtc2FzaC1jb250YWluZXIgPiAuZHYtc2FzaDpub3QoLmRpc2FibGVkKTo6YWZ0ZXIge1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBoZWlnaHQ6IDQwcHg7XFxuICB3aWR0aDogNHB4O1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgdG9wOiA1MCU7XFxuICBsZWZ0OiA1MCU7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWR2LXNlcGFyYXRvci1oYW5kbGUtYmFja2dyb3VuZC1jb2xvcik7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxufVxcbi5kb2Nrdmlldy10aGVtZS1yZXBsaXQgLmR2LWhvcml6b250YWwgPiAuZHYtc2FzaC1jb250YWluZXIgPiAuZHYtc2FzaDpub3QoLmRpc2FibGVkKTpob3Zlcjo6YWZ0ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZHYtc2VwYXJhdG9yLWhhbmRsZS1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yKTtcXG59XFxuLmR2LWRyb3AtdGFyZ2V0IHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuLmR2LWRyb3AtdGFyZ2V0ID4gLmR2LWRyb3AtdGFyZ2V0LWRyb3B6b25lIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGxlZnQ6IDBweDtcXG4gIHRvcDogMHB4O1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgd2lkdGg6IDEwMCU7XFxuICB6LWluZGV4OiAxMDAwO1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxufVxcbi5kdi1kcm9wLXRhcmdldCA+IC5kdi1kcm9wLXRhcmdldC1kcm9wem9uZSA+IC5kdi1kcm9wLXRhcmdldC1zZWxlY3Rpb24ge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZHYtZHJhZy1vdmVyLWJhY2tncm91bmQtY29sb3IpO1xcbiAgdHJhbnNpdGlvbjogdG9wIDcwbXMgZWFzZS1vdXQsIGxlZnQgNzBtcyBlYXNlLW91dCwgd2lkdGggNzBtcyBlYXNlLW91dCwgaGVpZ2h0IDcwbXMgZWFzZS1vdXQsIG9wYWNpdHkgMC4xNXMgZWFzZS1vdXQ7XFxuICB3aWxsLWNoYW5nZTogdHJhbnNmb3JtO1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxufVxcbi5kdi1kcm9wLXRhcmdldCA+IC5kdi1kcm9wLXRhcmdldC1kcm9wem9uZSA+IC5kdi1kcm9wLXRhcmdldC1zZWxlY3Rpb24uZHYtZHJvcC10YXJnZXQtdG9wLmR2LWRyb3AtdGFyZ2V0LXNtYWxsLXZlcnRpY2FsIHtcXG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCB2YXIoLS1kdi1kcmFnLW92ZXItYm9yZGVyLWNvbG9yKTtcXG59XFxuLmR2LWRyb3AtdGFyZ2V0ID4gLmR2LWRyb3AtdGFyZ2V0LWRyb3B6b25lID4gLmR2LWRyb3AtdGFyZ2V0LXNlbGVjdGlvbi5kdi1kcm9wLXRhcmdldC1ib3R0b20uZHYtZHJvcC10YXJnZXQtc21hbGwtdmVydGljYWwge1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHZhcigtLWR2LWRyYWctb3Zlci1ib3JkZXItY29sb3IpO1xcbn1cXG4uZHYtZHJvcC10YXJnZXQgPiAuZHYtZHJvcC10YXJnZXQtZHJvcHpvbmUgPiAuZHYtZHJvcC10YXJnZXQtc2VsZWN0aW9uLmR2LWRyb3AtdGFyZ2V0LWxlZnQuZHYtZHJvcC10YXJnZXQtc21hbGwtaG9yaXpvbnRhbCB7XFxuICBib3JkZXItbGVmdDogMXB4IHNvbGlkIHZhcigtLWR2LWRyYWctb3Zlci1ib3JkZXItY29sb3IpO1xcbn1cXG4uZHYtZHJvcC10YXJnZXQgPiAuZHYtZHJvcC10YXJnZXQtZHJvcHpvbmUgPiAuZHYtZHJvcC10YXJnZXQtc2VsZWN0aW9uLmR2LWRyb3AtdGFyZ2V0LXJpZ2h0LmR2LWRyb3AtdGFyZ2V0LXNtYWxsLWhvcml6b250YWwge1xcbiAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgdmFyKC0tZHYtZHJhZy1vdmVyLWJvcmRlci1jb2xvcik7XFxufVxcbi5kdi1kb2NrdmlldyB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kdi1ncm91cC12aWV3LWJhY2tncm91bmQtY29sb3IpO1xcbn1cXG4uZHYtZG9ja3ZpZXcgLmR2LXdhdGVybWFyay1jb250YWluZXIge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAwcHg7XFxuICBsZWZ0OiAwcHg7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICB3aWR0aDogMTAwJTtcXG4gIHotaW5kZXg6IDE7XFxufVxcbi5kdi1kb2NrdmlldyAuZHYtb3ZlcmxheS1yZW5kZXItY29udGFpbmVyIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuXFxuLmR2LWdyb3Vwdmlldy5kdi1hY3RpdmUtZ3JvdXAgPiAuZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXIgPiAuZHYtdGFicy1jb250YWluZXIgPiAuZHYtdGFiLmR2LWFjdGl2ZS10YWIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZHYtYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yKTtcXG4gIGNvbG9yOiB2YXIoLS1kdi1hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWNvbG9yKTtcXG59XFxuLmR2LWdyb3Vwdmlldy5kdi1hY3RpdmUtZ3JvdXAgPiAuZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXIgPiAuZHYtdGFicy1jb250YWluZXIgPiAuZHYtdGFiLmR2LWluYWN0aXZlLXRhYiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kdi1hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcik7XFxuICBjb2xvcjogdmFyKC0tZHYtYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWNvbG9yKTtcXG59XFxuLmR2LWdyb3Vwdmlldy5kdi1pbmFjdGl2ZS1ncm91cCA+IC5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lciA+IC5kdi10YWJzLWNvbnRhaW5lciA+IC5kdi10YWIuZHYtYWN0aXZlLXRhYiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kdi1pbmFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcik7XFxuICBjb2xvcjogdmFyKC0tZHYtaW5hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWNvbG9yKTtcXG59XFxuLmR2LWdyb3Vwdmlldy5kdi1pbmFjdGl2ZS1ncm91cCA+IC5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lciA+IC5kdi10YWJzLWNvbnRhaW5lciA+IC5kdi10YWIuZHYtaW5hY3RpdmUtdGFiIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWR2LWluYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3IpO1xcbiAgY29sb3I6IHZhcigtLWR2LWluYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWNvbG9yKTtcXG59XFxuXFxuLyoqXFxuICogd2hlbiBhIHRhYiBpcyBkcmFnZ2VkIHdlIGxvc2UgdGhlIGFib3ZlIHN0eWxpbmdzIGJlY2F1c2UgdGhleSBhcmUgY29uZGl0aW9uYWwgb24gcGFyZW50IGVsZW1lbnRzXFxuICogdGhlcmVmb3JlIHdlIGFsc28gc2V0IHNvbWUgc3R5bGluZ3MgZm9yIHRoZSBkcmFnZ2luZyBldmVudFxcbiAqKi9cXG4uZHYtdGFiLmR2LXRhYi1kcmFnZ2luZyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kdi1hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3IpO1xcbiAgY29sb3I6IHZhcigtLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItY29sb3IpO1xcbn1cXG4uZHYtZ3JvdXB2aWV3IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZHYtZ3JvdXAtdmlldy1iYWNrZ3JvdW5kLWNvbG9yKTtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxufVxcbi5kdi1ncm91cHZpZXc6Zm9jdXMge1xcbiAgb3V0bGluZTogbm9uZTtcXG59XFxuLmR2LWdyb3VwdmlldyA+IC5kdi1jb250ZW50LWNvbnRhaW5lciB7XFxuICBmbGV4LWdyb3c6IDE7XFxuICBtaW4taGVpZ2h0OiAwO1xcbiAgb3V0bGluZTogbm9uZTtcXG59XFxuLmR2LXJvb3Qtd3JhcHBlciB7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuLmR2LWdyaWQtdmlldyxcXG4uZHYtYnJhbmNoLW5vZGUge1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcbi5kdi1kZWJ1ZyAuZHYtcmVzaXplLWNvbnRhaW5lciAuZHYtcmVzaXplLWhhbmRsZS10b3Age1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmVkO1xcbn1cXG4uZHYtZGVidWcgLmR2LXJlc2l6ZS1jb250YWluZXIgLmR2LXJlc2l6ZS1oYW5kbGUtYm90dG9tIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGdyZWVuO1xcbn1cXG4uZHYtZGVidWcgLmR2LXJlc2l6ZS1jb250YWluZXIgLmR2LXJlc2l6ZS1oYW5kbGUtbGVmdCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB5ZWxsb3c7XFxufVxcbi5kdi1kZWJ1ZyAuZHYtcmVzaXplLWNvbnRhaW5lciAuZHYtcmVzaXplLWhhbmRsZS1yaWdodCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBibHVlO1xcbn1cXG4uZHYtZGVidWcgLmR2LXJlc2l6ZS1jb250YWluZXIgLmR2LXJlc2l6ZS1oYW5kbGUtdG9wbGVmdCxcXG4uZHYtZGVidWcgLmR2LXJlc2l6ZS1jb250YWluZXIgLmR2LXJlc2l6ZS1oYW5kbGUtdG9wcmlnaHQsXFxuLmR2LWRlYnVnIC5kdi1yZXNpemUtY29udGFpbmVyIC5kdi1yZXNpemUtaGFuZGxlLWJvdHRvbWxlZnQsXFxuLmR2LWRlYnVnIC5kdi1yZXNpemUtY29udGFpbmVyIC5kdi1yZXNpemUtaGFuZGxlLWJvdHRvbXJpZ2h0IHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGN5YW47XFxufVxcblxcbi5kdi1yZXNpemUtY29udGFpbmVyIHtcXG4gIC0tZHYtb3ZlcmxheS16LWluZGV4OiB2YXIoLS1kdi1vdmVybGF5LXotaW5kZXgsIDk5OSk7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB6LWluZGV4OiBjYWxjKHZhcigtLWR2LW92ZXJsYXktei1pbmRleCkgLSAyKTtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWR2LXRhYi1kaXZpZGVyLWNvbG9yKTtcXG4gIGJveC1zaGFkb3c6IHZhcigtLWR2LWZsb2F0aW5nLWJveC1zaGFkb3cpO1xcbn1cXG4uZHYtcmVzaXplLWNvbnRhaW5lci5kdi1oaWRkZW4ge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuLmR2LXJlc2l6ZS1jb250YWluZXIuZHYtcmVzaXplLWNvbnRhaW5lci1kcmFnZ2luZyB7XFxuICBvcGFjaXR5OiAwLjU7XFxufVxcbi5kdi1yZXNpemUtY29udGFpbmVyIC5kdi1yZXNpemUtaGFuZGxlLXRvcCB7XFxuICBoZWlnaHQ6IDRweDtcXG4gIHdpZHRoOiBjYWxjKDEwMCUgLSA4cHgpO1xcbiAgbGVmdDogNHB4O1xcbiAgdG9wOiAtMnB4O1xcbiAgei1pbmRleDogdmFyKC0tZHYtb3ZlcmxheS16LWluZGV4KTtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGN1cnNvcjogbnMtcmVzaXplO1xcbn1cXG4uZHYtcmVzaXplLWNvbnRhaW5lciAuZHYtcmVzaXplLWhhbmRsZS1ib3R0b20ge1xcbiAgaGVpZ2h0OiA0cHg7XFxuICB3aWR0aDogY2FsYygxMDAlIC0gOHB4KTtcXG4gIGxlZnQ6IDRweDtcXG4gIGJvdHRvbTogLTJweDtcXG4gIHotaW5kZXg6IHZhcigtLWR2LW92ZXJsYXktei1pbmRleCk7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBjdXJzb3I6IG5zLXJlc2l6ZTtcXG59XFxuLmR2LXJlc2l6ZS1jb250YWluZXIgLmR2LXJlc2l6ZS1oYW5kbGUtbGVmdCB7XFxuICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDhweCk7XFxuICB3aWR0aDogNHB4O1xcbiAgbGVmdDogLTJweDtcXG4gIHRvcDogNHB4O1xcbiAgei1pbmRleDogdmFyKC0tZHYtb3ZlcmxheS16LWluZGV4KTtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGN1cnNvcjogZXctcmVzaXplO1xcbn1cXG4uZHYtcmVzaXplLWNvbnRhaW5lciAuZHYtcmVzaXplLWhhbmRsZS1yaWdodCB7XFxuICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDhweCk7XFxuICB3aWR0aDogNHB4O1xcbiAgcmlnaHQ6IC0ycHg7XFxuICB0b3A6IDRweDtcXG4gIHotaW5kZXg6IHZhcigtLWR2LW92ZXJsYXktei1pbmRleCk7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBjdXJzb3I6IGV3LXJlc2l6ZTtcXG59XFxuLmR2LXJlc2l6ZS1jb250YWluZXIgLmR2LXJlc2l6ZS1oYW5kbGUtdG9wbGVmdCB7XFxuICBoZWlnaHQ6IDRweDtcXG4gIHdpZHRoOiA0cHg7XFxuICB0b3A6IC0ycHg7XFxuICBsZWZ0OiAtMnB4O1xcbiAgei1pbmRleDogdmFyKC0tZHYtb3ZlcmxheS16LWluZGV4KTtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGN1cnNvcjogbnctcmVzaXplO1xcbn1cXG4uZHYtcmVzaXplLWNvbnRhaW5lciAuZHYtcmVzaXplLWhhbmRsZS10b3ByaWdodCB7XFxuICBoZWlnaHQ6IDRweDtcXG4gIHdpZHRoOiA0cHg7XFxuICByaWdodDogLTJweDtcXG4gIHRvcDogLTJweDtcXG4gIHotaW5kZXg6IHZhcigtLWR2LW92ZXJsYXktei1pbmRleCk7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBjdXJzb3I6IG5lLXJlc2l6ZTtcXG59XFxuLmR2LXJlc2l6ZS1jb250YWluZXIgLmR2LXJlc2l6ZS1oYW5kbGUtYm90dG9tbGVmdCB7XFxuICBoZWlnaHQ6IDRweDtcXG4gIHdpZHRoOiA0cHg7XFxuICBsZWZ0OiAtMnB4O1xcbiAgYm90dG9tOiAtMnB4O1xcbiAgei1pbmRleDogdmFyKC0tZHYtb3ZlcmxheS16LWluZGV4KTtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGN1cnNvcjogc3ctcmVzaXplO1xcbn1cXG4uZHYtcmVzaXplLWNvbnRhaW5lciAuZHYtcmVzaXplLWhhbmRsZS1ib3R0b21yaWdodCB7XFxuICBoZWlnaHQ6IDRweDtcXG4gIHdpZHRoOiA0cHg7XFxuICByaWdodDogLTJweDtcXG4gIGJvdHRvbTogLTJweDtcXG4gIHotaW5kZXg6IHZhcigtLWR2LW92ZXJsYXktei1pbmRleCk7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBjdXJzb3I6IHNlLXJlc2l6ZTtcXG59XFxuLmR2LXJlbmRlci1vdmVybGF5IHtcXG4gIC0tZHYtb3ZlcmxheS16LWluZGV4OiB2YXIoLS1kdi1vdmVybGF5LXotaW5kZXgsIDk5OSk7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB6LWluZGV4OiAxO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbn1cXG4uZHYtcmVuZGVyLW92ZXJsYXkuZHYtcmVuZGVyLW92ZXJsYXktZmxvYXQge1xcbiAgei1pbmRleDogY2FsYyh2YXIoLS1kdi1vdmVybGF5LXotaW5kZXgpIC0gMSk7XFxufVxcblxcbi5kdi1kZWJ1ZyAuZHYtcmVuZGVyLW92ZXJsYXkge1xcbiAgb3V0bGluZTogMXB4IHNvbGlkIHJlZDtcXG4gIG91dGxpbmUtb2Zmc2V0OiAtMTtcXG59XFxuLmR2LXBhbmUtY29udGFpbmVyIHtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG4uZHYtcGFuZS1jb250YWluZXIuZHYtYW5pbWF0ZWQgLmR2LXZpZXcge1xcbiAgdHJhbnNpdGlvbi1kdXJhdGlvbjogMC4xNXM7XFxuICB0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1vdXQ7XFxufVxcbi5kdi1wYW5lLWNvbnRhaW5lciAuZHYtdmlldyB7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBwYWRkaW5nOiAwcHggIWltcG9ydGFudDtcXG59XFxuLmR2LXBhbmUtY29udGFpbmVyIC5kdi12aWV3Om5vdCg6Zmlyc3QtY2hpbGQpOjpiZWZvcmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQgIWltcG9ydGFudDtcXG59XFxuLmR2LXBhbmUtY29udGFpbmVyIC5kdi12aWV3Om5vdCg6Zmlyc3QtY2hpbGQpIC5kdi1wYW5lID4gLmR2LXBhbmUtaGVhZGVyIHtcXG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCB2YXIoLS1kdi1wYW5ldmlldy1oZWFkZXItYm9yZGVyLWNvbG9yKTtcXG59XFxuLmR2LXBhbmUtY29udGFpbmVyIC5kdi12aWV3IC5kdi1kZWZhdWx0LWhlYWRlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kdi1ncm91cC12aWV3LWJhY2tncm91bmQtY29sb3IpO1xcbiAgY29sb3I6IHZhcigtLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItY29sb3IpO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIHBhZGRpbmc6IDBweCA4cHg7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcbi5kdi1wYW5lLWNvbnRhaW5lciAuZHYtdmlldyAuZHYtZGVmYXVsdC1oZWFkZXIgLmR2LXBhbmUtaGVhZGVyLWljb24ge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuLmR2LXBhbmUtY29udGFpbmVyIC5kdi12aWV3IC5kdi1kZWZhdWx0LWhlYWRlciA+IHNwYW4ge1xcbiAgcGFkZGluZy1sZWZ0OiA4cHg7XFxuICBmbGV4LWdyb3c6IDE7XFxufVxcbi5kdi1wYW5lLWNvbnRhaW5lcjpmaXJzdC1vZi10eXBlID4gLmR2LXBhbmUgPiAuZHYtcGFuZS1oZWFkZXIge1xcbiAgYm9yZGVyLXRvcDogbm9uZSAhaW1wb3J0YW50O1xcbn1cXG4uZHYtcGFuZS1jb250YWluZXIgLmR2LXBhbmUge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbn1cXG4uZHYtcGFuZS1jb250YWluZXIgLmR2LXBhbmUgLmR2LXBhbmUtaGVhZGVyIHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICB1c2VyLXNlbGVjdDogbm9uZTtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIG91dGxpbmU6IG5vbmU7XFxufVxcbi5kdi1wYW5lLWNvbnRhaW5lciAuZHYtcGFuZSAuZHYtcGFuZS1oZWFkZXIuZHYtcGFuZS1kcmFnZ2FibGUge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG4uZHYtcGFuZS1jb250YWluZXIgLmR2LXBhbmUgLmR2LXBhbmUtaGVhZGVyOmZvY3VzOmJlZm9yZSwgLmR2LXBhbmUtY29udGFpbmVyIC5kdi1wYW5lIC5kdi1wYW5lLWhlYWRlcjpmb2N1cy13aXRoaW46YmVmb3JlIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHotaW5kZXg6IDU7XFxuICBjb250ZW50OiBcXFwiXFxcIjtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbiAgb3V0bGluZTogMXB4IHNvbGlkO1xcbiAgb3V0bGluZS13aWR0aDogLTFweDtcXG4gIG91dGxpbmUtc3R5bGU6IHNvbGlkO1xcbiAgb3V0bGluZS1vZmZzZXQ6IC0xcHg7XFxuICBvdXRsaW5lLWNvbG9yOiB2YXIoLS1kdi1wYW5ldmlldy1hY3RpdmUtb3V0bGluZS1jb2xvcik7XFxufVxcbi5kdi1wYW5lLWNvbnRhaW5lciAuZHYtcGFuZSAuZHYtcGFuZS1ib2R5IHtcXG4gIG92ZXJmbG93LXk6IGF1dG87XFxuICBvdmVyZmxvdy14OiBoaWRkZW47XFxuICBmbGV4LWdyb3c6IDE7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBvdXRsaW5lOiBub25lO1xcbn1cXG4uZHYtcGFuZS1jb250YWluZXIgLmR2LXBhbmUgLmR2LXBhbmUtYm9keTpmb2N1czpiZWZvcmUsIC5kdi1wYW5lLWNvbnRhaW5lciAuZHYtcGFuZSAuZHYtcGFuZS1ib2R5OmZvY3VzLXdpdGhpbjpiZWZvcmUge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogMDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgei1pbmRleDogNTtcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICBvdXRsaW5lOiAxcHggc29saWQ7XFxuICBvdXRsaW5lLXdpZHRoOiAtMXB4O1xcbiAgb3V0bGluZS1zdHlsZTogc29saWQ7XFxuICBvdXRsaW5lLW9mZnNldDogLTFweDtcXG4gIG91dGxpbmUtY29sb3I6IHZhcigtLWR2LXBhbmV2aWV3LWFjdGl2ZS1vdXRsaW5lLWNvbG9yKTtcXG59XFxuLmR2LWRlYnVnIC5kdi1zcGxpdC12aWV3LWNvbnRhaW5lciAuZHYtc2FzaC1jb250YWluZXIgLmR2LXNhc2guZHYtZW5hYmxlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcXG59XFxuLmR2LWRlYnVnIC5kdi1zcGxpdC12aWV3LWNvbnRhaW5lciAuZHYtc2FzaC1jb250YWluZXIgLmR2LXNhc2guZHYtZGlzYWJsZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogb3JhbmdlO1xcbn1cXG4uZHYtZGVidWcgLmR2LXNwbGl0LXZpZXctY29udGFpbmVyIC5kdi1zYXNoLWNvbnRhaW5lciAuZHYtc2FzaC5kdi1tYXhpbXVtIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGdyZWVuO1xcbn1cXG4uZHYtZGVidWcgLmR2LXNwbGl0LXZpZXctY29udGFpbmVyIC5kdi1zYXNoLWNvbnRhaW5lciAuZHYtc2FzaC5kdi1taW5pbXVtIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJlZDtcXG59XFxuXFxuLmR2LXNwbGl0LXZpZXctY29udGFpbmVyIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBoZWlnaHQ6IDEwMCU7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuLmR2LXNwbGl0LXZpZXctY29udGFpbmVyLmR2LXNwbGl0dmlldy1kaXNhYmxlZCA+IC5kdi1zYXNoLWNvbnRhaW5lciA+IC5kdi1zYXNoIHtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbn1cXG4uZHYtc3BsaXQtdmlldy1jb250YWluZXIuZHYtYW5pbWF0aW9uIC5kdi12aWV3LFxcbi5kdi1zcGxpdC12aWV3LWNvbnRhaW5lci5kdi1hbmltYXRpb24gLmR2LXNhc2gge1xcbiAgdHJhbnNpdGlvbi1kdXJhdGlvbjogMC4xNXM7XFxuICB0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1vdXQ7XFxufVxcbi5kdi1zcGxpdC12aWV3LWNvbnRhaW5lci5kdi1ob3Jpem9udGFsIHtcXG4gIGhlaWdodDogMTAwJTtcXG59XFxuLmR2LXNwbGl0LXZpZXctY29udGFpbmVyLmR2LWhvcml6b250YWwgPiAuZHYtc2FzaC1jb250YWluZXIgPiAuZHYtc2FzaCB7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICB3aWR0aDogNHB4O1xcbn1cXG4uZHYtc3BsaXQtdmlldy1jb250YWluZXIuZHYtaG9yaXpvbnRhbCA+IC5kdi1zYXNoLWNvbnRhaW5lciA+IC5kdi1zYXNoLmR2LWVuYWJsZWQge1xcbiAgY3Vyc29yOiBldy1yZXNpemU7XFxufVxcbi5kdi1zcGxpdC12aWV3LWNvbnRhaW5lci5kdi1ob3Jpem9udGFsID4gLmR2LXNhc2gtY29udGFpbmVyID4gLmR2LXNhc2guZHYtZGlzYWJsZWQge1xcbiAgY3Vyc29yOiBkZWZhdWx0O1xcbn1cXG4uZHYtc3BsaXQtdmlldy1jb250YWluZXIuZHYtaG9yaXpvbnRhbCA+IC5kdi1zYXNoLWNvbnRhaW5lciA+IC5kdi1zYXNoLmR2LW1heGltdW0ge1xcbiAgY3Vyc29yOiB3LXJlc2l6ZTtcXG59XFxuLmR2LXNwbGl0LXZpZXctY29udGFpbmVyLmR2LWhvcml6b250YWwgPiAuZHYtc2FzaC1jb250YWluZXIgPiAuZHYtc2FzaC5kdi1taW5pbXVtIHtcXG4gIGN1cnNvcjogZS1yZXNpemU7XFxufVxcbi5kdi1zcGxpdC12aWV3LWNvbnRhaW5lci5kdi1ob3Jpem9udGFsID4gLmR2LXZpZXctY29udGFpbmVyID4gLmR2LXZpZXc6bm90KDpmaXJzdC1jaGlsZCk6OmJlZm9yZSB7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICB3aWR0aDogMXB4O1xcbn1cXG4uZHYtc3BsaXQtdmlldy1jb250YWluZXIuZHYtdmVydGljYWwge1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcbi5kdi1zcGxpdC12aWV3LWNvbnRhaW5lci5kdi12ZXJ0aWNhbCA+IC5kdi1zYXNoLWNvbnRhaW5lciA+IC5kdi1zYXNoIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiA0cHg7XFxufVxcbi5kdi1zcGxpdC12aWV3LWNvbnRhaW5lci5kdi12ZXJ0aWNhbCA+IC5kdi1zYXNoLWNvbnRhaW5lciA+IC5kdi1zYXNoLmR2LWVuYWJsZWQge1xcbiAgY3Vyc29yOiBucy1yZXNpemU7XFxufVxcbi5kdi1zcGxpdC12aWV3LWNvbnRhaW5lci5kdi12ZXJ0aWNhbCA+IC5kdi1zYXNoLWNvbnRhaW5lciA+IC5kdi1zYXNoLmR2LWRpc2FibGVkIHtcXG4gIGN1cnNvcjogZGVmYXVsdDtcXG59XFxuLmR2LXNwbGl0LXZpZXctY29udGFpbmVyLmR2LXZlcnRpY2FsID4gLmR2LXNhc2gtY29udGFpbmVyID4gLmR2LXNhc2guZHYtbWF4aW11bSB7XFxuICBjdXJzb3I6IG4tcmVzaXplO1xcbn1cXG4uZHYtc3BsaXQtdmlldy1jb250YWluZXIuZHYtdmVydGljYWwgPiAuZHYtc2FzaC1jb250YWluZXIgPiAuZHYtc2FzaC5kdi1taW5pbXVtIHtcXG4gIGN1cnNvcjogcy1yZXNpemU7XFxufVxcbi5kdi1zcGxpdC12aWV3LWNvbnRhaW5lci5kdi12ZXJ0aWNhbCA+IC5kdi12aWV3LWNvbnRhaW5lciA+IC5kdi12aWV3IHtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG4uZHYtc3BsaXQtdmlldy1jb250YWluZXIuZHYtdmVydGljYWwgPiAuZHYtdmlldy1jb250YWluZXIgPiAuZHYtdmlldzpub3QoOmZpcnN0LWNoaWxkKTo6YmVmb3JlIHtcXG4gIGhlaWdodDogMXB4O1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcbi5kdi1zcGxpdC12aWV3LWNvbnRhaW5lciAuZHYtc2FzaC1jb250YWluZXIge1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxufVxcbi5kdi1zcGxpdC12aWV3LWNvbnRhaW5lciAuZHYtc2FzaC1jb250YWluZXIgLmR2LXNhc2gge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgei1pbmRleDogOTk7XFxuICBvdXRsaW5lOiBub25lO1xcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcbiAgLW1vei11c2VyLXNlbGVjdDogbm9uZTtcXG4gIC1tcy11c2VyLXNlbGVjdDogbm9uZTtcXG4gIHRvdWNoLWFjdGlvbjogbm9uZTtcXG59XFxuLmR2LXNwbGl0LXZpZXctY29udGFpbmVyIC5kdi1zYXNoLWNvbnRhaW5lciAuZHYtc2FzaDpub3QoLmRpc2FibGVkKTphY3RpdmUsIC5kdi1zcGxpdC12aWV3LWNvbnRhaW5lciAuZHYtc2FzaC1jb250YWluZXIgLmR2LXNhc2g6bm90KC5kaXNhYmxlZCk6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZHYtYWN0aXZlLXNhc2gtY29sb3IsIHRyYW5zcGFyZW50KTtcXG4gIHRyYW5zaXRpb24tcHJvcGVydHk6IGJhY2tncm91bmQtY29sb3I7XFxuICB0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1pbi1vdXQ7XFxuICB0cmFuc2l0aW9uLWR1cmF0aW9uOiB2YXIoLS1kdi1hY3RpdmUtc2FzaC10cmFuc2l0aW9uLWR1cmF0aW9uLCAwLjFzKTtcXG4gIHRyYW5zaXRpb24tZGVsYXk6IHZhcigtLWR2LWFjdGl2ZS1zYXNoLXRyYW5zaXRpb24tZGVsYXksIDAuNXMpO1xcbn1cXG4uZHYtc3BsaXQtdmlldy1jb250YWluZXIgLmR2LXZpZXctY29udGFpbmVyIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG4uZHYtc3BsaXQtdmlldy1jb250YWluZXIgLmR2LXZpZXctY29udGFpbmVyIC5kdi12aWV3IHtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBvdmVyZmxvdzogYXV0bztcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG59XFxuLmR2LXNwbGl0LXZpZXctY29udGFpbmVyLmR2LXNlcGFyYXRvci1ib3JkZXIgLmR2LXZpZXc6bm90KDpmaXJzdC1jaGlsZCk6OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiIFxcXCI7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICBsZWZ0OiAwO1xcbiAgei1pbmRleDogNTtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZHYtc2VwYXJhdG9yLWJvcmRlcik7XFxufVxcbi5kdi1kcmFnZ2VkIHtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMHB4LCAwcHgsIDBweCk7IC8qIGZvcmNlcyB0YWIgdG8gYmUgZHJhd24gb24gYSBzZXBhcmF0ZSBsYXllciAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvdnNjb2RlL2lzc3Vlcy8xODczMykgKi9cXG59XFxuXFxuLmR2LXRhYiB7XFxuICBmbGV4LXNocmluazogMDtcXG59XFxuLmR2LXRhYjpmb2N1cy13aXRoaW4sIC5kdi10YWI6Zm9jdXMge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG4uZHYtdGFiOmZvY3VzLXdpdGhpbjo6YWZ0ZXIsIC5kdi10YWI6Zm9jdXM6OmFmdGVyIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgd2lkdGg6IDEwMCU7XFxuICB0b3A6IDBweDtcXG4gIGxlZnQ6IDBweDtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbiAgb3V0bGluZTogMXB4IHNvbGlkIHZhcigtLWR2LXRhYi1kaXZpZGVyLWNvbG9yKSAhaW1wb3J0YW50O1xcbiAgb3V0bGluZS1vZmZzZXQ6IC0xcHg7XFxuICB6LWluZGV4OiA1O1xcbn1cXG4uZHYtdGFiLmR2LXRhYi1kcmFnZ2luZyAuZHYtZGVmYXVsdC10YWItYWN0aW9uIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItY29sb3IpO1xcbn1cXG4uZHYtdGFiLmR2LWFjdGl2ZS10YWIgLmR2LWRlZmF1bHQtdGFiIC5kdi1kZWZhdWx0LXRhYi1hY3Rpb24ge1xcbiAgdmlzaWJpbGl0eTogdmlzaWJsZTtcXG59XFxuLmR2LXRhYi5kdi1pbmFjdGl2ZS10YWIgLmR2LWRlZmF1bHQtdGFiIC5kdi1kZWZhdWx0LXRhYi1hY3Rpb24ge1xcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xcbn1cXG4uZHYtdGFiLmR2LWluYWN0aXZlLXRhYiAuZHYtZGVmYXVsdC10YWI6aG92ZXIgLmR2LWRlZmF1bHQtdGFiLWFjdGlvbiB7XFxuICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xcbn1cXG4uZHYtdGFiIC5kdi1kZWZhdWx0LXRhYiB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgbWluLXdpZHRoOiA4MHB4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIHBhZGRpbmc6IDBweCA4cHg7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxufVxcbi5kdi10YWIgLmR2LWRlZmF1bHQtdGFiIC5kdi1kZWZhdWx0LXRhYi1jb250ZW50IHtcXG4gIHBhZGRpbmc6IDBweCA4cHg7XFxuICBmbGV4LWdyb3c6IDE7XFxufVxcbi5kdi10YWIgLmR2LWRlZmF1bHQtdGFiIC5kdi1kZWZhdWx0LXRhYi1hY3Rpb24ge1xcbiAgcGFkZGluZzogNHB4O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcbi5kdi10YWIgLmR2LWRlZmF1bHQtdGFiIC5kdi1kZWZhdWx0LXRhYi1hY3Rpb246aG92ZXIge1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZHYtaWNvbi1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yKTtcXG59XFxuLmR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1iYWNrZ3JvdW5kLWNvbG9yKTtcXG4gIGZsZXgtc2hyaW5rOiAwO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGhlaWdodDogdmFyKC0tZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXItaGVpZ2h0KTtcXG4gIGZvbnQtc2l6ZTogdmFyKC0tZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXItZm9udC1zaXplKTtcXG59XFxuLmR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLmR2LXNpbmdsZS10YWIuZHYtZnVsbC13aWR0aC1zaW5nbGUtdGFiIC5kdi10YWJzLWNvbnRhaW5lciB7XFxuICBmbGV4LWdyb3c6IDE7XFxufVxcbi5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci5kdi1zaW5nbGUtdGFiLmR2LWZ1bGwtd2lkdGgtc2luZ2xlLXRhYiAuZHYtdGFicy1jb250YWluZXIgLmR2LXRhYiB7XFxuICBmbGV4LWdyb3c6IDE7XFxufVxcbi5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci5kdi1zaW5nbGUtdGFiLmR2LWZ1bGwtd2lkdGgtc2luZ2xlLXRhYiAuZHYtdm9pZC1jb250YWluZXIge1xcbiAgZmxleC1ncm93OiAwO1xcbn1cXG4uZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXIgLmR2LXZvaWQtY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWdyb3c6IDE7XFxuICBjdXJzb3I6IGdyYWI7XFxufVxcbi5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lciAuZHYtdGFicy1jb250YWluZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIG92ZXJmbG93LXg6IG92ZXJsYXk7XFxuICBvdmVyZmxvdy15OiBoaWRkZW47XFxuICBzY3JvbGxiYXItd2lkdGg6IHRoaW47XFxuICAvKiBUcmFjayAqL1xcbiAgLyogSGFuZGxlICovXFxufVxcbi5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lciAuZHYtdGFicy1jb250YWluZXI6Oi13ZWJraXQtc2Nyb2xsYmFyIHtcXG4gIGhlaWdodDogM3B4O1xcbn1cXG4uZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXIgLmR2LXRhYnMtY29udGFpbmVyOjotd2Via2l0LXNjcm9sbGJhci10cmFjayB7XFxuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG59XFxuLmR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyIC5kdi10YWJzLWNvbnRhaW5lcjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWIge1xcbiAgYmFja2dyb3VuZDogdmFyKC0tZHYtdGFicy1jb250YWluZXItc2Nyb2xsYmFyLWNvbG9yKTtcXG59XFxuLmR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyIC5kdi10YWJzLWNvbnRhaW5lciAuZHYtdGFiIHtcXG4gIC13ZWJraXQtdXNlci1kcmFnOiBlbGVtZW50O1xcbiAgb3V0bGluZTogbm9uZTtcXG4gIG1pbi13aWR0aDogNzVweDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcbi5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lciAuZHYtdGFicy1jb250YWluZXIgLmR2LXRhYjpub3QoOmZpcnN0LWNoaWxkKTo6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCIgXFxcIjtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICB6LWluZGV4OiA1O1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kdi10YWItZGl2aWRlci1jb2xvcik7XFxuICB3aWR0aDogMXB4O1xcbiAgaGVpZ2h0OiAxMDAlO1xcbn1cXG4uZHYtd2F0ZXJtYXJrIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBoZWlnaHQ6IDEwMCU7XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiZXhwb3J0IGNsYXNzIFNwbGl0dmlld0FwaSB7XG4gICAgLyoqXG4gICAgICogVGhlIG1pbmltdW0gc2l6ZSAgdGhlIGNvbXBvbmVudCBjYW4gcmVhY2ggd2hlcmUgc2l6ZSBpcyBtZWFzdXJlZCBpbiB0aGUgZGlyZWN0aW9uIG9mIG9yaWVudGF0aW9uIHByb3ZpZGVkLlxuICAgICAqL1xuICAgIGdldCBtaW5pbXVtU2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50Lm1pbmltdW1TaXplO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgbWF4aW11bSBzaXplIHRoZSBjb21wb25lbnQgY2FuIHJlYWNoIHdoZXJlIHNpemUgaXMgbWVhc3VyZWQgaW4gdGhlIGRpcmVjdGlvbiBvZiBvcmllbnRhdGlvbiBwcm92aWRlZC5cbiAgICAgKi9cbiAgICBnZXQgbWF4aW11bVNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5tYXhpbXVtU2l6ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2lkdGggb2YgdGhlIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBnZXQgd2lkdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC53aWR0aDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSGVpZ2h0IG9mIHRoZSBjb21wb25lbnQuXG4gICAgICovXG4gICAgZ2V0IGhlaWdodCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50LmhlaWdodDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGN1cnJlbnQgbnVtYmVyIG9mIHBhbmVscy5cbiAgICAgKi9cbiAgICBnZXQgbGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQubGVuZ3RoO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCBvcmllbnRhdGlvbiBvZiB0aGUgY29tcG9uZW50LlxuICAgICAqL1xuICAgIGdldCBvcmllbnRhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50Lm9yaWVudGF0aW9uO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgbGlzdCBvZiBjdXJyZW50IHBhbmVscy5cbiAgICAgKi9cbiAgICBnZXQgcGFuZWxzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQucGFuZWxzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIGFmdGVyIGEgbGF5b3V0IGlzIGxvYWRlZCB0aHJvdWdoIHRoZSBgZnJvbUpTT05gIG1ldGhvZC5cbiAgICAgKi9cbiAgICBnZXQgb25EaWRMYXlvdXRGcm9tSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50Lm9uRGlkTGF5b3V0RnJvbUpTT047XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludm9rZWQgd2hlbmV2ZXIgYW55IGFzcGVjdCBvZiB0aGUgbGF5b3V0IGNoYW5nZXMuXG4gICAgICogSWYgbGlzdGVuaW5nIHRvIHRoaXMgZXZlbnQgaXQgbWF5IGJlIHdvcnRoIGRlYm91bmNpbmcgb3VwdXRzLlxuICAgICAqL1xuICAgIGdldCBvbkRpZExheW91dENoYW5nZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50Lm9uRGlkTGF5b3V0Q2hhbmdlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIHdoZW4gYSB2aWV3IGlzIGFkZGVkLlxuICAgICAqL1xuICAgIGdldCBvbkRpZEFkZFZpZXcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5vbkRpZEFkZFZpZXc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludm9rZWQgd2hlbiBhIHZpZXcgaXMgcmVtb3ZlZC5cbiAgICAgKi9cbiAgICBnZXQgb25EaWRSZW1vdmVWaWV3KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQub25EaWRSZW1vdmVWaWV3O1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcihjb21wb25lbnQpIHtcbiAgICAgICAgdGhpcy5jb21wb25lbnQgPSBjb21wb25lbnQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYW4gZXhpc3RpbmcgcGFuZWwgYW5kIG9wdGlvbmFsbHkgcHJvdmlkZSBhIGBTaXppbmdgIG1ldGhvZFxuICAgICAqIGZvciB0aGUgc3Vic2VxdWVudCByZXNpemUuXG4gICAgICovXG4gICAgcmVtb3ZlUGFuZWwocGFuZWwsIHNpemluZykge1xuICAgICAgICB0aGlzLmNvbXBvbmVudC5yZW1vdmVQYW5lbChwYW5lbCwgc2l6aW5nKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRm9jdXMgdGhlIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBmb2N1cygpIHtcbiAgICAgICAgdGhpcy5jb21wb25lbnQuZm9jdXMoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSByZWZlcmVuY2UgdG8gYSBwYW5lbCBnaXZlbiBpdCdzIGBzdHJpbmdgIGlkLlxuICAgICAqL1xuICAgIGdldFBhbmVsKGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5nZXRQYW5lbChpZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExheW91dCB0aGUgcGFuZWwgd2l0aCBhIHdpZHRoIGFuZCBoZWlnaHQuXG4gICAgICovXG4gICAgbGF5b3V0KHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50LmxheW91dCh3aWR0aCwgaGVpZ2h0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkIGEgbmV3IHBhbmVsIGFuZCByZXR1cm4gdGhlIGNyZWF0ZWQgaW5zdGFuY2UuXG4gICAgICovXG4gICAgYWRkUGFuZWwob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQuYWRkUGFuZWwob3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1vdmUgYSBwYW5lbCBnaXZlbiBpdCdzIGN1cnJlbnQgYW5kIGRlc2lyZWQgaW5kZXguXG4gICAgICovXG4gICAgbW92ZVBhbmVsKGZyb20sIHRvKSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50Lm1vdmVQYW5lbChmcm9tLCB0byk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlc2VyaWFsaXplIGEgbGF5b3V0IHRvIGJ1aWx0IGEgc3BsaXRpdmV3LlxuICAgICAqL1xuICAgIGZyb21KU09OKGRhdGEpIHtcbiAgICAgICAgdGhpcy5jb21wb25lbnQuZnJvbUpTT04oZGF0YSk7XG4gICAgfVxuICAgIC8qKiBTZXJpYWxpemUgYSBsYXlvdXQgKi9cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC50b0pTT04oKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGFsbCBwYW5lbHMgYW5kIGNsZWFyIHRoZSBjb21wb25lbnQuXG4gICAgICovXG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50LmNsZWFyKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBjb25maWd1cmF0YWJsZSBvcHRpb25zLlxuICAgICAqL1xuICAgIHVwZGF0ZU9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICB0aGlzLmNvbXBvbmVudC51cGRhdGVPcHRpb25zKG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWxlYXNlIHJlc291cmNlcyBhbmQgdGVhcmRvd24gY29tcG9uZW50LiBEbyBub3QgY2FsbCB3aGVuIHVzaW5nIGZyYW1ld29yayB2ZXJzaW9ucyBvZiBkb2Nrdmlldy5cbiAgICAgKi9cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICB0aGlzLmNvbXBvbmVudC5kaXNwb3NlKCk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFBhbmV2aWV3QXBpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgbWluaW11bSBzaXplICB0aGUgY29tcG9uZW50IGNhbiByZWFjaCB3aGVyZSBzaXplIGlzIG1lYXN1cmVkIGluIHRoZSBkaXJlY3Rpb24gb2Ygb3JpZW50YXRpb24gcHJvdmlkZWQuXG4gICAgICovXG4gICAgZ2V0IG1pbmltdW1TaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQubWluaW11bVNpemU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBtYXhpbXVtIHNpemUgdGhlIGNvbXBvbmVudCBjYW4gcmVhY2ggd2hlcmUgc2l6ZSBpcyBtZWFzdXJlZCBpbiB0aGUgZGlyZWN0aW9uIG9mIG9yaWVudGF0aW9uIHByb3ZpZGVkLlxuICAgICAqL1xuICAgIGdldCBtYXhpbXVtU2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50Lm1heGltdW1TaXplO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaWR0aCBvZiB0aGUgY29tcG9uZW50LlxuICAgICAqL1xuICAgIGdldCB3aWR0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50LndpZHRoO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBIZWlnaHQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBnZXQgaGVpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQuaGVpZ2h0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBbGwgcGFuZWwgb2JqZWN0cy5cbiAgICAgKi9cbiAgICBnZXQgcGFuZWxzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQucGFuZWxzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIHdoZW4gYW55IGxheW91dCBjaGFuZ2Ugb2NjdXJlcywgYW4gYWdncmVnYXRpb24gb2YgbWFueSBldmVudHMuXG4gICAgICovXG4gICAgZ2V0IG9uRGlkTGF5b3V0Q2hhbmdlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQub25EaWRMYXlvdXRDaGFuZ2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludm9rZWQgYWZ0ZXIgYSBsYXlvdXQgaXMgZGVzZXJpYWx6aWVkIHVzaW5nIHRoZSBgZnJvbUpTT05gIG1ldGhvZC5cbiAgICAgKi9cbiAgICBnZXQgb25EaWRMYXlvdXRGcm9tSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50Lm9uRGlkTGF5b3V0RnJvbUpTT047XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludm9rZWQgd2hlbiBhIHBhbmVsIGlzIGFkZGVkLiBNYXkgYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzIHdoZW4gbW92aW5nIHBhbmVscy5cbiAgICAgKi9cbiAgICBnZXQgb25EaWRBZGRWaWV3KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQub25EaWRBZGRWaWV3O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIHdoZW4gYSBwYW5lbCBpcyByZW1vdmVkLiBNYXkgYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzIHdoZW4gbW92aW5nIHBhbmVscy5cbiAgICAgKi9cbiAgICBnZXQgb25EaWRSZW1vdmVWaWV3KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQub25EaWRSZW1vdmVWaWV3O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIHdoZW4gYSBEcmFnJ24nRHJvcCBldmVudCBvY2N1cnMgdGhhdCB0aGUgY29tcG9uZW50IHdhcyB1bmFibGUgdG8gaGFuZGxlLiBFeHBvc2VkIGZvciBjdXN0b20gRHJhZyduJ0Ryb3AgZnVuY3Rpb25hbGl0eS5cbiAgICAgKi9cbiAgICBnZXQgb25EaWREcm9wKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQub25EaWREcm9wO1xuICAgIH1cbiAgICBnZXQgb25VbmhhbmRsZWREcmFnT3ZlckV2ZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQub25VbmhhbmRsZWREcmFnT3ZlckV2ZW50O1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcihjb21wb25lbnQpIHtcbiAgICAgICAgdGhpcy5jb21wb25lbnQgPSBjb21wb25lbnQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIHBhbmVsIGdpdmVuIHRoZSBwYW5lbCBvYmplY3QuXG4gICAgICovXG4gICAgcmVtb3ZlUGFuZWwocGFuZWwpIHtcbiAgICAgICAgdGhpcy5jb21wb25lbnQucmVtb3ZlUGFuZWwocGFuZWwpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgYSBwYW5lbCBvYmplY3QgZ2l2ZW4gYSBgc3RyaW5nYCBpZC4gTWF5IHJldHVybiBgdW5kZWZpbmVkYC5cbiAgICAgKi9cbiAgICBnZXRQYW5lbChpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQuZ2V0UGFuZWwoaWQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNb3ZlIGEgcGFuZWwgZ2l2ZW4gaXQncyBjdXJyZW50IGFuZCBkZXNpcmVkIGluZGV4LlxuICAgICAqL1xuICAgIG1vdmVQYW5lbChmcm9tLCB0bykge1xuICAgICAgICB0aGlzLmNvbXBvbmVudC5tb3ZlUGFuZWwoZnJvbSwgdG8pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgRm9jdXMgdGhlIGNvbXBvbmVudC4gV2lsbCB0cnkgdG8gZm9jdXMgYW4gYWN0aXZlIHBhbmVsIGlmIG9uZSBleGlzdHMuXG4gICAgICovXG4gICAgZm9jdXMoKSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50LmZvY3VzKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZvcmNlIHJlc2l6ZSB0aGUgY29tcG9uZW50IHRvIGFuIGV4YWN0IHdpZHRoIGFuZCBoZWlnaHQuIFJlYWQgYWJvdXQgYXV0by1yZXNpemluZyBiZWZvcmUgdXNpbmcuXG4gICAgICovXG4gICAgbGF5b3V0KHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgdGhpcy5jb21wb25lbnQubGF5b3V0KHdpZHRoLCBoZWlnaHQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGQgYSBwYW5lbCBhbmQgcmV0dXJuIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAgICAgKi9cbiAgICBhZGRQYW5lbChvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5hZGRQYW5lbChvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgY29tcG9uZW50IGZyb20gYSBzZXJpYWxpemVkIG9iamVjdC5cbiAgICAgKi9cbiAgICBmcm9tSlNPTihkYXRhKSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50LmZyb21KU09OKGRhdGEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBzZXJpYWxpemVkIG9iamVjdCBvZiB0aGUgY3VycmVudCBjb21wb25lbnQuXG4gICAgICovXG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQudG9KU09OKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlc2V0IHRoZSBjb21wb25lbnQgYmFjayB0byBhbiBlbXB0eSBhbmQgZGVmYXVsdCBzdGF0ZS5cbiAgICAgKi9cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdGhpcy5jb21wb25lbnQuY2xlYXIoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlIGNvbmZpZ3VyYXRhYmxlIG9wdGlvbnMuXG4gICAgICovXG4gICAgdXBkYXRlT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50LnVwZGF0ZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbGVhc2UgcmVzb3VyY2VzIGFuZCB0ZWFyZG93biBjb21wb25lbnQuIERvIG5vdCBjYWxsIHdoZW4gdXNpbmcgZnJhbWV3b3JrIHZlcnNpb25zIG9mIGRvY2t2aWV3LlxuICAgICAqL1xuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50LmRpc3Bvc2UoKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgR3JpZHZpZXdBcGkge1xuICAgIC8qKlxuICAgICAqIFdpZHRoIG9mIHRoZSBjb21wb25lbnQuXG4gICAgICovXG4gICAgZ2V0IHdpZHRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQud2lkdGg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEhlaWdodCBvZiB0aGUgY29tcG9uZW50LlxuICAgICAqL1xuICAgIGdldCBoZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5oZWlnaHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1pbmltdW0gaGVpZ2h0IG9mIHRoZSBjb21wb25lbnQuXG4gICAgICovXG4gICAgZ2V0IG1pbmltdW1IZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5taW5pbXVtSGVpZ2h0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYXhpbXVtIGhlaWdodCBvZiB0aGUgY29tcG9uZW50LlxuICAgICAqL1xuICAgIGdldCBtYXhpbXVtSGVpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQubWF4aW11bUhlaWdodDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWluaW11bSB3aWR0aCBvZiB0aGUgY29tcG9uZW50LlxuICAgICAqL1xuICAgIGdldCBtaW5pbXVtV2lkdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5taW5pbXVtV2lkdGg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1heGltdW0gd2lkdGggb2YgdGhlIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBnZXQgbWF4aW11bVdpZHRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQubWF4aW11bVdpZHRoO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIHdoZW4gYW55IGxheW91dCBjaGFuZ2Ugb2NjdXJlcywgYW4gYWdncmVnYXRpb24gb2YgbWFueSBldmVudHMuXG4gICAgICovXG4gICAgZ2V0IG9uRGlkTGF5b3V0Q2hhbmdlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQub25EaWRMYXlvdXRDaGFuZ2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludm9rZWQgd2hlbiBhIHBhbmVsIGlzIGFkZGVkLiBNYXkgYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzIHdoZW4gbW92aW5nIHBhbmVscy5cbiAgICAgKi9cbiAgICBnZXQgb25EaWRBZGRQYW5lbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50Lm9uRGlkQWRkR3JvdXA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludm9rZWQgd2hlbiBhIHBhbmVsIGlzIHJlbW92ZWQuIE1heSBiZSBjYWxsZWQgbXVsdGlwbGUgdGltZXMgd2hlbiBtb3ZpbmcgcGFuZWxzLlxuICAgICAqL1xuICAgIGdldCBvbkRpZFJlbW92ZVBhbmVsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQub25EaWRSZW1vdmVHcm91cDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW52b2tlZCB3aGVuIHRoZSBhY3RpdmUgcGFuZWwgY2hhbmdlcy4gTWF5IGJlIHVuZGVmaW5lZCBpZiBubyBwYW5lbCBpcyBhY3RpdmUuXG4gICAgICovXG4gICAgZ2V0IG9uRGlkQWN0aXZlUGFuZWxDaGFuZ2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5vbkRpZEFjdGl2ZUdyb3VwQ2hhbmdlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIGFmdGVyIGEgbGF5b3V0IGlzIGRlc2VyaWFsemllZCB1c2luZyB0aGUgYGZyb21KU09OYCBtZXRob2QuXG4gICAgICovXG4gICAgZ2V0IG9uRGlkTGF5b3V0RnJvbUpTT04oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5vbkRpZExheW91dEZyb21KU09OO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBbGwgcGFuZWwgb2JqZWN0cy5cbiAgICAgKi9cbiAgICBnZXQgcGFuZWxzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQuZ3JvdXBzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDdXJyZW50IG9yaWVudGF0aW9uLiBDYW4gYmUgY2hhbmdlZCBhZnRlciBpbml0aWFsaXphdGlvbi5cbiAgICAgKi9cbiAgICBnZXQgb3JpZW50YXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5vcmllbnRhdGlvbjtcbiAgICB9XG4gICAgc2V0IG9yaWVudGF0aW9uKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50LnVwZGF0ZU9wdGlvbnMoeyBvcmllbnRhdGlvbjogdmFsdWUgfSk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGNvbXBvbmVudCkge1xuICAgICAgICB0aGlzLmNvbXBvbmVudCA9IGNvbXBvbmVudDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIEZvY3VzIHRoZSBjb21wb25lbnQuIFdpbGwgdHJ5IHRvIGZvY3VzIGFuIGFjdGl2ZSBwYW5lbCBpZiBvbmUgZXhpc3RzLlxuICAgICAqL1xuICAgIGZvY3VzKCkge1xuICAgICAgICB0aGlzLmNvbXBvbmVudC5mb2N1cygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGb3JjZSByZXNpemUgdGhlIGNvbXBvbmVudCB0byBhbiBleGFjdCB3aWR0aCBhbmQgaGVpZ2h0LiBSZWFkIGFib3V0IGF1dG8tcmVzaXppbmcgYmVmb3JlIHVzaW5nLlxuICAgICAqL1xuICAgIGxheW91dCh3aWR0aCwgaGVpZ2h0LCBmb3JjZSA9IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50LmxheW91dCh3aWR0aCwgaGVpZ2h0LCBmb3JjZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZCBhIHBhbmVsIGFuZCByZXR1cm4gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICAgICAqL1xuICAgIGFkZFBhbmVsKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50LmFkZFBhbmVsKG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYSBwYW5lbCBnaXZlbiB0aGUgcGFuZWwgb2JqZWN0LlxuICAgICAqL1xuICAgIHJlbW92ZVBhbmVsKHBhbmVsLCBzaXppbmcpIHtcbiAgICAgICAgdGhpcy5jb21wb25lbnQucmVtb3ZlUGFuZWwocGFuZWwsIHNpemluZyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1vdmUgYSBwYW5lbCBpbiBhIHBhcnRpY3VsYXIgZGlyZWN0aW9uIHJlbGF0aXZlIHRvIGFub3RoZXIgcGFuZWwuXG4gICAgICovXG4gICAgbW92ZVBhbmVsKHBhbmVsLCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50Lm1vdmVQYW5lbChwYW5lbCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhIHBhbmVsIG9iamVjdCBnaXZlbiBhIGBzdHJpbmdgIGlkLiBNYXkgcmV0dXJuIGB1bmRlZmluZWRgLlxuICAgICAqL1xuICAgIGdldFBhbmVsKGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5nZXRQYW5lbChpZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGNvbXBvbmVudCBmcm9tIGEgc2VyaWFsaXplZCBvYmplY3QuXG4gICAgICovXG4gICAgZnJvbUpTT04oZGF0YSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQuZnJvbUpTT04oZGF0YSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIHNlcmlhbGl6ZWQgb2JqZWN0IG9mIHRoZSBjdXJyZW50IGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC50b0pTT04oKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVzZXQgdGhlIGNvbXBvbmVudCBiYWNrIHRvIGFuIGVtcHR5IGFuZCBkZWZhdWx0IHN0YXRlLlxuICAgICAqL1xuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLmNvbXBvbmVudC5jbGVhcigpO1xuICAgIH1cbiAgICB1cGRhdGVPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5jb21wb25lbnQudXBkYXRlT3B0aW9ucyhvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVsZWFzZSByZXNvdXJjZXMgYW5kIHRlYXJkb3duIGNvbXBvbmVudC4gRG8gbm90IGNhbGwgd2hlbiB1c2luZyBmcmFtZXdvcmsgdmVyc2lvbnMgb2YgZG9ja3ZpZXcuXG4gICAgICovXG4gICAgZGlzcG9zZSgpIHtcbiAgICAgICAgdGhpcy5jb21wb25lbnQuZGlzcG9zZSgpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBEb2Nrdmlld0FwaSB7XG4gICAgLyoqXG4gICAgICogVGhlIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGlzIGluc3RhbmNlLiBVc2VkIHRvIG1hbmFnZSBzY29wZSBvZiBEcmFnJ24nRHJvcCBldmVudHMuXG4gICAgICovXG4gICAgZ2V0IGlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQuaWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdpZHRoIG9mIHRoZSBjb21wb25lbnQuXG4gICAgICovXG4gICAgZ2V0IHdpZHRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQud2lkdGg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEhlaWdodCBvZiB0aGUgY29tcG9uZW50LlxuICAgICAqL1xuICAgIGdldCBoZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5oZWlnaHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1pbmltdW0gaGVpZ2h0IG9mIHRoZSBjb21wb25lbnQuXG4gICAgICovXG4gICAgZ2V0IG1pbmltdW1IZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5taW5pbXVtSGVpZ2h0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYXhpbXVtIGhlaWdodCBvZiB0aGUgY29tcG9uZW50LlxuICAgICAqL1xuICAgIGdldCBtYXhpbXVtSGVpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQubWF4aW11bUhlaWdodDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWluaW11bSB3aWR0aCBvZiB0aGUgY29tcG9uZW50LlxuICAgICAqL1xuICAgIGdldCBtaW5pbXVtV2lkdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5taW5pbXVtV2lkdGg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1heGltdW0gd2lkdGggb2YgdGhlIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBnZXQgbWF4aW11bVdpZHRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQubWF4aW11bVdpZHRoO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUb3RhbCBudW1iZXIgb2YgZ3JvdXBzLlxuICAgICAqL1xuICAgIGdldCBzaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQuc2l6ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVG90YWwgbnVtYmVyIG9mIHBhbmVscy5cbiAgICAgKi9cbiAgICBnZXQgdG90YWxQYW5lbHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC50b3RhbFBhbmVscztcbiAgICB9XG4gICAgZ2V0IGdhcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50LmdhcDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW52b2tlZCB3aGVuIHRoZSBhY3RpdmUgZ3JvdXAgY2hhbmdlcy4gTWF5IGJlIHVuZGVmaW5lZCBpZiBubyBncm91cCBpcyBhY3RpdmUuXG4gICAgICovXG4gICAgZ2V0IG9uRGlkQWN0aXZlR3JvdXBDaGFuZ2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5vbkRpZEFjdGl2ZUdyb3VwQ2hhbmdlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIHdoZW4gYSBncm91cCBpcyBhZGRlZC4gTWF5IGJlIGNhbGxlZCBtdWx0aXBsZSB0aW1lcyB3aGVuIG1vdmluZyBncm91cHMuXG4gICAgICovXG4gICAgZ2V0IG9uRGlkQWRkR3JvdXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5vbkRpZEFkZEdyb3VwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIHdoZW4gYSBncm91cCBpcyByZW1vdmVkLiBNYXkgYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzIHdoZW4gbW92aW5nIGdyb3Vwcy5cbiAgICAgKi9cbiAgICBnZXQgb25EaWRSZW1vdmVHcm91cCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50Lm9uRGlkUmVtb3ZlR3JvdXA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludm9rZWQgd2hlbiB0aGUgYWN0aXZlIHBhbmVsIGNoYW5nZXMuIE1heSBiZSB1bmRlZmluZWQgaWYgbm8gcGFuZWwgaXMgYWN0aXZlLlxuICAgICAqL1xuICAgIGdldCBvbkRpZEFjdGl2ZVBhbmVsQ2hhbmdlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQub25EaWRBY3RpdmVQYW5lbENoYW5nZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW52b2tlZCB3aGVuIGEgcGFuZWwgaXMgYWRkZWQuIE1heSBiZSBjYWxsZWQgbXVsdGlwbGUgdGltZXMgd2hlbiBtb3ZpbmcgcGFuZWxzLlxuICAgICAqL1xuICAgIGdldCBvbkRpZEFkZFBhbmVsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQub25EaWRBZGRQYW5lbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW52b2tlZCB3aGVuIGEgcGFuZWwgaXMgcmVtb3ZlZC4gTWF5IGJlIGNhbGxlZCBtdWx0aXBsZSB0aW1lcyB3aGVuIG1vdmluZyBwYW5lbHMuXG4gICAgICovXG4gICAgZ2V0IG9uRGlkUmVtb3ZlUGFuZWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5vbkRpZFJlbW92ZVBhbmVsO1xuICAgIH1cbiAgICBnZXQgb25EaWRNb3ZlUGFuZWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5vbkRpZE1vdmVQYW5lbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW52b2tlZCBhZnRlciBhIGxheW91dCBpcyBkZXNlcmlhbHppZWQgdXNpbmcgdGhlIGBmcm9tSlNPTmAgbWV0aG9kLlxuICAgICAqL1xuICAgIGdldCBvbkRpZExheW91dEZyb21KU09OKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQub25EaWRMYXlvdXRGcm9tSlNPTjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW52b2tlZCB3aGVuIGFueSBsYXlvdXQgY2hhbmdlIG9jY3VyZXMsIGFuIGFnZ3JlZ2F0aW9uIG9mIG1hbnkgZXZlbnRzLlxuICAgICAqL1xuICAgIGdldCBvbkRpZExheW91dENoYW5nZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50Lm9uRGlkTGF5b3V0Q2hhbmdlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIHdoZW4gYSBEcmFnJ24nRHJvcCBldmVudCBvY2N1cnMgdGhhdCB0aGUgY29tcG9uZW50IHdhcyB1bmFibGUgdG8gaGFuZGxlLiBFeHBvc2VkIGZvciBjdXN0b20gRHJhZyduJ0Ryb3AgZnVuY3Rpb25hbGl0eS5cbiAgICAgKi9cbiAgICBnZXQgb25EaWREcm9wKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQub25EaWREcm9wO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIHdoZW4gYSBEcmFnJ24nRHJvcCBldmVudCBvY2N1cnMgYnV0IGJlZm9yZSBkb2NrdmlldyBoYW5kbGVzIGl0IGdpdmluZyB0aGUgdXNlciBhbiBvcHBvcnR1bml0eSB0byBpbnRlY2VwdCBhbmRcbiAgICAgKiBwcmV2ZW50IHRoZSBldmVudCBmcm9tIG9jY3VyaW5nIHVzaW5nIHRoZSBzdGFuZGFyZCBgcHJldmVudERlZmF1bHQoKWAgc3ludGF4LlxuICAgICAqXG4gICAgICogUHJldmVudGluZyBjZXJ0YWluIGV2ZW50cyBtYXkgY2F1c2VzIHVuZXhwZWN0ZWQgYmVoYXZpb3VycywgdXNlIGNhcmVmdWxseS5cbiAgICAgKi9cbiAgICBnZXQgb25XaWxsRHJvcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50Lm9uV2lsbERyb3A7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludm9rZWQgYmVmb3JlIGFuIG92ZXJsYXkgaXMgc2hvd24gaW5kaWNhdGluZyBhIGRyb3AgdGFyZ2V0LlxuICAgICAqXG4gICAgICogQ2FsbGluZyBgZXZlbnQucHJldmVudERlZmF1bHQoKWAgd2lsbCBwcmV2ZW50IHRoZSBvdmVybGF5IGJlaW5nIHNob3duIGFuZCBwcmV2ZW50XG4gICAgICogdGhlIGFueSBzdWJzZXF1ZW50IGRyb3AgZXZlbnQuXG4gICAgICovXG4gICAgZ2V0IG9uV2lsbFNob3dPdmVybGF5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQub25XaWxsU2hvd092ZXJsYXk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludm9rZWQgYmVmb3JlIGEgZ3JvdXAgaXMgZHJhZ2dlZC5cbiAgICAgKlxuICAgICAqIENhbGxpbmcgYGV2ZW50Lm5hdGl2ZUV2ZW50LnByZXZlbnREZWZhdWx0KClgIHdpbGwgcHJldmVudCB0aGUgZ3JvdXAgZHJhZyBzdGFydGluZy5cbiAgICAgKlxuICAgICAqL1xuICAgIGdldCBvbldpbGxEcmFnR3JvdXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5vbldpbGxEcmFnR3JvdXA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludm9rZWQgYmVmb3JlIGEgcGFuZWwgaXMgZHJhZ2dlZC5cbiAgICAgKlxuICAgICAqIENhbGxpbmcgYGV2ZW50Lm5hdGl2ZUV2ZW50LnByZXZlbnREZWZhdWx0KClgIHdpbGwgcHJldmVudCB0aGUgcGFuZWwgZHJhZyBzdGFydGluZy5cbiAgICAgKi9cbiAgICBnZXQgb25XaWxsRHJhZ1BhbmVsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQub25XaWxsRHJhZ1BhbmVsO1xuICAgIH1cbiAgICBnZXQgb25VbmhhbmRsZWREcmFnT3ZlckV2ZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQub25VbmhhbmRsZWREcmFnT3ZlckV2ZW50O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBbGwgcGFuZWwgb2JqZWN0cy5cbiAgICAgKi9cbiAgICBnZXQgcGFuZWxzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQucGFuZWxzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBbGwgZ3JvdXAgb2JqZWN0cy5cbiAgICAgKi9cbiAgICBnZXQgZ3JvdXBzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQuZ3JvdXBzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgQWN0aXZlIHBhbmVsIG9iamVjdC5cbiAgICAgKi9cbiAgICBnZXQgYWN0aXZlUGFuZWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5hY3RpdmVQYW5lbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWN0aXZlIGdyb3VwIG9iamVjdC5cbiAgICAgKi9cbiAgICBnZXQgYWN0aXZlR3JvdXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5hY3RpdmVHcm91cDtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoY29tcG9uZW50KSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50ID0gY29tcG9uZW50O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgRm9jdXMgdGhlIGNvbXBvbmVudC4gV2lsbCB0cnkgdG8gZm9jdXMgYW4gYWN0aXZlIHBhbmVsIGlmIG9uZSBleGlzdHMuXG4gICAgICovXG4gICAgZm9jdXMoKSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50LmZvY3VzKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhIHBhbmVsIG9iamVjdCBnaXZlbiBhIGBzdHJpbmdgIGlkLiBNYXkgcmV0dXJuIGB1bmRlZmluZWRgLlxuICAgICAqL1xuICAgIGdldFBhbmVsKGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5nZXRHcm91cFBhbmVsKGlkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRm9yY2UgcmVzaXplIHRoZSBjb21wb25lbnQgdG8gYW4gZXhhY3Qgd2lkdGggYW5kIGhlaWdodC4gUmVhZCBhYm91dCBhdXRvLXJlc2l6aW5nIGJlZm9yZSB1c2luZy5cbiAgICAgKi9cbiAgICBsYXlvdXQod2lkdGgsIGhlaWdodCwgZm9yY2UgPSBmYWxzZSkge1xuICAgICAgICB0aGlzLmNvbXBvbmVudC5sYXlvdXQod2lkdGgsIGhlaWdodCwgZm9yY2UpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGQgYSBwYW5lbCBhbmQgcmV0dXJuIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAgICAgKi9cbiAgICBhZGRQYW5lbChvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5hZGRQYW5lbChvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGEgcGFuZWwgZ2l2ZW4gdGhlIHBhbmVsIG9iamVjdC5cbiAgICAgKi9cbiAgICByZW1vdmVQYW5lbChwYW5lbCkge1xuICAgICAgICB0aGlzLmNvbXBvbmVudC5yZW1vdmVQYW5lbChwYW5lbCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZCBhIGdyb3VwIGFuZCByZXR1cm4gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICAgICAqL1xuICAgIGFkZEdyb3VwKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50LmFkZEdyb3VwKG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbG9zZSBhbGwgZ3JvdXBzIGFuZCBwYW5lbHMuXG4gICAgICovXG4gICAgY2xvc2VBbGxHcm91cHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5jbG9zZUFsbEdyb3VwcygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYSBncm91cCBhbmQgYW55IHBhbmVscyB3aXRoaW4gdGhlIGdyb3VwLlxuICAgICAqL1xuICAgIHJlbW92ZUdyb3VwKGdyb3VwKSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50LnJlbW92ZUdyb3VwKGdyb3VwKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGEgZ3JvdXAgb2JqZWN0IGdpdmVuIGEgYHN0cmluZ2AgaWQuIE1heSByZXR1cm4gdW5kZWZpbmVkLlxuICAgICAqL1xuICAgIGdldEdyb3VwKGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5nZXRQYW5lbChpZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZCBhIGZsb2F0aW5nIGdyb3VwXG4gICAgICovXG4gICAgYWRkRmxvYXRpbmdHcm91cChpdGVtLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5hZGRGbG9hdGluZ0dyb3VwKGl0ZW0sIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBjb21wb25lbnQgZnJvbSBhIHNlcmlhbGl6ZWQgb2JqZWN0LlxuICAgICAqL1xuICAgIGZyb21KU09OKGRhdGEpIHtcbiAgICAgICAgdGhpcy5jb21wb25lbnQuZnJvbUpTT04oZGF0YSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIHNlcmlhbGl6ZWQgb2JqZWN0IG9mIHRoZSBjdXJyZW50IGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC50b0pTT04oKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVzZXQgdGhlIGNvbXBvbmVudCBiYWNrIHRvIGFuIGVtcHR5IGFuZCBkZWZhdWx0IHN0YXRlLlxuICAgICAqL1xuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLmNvbXBvbmVudC5jbGVhcigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNb3ZlIHRoZSBmb2N1cyBwcm9nbWF0aWNhbGx5IHRvIHRoZSBuZXh0IHBhbmVsIG9yIGdyb3VwLlxuICAgICAqL1xuICAgIG1vdmVUb05leHQob3B0aW9ucykge1xuICAgICAgICB0aGlzLmNvbXBvbmVudC5tb3ZlVG9OZXh0KG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNb3ZlIHRoZSBmb2N1cyBwcm9nbWF0aWNhbGx5IHRvIHRoZSBwcmV2aW91cyBwYW5lbCBvciBncm91cC5cbiAgICAgKi9cbiAgICBtb3ZlVG9QcmV2aW91cyhvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50Lm1vdmVUb1ByZXZpb3VzKG9wdGlvbnMpO1xuICAgIH1cbiAgICBtYXhpbWl6ZUdyb3VwKHBhbmVsKSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50Lm1heGltaXplR3JvdXAocGFuZWwuZ3JvdXApO1xuICAgIH1cbiAgICBoYXNNYXhpbWl6ZWRHcm91cCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50Lmhhc01heGltaXplZEdyb3VwKCk7XG4gICAgfVxuICAgIGV4aXRNYXhpbWl6ZWRHcm91cCgpIHtcbiAgICAgICAgdGhpcy5jb21wb25lbnQuZXhpdE1heGltaXplZEdyb3VwKCk7XG4gICAgfVxuICAgIGdldCBvbkRpZE1heGltaXplZEdyb3VwQ2hhbmdlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQub25EaWRNYXhpbWl6ZWRHcm91cENoYW5nZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkIGEgcG9wb3V0IGdyb3VwIGluIGEgbmV3IFdpbmRvd1xuICAgICAqL1xuICAgIGFkZFBvcG91dEdyb3VwKGl0ZW0sIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50LmFkZFBvcG91dEdyb3VwKGl0ZW0sIG9wdGlvbnMpO1xuICAgIH1cbiAgICBzZXRHYXAoZ2FwKSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50LnVwZGF0ZU9wdGlvbnMoeyBnYXAgfSk7XG4gICAgfVxuICAgIHVwZGF0ZU9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICB0aGlzLmNvbXBvbmVudC51cGRhdGVPcHRpb25zKG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWxlYXNlIHJlc291cmNlcyBhbmQgdGVhcmRvd24gY29tcG9uZW50LiBEbyBub3QgY2FsbCB3aGVuIHVzaW5nIGZyYW1ld29yayB2ZXJzaW9ucyBvZiBkb2Nrdmlldy5cbiAgICAgKi9cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICB0aGlzLmNvbXBvbmVudC5kaXNwb3NlKCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgcG9zaXRpb25Ub0RpcmVjdGlvbiB9IGZyb20gJy4uL2RuZC9kcm9wdGFyZ2V0JztcbmltcG9ydCB7IEVtaXR0ZXIgfSBmcm9tICcuLi9ldmVudHMnO1xuaW1wb3J0IHsgR3JpZHZpZXdQYW5lbEFwaUltcGwgfSBmcm9tICcuL2dyaWR2aWV3UGFuZWxBcGknO1xuY29uc3QgTk9UX0lOSVRJQUxJWkVEX01FU1NBR0UgPSAnZG9ja3ZpZXc6IERvY2t2aWV3R3JvdXBQYW5lbEFwaUltcGwgbm90IGluaXRpYWxpemVkJztcbmV4cG9ydCBjbGFzcyBEb2Nrdmlld0dyb3VwUGFuZWxBcGlJbXBsIGV4dGVuZHMgR3JpZHZpZXdQYW5lbEFwaUltcGwge1xuICAgIGdldCBsb2NhdGlvbigpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9ncm91cCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKE5PVF9JTklUSUFMSVpFRF9NRVNTQUdFKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fZ3JvdXAubW9kZWwubG9jYXRpb247XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGlkLCBhY2Nlc3Nvcikge1xuICAgICAgICBzdXBlcihpZCwgJ19fZG9ja3ZpZXdncm91cF9fJyk7XG4gICAgICAgIHRoaXMuYWNjZXNzb3IgPSBhY2Nlc3NvcjtcbiAgICAgICAgdGhpcy5fb25EaWRMb2NhdGlvbkNoYW5nZSA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRMb2NhdGlvbkNoYW5nZSA9IHRoaXMuX29uRGlkTG9jYXRpb25DaGFuZ2UuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uRGlkQWN0aXZlUGFuZWxDaGFuZ2UgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRGlkQWN0aXZlUGFuZWxDaGFuZ2UgPSB0aGlzLl9vbkRpZEFjdGl2ZVBhbmVsQ2hhbmdlLmV2ZW50O1xuICAgICAgICB0aGlzLmFkZERpc3Bvc2FibGVzKHRoaXMuX29uRGlkTG9jYXRpb25DaGFuZ2UsIHRoaXMuX29uRGlkQWN0aXZlUGFuZWxDaGFuZ2UpO1xuICAgIH1cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9ncm91cCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmFjY2Vzc29yLnJlbW92ZUdyb3VwKHRoaXMuX2dyb3VwKTtcbiAgICB9XG4gICAgZ2V0V2luZG93KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhdGlvbi50eXBlID09PSAncG9wb3V0J1xuICAgICAgICAgICAgPyB0aGlzLmxvY2F0aW9uLmdldFdpbmRvdygpXG4gICAgICAgICAgICA6IHdpbmRvdztcbiAgICB9XG4gICAgbW92ZVRvKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIGlmICghdGhpcy5fZ3JvdXApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihOT1RfSU5JVElBTElaRURfTUVTU0FHRSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZ3JvdXAgPSAoX2EgPSBvcHRpb25zLmdyb3VwKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB0aGlzLmFjY2Vzc29yLmFkZEdyb3VwKHtcbiAgICAgICAgICAgIGRpcmVjdGlvbjogcG9zaXRpb25Ub0RpcmVjdGlvbigoX2IgPSBvcHRpb25zLnBvc2l0aW9uKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAncmlnaHQnKSxcbiAgICAgICAgICAgIHNraXBTZXRBY3RpdmU6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmFjY2Vzc29yLm1vdmVHcm91cE9yUGFuZWwoe1xuICAgICAgICAgICAgZnJvbTogeyBncm91cElkOiB0aGlzLl9ncm91cC5pZCB9LFxuICAgICAgICAgICAgdG86IHtcbiAgICAgICAgICAgICAgICBncm91cCxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogb3B0aW9ucy5ncm91cFxuICAgICAgICAgICAgICAgICAgICA/IChfYyA9IG9wdGlvbnMucG9zaXRpb24pICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6ICdjZW50ZXInXG4gICAgICAgICAgICAgICAgICAgIDogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgaW5kZXg6IG9wdGlvbnMuaW5kZXgsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbWF4aW1pemUoKSB7XG4gICAgICAgIGlmICghdGhpcy5fZ3JvdXApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihOT1RfSU5JVElBTElaRURfTUVTU0FHRSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubG9jYXRpb24udHlwZSAhPT0gJ2dyaWQnKSB7XG4gICAgICAgICAgICAvLyBvbmx5IGdyaWQgZ3JvdXBzIGNhbiBiZSBtYXhpbWl6ZWRcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFjY2Vzc29yLm1heGltaXplR3JvdXAodGhpcy5fZ3JvdXApO1xuICAgIH1cbiAgICBpc01heGltaXplZCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9ncm91cCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKE5PVF9JTklUSUFMSVpFRF9NRVNTQUdFKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5hY2Nlc3Nvci5pc01heGltaXplZEdyb3VwKHRoaXMuX2dyb3VwKTtcbiAgICB9XG4gICAgZXhpdE1heGltaXplZCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9ncm91cCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKE5PVF9JTklUSUFMSVpFRF9NRVNTQUdFKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pc01heGltaXplZCgpKSB7XG4gICAgICAgICAgICB0aGlzLmFjY2Vzc29yLmV4aXRNYXhpbWl6ZWRHcm91cCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGluaXRpYWxpemUoZ3JvdXApIHtcbiAgICAgICAgdGhpcy5fZ3JvdXAgPSBncm91cDtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBFbWl0dGVyIH0gZnJvbSAnLi4vZXZlbnRzJztcbmltcG9ydCB7IEdyaWR2aWV3UGFuZWxBcGlJbXBsIH0gZnJvbSAnLi9ncmlkdmlld1BhbmVsQXBpJztcbmltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUsIE11dGFibGVEaXNwb3NhYmxlIH0gZnJvbSAnLi4vbGlmZWN5Y2xlJztcbmV4cG9ydCBjbGFzcyBEb2Nrdmlld1BhbmVsQXBpSW1wbCBleHRlbmRzIEdyaWR2aWV3UGFuZWxBcGlJbXBsIHtcbiAgICBnZXQgbG9jYXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyb3VwLmFwaS5sb2NhdGlvbjtcbiAgICB9XG4gICAgZ2V0IHRpdGxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYW5lbC50aXRsZTtcbiAgICB9XG4gICAgZ2V0IGlzR3JvdXBBY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyb3VwLmlzQWN0aXZlO1xuICAgIH1cbiAgICBnZXQgcmVuZGVyZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhbmVsLnJlbmRlcmVyO1xuICAgIH1cbiAgICBzZXQgZ3JvdXAodmFsdWUpIHtcbiAgICAgICAgY29uc3Qgb2xkR3JvdXAgPSB0aGlzLl9ncm91cDtcbiAgICAgICAgaWYgKHRoaXMuX2dyb3VwICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fZ3JvdXAgPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuX29uRGlkR3JvdXBDaGFuZ2UuZmlyZSh7fSk7XG4gICAgICAgICAgICB0aGlzLnNldHVwR3JvdXBFdmVudExpc3RlbmVycyhvbGRHcm91cCk7XG4gICAgICAgICAgICB0aGlzLl9vbkRpZExvY2F0aW9uQ2hhbmdlLmZpcmUoe1xuICAgICAgICAgICAgICAgIGxvY2F0aW9uOiB0aGlzLmdyb3VwLmFwaS5sb2NhdGlvbixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBncm91cCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dyb3VwO1xuICAgIH1cbiAgICBnZXQgdGFiQ29tcG9uZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdGFiQ29tcG9uZW50O1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihwYW5lbCwgZ3JvdXAsIGFjY2Vzc29yLCBjb21wb25lbnQsIHRhYkNvbXBvbmVudCkge1xuICAgICAgICBzdXBlcihwYW5lbC5pZCwgY29tcG9uZW50KTtcbiAgICAgICAgdGhpcy5wYW5lbCA9IHBhbmVsO1xuICAgICAgICB0aGlzLmFjY2Vzc29yID0gYWNjZXNzb3I7XG4gICAgICAgIHRoaXMuX29uRGlkVGl0bGVDaGFuZ2UgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRGlkVGl0bGVDaGFuZ2UgPSB0aGlzLl9vbkRpZFRpdGxlQ2hhbmdlLmV2ZW50O1xuICAgICAgICB0aGlzLl9vbkRpZEFjdGl2ZUdyb3VwQ2hhbmdlID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZEFjdGl2ZUdyb3VwQ2hhbmdlID0gdGhpcy5fb25EaWRBY3RpdmVHcm91cENoYW5nZS5ldmVudDtcbiAgICAgICAgdGhpcy5fb25EaWRHcm91cENoYW5nZSA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRHcm91cENoYW5nZSA9IHRoaXMuX29uRGlkR3JvdXBDaGFuZ2UuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uRGlkUmVuZGVyZXJDaGFuZ2UgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRGlkUmVuZGVyZXJDaGFuZ2UgPSB0aGlzLl9vbkRpZFJlbmRlcmVyQ2hhbmdlLmV2ZW50O1xuICAgICAgICB0aGlzLl9vbkRpZExvY2F0aW9uQ2hhbmdlID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZExvY2F0aW9uQ2hhbmdlID0gdGhpcy5fb25EaWRMb2NhdGlvbkNoYW5nZS5ldmVudDtcbiAgICAgICAgdGhpcy5ncm91cEV2ZW50c0Rpc3Bvc2FibGUgPSBuZXcgTXV0YWJsZURpc3Bvc2FibGUoKTtcbiAgICAgICAgdGhpcy5fdGFiQ29tcG9uZW50ID0gdGFiQ29tcG9uZW50O1xuICAgICAgICB0aGlzLmluaXRpYWxpemUocGFuZWwpO1xuICAgICAgICB0aGlzLl9ncm91cCA9IGdyb3VwO1xuICAgICAgICB0aGlzLnNldHVwR3JvdXBFdmVudExpc3RlbmVycygpO1xuICAgICAgICB0aGlzLmFkZERpc3Bvc2FibGVzKHRoaXMuZ3JvdXBFdmVudHNEaXNwb3NhYmxlLCB0aGlzLl9vbkRpZFJlbmRlcmVyQ2hhbmdlLCB0aGlzLl9vbkRpZFRpdGxlQ2hhbmdlLCB0aGlzLl9vbkRpZEdyb3VwQ2hhbmdlLCB0aGlzLl9vbkRpZEFjdGl2ZUdyb3VwQ2hhbmdlLCB0aGlzLl9vbkRpZExvY2F0aW9uQ2hhbmdlKTtcbiAgICB9XG4gICAgZ2V0V2luZG93KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ncm91cC5hcGkuZ2V0V2luZG93KCk7XG4gICAgfVxuICAgIG1vdmVUbyhvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHRoaXMuYWNjZXNzb3IubW92ZUdyb3VwT3JQYW5lbCh7XG4gICAgICAgICAgICBmcm9tOiB7IGdyb3VwSWQ6IHRoaXMuX2dyb3VwLmlkLCBwYW5lbElkOiB0aGlzLnBhbmVsLmlkIH0sXG4gICAgICAgICAgICB0bzoge1xuICAgICAgICAgICAgICAgIGdyb3VwOiAoX2EgPSBvcHRpb25zLmdyb3VwKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB0aGlzLl9ncm91cCxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogb3B0aW9ucy5ncm91cFxuICAgICAgICAgICAgICAgICAgICA/IChfYiA9IG9wdGlvbnMucG9zaXRpb24pICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICdjZW50ZXInXG4gICAgICAgICAgICAgICAgICAgIDogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgaW5kZXg6IG9wdGlvbnMuaW5kZXgsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2V0VGl0bGUodGl0bGUpIHtcbiAgICAgICAgdGhpcy5wYW5lbC5zZXRUaXRsZSh0aXRsZSk7XG4gICAgfVxuICAgIHNldFJlbmRlcmVyKHJlbmRlcmVyKSB7XG4gICAgICAgIHRoaXMucGFuZWwuc2V0UmVuZGVyZXIocmVuZGVyZXIpO1xuICAgIH1cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgdGhpcy5ncm91cC5tb2RlbC5jbG9zZVBhbmVsKHRoaXMucGFuZWwpO1xuICAgIH1cbiAgICBtYXhpbWl6ZSgpIHtcbiAgICAgICAgdGhpcy5ncm91cC5hcGkubWF4aW1pemUoKTtcbiAgICB9XG4gICAgaXNNYXhpbWl6ZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyb3VwLmFwaS5pc01heGltaXplZCgpO1xuICAgIH1cbiAgICBleGl0TWF4aW1pemVkKCkge1xuICAgICAgICB0aGlzLmdyb3VwLmFwaS5leGl0TWF4aW1pemVkKCk7XG4gICAgfVxuICAgIHNldHVwR3JvdXBFdmVudExpc3RlbmVycyhwcmV2aW91c0dyb3VwKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgbGV0IF90cmFja0dyb3VwQWN0aXZlID0gKF9hID0gcHJldmlvdXNHcm91cCA9PT0gbnVsbCB8fCBwcmV2aW91c0dyb3VwID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwcmV2aW91c0dyb3VwLmlzQWN0aXZlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBmYWxzZTsgLy8gcHJldmVudCBkdXBsaWNhdGUgZXZlbnRzIHdpdGggc2FtZSBzdGF0ZVxuICAgICAgICB0aGlzLmdyb3VwRXZlbnRzRGlzcG9zYWJsZS52YWx1ZSA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKHRoaXMuZ3JvdXAuYXBpLm9uRGlkVmlzaWJpbGl0eUNoYW5nZSgoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGhhc0JlY29tZUhpZGRlbiA9ICFldmVudC5pc1Zpc2libGUgJiYgdGhpcy5pc1Zpc2libGU7XG4gICAgICAgICAgICBjb25zdCBoYXNCZWNvbWVWaXNpYmxlID0gZXZlbnQuaXNWaXNpYmxlICYmICF0aGlzLmlzVmlzaWJsZTtcbiAgICAgICAgICAgIGNvbnN0IGlzQWN0aXZlUGFuZWwgPSB0aGlzLmdyb3VwLm1vZGVsLmlzUGFuZWxBY3RpdmUodGhpcy5wYW5lbCk7XG4gICAgICAgICAgICBpZiAoaGFzQmVjb21lSGlkZGVuIHx8IChoYXNCZWNvbWVWaXNpYmxlICYmIGlzQWN0aXZlUGFuZWwpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb25EaWRWaXNpYmlsaXR5Q2hhbmdlLmZpcmUoZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSwgdGhpcy5ncm91cC5hcGkub25EaWRMb2NhdGlvbkNoYW5nZSgoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmdyb3VwICE9PSB0aGlzLnBhbmVsLmdyb3VwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fb25EaWRMb2NhdGlvbkNoYW5nZS5maXJlKGV2ZW50KTtcbiAgICAgICAgfSksIHRoaXMuZ3JvdXAuYXBpLm9uRGlkQWN0aXZlQ2hhbmdlKCgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmdyb3VwICE9PSB0aGlzLnBhbmVsLmdyb3VwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKF90cmFja0dyb3VwQWN0aXZlICE9PSB0aGlzLmlzR3JvdXBBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICBfdHJhY2tHcm91cEFjdGl2ZSA9IHRoaXMuaXNHcm91cEFjdGl2ZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9vbkRpZEFjdGl2ZUdyb3VwQ2hhbmdlLmZpcmUoe1xuICAgICAgICAgICAgICAgICAgICBpc0FjdGl2ZTogdGhpcy5pc0dyb3VwQWN0aXZlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgR3JpZHZpZXdBcGksIFBhbmV2aWV3QXBpLCBTcGxpdHZpZXdBcGksIH0gZnJvbSAnLi4vYXBpL2NvbXBvbmVudC5hcGknO1xuaW1wb3J0IHsgRG9ja3ZpZXdDb21wb25lbnQgfSBmcm9tICcuLi9kb2Nrdmlldy9kb2Nrdmlld0NvbXBvbmVudCc7XG5pbXBvcnQgeyBHcmlkdmlld0NvbXBvbmVudCB9IGZyb20gJy4uL2dyaWR2aWV3L2dyaWR2aWV3Q29tcG9uZW50JztcbmltcG9ydCB7IFBhbmV2aWV3Q29tcG9uZW50IH0gZnJvbSAnLi4vcGFuZXZpZXcvcGFuZXZpZXdDb21wb25lbnQnO1xuaW1wb3J0IHsgU3BsaXR2aWV3Q29tcG9uZW50IH0gZnJvbSAnLi4vc3BsaXR2aWV3L3NwbGl0dmlld0NvbXBvbmVudCc7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRG9ja3ZpZXcoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIGNvbnN0IGNvbXBvbmVudCA9IG5ldyBEb2Nrdmlld0NvbXBvbmVudChlbGVtZW50LCBvcHRpb25zKTtcbiAgICByZXR1cm4gY29tcG9uZW50LmFwaTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTcGxpdHZpZXcoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIGNvbnN0IGNvbXBvbmVudCA9IG5ldyBTcGxpdHZpZXdDb21wb25lbnQoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIG5ldyBTcGxpdHZpZXdBcGkoY29tcG9uZW50KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVHcmlkdmlldyhlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgY29uc3QgY29tcG9uZW50ID0gbmV3IEdyaWR2aWV3Q29tcG9uZW50KGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgIHJldHVybiBuZXcgR3JpZHZpZXdBcGkoY29tcG9uZW50KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQYW5ldmlldyhlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgY29uc3QgY29tcG9uZW50ID0gbmV3IFBhbmV2aWV3Q29tcG9uZW50KGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgIHJldHVybiBuZXcgUGFuZXZpZXdBcGkoY29tcG9uZW50KTtcbn1cbiIsImltcG9ydCB7IEVtaXR0ZXIgfSBmcm9tICcuLi9ldmVudHMnO1xuaW1wb3J0IHsgUGFuZWxBcGlJbXBsIH0gZnJvbSAnLi9wYW5lbEFwaSc7XG5leHBvcnQgY2xhc3MgR3JpZHZpZXdQYW5lbEFwaUltcGwgZXh0ZW5kcyBQYW5lbEFwaUltcGwge1xuICAgIGNvbnN0cnVjdG9yKGlkLCBjb21wb25lbnQsIHBhbmVsKSB7XG4gICAgICAgIHN1cGVyKGlkLCBjb21wb25lbnQpO1xuICAgICAgICB0aGlzLl9vbkRpZENvbnN0cmFpbnRzQ2hhbmdlSW50ZXJuYWwgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRGlkQ29uc3RyYWludHNDaGFuZ2VJbnRlcm5hbCA9IHRoaXMuX29uRGlkQ29uc3RyYWludHNDaGFuZ2VJbnRlcm5hbC5ldmVudDtcbiAgICAgICAgdGhpcy5fb25EaWRDb25zdHJhaW50c0NoYW5nZSA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRDb25zdHJhaW50c0NoYW5nZSA9IHRoaXMuX29uRGlkQ29uc3RyYWludHNDaGFuZ2UuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uRGlkU2l6ZUNoYW5nZSA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRTaXplQ2hhbmdlID0gdGhpcy5fb25EaWRTaXplQ2hhbmdlLmV2ZW50O1xuICAgICAgICB0aGlzLmFkZERpc3Bvc2FibGVzKHRoaXMuX29uRGlkQ29uc3RyYWludHNDaGFuZ2VJbnRlcm5hbCwgdGhpcy5fb25EaWRDb25zdHJhaW50c0NoYW5nZSwgdGhpcy5fb25EaWRTaXplQ2hhbmdlKTtcbiAgICAgICAgaWYgKHBhbmVsKSB7XG4gICAgICAgICAgICB0aGlzLmluaXRpYWxpemUocGFuZWwpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldENvbnN0cmFpbnRzKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX29uRGlkQ29uc3RyYWludHNDaGFuZ2VJbnRlcm5hbC5maXJlKHZhbHVlKTtcbiAgICB9XG4gICAgc2V0U2l6ZShldmVudCkge1xuICAgICAgICB0aGlzLl9vbkRpZFNpemVDaGFuZ2UuZmlyZShldmVudCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgRG9ja3ZpZXdFdmVudCwgRW1pdHRlciB9IGZyb20gJy4uL2V2ZW50cyc7XG5pbXBvcnQgeyBDb21wb3NpdGVEaXNwb3NhYmxlLCBNdXRhYmxlRGlzcG9zYWJsZSB9IGZyb20gJy4uL2xpZmVjeWNsZSc7XG5leHBvcnQgY2xhc3MgV2lsbEZvY3VzRXZlbnQgZXh0ZW5kcyBEb2Nrdmlld0V2ZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG59XG4vKipcbiAqIEEgY29yZSBhcGkgaW1wbGVtZW50YXRpb24gdGhhdCBzaG91bGQgYmUgdXNlZCBhY3Jvc3MgYWxsIHBhbmVsLWxpa2Ugb2JqZWN0c1xuICovXG5leHBvcnQgY2xhc3MgUGFuZWxBcGlJbXBsIGV4dGVuZHMgQ29tcG9zaXRlRGlzcG9zYWJsZSB7XG4gICAgZ2V0IGlzRm9jdXNlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzRm9jdXNlZDtcbiAgICB9XG4gICAgZ2V0IGlzQWN0aXZlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNBY3RpdmU7XG4gICAgfVxuICAgIGdldCBpc1Zpc2libGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1Zpc2libGU7XG4gICAgfVxuICAgIGdldCB3aWR0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dpZHRoO1xuICAgIH1cbiAgICBnZXQgaGVpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faGVpZ2h0O1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihpZCwgY29tcG9uZW50KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5jb21wb25lbnQgPSBjb21wb25lbnQ7XG4gICAgICAgIHRoaXMuX2lzRm9jdXNlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9pc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9pc1Zpc2libGUgPSB0cnVlO1xuICAgICAgICB0aGlzLl93aWR0aCA9IDA7XG4gICAgICAgIHRoaXMuX2hlaWdodCA9IDA7XG4gICAgICAgIHRoaXMuX3BhcmFtZXRlcnMgPSB7fTtcbiAgICAgICAgdGhpcy5wYW5lbFVwZGF0ZXNEaXNwb3NhYmxlID0gbmV3IE11dGFibGVEaXNwb3NhYmxlKCk7XG4gICAgICAgIHRoaXMuX29uRGlkRGltZW5zaW9uQ2hhbmdlID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZERpbWVuc2lvbnNDaGFuZ2UgPSB0aGlzLl9vbkRpZERpbWVuc2lvbkNoYW5nZS5ldmVudDtcbiAgICAgICAgdGhpcy5fb25EaWRDaGFuZ2VGb2N1cyA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRGb2N1c0NoYW5nZSA9IHRoaXMuX29uRGlkQ2hhbmdlRm9jdXMuZXZlbnQ7XG4gICAgICAgIC8vXG4gICAgICAgIHRoaXMuX29uV2lsbEZvY3VzID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbldpbGxGb2N1cyA9IHRoaXMuX29uV2lsbEZvY3VzLmV2ZW50O1xuICAgICAgICAvL1xuICAgICAgICB0aGlzLl9vbkRpZFZpc2liaWxpdHlDaGFuZ2UgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRGlkVmlzaWJpbGl0eUNoYW5nZSA9IHRoaXMuX29uRGlkVmlzaWJpbGl0eUNoYW5nZS5ldmVudDtcbiAgICAgICAgdGhpcy5fb25XaWxsVmlzaWJpbGl0eUNoYW5nZSA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25XaWxsVmlzaWJpbGl0eUNoYW5nZSA9IHRoaXMuX29uV2lsbFZpc2liaWxpdHlDaGFuZ2UuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uRGlkQWN0aXZlQ2hhbmdlID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZEFjdGl2ZUNoYW5nZSA9IHRoaXMuX29uRGlkQWN0aXZlQ2hhbmdlLmV2ZW50O1xuICAgICAgICB0aGlzLl9vbkFjdGl2ZUNoYW5nZSA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25BY3RpdmVDaGFuZ2UgPSB0aGlzLl9vbkFjdGl2ZUNoYW5nZS5ldmVudDtcbiAgICAgICAgdGhpcy5fb25EaWRQYXJhbWV0ZXJzQ2hhbmdlID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZFBhcmFtZXRlcnNDaGFuZ2UgPSB0aGlzLl9vbkRpZFBhcmFtZXRlcnNDaGFuZ2UuZXZlbnQ7XG4gICAgICAgIHRoaXMuYWRkRGlzcG9zYWJsZXModGhpcy5vbkRpZEZvY3VzQ2hhbmdlKChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5faXNGb2N1c2VkID0gZXZlbnQuaXNGb2N1c2VkO1xuICAgICAgICB9KSwgdGhpcy5vbkRpZEFjdGl2ZUNoYW5nZSgoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2lzQWN0aXZlID0gZXZlbnQuaXNBY3RpdmU7XG4gICAgICAgIH0pLCB0aGlzLm9uRGlkVmlzaWJpbGl0eUNoYW5nZSgoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2lzVmlzaWJsZSA9IGV2ZW50LmlzVmlzaWJsZTtcbiAgICAgICAgfSksIHRoaXMub25EaWREaW1lbnNpb25zQ2hhbmdlKChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fd2lkdGggPSBldmVudC53aWR0aDtcbiAgICAgICAgICAgIHRoaXMuX2hlaWdodCA9IGV2ZW50LmhlaWdodDtcbiAgICAgICAgfSksIHRoaXMucGFuZWxVcGRhdGVzRGlzcG9zYWJsZSwgdGhpcy5fb25EaWREaW1lbnNpb25DaGFuZ2UsIHRoaXMuX29uRGlkQ2hhbmdlRm9jdXMsIHRoaXMuX29uRGlkVmlzaWJpbGl0eUNoYW5nZSwgdGhpcy5fb25EaWRBY3RpdmVDaGFuZ2UsIHRoaXMuX29uV2lsbEZvY3VzLCB0aGlzLl9vbkFjdGl2ZUNoYW5nZSwgdGhpcy5fb25XaWxsRm9jdXMsIHRoaXMuX29uV2lsbFZpc2liaWxpdHlDaGFuZ2UsIHRoaXMuX29uRGlkUGFyYW1ldGVyc0NoYW5nZSk7XG4gICAgfVxuICAgIGdldFBhcmFtZXRlcnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXJhbWV0ZXJzO1xuICAgIH1cbiAgICBpbml0aWFsaXplKHBhbmVsKSB7XG4gICAgICAgIHRoaXMucGFuZWxVcGRhdGVzRGlzcG9zYWJsZS52YWx1ZSA9IHRoaXMuX29uRGlkUGFyYW1ldGVyc0NoYW5nZS5ldmVudCgocGFyYW1ldGVycykgPT4ge1xuICAgICAgICAgICAgdGhpcy5fcGFyYW1ldGVycyA9IHBhcmFtZXRlcnM7XG4gICAgICAgICAgICBwYW5lbC51cGRhdGUoe1xuICAgICAgICAgICAgICAgIHBhcmFtczogcGFyYW1ldGVycyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2V0VmlzaWJsZShpc1Zpc2libGUpIHtcbiAgICAgICAgdGhpcy5fb25XaWxsVmlzaWJpbGl0eUNoYW5nZS5maXJlKHsgaXNWaXNpYmxlIH0pO1xuICAgIH1cbiAgICBzZXRBY3RpdmUoKSB7XG4gICAgICAgIHRoaXMuX29uQWN0aXZlQ2hhbmdlLmZpcmUoKTtcbiAgICB9XG4gICAgdXBkYXRlUGFyYW1ldGVycyhwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHRoaXMuX29uRGlkUGFyYW1ldGVyc0NoYW5nZS5maXJlKHBhcmFtZXRlcnMpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEVtaXR0ZXIgfSBmcm9tICcuLi9ldmVudHMnO1xuaW1wb3J0IHsgU3BsaXR2aWV3UGFuZWxBcGlJbXBsIH0gZnJvbSAnLi9zcGxpdHZpZXdQYW5lbEFwaSc7XG5leHBvcnQgY2xhc3MgUGFuZXZpZXdQYW5lbEFwaUltcGwgZXh0ZW5kcyBTcGxpdHZpZXdQYW5lbEFwaUltcGwge1xuICAgIHNldCBwYW5lKHBhbmUpIHtcbiAgICAgICAgdGhpcy5fcGFuZSA9IHBhbmU7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGlkLCBjb21wb25lbnQpIHtcbiAgICAgICAgc3VwZXIoaWQsIGNvbXBvbmVudCk7XG4gICAgICAgIHRoaXMuX29uRGlkRXhwYW5zaW9uQ2hhbmdlID0gbmV3IEVtaXR0ZXIoe1xuICAgICAgICAgICAgcmVwbGF5OiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5vbkRpZEV4cGFuc2lvbkNoYW5nZSA9IHRoaXMuX29uRGlkRXhwYW5zaW9uQ2hhbmdlLmV2ZW50O1xuICAgICAgICB0aGlzLl9vbk1vdXNlRW50ZXIgPSBuZXcgRW1pdHRlcih7fSk7XG4gICAgICAgIHRoaXMub25Nb3VzZUVudGVyID0gdGhpcy5fb25Nb3VzZUVudGVyLmV2ZW50O1xuICAgICAgICB0aGlzLl9vbk1vdXNlTGVhdmUgPSBuZXcgRW1pdHRlcih7fSk7XG4gICAgICAgIHRoaXMub25Nb3VzZUxlYXZlID0gdGhpcy5fb25Nb3VzZUxlYXZlLmV2ZW50O1xuICAgICAgICB0aGlzLmFkZERpc3Bvc2FibGVzKHRoaXMuX29uRGlkRXhwYW5zaW9uQ2hhbmdlLCB0aGlzLl9vbk1vdXNlRW50ZXIsIHRoaXMuX29uTW91c2VMZWF2ZSk7XG4gICAgfVxuICAgIHNldEV4cGFuZGVkKGlzRXhwYW5kZWQpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAoX2EgPSB0aGlzLl9wYW5lKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0RXhwYW5kZWQoaXNFeHBhbmRlZCk7XG4gICAgfVxuICAgIGdldCBpc0V4cGFuZGVkKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAhISgoX2EgPSB0aGlzLl9wYW5lKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaXNFeHBhbmRlZCgpKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBFbWl0dGVyIH0gZnJvbSAnLi4vZXZlbnRzJztcbmltcG9ydCB7IFBhbmVsQXBpSW1wbCB9IGZyb20gJy4vcGFuZWxBcGknO1xuZXhwb3J0IGNsYXNzIFNwbGl0dmlld1BhbmVsQXBpSW1wbCBleHRlbmRzIFBhbmVsQXBpSW1wbCB7XG4gICAgLy9cbiAgICBjb25zdHJ1Y3RvcihpZCwgY29tcG9uZW50KSB7XG4gICAgICAgIHN1cGVyKGlkLCBjb21wb25lbnQpO1xuICAgICAgICB0aGlzLl9vbkRpZENvbnN0cmFpbnRzQ2hhbmdlSW50ZXJuYWwgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRGlkQ29uc3RyYWludHNDaGFuZ2VJbnRlcm5hbCA9IHRoaXMuX29uRGlkQ29uc3RyYWludHNDaGFuZ2VJbnRlcm5hbC5ldmVudDtcbiAgICAgICAgLy9cbiAgICAgICAgdGhpcy5fb25EaWRDb25zdHJhaW50c0NoYW5nZSA9IG5ldyBFbWl0dGVyKHtcbiAgICAgICAgICAgIHJlcGxheTogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMub25EaWRDb25zdHJhaW50c0NoYW5nZSA9IHRoaXMuX29uRGlkQ29uc3RyYWludHNDaGFuZ2UuZXZlbnQ7XG4gICAgICAgIC8vXG4gICAgICAgIHRoaXMuX29uRGlkU2l6ZUNoYW5nZSA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRTaXplQ2hhbmdlID0gdGhpcy5fb25EaWRTaXplQ2hhbmdlLmV2ZW50O1xuICAgICAgICB0aGlzLmFkZERpc3Bvc2FibGVzKHRoaXMuX29uRGlkQ29uc3RyYWludHNDaGFuZ2VJbnRlcm5hbCwgdGhpcy5fb25EaWRDb25zdHJhaW50c0NoYW5nZSwgdGhpcy5fb25EaWRTaXplQ2hhbmdlKTtcbiAgICB9XG4gICAgc2V0Q29uc3RyYWludHModmFsdWUpIHtcbiAgICAgICAgdGhpcy5fb25EaWRDb25zdHJhaW50c0NoYW5nZUludGVybmFsLmZpcmUodmFsdWUpO1xuICAgIH1cbiAgICBzZXRTaXplKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuX29uRGlkU2l6ZUNoYW5nZS5maXJlKGV2ZW50KTtcbiAgICB9XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gdGFpbChhcnIpIHtcbiAgICBpZiAoYXJyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdGFpbCBjYWxsJyk7XG4gICAgfVxuICAgIHJldHVybiBbYXJyLnNsaWNlKDAsIGFyci5sZW5ndGggLSAxKSwgYXJyW2Fyci5sZW5ndGggLSAxXV07XG59XG5leHBvcnQgZnVuY3Rpb24gbGFzdChhcnIpIHtcbiAgICByZXR1cm4gYXJyLmxlbmd0aCA+IDAgPyBhcnJbYXJyLmxlbmd0aCAtIDFdIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNlcXVlbmNlRXF1YWxzKGFycjEsIGFycjIpIHtcbiAgICBpZiAoYXJyMS5sZW5ndGggIT09IGFycjIubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIxLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChhcnIxW2ldICE9PSBhcnIyW2ldKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG4vKipcbiAqIFB1c2hlcyBhbiBlbGVtZW50IHRvIHRoZSBzdGFydCBvZiB0aGUgYXJyYXksIGlmIGZvdW5kLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcHVzaFRvU3RhcnQoYXJyLCB2YWx1ZSkge1xuICAgIGNvbnN0IGluZGV4ID0gYXJyLmluZGV4T2YodmFsdWUpO1xuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgIGFyci5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBhcnIudW5zaGlmdCh2YWx1ZSk7XG4gICAgfVxufVxuLyoqXG4gKiBQdXNoZXMgYW4gZWxlbWVudCB0byB0aGUgZW5kIG9mIHRoZSBhcnJheSwgaWYgZm91bmQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwdXNoVG9FbmQoYXJyLCB2YWx1ZSkge1xuICAgIGNvbnN0IGluZGV4ID0gYXJyLmluZGV4T2YodmFsdWUpO1xuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgIGFyci5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBhcnIucHVzaCh2YWx1ZSk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGZpcnN0SW5kZXgoYXJyYXksIGZuKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gYXJyYXlbaV07XG4gICAgICAgIGlmIChmbihlbGVtZW50KSkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZShhcnJheSwgdmFsdWUpIHtcbiAgICBjb25zdCBpbmRleCA9IGFycmF5LmZpbmRJbmRleCgodCkgPT4gdCA9PT0gdmFsdWUpO1xuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgIGFycmF5LnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4iLCJleHBvcnQgY29uc3QgREVGQVVMVF9GTE9BVElOR19HUk9VUF9PVkVSRkxPV19TSVpFID0gMTAwO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfRkxPQVRJTkdfR1JPVVBfUE9TSVRJT04gPSB7IGxlZnQ6IDEwMCwgdG9wOiAxMDAsIHdpZHRoOiAzMDAsIGhlaWdodDogMzAwIH07XG4iLCJpbXBvcnQgeyBkaXNhYmxlSWZyYW1lUG9pbnRFdmVudHMgfSBmcm9tICcuLi9kb20nO1xuaW1wb3J0IHsgYWRkRGlzcG9zYWJsZUxpc3RlbmVyLCBFbWl0dGVyIH0gZnJvbSAnLi4vZXZlbnRzJztcbmltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUsIE11dGFibGVEaXNwb3NhYmxlLCB9IGZyb20gJy4uL2xpZmVjeWNsZSc7XG5leHBvcnQgY2xhc3MgRHJhZ0hhbmRsZXIgZXh0ZW5kcyBDb21wb3NpdGVEaXNwb3NhYmxlIHtcbiAgICBjb25zdHJ1Y3RvcihlbCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmVsID0gZWw7XG4gICAgICAgIHRoaXMuZGF0YURpc3Bvc2FibGUgPSBuZXcgTXV0YWJsZURpc3Bvc2FibGUoKTtcbiAgICAgICAgdGhpcy5wb2ludGVyRXZlbnRzRGlzcG9zYWJsZSA9IG5ldyBNdXRhYmxlRGlzcG9zYWJsZSgpO1xuICAgICAgICB0aGlzLl9vbkRyYWdTdGFydCA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EcmFnU3RhcnQgPSB0aGlzLl9vbkRyYWdTdGFydC5ldmVudDtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyh0aGlzLl9vbkRyYWdTdGFydCwgdGhpcy5kYXRhRGlzcG9zYWJsZSwgdGhpcy5wb2ludGVyRXZlbnRzRGlzcG9zYWJsZSk7XG4gICAgICAgIHRoaXMuY29uZmlndXJlKCk7XG4gICAgfVxuICAgIGlzQ2FuY2VsbGVkKF9ldmVudCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbmZpZ3VyZSgpIHtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyh0aGlzLl9vbkRyYWdTdGFydCwgYWRkRGlzcG9zYWJsZUxpc3RlbmVyKHRoaXMuZWwsICdkcmFnc3RhcnQnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkIHx8IHRoaXMuaXNDYW5jZWxsZWQoZXZlbnQpKSB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBpZnJhbWVzID0gZGlzYWJsZUlmcmFtZVBvaW50RXZlbnRzKCk7XG4gICAgICAgICAgICB0aGlzLnBvaW50ZXJFdmVudHNEaXNwb3NhYmxlLnZhbHVlID0ge1xuICAgICAgICAgICAgICAgIGRpc3Bvc2U6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWZyYW1lcy5yZWxlYXNlKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmVsLmNsYXNzTGlzdC5hZGQoJ2R2LWRyYWdnZWQnKTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5lbC5jbGFzc0xpc3QucmVtb3ZlKCdkdi1kcmFnZ2VkJyksIDApO1xuICAgICAgICAgICAgdGhpcy5kYXRhRGlzcG9zYWJsZS52YWx1ZSA9IHRoaXMuZ2V0RGF0YShldmVudCk7XG4gICAgICAgICAgICB0aGlzLl9vbkRyYWdTdGFydC5maXJlKGV2ZW50KTtcbiAgICAgICAgICAgIGlmIChldmVudC5kYXRhVHJhbnNmZXIpIHtcbiAgICAgICAgICAgICAgICBldmVudC5kYXRhVHJhbnNmZXIuZWZmZWN0QWxsb3dlZCA9ICdtb3ZlJztcbiAgICAgICAgICAgICAgICBjb25zdCBoYXNEYXRhID0gZXZlbnQuZGF0YVRyYW5zZmVyLml0ZW1zLmxlbmd0aCA+IDA7XG4gICAgICAgICAgICAgICAgaWYgKCFoYXNEYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBBbHRob3VnaCB0aGlzIGlzIG5vdCB1c2VkIGJ5IGRvY2t2aWV3IG1hbnkgdGhpcmQgcGFydHkgZG5kIGxpYnJhcmllcyB3aWxsIGNoZWNrXG4gICAgICAgICAgICAgICAgICAgICAqIGRhdGFUcmFuc2Zlci50eXBlcyB0byBkZXRlcm1pbmUgdmFsaWQgZHJhZyBldmVudHMuXG4gICAgICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICAgICAqIEZvciBleGFtcGxlOiBpbiByZWFjdC1kbmQgaWYgZGF0YVRyYW5zZmVyLnR5cGVzIGlzIG5vdCBzZXQgdGhlbiB0aGUgZHJhZ1N0YXJ0IGV2ZW50IHdpbGwgYmUgY2FuY2VsbGVkXG4gICAgICAgICAgICAgICAgICAgICAqIHRocm91Z2ggLnByZXZlbnREZWZhdWx0KCkuIFNpbmNlIHRoaXMgaXMgYXBwbGllZCBnbG9iYWxseSB0byBhbGwgZHJhZyBldmVudHMgdGhpcyB3b3VsZCBicmVhayBkb2Nrdmlld3NcbiAgICAgICAgICAgICAgICAgICAgICogZG5kIGxvZ2ljLiBZb3UgY2FuIHNlZSB0aGUgY29kZSBhdFxuICAgICAgICAgICAgICAgICAgICAgKiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtZG5kL3JlYWN0LWRuZC9ibG9iL21haW4vcGFja2FnZXMvYmFja2VuZC1odG1sNS9zcmMvSFRNTDVCYWNrZW5kSW1wbC50cyNMNTQyXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBldmVudC5kYXRhVHJhbnNmZXIuc2V0RGF0YSgndGV4dC9wbGFpbicsICcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLCBhZGREaXNwb3NhYmxlTGlzdGVuZXIodGhpcy5lbCwgJ2RyYWdlbmQnLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnBvaW50ZXJFdmVudHNEaXNwb3NhYmxlLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIHRoaXMuZGF0YURpc3Bvc2FibGUuZGlzcG9zZSgpO1xuICAgICAgICB9KSk7XG4gICAgfVxufVxuIiwiY2xhc3MgVHJhbnNmZXJPYmplY3Qge1xufVxuZXhwb3J0IGNsYXNzIFBhbmVsVHJhbnNmZXIgZXh0ZW5kcyBUcmFuc2Zlck9iamVjdCB7XG4gICAgY29uc3RydWN0b3Iodmlld0lkLCBncm91cElkLCBwYW5lbElkKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMudmlld0lkID0gdmlld0lkO1xuICAgICAgICB0aGlzLmdyb3VwSWQgPSBncm91cElkO1xuICAgICAgICB0aGlzLnBhbmVsSWQgPSBwYW5lbElkO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBQYW5lVHJhbnNmZXIgZXh0ZW5kcyBUcmFuc2Zlck9iamVjdCB7XG4gICAgY29uc3RydWN0b3Iodmlld0lkLCBwYW5lSWQpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy52aWV3SWQgPSB2aWV3SWQ7XG4gICAgICAgIHRoaXMucGFuZUlkID0gcGFuZUlkO1xuICAgIH1cbn1cbi8qKlxuICogQSBzaW5nbGV0b24gdG8gc3RvcmUgdHJhbnNmZXIgZGF0YSBkdXJpbmcgZHJhZyAmIGRyb3Agb3BlcmF0aW9ucyB0aGF0IGFyZSBvbmx5IHZhbGlkIHdpdGhpbiB0aGUgYXBwbGljYXRpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBMb2NhbFNlbGVjdGlvblRyYW5zZmVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLy8gcHJvdGVjdCBhZ2FpbnN0IGV4dGVybmFsIGluc3RhbnRpYXRpb25cbiAgICB9XG4gICAgc3RhdGljIGdldEluc3RhbmNlKCkge1xuICAgICAgICByZXR1cm4gTG9jYWxTZWxlY3Rpb25UcmFuc2Zlci5JTlNUQU5DRTtcbiAgICB9XG4gICAgaGFzRGF0YShwcm90bykge1xuICAgICAgICByZXR1cm4gcHJvdG8gJiYgcHJvdG8gPT09IHRoaXMucHJvdG87XG4gICAgfVxuICAgIGNsZWFyRGF0YShwcm90bykge1xuICAgICAgICBpZiAodGhpcy5oYXNEYXRhKHByb3RvKSkge1xuICAgICAgICAgICAgdGhpcy5wcm90byA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMuZGF0YSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXREYXRhKHByb3RvKSB7XG4gICAgICAgIGlmICh0aGlzLmhhc0RhdGEocHJvdG8pKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHNldERhdGEoZGF0YSwgcHJvdG8pIHtcbiAgICAgICAgaWYgKHByb3RvKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICAgICAgdGhpcy5wcm90byA9IHByb3RvO1xuICAgICAgICB9XG4gICAgfVxufVxuTG9jYWxTZWxlY3Rpb25UcmFuc2Zlci5JTlNUQU5DRSA9IG5ldyBMb2NhbFNlbGVjdGlvblRyYW5zZmVyKCk7XG5leHBvcnQgZnVuY3Rpb24gZ2V0UGFuZWxEYXRhKCkge1xuICAgIGNvbnN0IHBhbmVsVHJhbnNmZXIgPSBMb2NhbFNlbGVjdGlvblRyYW5zZmVyLmdldEluc3RhbmNlKCk7XG4gICAgY29uc3QgaXNQYW5lbEV2ZW50ID0gcGFuZWxUcmFuc2Zlci5oYXNEYXRhKFBhbmVsVHJhbnNmZXIucHJvdG90eXBlKTtcbiAgICBpZiAoIWlzUGFuZWxFdmVudCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gcGFuZWxUcmFuc2Zlci5nZXREYXRhKFBhbmVsVHJhbnNmZXIucHJvdG90eXBlKVswXTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRQYW5lRGF0YSgpIHtcbiAgICBjb25zdCBwYW5lVHJhbnNmZXIgPSBMb2NhbFNlbGVjdGlvblRyYW5zZmVyLmdldEluc3RhbmNlKCk7XG4gICAgY29uc3QgaXNQYW5lbEV2ZW50ID0gcGFuZVRyYW5zZmVyLmhhc0RhdGEoUGFuZVRyYW5zZmVyLnByb3RvdHlwZSk7XG4gICAgaWYgKCFpc1BhbmVsRXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIHBhbmVUcmFuc2Zlci5nZXREYXRhKFBhbmVUcmFuc2Zlci5wcm90b3R5cGUpWzBdO1xufVxuIiwiaW1wb3J0IHsgYWRkRGlzcG9zYWJsZUxpc3RlbmVyIH0gZnJvbSAnLi4vZXZlbnRzJztcbmltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUgfSBmcm9tICcuLi9saWZlY3ljbGUnO1xuZXhwb3J0IGNsYXNzIERyYWdBbmREcm9wT2JzZXJ2ZXIgZXh0ZW5kcyBDb21wb3NpdGVEaXNwb3NhYmxlIHtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50LCBjYWxsYmFja3MpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgdGhpcy5jYWxsYmFja3MgPSBjYWxsYmFja3M7XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5yZWdpc3Rlckxpc3RlbmVycygpO1xuICAgIH1cbiAgICBvbkRyYWdFbnRlcihlKSB7XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICAgIHRoaXMuY2FsbGJhY2tzLm9uRHJhZ0VudGVyKGUpO1xuICAgIH1cbiAgICBvbkRyYWdPdmVyKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAvLyBuZWVkZWQgc28gdGhhdCB0aGUgZHJvcCBldmVudCBmaXJlcyAoaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjEzMzk5MjQvZHJvcC1ldmVudC1ub3QtZmlyaW5nLWluLWNocm9tZSlcbiAgICAgICAgaWYgKHRoaXMuY2FsbGJhY2tzLm9uRHJhZ092ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tzLm9uRHJhZ092ZXIoZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgb25EcmFnTGVhdmUoZSkge1xuICAgICAgICBpZiAodGhpcy50YXJnZXQgPT09IGUudGFyZ2V0KSB7XG4gICAgICAgICAgICB0aGlzLnRhcmdldCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmNhbGxiYWNrcy5vbkRyYWdMZWF2ZShlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvbkRyYWdFbmQoZSkge1xuICAgICAgICB0aGlzLnRhcmdldCA9IG51bGw7XG4gICAgICAgIHRoaXMuY2FsbGJhY2tzLm9uRHJhZ0VuZChlKTtcbiAgICB9XG4gICAgb25Ecm9wKGUpIHtcbiAgICAgICAgdGhpcy5jYWxsYmFja3Mub25Ecm9wKGUpO1xuICAgIH1cbiAgICByZWdpc3Rlckxpc3RlbmVycygpIHtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyhhZGREaXNwb3NhYmxlTGlzdGVuZXIodGhpcy5lbGVtZW50LCAnZHJhZ2VudGVyJywgKGUpID0+IHtcbiAgICAgICAgICAgIHRoaXMub25EcmFnRW50ZXIoZSk7XG4gICAgICAgIH0sIHRydWUpKTtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyhhZGREaXNwb3NhYmxlTGlzdGVuZXIodGhpcy5lbGVtZW50LCAnZHJhZ292ZXInLCAoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vbkRyYWdPdmVyKGUpO1xuICAgICAgICB9LCB0cnVlKSk7XG4gICAgICAgIHRoaXMuYWRkRGlzcG9zYWJsZXMoYWRkRGlzcG9zYWJsZUxpc3RlbmVyKHRoaXMuZWxlbWVudCwgJ2RyYWdsZWF2ZScsIChlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm9uRHJhZ0xlYXZlKGUpO1xuICAgICAgICB9KSk7XG4gICAgICAgIHRoaXMuYWRkRGlzcG9zYWJsZXMoYWRkRGlzcG9zYWJsZUxpc3RlbmVyKHRoaXMuZWxlbWVudCwgJ2RyYWdlbmQnLCAoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vbkRyYWdFbmQoZSk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyhhZGREaXNwb3NhYmxlTGlzdGVuZXIodGhpcy5lbGVtZW50LCAnZHJvcCcsIChlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm9uRHJvcChlKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IHRvZ2dsZUNsYXNzIH0gZnJvbSAnLi4vZG9tJztcbmltcG9ydCB7IERvY2t2aWV3RXZlbnQsIEVtaXR0ZXIgfSBmcm9tICcuLi9ldmVudHMnO1xuaW1wb3J0IHsgQ29tcG9zaXRlRGlzcG9zYWJsZSB9IGZyb20gJy4uL2xpZmVjeWNsZSc7XG5pbXBvcnQgeyBEcmFnQW5kRHJvcE9ic2VydmVyIH0gZnJvbSAnLi9kbmQnO1xuaW1wb3J0IHsgY2xhbXAgfSBmcm9tICcuLi9tYXRoJztcbmV4cG9ydCBjbGFzcyBXaWxsU2hvd092ZXJsYXlFdmVudCBleHRlbmRzIERvY2t2aWV3RXZlbnQge1xuICAgIGdldCBuYXRpdmVFdmVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5uYXRpdmVFdmVudDtcbiAgICB9XG4gICAgZ2V0IHBvc2l0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLnBvc2l0aW9uO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGRpcmVjdGlvblRvUG9zaXRpb24oZGlyZWN0aW9uKSB7XG4gICAgc3dpdGNoIChkaXJlY3Rpb24pIHtcbiAgICAgICAgY2FzZSAnYWJvdmUnOlxuICAgICAgICAgICAgcmV0dXJuICd0b3AnO1xuICAgICAgICBjYXNlICdiZWxvdyc6XG4gICAgICAgICAgICByZXR1cm4gJ2JvdHRvbSc7XG4gICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgICAgcmV0dXJuICdsZWZ0JztcbiAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgcmV0dXJuICdyaWdodCc7XG4gICAgICAgIGNhc2UgJ3dpdGhpbic6XG4gICAgICAgICAgICByZXR1cm4gJ2NlbnRlcic7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGludmFsaWQgZGlyZWN0aW9uICcke2RpcmVjdGlvbn0nYCk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHBvc2l0aW9uVG9EaXJlY3Rpb24ocG9zaXRpb24pIHtcbiAgICBzd2l0Y2ggKHBvc2l0aW9uKSB7XG4gICAgICAgIGNhc2UgJ3RvcCc6XG4gICAgICAgICAgICByZXR1cm4gJ2Fib3ZlJztcbiAgICAgICAgY2FzZSAnYm90dG9tJzpcbiAgICAgICAgICAgIHJldHVybiAnYmVsb3cnO1xuICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgICAgIHJldHVybiAnbGVmdCc7XG4gICAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgICAgIHJldHVybiAncmlnaHQnO1xuICAgICAgICBjYXNlICdjZW50ZXInOlxuICAgICAgICAgICAgcmV0dXJuICd3aXRoaW4nO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIHBvc2l0aW9uICcke3Bvc2l0aW9ufSdgKTtcbiAgICB9XG59XG5jb25zdCBERUZBVUxUX0FDVElWQVRJT05fU0laRSA9IHtcbiAgICB2YWx1ZTogMjAsXG4gICAgdHlwZTogJ3BlcmNlbnRhZ2UnLFxufTtcbmNvbnN0IERFRkFVTFRfU0laRSA9IHtcbiAgICB2YWx1ZTogNTAsXG4gICAgdHlwZTogJ3BlcmNlbnRhZ2UnLFxufTtcbmNvbnN0IFNNQUxMX1dJRFRIX0JPVU5EQVJZID0gMTAwO1xuY29uc3QgU01BTExfSEVJR0hUX0JPVU5EQVJZID0gMTAwO1xuZXhwb3J0IGNsYXNzIERyb3B0YXJnZXQgZXh0ZW5kcyBDb21wb3NpdGVEaXNwb3NhYmxlIHtcbiAgICBnZXQgc3RhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGF0ZTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLl9vbkRyb3AgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRHJvcCA9IHRoaXMuX29uRHJvcC5ldmVudDtcbiAgICAgICAgdGhpcy5fb25XaWxsU2hvd092ZXJsYXkgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uV2lsbFNob3dPdmVybGF5ID0gdGhpcy5fb25XaWxsU2hvd092ZXJsYXkuZXZlbnQ7XG4gICAgICAgIC8vIHVzZSBhIHNldCB0byB0YWtlIGFkdmFudGFnZSBvZiAjPHNldD4uaGFzXG4gICAgICAgIHRoaXMuX2FjY2VwdGVkVGFyZ2V0Wm9uZXNTZXQgPSBuZXcgU2V0KHRoaXMub3B0aW9ucy5hY2NlcHRlZFRhcmdldFpvbmVzKTtcbiAgICAgICAgdGhpcy5kbmQgPSBuZXcgRHJhZ0FuZERyb3BPYnNlcnZlcih0aGlzLmVsZW1lbnQsIHtcbiAgICAgICAgICAgIG9uRHJhZ0VudGVyOiAoKSA9PiB1bmRlZmluZWQsXG4gICAgICAgICAgICBvbkRyYWdPdmVyOiAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9hY2NlcHRlZFRhcmdldFpvbmVzU2V0LnNpemUgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVEcm9wVGFyZ2V0KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3Qgd2lkdGggPSB0aGlzLmVsZW1lbnQuY2xpZW50V2lkdGg7XG4gICAgICAgICAgICAgICAgY29uc3QgaGVpZ2h0ID0gdGhpcy5lbGVtZW50LmNsaWVudEhlaWdodDtcbiAgICAgICAgICAgICAgICBpZiAod2lkdGggPT09IDAgfHwgaGVpZ2h0ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjsgLy8gYXZvaWQgZGl2ITBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgcmVjdCA9IGUuY3VycmVudFRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgICAgICBjb25zdCB4ID0gZS5jbGllbnRYIC0gcmVjdC5sZWZ0O1xuICAgICAgICAgICAgICAgIGNvbnN0IHkgPSBlLmNsaWVudFkgLSByZWN0LnRvcDtcbiAgICAgICAgICAgICAgICBjb25zdCBxdWFkcmFudCA9IHRoaXMuY2FsY3VsYXRlUXVhZHJhbnQodGhpcy5fYWNjZXB0ZWRUYXJnZXRab25lc1NldCwgeCwgeSwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogSWYgdGhlIGV2ZW50IGhhcyBhbHJlYWR5IGJlZW4gdXNlZCBieSBhbm90aGVyIERyb3BUYXJnZXQgaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAgKiB0aGVuIGRvbid0IHNob3cgYSBzZWNvbmQgZHJvcCB0YXJnZXQsIG9ubHkgb25lIHRhcmdldCBzaG91bGQgYmVcbiAgICAgICAgICAgICAgICAgKiBhY3RpdmUgYXQgYW55IG9uZSB0aW1lXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNBbHJlYWR5VXNlZChlKSB8fCBxdWFkcmFudCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBubyBkcm9wIHRhcmdldCBzaG91bGQgYmUgZGlzcGxheWVkXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlRHJvcFRhcmdldCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLmNhbkRpc3BsYXlPdmVybGF5KGUsIHF1YWRyYW50KSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZURyb3BUYXJnZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCB3aWxsU2hvd092ZXJsYXlFdmVudCA9IG5ldyBXaWxsU2hvd092ZXJsYXlFdmVudCh7XG4gICAgICAgICAgICAgICAgICAgIG5hdGl2ZUV2ZW50OiBlLFxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogcXVhZHJhbnQsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogUHJvdmlkZSBhbiBvcHBvcnR1bml0eSB0byBwcmV2ZW50IHRoZSBvdmVybGF5IGFwcGVhcmluZyBhbmQgaW4gdHVyblxuICAgICAgICAgICAgICAgICAqIGFueSBkbmQgYmVoYXZpb3Vyc1xuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHRoaXMuX29uV2lsbFNob3dPdmVybGF5LmZpcmUod2lsbFNob3dPdmVybGF5RXZlbnQpO1xuICAgICAgICAgICAgICAgIGlmICh3aWxsU2hvd092ZXJsYXlFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlRHJvcFRhcmdldCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMubWFya0FzVXNlZChlKTtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMudGFyZ2V0RWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRhcmdldEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50YXJnZXRFbGVtZW50LmNsYXNzTmFtZSA9ICdkdi1kcm9wLXRhcmdldC1kcm9wem9uZSc7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3ZlcmxheUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vdmVybGF5RWxlbWVudC5jbGFzc05hbWUgPSAnZHYtZHJvcC10YXJnZXQtc2VsZWN0aW9uJztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAnY2VudGVyJztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50YXJnZXRFbGVtZW50LmFwcGVuZENoaWxkKHRoaXMub3ZlcmxheUVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnZHYtZHJvcC10YXJnZXQnKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LmFwcGVuZCh0aGlzLnRhcmdldEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUNsYXNzZXMocXVhZHJhbnQsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gcXVhZHJhbnQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25EcmFnTGVhdmU6ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZURyb3BUYXJnZXQoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkRyYWdFbmQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZURyb3BUYXJnZXQoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkRyb3A6IChlKSA9PiB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5fc3RhdGU7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVEcm9wVGFyZ2V0KCk7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG9ubHkgc3RvcCB0aGUgcHJvcGFnYXRpb24gb2YgdGhlIGV2ZW50IGlmIHdlIGFyZSBkZWFsaW5nIHdpdGggaXRcbiAgICAgICAgICAgICAgICAgICAgLy8gd2hpY2ggaXMgb25seSB3aGVuIHRoZSB0YXJnZXQgaGFzIHN0YXRlXG4gICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29uRHJvcC5maXJlKHsgcG9zaXRpb246IHN0YXRlLCBuYXRpdmVFdmVudDogZSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyh0aGlzLl9vbkRyb3AsIHRoaXMuX29uV2lsbFNob3dPdmVybGF5LCB0aGlzLmRuZCk7XG4gICAgfVxuICAgIHNldFRhcmdldFpvbmVzKGFjY2VwdGVkVGFyZ2V0Wm9uZXMpIHtcbiAgICAgICAgdGhpcy5fYWNjZXB0ZWRUYXJnZXRab25lc1NldCA9IG5ldyBTZXQoYWNjZXB0ZWRUYXJnZXRab25lcyk7XG4gICAgfVxuICAgIHNldE92ZXJsYXlNb2RlbChtb2RlbCkge1xuICAgICAgICB0aGlzLm9wdGlvbnMub3ZlcmxheU1vZGVsID0gbW9kZWw7XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRHJvcFRhcmdldCgpO1xuICAgICAgICBzdXBlci5kaXNwb3NlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZCBhIHByb3BlcnR5IHRvIHRoZSBldmVudCBvYmplY3QgZm9yIG90aGVyIHBvdGVudGlhbCBsaXN0ZW5lcnMgdG8gY2hlY2tcbiAgICAgKi9cbiAgICBtYXJrQXNVc2VkKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50W0Ryb3B0YXJnZXQuVVNFRF9FVkVOVF9JRF0gPSB0cnVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVjayBpcyB0aGUgZXZlbnQgaGFzIGFscmVhZHkgYmVlbiB1c2VkIGJ5IGFub3RoZXIgaW5zdGFuY2Ugb2YgRHJvcFRhcmdldFxuICAgICAqL1xuICAgIGlzQWxyZWFkeVVzZWQoZXZlbnQpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBldmVudFtEcm9wdGFyZ2V0LlVTRURfRVZFTlRfSURdO1xuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicgJiYgdmFsdWU7XG4gICAgfVxuICAgIHRvZ2dsZUNsYXNzZXMocXVhZHJhbnQsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgaWYgKCF0aGlzLm92ZXJsYXlFbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXNTbWFsbFggPSB3aWR0aCA8IFNNQUxMX1dJRFRIX0JPVU5EQVJZO1xuICAgICAgICBjb25zdCBpc1NtYWxsWSA9IGhlaWdodCA8IFNNQUxMX0hFSUdIVF9CT1VOREFSWTtcbiAgICAgICAgY29uc3QgaXNMZWZ0ID0gcXVhZHJhbnQgPT09ICdsZWZ0JztcbiAgICAgICAgY29uc3QgaXNSaWdodCA9IHF1YWRyYW50ID09PSAncmlnaHQnO1xuICAgICAgICBjb25zdCBpc1RvcCA9IHF1YWRyYW50ID09PSAndG9wJztcbiAgICAgICAgY29uc3QgaXNCb3R0b20gPSBxdWFkcmFudCA9PT0gJ2JvdHRvbSc7XG4gICAgICAgIGNvbnN0IHJpZ2h0Q2xhc3MgPSAhaXNTbWFsbFggJiYgaXNSaWdodDtcbiAgICAgICAgY29uc3QgbGVmdENsYXNzID0gIWlzU21hbGxYICYmIGlzTGVmdDtcbiAgICAgICAgY29uc3QgdG9wQ2xhc3MgPSAhaXNTbWFsbFkgJiYgaXNUb3A7XG4gICAgICAgIGNvbnN0IGJvdHRvbUNsYXNzID0gIWlzU21hbGxZICYmIGlzQm90dG9tO1xuICAgICAgICBsZXQgc2l6ZSA9IDE7XG4gICAgICAgIGNvbnN0IHNpemVPcHRpb25zID0gKF9iID0gKF9hID0gdGhpcy5vcHRpb25zLm92ZXJsYXlNb2RlbCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNpemUpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IERFRkFVTFRfU0laRTtcbiAgICAgICAgaWYgKHNpemVPcHRpb25zLnR5cGUgPT09ICdwZXJjZW50YWdlJykge1xuICAgICAgICAgICAgc2l6ZSA9IGNsYW1wKHNpemVPcHRpb25zLnZhbHVlLCAwLCAxMDApIC8gMTAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHJpZ2h0Q2xhc3MgfHwgbGVmdENsYXNzKSB7XG4gICAgICAgICAgICAgICAgc2l6ZSA9IGNsYW1wKDAsIHNpemVPcHRpb25zLnZhbHVlLCB3aWR0aCkgLyB3aWR0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0b3BDbGFzcyB8fCBib3R0b21DbGFzcykge1xuICAgICAgICAgICAgICAgIHNpemUgPSBjbGFtcCgwLCBzaXplT3B0aW9ucy52YWx1ZSwgaGVpZ2h0KSAvIGhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBib3ggPSB7IHRvcDogJzBweCcsIGxlZnQ6ICcwcHgnLCB3aWR0aDogJzEwMCUnLCBoZWlnaHQ6ICcxMDAlJyB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogWW91IGNhbiBhbHNvIGFjaGlldmUgdGhlIG92ZXJsYXkgcGxhY2VtZW50IHVzaW5nIHRoZSB0cmFuc2Zvcm0gQ1NTIHByb3BlcnR5XG4gICAgICAgICAqIHRvIHRyYW5zbGF0ZSBhbmQgc2NhbGUgdGhlIGVsZW1lbnQgaG93ZXZlciB0aGlzIGhhcyB0aGUgdW5kZXNpcmVkIGVmZmVjdCBvZlxuICAgICAgICAgKiAnc2tld2luZycgdGhlIGVsZW1lbnQuIENvbW1lbnQgbGVmdCBoZXJlIGZvciBhbnlib2R5IHRoYXQgZXZlciByZXZpc2l0cyB0aGlzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy90cmFuc2Zvcm1cbiAgICAgICAgICpcbiAgICAgICAgICogcmlnaHRcbiAgICAgICAgICogdHJhbnNsYXRlWCgkezEwMCAqICgxIC0gc2l6ZSkgLyAyfSUpIHNjYWxlWCgke3NjYWxlfSlcbiAgICAgICAgICpcbiAgICAgICAgICogbGVmdFxuICAgICAgICAgKiB0cmFuc2xhdGVYKC0kezEwMCAqICgxIC0gc2l6ZSkgLyAyfSUpIHNjYWxlWCgke3NjYWxlfSlcbiAgICAgICAgICpcbiAgICAgICAgICogdG9wXG4gICAgICAgICAqIHRyYW5zbGF0ZVkoLSR7MTAwICogKDEgLSBzaXplKSAvIDJ9JSkgc2NhbGVZKCR7c2NhbGV9KVxuICAgICAgICAgKlxuICAgICAgICAgKiBib3R0b21cbiAgICAgICAgICogdHJhbnNsYXRlWSgkezEwMCAqICgxIC0gc2l6ZSkgLyAyfSUpIHNjYWxlWSgke3NjYWxlfSlcbiAgICAgICAgICovXG4gICAgICAgIGlmIChyaWdodENsYXNzKSB7XG4gICAgICAgICAgICBib3gubGVmdCA9IGAkezEwMCAqICgxIC0gc2l6ZSl9JWA7XG4gICAgICAgICAgICBib3gud2lkdGggPSBgJHsxMDAgKiBzaXplfSVgO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGxlZnRDbGFzcykge1xuICAgICAgICAgICAgYm94LndpZHRoID0gYCR7MTAwICogc2l6ZX0lYDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0b3BDbGFzcykge1xuICAgICAgICAgICAgYm94LmhlaWdodCA9IGAkezEwMCAqIHNpemV9JWA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYm90dG9tQ2xhc3MpIHtcbiAgICAgICAgICAgIGJveC50b3AgPSBgJHsxMDAgKiAoMSAtIHNpemUpfSVgO1xuICAgICAgICAgICAgYm94LmhlaWdodCA9IGAkezEwMCAqIHNpemV9JWA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vdmVybGF5RWxlbWVudC5zdHlsZS50b3AgPSBib3gudG9wO1xuICAgICAgICB0aGlzLm92ZXJsYXlFbGVtZW50LnN0eWxlLmxlZnQgPSBib3gubGVmdDtcbiAgICAgICAgdGhpcy5vdmVybGF5RWxlbWVudC5zdHlsZS53aWR0aCA9IGJveC53aWR0aDtcbiAgICAgICAgdGhpcy5vdmVybGF5RWxlbWVudC5zdHlsZS5oZWlnaHQgPSBib3guaGVpZ2h0O1xuICAgICAgICB0b2dnbGVDbGFzcyh0aGlzLm92ZXJsYXlFbGVtZW50LCAnZHYtZHJvcC10YXJnZXQtc21hbGwtdmVydGljYWwnLCBpc1NtYWxsWSk7XG4gICAgICAgIHRvZ2dsZUNsYXNzKHRoaXMub3ZlcmxheUVsZW1lbnQsICdkdi1kcm9wLXRhcmdldC1zbWFsbC1ob3Jpem9udGFsJywgaXNTbWFsbFgpO1xuICAgICAgICB0b2dnbGVDbGFzcyh0aGlzLm92ZXJsYXlFbGVtZW50LCAnZHYtZHJvcC10YXJnZXQtbGVmdCcsIGlzTGVmdCk7XG4gICAgICAgIHRvZ2dsZUNsYXNzKHRoaXMub3ZlcmxheUVsZW1lbnQsICdkdi1kcm9wLXRhcmdldC1yaWdodCcsIGlzUmlnaHQpO1xuICAgICAgICB0b2dnbGVDbGFzcyh0aGlzLm92ZXJsYXlFbGVtZW50LCAnZHYtZHJvcC10YXJnZXQtdG9wJywgaXNUb3ApO1xuICAgICAgICB0b2dnbGVDbGFzcyh0aGlzLm92ZXJsYXlFbGVtZW50LCAnZHYtZHJvcC10YXJnZXQtYm90dG9tJywgaXNCb3R0b20pO1xuICAgICAgICB0b2dnbGVDbGFzcyh0aGlzLm92ZXJsYXlFbGVtZW50LCAnZHYtZHJvcC10YXJnZXQtY2VudGVyJywgcXVhZHJhbnQgPT09ICdjZW50ZXInKTtcbiAgICB9XG4gICAgY2FsY3VsYXRlUXVhZHJhbnQob3ZlcmxheVR5cGUsIHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgY29uc3QgYWN0aXZhdGlvblNpemVPcHRpb25zID0gKF9iID0gKF9hID0gdGhpcy5vcHRpb25zLm92ZXJsYXlNb2RlbCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmFjdGl2YXRpb25TaXplKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBERUZBVUxUX0FDVElWQVRJT05fU0laRTtcbiAgICAgICAgY29uc3QgaXNQZXJjZW50YWdlID0gYWN0aXZhdGlvblNpemVPcHRpb25zLnR5cGUgPT09ICdwZXJjZW50YWdlJztcbiAgICAgICAgaWYgKGlzUGVyY2VudGFnZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGN1bGF0ZVF1YWRyYW50QXNQZXJjZW50YWdlKG92ZXJsYXlUeXBlLCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCBhY3RpdmF0aW9uU2l6ZU9wdGlvbnMudmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYWxjdWxhdGVRdWFkcmFudEFzUGl4ZWxzKG92ZXJsYXlUeXBlLCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCBhY3RpdmF0aW9uU2l6ZU9wdGlvbnMudmFsdWUpO1xuICAgIH1cbiAgICByZW1vdmVEcm9wVGFyZ2V0KCkge1xuICAgICAgICBpZiAodGhpcy50YXJnZXRFbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLnRhcmdldEVsZW1lbnQpO1xuICAgICAgICAgICAgdGhpcy50YXJnZXRFbGVtZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5vdmVybGF5RWxlbWVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdkdi1kcm9wLXRhcmdldCcpO1xuICAgICAgICB9XG4gICAgfVxufVxuRHJvcHRhcmdldC5VU0VEX0VWRU5UX0lEID0gJ19fZG9ja3ZpZXdfZHJvcHRhcmdldF9ldmVudF9pc191c2VkX18nO1xuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZVF1YWRyYW50QXNQZXJjZW50YWdlKG92ZXJsYXlUeXBlLCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCB0aHJlc2hvbGQpIHtcbiAgICBjb25zdCB4cCA9ICgxMDAgKiB4KSAvIHdpZHRoO1xuICAgIGNvbnN0IHlwID0gKDEwMCAqIHkpIC8gaGVpZ2h0O1xuICAgIGlmIChvdmVybGF5VHlwZS5oYXMoJ2xlZnQnKSAmJiB4cCA8IHRocmVzaG9sZCkge1xuICAgICAgICByZXR1cm4gJ2xlZnQnO1xuICAgIH1cbiAgICBpZiAob3ZlcmxheVR5cGUuaGFzKCdyaWdodCcpICYmIHhwID4gMTAwIC0gdGhyZXNob2xkKSB7XG4gICAgICAgIHJldHVybiAncmlnaHQnO1xuICAgIH1cbiAgICBpZiAob3ZlcmxheVR5cGUuaGFzKCd0b3AnKSAmJiB5cCA8IHRocmVzaG9sZCkge1xuICAgICAgICByZXR1cm4gJ3RvcCc7XG4gICAgfVxuICAgIGlmIChvdmVybGF5VHlwZS5oYXMoJ2JvdHRvbScpICYmIHlwID4gMTAwIC0gdGhyZXNob2xkKSB7XG4gICAgICAgIHJldHVybiAnYm90dG9tJztcbiAgICB9XG4gICAgaWYgKCFvdmVybGF5VHlwZS5oYXMoJ2NlbnRlcicpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gJ2NlbnRlcic7XG59XG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlUXVhZHJhbnRBc1BpeGVscyhvdmVybGF5VHlwZSwgeCwgeSwgd2lkdGgsIGhlaWdodCwgdGhyZXNob2xkKSB7XG4gICAgaWYgKG92ZXJsYXlUeXBlLmhhcygnbGVmdCcpICYmIHggPCB0aHJlc2hvbGQpIHtcbiAgICAgICAgcmV0dXJuICdsZWZ0JztcbiAgICB9XG4gICAgaWYgKG92ZXJsYXlUeXBlLmhhcygncmlnaHQnKSAmJiB4ID4gd2lkdGggLSB0aHJlc2hvbGQpIHtcbiAgICAgICAgcmV0dXJuICdyaWdodCc7XG4gICAgfVxuICAgIGlmIChvdmVybGF5VHlwZS5oYXMoJ3RvcCcpICYmIHkgPCB0aHJlc2hvbGQpIHtcbiAgICAgICAgcmV0dXJuICd0b3AnO1xuICAgIH1cbiAgICBpZiAob3ZlcmxheVR5cGUuaGFzKCdib3R0b20nKSAmJiB5ID4gaGVpZ2h0IC0gdGhyZXNob2xkKSB7XG4gICAgICAgIHJldHVybiAnYm90dG9tJztcbiAgICB9XG4gICAgaWYgKCFvdmVybGF5VHlwZS5oYXMoJ2NlbnRlcicpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gJ2NlbnRlcic7XG59XG4iLCJpbXBvcnQgeyBhZGRDbGFzc2VzLCByZW1vdmVDbGFzc2VzIH0gZnJvbSAnLi4vZG9tJztcbmV4cG9ydCBmdW5jdGlvbiBhZGRHaG9zdEltYWdlKGRhdGFUcmFuc2ZlciwgZ2hvc3RFbGVtZW50KSB7XG4gICAgLy8gY2xhc3MgZG9ja3ZpZXcgcHJvdmlkZXMgdG8gZm9yY2UgZ2hvc3QgaW1hZ2UgdG8gYmUgZHJhd24gb24gYSBkaWZmZXJlbnQgbGF5ZXIgYW5kIHByZXZlbnQgd2VpcmQgcmVuZGVyaW5nIGlzc3Vlc1xuICAgIGFkZENsYXNzZXMoZ2hvc3RFbGVtZW50LCAnZHYtZHJhZ2dlZCcpO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZ2hvc3RFbGVtZW50KTtcbiAgICBkYXRhVHJhbnNmZXIuc2V0RHJhZ0ltYWdlKGdob3N0RWxlbWVudCwgMCwgMCk7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHJlbW92ZUNsYXNzZXMoZ2hvc3RFbGVtZW50LCAnZHYtZHJhZ2dlZCcpO1xuICAgICAgICBnaG9zdEVsZW1lbnQucmVtb3ZlKCk7XG4gICAgfSwgMCk7XG59XG4iLCJpbXBvcnQgeyBxdWFzaVByZXZlbnREZWZhdWx0IH0gZnJvbSAnLi4vZG9tJztcbmltcG9ydCB7IGFkZERpc3Bvc2FibGVMaXN0ZW5lciB9IGZyb20gJy4uL2V2ZW50cyc7XG5pbXBvcnQgeyBEcmFnSGFuZGxlciB9IGZyb20gJy4vYWJzdHJhY3REcmFnSGFuZGxlcic7XG5pbXBvcnQgeyBMb2NhbFNlbGVjdGlvblRyYW5zZmVyLCBQYW5lbFRyYW5zZmVyIH0gZnJvbSAnLi9kYXRhVHJhbnNmZXInO1xuaW1wb3J0IHsgYWRkR2hvc3RJbWFnZSB9IGZyb20gJy4vZ2hvc3QnO1xuZXhwb3J0IGNsYXNzIEdyb3VwRHJhZ0hhbmRsZXIgZXh0ZW5kcyBEcmFnSGFuZGxlciB7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudCwgYWNjZXNzb3IsIGdyb3VwKSB7XG4gICAgICAgIHN1cGVyKGVsZW1lbnQpO1xuICAgICAgICB0aGlzLmFjY2Vzc29yID0gYWNjZXNzb3I7XG4gICAgICAgIHRoaXMuZ3JvdXAgPSBncm91cDtcbiAgICAgICAgdGhpcy5wYW5lbFRyYW5zZmVyID0gTG9jYWxTZWxlY3Rpb25UcmFuc2Zlci5nZXRJbnN0YW5jZSgpO1xuICAgICAgICB0aGlzLmFkZERpc3Bvc2FibGVzKGFkZERpc3Bvc2FibGVMaXN0ZW5lcihlbGVtZW50LCAncG9pbnRlcmRvd24nLCAoZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGUuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBZb3UgY2Fubm90IGNhbGwgZS5wcmV2ZW50RGVmYXVsdCgpIGJlY2F1c2UgdGhhdCB3aWxsIHByZXZlbnQgZHJhZyBldmVudHMgZnJvbSBmaXJpbmdcbiAgICAgICAgICAgICAgICAgKiBidXQgd2UgYWxzbyBuZWVkIHRvIHN0b3AgYW55IGdyb3VwIG92ZXJsYXkgZHJhZyBldmVudHMgZnJvbSBvY2N1cmluZ1xuICAgICAgICAgICAgICAgICAqIFVzZSBhIGN1c3RvbSBldmVudCBtYXJrZXIgdGhhdCBjYW4gYmUgY2hlY2tlZCBieSB0aGUgb3ZlcmxheSBkcmFnIGV2ZW50c1xuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHF1YXNpUHJldmVudERlZmF1bHQoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHRydWUpKTtcbiAgICB9XG4gICAgaXNDYW5jZWxsZWQoX2V2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLmdyb3VwLmFwaS5sb2NhdGlvbi50eXBlID09PSAnZmxvYXRpbmcnICYmICFfZXZlbnQuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZ2V0RGF0YShkcmFnRXZlbnQpIHtcbiAgICAgICAgY29uc3QgZGF0YVRyYW5zZmVyID0gZHJhZ0V2ZW50LmRhdGFUcmFuc2ZlcjtcbiAgICAgICAgdGhpcy5wYW5lbFRyYW5zZmVyLnNldERhdGEoW25ldyBQYW5lbFRyYW5zZmVyKHRoaXMuYWNjZXNzb3IuaWQsIHRoaXMuZ3JvdXAuaWQsIG51bGwpXSwgUGFuZWxUcmFuc2Zlci5wcm90b3R5cGUpO1xuICAgICAgICBjb25zdCBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMuZWwpO1xuICAgICAgICBjb25zdCBiZ0NvbG9yID0gc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnLS1kdi1hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3InKTtcbiAgICAgICAgY29uc3QgY29sb3IgPSBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCctLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItY29sb3InKTtcbiAgICAgICAgaWYgKGRhdGFUcmFuc2Zlcikge1xuICAgICAgICAgICAgY29uc3QgZ2hvc3RFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBnaG9zdEVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gYmdDb2xvcjtcbiAgICAgICAgICAgIGdob3N0RWxlbWVudC5zdHlsZS5jb2xvciA9IGNvbG9yO1xuICAgICAgICAgICAgZ2hvc3RFbGVtZW50LnN0eWxlLnBhZGRpbmcgPSAnMnB4IDhweCc7XG4gICAgICAgICAgICBnaG9zdEVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gJzI0cHgnO1xuICAgICAgICAgICAgZ2hvc3RFbGVtZW50LnN0eWxlLmZvbnRTaXplID0gJzExcHgnO1xuICAgICAgICAgICAgZ2hvc3RFbGVtZW50LnN0eWxlLmxpbmVIZWlnaHQgPSAnMjBweCc7XG4gICAgICAgICAgICBnaG9zdEVsZW1lbnQuc3R5bGUuYm9yZGVyUmFkaXVzID0gJzEycHgnO1xuICAgICAgICAgICAgZ2hvc3RFbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgICAgICAgIGdob3N0RWxlbWVudC50ZXh0Q29udGVudCA9IGBNdWx0aXBsZSBQYW5lbHMgKCR7dGhpcy5ncm91cC5zaXplfSlgO1xuICAgICAgICAgICAgYWRkR2hvc3RJbWFnZShkYXRhVHJhbnNmZXIsIGdob3N0RWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRpc3Bvc2U6ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhbmVsVHJhbnNmZXIuY2xlYXJEYXRhKFBhbmVsVHJhbnNmZXIucHJvdG90eXBlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQ29tcG9zaXRlRGlzcG9zYWJsZSwgTXV0YWJsZURpc3Bvc2FibGUsIH0gZnJvbSAnLi4vLi4vLi4vbGlmZWN5Y2xlJztcbmltcG9ydCB7IEVtaXR0ZXIgfSBmcm9tICcuLi8uLi8uLi9ldmVudHMnO1xuaW1wb3J0IHsgdHJhY2tGb2N1cyB9IGZyb20gJy4uLy4uLy4uL2RvbSc7XG5pbXBvcnQgeyBEcm9wdGFyZ2V0IH0gZnJvbSAnLi4vLi4vLi4vZG5kL2Ryb3B0YXJnZXQnO1xuaW1wb3J0IHsgZ2V0UGFuZWxEYXRhIH0gZnJvbSAnLi4vLi4vLi4vZG5kL2RhdGFUcmFuc2Zlcic7XG5leHBvcnQgY2xhc3MgQ29udGVudENvbnRhaW5lciBleHRlbmRzIENvbXBvc2l0ZURpc3Bvc2FibGUge1xuICAgIGdldCBlbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZWxlbWVudDtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoYWNjZXNzb3IsIGdyb3VwKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuYWNjZXNzb3IgPSBhY2Nlc3NvcjtcbiAgICAgICAgdGhpcy5ncm91cCA9IGdyb3VwO1xuICAgICAgICB0aGlzLmRpc3Bvc2FibGUgPSBuZXcgTXV0YWJsZURpc3Bvc2FibGUoKTtcbiAgICAgICAgdGhpcy5fb25EaWRGb2N1cyA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRGb2N1cyA9IHRoaXMuX29uRGlkRm9jdXMuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uRGlkQmx1ciA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRCbHVyID0gdGhpcy5fb25EaWRCbHVyLmV2ZW50O1xuICAgICAgICB0aGlzLl9lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NOYW1lID0gJ2R2LWNvbnRlbnQtY29udGFpbmVyJztcbiAgICAgICAgdGhpcy5fZWxlbWVudC50YWJJbmRleCA9IC0xO1xuICAgICAgICB0aGlzLmFkZERpc3Bvc2FibGVzKHRoaXMuX29uRGlkRm9jdXMsIHRoaXMuX29uRGlkQmx1cik7XG4gICAgICAgIHRoaXMuZHJvcFRhcmdldCA9IG5ldyBEcm9wdGFyZ2V0KHRoaXMuZWxlbWVudCwge1xuICAgICAgICAgICAgYWNjZXB0ZWRUYXJnZXRab25lczogWyd0b3AnLCAnYm90dG9tJywgJ2xlZnQnLCAncmlnaHQnLCAnY2VudGVyJ10sXG4gICAgICAgICAgICBjYW5EaXNwbGF5T3ZlcmxheTogKGV2ZW50LCBwb3NpdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmdyb3VwLmxvY2tlZCA9PT0gJ25vLWRyb3AtdGFyZ2V0JyB8fFxuICAgICAgICAgICAgICAgICAgICAodGhpcy5ncm91cC5sb2NrZWQgJiYgcG9zaXRpb24gPT09ICdjZW50ZXInKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBnZXRQYW5lbERhdGEoKTtcbiAgICAgICAgICAgICAgICBpZiAoIWRhdGEgJiZcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuc2hpZnRLZXkgJiZcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ncm91cC5sb2NhdGlvbi50eXBlICE9PSAnZmxvYXRpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS52aWV3SWQgPT09IHRoaXMuYWNjZXNzb3IuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuZ3JvdXBJZCA9PT0gdGhpcy5ncm91cC5pZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRvbid0IGFsbG93IHRvIGRyb3Agb24gc2VsZiBmb3IgY2VudGVyIHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEucGFuZWxJZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRvbid0IGFsbG93IGdyb3VwIG1vdmUgdG8gZHJvcCBhbnl3aGVyZSBvbiBzZWxmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwSGFzT25lUGFuZWxBbmRJc0FjdGl2ZURyYWdFbGVtZW50ID0gdGhpcy5ncm91cC5wYW5lbHMubGVuZ3RoID09PSAxICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmdyb3VwSWQgPT09IHRoaXMuZ3JvdXAuaWQ7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhZ3JvdXBIYXNPbmVQYW5lbEFuZElzQWN0aXZlRHJhZ0VsZW1lbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyb3VwLmNhbkRpc3BsYXlPdmVybGF5KGV2ZW50LCBwb3NpdGlvbiwgJ2NvbnRlbnQnKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmFkZERpc3Bvc2FibGVzKHRoaXMuZHJvcFRhcmdldCk7XG4gICAgfVxuICAgIHNob3coKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJyc7XG4gICAgfVxuICAgIGhpZGUoKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIH1cbiAgICByZW5kZXJQYW5lbChwYW5lbCwgb3B0aW9ucyA9IHsgYXNBY3RpdmU6IHRydWUgfSkge1xuICAgICAgICBjb25zdCBkb1JlbmRlciA9IG9wdGlvbnMuYXNBY3RpdmUgfHxcbiAgICAgICAgICAgICh0aGlzLnBhbmVsICYmIHRoaXMuZ3JvdXAuaXNQYW5lbEFjdGl2ZSh0aGlzLnBhbmVsKSk7XG4gICAgICAgIGlmICh0aGlzLnBhbmVsICYmXG4gICAgICAgICAgICB0aGlzLnBhbmVsLnZpZXcuY29udGVudC5lbGVtZW50LnBhcmVudEVsZW1lbnQgPT09IHRoaXMuX2VsZW1lbnQpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgdGhlIGN1cnJlbnRseSBhdHRhY2hlZCBwYW5lbCBpcyBtb3VudGVkIGRpcmVjdGx5IHRvIHRoZSBjb250ZW50IHRoZW4gcmVtb3ZlIGl0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlQ2hpbGQodGhpcy5wYW5lbC52aWV3LmNvbnRlbnQuZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wYW5lbCA9IHBhbmVsO1xuICAgICAgICBsZXQgY29udGFpbmVyO1xuICAgICAgICBzd2l0Y2ggKHBhbmVsLmFwaS5yZW5kZXJlcikge1xuICAgICAgICAgICAgY2FzZSAnb25seVdoZW5WaXNpYmxlJzpcbiAgICAgICAgICAgICAgICB0aGlzLmdyb3VwLnJlbmRlckNvbnRhaW5lci5kZXRhdGNoKHBhbmVsKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wYW5lbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZG9SZW5kZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5wYW5lbC52aWV3LmNvbnRlbnQuZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGFpbmVyID0gdGhpcy5fZWxlbWVudDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2Fsd2F5cyc6XG4gICAgICAgICAgICAgICAgaWYgKHBhbmVsLnZpZXcuY29udGVudC5lbGVtZW50LnBhcmVudEVsZW1lbnQgPT09IHRoaXMuX2VsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZWxlbWVudC5yZW1vdmVDaGlsZChwYW5lbC52aWV3LmNvbnRlbnQuZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IHRoaXMuZ3JvdXAucmVuZGVyQ29udGFpbmVyLmF0dGFjaCh7XG4gICAgICAgICAgICAgICAgICAgIHBhbmVsLFxuICAgICAgICAgICAgICAgICAgICByZWZlcmVuY2VDb250YWluZXI6IHRoaXMsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgZG9ja3ZpZXc6IGludmFsaWQgcmVuZGVyZXIgdHlwZSAnJHtwYW5lbC5hcGkucmVuZGVyZXJ9J2ApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkb1JlbmRlcikge1xuICAgICAgICAgICAgY29uc3QgZm9jdXNUcmFja2VyID0gdHJhY2tGb2N1cyhjb250YWluZXIpO1xuICAgICAgICAgICAgY29uc3QgZGlzcG9zYWJsZSA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKCk7XG4gICAgICAgICAgICBkaXNwb3NhYmxlLmFkZERpc3Bvc2FibGVzKGZvY3VzVHJhY2tlciwgZm9jdXNUcmFja2VyLm9uRGlkRm9jdXMoKCkgPT4gdGhpcy5fb25EaWRGb2N1cy5maXJlKCkpLCBmb2N1c1RyYWNrZXIub25EaWRCbHVyKCgpID0+IHRoaXMuX29uRGlkQmx1ci5maXJlKCkpKTtcbiAgICAgICAgICAgIHRoaXMuZGlzcG9zYWJsZS52YWx1ZSA9IGRpc3Bvc2FibGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgb3BlblBhbmVsKHBhbmVsKSB7XG4gICAgICAgIGlmICh0aGlzLnBhbmVsID09PSBwYW5lbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVuZGVyUGFuZWwocGFuZWwpO1xuICAgIH1cbiAgICBsYXlvdXQoX3dpZHRoLCBfaGVpZ2h0KSB7XG4gICAgICAgIC8vIG5vb3BcbiAgICB9XG4gICAgY2xvc2VQYW5lbCgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodGhpcy5wYW5lbCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucGFuZWwuYXBpLnJlbmRlcmVyID09PSAnb25seVdoZW5WaXNpYmxlJykge1xuICAgICAgICAgICAgICAgIChfYSA9IHRoaXMucGFuZWwudmlldy5jb250ZW50LmVsZW1lbnQucGFyZW50RWxlbWVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnJlbW92ZUNoaWxkKHRoaXMucGFuZWwudmlldy5jb250ZW50LmVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMucGFuZWwgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHRoaXMuZGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gICAgICAgIHN1cGVyLmRpc3Bvc2UoKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBDb21wb3NpdGVEaXNwb3NhYmxlIH0gZnJvbSAnLi4vLi4vLi4vbGlmZWN5Y2xlJztcbmltcG9ydCB7IGFkZERpc3Bvc2FibGVMaXN0ZW5lciB9IGZyb20gJy4uLy4uLy4uL2V2ZW50cyc7XG5pbXBvcnQgeyBjcmVhdGVDbG9zZUJ1dHRvbiB9IGZyb20gJy4uLy4uLy4uL3N2Zyc7XG5leHBvcnQgY2xhc3MgRGVmYXVsdFRhYiBleHRlbmRzIENvbXBvc2l0ZURpc3Bvc2FibGUge1xuICAgIGdldCBlbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZWxlbWVudDtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc05hbWUgPSAnZHYtZGVmYXVsdC10YWInO1xuICAgICAgICB0aGlzLl9jb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRoaXMuX2NvbnRlbnQuY2xhc3NOYW1lID0gJ2R2LWRlZmF1bHQtdGFiLWNvbnRlbnQnO1xuICAgICAgICB0aGlzLmFjdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0aGlzLmFjdGlvbi5jbGFzc05hbWUgPSAnZHYtZGVmYXVsdC10YWItYWN0aW9uJztcbiAgICAgICAgdGhpcy5hY3Rpb24uYXBwZW5kQ2hpbGQoY3JlYXRlQ2xvc2VCdXR0b24oKSk7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5fY29udGVudCk7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5hY3Rpb24pO1xuICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH1cbiAgICBpbml0KHBhcmFtcykge1xuICAgICAgICB0aGlzLl90aXRsZSA9IHBhcmFtcy50aXRsZTtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyhwYXJhbXMuYXBpLm9uRGlkVGl0bGVDaGFuZ2UoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl90aXRsZSA9IGV2ZW50LnRpdGxlO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICAgICAgfSksIGFkZERpc3Bvc2FibGVMaXN0ZW5lcih0aGlzLmFjdGlvbiwgJ3BvaW50ZXJkb3duJywgKGV2KSA9PiB7XG4gICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9KSwgYWRkRGlzcG9zYWJsZUxpc3RlbmVyKHRoaXMuYWN0aW9uLCAnY2xpY2snLCAoZXYpID0+IHtcbiAgICAgICAgICAgIGlmIChldi5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHBhcmFtcy5hcGkuY2xvc2UoKTtcbiAgICAgICAgfSkpO1xuICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRlbnQudGV4dENvbnRlbnQgIT09IHRoaXMuX3RpdGxlKSB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZW50LnRleHRDb250ZW50ID0gKF9hID0gdGhpcy5fdGl0bGUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcnO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgYWRkRGlzcG9zYWJsZUxpc3RlbmVyLCBFbWl0dGVyIH0gZnJvbSAnLi4vLi4vLi4vZXZlbnRzJztcbmltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUgfSBmcm9tICcuLi8uLi8uLi9saWZlY3ljbGUnO1xuaW1wb3J0IHsgZ2V0UGFuZWxEYXRhLCBMb2NhbFNlbGVjdGlvblRyYW5zZmVyLCBQYW5lbFRyYW5zZmVyLCB9IGZyb20gJy4uLy4uLy4uL2RuZC9kYXRhVHJhbnNmZXInO1xuaW1wb3J0IHsgdG9nZ2xlQ2xhc3MgfSBmcm9tICcuLi8uLi8uLi9kb20nO1xuaW1wb3J0IHsgRHJvcHRhcmdldCwgfSBmcm9tICcuLi8uLi8uLi9kbmQvZHJvcHRhcmdldCc7XG5pbXBvcnQgeyBEcmFnSGFuZGxlciB9IGZyb20gJy4uLy4uLy4uL2RuZC9hYnN0cmFjdERyYWdIYW5kbGVyJztcbmNsYXNzIFRhYkRyYWdIYW5kbGVyIGV4dGVuZHMgRHJhZ0hhbmRsZXIge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGFjY2Vzc29yLCBncm91cCwgcGFuZWwpIHtcbiAgICAgICAgc3VwZXIoZWxlbWVudCk7XG4gICAgICAgIHRoaXMuYWNjZXNzb3IgPSBhY2Nlc3NvcjtcbiAgICAgICAgdGhpcy5ncm91cCA9IGdyb3VwO1xuICAgICAgICB0aGlzLnBhbmVsID0gcGFuZWw7XG4gICAgICAgIHRoaXMucGFuZWxUcmFuc2ZlciA9IExvY2FsU2VsZWN0aW9uVHJhbnNmZXIuZ2V0SW5zdGFuY2UoKTtcbiAgICB9XG4gICAgZ2V0RGF0YShldmVudCkge1xuICAgICAgICB0aGlzLnBhbmVsVHJhbnNmZXIuc2V0RGF0YShbbmV3IFBhbmVsVHJhbnNmZXIodGhpcy5hY2Nlc3Nvci5pZCwgdGhpcy5ncm91cC5pZCwgdGhpcy5wYW5lbC5pZCldLCBQYW5lbFRyYW5zZmVyLnByb3RvdHlwZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkaXNwb3NlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5wYW5lbFRyYW5zZmVyLmNsZWFyRGF0YShQYW5lbFRyYW5zZmVyLnByb3RvdHlwZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBUYWIgZXh0ZW5kcyBDb21wb3NpdGVEaXNwb3NhYmxlIHtcbiAgICBnZXQgZWxlbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHBhbmVsLCBhY2Nlc3NvciwgZ3JvdXApIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5wYW5lbCA9IHBhbmVsO1xuICAgICAgICB0aGlzLmFjY2Vzc29yID0gYWNjZXNzb3I7XG4gICAgICAgIHRoaXMuZ3JvdXAgPSBncm91cDtcbiAgICAgICAgdGhpcy5jb250ZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9vblBvaW50RG93biA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25Qb2ludGVyRG93biA9IHRoaXMuX29uUG9pbnREb3duLmV2ZW50O1xuICAgICAgICB0aGlzLl9vbkRyb3BwZWQgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRHJvcCA9IHRoaXMuX29uRHJvcHBlZC5ldmVudDtcbiAgICAgICAgdGhpcy5fb25EcmFnU3RhcnQgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRHJhZ1N0YXJ0ID0gdGhpcy5fb25EcmFnU3RhcnQuZXZlbnQ7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc05hbWUgPSAnZHYtdGFiJztcbiAgICAgICAgdGhpcy5fZWxlbWVudC50YWJJbmRleCA9IDA7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuZHJhZ2dhYmxlID0gdHJ1ZTtcbiAgICAgICAgdG9nZ2xlQ2xhc3ModGhpcy5lbGVtZW50LCAnZHYtaW5hY3RpdmUtdGFiJywgdHJ1ZSk7XG4gICAgICAgIGNvbnN0IGRyYWdIYW5kbGVyID0gbmV3IFRhYkRyYWdIYW5kbGVyKHRoaXMuX2VsZW1lbnQsIHRoaXMuYWNjZXNzb3IsIHRoaXMuZ3JvdXAsIHRoaXMucGFuZWwpO1xuICAgICAgICB0aGlzLmRyb3BUYXJnZXQgPSBuZXcgRHJvcHRhcmdldCh0aGlzLl9lbGVtZW50LCB7XG4gICAgICAgICAgICBhY2NlcHRlZFRhcmdldFpvbmVzOiBbJ2NlbnRlciddLFxuICAgICAgICAgICAgY2FuRGlzcGxheU92ZXJsYXk6IChldmVudCwgcG9zaXRpb24pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5ncm91cC5sb2NrZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gZ2V0UGFuZWxEYXRhKCk7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEgJiYgdGhpcy5hY2Nlc3Nvci5pZCA9PT0gZGF0YS52aWV3SWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEucGFuZWxJZCA9PT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5ncm91cElkID09PSB0aGlzLmdyb3VwLmlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkb24ndCBhbGxvdyBncm91cCBtb3ZlIHRvIGRyb3Agb24gc2VsZlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhbmVsLmlkICE9PSBkYXRhLnBhbmVsSWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyb3VwLm1vZGVsLmNhbkRpc3BsYXlPdmVybGF5KGV2ZW50LCBwb3NpdGlvbiwgJ3RhYicpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMub25XaWxsU2hvd092ZXJsYXkgPSB0aGlzLmRyb3BUYXJnZXQub25XaWxsU2hvd092ZXJsYXk7XG4gICAgICAgIHRoaXMuYWRkRGlzcG9zYWJsZXModGhpcy5fb25Qb2ludERvd24sIHRoaXMuX29uRHJvcHBlZCwgdGhpcy5fb25EcmFnU3RhcnQsIGRyYWdIYW5kbGVyLm9uRHJhZ1N0YXJ0KChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25EcmFnU3RhcnQuZmlyZShldmVudCk7XG4gICAgICAgIH0pLCBkcmFnSGFuZGxlciwgYWRkRGlzcG9zYWJsZUxpc3RlbmVyKHRoaXMuX2VsZW1lbnQsICdwb2ludGVyZG93bicsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25Qb2ludERvd24uZmlyZShldmVudCk7XG4gICAgICAgIH0pLCB0aGlzLmRyb3BUYXJnZXQub25Ecm9wKChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25Ecm9wcGVkLmZpcmUoZXZlbnQpO1xuICAgICAgICB9KSwgdGhpcy5kcm9wVGFyZ2V0KTtcbiAgICB9XG4gICAgc2V0QWN0aXZlKGlzQWN0aXZlKSB7XG4gICAgICAgIHRvZ2dsZUNsYXNzKHRoaXMuZWxlbWVudCwgJ2R2LWFjdGl2ZS10YWInLCBpc0FjdGl2ZSk7XG4gICAgICAgIHRvZ2dsZUNsYXNzKHRoaXMuZWxlbWVudCwgJ2R2LWluYWN0aXZlLXRhYicsICFpc0FjdGl2ZSk7XG4gICAgfVxuICAgIHNldENvbnRlbnQocGFydCkge1xuICAgICAgICBpZiAodGhpcy5jb250ZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMuY29udGVudC5lbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbnRlbnQgPSBwYXJ0O1xuICAgICAgICB0aGlzLl9lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuY29udGVudC5lbGVtZW50KTtcbiAgICB9XG4gICAgZGlzcG9zZSgpIHtcbiAgICAgICAgc3VwZXIuZGlzcG9zZSgpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUsIH0gZnJvbSAnLi4vLi4vLi4vbGlmZWN5Y2xlJztcbmltcG9ydCB7IGFkZERpc3Bvc2FibGVMaXN0ZW5lciwgRW1pdHRlciB9IGZyb20gJy4uLy4uLy4uL2V2ZW50cyc7XG5pbXBvcnQgeyBUYWIgfSBmcm9tICcuLi90YWIvdGFiJztcbmltcG9ydCB7IFZvaWRDb250YWluZXIgfSBmcm9tICcuL3ZvaWRDb250YWluZXInO1xuaW1wb3J0IHsgdG9nZ2xlQ2xhc3MgfSBmcm9tICcuLi8uLi8uLi9kb20nO1xuaW1wb3J0IHsgV2lsbFNob3dPdmVybGF5TG9jYXRpb25FdmVudCB9IGZyb20gJy4uLy4uL2RvY2t2aWV3R3JvdXBQYW5lbE1vZGVsJztcbmltcG9ydCB7IGdldFBhbmVsRGF0YSB9IGZyb20gJy4uLy4uLy4uL2RuZC9kYXRhVHJhbnNmZXInO1xuZXhwb3J0IGNsYXNzIFRhYnNDb250YWluZXIgZXh0ZW5kcyBDb21wb3NpdGVEaXNwb3NhYmxlIHtcbiAgICBnZXQgcGFuZWxzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50YWJzLm1hcCgoXykgPT4gXy52YWx1ZS5wYW5lbC5pZCk7XG4gICAgfVxuICAgIGdldCBzaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50YWJzLmxlbmd0aDtcbiAgICB9XG4gICAgZ2V0IGhpZGRlbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hpZGRlbjtcbiAgICB9XG4gICAgc2V0IGhpZGRlbih2YWx1ZSkge1xuICAgICAgICB0aGlzLl9oaWRkZW4gPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/ICdub25lJyA6ICcnO1xuICAgIH1cbiAgICBzaG93KCkge1xuICAgICAgICBpZiAoIXRoaXMuaGlkZGVuKSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICcnO1xuICAgICAgICB9XG4gICAgfVxuICAgIGhpZGUoKSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICB9XG4gICAgc2V0UmlnaHRBY3Rpb25zRWxlbWVudChlbGVtZW50KSB7XG4gICAgICAgIGlmICh0aGlzLnJpZ2h0QWN0aW9ucyA9PT0gZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnJpZ2h0QWN0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5yaWdodEFjdGlvbnMucmVtb3ZlKCk7XG4gICAgICAgICAgICB0aGlzLnJpZ2h0QWN0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5yaWdodEFjdGlvbnNDb250YWluZXIuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgICAgICAgICB0aGlzLnJpZ2h0QWN0aW9ucyA9IGVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2V0TGVmdEFjdGlvbnNFbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgICAgaWYgKHRoaXMubGVmdEFjdGlvbnMgPT09IGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5sZWZ0QWN0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5sZWZ0QWN0aW9ucy5yZW1vdmUoKTtcbiAgICAgICAgICAgIHRoaXMubGVmdEFjdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMubGVmdEFjdGlvbnNDb250YWluZXIuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgICAgICAgICB0aGlzLmxlZnRBY3Rpb25zID0gZWxlbWVudDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXRQcmVmaXhBY3Rpb25zRWxlbWVudChlbGVtZW50KSB7XG4gICAgICAgIGlmICh0aGlzLnByZUFjdGlvbnMgPT09IGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5wcmVBY3Rpb25zKSB7XG4gICAgICAgICAgICB0aGlzLnByZUFjdGlvbnMucmVtb3ZlKCk7XG4gICAgICAgICAgICB0aGlzLnByZUFjdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMucHJlQWN0aW9uc0NvbnRhaW5lci5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgICAgICAgICAgIHRoaXMucHJlQWN0aW9ucyA9IGVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGVsZW1lbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbGVtZW50O1xuICAgIH1cbiAgICBpc0FjdGl2ZSh0YWIpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnNlbGVjdGVkSW5kZXggPiAtMSAmJlxuICAgICAgICAgICAgdGhpcy50YWJzW3RoaXMuc2VsZWN0ZWRJbmRleF0udmFsdWUgPT09IHRhYik7XG4gICAgfVxuICAgIGluZGV4T2YoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGFicy5maW5kSW5kZXgoKHRhYikgPT4gdGFiLnZhbHVlLnBhbmVsLmlkID09PSBpZCk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGFjY2Vzc29yLCBncm91cCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmFjY2Vzc29yID0gYWNjZXNzb3I7XG4gICAgICAgIHRoaXMuZ3JvdXAgPSBncm91cDtcbiAgICAgICAgdGhpcy50YWJzID0gW107XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRJbmRleCA9IC0xO1xuICAgICAgICB0aGlzLl9oaWRkZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fb25Ecm9wID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRyb3AgPSB0aGlzLl9vbkRyb3AuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uVGFiRHJhZ1N0YXJ0ID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vblRhYkRyYWdTdGFydCA9IHRoaXMuX29uVGFiRHJhZ1N0YXJ0LmV2ZW50O1xuICAgICAgICB0aGlzLl9vbkdyb3VwRHJhZ1N0YXJ0ID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkdyb3VwRHJhZ1N0YXJ0ID0gdGhpcy5fb25Hcm91cERyYWdTdGFydC5ldmVudDtcbiAgICAgICAgdGhpcy5fb25XaWxsU2hvd092ZXJsYXkgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uV2lsbFNob3dPdmVybGF5ID0gdGhpcy5fb25XaWxsU2hvd092ZXJsYXkuZXZlbnQ7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc05hbWUgPSAnZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXInO1xuICAgICAgICB0b2dnbGVDbGFzcyh0aGlzLl9lbGVtZW50LCAnZHYtZnVsbC13aWR0aC1zaW5nbGUtdGFiJywgdGhpcy5hY2Nlc3Nvci5vcHRpb25zLnNpbmdsZVRhYk1vZGUgPT09ICdmdWxsd2lkdGgnKTtcbiAgICAgICAgdGhpcy5yaWdodEFjdGlvbnNDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy5yaWdodEFjdGlvbnNDb250YWluZXIuY2xhc3NOYW1lID0gJ2R2LXJpZ2h0LWFjdGlvbnMtY29udGFpbmVyJztcbiAgICAgICAgdGhpcy5sZWZ0QWN0aW9uc0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0aGlzLmxlZnRBY3Rpb25zQ29udGFpbmVyLmNsYXNzTmFtZSA9ICdkdi1sZWZ0LWFjdGlvbnMtY29udGFpbmVyJztcbiAgICAgICAgdGhpcy5wcmVBY3Rpb25zQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRoaXMucHJlQWN0aW9uc0NvbnRhaW5lci5jbGFzc05hbWUgPSAnZHYtcHJlLWFjdGlvbnMtY29udGFpbmVyJztcbiAgICAgICAgdGhpcy50YWJDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy50YWJDb250YWluZXIuY2xhc3NOYW1lID0gJ2R2LXRhYnMtY29udGFpbmVyJztcbiAgICAgICAgdGhpcy52b2lkQ29udGFpbmVyID0gbmV3IFZvaWRDb250YWluZXIodGhpcy5hY2Nlc3NvciwgdGhpcy5ncm91cCk7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5wcmVBY3Rpb25zQ29udGFpbmVyKTtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLnRhYkNvbnRhaW5lcik7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5sZWZ0QWN0aW9uc0NvbnRhaW5lcik7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy52b2lkQ29udGFpbmVyLmVsZW1lbnQpO1xuICAgICAgICB0aGlzLl9lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMucmlnaHRBY3Rpb25zQ29udGFpbmVyKTtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyh0aGlzLl9vbldpbGxTaG93T3ZlcmxheSwgdGhpcy5fb25Ecm9wLCB0aGlzLl9vblRhYkRyYWdTdGFydCwgdGhpcy5fb25Hcm91cERyYWdTdGFydCwgdGhpcy52b2lkQ29udGFpbmVyLCB0aGlzLnZvaWRDb250YWluZXIub25EcmFnU3RhcnQoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9vbkdyb3VwRHJhZ1N0YXJ0LmZpcmUoe1xuICAgICAgICAgICAgICAgIG5hdGl2ZUV2ZW50OiBldmVudCxcbiAgICAgICAgICAgICAgICBncm91cDogdGhpcy5ncm91cCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KSwgdGhpcy52b2lkQ29udGFpbmVyLm9uRHJvcCgoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX29uRHJvcC5maXJlKHtcbiAgICAgICAgICAgICAgICBldmVudDogZXZlbnQubmF0aXZlRXZlbnQsXG4gICAgICAgICAgICAgICAgaW5kZXg6IHRoaXMudGFicy5sZW5ndGgsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSksIHRoaXMudm9pZENvbnRhaW5lci5vbldpbGxTaG93T3ZlcmxheSgoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX29uV2lsbFNob3dPdmVybGF5LmZpcmUobmV3IFdpbGxTaG93T3ZlcmxheUxvY2F0aW9uRXZlbnQoZXZlbnQsIHtcbiAgICAgICAgICAgICAgICBraW5kOiAnaGVhZGVyX3NwYWNlJyxcbiAgICAgICAgICAgICAgICBwYW5lbDogdGhpcy5ncm91cC5hY3RpdmVQYW5lbCxcbiAgICAgICAgICAgICAgICBhcGk6IHRoaXMuYWNjZXNzb3IuYXBpLFxuICAgICAgICAgICAgICAgIGdyb3VwOiB0aGlzLmdyb3VwLFxuICAgICAgICAgICAgICAgIGdldERhdGE6IGdldFBhbmVsRGF0YSxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSksIGFkZERpc3Bvc2FibGVMaXN0ZW5lcih0aGlzLnZvaWRDb250YWluZXIuZWxlbWVudCwgJ3BvaW50ZXJkb3duJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpc0Zsb2F0aW5nR3JvdXBzRW5hYmxlZCA9ICF0aGlzLmFjY2Vzc29yLm9wdGlvbnMuZGlzYWJsZUZsb2F0aW5nR3JvdXBzO1xuICAgICAgICAgICAgaWYgKGlzRmxvYXRpbmdHcm91cHNFbmFibGVkICYmXG4gICAgICAgICAgICAgICAgZXZlbnQuc2hpZnRLZXkgJiZcbiAgICAgICAgICAgICAgICB0aGlzLmdyb3VwLmFwaS5sb2NhdGlvbi50eXBlICE9PSAnZmxvYXRpbmcnKSB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHRvcCwgbGVmdCB9ID0gdGhpcy5lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgdG9wOiByb290VG9wLCBsZWZ0OiByb290TGVmdCB9ID0gdGhpcy5hY2Nlc3Nvci5lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuYWNjZXNzb3IuYWRkRmxvYXRpbmdHcm91cCh0aGlzLmdyb3VwLCB7XG4gICAgICAgICAgICAgICAgICAgIHg6IGxlZnQgLSByb290TGVmdCArIDIwLFxuICAgICAgICAgICAgICAgICAgICB5OiB0b3AgLSByb290VG9wICsgMjAsXG4gICAgICAgICAgICAgICAgICAgIGluRHJhZ01vZGU6IHRydWUsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLCBhZGREaXNwb3NhYmxlTGlzdGVuZXIodGhpcy50YWJDb250YWluZXIsICdwb2ludGVyZG93bicsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBpc0xlZnRDbGljayA9IGV2ZW50LmJ1dHRvbiA9PT0gMDtcbiAgICAgICAgICAgIGlmIChpc0xlZnRDbGljaykge1xuICAgICAgICAgICAgICAgIHRoaXMuYWNjZXNzb3IuZG9TZXRHcm91cEFjdGl2ZSh0aGlzLmdyb3VwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBzZXRBY3RpdmUoX2lzR3JvdXBBY3RpdmUpIHtcbiAgICAgICAgLy8gbm9vcFxuICAgIH1cbiAgICBkZWxldGUoaWQpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLnRhYnMuZmluZEluZGV4KCh0YWIpID0+IHRhYi52YWx1ZS5wYW5lbC5pZCA9PT0gaWQpO1xuICAgICAgICBjb25zdCB0YWJUb1JlbW92ZSA9IHRoaXMudGFicy5zcGxpY2UoaW5kZXgsIDEpWzBdO1xuICAgICAgICBpZiAoIXRhYlRvUmVtb3ZlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGRvY2t2aWV3OiBUYWIgbm90IGZvdW5kYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyB2YWx1ZSwgZGlzcG9zYWJsZSB9ID0gdGFiVG9SZW1vdmU7XG4gICAgICAgIGRpc3Bvc2FibGUuZGlzcG9zZSgpO1xuICAgICAgICB2YWx1ZS5kaXNwb3NlKCk7XG4gICAgICAgIHZhbHVlLmVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgIHRoaXMudXBkYXRlQ2xhc3NuYW1lcygpO1xuICAgIH1cbiAgICBzZXRBY3RpdmVQYW5lbChwYW5lbCkge1xuICAgICAgICB0aGlzLnRhYnMuZm9yRWFjaCgodGFiKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpc0FjdGl2ZVBhbmVsID0gcGFuZWwuaWQgPT09IHRhYi52YWx1ZS5wYW5lbC5pZDtcbiAgICAgICAgICAgIHRhYi52YWx1ZS5zZXRBY3RpdmUoaXNBY3RpdmVQYW5lbCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBvcGVuUGFuZWwocGFuZWwsIGluZGV4ID0gdGhpcy50YWJzLmxlbmd0aCkge1xuICAgICAgICBpZiAodGhpcy50YWJzLmZpbmQoKHRhYikgPT4gdGFiLnZhbHVlLnBhbmVsLmlkID09PSBwYW5lbC5pZCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0YWIgPSBuZXcgVGFiKHBhbmVsLCB0aGlzLmFjY2Vzc29yLCB0aGlzLmdyb3VwKTtcbiAgICAgICAgdGFiLnNldENvbnRlbnQocGFuZWwudmlldy50YWIpO1xuICAgICAgICBjb25zdCBkaXNwb3NhYmxlID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUodGFiLm9uRHJhZ1N0YXJ0KChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25UYWJEcmFnU3RhcnQuZmlyZSh7IG5hdGl2ZUV2ZW50OiBldmVudCwgcGFuZWwgfSk7XG4gICAgICAgIH0pLCB0YWIub25Qb2ludGVyRG93bigoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaXNGbG9hdGluZ0dyb3Vwc0VuYWJsZWQgPSAhdGhpcy5hY2Nlc3Nvci5vcHRpb25zLmRpc2FibGVGbG9hdGluZ0dyb3VwcztcbiAgICAgICAgICAgIGNvbnN0IGlzRmxvYXRpbmdXaXRoT25lUGFuZWwgPSB0aGlzLmdyb3VwLmFwaS5sb2NhdGlvbi50eXBlID09PSAnZmxvYXRpbmcnICYmXG4gICAgICAgICAgICAgICAgdGhpcy5zaXplID09PSAxO1xuICAgICAgICAgICAgaWYgKGlzRmxvYXRpbmdHcm91cHNFbmFibGVkICYmXG4gICAgICAgICAgICAgICAgIWlzRmxvYXRpbmdXaXRoT25lUGFuZWwgJiZcbiAgICAgICAgICAgICAgICBldmVudC5zaGlmdEtleSkge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFuZWwgPSB0aGlzLmFjY2Vzc29yLmdldEdyb3VwUGFuZWwodGFiLnBhbmVsLmlkKTtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHRvcCwgbGVmdCB9ID0gdGFiLmVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgeyB0b3A6IHJvb3RUb3AsIGxlZnQ6IHJvb3RMZWZ0IH0gPSB0aGlzLmFjY2Vzc29yLmVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5hY2Nlc3Nvci5hZGRGbG9hdGluZ0dyb3VwKHBhbmVsLCB7XG4gICAgICAgICAgICAgICAgICAgIHg6IGxlZnQgLSByb290TGVmdCxcbiAgICAgICAgICAgICAgICAgICAgeTogdG9wIC0gcm9vdFRvcCxcbiAgICAgICAgICAgICAgICAgICAgaW5EcmFnTW9kZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2l0Y2ggKGV2ZW50LmJ1dHRvbikge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogLy8gbGVmdCBjbGljayBvciB0b3VjaFxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5ncm91cC5hY3RpdmVQYW5lbCAhPT0gcGFuZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ3JvdXAubW9kZWwub3BlblBhbmVsKHBhbmVsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksIHRhYi5vbkRyb3AoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9vbkRyb3AuZmlyZSh7XG4gICAgICAgICAgICAgICAgZXZlbnQ6IGV2ZW50Lm5hdGl2ZUV2ZW50LFxuICAgICAgICAgICAgICAgIGluZGV4OiB0aGlzLnRhYnMuZmluZEluZGV4KCh4KSA9PiB4LnZhbHVlID09PSB0YWIpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pLCB0YWIub25XaWxsU2hvd092ZXJsYXkoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9vbldpbGxTaG93T3ZlcmxheS5maXJlKG5ldyBXaWxsU2hvd092ZXJsYXlMb2NhdGlvbkV2ZW50KGV2ZW50LCB7XG4gICAgICAgICAgICAgICAga2luZDogJ3RhYicsXG4gICAgICAgICAgICAgICAgcGFuZWw6IHRoaXMuZ3JvdXAuYWN0aXZlUGFuZWwsXG4gICAgICAgICAgICAgICAgYXBpOiB0aGlzLmFjY2Vzc29yLmFwaSxcbiAgICAgICAgICAgICAgICBncm91cDogdGhpcy5ncm91cCxcbiAgICAgICAgICAgICAgICBnZXREYXRhOiBnZXRQYW5lbERhdGEsXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB7IHZhbHVlOiB0YWIsIGRpc3Bvc2FibGUgfTtcbiAgICAgICAgdGhpcy5hZGRUYWIodmFsdWUsIGluZGV4KTtcbiAgICB9XG4gICAgY2xvc2VQYW5lbChwYW5lbCkge1xuICAgICAgICB0aGlzLmRlbGV0ZShwYW5lbC5pZCk7XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHN1cGVyLmRpc3Bvc2UoKTtcbiAgICAgICAgZm9yIChjb25zdCB7IHZhbHVlLCBkaXNwb3NhYmxlIH0gb2YgdGhpcy50YWJzKSB7XG4gICAgICAgICAgICBkaXNwb3NhYmxlLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIHZhbHVlLmRpc3Bvc2UoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRhYnMgPSBbXTtcbiAgICB9XG4gICAgYWRkVGFiKHRhYiwgaW5kZXggPSB0aGlzLnRhYnMubGVuZ3RoKSB7XG4gICAgICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPiB0aGlzLnRhYnMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgbG9jYXRpb24nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRhYkNvbnRhaW5lci5pbnNlcnRCZWZvcmUodGFiLnZhbHVlLmVsZW1lbnQsIHRoaXMudGFiQ29udGFpbmVyLmNoaWxkcmVuW2luZGV4XSk7XG4gICAgICAgIHRoaXMudGFicyA9IFtcbiAgICAgICAgICAgIC4uLnRoaXMudGFicy5zbGljZSgwLCBpbmRleCksXG4gICAgICAgICAgICB0YWIsXG4gICAgICAgICAgICAuLi50aGlzLnRhYnMuc2xpY2UoaW5kZXgpLFxuICAgICAgICBdO1xuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZEluZGV4IDwgMCkge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEluZGV4ID0gaW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51cGRhdGVDbGFzc25hbWVzKCk7XG4gICAgfVxuICAgIHVwZGF0ZUNsYXNzbmFtZXMoKSB7XG4gICAgICAgIHRvZ2dsZUNsYXNzKHRoaXMuX2VsZW1lbnQsICdkdi1zaW5nbGUtdGFiJywgdGhpcy5zaXplID09PSAxKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBsYXN0IH0gZnJvbSAnLi4vLi4vLi4vYXJyYXknO1xuaW1wb3J0IHsgZ2V0UGFuZWxEYXRhIH0gZnJvbSAnLi4vLi4vLi4vZG5kL2RhdGFUcmFuc2Zlcic7XG5pbXBvcnQgeyBEcm9wdGFyZ2V0LCB9IGZyb20gJy4uLy4uLy4uL2RuZC9kcm9wdGFyZ2V0JztcbmltcG9ydCB7IEdyb3VwRHJhZ0hhbmRsZXIgfSBmcm9tICcuLi8uLi8uLi9kbmQvZ3JvdXBEcmFnSGFuZGxlcic7XG5pbXBvcnQgeyBhZGREaXNwb3NhYmxlTGlzdGVuZXIsIEVtaXR0ZXIgfSBmcm9tICcuLi8uLi8uLi9ldmVudHMnO1xuaW1wb3J0IHsgQ29tcG9zaXRlRGlzcG9zYWJsZSB9IGZyb20gJy4uLy4uLy4uL2xpZmVjeWNsZSc7XG5leHBvcnQgY2xhc3MgVm9pZENvbnRhaW5lciBleHRlbmRzIENvbXBvc2l0ZURpc3Bvc2FibGUge1xuICAgIGdldCBlbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZWxlbWVudDtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoYWNjZXNzb3IsIGdyb3VwKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuYWNjZXNzb3IgPSBhY2Nlc3NvcjtcbiAgICAgICAgdGhpcy5ncm91cCA9IGdyb3VwO1xuICAgICAgICB0aGlzLl9vbkRyb3AgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRHJvcCA9IHRoaXMuX29uRHJvcC5ldmVudDtcbiAgICAgICAgdGhpcy5fb25EcmFnU3RhcnQgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRHJhZ1N0YXJ0ID0gdGhpcy5fb25EcmFnU3RhcnQuZXZlbnQ7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc05hbWUgPSAnZHYtdm9pZC1jb250YWluZXInO1xuICAgICAgICB0aGlzLl9lbGVtZW50LmRyYWdnYWJsZSA9IHRydWU7XG4gICAgICAgIHRoaXMuYWRkRGlzcG9zYWJsZXModGhpcy5fb25Ecm9wLCB0aGlzLl9vbkRyYWdTdGFydCwgYWRkRGlzcG9zYWJsZUxpc3RlbmVyKHRoaXMuX2VsZW1lbnQsICdwb2ludGVyZG93bicsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYWNjZXNzb3IuZG9TZXRHcm91cEFjdGl2ZSh0aGlzLmdyb3VwKTtcbiAgICAgICAgfSkpO1xuICAgICAgICBjb25zdCBoYW5kbGVyID0gbmV3IEdyb3VwRHJhZ0hhbmRsZXIodGhpcy5fZWxlbWVudCwgYWNjZXNzb3IsIGdyb3VwKTtcbiAgICAgICAgdGhpcy5kcm9wVHJhZ2V0ID0gbmV3IERyb3B0YXJnZXQodGhpcy5fZWxlbWVudCwge1xuICAgICAgICAgICAgYWNjZXB0ZWRUYXJnZXRab25lczogWydjZW50ZXInXSxcbiAgICAgICAgICAgIGNhbkRpc3BsYXlPdmVybGF5OiAoZXZlbnQsIHBvc2l0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBnZXRQYW5lbERhdGEoKTtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YSAmJiB0aGlzLmFjY2Vzc29yLmlkID09PSBkYXRhLnZpZXdJZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5wYW5lbElkID09PSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmdyb3VwSWQgPT09IHRoaXMuZ3JvdXAuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRvbid0IGFsbG93IGdyb3VwIG1vdmUgdG8gZHJvcCBvbiBzZWxmXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gZG9uJ3Qgc2hvdyB0aGUgb3ZlcmxheSBpZiB0aGUgdGFiIGJlaW5nIGRyYWdnZWQgaXMgdGhlIGxhc3QgcGFuZWwgb2YgdGhpcyBncm91cFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKChfYSA9IGxhc3QodGhpcy5ncm91cC5wYW5lbHMpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaWQpICE9PSBkYXRhLnBhbmVsSWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBncm91cC5tb2RlbC5jYW5EaXNwbGF5T3ZlcmxheShldmVudCwgcG9zaXRpb24sICdoZWFkZXJfc3BhY2UnKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm9uV2lsbFNob3dPdmVybGF5ID0gdGhpcy5kcm9wVHJhZ2V0Lm9uV2lsbFNob3dPdmVybGF5O1xuICAgICAgICB0aGlzLmFkZERpc3Bvc2FibGVzKGhhbmRsZXIsIGhhbmRsZXIub25EcmFnU3RhcnQoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9vbkRyYWdTdGFydC5maXJlKGV2ZW50KTtcbiAgICAgICAgfSksIHRoaXMuZHJvcFRyYWdldC5vbkRyb3AoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9vbkRyb3AuZmlyZShldmVudCk7XG4gICAgICAgIH0pLCB0aGlzLmRyb3BUcmFnZXQpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUgfSBmcm9tICcuLi8uLi8uLi9saWZlY3ljbGUnO1xuZXhwb3J0IGNsYXNzIFdhdGVybWFyayBleHRlbmRzIENvbXBvc2l0ZURpc3Bvc2FibGUge1xuICAgIGdldCBlbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZWxlbWVudDtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc05hbWUgPSAnZHYtd2F0ZXJtYXJrJztcbiAgICB9XG4gICAgaW5pdChfcGFyYW1zKSB7XG4gICAgICAgIC8vIG5vb3BcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBEb2Nrdmlld1BhbmVsIH0gZnJvbSAnLi9kb2Nrdmlld1BhbmVsJztcbmltcG9ydCB7IERvY2t2aWV3UGFuZWxNb2RlbCB9IGZyb20gJy4vZG9ja3ZpZXdQYW5lbE1vZGVsJztcbmltcG9ydCB7IERvY2t2aWV3QXBpIH0gZnJvbSAnLi4vYXBpL2NvbXBvbmVudC5hcGknO1xuZXhwb3J0IGNsYXNzIERlZmF1bHREb2Nrdmlld0Rlc2VyaWFsemllciB7XG4gICAgY29uc3RydWN0b3IoYWNjZXNzb3IpIHtcbiAgICAgICAgdGhpcy5hY2Nlc3NvciA9IGFjY2Vzc29yO1xuICAgIH1cbiAgICBmcm9tSlNPTihwYW5lbERhdGEsIGdyb3VwKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGNvbnN0IHBhbmVsSWQgPSBwYW5lbERhdGEuaWQ7XG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IHBhbmVsRGF0YS5wYXJhbXM7XG4gICAgICAgIGNvbnN0IHRpdGxlID0gcGFuZWxEYXRhLnRpdGxlO1xuICAgICAgICBjb25zdCB2aWV3RGF0YSA9IHBhbmVsRGF0YS52aWV3O1xuICAgICAgICBjb25zdCBjb250ZW50Q29tcG9uZW50ID0gdmlld0RhdGFcbiAgICAgICAgICAgID8gdmlld0RhdGEuY29udGVudC5pZFxuICAgICAgICAgICAgOiAoX2EgPSBwYW5lbERhdGEuY29udGVudENvbXBvbmVudCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJ3Vua25vd24nO1xuICAgICAgICBjb25zdCB0YWJDb21wb25lbnQgPSB2aWV3RGF0YVxuICAgICAgICAgICAgPyAoX2IgPSB2aWV3RGF0YS50YWIpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5pZFxuICAgICAgICAgICAgOiBwYW5lbERhdGEudGFiQ29tcG9uZW50O1xuICAgICAgICBjb25zdCB2aWV3ID0gbmV3IERvY2t2aWV3UGFuZWxNb2RlbCh0aGlzLmFjY2Vzc29yLCBwYW5lbElkLCBjb250ZW50Q29tcG9uZW50LCB0YWJDb21wb25lbnQpO1xuICAgICAgICBjb25zdCBwYW5lbCA9IG5ldyBEb2Nrdmlld1BhbmVsKHBhbmVsSWQsIGNvbnRlbnRDb21wb25lbnQsIHRhYkNvbXBvbmVudCwgdGhpcy5hY2Nlc3NvciwgbmV3IERvY2t2aWV3QXBpKHRoaXMuYWNjZXNzb3IpLCBncm91cCwgdmlldywge1xuICAgICAgICAgICAgcmVuZGVyZXI6IHBhbmVsRGF0YS5yZW5kZXJlcixcbiAgICAgICAgICAgIG1pbmltdW1XaWR0aDogcGFuZWxEYXRhLm1pbmltdW1XaWR0aCxcbiAgICAgICAgICAgIG1pbmltdW1IZWlnaHQ6IHBhbmVsRGF0YS5taW5pbXVtSGVpZ2h0LFxuICAgICAgICAgICAgbWF4aW11bVdpZHRoOiBwYW5lbERhdGEubWF4aW11bVdpZHRoLFxuICAgICAgICAgICAgbWF4aW11bUhlaWdodDogcGFuZWxEYXRhLm1heGltdW1IZWlnaHQsXG4gICAgICAgIH0pO1xuICAgICAgICBwYW5lbC5pbml0KHtcbiAgICAgICAgICAgIHRpdGxlOiB0aXRsZSAhPT0gbnVsbCAmJiB0aXRsZSAhPT0gdm9pZCAwID8gdGl0bGUgOiBwYW5lbElkLFxuICAgICAgICAgICAgcGFyYW1zOiBwYXJhbXMgIT09IG51bGwgJiYgcGFyYW1zICE9PSB2b2lkIDAgPyBwYXJhbXMgOiB7fSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwYW5lbDtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBnZXRSZWxhdGl2ZUxvY2F0aW9uLCBnZXRHcmlkTG9jYXRpb24sIG9ydGhvZ29uYWwsIH0gZnJvbSAnLi4vZ3JpZHZpZXcvZ3JpZHZpZXcnO1xuaW1wb3J0IHsgZGlyZWN0aW9uVG9Qb3NpdGlvbiwgRHJvcHRhcmdldCwgfSBmcm9tICcuLi9kbmQvZHJvcHRhcmdldCc7XG5pbXBvcnQgeyB0YWlsLCBzZXF1ZW5jZUVxdWFscywgcmVtb3ZlIH0gZnJvbSAnLi4vYXJyYXknO1xuaW1wb3J0IHsgRG9ja3ZpZXdQYW5lbCB9IGZyb20gJy4vZG9ja3ZpZXdQYW5lbCc7XG5pbXBvcnQgeyBDb21wb3NpdGVEaXNwb3NhYmxlLCBEaXNwb3NhYmxlIH0gZnJvbSAnLi4vbGlmZWN5Y2xlJztcbmltcG9ydCB7IEV2ZW50LCBFbWl0dGVyLCBhZGREaXNwb3NhYmxlV2luZG93TGlzdGVuZXIgfSBmcm9tICcuLi9ldmVudHMnO1xuaW1wb3J0IHsgV2F0ZXJtYXJrIH0gZnJvbSAnLi9jb21wb25lbnRzL3dhdGVybWFyay93YXRlcm1hcmsnO1xuaW1wb3J0IHsgc2VxdWVudGlhbE51bWJlckdlbmVyYXRvciB9IGZyb20gJy4uL21hdGgnO1xuaW1wb3J0IHsgRGVmYXVsdERvY2t2aWV3RGVzZXJpYWx6aWVyIH0gZnJvbSAnLi9kZXNlcmlhbGl6ZXInO1xuaW1wb3J0IHsgRG9ja3ZpZXdVbmhhbmRsZWREcmFnT3ZlckV2ZW50LCBpc0dyb3VwT3B0aW9uc1dpdGhHcm91cCwgaXNHcm91cE9wdGlvbnNXaXRoUGFuZWwsIGlzUGFuZWxPcHRpb25zV2l0aEdyb3VwLCBpc1BhbmVsT3B0aW9uc1dpdGhQYW5lbCwgfSBmcm9tICcuL29wdGlvbnMnO1xuaW1wb3J0IHsgQmFzZUdyaWQsIHRvVGFyZ2V0LCB9IGZyb20gJy4uL2dyaWR2aWV3L2Jhc2VDb21wb25lbnRHcmlkdmlldyc7XG5pbXBvcnQgeyBEb2Nrdmlld0FwaSB9IGZyb20gJy4uL2FwaS9jb21wb25lbnQuYXBpJztcbmltcG9ydCB7IE9yaWVudGF0aW9uIH0gZnJvbSAnLi4vc3BsaXR2aWV3L3NwbGl0dmlldyc7XG5pbXBvcnQgeyBEb2Nrdmlld0RpZERyb3BFdmVudCwgRG9ja3ZpZXdXaWxsRHJvcEV2ZW50LCBXaWxsU2hvd092ZXJsYXlMb2NhdGlvbkV2ZW50LCB9IGZyb20gJy4vZG9ja3ZpZXdHcm91cFBhbmVsTW9kZWwnO1xuaW1wb3J0IHsgRG9ja3ZpZXdHcm91cFBhbmVsIH0gZnJvbSAnLi9kb2Nrdmlld0dyb3VwUGFuZWwnO1xuaW1wb3J0IHsgRG9ja3ZpZXdQYW5lbE1vZGVsIH0gZnJvbSAnLi9kb2Nrdmlld1BhbmVsTW9kZWwnO1xuaW1wb3J0IHsgZ2V0UGFuZWxEYXRhIH0gZnJvbSAnLi4vZG5kL2RhdGFUcmFuc2Zlcic7XG5pbXBvcnQgeyBPdmVybGF5IH0gZnJvbSAnLi4vb3ZlcmxheS9vdmVybGF5JztcbmltcG9ydCB7IGFkZFRlc3RJZCwgZ2V0RG9ja3ZpZXdUaGVtZSwgdG9nZ2xlQ2xhc3MsIHdhdGNoRWxlbWVudFJlc2l6ZSwgfSBmcm9tICcuLi9kb20nO1xuaW1wb3J0IHsgRG9ja3ZpZXdGbG9hdGluZ0dyb3VwUGFuZWwgfSBmcm9tICcuL2RvY2t2aWV3RmxvYXRpbmdHcm91cFBhbmVsJztcbmltcG9ydCB7IERFRkFVTFRfRkxPQVRJTkdfR1JPVVBfT1ZFUkZMT1dfU0laRSwgREVGQVVMVF9GTE9BVElOR19HUk9VUF9QT1NJVElPTiwgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgT3ZlcmxheVJlbmRlckNvbnRhaW5lciwgfSBmcm9tICcuLi9vdmVybGF5L292ZXJsYXlSZW5kZXJDb250YWluZXInO1xuaW1wb3J0IHsgUG9wb3V0V2luZG93IH0gZnJvbSAnLi4vcG9wb3V0V2luZG93JztcbmltcG9ydCB7IFN0cmljdEV2ZW50c1NlcXVlbmNpbmcgfSBmcm9tICcuL3N0cmljdEV2ZW50c1NlcXVlbmNpbmcnO1xuY29uc3QgREVGQVVMVF9ST09UX09WRVJMQVlfTU9ERUwgPSB7XG4gICAgYWN0aXZhdGlvblNpemU6IHsgdHlwZTogJ3BpeGVscycsIHZhbHVlOiAxMCB9LFxuICAgIHNpemU6IHsgdHlwZTogJ3BpeGVscycsIHZhbHVlOiAyMCB9LFxufTtcbmZ1bmN0aW9uIG1vdmVHcm91cFdpdGhvdXREZXN0cm95aW5nKG9wdGlvbnMpIHtcbiAgICBjb25zdCBhY3RpdmVQYW5lbCA9IG9wdGlvbnMuZnJvbS5hY3RpdmVQYW5lbDtcbiAgICBjb25zdCBwYW5lbHMgPSBbLi4ub3B0aW9ucy5mcm9tLnBhbmVsc10ubWFwKChwYW5lbCkgPT4ge1xuICAgICAgICBjb25zdCByZW1vdmVkUGFuZWwgPSBvcHRpb25zLmZyb20ubW9kZWwucmVtb3ZlUGFuZWwocGFuZWwpO1xuICAgICAgICBvcHRpb25zLmZyb20ubW9kZWwucmVuZGVyQ29udGFpbmVyLmRldGF0Y2gocGFuZWwpO1xuICAgICAgICByZXR1cm4gcmVtb3ZlZFBhbmVsO1xuICAgIH0pO1xuICAgIHBhbmVscy5mb3JFYWNoKChwYW5lbCkgPT4ge1xuICAgICAgICBvcHRpb25zLnRvLm1vZGVsLm9wZW5QYW5lbChwYW5lbCwge1xuICAgICAgICAgICAgc2tpcFNldEFjdGl2ZTogYWN0aXZlUGFuZWwgIT09IHBhbmVsLFxuICAgICAgICAgICAgc2tpcFNldEdyb3VwQWN0aXZlOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmV4cG9ydCBjbGFzcyBEb2Nrdmlld0NvbXBvbmVudCBleHRlbmRzIEJhc2VHcmlkIHtcbiAgICBnZXQgb3JpZW50YXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyaWR2aWV3Lm9yaWVudGF0aW9uO1xuICAgIH1cbiAgICBnZXQgdG90YWxQYW5lbHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhbmVscy5sZW5ndGg7XG4gICAgfVxuICAgIGdldCBwYW5lbHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyb3Vwcy5mbGF0TWFwKChncm91cCkgPT4gZ3JvdXAucGFuZWxzKTtcbiAgICB9XG4gICAgZ2V0IG9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vcHRpb25zO1xuICAgIH1cbiAgICBnZXQgYWN0aXZlUGFuZWwoKSB7XG4gICAgICAgIGNvbnN0IGFjdGl2ZUdyb3VwID0gdGhpcy5hY3RpdmVHcm91cDtcbiAgICAgICAgaWYgKCFhY3RpdmVHcm91cCkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWN0aXZlR3JvdXAuYWN0aXZlUGFuZWw7XG4gICAgfVxuICAgIGdldCByZW5kZXJlcigpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5vcHRpb25zLmRlZmF1bHRSZW5kZXJlcikgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJ29ubHlXaGVuVmlzaWJsZSc7XG4gICAgfVxuICAgIGdldCBhcGkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcGk7XG4gICAgfVxuICAgIGdldCBnYXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyaWR2aWV3Lm1hcmdpbjtcbiAgICB9XG4gICAgZ2V0IGZsb2F0aW5nR3JvdXBzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZmxvYXRpbmdHcm91cHM7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lciwgb3B0aW9ucykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHN1cGVyKGNvbnRhaW5lciwge1xuICAgICAgICAgICAgcHJvcG9ydGlvbmFsTGF5b3V0OiB0cnVlLFxuICAgICAgICAgICAgb3JpZW50YXRpb246IE9yaWVudGF0aW9uLkhPUklaT05UQUwsXG4gICAgICAgICAgICBzdHlsZXM6IG9wdGlvbnMuaGlkZUJvcmRlcnNcbiAgICAgICAgICAgICAgICA/IHsgc2VwYXJhdG9yQm9yZGVyOiAndHJhbnNwYXJlbnQnIH1cbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGRpc2FibGVBdXRvUmVzaXppbmc6IG9wdGlvbnMuZGlzYWJsZUF1dG9SZXNpemluZyxcbiAgICAgICAgICAgIGxvY2tlZDogb3B0aW9ucy5sb2NrZWQsXG4gICAgICAgICAgICBtYXJnaW46IG9wdGlvbnMuZ2FwLFxuICAgICAgICAgICAgY2xhc3NOYW1lOiBvcHRpb25zLmNsYXNzTmFtZSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmV4dEdyb3VwSWQgPSBzZXF1ZW50aWFsTnVtYmVyR2VuZXJhdG9yKCk7XG4gICAgICAgIHRoaXMuX2Rlc2VyaWFsaXplciA9IG5ldyBEZWZhdWx0RG9ja3ZpZXdEZXNlcmlhbHppZXIodGhpcyk7XG4gICAgICAgIHRoaXMud2F0ZXJtYXJrID0gbnVsbDtcbiAgICAgICAgdGhpcy5fb25XaWxsRHJhZ1BhbmVsID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbldpbGxEcmFnUGFuZWwgPSB0aGlzLl9vbldpbGxEcmFnUGFuZWwuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uV2lsbERyYWdHcm91cCA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25XaWxsRHJhZ0dyb3VwID0gdGhpcy5fb25XaWxsRHJhZ0dyb3VwLmV2ZW50O1xuICAgICAgICB0aGlzLl9vbkRpZERyb3AgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRGlkRHJvcCA9IHRoaXMuX29uRGlkRHJvcC5ldmVudDtcbiAgICAgICAgdGhpcy5fb25XaWxsRHJvcCA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25XaWxsRHJvcCA9IHRoaXMuX29uV2lsbERyb3AuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uV2lsbFNob3dPdmVybGF5ID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbldpbGxTaG93T3ZlcmxheSA9IHRoaXMuX29uV2lsbFNob3dPdmVybGF5LmV2ZW50O1xuICAgICAgICB0aGlzLl9vblVuaGFuZGxlZERyYWdPdmVyRXZlbnQgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uVW5oYW5kbGVkRHJhZ092ZXJFdmVudCA9IHRoaXMuX29uVW5oYW5kbGVkRHJhZ092ZXJFdmVudC5ldmVudDtcbiAgICAgICAgdGhpcy5fb25EaWRSZW1vdmVQYW5lbCA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRSZW1vdmVQYW5lbCA9IHRoaXMuX29uRGlkUmVtb3ZlUGFuZWwuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uRGlkQWRkUGFuZWwgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRGlkQWRkUGFuZWwgPSB0aGlzLl9vbkRpZEFkZFBhbmVsLmV2ZW50O1xuICAgICAgICB0aGlzLl9vbkRpZExheW91dEZyb21KU09OID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZExheW91dEZyb21KU09OID0gdGhpcy5fb25EaWRMYXlvdXRGcm9tSlNPTi5ldmVudDtcbiAgICAgICAgdGhpcy5fb25EaWRBY3RpdmVQYW5lbENoYW5nZSA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRBY3RpdmVQYW5lbENoYW5nZSA9IHRoaXMuX29uRGlkQWN0aXZlUGFuZWxDaGFuZ2UuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uRGlkTW92ZVBhbmVsID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZE1vdmVQYW5lbCA9IHRoaXMuX29uRGlkTW92ZVBhbmVsLmV2ZW50O1xuICAgICAgICB0aGlzLl9vbkRpZE1heGltaXplZEdyb3VwQ2hhbmdlID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZE1heGltaXplZEdyb3VwQ2hhbmdlID0gdGhpcy5fb25EaWRNYXhpbWl6ZWRHcm91cENoYW5nZS5ldmVudDtcbiAgICAgICAgdGhpcy5fZmxvYXRpbmdHcm91cHMgPSBbXTtcbiAgICAgICAgdGhpcy5fcG9wb3V0R3JvdXBzID0gW107XG4gICAgICAgIHRoaXMuX29uRGlkUmVtb3ZlR3JvdXAgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRGlkUmVtb3ZlR3JvdXAgPSB0aGlzLl9vbkRpZFJlbW92ZUdyb3VwLmV2ZW50O1xuICAgICAgICB0aGlzLl9vbkRpZEFkZEdyb3VwID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZEFkZEdyb3VwID0gdGhpcy5fb25EaWRBZGRHcm91cC5ldmVudDtcbiAgICAgICAgdGhpcy5fb25EaWRBY3RpdmVHcm91cENoYW5nZSA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRBY3RpdmVHcm91cENoYW5nZSA9IHRoaXMuX29uRGlkQWN0aXZlR3JvdXBDaGFuZ2UuZXZlbnQ7XG4gICAgICAgIHRoaXMuX21vdmluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLm92ZXJsYXlSZW5kZXJDb250YWluZXIgPSBuZXcgT3ZlcmxheVJlbmRlckNvbnRhaW5lcih0aGlzLmdyaWR2aWV3LmVsZW1lbnQsIHRoaXMpO1xuICAgICAgICB0b2dnbGVDbGFzcyh0aGlzLmdyaWR2aWV3LmVsZW1lbnQsICdkdi1kb2NrdmlldycsIHRydWUpO1xuICAgICAgICB0b2dnbGVDbGFzcyh0aGlzLmVsZW1lbnQsICdkdi1kZWJ1ZycsICEhb3B0aW9ucy5kZWJ1Zyk7XG4gICAgICAgIGlmIChvcHRpb25zLmRlYnVnKSB7XG4gICAgICAgICAgICB0aGlzLmFkZERpc3Bvc2FibGVzKG5ldyBTdHJpY3RFdmVudHNTZXF1ZW5jaW5nKHRoaXMpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFkZERpc3Bvc2FibGVzKHRoaXMub3ZlcmxheVJlbmRlckNvbnRhaW5lciwgdGhpcy5fb25XaWxsRHJhZ1BhbmVsLCB0aGlzLl9vbldpbGxEcmFnR3JvdXAsIHRoaXMuX29uV2lsbFNob3dPdmVybGF5LCB0aGlzLl9vbkRpZEFjdGl2ZVBhbmVsQ2hhbmdlLCB0aGlzLl9vbkRpZEFkZFBhbmVsLCB0aGlzLl9vbkRpZFJlbW92ZVBhbmVsLCB0aGlzLl9vbkRpZExheW91dEZyb21KU09OLCB0aGlzLl9vbkRpZERyb3AsIHRoaXMuX29uV2lsbERyb3AsIHRoaXMuX29uRGlkTW92ZVBhbmVsLCB0aGlzLl9vbkRpZEFkZEdyb3VwLCB0aGlzLl9vbkRpZFJlbW92ZUdyb3VwLCB0aGlzLl9vbkRpZEFjdGl2ZUdyb3VwQ2hhbmdlLCB0aGlzLl9vblVuaGFuZGxlZERyYWdPdmVyRXZlbnQsIHRoaXMuX29uRGlkTWF4aW1pemVkR3JvdXBDaGFuZ2UsIHRoaXMub25EaWRWaWV3VmlzaWJpbGl0eUNoYW5nZU1pY3JvVGFza1F1ZXVlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlV2F0ZXJtYXJrKCk7XG4gICAgICAgIH0pLCB0aGlzLm9uRGlkQWRkKChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9tb3ZpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vbkRpZEFkZEdyb3VwLmZpcmUoZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSwgdGhpcy5vbkRpZFJlbW92ZSgoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fbW92aW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb25EaWRSZW1vdmVHcm91cC5maXJlKGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksIHRoaXMub25EaWRBY3RpdmVDaGFuZ2UoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX21vdmluZykge1xuICAgICAgICAgICAgICAgIHRoaXMuX29uRGlkQWN0aXZlR3JvdXBDaGFuZ2UuZmlyZShldmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLCB0aGlzLm9uRGlkTWF4aW1pemVkQ2hhbmdlKChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25EaWRNYXhpbWl6ZWRHcm91cENoYW5nZS5maXJlKHtcbiAgICAgICAgICAgICAgICBncm91cDogZXZlbnQucGFuZWwsXG4gICAgICAgICAgICAgICAgaXNNYXhpbWl6ZWQ6IGV2ZW50LmlzTWF4aW1pemVkLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pLCBFdmVudC5hbnkodGhpcy5vbkRpZEFkZCwgdGhpcy5vbkRpZFJlbW92ZSkoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVXYXRlcm1hcmsoKTtcbiAgICAgICAgfSksIEV2ZW50LmFueSh0aGlzLm9uRGlkQWRkUGFuZWwsIHRoaXMub25EaWRSZW1vdmVQYW5lbCwgdGhpcy5vbkRpZEFkZEdyb3VwLCB0aGlzLm9uRGlkUmVtb3ZlLCB0aGlzLm9uRGlkTW92ZVBhbmVsLCB0aGlzLm9uRGlkQWN0aXZlUGFuZWxDaGFuZ2UpKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlck9uRGlkTGF5b3V0Q2hhbmdlLmZpcmUoKTtcbiAgICAgICAgfSksIERpc3Bvc2FibGUuZnJvbSgoKSA9PiB7XG4gICAgICAgICAgICAvLyBpdGVyYXRlIG92ZXIgYSBjb3B5IG9mIHRoZSBhcnJheSBzaW5jZSAuZGlzcG9zZSgpIG11dGF0ZXMgdGhlIG9yaWdpbmFsIGFycmF5XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGdyb3VwIG9mIFsuLi50aGlzLl9mbG9hdGluZ0dyb3Vwc10pIHtcbiAgICAgICAgICAgICAgICBncm91cC5kaXNwb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBpdGVyYXRlIG92ZXIgYSBjb3B5IG9mIHRoZSBhcnJheSBzaW5jZSAuZGlzcG9zZSgpIG11dGF0ZXMgdGhlIG9yaWdpbmFsIGFycmF5XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGdyb3VwIG9mIFsuLi50aGlzLl9wb3BvdXRHcm91cHNdKSB7XG4gICAgICAgICAgICAgICAgZ3JvdXAuZGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuX3Jvb3REcm9wVGFyZ2V0ID0gbmV3IERyb3B0YXJnZXQodGhpcy5lbGVtZW50LCB7XG4gICAgICAgICAgICBjYW5EaXNwbGF5T3ZlcmxheTogKGV2ZW50LCBwb3NpdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBnZXRQYW5lbERhdGEoKTtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS52aWV3SWQgIT09IHRoaXMuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocG9zaXRpb24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjZW50ZXIgZHJvcCB0YXJnZXQgaXMgb25seSBhbGxvd2VkIGlmIHRoZXJlIGFyZSBubyBwYW5lbHMgaW4gdGhlIGdyaWRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZsb2F0aW5nIHBhbmVscyBhcmUgYWxsb3dlZFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JpZHZpZXcubGVuZ3RoID09PSAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocG9zaXRpb24gPT09ICdjZW50ZXInICYmIHRoaXMuZ3JpZHZpZXcubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBmb3IgZXh0ZXJuYWwgZXZlbnRzIG9ubHkgc2hvdyB0aGUgZm91ci1jb3JuZXIgZHJhZyBvdmVybGF5cywgZGlzYWJsZVxuICAgICAgICAgICAgICAgICAgICAgKiB0aGUgY2VudGVyIHBvc2l0aW9uIHNvIHRoYXQgZXh0ZXJuYWwgZHJhZyBldmVudHMgY2FuIGZhbGwgdGhyb3VnaCB0byB0aGUgZ3JvdXBcbiAgICAgICAgICAgICAgICAgICAgICogYW5kIHBhbmVsIGRyb3AgdGFyZ2V0IGhhbmRsZXJzXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGZpcmVkRXZlbnQgPSBuZXcgRG9ja3ZpZXdVbmhhbmRsZWREcmFnT3ZlckV2ZW50KGV2ZW50LCAnZWRnZScsIHBvc2l0aW9uLCBnZXRQYW5lbERhdGEpO1xuICAgICAgICAgICAgICAgIHRoaXMuX29uVW5oYW5kbGVkRHJhZ092ZXJFdmVudC5maXJlKGZpcmVkRXZlbnQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmaXJlZEV2ZW50LmlzQWNjZXB0ZWQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYWNjZXB0ZWRUYXJnZXRab25lczogWyd0b3AnLCAnYm90dG9tJywgJ2xlZnQnLCAncmlnaHQnLCAnY2VudGVyJ10sXG4gICAgICAgICAgICBvdmVybGF5TW9kZWw6IChfYSA9IHRoaXMub3B0aW9ucy5yb290T3ZlcmxheU1vZGVsKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBERUZBVUxUX1JPT1RfT1ZFUkxBWV9NT0RFTCxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYWRkRGlzcG9zYWJsZXModGhpcy5fcm9vdERyb3BUYXJnZXQsIHRoaXMuX3Jvb3REcm9wVGFyZ2V0Lm9uV2lsbFNob3dPdmVybGF5KChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuZ3JpZHZpZXcubGVuZ3RoID4gMCAmJiBldmVudC5wb3NpdGlvbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgICAgICAvLyBvcHRpb24gb25seSBhdmFpbGFibGUgd2hlbiBubyBwYW5lbHMgaW4gcHJpbWFyeSBncmlkXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fb25XaWxsU2hvd092ZXJsYXkuZmlyZShuZXcgV2lsbFNob3dPdmVybGF5TG9jYXRpb25FdmVudChldmVudCwge1xuICAgICAgICAgICAgICAgIGtpbmQ6ICdlZGdlJyxcbiAgICAgICAgICAgICAgICBwYW5lbDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGFwaTogdGhpcy5fYXBpLFxuICAgICAgICAgICAgICAgIGdyb3VwOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgZ2V0RGF0YTogZ2V0UGFuZWxEYXRhLFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSwgdGhpcy5fcm9vdERyb3BUYXJnZXQub25Ecm9wKChldmVudCkgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgY29uc3Qgd2lsbERyb3BFdmVudCA9IG5ldyBEb2Nrdmlld1dpbGxEcm9wRXZlbnQoe1xuICAgICAgICAgICAgICAgIG5hdGl2ZUV2ZW50OiBldmVudC5uYXRpdmVFdmVudCxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogZXZlbnQucG9zaXRpb24sXG4gICAgICAgICAgICAgICAgcGFuZWw6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBhcGk6IHRoaXMuX2FwaSxcbiAgICAgICAgICAgICAgICBncm91cDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGdldERhdGE6IGdldFBhbmVsRGF0YSxcbiAgICAgICAgICAgICAgICBraW5kOiAnZWRnZScsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuX29uV2lsbERyb3AuZmlyZSh3aWxsRHJvcEV2ZW50KTtcbiAgICAgICAgICAgIGlmICh3aWxsRHJvcEV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBkYXRhID0gZ2V0UGFuZWxEYXRhKCk7XG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHRoaXMubW92ZUdyb3VwT3JQYW5lbCh7XG4gICAgICAgICAgICAgICAgICAgIGZyb206IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwSWQ6IGRhdGEuZ3JvdXBJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhbmVsSWQ6IChfYSA9IGRhdGEucGFuZWxJZCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0bzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXA6IHRoaXMub3J0aG9nb25hbGl6ZShldmVudC5wb3NpdGlvbiksXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vbkRpZERyb3AuZmlyZShuZXcgRG9ja3ZpZXdEaWREcm9wRXZlbnQoe1xuICAgICAgICAgICAgICAgICAgICBuYXRpdmVFdmVudDogZXZlbnQubmF0aXZlRXZlbnQsXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBldmVudC5wb3NpdGlvbixcbiAgICAgICAgICAgICAgICAgICAgcGFuZWw6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgYXBpOiB0aGlzLl9hcGksXG4gICAgICAgICAgICAgICAgICAgIGdyb3VwOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIGdldERhdGE6IGdldFBhbmVsRGF0YSxcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLCB0aGlzLl9yb290RHJvcFRhcmdldCk7XG4gICAgICAgIHRoaXMuX2FwaSA9IG5ldyBEb2Nrdmlld0FwaSh0aGlzKTtcbiAgICAgICAgdGhpcy51cGRhdGVXYXRlcm1hcmsoKTtcbiAgICB9XG4gICAgc2V0VmlzaWJsZShwYW5lbCwgdmlzaWJsZSkge1xuICAgICAgICBzd2l0Y2ggKHBhbmVsLmFwaS5sb2NhdGlvbi50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdncmlkJzpcbiAgICAgICAgICAgICAgICBzdXBlci5zZXRWaXNpYmxlKHBhbmVsLCB2aXNpYmxlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2Zsb2F0aW5nJzoge1xuICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLmZsb2F0aW5nR3JvdXBzLmZpbmQoKGZsb2F0aW5nR3JvdXApID0+IGZsb2F0aW5nR3JvdXAuZ3JvdXAgPT09IHBhbmVsKTtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICBpdGVtLm92ZXJsYXkuc2V0VmlzaWJsZSh2aXNpYmxlKTtcbiAgICAgICAgICAgICAgICAgICAgcGFuZWwuYXBpLl9vbkRpZFZpc2liaWxpdHlDaGFuZ2UuZmlyZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc1Zpc2libGU6IHZpc2libGUsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ3BvcG91dCc6XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdkb2NrdmlldzogWW91IGNhbm5vdCBoaWRlIGEgZ3JvdXAgdGhhdCBpcyBpbiBhIHBvcG91dCB3aW5kb3cnKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBhZGRQb3BvdXRHcm91cChpdGVtVG9Qb3BvdXQsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZTtcbiAgICAgICAgaWYgKGl0ZW1Ub1BvcG91dCBpbnN0YW5jZW9mIERvY2t2aWV3UGFuZWwgJiZcbiAgICAgICAgICAgIGl0ZW1Ub1BvcG91dC5ncm91cC5zaXplID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hZGRQb3BvdXRHcm91cChpdGVtVG9Qb3BvdXQuZ3JvdXAsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRoZW1lID0gZ2V0RG9ja3ZpZXdUaGVtZSh0aGlzLmdyaWR2aWV3LmVsZW1lbnQpO1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5lbGVtZW50O1xuICAgICAgICBmdW5jdGlvbiBnZXRCb3goKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMucG9zaXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXRlbVRvUG9wb3V0IGluc3RhbmNlb2YgRG9ja3ZpZXdHcm91cFBhbmVsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW1Ub1BvcG91dC5lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGl0ZW1Ub1BvcG91dC5ncm91cCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtVG9Qb3BvdXQuZ3JvdXAuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJveCA9IGdldEJveCgpO1xuICAgICAgICBjb25zdCBncm91cElkID0gKF9iID0gKF9hID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm92ZXJyaWRlUG9wb3V0R3JvdXApID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pZCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogdGhpcy5nZXROZXh0R3JvdXBJZCgpO1xuICAgICAgICBjb25zdCBfd2luZG93ID0gbmV3IFBvcG91dFdpbmRvdyhgJHt0aGlzLmlkfS0ke2dyb3VwSWR9YCwgLy8gdW5pcXVlIGlkXG4gICAgICAgIHRoZW1lICE9PSBudWxsICYmIHRoZW1lICE9PSB2b2lkIDAgPyB0aGVtZSA6ICcnLCB7XG4gICAgICAgICAgICB1cmw6IChfZSA9IChfYyA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5wb3BvdXRVcmwpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IChfZCA9IHRoaXMub3B0aW9ucykgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLnBvcG91dFVybCkgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogJy9wb3BvdXQuaHRtbCcsXG4gICAgICAgICAgICBsZWZ0OiB3aW5kb3cuc2NyZWVuWCArIGJveC5sZWZ0LFxuICAgICAgICAgICAgdG9wOiB3aW5kb3cuc2NyZWVuWSArIGJveC50b3AsXG4gICAgICAgICAgICB3aWR0aDogYm94LndpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiBib3guaGVpZ2h0LFxuICAgICAgICAgICAgb25EaWRPcGVuOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMub25EaWRPcGVuLFxuICAgICAgICAgICAgb25XaWxsQ2xvc2U6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5vbldpbGxDbG9zZSxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHBvcG91dFdpbmRvd0Rpc3Bvc2FibGUgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZShfd2luZG93LCBfd2luZG93Lm9uRGlkQ2xvc2UoKCkgPT4ge1xuICAgICAgICAgICAgcG9wb3V0V2luZG93RGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuIF93aW5kb3dcbiAgICAgICAgICAgIC5vcGVuKClcbiAgICAgICAgICAgIC50aGVuKChwb3BvdXRDb250YWluZXIpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGlmIChfd2luZG93LmlzRGlzcG9zZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocG9wb3V0Q29udGFpbmVyID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcG9wb3V0V2luZG93RGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZ3JlYWR5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBncmVhZHkuY2xhc3NOYW1lID0gJ2R2LW92ZXJsYXktcmVuZGVyLWNvbnRhaW5lcic7XG4gICAgICAgICAgICBjb25zdCBvdmVybGF5UmVuZGVyQ29udGFpbmVyID0gbmV3IE92ZXJsYXlSZW5kZXJDb250YWluZXIoZ3JlYWR5LCB0aGlzKTtcbiAgICAgICAgICAgIGNvbnN0IHJlZmVyZW5jZUdyb3VwID0gaXRlbVRvUG9wb3V0IGluc3RhbmNlb2YgRG9ja3ZpZXdQYW5lbFxuICAgICAgICAgICAgICAgID8gaXRlbVRvUG9wb3V0Lmdyb3VwXG4gICAgICAgICAgICAgICAgOiBpdGVtVG9Qb3BvdXQ7XG4gICAgICAgICAgICBjb25zdCByZWZlcmVuY2VMb2NhdGlvbiA9IGl0ZW1Ub1BvcG91dC5hcGkubG9jYXRpb24udHlwZTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVGhlIGdyb3VwIHRoYXQgaXMgYmVpbmcgYWRkZWQgZG9lc24ndCBhbHJlYWR5IGV4aXN0IHdpdGhpbiB0aGUgRE9NLCB0aGUgbW9zdCBsaWtlbHkgb2NjdXJhbmNlXG4gICAgICAgICAgICAgKiBvZiB0aGlzIGNhc2UgaXMgd2hlbiBiZWluZyBjYWxsZWQgZnJvbSB0aGUgYGZyb21KU09OKC4uLilgIG1ldGhvZFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb25zdCBpc0dyb3VwQWRkZWRUb0RvbSA9IHJlZmVyZW5jZUdyb3VwLmVsZW1lbnQucGFyZW50RWxlbWVudCAhPT0gbnVsbDtcbiAgICAgICAgICAgIGxldCBncm91cDtcbiAgICAgICAgICAgIGlmICghaXNHcm91cEFkZGVkVG9Eb20pIHtcbiAgICAgICAgICAgICAgICBncm91cCA9IHJlZmVyZW5jZUdyb3VwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm92ZXJyaWRlUG9wb3V0R3JvdXApIHtcbiAgICAgICAgICAgICAgICBncm91cCA9IG9wdGlvbnMub3ZlcnJpZGVQb3BvdXRHcm91cDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGdyb3VwID0gdGhpcy5jcmVhdGVHcm91cCh7IGlkOiBncm91cElkIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuX29uRGlkQWRkR3JvdXAuZmlyZShncm91cCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBncm91cC5tb2RlbC5yZW5kZXJDb250YWluZXIgPSBvdmVybGF5UmVuZGVyQ29udGFpbmVyO1xuICAgICAgICAgICAgZ3JvdXAubGF5b3V0KF93aW5kb3cud2luZG93LmlubmVyV2lkdGgsIF93aW5kb3cud2luZG93LmlubmVySGVpZ2h0KTtcbiAgICAgICAgICAgIGxldCBmbG9hdGluZ0JveDtcbiAgICAgICAgICAgIGlmICghKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5vdmVycmlkZVBvcG91dEdyb3VwKSAmJiBpc0dyb3VwQWRkZWRUb0RvbSkge1xuICAgICAgICAgICAgICAgIGlmIChpdGVtVG9Qb3BvdXQgaW5zdGFuY2VvZiBEb2Nrdmlld1BhbmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW92aW5nTG9jaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYW5lbCA9IHJlZmVyZW5jZUdyb3VwLm1vZGVsLnJlbW92ZVBhbmVsKGl0ZW1Ub1BvcG91dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cC5tb2RlbC5vcGVuUGFuZWwocGFuZWwpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW92aW5nTG9jaygoKSA9PiBtb3ZlR3JvdXBXaXRob3V0RGVzdHJveWluZyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tOiByZWZlcmVuY2VHcm91cCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvOiBncm91cCxcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHJlZmVyZW5jZUxvY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdncmlkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZlcmVuY2VHcm91cC5hcGkuc2V0VmlzaWJsZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdmbG9hdGluZyc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdwb3BvdXQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsb2F0aW5nQm94ID0gKF9hID0gdGhpcy5fZmxvYXRpbmdHcm91cHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoKHZhbHVlKSA9PiB2YWx1ZS5ncm91cC5hcGkuaWQgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1Ub1BvcG91dC5hcGkuaWQpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Eub3ZlcmxheS50b0pTT04oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUdyb3VwKHJlZmVyZW5jZUdyb3VwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBvcG91dENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdkdi1kb2NrdmlldycpO1xuICAgICAgICAgICAgcG9wb3V0Q29udGFpbmVyLnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gICAgICAgICAgICBwb3BvdXRDb250YWluZXIuYXBwZW5kQ2hpbGQoZ3JlYWR5KTtcbiAgICAgICAgICAgIHBvcG91dENvbnRhaW5lci5hcHBlbmRDaGlsZChncm91cC5lbGVtZW50KTtcbiAgICAgICAgICAgIGdyb3VwLm1vZGVsLmxvY2F0aW9uID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdwb3BvdXQnLFxuICAgICAgICAgICAgICAgIGdldFdpbmRvdzogKCkgPT4gX3dpbmRvdy53aW5kb3csXG4gICAgICAgICAgICAgICAgcG9wb3V0VXJsOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMucG9wb3V0VXJsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChpc0dyb3VwQWRkZWRUb0RvbSAmJlxuICAgICAgICAgICAgICAgIGl0ZW1Ub1BvcG91dC5hcGkubG9jYXRpb24udHlwZSA9PT0gJ2dyaWQnKSB7XG4gICAgICAgICAgICAgICAgaXRlbVRvUG9wb3V0LmFwaS5zZXRWaXNpYmxlKGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZG9TZXRHcm91cEFuZFBhbmVsQWN0aXZlKGdyb3VwKTtcbiAgICAgICAgICAgIHBvcG91dFdpbmRvd0Rpc3Bvc2FibGUuYWRkRGlzcG9zYWJsZXMoZ3JvdXAuYXBpLm9uRGlkQWN0aXZlQ2hhbmdlKChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQuaXNBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgKF9hID0gX3dpbmRvdy53aW5kb3cpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5mb2N1cygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLCBncm91cC5hcGkub25XaWxsRm9jdXMoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICAoX2EgPSBfd2luZG93LndpbmRvdykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmZvY3VzKCk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBsZXQgcmV0dXJuZWRHcm91cDtcbiAgICAgICAgICAgIGNvbnN0IGlzVmFsaWRSZWZlcmVuY2VHcm91cCA9IGlzR3JvdXBBZGRlZFRvRG9tICYmXG4gICAgICAgICAgICAgICAgcmVmZXJlbmNlR3JvdXAgJiZcbiAgICAgICAgICAgICAgICB0aGlzLmdldFBhbmVsKHJlZmVyZW5jZUdyb3VwLmlkKTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0ge1xuICAgICAgICAgICAgICAgIHdpbmRvdzogX3dpbmRvdyxcbiAgICAgICAgICAgICAgICBwb3BvdXRHcm91cDogZ3JvdXAsXG4gICAgICAgICAgICAgICAgcmVmZXJlbmNlR3JvdXA6IGlzVmFsaWRSZWZlcmVuY2VHcm91cFxuICAgICAgICAgICAgICAgICAgICA/IHJlZmVyZW5jZUdyb3VwLmlkXG4gICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGRpc3Bvc2FibGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcG9zZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9wb3V0V2luZG93RGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0dXJuZWRHcm91cDtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHBvcG91dFdpbmRvd0Rpc3Bvc2FibGUuYWRkRGlzcG9zYWJsZXMoXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJlc2l6ZU9ic2VydmVyIHNlZW1zIHNsb3cgaGVyZSwgSSBkbyBub3Qga25vdyB3aHkgYnV0IHdlIGRvbid0IG5lZWQgaXRcbiAgICAgICAgICAgICAqIHNpbmNlIHdlIGNhbiByZXBseSBvbiB0aGUgd2luZG93IHJlc2l6ZSBldmVudCBhcyB3ZSB3aWxsIG9jY3VweSB0aGUgZnVsbFxuICAgICAgICAgICAgICogd2luZG93IGRpbWVuc2lvbnNcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgYWRkRGlzcG9zYWJsZVdpbmRvd0xpc3RlbmVyKF93aW5kb3cud2luZG93LCAncmVzaXplJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGdyb3VwLmxheW91dChfd2luZG93LndpbmRvdy5pbm5lcldpZHRoLCBfd2luZG93LndpbmRvdy5pbm5lckhlaWdodCk7XG4gICAgICAgICAgICB9KSwgb3ZlcmxheVJlbmRlckNvbnRhaW5lciwgRGlzcG9zYWJsZS5mcm9tKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0Rpc3Bvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjsgLy8gY2xlYW51cCBtYXkgcnVuIGFmdGVyIGluc3RhbmNlIGlzIGRpc3Bvc2VkXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpc0dyb3VwQWRkZWRUb0RvbSAmJlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdldFBhbmVsKHJlZmVyZW5jZUdyb3VwLmlkKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vdmluZ0xvY2soKCkgPT4gbW92ZUdyb3VwV2l0aG91dERlc3Ryb3lpbmcoe1xuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogZ3JvdXAsXG4gICAgICAgICAgICAgICAgICAgICAgICB0bzogcmVmZXJlbmNlR3JvdXAsXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZWZlcmVuY2VHcm91cC5hcGkuaXNWaXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWZlcmVuY2VHcm91cC5hcGkuc2V0VmlzaWJsZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5nZXRQYW5lbChncm91cC5pZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZG9SZW1vdmVHcm91cChncm91cCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNraXBQb3BvdXRBc3NvY2lhdGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5nZXRQYW5lbChncm91cC5pZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXAubW9kZWwucmVuZGVyQ29udGFpbmVyID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3ZlcmxheVJlbmRlckNvbnRhaW5lcjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuZWRHcm91cCA9IGdyb3VwO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhbHJlYWR5UmVtb3ZlZCA9ICF0aGlzLl9wb3BvdXRHcm91cHMuZmluZCgocCkgPT4gcC5wb3BvdXRHcm91cCA9PT0gZ3JvdXApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWxyZWFkeVJlbW92ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICogSWYgdGhpcyBwb3BvdXQgZ3JvdXAgd2FzIGV4cGxpY2l0bHkgcmVtb3ZlZCB0aGVuIHdlIHNob3VsZG4ndCBydW4gdGhlIGFkZGl0aW9uYWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIHN0ZXBzLiBUbyB0ZWxsIGlmIHRoZSBydW5uaW5nIG9mIHRoaXMgZGlzcG9zYWJsZSBpcyB0aGUgcmVzdWx0IG9mIHRoaXMgcG9wb3V0IGdyb3VwXG4gICAgICAgICAgICAgICAgICAgICAgICAgKiBiZWluZyBleHBsaWNpdGx5IHJlbW92ZWQgd2UgY2FuIGNoZWNrIGlmIHRoaXMgcG9wb3V0IGdyb3VwIGlzIHN0aWxsIHJlZmVyZW5jZWQgaW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAqIHRoZSBgdGhpcy5fcG9wb3V0R3JvdXBzYCBsaXN0LlxuICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGZsb2F0aW5nQm94KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZEZsb2F0aW5nR3JvdXAoZ3JvdXAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGZsb2F0aW5nQm94LmhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogZmxvYXRpbmdCb3gud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGZsb2F0aW5nQm94LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRvUmVtb3ZlR3JvdXAoZ3JvdXAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lwRGlzcG9zZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lwQWN0aXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNraXBQb3BvdXRSZXR1cm46IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwLm1vZGVsLmxvY2F0aW9uID0geyB0eXBlOiAnZ3JpZCcgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW92aW5nTG9jaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3VwcHJlc3MgZ3JvdXAgYWRkIGV2ZW50cyBzaW5jZSB0aGUgZ3JvdXAgYWxyZWFkeSBleGlzdHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRvQWRkR3JvdXAoZ3JvdXAsIFswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvU2V0R3JvdXBBbmRQYW5lbEFjdGl2ZShncm91cCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgdGhpcy5fcG9wb3V0R3JvdXBzLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVXYXRlcm1hcmsoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2RvY2t2aWV3OiBmYWlsZWQgdG8gY3JlYXRlIHBvcG91dCB3aW5kb3cnLCBlcnIpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYWRkRmxvYXRpbmdHcm91cChpdGVtLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2U7XG4gICAgICAgIGxldCBncm91cDtcbiAgICAgICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBEb2Nrdmlld1BhbmVsKSB7XG4gICAgICAgICAgICBncm91cCA9IHRoaXMuY3JlYXRlR3JvdXAoKTtcbiAgICAgICAgICAgIHRoaXMuX29uRGlkQWRkR3JvdXAuZmlyZShncm91cCk7XG4gICAgICAgICAgICB0aGlzLm1vdmluZ0xvY2soKCkgPT4gdGhpcy5yZW1vdmVQYW5lbChpdGVtLCB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlRW1wdHlHcm91cDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBza2lwRGlzcG9zZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBza2lwU2V0QWN0aXZlR3JvdXA6IHRydWUsXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB0aGlzLm1vdmluZ0xvY2soKCkgPT4gZ3JvdXAubW9kZWwub3BlblBhbmVsKGl0ZW0sIHsgc2tpcFNldEdyb3VwQWN0aXZlOiB0cnVlIH0pKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGdyb3VwID0gaXRlbTtcbiAgICAgICAgICAgIGNvbnN0IHBvcG91dFJlZmVyZW5jZUdyb3VwSWQgPSAoX2EgPSB0aGlzLl9wb3BvdXRHcm91cHMuZmluZCgoXykgPT4gXy5wb3BvdXRHcm91cCA9PT0gZ3JvdXApKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucmVmZXJlbmNlR3JvdXA7XG4gICAgICAgICAgICBjb25zdCBwb3BvdXRSZWZlcmVuY2VHcm91cCA9IHBvcG91dFJlZmVyZW5jZUdyb3VwSWRcbiAgICAgICAgICAgICAgICA/IHRoaXMuZ2V0UGFuZWwocG9wb3V0UmVmZXJlbmNlR3JvdXBJZClcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGNvbnN0IHNraXAgPSB0eXBlb2YgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5za2lwUmVtb3ZlR3JvdXApID09PSAnYm9vbGVhbicgJiZcbiAgICAgICAgICAgICAgICBvcHRpb25zLnNraXBSZW1vdmVHcm91cDtcbiAgICAgICAgICAgIGlmICghc2tpcCkge1xuICAgICAgICAgICAgICAgIGlmIChwb3BvdXRSZWZlcmVuY2VHcm91cCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vdmluZ0xvY2soKCkgPT4gbW92ZUdyb3VwV2l0aG91dERlc3Ryb3lpbmcoe1xuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogaXRlbSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvOiBwb3BvdXRSZWZlcmVuY2VHcm91cCxcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvUmVtb3ZlR3JvdXAoaXRlbSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2tpcFBvcG91dFJldHVybjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNraXBQb3BvdXRBc3NvY2lhdGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb1JlbW92ZUdyb3VwKHBvcG91dFJlZmVyZW5jZUdyb3VwLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBza2lwRGlzcG9zZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwID0gcG9wb3V0UmVmZXJlbmNlR3JvdXA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvUmVtb3ZlR3JvdXAoaXRlbSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2tpcERpc3Bvc2U6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBza2lwUG9wb3V0UmV0dXJuOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2tpcFBvcG91dEFzc29jaWF0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZ2V0QW5jaG9yZWRCb3goKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgICAgICAgICAgICAgaWYgKCdsZWZ0JyBpbiBvcHRpb25zLnBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5sZWZ0ID0gTWF0aC5tYXgob3B0aW9ucy5wb3NpdGlvbi5sZWZ0LCAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoJ3JpZ2h0JyBpbiBvcHRpb25zLnBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5yaWdodCA9IE1hdGgubWF4KG9wdGlvbnMucG9zaXRpb24ucmlnaHQsIDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmxlZnQgPSBERUZBVUxUX0ZMT0FUSU5HX0dST1VQX1BPU0lUSU9OLmxlZnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICgndG9wJyBpbiBvcHRpb25zLnBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC50b3AgPSBNYXRoLm1heChvcHRpb25zLnBvc2l0aW9uLnRvcCwgMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCdib3R0b20nIGluIG9wdGlvbnMucG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmJvdHRvbSA9IE1hdGgubWF4KG9wdGlvbnMucG9zaXRpb24uYm90dG9tLCAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC50b3AgPSBERUZBVUxUX0ZMT0FUSU5HX0dST1VQX1BPU0lUSU9OLnRvcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLndpZHRoID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQud2lkdGggPSBNYXRoLm1heChvcHRpb25zLndpZHRoLCAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC53aWR0aCA9IERFRkFVTFRfRkxPQVRJTkdfR1JPVVBfUE9TSVRJT04ud2lkdGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5oZWlnaHQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5oZWlnaHQgPSBNYXRoLm1heChvcHRpb25zLmhlaWdodCwgMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQuaGVpZ2h0ID0gREVGQVVMVF9GTE9BVElOR19HUk9VUF9QT1NJVElPTi5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGxlZnQ6IHR5cGVvZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLngpID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgICAgICAgICA/IE1hdGgubWF4KG9wdGlvbnMueCwgMClcbiAgICAgICAgICAgICAgICAgICAgOiBERUZBVUxUX0ZMT0FUSU5HX0dST1VQX1BPU0lUSU9OLmxlZnQsXG4gICAgICAgICAgICAgICAgdG9wOiB0eXBlb2YgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy55KSA9PT0gJ251bWJlcidcbiAgICAgICAgICAgICAgICAgICAgPyBNYXRoLm1heChvcHRpb25zLnksIDApXG4gICAgICAgICAgICAgICAgICAgIDogREVGQVVMVF9GTE9BVElOR19HUk9VUF9QT1NJVElPTi50b3AsXG4gICAgICAgICAgICAgICAgd2lkdGg6IHR5cGVvZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLndpZHRoKSA9PT0gJ251bWJlcidcbiAgICAgICAgICAgICAgICAgICAgPyBNYXRoLm1heChvcHRpb25zLndpZHRoLCAwKVxuICAgICAgICAgICAgICAgICAgICA6IERFRkFVTFRfRkxPQVRJTkdfR1JPVVBfUE9TSVRJT04ud2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiB0eXBlb2YgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5oZWlnaHQpID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgICAgICAgICA/IE1hdGgubWF4KG9wdGlvbnMuaGVpZ2h0LCAwKVxuICAgICAgICAgICAgICAgICAgICA6IERFRkFVTFRfRkxPQVRJTkdfR1JPVVBfUE9TSVRJT04uaGVpZ2h0LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhbmNob3JlZEJveCA9IGdldEFuY2hvcmVkQm94KCk7XG4gICAgICAgIGNvbnN0IG92ZXJsYXkgPSBuZXcgT3ZlcmxheShPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBjb250YWluZXI6IHRoaXMuZ3JpZHZpZXcuZWxlbWVudCwgY29udGVudDogZ3JvdXAuZWxlbWVudCB9LCBhbmNob3JlZEJveCksIHsgbWluaW11bUluVmlld3BvcnRXaWR0aDogdGhpcy5vcHRpb25zLmZsb2F0aW5nR3JvdXBCb3VuZHMgPT09ICdib3VuZGVkV2l0aGluVmlld3BvcnQnXG4gICAgICAgICAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICA6IChfYyA9IChfYiA9IHRoaXMub3B0aW9ucy5mbG9hdGluZ0dyb3VwQm91bmRzKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IubWluaW11bVdpZHRoV2l0aGluVmlld3BvcnQpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IERFRkFVTFRfRkxPQVRJTkdfR1JPVVBfT1ZFUkZMT1dfU0laRSwgbWluaW11bUluVmlld3BvcnRIZWlnaHQ6IHRoaXMub3B0aW9ucy5mbG9hdGluZ0dyb3VwQm91bmRzID09PSAnYm91bmRlZFdpdGhpblZpZXdwb3J0J1xuICAgICAgICAgICAgICAgID8gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgOiAoX2UgPSAoX2QgPSB0aGlzLm9wdGlvbnMuZmxvYXRpbmdHcm91cEJvdW5kcykgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLm1pbmltdW1IZWlnaHRXaXRoaW5WaWV3cG9ydCkgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogREVGQVVMVF9GTE9BVElOR19HUk9VUF9PVkVSRkxPV19TSVpFIH0pKTtcbiAgICAgICAgY29uc3QgZWwgPSBncm91cC5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kdi12b2lkLWNvbnRhaW5lcicpO1xuICAgICAgICBpZiAoIWVsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ZhaWxlZCB0byBmaW5kIGRyYWcgaGFuZGxlJyk7XG4gICAgICAgIH1cbiAgICAgICAgb3ZlcmxheS5zZXR1cERyYWcoZWwsIHtcbiAgICAgICAgICAgIGluRHJhZ01vZGU6IHR5cGVvZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmluRHJhZ01vZGUpID09PSAnYm9vbGVhbidcbiAgICAgICAgICAgICAgICA/IG9wdGlvbnMuaW5EcmFnTW9kZVxuICAgICAgICAgICAgICAgIDogZmFsc2UsXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBmbG9hdGluZ0dyb3VwUGFuZWwgPSBuZXcgRG9ja3ZpZXdGbG9hdGluZ0dyb3VwUGFuZWwoZ3JvdXAsIG92ZXJsYXkpO1xuICAgICAgICBjb25zdCBkaXNwb3NhYmxlID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoZ3JvdXAuYXBpLm9uRGlkQWN0aXZlQ2hhbmdlKChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmlzQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgb3ZlcmxheS5icmluZ1RvRnJvbnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksIHdhdGNoRWxlbWVudFJlc2l6ZShncm91cC5lbGVtZW50LCAoZW50cnkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gZW50cnkuY29udGVudFJlY3Q7XG4gICAgICAgICAgICBncm91cC5sYXlvdXQod2lkdGgsIGhlaWdodCk7IC8vIGxldCB0aGUgZ3JvdXAga25vdyBpdCdzIHNpemUgaXMgY2hhbmdpbmcgc28gaXQgY2FuIGZpcmUgZXZlbnRzIHRvIHRoZSBwYW5lbFxuICAgICAgICB9KSk7XG4gICAgICAgIGZsb2F0aW5nR3JvdXBQYW5lbC5hZGREaXNwb3NhYmxlcyhvdmVybGF5Lm9uRGlkQ2hhbmdlKCgpID0+IHtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgZWl0aGVyIGEgcmVzaXplIG9yIGEgbW92ZVxuICAgICAgICAgICAgLy8gdG8gaW5mb3JtIHRoZSBwYW5lbHMgLmxheW91dCguLi4pIHRoZSBncm91cCB3aXRoIGl0J3MgY3VycmVudCBzaXplXG4gICAgICAgICAgICAvLyBkb24ndCBjYXJlIGFib3V0IHJlc2l6ZSBzaW5jZSB0aGUgYWJvdmUgd2F0Y2hlciBoYW5kbGVzIHRoYXRcbiAgICAgICAgICAgIGdyb3VwLmxheW91dChncm91cC53aWR0aCwgZ3JvdXAuaGVpZ2h0KTtcbiAgICAgICAgfSksIG92ZXJsYXkub25EaWRDaGFuZ2VFbmQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fYnVmZmVyT25EaWRMYXlvdXRDaGFuZ2UuZmlyZSgpO1xuICAgICAgICB9KSwgZ3JvdXAub25EaWRDaGFuZ2UoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBvdmVybGF5LnNldEJvdW5kcyh7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBldmVudCA9PT0gbnVsbCB8fCBldmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXZlbnQuaGVpZ2h0LFxuICAgICAgICAgICAgICAgIHdpZHRoOiBldmVudCA9PT0gbnVsbCB8fCBldmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXZlbnQud2lkdGgsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSksIHtcbiAgICAgICAgICAgIGRpc3Bvc2U6ICgpID0+IHtcbiAgICAgICAgICAgICAgICBkaXNwb3NhYmxlLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICByZW1vdmUodGhpcy5fZmxvYXRpbmdHcm91cHMsIGZsb2F0aW5nR3JvdXBQYW5lbCk7XG4gICAgICAgICAgICAgICAgZ3JvdXAubW9kZWwubG9jYXRpb24gPSB7IHR5cGU6ICdncmlkJyB9O1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlV2F0ZXJtYXJrKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fZmxvYXRpbmdHcm91cHMucHVzaChmbG9hdGluZ0dyb3VwUGFuZWwpO1xuICAgICAgICBncm91cC5tb2RlbC5sb2NhdGlvbiA9IHsgdHlwZTogJ2Zsb2F0aW5nJyB9O1xuICAgICAgICBpZiAoIShvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuc2tpcEFjdGl2ZUdyb3VwKSkge1xuICAgICAgICAgICAgdGhpcy5kb1NldEdyb3VwQW5kUGFuZWxBY3RpdmUoZ3JvdXApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlV2F0ZXJtYXJrKCk7XG4gICAgfVxuICAgIG9ydGhvZ29uYWxpemUocG9zaXRpb24pIHtcbiAgICAgICAgc3dpdGNoIChwb3NpdGlvbikge1xuICAgICAgICAgICAgY2FzZSAndG9wJzpcbiAgICAgICAgICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZ3JpZHZpZXcub3JpZW50YXRpb24gPT09IE9yaWVudGF0aW9uLkhPUklaT05UQUwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gd2UgbmVlZCB0byBhZGQgdG8gYSB2ZXJ0aWNhbCBzcGxpdHZpZXcgYnV0IHRoZSBjdXJyZW50IHJvb3QgaXMgYSBob3Jpem9udGFsIHNwbGl0dmlldy5cbiAgICAgICAgICAgICAgICAgICAgLy8gaW5zZXJ0IGEgdmVydGljYWwgc3BsaXR2aWV3IGF0IHRoZSByb290IGxldmVsIGFuZCBhZGQgdGhlIGV4aXN0aW5nIHZpZXcgYXMgYSBjaGlsZFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdyaWR2aWV3Lmluc2VydE9ydGhvZ29uYWxTcGxpdHZpZXdBdFJvb3QoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5ncmlkdmlldy5vcmllbnRhdGlvbiA9PT0gT3JpZW50YXRpb24uVkVSVElDQUwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gd2UgbmVlZCB0byBhZGQgdG8gYSBob3Jpem9udGFsIHNwbGl0dmlldyBidXQgdGhlIGN1cnJlbnQgcm9vdCBpcyBhIHZlcnRpY2FsIHNwbGl0dmlldy5cbiAgICAgICAgICAgICAgICAgICAgLy8gaW5zZXJ0IGEgaG9yaXppb250YWwgc3BsaXR2aWV3IGF0IHRoZSByb290IGxldmVsIGFuZCBhZGQgdGhlIGV4aXN0aW5nIHZpZXcgYXMgYSBjaGlsZFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdyaWR2aWV3Lmluc2VydE9ydGhvZ29uYWxTcGxpdHZpZXdBdFJvb3QoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAocG9zaXRpb24pIHtcbiAgICAgICAgICAgIGNhc2UgJ3RvcCc6XG4gICAgICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgICAgIGNhc2UgJ2NlbnRlcic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlR3JvdXBBdExvY2F0aW9uKFswXSk7IC8vIGluc2VydCBpbnRvIGZpcnN0IHBvc2l0aW9uXG4gICAgICAgICAgICBjYXNlICdib3R0b20nOlxuICAgICAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUdyb3VwQXRMb2NhdGlvbihbdGhpcy5ncmlkdmlldy5sZW5ndGhdKTsgLy8gaW5zZXJ0IGludG8gbGFzdCBwb3NpdGlvblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHVuc3VwcG9ydGVkIHBvc2l0aW9uICR7cG9zaXRpb259YCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICAgICAgc3VwZXIudXBkYXRlT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgaWYgKCdmbG9hdGluZ0dyb3VwQm91bmRzJyBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGdyb3VwIG9mIHRoaXMuX2Zsb2F0aW5nR3JvdXBzKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChvcHRpb25zLmZsb2F0aW5nR3JvdXBCb3VuZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm91bmRlZFdpdGhpblZpZXdwb3J0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwLm92ZXJsYXkubWluaW11bUluVmlld3BvcnRIZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cC5vdmVybGF5Lm1pbmltdW1JblZpZXdwb3J0V2lkdGggPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cC5vdmVybGF5Lm1pbmltdW1JblZpZXdwb3J0SGVpZ2h0ID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBERUZBVUxUX0ZMT0FUSU5HX0dST1VQX09WRVJGTE9XX1NJWkU7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cC5vdmVybGF5Lm1pbmltdW1JblZpZXdwb3J0V2lkdGggPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIERFRkFVTFRfRkxPQVRJTkdfR1JPVVBfT1ZFUkZMT1dfU0laRTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXAub3ZlcmxheS5taW5pbXVtSW5WaWV3cG9ydEhlaWdodCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKF9hID0gb3B0aW9ucy5mbG9hdGluZ0dyb3VwQm91bmRzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubWluaW11bUhlaWdodFdpdGhpblZpZXdwb3J0O1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXAub3ZlcmxheS5taW5pbXVtSW5WaWV3cG9ydFdpZHRoID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoX2IgPSBvcHRpb25zLmZsb2F0aW5nR3JvdXBCb3VuZHMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5taW5pbXVtV2lkdGhXaXRoaW5WaWV3cG9ydDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZ3JvdXAub3ZlcmxheS5zZXRCb3VuZHMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoJ3Jvb3RPdmVybGF5TW9kZWwnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMuX3Jvb3REcm9wVGFyZ2V0LnNldE92ZXJsYXlNb2RlbCgoX2MgPSBvcHRpb25zLnJvb3RPdmVybGF5TW9kZWwpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IERFRkFVTFRfUk9PVF9PVkVSTEFZX01PREVMKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJ2dhcCcgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5ncmlkdmlldy5tYXJnaW4gPSAoX2QgPSBvcHRpb25zLmdhcCkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogMDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9vcHRpb25zID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB0aGlzLm9wdGlvbnMpLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5sYXlvdXQodGhpcy5ncmlkdmlldy53aWR0aCwgdGhpcy5ncmlkdmlldy5oZWlnaHQsIHRydWUpO1xuICAgIH1cbiAgICBsYXlvdXQod2lkdGgsIGhlaWdodCwgZm9yY2VSZXNpemUpIHtcbiAgICAgICAgc3VwZXIubGF5b3V0KHdpZHRoLCBoZWlnaHQsIGZvcmNlUmVzaXplKTtcbiAgICAgICAgaWYgKHRoaXMuX2Zsb2F0aW5nR3JvdXBzKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGZsb2F0aW5nIG9mIHRoaXMuX2Zsb2F0aW5nR3JvdXBzKSB7XG4gICAgICAgICAgICAgICAgLy8gZW5zdXJlIGZsb3RpbmcgZ3JvdXBzIHN0YXkgd2l0aGluIHZpc2libGUgYm91bmRhcmllc1xuICAgICAgICAgICAgICAgIGZsb2F0aW5nLm92ZXJsYXkuc2V0Qm91bmRzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9jdXMoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgKF9hID0gdGhpcy5hY3RpdmVHcm91cCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmZvY3VzKCk7XG4gICAgfVxuICAgIGdldEdyb3VwUGFuZWwoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFuZWxzLmZpbmQoKHBhbmVsKSA9PiBwYW5lbC5pZCA9PT0gaWQpO1xuICAgIH1cbiAgICBzZXRBY3RpdmVQYW5lbChwYW5lbCkge1xuICAgICAgICBwYW5lbC5ncm91cC5tb2RlbC5vcGVuUGFuZWwocGFuZWwpO1xuICAgICAgICB0aGlzLmRvU2V0R3JvdXBBbmRQYW5lbEFjdGl2ZShwYW5lbC5ncm91cCk7XG4gICAgfVxuICAgIG1vdmVUb05leHQob3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKCFvcHRpb25zLmdyb3VwKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuYWN0aXZlR3JvdXApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcHRpb25zLmdyb3VwID0gdGhpcy5hY3RpdmVHcm91cDtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5pbmNsdWRlUGFuZWwgJiYgb3B0aW9ucy5ncm91cCkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZ3JvdXAuYWN0aXZlUGFuZWwgIT09XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5ncm91cC5wYW5lbHNbb3B0aW9ucy5ncm91cC5wYW5lbHMubGVuZ3RoIC0gMV0pIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmdyb3VwLm1vZGVsLm1vdmVUb05leHQoeyBzdXBwcmVzc1JvbGw6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxvY2F0aW9uID0gZ2V0R3JpZExvY2F0aW9uKG9wdGlvbnMuZ3JvdXAuZWxlbWVudCk7XG4gICAgICAgIGNvbnN0IG5leHQgPSAoX2EgPSB0aGlzLmdyaWR2aWV3Lm5leHQobG9jYXRpb24pKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudmlldztcbiAgICAgICAgdGhpcy5kb1NldEdyb3VwQW5kUGFuZWxBY3RpdmUobmV4dCk7XG4gICAgfVxuICAgIG1vdmVUb1ByZXZpb3VzKG9wdGlvbnMgPSB7fSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICghb3B0aW9ucy5ncm91cCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmFjdGl2ZUdyb3VwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3B0aW9ucy5ncm91cCA9IHRoaXMuYWN0aXZlR3JvdXA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuaW5jbHVkZVBhbmVsICYmIG9wdGlvbnMuZ3JvdXApIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmdyb3VwLmFjdGl2ZVBhbmVsICE9PSBvcHRpb25zLmdyb3VwLnBhbmVsc1swXSkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuZ3JvdXAubW9kZWwubW92ZVRvUHJldmlvdXMoeyBzdXBwcmVzc1JvbGw6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxvY2F0aW9uID0gZ2V0R3JpZExvY2F0aW9uKG9wdGlvbnMuZ3JvdXAuZWxlbWVudCk7XG4gICAgICAgIGNvbnN0IG5leHQgPSAoX2EgPSB0aGlzLmdyaWR2aWV3LnByZXZpb3VzKGxvY2F0aW9uKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnZpZXc7XG4gICAgICAgIGlmIChuZXh0KSB7XG4gICAgICAgICAgICB0aGlzLmRvU2V0R3JvdXBBbmRQYW5lbEFjdGl2ZShuZXh0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXJpYWxpemUgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIGxheW91dFxuICAgICAqXG4gICAgICogQHJldHVybnMgQSBKU09OIHJlc3ByZXNlbnRhdGlvbiBvZiB0aGUgbGF5b3V0XG4gICAgICovXG4gICAgdG9KU09OKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmdyaWR2aWV3LnNlcmlhbGl6ZSgpO1xuICAgICAgICBjb25zdCBwYW5lbHMgPSB0aGlzLnBhbmVscy5yZWR1Y2UoKGNvbGxlY3Rpb24sIHBhbmVsKSA9PiB7XG4gICAgICAgICAgICBjb2xsZWN0aW9uW3BhbmVsLmlkXSA9IHBhbmVsLnRvSlNPTigpO1xuICAgICAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgICAgIH0sIHt9KTtcbiAgICAgICAgY29uc3QgZmxvYXRzID0gdGhpcy5fZmxvYXRpbmdHcm91cHMubWFwKChncm91cCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBkYXRhOiBncm91cC5ncm91cC50b0pTT04oKSxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogZ3JvdXAub3ZlcmxheS50b0pTT04oKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBwb3BvdXRHcm91cHMgPSB0aGlzLl9wb3BvdXRHcm91cHMubWFwKChncm91cCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBkYXRhOiBncm91cC5wb3BvdXRHcm91cC50b0pTT04oKSxcbiAgICAgICAgICAgICAgICBncmlkUmVmZXJlbmNlR3JvdXA6IGdyb3VwLnJlZmVyZW5jZUdyb3VwLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBncm91cC53aW5kb3cuZGltZW5zaW9ucygpLFxuICAgICAgICAgICAgICAgIHVybDogZ3JvdXAucG9wb3V0R3JvdXAuYXBpLmxvY2F0aW9uLnR5cGUgPT09ICdwb3BvdXQnXG4gICAgICAgICAgICAgICAgICAgID8gZ3JvdXAucG9wb3V0R3JvdXAuYXBpLmxvY2F0aW9uLnBvcG91dFVybFxuICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICAgICAgICBncmlkOiBkYXRhLFxuICAgICAgICAgICAgcGFuZWxzLFxuICAgICAgICAgICAgYWN0aXZlR3JvdXA6IChfYSA9IHRoaXMuYWN0aXZlR3JvdXApID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pZCxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGZsb2F0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXN1bHQuZmxvYXRpbmdHcm91cHMgPSBmbG9hdHM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvcG91dEdyb3Vwcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXN1bHQucG9wb3V0R3JvdXBzID0gcG9wb3V0R3JvdXBzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGZyb21KU09OKGRhdGEpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhICE9PSAnb2JqZWN0JyB8fCBkYXRhID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NlcmlhbGl6ZWQgbGF5b3V0IG11c3QgYmUgYSBub24tbnVsbCBvYmplY3QnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IGdyaWQsIHBhbmVscywgYWN0aXZlR3JvdXAgfSA9IGRhdGE7XG4gICAgICAgIGlmIChncmlkLnJvb3QudHlwZSAhPT0gJ2JyYW5jaCcgfHwgIUFycmF5LmlzQXJyYXkoZ3JpZC5yb290LmRhdGEpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Jvb3QgbXVzdCBiZSBvZiB0eXBlIGJyYW5jaCcpO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyB0YWtlIG5vdGUgb2YgdGhlIGV4aXN0aW5nIGRpbWVuc2lvbnNcbiAgICAgICAgICAgIGNvbnN0IHdpZHRoID0gdGhpcy53aWR0aDtcbiAgICAgICAgICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuaGVpZ2h0O1xuICAgICAgICAgICAgY29uc3QgY3JlYXRlR3JvdXBGcm9tU2VyaWFsaXplZFN0YXRlID0gKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGlkLCBsb2NrZWQsIGhpZGVIZWFkZXIsIHZpZXdzLCBhY3RpdmVWaWV3IH0gPSBkYXRhO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaWQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZ3JvdXAgaWQgbXVzdCBiZSBvZiB0eXBlIHN0cmluZycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBncm91cCA9IHRoaXMuY3JlYXRlR3JvdXAoe1xuICAgICAgICAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgICAgICAgICAgbG9ja2VkOiAhIWxvY2tlZCxcbiAgICAgICAgICAgICAgICAgICAgaGlkZUhlYWRlcjogISFoaWRlSGVhZGVyLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuX29uRGlkQWRkR3JvdXAuZmlyZShncm91cCk7XG4gICAgICAgICAgICAgICAgY29uc3QgY3JlYXRlZFBhbmVscyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2Ygdmlld3MpIHtcbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIFJ1biB0aGUgZGVzZXJpYWxpemVyIHN0ZXAgc2VwZXJhdGVseSBzaW5jZSB0aGlzIG1heSBmYWlsIHRvIGR1ZSBjb3JydXB0ZWQgZXh0ZXJuYWwgc3RhdGUuXG4gICAgICAgICAgICAgICAgICAgICAqIEluIHJ1bm5pbmcgdGhpcyBzZWN0aW9uIGZpcnN0IHdlIGF2b2lkIGZpcmluZyBsb3RzIG9mICdhZGQnIGV2ZW50cyBpbiB0aGUgZXZlbnQgb2YgYSBmYWlsdXJlXG4gICAgICAgICAgICAgICAgICAgICAqIGR1ZSB0byBhIGNvcnJ1cHRpb24gb2YgaW5wdXQgZGF0YS5cbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhbmVsID0gdGhpcy5fZGVzZXJpYWxpemVyLmZyb21KU09OKHBhbmVsc1tjaGlsZF0sIGdyb3VwKTtcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlZFBhbmVscy5wdXNoKHBhbmVsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2aWV3cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYW5lbCA9IGNyZWF0ZWRQYW5lbHNbaV07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzQWN0aXZlID0gdHlwZW9mIGFjdGl2ZVZpZXcgPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVWaWV3ID09PSBwYW5lbC5pZDtcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXAubW9kZWwub3BlblBhbmVsKHBhbmVsLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBza2lwU2V0QWN0aXZlOiAhaXNBY3RpdmUsXG4gICAgICAgICAgICAgICAgICAgICAgICBza2lwU2V0R3JvdXBBY3RpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWdyb3VwLmFjdGl2ZVBhbmVsICYmIGdyb3VwLnBhbmVscy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwLm1vZGVsLm9wZW5QYW5lbChncm91cC5wYW5lbHNbZ3JvdXAucGFuZWxzLmxlbmd0aCAtIDFdLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBza2lwU2V0R3JvdXBBY3RpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZ3JvdXA7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5ncmlkdmlldy5kZXNlcmlhbGl6ZShncmlkLCB7XG4gICAgICAgICAgICAgICAgZnJvbUpTT046IChub2RlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVHcm91cEZyb21TZXJpYWxpemVkU3RhdGUobm9kZS5kYXRhKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmxheW91dCh3aWR0aCwgaGVpZ2h0LCB0cnVlKTtcbiAgICAgICAgICAgIGNvbnN0IHNlcmlhbGl6ZWRGbG9hdGluZ0dyb3VwcyA9IChfYSA9IGRhdGEuZmxvYXRpbmdHcm91cHMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFtdO1xuICAgICAgICAgICAgZm9yIChjb25zdCBzZXJpYWxpemVkRmxvYXRpbmdHcm91cCBvZiBzZXJpYWxpemVkRmxvYXRpbmdHcm91cHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGRhdGEsIHBvc2l0aW9uIH0gPSBzZXJpYWxpemVkRmxvYXRpbmdHcm91cDtcbiAgICAgICAgICAgICAgICBjb25zdCBncm91cCA9IGNyZWF0ZUdyb3VwRnJvbVNlcmlhbGl6ZWRTdGF0ZShkYXRhKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZEZsb2F0aW5nR3JvdXAoZ3JvdXAsIHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uLFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogcG9zaXRpb24ud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogcG9zaXRpb24uaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICBza2lwUmVtb3ZlR3JvdXA6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGluRHJhZ01vZGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc2VyaWFsaXplZFBvcG91dEdyb3VwcyA9IChfYiA9IGRhdGEucG9wb3V0R3JvdXBzKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgc2VyaWFsaXplZFBvcG91dEdyb3VwIG9mIHNlcmlhbGl6ZWRQb3BvdXRHcm91cHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGRhdGEsIHBvc2l0aW9uLCBncmlkUmVmZXJlbmNlR3JvdXAsIHVybCB9ID0gc2VyaWFsaXplZFBvcG91dEdyb3VwO1xuICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwID0gY3JlYXRlR3JvdXBGcm9tU2VyaWFsaXplZFN0YXRlKGRhdGEpO1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkUG9wb3V0R3JvdXAoKF9jID0gKGdyaWRSZWZlcmVuY2VHcm91cFxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMuZ2V0UGFuZWwoZ3JpZFJlZmVyZW5jZUdyb3VwKVxuICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCkpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IGdyb3VwLCB7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbiAhPT0gbnVsbCAmJiBwb3NpdGlvbiAhPT0gdm9pZCAwID8gcG9zaXRpb24gOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIG92ZXJyaWRlUG9wb3V0R3JvdXA6IGdyaWRSZWZlcmVuY2VHcm91cFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBncm91cFxuICAgICAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIHBvcG91dFVybDogdXJsLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCBmbG9hdGluZ0dyb3VwIG9mIHRoaXMuX2Zsb2F0aW5nR3JvdXBzKSB7XG4gICAgICAgICAgICAgICAgZmxvYXRpbmdHcm91cC5vdmVybGF5LnNldEJvdW5kcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBhY3RpdmVHcm91cCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYW5lbCA9IHRoaXMuZ2V0UGFuZWwoYWN0aXZlR3JvdXApO1xuICAgICAgICAgICAgICAgIGlmIChwYW5lbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvU2V0R3JvdXBBbmRQYW5lbEFjdGl2ZShwYW5lbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2RvY2t2aWV3OiBmYWlsZWQgdG8gZGVzZXJpYWxpemUgbGF5b3V0LiBSZXZlcnRpbmcgY2hhbmdlcycsIGVycik7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRha2VzIGFsbCB0aGUgc3VjY2Vzc2Z1bGx5IGNyZWF0ZWQgZ3JvdXBzIGFuZCByZW1vdmUgYWxsIG9mIHRoZWlyIHBhbmVscy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZm9yIChjb25zdCBncm91cCBvZiB0aGlzLmdyb3Vwcykge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcGFuZWwgb2YgZ3JvdXAucGFuZWxzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlUGFuZWwocGFuZWwsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUVtcHR5R3JvdXA6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2tpcERpc3Bvc2U6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRvIHJlbW92ZSBhIGdyb3VwIHdlIGNhbm5vdCBjYWxsIHRoaXMucmVtb3ZlR3JvdXAoLi4uKSBzaW5jZSB0aGlzIG1ha2VzIGFzc3VtcHRpb25zIGFib3V0XG4gICAgICAgICAgICAgKiB0aGUgdW5kZXJseWluZyBIVE1MRWxlbWVudCBleGlzdGluZyBpbiB0aGUgR3JpZHZpZXcuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZvciAoY29uc3QgZ3JvdXAgb2YgdGhpcy5ncm91cHMpIHtcbiAgICAgICAgICAgICAgICBncm91cC5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZ3JvdXBzLmRlbGV0ZShncm91cC5pZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fb25EaWRSZW1vdmVHcm91cC5maXJlKGdyb3VwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGl0ZXJhdGUgb3ZlciBhIHJlYXNzaWduZWQgYXJyYXkgc2luY2Ugb3JpZ2luYWwgYXJyYXkgd2lsbCBiZSBtb2RpZmllZFxuICAgICAgICAgICAgZm9yIChjb25zdCBmbG9hdGluZ0dyb3VwIG9mIFsuLi50aGlzLl9mbG9hdGluZ0dyb3Vwc10pIHtcbiAgICAgICAgICAgICAgICBmbG9hdGluZ0dyb3VwLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGZpcmVzIGNsZWFuLXVwIGV2ZW50cyBhbmQgY2xlYXJzIHRoZSB1bmRlcmx5aW5nIEhUTUwgZ3JpZHZpZXcuXG4gICAgICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIGV2ZW4gdGhvdWdoIHdlIGhhdmUgY2xlYW5lZC11cCB3ZSBzdGlsbCB3YW50IHRvIGluZm9ybSB0aGUgY2FsbGVyIG9mIHRoZWlyIGVycm9yXG4gICAgICAgICAgICAgKiBhbmQgd2UnbGwgZG8gdGhpcyB0aHJvdWdoIHJlLXRocm93aW5nIHRoZSBvcmlnaW5hbCBlcnJvciBzaW5jZSBhZnRlcmFsbCB5b3Ugd291bGRcbiAgICAgICAgICAgICAqIGV4cGVjdCB0cnlpbmcgdG8gbG9hZCBhIGNvcnJ1cHRlZCBsYXlvdXQgdG8gcmVzdWx0IGluIGFuIGVycm9yIGFuZCBub3Qgc2lsZW50bHkgZmFpbC4uLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51cGRhdGVXYXRlcm1hcmsoKTtcbiAgICAgICAgdGhpcy5fb25EaWRMYXlvdXRGcm9tSlNPTi5maXJlKCk7XG4gICAgfVxuICAgIGNsZWFyKCkge1xuICAgICAgICBjb25zdCBncm91cHMgPSBBcnJheS5mcm9tKHRoaXMuX2dyb3Vwcy52YWx1ZXMoKSkubWFwKChfKSA9PiBfLnZhbHVlKTtcbiAgICAgICAgY29uc3QgaGFzQWN0aXZlR3JvdXAgPSAhIXRoaXMuYWN0aXZlR3JvdXA7XG4gICAgICAgIGZvciAoY29uc3QgZ3JvdXAgb2YgZ3JvdXBzKSB7XG4gICAgICAgICAgICAvLyByZW1vdmUgdGhlIGdyb3VwIHdpbGwgYXV0b21hdGljYWxseSByZW1vdmUgdGhlIHBhbmVsc1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVHcm91cChncm91cCwgeyBza2lwQWN0aXZlOiB0cnVlIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNBY3RpdmVHcm91cCkge1xuICAgICAgICAgICAgdGhpcy5kb1NldEdyb3VwQW5kUGFuZWxBY3RpdmUodW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmdyaWR2aWV3LmNsZWFyKCk7XG4gICAgfVxuICAgIGNsb3NlQWxsR3JvdXBzKCkge1xuICAgICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIHRoaXMuX2dyb3Vwcy5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IFtfLCBncm91cF0gPSBlbnRyeTtcbiAgICAgICAgICAgIGdyb3VwLnZhbHVlLm1vZGVsLmNsb3NlQWxsUGFuZWxzKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYWRkUGFuZWwob3B0aW9ucykge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBpZiAodGhpcy5wYW5lbHMuZmluZCgoXykgPT4gXy5pZCA9PT0gb3B0aW9ucy5pZCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgcGFuZWwgd2l0aCBpZCAke29wdGlvbnMuaWR9IGFscmVhZHkgZXhpc3RzYCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlZmVyZW5jZUdyb3VwO1xuICAgICAgICBpZiAob3B0aW9ucy5wb3NpdGlvbiAmJiBvcHRpb25zLmZsb2F0aW5nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3lvdSBjYW4gb25seSBwcm92aWRlIG9uZSBvZjogcG9zaXRpb24sIGZsb2F0aW5nIGFzIGFyZ3VtZW50cyB0byAuYWRkUGFuZWwoLi4uKScpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGluaXRpYWwgPSB7XG4gICAgICAgICAgICB3aWR0aDogb3B0aW9ucy5pbml0aWFsV2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IG9wdGlvbnMuaW5pdGlhbEhlaWdodCxcbiAgICAgICAgfTtcbiAgICAgICAgbGV0IGluZGV4O1xuICAgICAgICBpZiAob3B0aW9ucy5wb3NpdGlvbikge1xuICAgICAgICAgICAgaWYgKGlzUGFuZWxPcHRpb25zV2l0aFBhbmVsKG9wdGlvbnMucG9zaXRpb24pKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVmZXJlbmNlUGFuZWwgPSB0eXBlb2Ygb3B0aW9ucy5wb3NpdGlvbi5yZWZlcmVuY2VQYW5lbCA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICAgICAgPyB0aGlzLmdldEdyb3VwUGFuZWwob3B0aW9ucy5wb3NpdGlvbi5yZWZlcmVuY2VQYW5lbClcbiAgICAgICAgICAgICAgICAgICAgOiBvcHRpb25zLnBvc2l0aW9uLnJlZmVyZW5jZVBhbmVsO1xuICAgICAgICAgICAgICAgIGluZGV4ID0gb3B0aW9ucy5wb3NpdGlvbi5pbmRleDtcbiAgICAgICAgICAgICAgICBpZiAoIXJlZmVyZW5jZVBhbmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgcmVmZXJlbmNlUGFuZWwgJyR7b3B0aW9ucy5wb3NpdGlvbi5yZWZlcmVuY2VQYW5lbH0nIGRvZXMgbm90IGV4aXN0YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlZmVyZW5jZUdyb3VwID0gdGhpcy5maW5kR3JvdXAocmVmZXJlbmNlUGFuZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNQYW5lbE9wdGlvbnNXaXRoR3JvdXAob3B0aW9ucy5wb3NpdGlvbikpIHtcbiAgICAgICAgICAgICAgICByZWZlcmVuY2VHcm91cCA9XG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBvcHRpb25zLnBvc2l0aW9uLnJlZmVyZW5jZUdyb3VwID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgICAgICAgICAgPyAoX2EgPSB0aGlzLl9ncm91cHMuZ2V0KG9wdGlvbnMucG9zaXRpb24ucmVmZXJlbmNlR3JvdXApKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgIDogb3B0aW9ucy5wb3NpdGlvbi5yZWZlcmVuY2VHcm91cDtcbiAgICAgICAgICAgICAgICBpbmRleCA9IG9wdGlvbnMucG9zaXRpb24uaW5kZXg7XG4gICAgICAgICAgICAgICAgaWYgKCFyZWZlcmVuY2VHcm91cCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHJlZmVyZW5jZUdyb3VwICcke29wdGlvbnMucG9zaXRpb24ucmVmZXJlbmNlR3JvdXB9JyBkb2VzIG5vdCBleGlzdGApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwID0gdGhpcy5vcnRob2dvbmFsaXplKGRpcmVjdGlvblRvUG9zaXRpb24ob3B0aW9ucy5wb3NpdGlvbi5kaXJlY3Rpb24pKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwYW5lbCA9IHRoaXMuY3JlYXRlUGFuZWwob3B0aW9ucywgZ3JvdXApO1xuICAgICAgICAgICAgICAgIGdyb3VwLm1vZGVsLm9wZW5QYW5lbChwYW5lbCwge1xuICAgICAgICAgICAgICAgICAgICBza2lwU2V0QWN0aXZlOiBvcHRpb25zLmluYWN0aXZlLFxuICAgICAgICAgICAgICAgICAgICBza2lwU2V0R3JvdXBBY3RpdmU6IG9wdGlvbnMuaW5hY3RpdmUsXG4gICAgICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucy5pbmFjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvU2V0R3JvdXBBbmRQYW5lbEFjdGl2ZShncm91cCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGdyb3VwLmFwaS5zZXRTaXplKHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBpbml0aWFsID09PSBudWxsIHx8IGluaXRpYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGluaXRpYWwuaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogaW5pdGlhbCA9PT0gbnVsbCB8fCBpbml0aWFsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpbml0aWFsLndpZHRoLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBwYW5lbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlZmVyZW5jZUdyb3VwID0gdGhpcy5hY3RpdmVHcm91cDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcGFuZWw7XG4gICAgICAgIGlmIChyZWZlcmVuY2VHcm91cCkge1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gdG9UYXJnZXQoKChfYiA9IG9wdGlvbnMucG9zaXRpb24pID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5kaXJlY3Rpb24pIHx8ICd3aXRoaW4nKTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmZsb2F0aW5nKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZ3JvdXAgPSB0aGlzLmNyZWF0ZUdyb3VwKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fb25EaWRBZGRHcm91cC5maXJlKGdyb3VwKTtcbiAgICAgICAgICAgICAgICBjb25zdCBmbG9hdGluZ0dyb3VwT3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zLmZsb2F0aW5nID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmZsb2F0aW5nICE9PSBudWxsXG4gICAgICAgICAgICAgICAgICAgID8gb3B0aW9ucy5mbG9hdGluZ1xuICAgICAgICAgICAgICAgICAgICA6IHt9O1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkRmxvYXRpbmdHcm91cChncm91cCwgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBmbG9hdGluZ0dyb3VwT3B0aW9ucyksIHsgaW5EcmFnTW9kZTogZmFsc2UsIHNraXBSZW1vdmVHcm91cDogdHJ1ZSwgc2tpcEFjdGl2ZUdyb3VwOiB0cnVlIH0pKTtcbiAgICAgICAgICAgICAgICBwYW5lbCA9IHRoaXMuY3JlYXRlUGFuZWwob3B0aW9ucywgZ3JvdXApO1xuICAgICAgICAgICAgICAgIGdyb3VwLm1vZGVsLm9wZW5QYW5lbChwYW5lbCwge1xuICAgICAgICAgICAgICAgICAgICBza2lwU2V0QWN0aXZlOiBvcHRpb25zLmluYWN0aXZlLFxuICAgICAgICAgICAgICAgICAgICBza2lwU2V0R3JvdXBBY3RpdmU6IG9wdGlvbnMuaW5hY3RpdmUsXG4gICAgICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocmVmZXJlbmNlR3JvdXAuYXBpLmxvY2F0aW9uLnR5cGUgPT09ICdmbG9hdGluZycgfHxcbiAgICAgICAgICAgICAgICB0YXJnZXQgPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICAgICAgcGFuZWwgPSB0aGlzLmNyZWF0ZVBhbmVsKG9wdGlvbnMsIHJlZmVyZW5jZUdyb3VwKTtcbiAgICAgICAgICAgICAgICByZWZlcmVuY2VHcm91cC5tb2RlbC5vcGVuUGFuZWwocGFuZWwsIHtcbiAgICAgICAgICAgICAgICAgICAgc2tpcFNldEFjdGl2ZTogb3B0aW9ucy5pbmFjdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgc2tpcFNldEdyb3VwQWN0aXZlOiBvcHRpb25zLmluYWN0aXZlLFxuICAgICAgICAgICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZWZlcmVuY2VHcm91cC5hcGkuc2V0U2l6ZSh7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBpbml0aWFsID09PSBudWxsIHx8IGluaXRpYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGluaXRpYWwud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogaW5pdGlhbCA9PT0gbnVsbCB8fCBpbml0aWFsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpbml0aWFsLmhlaWdodCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoIW9wdGlvbnMuaW5hY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb1NldEdyb3VwQW5kUGFuZWxBY3RpdmUocmVmZXJlbmNlR3JvdXApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2F0aW9uID0gZ2V0R3JpZExvY2F0aW9uKHJlZmVyZW5jZUdyb3VwLmVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlbGF0aXZlTG9jYXRpb24gPSBnZXRSZWxhdGl2ZUxvY2F0aW9uKHRoaXMuZ3JpZHZpZXcub3JpZW50YXRpb24sIGxvY2F0aW9uLCB0YXJnZXQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwID0gdGhpcy5jcmVhdGVHcm91cEF0TG9jYXRpb24ocmVsYXRpdmVMb2NhdGlvbiwgdGhpcy5vcmllbnRhdGlvbkF0TG9jYXRpb24ocmVsYXRpdmVMb2NhdGlvbikgPT09XG4gICAgICAgICAgICAgICAgICAgIE9yaWVudGF0aW9uLlZFUlRJQ0FMXG4gICAgICAgICAgICAgICAgICAgID8gaW5pdGlhbCA9PT0gbnVsbCB8fCBpbml0aWFsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpbml0aWFsLmhlaWdodFxuICAgICAgICAgICAgICAgICAgICA6IGluaXRpYWwgPT09IG51bGwgfHwgaW5pdGlhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5pdGlhbC53aWR0aCk7XG4gICAgICAgICAgICAgICAgcGFuZWwgPSB0aGlzLmNyZWF0ZVBhbmVsKG9wdGlvbnMsIGdyb3VwKTtcbiAgICAgICAgICAgICAgICBncm91cC5tb2RlbC5vcGVuUGFuZWwocGFuZWwsIHtcbiAgICAgICAgICAgICAgICAgICAgc2tpcFNldEFjdGl2ZTogb3B0aW9ucy5pbmFjdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgc2tpcFNldEdyb3VwQWN0aXZlOiBvcHRpb25zLmluYWN0aXZlLFxuICAgICAgICAgICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoIW9wdGlvbnMuaW5hY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb1NldEdyb3VwQW5kUGFuZWxBY3RpdmUoZ3JvdXApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvcHRpb25zLmZsb2F0aW5nKSB7XG4gICAgICAgICAgICBjb25zdCBncm91cCA9IHRoaXMuY3JlYXRlR3JvdXAoKTtcbiAgICAgICAgICAgIHRoaXMuX29uRGlkQWRkR3JvdXAuZmlyZShncm91cCk7XG4gICAgICAgICAgICBjb25zdCBjb29yZGluYXRlcyA9IHR5cGVvZiBvcHRpb25zLmZsb2F0aW5nID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgICAgIG9wdGlvbnMuZmxvYXRpbmcgIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IG9wdGlvbnMuZmxvYXRpbmdcbiAgICAgICAgICAgICAgICA6IHt9O1xuICAgICAgICAgICAgdGhpcy5hZGRGbG9hdGluZ0dyb3VwKGdyb3VwLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGNvb3JkaW5hdGVzKSwgeyBpbkRyYWdNb2RlOiBmYWxzZSwgc2tpcFJlbW92ZUdyb3VwOiB0cnVlLCBza2lwQWN0aXZlR3JvdXA6IHRydWUgfSkpO1xuICAgICAgICAgICAgcGFuZWwgPSB0aGlzLmNyZWF0ZVBhbmVsKG9wdGlvbnMsIGdyb3VwKTtcbiAgICAgICAgICAgIGdyb3VwLm1vZGVsLm9wZW5QYW5lbChwYW5lbCwge1xuICAgICAgICAgICAgICAgIHNraXBTZXRBY3RpdmU6IG9wdGlvbnMuaW5hY3RpdmUsXG4gICAgICAgICAgICAgICAgc2tpcFNldEdyb3VwQWN0aXZlOiBvcHRpb25zLmluYWN0aXZlLFxuICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBncm91cCA9IHRoaXMuY3JlYXRlR3JvdXBBdExvY2F0aW9uKFswXSwgdGhpcy5ncmlkdmlldy5vcmllbnRhdGlvbiA9PT0gT3JpZW50YXRpb24uVkVSVElDQUxcbiAgICAgICAgICAgICAgICA/IGluaXRpYWwgPT09IG51bGwgfHwgaW5pdGlhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5pdGlhbC5oZWlnaHRcbiAgICAgICAgICAgICAgICA6IGluaXRpYWwgPT09IG51bGwgfHwgaW5pdGlhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5pdGlhbC53aWR0aCk7XG4gICAgICAgICAgICBwYW5lbCA9IHRoaXMuY3JlYXRlUGFuZWwob3B0aW9ucywgZ3JvdXApO1xuICAgICAgICAgICAgZ3JvdXAubW9kZWwub3BlblBhbmVsKHBhbmVsLCB7XG4gICAgICAgICAgICAgICAgc2tpcFNldEFjdGl2ZTogb3B0aW9ucy5pbmFjdGl2ZSxcbiAgICAgICAgICAgICAgICBza2lwU2V0R3JvdXBBY3RpdmU6IG9wdGlvbnMuaW5hY3RpdmUsXG4gICAgICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5pbmFjdGl2ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZG9TZXRHcm91cEFuZFBhbmVsQWN0aXZlKGdyb3VwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFuZWw7XG4gICAgfVxuICAgIHJlbW92ZVBhbmVsKHBhbmVsLCBvcHRpb25zID0ge1xuICAgICAgICByZW1vdmVFbXB0eUdyb3VwOiB0cnVlLFxuICAgIH0pIHtcbiAgICAgICAgY29uc3QgZ3JvdXAgPSBwYW5lbC5ncm91cDtcbiAgICAgICAgaWYgKCFncm91cCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjYW5ub3QgcmVtb3ZlIHBhbmVsICR7cGFuZWwuaWR9LiBpdCdzIG1pc3NpbmcgYSBncm91cC5gKTtcbiAgICAgICAgfVxuICAgICAgICBncm91cC5tb2RlbC5yZW1vdmVQYW5lbChwYW5lbCwge1xuICAgICAgICAgICAgc2tpcFNldEFjdGl2ZUdyb3VwOiBvcHRpb25zLnNraXBTZXRBY3RpdmVHcm91cCxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghb3B0aW9ucy5za2lwRGlzcG9zZSkge1xuICAgICAgICAgICAgcGFuZWwuZ3JvdXAubW9kZWwucmVuZGVyQ29udGFpbmVyLmRldGF0Y2gocGFuZWwpO1xuICAgICAgICAgICAgcGFuZWwuZGlzcG9zZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChncm91cC5zaXplID09PSAwICYmIG9wdGlvbnMucmVtb3ZlRW1wdHlHcm91cCkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVHcm91cChncm91cCwgeyBza2lwQWN0aXZlOiBvcHRpb25zLnNraXBTZXRBY3RpdmVHcm91cCB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjcmVhdGVXYXRlcm1hcmtDb21wb25lbnQoKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY3JlYXRlV2F0ZXJtYXJrQ29tcG9uZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmNyZWF0ZVdhdGVybWFya0NvbXBvbmVudCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgV2F0ZXJtYXJrKCk7XG4gICAgfVxuICAgIHVwZGF0ZVdhdGVybWFyaygpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgaWYgKHRoaXMuZ3JvdXBzLmZpbHRlcigoeCkgPT4geC5hcGkubG9jYXRpb24udHlwZSA9PT0gJ2dyaWQnICYmIHguYXBpLmlzVmlzaWJsZSkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMud2F0ZXJtYXJrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy53YXRlcm1hcmsgPSB0aGlzLmNyZWF0ZVdhdGVybWFya0NvbXBvbmVudCgpO1xuICAgICAgICAgICAgICAgIHRoaXMud2F0ZXJtYXJrLmluaXQoe1xuICAgICAgICAgICAgICAgICAgICBjb250YWluZXJBcGk6IG5ldyBEb2Nrdmlld0FwaSh0aGlzKSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb25zdCB3YXRlcm1hcmtDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICB3YXRlcm1hcmtDb250YWluZXIuY2xhc3NOYW1lID0gJ2R2LXdhdGVybWFyay1jb250YWluZXInO1xuICAgICAgICAgICAgICAgIGFkZFRlc3RJZCh3YXRlcm1hcmtDb250YWluZXIsICd3YXRlcm1hcmstY29tcG9uZW50Jyk7XG4gICAgICAgICAgICAgICAgd2F0ZXJtYXJrQ29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMud2F0ZXJtYXJrLmVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIHRoaXMuZ3JpZHZpZXcuZWxlbWVudC5hcHBlbmRDaGlsZCh3YXRlcm1hcmtDb250YWluZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMud2F0ZXJtYXJrKSB7XG4gICAgICAgICAgICB0aGlzLndhdGVybWFyay5lbGVtZW50LnBhcmVudEVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLndhdGVybWFyaykuZGlzcG9zZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EpO1xuICAgICAgICAgICAgdGhpcy53YXRlcm1hcmsgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFkZEdyb3VwKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICAgICAgbGV0IHJlZmVyZW5jZUdyb3VwO1xuICAgICAgICAgICAgaWYgKGlzR3JvdXBPcHRpb25zV2l0aFBhbmVsKG9wdGlvbnMpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVmZXJlbmNlUGFuZWwgPSB0eXBlb2Ygb3B0aW9ucy5yZWZlcmVuY2VQYW5lbCA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICAgICAgPyB0aGlzLnBhbmVscy5maW5kKChwYW5lbCkgPT4gcGFuZWwuaWQgPT09IG9wdGlvbnMucmVmZXJlbmNlUGFuZWwpXG4gICAgICAgICAgICAgICAgICAgIDogb3B0aW9ucy5yZWZlcmVuY2VQYW5lbDtcbiAgICAgICAgICAgICAgICBpZiAoIXJlZmVyZW5jZVBhbmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgcmVmZXJlbmNlIHBhbmVsICR7b3B0aW9ucy5yZWZlcmVuY2VQYW5lbH0gZG9lcyBub3QgZXhpc3RgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVmZXJlbmNlR3JvdXAgPSB0aGlzLmZpbmRHcm91cChyZWZlcmVuY2VQYW5lbCk7XG4gICAgICAgICAgICAgICAgaWYgKCFyZWZlcmVuY2VHcm91cCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHJlZmVyZW5jZSBncm91cCBmb3IgcmVmZXJlbmNlIHBhbmVsICR7b3B0aW9ucy5yZWZlcmVuY2VQYW5lbH0gZG9lcyBub3QgZXhpc3RgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc0dyb3VwT3B0aW9uc1dpdGhHcm91cChvcHRpb25zKSkge1xuICAgICAgICAgICAgICAgIHJlZmVyZW5jZUdyb3VwID1cbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIG9wdGlvbnMucmVmZXJlbmNlR3JvdXAgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICAgICAgICAgICAgICA/IChfYSA9IHRoaXMuX2dyb3Vwcy5nZXQob3B0aW9ucy5yZWZlcmVuY2VHcm91cCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS52YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBvcHRpb25zLnJlZmVyZW5jZUdyb3VwO1xuICAgICAgICAgICAgICAgIGlmICghcmVmZXJlbmNlR3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGByZWZlcmVuY2UgZ3JvdXAgJHtvcHRpb25zLnJlZmVyZW5jZUdyb3VwfSBkb2VzIG5vdCBleGlzdGApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwID0gdGhpcy5vcnRob2dvbmFsaXplKGRpcmVjdGlvblRvUG9zaXRpb24ob3B0aW9ucy5kaXJlY3Rpb24pKTtcbiAgICAgICAgICAgICAgICBpZiAoIW9wdGlvbnMuc2tpcFNldEFjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvU2V0R3JvdXBBbmRQYW5lbEFjdGl2ZShncm91cCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBncm91cDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IHRvVGFyZ2V0KG9wdGlvbnMuZGlyZWN0aW9uIHx8ICd3aXRoaW4nKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2F0aW9uID0gZ2V0R3JpZExvY2F0aW9uKHJlZmVyZW5jZUdyb3VwLmVsZW1lbnQpO1xuICAgICAgICAgICAgY29uc3QgcmVsYXRpdmVMb2NhdGlvbiA9IGdldFJlbGF0aXZlTG9jYXRpb24odGhpcy5ncmlkdmlldy5vcmllbnRhdGlvbiwgbG9jYXRpb24sIHRhcmdldCk7XG4gICAgICAgICAgICBjb25zdCBncm91cCA9IHRoaXMuY3JlYXRlR3JvdXAob3B0aW9ucyk7XG4gICAgICAgICAgICBjb25zdCBzaXplID0gdGhpcy5nZXRMb2NhdGlvbk9yaWVudGF0aW9uKHJlbGF0aXZlTG9jYXRpb24pID09PVxuICAgICAgICAgICAgICAgIE9yaWVudGF0aW9uLlZFUlRJQ0FMXG4gICAgICAgICAgICAgICAgPyBvcHRpb25zLmluaXRpYWxIZWlnaHRcbiAgICAgICAgICAgICAgICA6IG9wdGlvbnMuaW5pdGlhbFdpZHRoO1xuICAgICAgICAgICAgdGhpcy5kb0FkZEdyb3VwKGdyb3VwLCByZWxhdGl2ZUxvY2F0aW9uLCBzaXplKTtcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5za2lwU2V0QWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kb1NldEdyb3VwQW5kUGFuZWxBY3RpdmUoZ3JvdXApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGdyb3VwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZ3JvdXAgPSB0aGlzLmNyZWF0ZUdyb3VwKG9wdGlvbnMpO1xuICAgICAgICAgICAgdGhpcy5kb0FkZEdyb3VwKGdyb3VwKTtcbiAgICAgICAgICAgIHRoaXMuZG9TZXRHcm91cEFuZFBhbmVsQWN0aXZlKGdyb3VwKTtcbiAgICAgICAgICAgIHJldHVybiBncm91cDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRMb2NhdGlvbk9yaWVudGF0aW9uKGxvY2F0aW9uKSB7XG4gICAgICAgIHJldHVybiBsb2NhdGlvbi5sZW5ndGggJSAyID09IDAgJiZcbiAgICAgICAgICAgIHRoaXMuZ3JpZHZpZXcub3JpZW50YXRpb24gPT09IE9yaWVudGF0aW9uLkhPUklaT05UQUxcbiAgICAgICAgICAgID8gT3JpZW50YXRpb24uSE9SSVpPTlRBTFxuICAgICAgICAgICAgOiBPcmllbnRhdGlvbi5WRVJUSUNBTDtcbiAgICB9XG4gICAgcmVtb3ZlR3JvdXAoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5kb1JlbW92ZUdyb3VwKGdyb3VwLCBvcHRpb25zKTtcbiAgICB9XG4gICAgZG9SZW1vdmVHcm91cChncm91cCwgb3B0aW9ucykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IHBhbmVscyA9IFsuLi5ncm91cC5wYW5lbHNdOyAvLyByZWFzc2lnbiBzaW5jZSBncm91cCBwYW5lbHMgd2lsbCBtdXRhdGVcbiAgICAgICAgaWYgKCEob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnNraXBEaXNwb3NlKSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBwYW5lbCBvZiBwYW5lbHMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZVBhbmVsKHBhbmVsLCB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUVtcHR5R3JvdXA6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBza2lwRGlzcG9zZTogKF9hID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnNraXBEaXNwb3NlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhY3RpdmVQYW5lbCA9IHRoaXMuYWN0aXZlUGFuZWw7XG4gICAgICAgIGlmIChncm91cC5hcGkubG9jYXRpb24udHlwZSA9PT0gJ2Zsb2F0aW5nJykge1xuICAgICAgICAgICAgY29uc3QgZmxvYXRpbmdHcm91cCA9IHRoaXMuX2Zsb2F0aW5nR3JvdXBzLmZpbmQoKF8pID0+IF8uZ3JvdXAgPT09IGdyb3VwKTtcbiAgICAgICAgICAgIGlmIChmbG9hdGluZ0dyb3VwKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnNraXBEaXNwb3NlKSkge1xuICAgICAgICAgICAgICAgICAgICBmbG9hdGluZ0dyb3VwLmdyb3VwLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZ3JvdXBzLmRlbGV0ZShncm91cC5pZCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29uRGlkUmVtb3ZlR3JvdXAuZmlyZShncm91cCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlbW92ZSh0aGlzLl9mbG9hdGluZ0dyb3VwcywgZmxvYXRpbmdHcm91cCk7XG4gICAgICAgICAgICAgICAgZmxvYXRpbmdHcm91cC5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgaWYgKCEob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnNraXBBY3RpdmUpICYmIHRoaXMuX2FjdGl2ZUdyb3VwID09PSBncm91cCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBncm91cHMgPSBBcnJheS5mcm9tKHRoaXMuX2dyb3Vwcy52YWx1ZXMoKSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9TZXRHcm91cEFuZFBhbmVsQWN0aXZlKGdyb3Vwcy5sZW5ndGggPiAwID8gZ3JvdXBzWzBdLnZhbHVlIDogdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZsb2F0aW5nR3JvdXAuZ3JvdXA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ZhaWxlZCB0byBmaW5kIGZsb2F0aW5nIGdyb3VwJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdyb3VwLmFwaS5sb2NhdGlvbi50eXBlID09PSAncG9wb3V0Jykge1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRHcm91cCA9IHRoaXMuX3BvcG91dEdyb3Vwcy5maW5kKChfKSA9PiBfLnBvcG91dEdyb3VwID09PSBncm91cCk7XG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWRHcm91cCkge1xuICAgICAgICAgICAgICAgIGlmICghKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5za2lwRGlzcG9zZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnNraXBQb3BvdXRBc3NvY2lhdGVkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVmR3JvdXAgPSBzZWxlY3RlZEdyb3VwLnJlZmVyZW5jZUdyb3VwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLmdldFBhbmVsKHNlbGVjdGVkR3JvdXAucmVmZXJlbmNlR3JvdXApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVmR3JvdXAgJiYgcmVmR3JvdXAucGFuZWxzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlR3JvdXAocmVmR3JvdXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkR3JvdXAucG9wb3V0R3JvdXAuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ncm91cHMuZGVsZXRlKGdyb3VwLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25EaWRSZW1vdmVHcm91cC5maXJlKGdyb3VwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVtb3ZlKHRoaXMuX3BvcG91dEdyb3Vwcywgc2VsZWN0ZWRHcm91cCk7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVtb3ZlZEdyb3VwID0gc2VsZWN0ZWRHcm91cC5kaXNwb3NhYmxlLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICBpZiAoIShvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuc2tpcFBvcG91dFJldHVybikgJiYgcmVtb3ZlZEdyb3VwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9BZGRHcm91cChyZW1vdmVkR3JvdXAsIFswXSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9TZXRHcm91cEFuZFBhbmVsQWN0aXZlKHJlbW92ZWRHcm91cCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5za2lwQWN0aXZlKSAmJiB0aGlzLl9hY3RpdmVHcm91cCA9PT0gZ3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZ3JvdXBzID0gQXJyYXkuZnJvbSh0aGlzLl9ncm91cHMudmFsdWVzKCkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvU2V0R3JvdXBBbmRQYW5lbEFjdGl2ZShncm91cHMubGVuZ3RoID4gMCA/IGdyb3Vwc1swXS52YWx1ZSA6IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlV2F0ZXJtYXJrKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGVkR3JvdXAucG9wb3V0R3JvdXA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ZhaWxlZCB0byBmaW5kIHBvcG91dCBncm91cCcpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlID0gc3VwZXIuZG9SZW1vdmVHcm91cChncm91cCwgb3B0aW9ucyk7XG4gICAgICAgIGlmICghKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5za2lwQWN0aXZlKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYWN0aXZlUGFuZWwgIT09IGFjdGl2ZVBhbmVsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb25EaWRBY3RpdmVQYW5lbENoYW5nZS5maXJlKHRoaXMuYWN0aXZlUGFuZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZTtcbiAgICB9XG4gICAgbW92aW5nTG9jayhmdW5jKSB7XG4gICAgICAgIGNvbnN0IGlzTW92aW5nID0gdGhpcy5fbW92aW5nO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5fbW92aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBmdW5jKCk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLl9tb3ZpbmcgPSBpc01vdmluZztcbiAgICAgICAgfVxuICAgIH1cbiAgICBtb3ZlR3JvdXBPclBhbmVsKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBkZXN0aW5hdGlvbkdyb3VwID0gb3B0aW9ucy50by5ncm91cDtcbiAgICAgICAgY29uc3Qgc291cmNlR3JvdXBJZCA9IG9wdGlvbnMuZnJvbS5ncm91cElkO1xuICAgICAgICBjb25zdCBzb3VyY2VJdGVtSWQgPSBvcHRpb25zLmZyb20ucGFuZWxJZDtcbiAgICAgICAgY29uc3QgZGVzdGluYXRpb25UYXJnZXQgPSBvcHRpb25zLnRvLnBvc2l0aW9uO1xuICAgICAgICBjb25zdCBkZXN0aW5hdGlvbkluZGV4ID0gb3B0aW9ucy50by5pbmRleDtcbiAgICAgICAgY29uc3Qgc291cmNlR3JvdXAgPSBzb3VyY2VHcm91cElkXG4gICAgICAgICAgICA/IChfYSA9IHRoaXMuX2dyb3Vwcy5nZXQoc291cmNlR3JvdXBJZCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS52YWx1ZVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIGlmICghc291cmNlR3JvdXApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGZpbmQgZ3JvdXAgaWQgJHtzb3VyY2VHcm91cElkfWApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzb3VyY2VJdGVtSWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBNb3ZpbmcgYW4gZW50aXJlIGdyb3VwIGludG8gYW5vdGhlciBncm91cFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLm1vdmVHcm91cCh7XG4gICAgICAgICAgICAgICAgZnJvbTogeyBncm91cDogc291cmNlR3JvdXAgfSxcbiAgICAgICAgICAgICAgICB0bzoge1xuICAgICAgICAgICAgICAgICAgICBncm91cDogZGVzdGluYXRpb25Hcm91cCxcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGRlc3RpbmF0aW9uVGFyZ2V0LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRlc3RpbmF0aW9uVGFyZ2V0IHx8IGRlc3RpbmF0aW9uVGFyZ2V0ID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBEcm9wcGluZyBhIHBhbmVsIHdpdGhpbiBhbm90aGVyIGdyb3VwXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnN0IHJlbW92ZWRQYW5lbCA9IHRoaXMubW92aW5nTG9jaygoKSA9PiBzb3VyY2VHcm91cC5tb2RlbC5yZW1vdmVQYW5lbChzb3VyY2VJdGVtSWQsIHtcbiAgICAgICAgICAgICAgICBza2lwU2V0QWN0aXZlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBza2lwU2V0QWN0aXZlR3JvdXA6IHRydWUsXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBpZiAoIXJlbW92ZWRQYW5lbCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gcGFuZWwgd2l0aCBpZCAke3NvdXJjZUl0ZW1JZH1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzb3VyY2VHcm91cC5tb2RlbC5zaXplID09PSAwKSB7XG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZlIHRoZSBncm91cCBhbmQgZG8gbm90IHNldCBhIG5ldyBncm91cCBhcyBhY3RpdmVcbiAgICAgICAgICAgICAgICB0aGlzLmRvUmVtb3ZlR3JvdXAoc291cmNlR3JvdXAsIHsgc2tpcEFjdGl2ZTogdHJ1ZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubW92aW5nTG9jaygoKSA9PiBkZXN0aW5hdGlvbkdyb3VwLm1vZGVsLm9wZW5QYW5lbChyZW1vdmVkUGFuZWwsIHtcbiAgICAgICAgICAgICAgICBpbmRleDogZGVzdGluYXRpb25JbmRleCxcbiAgICAgICAgICAgICAgICBza2lwU2V0R3JvdXBBY3RpdmU6IHRydWUsXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB0aGlzLmRvU2V0R3JvdXBBbmRQYW5lbEFjdGl2ZShkZXN0aW5hdGlvbkdyb3VwKTtcbiAgICAgICAgICAgIHRoaXMuX29uRGlkTW92ZVBhbmVsLmZpcmUoe1xuICAgICAgICAgICAgICAgIHBhbmVsOiByZW1vdmVkUGFuZWwsXG4gICAgICAgICAgICAgICAgZnJvbTogc291cmNlR3JvdXAsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRHJvcHBpbmcgYSBwYW5lbCB0byB0aGUgZXh0cmVtaXRpZXMgb2YgYSBncm91cCB3aGljaCB3aWxsIHBsYWNlIHRoYXQgcGFuZWxcbiAgICAgICAgICAgICAqIGludG8gYW4gYWRqYWNlbnQgZ3JvdXBcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3QgcmVmZXJlbmNlTG9jYXRpb24gPSBnZXRHcmlkTG9jYXRpb24oZGVzdGluYXRpb25Hcm91cC5lbGVtZW50KTtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldExvY2F0aW9uID0gZ2V0UmVsYXRpdmVMb2NhdGlvbih0aGlzLmdyaWR2aWV3Lm9yaWVudGF0aW9uLCByZWZlcmVuY2VMb2NhdGlvbiwgZGVzdGluYXRpb25UYXJnZXQpO1xuICAgICAgICAgICAgaWYgKHNvdXJjZUdyb3VwLnNpemUgPCAyKSB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogSWYgd2UgYXJlIG1vdmluZyBmcm9tIGEgZ3JvdXAgd2hpY2ggb25seSBoYXMgb25lIHBhbmVsIGxlZnQgd2Ugd2lsbCBjb25zaWRlclxuICAgICAgICAgICAgICAgICAqIG1vdmluZyB0aGUgZ3JvdXAgaXRzZWxmIHJhdGhlciB0aGFuIG1vdmluZyB0aGUgcGFuZWwgaW50byBhIG5ld2x5IGNyZWF0ZWQgZ3JvdXBcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBjb25zdCBbdGFyZ2V0UGFyZW50TG9jYXRpb24sIHRvXSA9IHRhaWwodGFyZ2V0TG9jYXRpb24pO1xuICAgICAgICAgICAgICAgIGlmIChzb3VyY2VHcm91cC5hcGkubG9jYXRpb24udHlwZSA9PT0gJ2dyaWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNvdXJjZUxvY2F0aW9uID0gZ2V0R3JpZExvY2F0aW9uKHNvdXJjZUdyb3VwLmVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBbc291cmNlUGFyZW50TG9jYXRpb24sIGZyb21dID0gdGFpbChzb3VyY2VMb2NhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZXF1ZW5jZUVxdWFscyhzb3VyY2VQYXJlbnRMb2NhdGlvbiwgdGFyZ2V0UGFyZW50TG9jYXRpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzcGVjaWFsIGNhc2Ugd2hlbiAnc3dhcHBpbmcnIHR3byB2aWV3cyB3aXRoaW4gc2FtZSBncmlkIGxvY2F0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBhIGdyb3VwIGhhcyBvbmUgdGFiIC0gd2UgYXJlIGVzc2VudGlhbGx5IG1vdmluZyB0aGUgJ2dyb3VwJ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2hpY2ggaXMgZXF1aXZhbGVudCB0byBzd2FwcGluZyB0d28gdmlld3MgaW4gdGhpcyBjYXNlXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdyaWR2aWV3Lm1vdmVWaWV3KHNvdXJjZVBhcmVudExvY2F0aW9uLCBmcm9tLCB0byk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vbkRpZE1vdmVQYW5lbC5maXJlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYW5lbDogdGhpcy5nZXRHcm91cFBhbmVsKHNvdXJjZUl0ZW1JZCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogc291cmNlR3JvdXAsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc291cmNlR3JvdXAuYXBpLmxvY2F0aW9uLnR5cGUgPT09ICdwb3BvdXQnKSB7XG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiB0aGUgc291cmNlIGdyb3VwIGlzIGEgcG9wb3V0IGdyb3VwIHdpdGggYSBzaW5nbGUgcGFuZWxcbiAgICAgICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgICAgICogMS4gcmVtb3ZlIHRoZSBwYW5lbCBmcm9tIHRoZSBncm91cCB3aXRob3V0IHRyaWdnZXJpbmcgYW55IGV2ZW50c1xuICAgICAgICAgICAgICAgICAgICAgKiAyLiByZW1vdmUgdGhlIHBvcG91dCBncm91cFxuICAgICAgICAgICAgICAgICAgICAgKiAzLiBjcmVhdGUgYSBuZXcgZ3JvdXAgYXQgdGhlIHJlcXVlc3RlZCBsb2NhdGlvbiBhbmQgYWRkIHRoYXQgcGFuZWxcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvcG91dEdyb3VwID0gdGhpcy5fcG9wb3V0R3JvdXBzLmZpbmQoKGdyb3VwKSA9PiBncm91cC5wb3BvdXRHcm91cCA9PT0gc291cmNlR3JvdXApO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZW1vdmVkUGFuZWwgPSB0aGlzLm1vdmluZ0xvY2soKCkgPT4gcG9wb3V0R3JvdXAucG9wb3V0R3JvdXAubW9kZWwucmVtb3ZlUGFuZWwocG9wb3V0R3JvdXAucG9wb3V0R3JvdXAucGFuZWxzWzBdLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBza2lwU2V0QWN0aXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2tpcFNldEFjdGl2ZUdyb3VwOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9SZW1vdmVHcm91cChzb3VyY2VHcm91cCwgeyBza2lwQWN0aXZlOiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdHcm91cCA9IHRoaXMuY3JlYXRlR3JvdXBBdExvY2F0aW9uKHRhcmdldExvY2F0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb3ZpbmdMb2NrKCgpID0+IG5ld0dyb3VwLm1vZGVsLm9wZW5QYW5lbChyZW1vdmVkUGFuZWwpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb1NldEdyb3VwQW5kUGFuZWxBY3RpdmUobmV3R3JvdXApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9vbkRpZE1vdmVQYW5lbC5maXJlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhbmVsOiB0aGlzLmdldEdyb3VwUGFuZWwoc291cmNlSXRlbUlkKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb206IHNvdXJjZUdyb3VwLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBzb3VyY2UgZ3JvdXAgd2lsbCBiZWNvbWUgZW1wdHkgc28gZGVsZXRlIHRoZSBncm91cFxuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldEdyb3VwID0gdGhpcy5tb3ZpbmdMb2NrKCgpID0+IHRoaXMuZG9SZW1vdmVHcm91cChzb3VyY2VHcm91cCwge1xuICAgICAgICAgICAgICAgICAgICBza2lwQWN0aXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBza2lwRGlzcG9zZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgLy8gYWZ0ZXIgZGVsZXRpbmcgdGhlIGdyb3VwIHdlIG5lZWQgdG8gcmUtZXZhdWxhdGUgdGhlIHJlZiBsb2NhdGlvblxuICAgICAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWRSZWZlcmVuY2VMb2NhdGlvbiA9IGdldEdyaWRMb2NhdGlvbihkZXN0aW5hdGlvbkdyb3VwLmVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2F0aW9uID0gZ2V0UmVsYXRpdmVMb2NhdGlvbih0aGlzLmdyaWR2aWV3Lm9yaWVudGF0aW9uLCB1cGRhdGVkUmVmZXJlbmNlTG9jYXRpb24sIGRlc3RpbmF0aW9uVGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB0aGlzLm1vdmluZ0xvY2soKCkgPT4gdGhpcy5kb0FkZEdyb3VwKHRhcmdldEdyb3VwLCBsb2NhdGlvbikpO1xuICAgICAgICAgICAgICAgIHRoaXMuZG9TZXRHcm91cEFuZFBhbmVsQWN0aXZlKHRhcmdldEdyb3VwKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9vbkRpZE1vdmVQYW5lbC5maXJlKHtcbiAgICAgICAgICAgICAgICAgICAgcGFuZWw6IHRoaXMuZ2V0R3JvdXBQYW5lbChzb3VyY2VJdGVtSWQpLFxuICAgICAgICAgICAgICAgICAgICBmcm9tOiBzb3VyY2VHcm91cCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFRoZSBncm91cCB3ZSBhcmUgcmVtb3ZpbmcgZnJvbSBoYXMgbWFueSBwYW5lbHMsIHdlIG5lZWQgdG8gcmVtb3ZlIHRoZSBwYW5lbHMgd2UgYXJlIG1vdmluZyxcbiAgICAgICAgICAgICAgICAgKiBjcmVhdGUgYSBuZXcgZ3JvdXAsIGFkZCB0aGUgcGFuZWxzIHRvIHRoYXQgbmV3IGdyb3VwIGFuZCBhZGQgdGhlIG5ldyBncm91cCBpbiBhbiBhcHByb3BpYXRlIHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgY29uc3QgcmVtb3ZlZFBhbmVsID0gdGhpcy5tb3ZpbmdMb2NrKCgpID0+IHNvdXJjZUdyb3VwLm1vZGVsLnJlbW92ZVBhbmVsKHNvdXJjZUl0ZW1JZCwge1xuICAgICAgICAgICAgICAgICAgICBza2lwU2V0QWN0aXZlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgc2tpcFNldEFjdGl2ZUdyb3VwOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICBpZiAoIXJlbW92ZWRQYW5lbCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIHBhbmVsIHdpdGggaWQgJHtzb3VyY2VJdGVtSWR9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGRyb3BMb2NhdGlvbiA9IGdldFJlbGF0aXZlTG9jYXRpb24odGhpcy5ncmlkdmlldy5vcmllbnRhdGlvbiwgcmVmZXJlbmNlTG9jYXRpb24sIGRlc3RpbmF0aW9uVGFyZ2V0KTtcbiAgICAgICAgICAgICAgICBjb25zdCBncm91cCA9IHRoaXMuY3JlYXRlR3JvdXBBdExvY2F0aW9uKGRyb3BMb2NhdGlvbik7XG4gICAgICAgICAgICAgICAgdGhpcy5tb3ZpbmdMb2NrKCgpID0+IGdyb3VwLm1vZGVsLm9wZW5QYW5lbChyZW1vdmVkUGFuZWwsIHtcbiAgICAgICAgICAgICAgICAgICAgc2tpcFNldEdyb3VwQWN0aXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB0aGlzLmRvU2V0R3JvdXBBbmRQYW5lbEFjdGl2ZShncm91cCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fb25EaWRNb3ZlUGFuZWwuZmlyZSh7XG4gICAgICAgICAgICAgICAgICAgIHBhbmVsOiByZW1vdmVkUGFuZWwsXG4gICAgICAgICAgICAgICAgICAgIGZyb206IHNvdXJjZUdyb3VwLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIG1vdmVHcm91cChvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGZyb20gPSBvcHRpb25zLmZyb20uZ3JvdXA7XG4gICAgICAgIGNvbnN0IHRvID0gb3B0aW9ucy50by5ncm91cDtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gb3B0aW9ucy50by5wb3NpdGlvbjtcbiAgICAgICAgaWYgKHRhcmdldCA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgIGNvbnN0IGFjdGl2ZVBhbmVsID0gZnJvbS5hY3RpdmVQYW5lbDtcbiAgICAgICAgICAgIGNvbnN0IHBhbmVscyA9IHRoaXMubW92aW5nTG9jaygoKSA9PiBbLi4uZnJvbS5wYW5lbHNdLm1hcCgocCkgPT4gZnJvbS5tb2RlbC5yZW1vdmVQYW5lbChwLmlkLCB7XG4gICAgICAgICAgICAgICAgc2tpcFNldEFjdGl2ZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pKSk7XG4gICAgICAgICAgICBpZiAoKGZyb20gPT09IG51bGwgfHwgZnJvbSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZnJvbS5tb2RlbC5zaXplKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZG9SZW1vdmVHcm91cChmcm9tLCB7IHNraXBBY3RpdmU6IHRydWUgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm1vdmluZ0xvY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcGFuZWwgb2YgcGFuZWxzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvLm1vZGVsLm9wZW5QYW5lbChwYW5lbCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2tpcFNldEFjdGl2ZTogcGFuZWwgIT09IGFjdGl2ZVBhbmVsLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2tpcFNldEdyb3VwQWN0aXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuZG9TZXRHcm91cEFuZFBhbmVsQWN0aXZlKHRvKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN3aXRjaCAoZnJvbS5hcGkubG9jYXRpb24udHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2dyaWQnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdyaWR2aWV3LnJlbW92ZVZpZXcoZ2V0R3JpZExvY2F0aW9uKGZyb20uZWxlbWVudCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdmbG9hdGluZyc6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRGbG9hdGluZ0dyb3VwID0gdGhpcy5fZmxvYXRpbmdHcm91cHMuZmluZCgoeCkgPT4geC5ncm91cCA9PT0gZnJvbSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghc2VsZWN0ZWRGbG9hdGluZ0dyb3VwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ZhaWxlZCB0byBmaW5kIGZsb2F0aW5nIGdyb3VwJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRGbG9hdGluZ0dyb3VwLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgJ3BvcG91dCc6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRQb3BvdXRHcm91cCA9IHRoaXMuX3BvcG91dEdyb3Vwcy5maW5kKCh4KSA9PiB4LnBvcG91dEdyb3VwID09PSBmcm9tKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWxlY3RlZFBvcG91dEdyb3VwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ZhaWxlZCB0byBmaW5kIHBvcG91dCBncm91cCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkUG9wb3V0R3JvdXAuZGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcmVmZXJlbmNlTG9jYXRpb24gPSBnZXRHcmlkTG9jYXRpb24odG8uZWxlbWVudCk7XG4gICAgICAgICAgICBjb25zdCBkcm9wTG9jYXRpb24gPSBnZXRSZWxhdGl2ZUxvY2F0aW9uKHRoaXMuZ3JpZHZpZXcub3JpZW50YXRpb24sIHJlZmVyZW5jZUxvY2F0aW9uLCB0YXJnZXQpO1xuICAgICAgICAgICAgbGV0IHNpemU7XG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZ3JpZHZpZXcub3JpZW50YXRpb24pIHtcbiAgICAgICAgICAgICAgICBjYXNlIE9yaWVudGF0aW9uLlZFUlRJQ0FMOlxuICAgICAgICAgICAgICAgICAgICBzaXplID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZmVyZW5jZUxvY2F0aW9uLmxlbmd0aCAlIDIgPT0gMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZnJvbS5hcGkud2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGZyb20uYXBpLmhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBPcmllbnRhdGlvbi5IT1JJWk9OVEFMOlxuICAgICAgICAgICAgICAgICAgICBzaXplID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZmVyZW5jZUxvY2F0aW9uLmxlbmd0aCAlIDIgPT0gMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZnJvbS5hcGkuaGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBmcm9tLmFwaS53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmdyaWR2aWV3LmFkZFZpZXcoZnJvbSwgc2l6ZSwgZHJvcExvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBmcm9tLnBhbmVscy5mb3JFYWNoKChwYW5lbCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25EaWRNb3ZlUGFuZWwuZmlyZSh7IHBhbmVsLCBmcm9tIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZG9TZXRHcm91cEFjdGl2ZShncm91cCkge1xuICAgICAgICBzdXBlci5kb1NldEdyb3VwQWN0aXZlKGdyb3VwKTtcbiAgICAgICAgY29uc3QgYWN0aXZlUGFuZWwgPSB0aGlzLmFjdGl2ZVBhbmVsO1xuICAgICAgICBpZiAoIXRoaXMuX21vdmluZyAmJlxuICAgICAgICAgICAgYWN0aXZlUGFuZWwgIT09IHRoaXMuX29uRGlkQWN0aXZlUGFuZWxDaGFuZ2UudmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX29uRGlkQWN0aXZlUGFuZWxDaGFuZ2UuZmlyZShhY3RpdmVQYW5lbCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZG9TZXRHcm91cEFuZFBhbmVsQWN0aXZlKGdyb3VwKSB7XG4gICAgICAgIHN1cGVyLmRvU2V0R3JvdXBBY3RpdmUoZ3JvdXApO1xuICAgICAgICBjb25zdCBhY3RpdmVQYW5lbCA9IHRoaXMuYWN0aXZlUGFuZWw7XG4gICAgICAgIGlmIChncm91cCAmJlxuICAgICAgICAgICAgdGhpcy5oYXNNYXhpbWl6ZWRHcm91cCgpICYmXG4gICAgICAgICAgICAhdGhpcy5pc01heGltaXplZEdyb3VwKGdyb3VwKSkge1xuICAgICAgICAgICAgdGhpcy5leGl0TWF4aW1pemVkR3JvdXAoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX21vdmluZyAmJlxuICAgICAgICAgICAgYWN0aXZlUGFuZWwgIT09IHRoaXMuX29uRGlkQWN0aXZlUGFuZWxDaGFuZ2UudmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX29uRGlkQWN0aXZlUGFuZWxDaGFuZ2UuZmlyZShhY3RpdmVQYW5lbCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0TmV4dEdyb3VwSWQoKSB7XG4gICAgICAgIGxldCBpZCA9IHRoaXMubmV4dEdyb3VwSWQubmV4dCgpO1xuICAgICAgICB3aGlsZSAodGhpcy5fZ3JvdXBzLmhhcyhpZCkpIHtcbiAgICAgICAgICAgIGlkID0gdGhpcy5uZXh0R3JvdXBJZC5uZXh0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlkO1xuICAgIH1cbiAgICBjcmVhdGVHcm91cChvcHRpb25zKSB7XG4gICAgICAgIGlmICghb3B0aW9ucykge1xuICAgICAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGxldCBpZCA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5pZDtcbiAgICAgICAgaWYgKGlkICYmIHRoaXMuX2dyb3Vwcy5oYXMob3B0aW9ucy5pZCkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgZG9ja3ZpZXc6IER1cGxpY2F0ZSBncm91cCBpZCAke29wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5pZH0uIHJlYXNzaWduaW5nIGdyb3VwIGlkIHRvIGF2b2lkIGVycm9yc2ApO1xuICAgICAgICAgICAgaWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpZCkge1xuICAgICAgICAgICAgaWQgPSB0aGlzLm5leHRHcm91cElkLm5leHQoKTtcbiAgICAgICAgICAgIHdoaWxlICh0aGlzLl9ncm91cHMuaGFzKGlkKSkge1xuICAgICAgICAgICAgICAgIGlkID0gdGhpcy5uZXh0R3JvdXBJZC5uZXh0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmlldyA9IG5ldyBEb2Nrdmlld0dyb3VwUGFuZWwodGhpcywgaWQsIG9wdGlvbnMpO1xuICAgICAgICB2aWV3LmluaXQoeyBwYXJhbXM6IHt9LCBhY2Nlc3NvcjogdGhpcyB9KTtcbiAgICAgICAgaWYgKCF0aGlzLl9ncm91cHMuaGFzKHZpZXcuaWQpKSB7XG4gICAgICAgICAgICBjb25zdCBkaXNwb3NhYmxlID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUodmlldy5tb2RlbC5vblRhYkRyYWdTdGFydCgoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vbldpbGxEcmFnUGFuZWwuZmlyZShldmVudCk7XG4gICAgICAgICAgICB9KSwgdmlldy5tb2RlbC5vbkdyb3VwRHJhZ1N0YXJ0KChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX29uV2lsbERyYWdHcm91cC5maXJlKGV2ZW50KTtcbiAgICAgICAgICAgIH0pLCB2aWV3Lm1vZGVsLm9uTW92ZSgoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGdyb3VwSWQsIGl0ZW1JZCwgdGFyZ2V0LCBpbmRleCB9ID0gZXZlbnQ7XG4gICAgICAgICAgICAgICAgdGhpcy5tb3ZlR3JvdXBPclBhbmVsKHtcbiAgICAgICAgICAgICAgICAgICAgZnJvbTogeyBncm91cElkOiBncm91cElkLCBwYW5lbElkOiBpdGVtSWQgfSxcbiAgICAgICAgICAgICAgICAgICAgdG86IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwOiB2aWV3LFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHRhcmdldCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSksIHZpZXcubW9kZWwub25EaWREcm9wKChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX29uRGlkRHJvcC5maXJlKGV2ZW50KTtcbiAgICAgICAgICAgIH0pLCB2aWV3Lm1vZGVsLm9uV2lsbERyb3AoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb25XaWxsRHJvcC5maXJlKGV2ZW50KTtcbiAgICAgICAgICAgIH0pLCB2aWV3Lm1vZGVsLm9uV2lsbFNob3dPdmVybGF5KChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGlzYWJsZURuZCkge1xuICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX29uV2lsbFNob3dPdmVybGF5LmZpcmUoZXZlbnQpO1xuICAgICAgICAgICAgfSksIHZpZXcubW9kZWwub25VbmhhbmRsZWREcmFnT3ZlckV2ZW50KChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX29uVW5oYW5kbGVkRHJhZ092ZXJFdmVudC5maXJlKGV2ZW50KTtcbiAgICAgICAgICAgIH0pLCB2aWV3Lm1vZGVsLm9uRGlkQWRkUGFuZWwoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX21vdmluZykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX29uRGlkQWRkUGFuZWwuZmlyZShldmVudC5wYW5lbCk7XG4gICAgICAgICAgICB9KSwgdmlldy5tb2RlbC5vbkRpZFJlbW92ZVBhbmVsKChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9tb3ZpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9vbkRpZFJlbW92ZVBhbmVsLmZpcmUoZXZlbnQucGFuZWwpO1xuICAgICAgICAgICAgfSksIHZpZXcubW9kZWwub25EaWRBY3RpdmVQYW5lbENoYW5nZSgoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbW92aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LnBhbmVsICE9PSB0aGlzLmFjdGl2ZVBhbmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX29uRGlkQWN0aXZlUGFuZWxDaGFuZ2UudmFsdWUgIT09IGV2ZW50LnBhbmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29uRGlkQWN0aXZlUGFuZWxDaGFuZ2UuZmlyZShldmVudC5wYW5lbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksIEV2ZW50LmFueSh2aWV3Lm1vZGVsLm9uRGlkUGFuZWxUaXRsZUNoYW5nZSwgdmlldy5tb2RlbC5vbkRpZFBhbmVsUGFyYW1ldGVyc0NoYW5nZSkoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX2J1ZmZlck9uRGlkTGF5b3V0Q2hhbmdlLmZpcmUoKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIHRoaXMuX2dyb3Vwcy5zZXQodmlldy5pZCwgeyB2YWx1ZTogdmlldywgZGlzcG9zYWJsZSB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUT0RPOiBtdXN0IGJlIGNhbGxlZCBhZnRlciB0aGUgYWJvdmUgbGlzdGVuZXJzIGhhdmUgYmVlbiBzZXR1cCwgbm90IGFuIGlkZWFsIHBhdHRlcm5cbiAgICAgICAgdmlldy5pbml0aWFsaXplKCk7XG4gICAgICAgIHJldHVybiB2aWV3O1xuICAgIH1cbiAgICBjcmVhdGVQYW5lbChvcHRpb25zLCBncm91cCkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgY29uc3QgY29udGVudENvbXBvbmVudCA9IG9wdGlvbnMuY29tcG9uZW50O1xuICAgICAgICBjb25zdCB0YWJDb21wb25lbnQgPSAoX2EgPSBvcHRpb25zLnRhYkNvbXBvbmVudCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdGhpcy5vcHRpb25zLmRlZmF1bHRUYWJDb21wb25lbnQ7XG4gICAgICAgIGNvbnN0IHZpZXcgPSBuZXcgRG9ja3ZpZXdQYW5lbE1vZGVsKHRoaXMsIG9wdGlvbnMuaWQsIGNvbnRlbnRDb21wb25lbnQsIHRhYkNvbXBvbmVudCk7XG4gICAgICAgIGNvbnN0IHBhbmVsID0gbmV3IERvY2t2aWV3UGFuZWwob3B0aW9ucy5pZCwgY29udGVudENvbXBvbmVudCwgdGFiQ29tcG9uZW50LCB0aGlzLCB0aGlzLl9hcGksIGdyb3VwLCB2aWV3LCB7XG4gICAgICAgICAgICByZW5kZXJlcjogb3B0aW9ucy5yZW5kZXJlcixcbiAgICAgICAgICAgIG1pbmltdW1XaWR0aDogb3B0aW9ucy5taW5pbXVtV2lkdGgsXG4gICAgICAgICAgICBtaW5pbXVtSGVpZ2h0OiBvcHRpb25zLm1pbmltdW1IZWlnaHQsXG4gICAgICAgICAgICBtYXhpbXVtV2lkdGg6IG9wdGlvbnMubWF4aW11bVdpZHRoLFxuICAgICAgICAgICAgbWF4aW11bUhlaWdodDogb3B0aW9ucy5tYXhpbXVtSGVpZ2h0LFxuICAgICAgICB9KTtcbiAgICAgICAgcGFuZWwuaW5pdCh7XG4gICAgICAgICAgICB0aXRsZTogKF9iID0gb3B0aW9ucy50aXRsZSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogb3B0aW9ucy5pZCxcbiAgICAgICAgICAgIHBhcmFtczogKF9jID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnBhcmFtcykgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDoge30sXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcGFuZWw7XG4gICAgfVxuICAgIGNyZWF0ZUdyb3VwQXRMb2NhdGlvbihsb2NhdGlvbiwgc2l6ZSkge1xuICAgICAgICBjb25zdCBncm91cCA9IHRoaXMuY3JlYXRlR3JvdXAoKTtcbiAgICAgICAgdGhpcy5kb0FkZEdyb3VwKGdyb3VwLCBsb2NhdGlvbiwgc2l6ZSk7XG4gICAgICAgIHJldHVybiBncm91cDtcbiAgICB9XG4gICAgZmluZEdyb3VwKHBhbmVsKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIChfYSA9IEFycmF5LmZyb20odGhpcy5fZ3JvdXBzLnZhbHVlcygpKS5maW5kKChncm91cCkgPT4gZ3JvdXAudmFsdWUubW9kZWwuY29udGFpbnNQYW5lbChwYW5lbCkpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudmFsdWU7XG4gICAgfVxuICAgIG9yaWVudGF0aW9uQXRMb2NhdGlvbihsb2NhdGlvbikge1xuICAgICAgICBjb25zdCByb290T3JpZW50YXRpb24gPSB0aGlzLmdyaWR2aWV3Lm9yaWVudGF0aW9uO1xuICAgICAgICByZXR1cm4gbG9jYXRpb24ubGVuZ3RoICUgMiA9PSAxXG4gICAgICAgICAgICA/IHJvb3RPcmllbnRhdGlvblxuICAgICAgICAgICAgOiBvcnRob2dvbmFsKHJvb3RPcmllbnRhdGlvbik7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQ29tcG9zaXRlRGlzcG9zYWJsZSB9IGZyb20gJy4uL2xpZmVjeWNsZSc7XG5leHBvcnQgY2xhc3MgRG9ja3ZpZXdGbG9hdGluZ0dyb3VwUGFuZWwgZXh0ZW5kcyBDb21wb3NpdGVEaXNwb3NhYmxlIHtcbiAgICBjb25zdHJ1Y3Rvcihncm91cCwgb3ZlcmxheSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmdyb3VwID0gZ3JvdXA7XG4gICAgICAgIHRoaXMub3ZlcmxheSA9IG92ZXJsYXk7XG4gICAgICAgIHRoaXMuYWRkRGlzcG9zYWJsZXMob3ZlcmxheSk7XG4gICAgfVxuICAgIHBvc2l0aW9uKGJvdW5kcykge1xuICAgICAgICB0aGlzLm92ZXJsYXkuc2V0Qm91bmRzKGJvdW5kcyk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgRG9ja3ZpZXdHcm91cFBhbmVsTW9kZWwsIH0gZnJvbSAnLi9kb2Nrdmlld0dyb3VwUGFuZWxNb2RlbCc7XG5pbXBvcnQgeyBHcmlkdmlld1BhbmVsIH0gZnJvbSAnLi4vZ3JpZHZpZXcvZ3JpZHZpZXdQYW5lbCc7XG5pbXBvcnQgeyBEb2Nrdmlld0dyb3VwUGFuZWxBcGlJbXBsLCB9IGZyb20gJy4uL2FwaS9kb2Nrdmlld0dyb3VwUGFuZWxBcGknO1xuY29uc3QgTUlOSU1VTV9ET0NLVklFV19HUk9VUF9QQU5FTF9XSURUSCA9IDEwMDtcbmNvbnN0IE1JTklNVU1fRE9DS1ZJRVdfR1JPVVBfUEFORUxfSEVJR0hUID0gMTAwO1xuZXhwb3J0IGNsYXNzIERvY2t2aWV3R3JvdXBQYW5lbCBleHRlbmRzIEdyaWR2aWV3UGFuZWwge1xuICAgIGdldCBtaW5pbXVtV2lkdGgoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgYWN0aXZlUGFuZWxNaW5pbXVtV2lkdGggPSAoX2EgPSB0aGlzLmFjdGl2ZVBhbmVsKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubWluaW11bVdpZHRoO1xuICAgICAgICBpZiAodHlwZW9mIGFjdGl2ZVBhbmVsTWluaW11bVdpZHRoID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcmV0dXJuIGFjdGl2ZVBhbmVsTWluaW11bVdpZHRoO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci5fX21pbmltdW1XaWR0aCgpO1xuICAgIH1cbiAgICBnZXQgbWluaW11bUhlaWdodCgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBhY3RpdmVQYW5lbE1pbmltdW1IZWlnaHQgPSAoX2EgPSB0aGlzLmFjdGl2ZVBhbmVsKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubWluaW11bUhlaWdodDtcbiAgICAgICAgaWYgKHR5cGVvZiBhY3RpdmVQYW5lbE1pbmltdW1IZWlnaHQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICByZXR1cm4gYWN0aXZlUGFuZWxNaW5pbXVtSGVpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci5fX21pbmltdW1IZWlnaHQoKTtcbiAgICB9XG4gICAgZ2V0IG1heGltdW1XaWR0aCgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBhY3RpdmVQYW5lbE1heGltdW1XaWR0aCA9IChfYSA9IHRoaXMuYWN0aXZlUGFuZWwpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5tYXhpbXVtV2lkdGg7XG4gICAgICAgIGlmICh0eXBlb2YgYWN0aXZlUGFuZWxNYXhpbXVtV2lkdGggPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICByZXR1cm4gYWN0aXZlUGFuZWxNYXhpbXVtV2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1cGVyLl9fbWF4aW11bVdpZHRoKCk7XG4gICAgfVxuICAgIGdldCBtYXhpbXVtSGVpZ2h0KCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IGFjdGl2ZVBhbmVsTWF4aW11bUhlaWdodCA9IChfYSA9IHRoaXMuYWN0aXZlUGFuZWwpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5tYXhpbXVtSGVpZ2h0O1xuICAgICAgICBpZiAodHlwZW9mIGFjdGl2ZVBhbmVsTWF4aW11bUhlaWdodCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHJldHVybiBhY3RpdmVQYW5lbE1heGltdW1IZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1cGVyLl9fbWF4aW11bUhlaWdodCgpO1xuICAgIH1cbiAgICBnZXQgcGFuZWxzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbW9kZWwucGFuZWxzO1xuICAgIH1cbiAgICBnZXQgYWN0aXZlUGFuZWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tb2RlbC5hY3RpdmVQYW5lbDtcbiAgICB9XG4gICAgZ2V0IHNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tb2RlbC5zaXplO1xuICAgIH1cbiAgICBnZXQgbW9kZWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tb2RlbDtcbiAgICB9XG4gICAgZ2V0IGxvY2tlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21vZGVsLmxvY2tlZDtcbiAgICB9XG4gICAgc2V0IGxvY2tlZCh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9tb2RlbC5sb2NrZWQgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IGhlYWRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21vZGVsLmhlYWRlcjtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoYWNjZXNzb3IsIGlkLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mO1xuICAgICAgICBzdXBlcihpZCwgJ2dyb3Vwdmlld19kZWZhdWx0Jywge1xuICAgICAgICAgICAgbWluaW11bUhlaWdodDogKF9iID0gKF9hID0gb3B0aW9ucy5jb25zdHJhaW50cykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm1pbmltdW1IZWlnaHQpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IE1JTklNVU1fRE9DS1ZJRVdfR1JPVVBfUEFORUxfSEVJR0hULFxuICAgICAgICAgICAgbWluaW11bVdpZHRoOiAoX2QgPSAoX2MgPSBvcHRpb25zLmNvbnN0cmFpbnRzKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MubWF4aW11bUhlaWdodCkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogTUlOSU1VTV9ET0NLVklFV19HUk9VUF9QQU5FTF9XSURUSCxcbiAgICAgICAgICAgIG1heGltdW1IZWlnaHQ6IChfZSA9IG9wdGlvbnMuY29uc3RyYWludHMpID09PSBudWxsIHx8IF9lID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZS5tYXhpbXVtSGVpZ2h0LFxuICAgICAgICAgICAgbWF4aW11bVdpZHRoOiAoX2YgPSBvcHRpb25zLmNvbnN0cmFpbnRzKSA9PT0gbnVsbCB8fCBfZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2YubWF4aW11bVdpZHRoLFxuICAgICAgICB9LCBuZXcgRG9ja3ZpZXdHcm91cFBhbmVsQXBpSW1wbChpZCwgYWNjZXNzb3IpKTtcbiAgICAgICAgdGhpcy5hcGkuaW5pdGlhbGl6ZSh0aGlzKTsgLy8gY2Fubm90IHVzZSAndGhpcycgYWZ0ZXIgYWZ0ZXIgJ3N1cGVyJyBjYWxsXG4gICAgICAgIHRoaXMuX21vZGVsID0gbmV3IERvY2t2aWV3R3JvdXBQYW5lbE1vZGVsKHRoaXMuZWxlbWVudCwgYWNjZXNzb3IsIGlkLCBvcHRpb25zLCB0aGlzKTtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyh0aGlzLm1vZGVsLm9uRGlkQWN0aXZlUGFuZWxDaGFuZ2UoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFwaS5fb25EaWRBY3RpdmVQYW5lbENoYW5nZS5maXJlKGV2ZW50KTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBmb2N1cygpIHtcbiAgICAgICAgaWYgKCF0aGlzLmFwaS5pc0FjdGl2ZSkge1xuICAgICAgICAgICAgdGhpcy5hcGkuc2V0QWN0aXZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIuZm9jdXMoKTtcbiAgICB9XG4gICAgaW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgdGhpcy5fbW9kZWwuaW5pdGlhbGl6ZSgpO1xuICAgIH1cbiAgICBzZXRBY3RpdmUoaXNBY3RpdmUpIHtcbiAgICAgICAgc3VwZXIuc2V0QWN0aXZlKGlzQWN0aXZlKTtcbiAgICAgICAgdGhpcy5tb2RlbC5zZXRBY3RpdmUoaXNBY3RpdmUpO1xuICAgIH1cbiAgICBsYXlvdXQod2lkdGgsIGhlaWdodCkge1xuICAgICAgICBzdXBlci5sYXlvdXQod2lkdGgsIGhlaWdodCk7XG4gICAgICAgIHRoaXMubW9kZWwubGF5b3V0KHdpZHRoLCBoZWlnaHQpO1xuICAgIH1cbiAgICBnZXRDb21wb25lbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tb2RlbDtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC50b0pTT04oKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBEb2Nrdmlld0FwaSB9IGZyb20gJy4uL2FwaS9jb21wb25lbnQuYXBpJztcbmltcG9ydCB7IGdldFBhbmVsRGF0YSB9IGZyb20gJy4uL2RuZC9kYXRhVHJhbnNmZXInO1xuaW1wb3J0IHsgaXNBbmNlc3RvciwgdG9nZ2xlQ2xhc3MgfSBmcm9tICcuLi9kb20nO1xuaW1wb3J0IHsgYWRkRGlzcG9zYWJsZUxpc3RlbmVyLCBEb2Nrdmlld0V2ZW50LCBFbWl0dGVyLCB9IGZyb20gJy4uL2V2ZW50cyc7XG5pbXBvcnQgeyBDb21wb3NpdGVEaXNwb3NhYmxlIH0gZnJvbSAnLi4vbGlmZWN5Y2xlJztcbmltcG9ydCB7IENvbnRlbnRDb250YWluZXIsIH0gZnJvbSAnLi9jb21wb25lbnRzL3BhbmVsL2NvbnRlbnQnO1xuaW1wb3J0IHsgVGFic0NvbnRhaW5lciwgfSBmcm9tICcuL2NvbXBvbmVudHMvdGl0bGViYXIvdGFic0NvbnRhaW5lcic7XG5pbXBvcnQgeyBEb2Nrdmlld1VuaGFuZGxlZERyYWdPdmVyRXZlbnQsIH0gZnJvbSAnLi9vcHRpb25zJztcbmV4cG9ydCBjbGFzcyBEb2Nrdmlld0RpZERyb3BFdmVudCBleHRlbmRzIERvY2t2aWV3RXZlbnQge1xuICAgIGdldCBuYXRpdmVFdmVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5uYXRpdmVFdmVudDtcbiAgICB9XG4gICAgZ2V0IHBvc2l0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLnBvc2l0aW9uO1xuICAgIH1cbiAgICBnZXQgcGFuZWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMucGFuZWw7XG4gICAgfVxuICAgIGdldCBncm91cCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5ncm91cDtcbiAgICB9XG4gICAgZ2V0IGFwaSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5hcGk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgZ2V0RGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5nZXREYXRhKCk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIERvY2t2aWV3V2lsbERyb3BFdmVudCBleHRlbmRzIERvY2t2aWV3RGlkRHJvcEV2ZW50IHtcbiAgICBnZXQga2luZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2tpbmQ7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX2tpbmQgPSBvcHRpb25zLmtpbmQ7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFdpbGxTaG93T3ZlcmxheUxvY2F0aW9uRXZlbnQge1xuICAgIGdldCBraW5kKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmtpbmQ7XG4gICAgfVxuICAgIGdldCBuYXRpdmVFdmVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXZlbnQubmF0aXZlRXZlbnQ7XG4gICAgfVxuICAgIGdldCBwb3NpdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXZlbnQucG9zaXRpb247XG4gICAgfVxuICAgIGdldCBkZWZhdWx0UHJldmVudGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ldmVudC5kZWZhdWx0UHJldmVudGVkO1xuICAgIH1cbiAgICBnZXQgcGFuZWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMucGFuZWw7XG4gICAgfVxuICAgIGdldCBhcGkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuYXBpO1xuICAgIH1cbiAgICBnZXQgZ3JvdXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuZ3JvdXA7XG4gICAgfVxuICAgIHByZXZlbnREZWZhdWx0KCkge1xuICAgICAgICB0aGlzLmV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICAgIGdldERhdGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuZ2V0RGF0YSgpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihldmVudCwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLmV2ZW50ID0gZXZlbnQ7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIERvY2t2aWV3R3JvdXBQYW5lbE1vZGVsIGV4dGVuZHMgQ29tcG9zaXRlRGlzcG9zYWJsZSB7XG4gICAgZ2V0IGVsZW1lbnQoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZG9ja3ZpZXc6IG5vdCBzdXBwb3J0ZWQnKTtcbiAgICB9XG4gICAgZ2V0IGFjdGl2ZVBhbmVsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWN0aXZlUGFuZWw7XG4gICAgfVxuICAgIGdldCBsb2NrZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sb2NrZWQ7XG4gICAgfVxuICAgIHNldCBsb2NrZWQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fbG9ja2VkID0gdmFsdWU7XG4gICAgICAgIHRvZ2dsZUNsYXNzKHRoaXMuY29udGFpbmVyLCAnZHYtbG9ja2VkLWdyb3VwdmlldycsIHZhbHVlID09PSAnbm8tZHJvcC10YXJnZXQnIHx8IHZhbHVlKTtcbiAgICB9XG4gICAgZ2V0IGlzQWN0aXZlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNHcm91cEFjdGl2ZTtcbiAgICB9XG4gICAgZ2V0IHBhbmVscygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhbmVscztcbiAgICB9XG4gICAgZ2V0IHNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYW5lbHMubGVuZ3RoO1xuICAgIH1cbiAgICBnZXQgaXNFbXB0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhbmVscy5sZW5ndGggPT09IDA7XG4gICAgfVxuICAgIGdldCBoYXNXYXRlcm1hcmsoKSB7XG4gICAgICAgIHJldHVybiAhISh0aGlzLndhdGVybWFyayAmJiB0aGlzLmNvbnRhaW5lci5jb250YWlucyh0aGlzLndhdGVybWFyay5lbGVtZW50KSk7XG4gICAgfVxuICAgIGdldCBoZWFkZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRhYnNDb250YWluZXI7XG4gICAgfVxuICAgIGdldCBpc0NvbnRlbnRGb2N1c2VkKCkge1xuICAgICAgICBpZiAoIWRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNBbmNlc3Rvcihkb2N1bWVudC5hY3RpdmVFbGVtZW50LCB0aGlzLmNvbnRlbnRDb250YWluZXIuZWxlbWVudCk7XG4gICAgfVxuICAgIGdldCBsb2NhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvY2F0aW9uO1xuICAgIH1cbiAgICBzZXQgbG9jYXRpb24odmFsdWUpIHtcbiAgICAgICAgdGhpcy5fbG9jYXRpb24gPSB2YWx1ZTtcbiAgICAgICAgdG9nZ2xlQ2xhc3ModGhpcy5jb250YWluZXIsICdkdi1ncm91cHZpZXctZmxvYXRpbmcnLCBmYWxzZSk7XG4gICAgICAgIHRvZ2dsZUNsYXNzKHRoaXMuY29udGFpbmVyLCAnZHYtZ3JvdXB2aWV3LXBvcG91dCcsIGZhbHNlKTtcbiAgICAgICAgc3dpdGNoICh2YWx1ZS50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdncmlkJzpcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnRDb250YWluZXIuZHJvcFRhcmdldC5zZXRUYXJnZXRab25lcyhbXG4gICAgICAgICAgICAgICAgICAgICd0b3AnLFxuICAgICAgICAgICAgICAgICAgICAnYm90dG9tJyxcbiAgICAgICAgICAgICAgICAgICAgJ2xlZnQnLFxuICAgICAgICAgICAgICAgICAgICAncmlnaHQnLFxuICAgICAgICAgICAgICAgICAgICAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2Zsb2F0aW5nJzpcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnRDb250YWluZXIuZHJvcFRhcmdldC5zZXRUYXJnZXRab25lcyhbJ2NlbnRlciddKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnRDb250YWluZXIuZHJvcFRhcmdldC5zZXRUYXJnZXRab25lcyh2YWx1ZVxuICAgICAgICAgICAgICAgICAgICA/IFsnY2VudGVyJ11cbiAgICAgICAgICAgICAgICAgICAgOiBbJ3RvcCcsICdib3R0b20nLCAnbGVmdCcsICdyaWdodCcsICdjZW50ZXInXSk7XG4gICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3ModGhpcy5jb250YWluZXIsICdkdi1ncm91cHZpZXctZmxvYXRpbmcnLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3BvcG91dCc6XG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZW50Q29udGFpbmVyLmRyb3BUYXJnZXQuc2V0VGFyZ2V0Wm9uZXMoWydjZW50ZXInXSk7XG4gICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3ModGhpcy5jb250YWluZXIsICdkdi1ncm91cHZpZXctcG9wb3V0JywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ncm91cFBhbmVsLmFwaS5fb25EaWRMb2NhdGlvbkNoYW5nZS5maXJlKHtcbiAgICAgICAgICAgIGxvY2F0aW9uOiB0aGlzLmxvY2F0aW9uLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyLCBhY2Nlc3NvciwgaWQsIG9wdGlvbnMsIGdyb3VwUGFuZWwpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICAgICAgdGhpcy5hY2Nlc3NvciA9IGFjY2Vzc29yO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuZ3JvdXBQYW5lbCA9IGdyb3VwUGFuZWw7XG4gICAgICAgIHRoaXMuX2lzR3JvdXBBY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2xvY2F0aW9uID0geyB0eXBlOiAnZ3JpZCcgfTtcbiAgICAgICAgdGhpcy5tb3N0UmVjZW50bHlVc2VkID0gW107XG4gICAgICAgIHRoaXMuX292ZXJ3cml0ZVJlbmRlckNvbnRhaW5lciA9IG51bGw7XG4gICAgICAgIHRoaXMuX29uRGlkQ2hhbmdlID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZENoYW5nZSA9IHRoaXMuX29uRGlkQ2hhbmdlLmV2ZW50O1xuICAgICAgICB0aGlzLl93aWR0aCA9IDA7XG4gICAgICAgIHRoaXMuX2hlaWdodCA9IDA7XG4gICAgICAgIHRoaXMuX3BhbmVscyA9IFtdO1xuICAgICAgICB0aGlzLl9wYW5lbERpc3Bvc2FibGVzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLl9vbk1vdmUgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uTW92ZSA9IHRoaXMuX29uTW92ZS5ldmVudDtcbiAgICAgICAgdGhpcy5fb25EaWREcm9wID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZERyb3AgPSB0aGlzLl9vbkRpZERyb3AuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uV2lsbERyb3AgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uV2lsbERyb3AgPSB0aGlzLl9vbldpbGxEcm9wLmV2ZW50O1xuICAgICAgICB0aGlzLl9vbldpbGxTaG93T3ZlcmxheSA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25XaWxsU2hvd092ZXJsYXkgPSB0aGlzLl9vbldpbGxTaG93T3ZlcmxheS5ldmVudDtcbiAgICAgICAgdGhpcy5fb25UYWJEcmFnU3RhcnQgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uVGFiRHJhZ1N0YXJ0ID0gdGhpcy5fb25UYWJEcmFnU3RhcnQuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uR3JvdXBEcmFnU3RhcnQgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uR3JvdXBEcmFnU3RhcnQgPSB0aGlzLl9vbkdyb3VwRHJhZ1N0YXJ0LmV2ZW50O1xuICAgICAgICB0aGlzLl9vbkRpZEFkZFBhbmVsID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZEFkZFBhbmVsID0gdGhpcy5fb25EaWRBZGRQYW5lbC5ldmVudDtcbiAgICAgICAgdGhpcy5fb25EaWRQYW5lbFRpdGxlQ2hhbmdlID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZFBhbmVsVGl0bGVDaGFuZ2UgPSB0aGlzLl9vbkRpZFBhbmVsVGl0bGVDaGFuZ2UuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uRGlkUGFuZWxQYXJhbWV0ZXJzQ2hhbmdlID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZFBhbmVsUGFyYW1ldGVyc0NoYW5nZSA9IHRoaXMuX29uRGlkUGFuZWxQYXJhbWV0ZXJzQ2hhbmdlLmV2ZW50O1xuICAgICAgICB0aGlzLl9vbkRpZFJlbW92ZVBhbmVsID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZFJlbW92ZVBhbmVsID0gdGhpcy5fb25EaWRSZW1vdmVQYW5lbC5ldmVudDtcbiAgICAgICAgdGhpcy5fb25EaWRBY3RpdmVQYW5lbENoYW5nZSA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRBY3RpdmVQYW5lbENoYW5nZSA9IHRoaXMuX29uRGlkQWN0aXZlUGFuZWxDaGFuZ2UuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uVW5oYW5kbGVkRHJhZ092ZXJFdmVudCA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25VbmhhbmRsZWREcmFnT3ZlckV2ZW50ID0gdGhpcy5fb25VbmhhbmRsZWREcmFnT3ZlckV2ZW50LmV2ZW50O1xuICAgICAgICB0b2dnbGVDbGFzcyh0aGlzLmNvbnRhaW5lciwgJ2R2LWdyb3VwdmlldycsIHRydWUpO1xuICAgICAgICB0aGlzLl9hcGkgPSBuZXcgRG9ja3ZpZXdBcGkodGhpcy5hY2Nlc3Nvcik7XG4gICAgICAgIHRoaXMudGFic0NvbnRhaW5lciA9IG5ldyBUYWJzQ29udGFpbmVyKHRoaXMuYWNjZXNzb3IsIHRoaXMuZ3JvdXBQYW5lbCk7XG4gICAgICAgIHRoaXMuY29udGVudENvbnRhaW5lciA9IG5ldyBDb250ZW50Q29udGFpbmVyKHRoaXMuYWNjZXNzb3IsIHRoaXMpO1xuICAgICAgICBjb250YWluZXIuYXBwZW5kKHRoaXMudGFic0NvbnRhaW5lci5lbGVtZW50LCB0aGlzLmNvbnRlbnRDb250YWluZXIuZWxlbWVudCk7XG4gICAgICAgIHRoaXMuaGVhZGVyLmhpZGRlbiA9ICEhb3B0aW9ucy5oaWRlSGVhZGVyO1xuICAgICAgICB0aGlzLmxvY2tlZCA9IChfYSA9IG9wdGlvbnMubG9ja2VkKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBmYWxzZTtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyh0aGlzLl9vblRhYkRyYWdTdGFydCwgdGhpcy5fb25Hcm91cERyYWdTdGFydCwgdGhpcy5fb25XaWxsU2hvd092ZXJsYXksIHRoaXMudGFic0NvbnRhaW5lci5vblRhYkRyYWdTdGFydCgoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX29uVGFiRHJhZ1N0YXJ0LmZpcmUoZXZlbnQpO1xuICAgICAgICB9KSwgdGhpcy50YWJzQ29udGFpbmVyLm9uR3JvdXBEcmFnU3RhcnQoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9vbkdyb3VwRHJhZ1N0YXJ0LmZpcmUoZXZlbnQpO1xuICAgICAgICB9KSwgdGhpcy50YWJzQ29udGFpbmVyLm9uRHJvcCgoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRHJvcEV2ZW50KCdoZWFkZXInLCBldmVudC5ldmVudCwgJ2NlbnRlcicsIGV2ZW50LmluZGV4KTtcbiAgICAgICAgfSksIHRoaXMuY29udGVudENvbnRhaW5lci5vbkRpZEZvY3VzKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYWNjZXNzb3IuZG9TZXRHcm91cEFjdGl2ZSh0aGlzLmdyb3VwUGFuZWwpO1xuICAgICAgICB9KSwgdGhpcy5jb250ZW50Q29udGFpbmVyLm9uRGlkQmx1cigoKSA9PiB7XG4gICAgICAgICAgICAvLyBub29wXG4gICAgICAgIH0pLCB0aGlzLmNvbnRlbnRDb250YWluZXIuZHJvcFRhcmdldC5vbkRyb3AoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZURyb3BFdmVudCgnY29udGVudCcsIGV2ZW50Lm5hdGl2ZUV2ZW50LCBldmVudC5wb3NpdGlvbik7XG4gICAgICAgIH0pLCB0aGlzLnRhYnNDb250YWluZXIub25XaWxsU2hvd092ZXJsYXkoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9vbldpbGxTaG93T3ZlcmxheS5maXJlKGV2ZW50KTtcbiAgICAgICAgfSksIHRoaXMuY29udGVudENvbnRhaW5lci5kcm9wVGFyZ2V0Lm9uV2lsbFNob3dPdmVybGF5KChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25XaWxsU2hvd092ZXJsYXkuZmlyZShuZXcgV2lsbFNob3dPdmVybGF5TG9jYXRpb25FdmVudChldmVudCwge1xuICAgICAgICAgICAgICAgIGtpbmQ6ICdjb250ZW50JyxcbiAgICAgICAgICAgICAgICBwYW5lbDogdGhpcy5hY3RpdmVQYW5lbCxcbiAgICAgICAgICAgICAgICBhcGk6IHRoaXMuX2FwaSxcbiAgICAgICAgICAgICAgICBncm91cDogdGhpcy5ncm91cFBhbmVsLFxuICAgICAgICAgICAgICAgIGdldERhdGE6IGdldFBhbmVsRGF0YSxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSksIHRoaXMuX29uTW92ZSwgdGhpcy5fb25EaWRDaGFuZ2UsIHRoaXMuX29uRGlkRHJvcCwgdGhpcy5fb25XaWxsRHJvcCwgdGhpcy5fb25EaWRBZGRQYW5lbCwgdGhpcy5fb25EaWRSZW1vdmVQYW5lbCwgdGhpcy5fb25EaWRBY3RpdmVQYW5lbENoYW5nZSwgdGhpcy5fb25VbmhhbmRsZWREcmFnT3ZlckV2ZW50LCB0aGlzLl9vbkRpZFBhbmVsVGl0bGVDaGFuZ2UsIHRoaXMuX29uRGlkUGFuZWxQYXJhbWV0ZXJzQ2hhbmdlKTtcbiAgICB9XG4gICAgZm9jdXNDb250ZW50KCkge1xuICAgICAgICB0aGlzLmNvbnRlbnRDb250YWluZXIuZWxlbWVudC5mb2N1cygpO1xuICAgIH1cbiAgICBzZXQgcmVuZGVyQ29udGFpbmVyKHZhbHVlKSB7XG4gICAgICAgIHRoaXMucGFuZWxzLmZvckVhY2goKHBhbmVsKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckNvbnRhaW5lci5kZXRhdGNoKHBhbmVsKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX292ZXJ3cml0ZVJlbmRlckNvbnRhaW5lciA9IHZhbHVlO1xuICAgICAgICB0aGlzLnBhbmVscy5mb3JFYWNoKChwYW5lbCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZXJlbmRlcihwYW5lbCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXQgcmVuZGVyQ29udGFpbmVyKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoKF9hID0gdGhpcy5fb3ZlcndyaXRlUmVuZGVyQ29udGFpbmVyKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB0aGlzLmFjY2Vzc29yLm92ZXJsYXlSZW5kZXJDb250YWluZXIpO1xuICAgIH1cbiAgICBpbml0aWFsaXplKCkge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnBhbmVscykge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnBhbmVscy5mb3JFYWNoKChwYW5lbCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZG9BZGRQYW5lbChwYW5lbCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmFjdGl2ZVBhbmVsKSB7XG4gICAgICAgICAgICB0aGlzLm9wZW5QYW5lbCh0aGlzLm9wdGlvbnMuYWN0aXZlUGFuZWwpO1xuICAgICAgICB9XG4gICAgICAgIC8vIG11c3QgYmUgcnVuIGFmdGVyIHRoZSBjb25zdHJ1Y3RvciBvdGhlcndpc2UgdGhpcy5wYXJlbnQgbWF5IG5vdCBiZVxuICAgICAgICAvLyBjb3JyZWN0bHkgaW5pdGlhbGl6ZWRcbiAgICAgICAgdGhpcy5zZXRBY3RpdmUodGhpcy5pc0FjdGl2ZSwgdHJ1ZSk7XG4gICAgICAgIHRoaXMudXBkYXRlQ29udGFpbmVyKCk7XG4gICAgICAgIGlmICh0aGlzLmFjY2Vzc29yLm9wdGlvbnMuY3JlYXRlUmlnaHRIZWFkZXJBY3Rpb25Db21wb25lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3JpZ2h0SGVhZGVyQWN0aW9ucyA9XG4gICAgICAgICAgICAgICAgdGhpcy5hY2Nlc3Nvci5vcHRpb25zLmNyZWF0ZVJpZ2h0SGVhZGVyQWN0aW9uQ29tcG9uZW50KHRoaXMuZ3JvdXBQYW5lbCk7XG4gICAgICAgICAgICB0aGlzLmFkZERpc3Bvc2FibGVzKHRoaXMuX3JpZ2h0SGVhZGVyQWN0aW9ucyk7XG4gICAgICAgICAgICB0aGlzLl9yaWdodEhlYWRlckFjdGlvbnMuaW5pdCh7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyQXBpOiB0aGlzLl9hcGksXG4gICAgICAgICAgICAgICAgYXBpOiB0aGlzLmdyb3VwUGFuZWwuYXBpLFxuICAgICAgICAgICAgICAgIGdyb3VwOiB0aGlzLmdyb3VwUGFuZWwsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMudGFic0NvbnRhaW5lci5zZXRSaWdodEFjdGlvbnNFbGVtZW50KHRoaXMuX3JpZ2h0SGVhZGVyQWN0aW9ucy5lbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5hY2Nlc3Nvci5vcHRpb25zLmNyZWF0ZUxlZnRIZWFkZXJBY3Rpb25Db21wb25lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX2xlZnRIZWFkZXJBY3Rpb25zID1cbiAgICAgICAgICAgICAgICB0aGlzLmFjY2Vzc29yLm9wdGlvbnMuY3JlYXRlTGVmdEhlYWRlckFjdGlvbkNvbXBvbmVudCh0aGlzLmdyb3VwUGFuZWwpO1xuICAgICAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyh0aGlzLl9sZWZ0SGVhZGVyQWN0aW9ucyk7XG4gICAgICAgICAgICB0aGlzLl9sZWZ0SGVhZGVyQWN0aW9ucy5pbml0KHtcbiAgICAgICAgICAgICAgICBjb250YWluZXJBcGk6IHRoaXMuX2FwaSxcbiAgICAgICAgICAgICAgICBhcGk6IHRoaXMuZ3JvdXBQYW5lbC5hcGksXG4gICAgICAgICAgICAgICAgZ3JvdXA6IHRoaXMuZ3JvdXBQYW5lbCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy50YWJzQ29udGFpbmVyLnNldExlZnRBY3Rpb25zRWxlbWVudCh0aGlzLl9sZWZ0SGVhZGVyQWN0aW9ucy5lbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5hY2Nlc3Nvci5vcHRpb25zLmNyZWF0ZVByZWZpeEhlYWRlckFjdGlvbkNvbXBvbmVudCkge1xuICAgICAgICAgICAgdGhpcy5fcHJlZml4SGVhZGVyQWN0aW9ucyA9XG4gICAgICAgICAgICAgICAgdGhpcy5hY2Nlc3Nvci5vcHRpb25zLmNyZWF0ZVByZWZpeEhlYWRlckFjdGlvbkNvbXBvbmVudCh0aGlzLmdyb3VwUGFuZWwpO1xuICAgICAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyh0aGlzLl9wcmVmaXhIZWFkZXJBY3Rpb25zKTtcbiAgICAgICAgICAgIHRoaXMuX3ByZWZpeEhlYWRlckFjdGlvbnMuaW5pdCh7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyQXBpOiB0aGlzLl9hcGksXG4gICAgICAgICAgICAgICAgYXBpOiB0aGlzLmdyb3VwUGFuZWwuYXBpLFxuICAgICAgICAgICAgICAgIGdyb3VwOiB0aGlzLmdyb3VwUGFuZWwsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMudGFic0NvbnRhaW5lci5zZXRQcmVmaXhBY3Rpb25zRWxlbWVudCh0aGlzLl9wcmVmaXhIZWFkZXJBY3Rpb25zLmVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlcmVuZGVyKHBhbmVsKSB7XG4gICAgICAgIHRoaXMuY29udGVudENvbnRhaW5lci5yZW5kZXJQYW5lbChwYW5lbCwgeyBhc0FjdGl2ZTogZmFsc2UgfSk7XG4gICAgfVxuICAgIGluZGV4T2YocGFuZWwpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGFic0NvbnRhaW5lci5pbmRleE9mKHBhbmVsLmlkKTtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgICAgICAgIHZpZXdzOiB0aGlzLnRhYnNDb250YWluZXIucGFuZWxzLFxuICAgICAgICAgICAgYWN0aXZlVmlldzogKF9hID0gdGhpcy5fYWN0aXZlUGFuZWwpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pZCxcbiAgICAgICAgICAgIGlkOiB0aGlzLmlkLFxuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5sb2NrZWQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXN1bHQubG9ja2VkID0gdGhpcy5sb2NrZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaGVhZGVyLmhpZGRlbikge1xuICAgICAgICAgICAgcmVzdWx0LmhpZGVIZWFkZXIgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIG1vdmVUb05leHQob3B0aW9ucykge1xuICAgICAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW9wdGlvbnMucGFuZWwpIHtcbiAgICAgICAgICAgIG9wdGlvbnMucGFuZWwgPSB0aGlzLmFjdGl2ZVBhbmVsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGluZGV4ID0gb3B0aW9ucy5wYW5lbCA/IHRoaXMucGFuZWxzLmluZGV4T2Yob3B0aW9ucy5wYW5lbCkgOiAtMTtcbiAgICAgICAgbGV0IG5vcm1hbGl6ZWRJbmRleDtcbiAgICAgICAgaWYgKGluZGV4IDwgdGhpcy5wYW5lbHMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgbm9ybWFsaXplZEluZGV4ID0gaW5kZXggKyAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFvcHRpb25zLnN1cHByZXNzUm9sbCkge1xuICAgICAgICAgICAgbm9ybWFsaXplZEluZGV4ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9wZW5QYW5lbCh0aGlzLnBhbmVsc1tub3JtYWxpemVkSW5kZXhdKTtcbiAgICB9XG4gICAgbW92ZVRvUHJldmlvdXMob3B0aW9ucykge1xuICAgICAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW9wdGlvbnMucGFuZWwpIHtcbiAgICAgICAgICAgIG9wdGlvbnMucGFuZWwgPSB0aGlzLmFjdGl2ZVBhbmVsO1xuICAgICAgICB9XG4gICAgICAgIGlmICghb3B0aW9ucy5wYW5lbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5wYW5lbHMuaW5kZXhPZihvcHRpb25zLnBhbmVsKTtcbiAgICAgICAgbGV0IG5vcm1hbGl6ZWRJbmRleDtcbiAgICAgICAgaWYgKGluZGV4ID4gMCkge1xuICAgICAgICAgICAgbm9ybWFsaXplZEluZGV4ID0gaW5kZXggLSAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFvcHRpb25zLnN1cHByZXNzUm9sbCkge1xuICAgICAgICAgICAgbm9ybWFsaXplZEluZGV4ID0gdGhpcy5wYW5lbHMubGVuZ3RoIC0gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9wZW5QYW5lbCh0aGlzLnBhbmVsc1tub3JtYWxpemVkSW5kZXhdKTtcbiAgICB9XG4gICAgY29udGFpbnNQYW5lbChwYW5lbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYW5lbHMuaW5jbHVkZXMocGFuZWwpO1xuICAgIH1cbiAgICBpbml0KF9wYXJhbXMpIHtcbiAgICAgICAgLy9ub29wXG4gICAgfVxuICAgIHVwZGF0ZShfcGFyYW1zKSB7XG4gICAgICAgIC8vbm9vcFxuICAgIH1cbiAgICBmb2N1cygpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAoX2EgPSB0aGlzLl9hY3RpdmVQYW5lbCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmZvY3VzKCk7XG4gICAgfVxuICAgIG9wZW5QYW5lbChwYW5lbCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzZXQgdGhlIHBhbmVsIGdyb3VwXG4gICAgICAgICAqIGFkZCB0aGUgcGFuZWxcbiAgICAgICAgICogY2hlY2sgaWYgZ3JvdXAgYWN0aXZlXG4gICAgICAgICAqIGNoZWNrIGlmIHBhbmVsIGFjdGl2ZVxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmluZGV4ICE9PSAnbnVtYmVyJyB8fFxuICAgICAgICAgICAgb3B0aW9ucy5pbmRleCA+IHRoaXMucGFuZWxzLmxlbmd0aCkge1xuICAgICAgICAgICAgb3B0aW9ucy5pbmRleCA9IHRoaXMucGFuZWxzLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBza2lwU2V0QWN0aXZlID0gISFvcHRpb25zLnNraXBTZXRBY3RpdmU7XG4gICAgICAgIC8vIGVuc3VyZSB0aGUgZ3JvdXAgaXMgdXBkYXRlZCBiZWZvcmUgd2UgZmlyZSBhbnkgZXZlbnRzXG4gICAgICAgIHBhbmVsLnVwZGF0ZVBhcmVudEdyb3VwKHRoaXMuZ3JvdXBQYW5lbCwge1xuICAgICAgICAgICAgc2tpcFNldEFjdGl2ZTogb3B0aW9ucy5za2lwU2V0QWN0aXZlLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5kb0FkZFBhbmVsKHBhbmVsLCBvcHRpb25zLmluZGV4LCB7XG4gICAgICAgICAgICBza2lwU2V0QWN0aXZlOiBza2lwU2V0QWN0aXZlLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZVBhbmVsID09PSBwYW5lbCkge1xuICAgICAgICAgICAgdGhpcy5jb250ZW50Q29udGFpbmVyLnJlbmRlclBhbmVsKHBhbmVsLCB7IGFzQWN0aXZlOiB0cnVlIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc2tpcFNldEFjdGl2ZSkge1xuICAgICAgICAgICAgdGhpcy5kb1NldEFjdGl2ZVBhbmVsKHBhbmVsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW9wdGlvbnMuc2tpcFNldEdyb3VwQWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLmFjY2Vzc29yLmRvU2V0R3JvdXBBY3RpdmUodGhpcy5ncm91cFBhbmVsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW9wdGlvbnMuc2tpcFNldEFjdGl2ZSkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVDb250YWluZXIoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZW1vdmVQYW5lbChncm91cEl0ZW1PcklkLCBvcHRpb25zID0ge1xuICAgICAgICBza2lwU2V0QWN0aXZlOiBmYWxzZSxcbiAgICB9KSB7XG4gICAgICAgIGNvbnN0IGlkID0gdHlwZW9mIGdyb3VwSXRlbU9ySWQgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICA/IGdyb3VwSXRlbU9ySWRcbiAgICAgICAgICAgIDogZ3JvdXBJdGVtT3JJZC5pZDtcbiAgICAgICAgY29uc3QgcGFuZWxUb1JlbW92ZSA9IHRoaXMuX3BhbmVscy5maW5kKChwYW5lbCkgPT4gcGFuZWwuaWQgPT09IGlkKTtcbiAgICAgICAgaWYgKCFwYW5lbFRvUmVtb3ZlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgb3BlcmF0aW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlbW92ZVBhbmVsKHBhbmVsVG9SZW1vdmUsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBjbG9zZUFsbFBhbmVscygpIHtcbiAgICAgICAgaWYgKHRoaXMucGFuZWxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIC8vIHRha2UgYSBjb3B5IHNpbmNlIHdlIHdpbGwgYmUgZWR0aW5nIHRoZSBhcnJheSBhcyB3ZSBpdGVyYXRlIHRocm91Z2hcbiAgICAgICAgICAgIGNvbnN0IGFyclBhbmVsQ3B5ID0gWy4uLnRoaXMucGFuZWxzXTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcGFuZWwgb2YgYXJyUGFuZWxDcHkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRvQ2xvc2UocGFuZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hY2Nlc3Nvci5yZW1vdmVHcm91cCh0aGlzLmdyb3VwUGFuZWwpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNsb3NlUGFuZWwocGFuZWwpIHtcbiAgICAgICAgdGhpcy5kb0Nsb3NlKHBhbmVsKTtcbiAgICB9XG4gICAgZG9DbG9zZShwYW5lbCkge1xuICAgICAgICBjb25zdCBpc0xhc3QgPSB0aGlzLnBhbmVscy5sZW5ndGggPT09IDEgJiYgdGhpcy5hY2Nlc3Nvci5ncm91cHMubGVuZ3RoID09PSAxO1xuICAgICAgICB0aGlzLmFjY2Vzc29yLnJlbW92ZVBhbmVsKHBhbmVsLCBpc0xhc3QgJiYgdGhpcy5hY2Nlc3Nvci5vcHRpb25zLm5vUGFuZWxzT3ZlcmxheSA9PT0gJ2VtcHR5R3JvdXAnXG4gICAgICAgICAgICA/IHsgcmVtb3ZlRW1wdHlHcm91cDogZmFsc2UgfVxuICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgIH1cbiAgICBpc1BhbmVsQWN0aXZlKHBhbmVsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmVQYW5lbCA9PT0gcGFuZWw7XG4gICAgfVxuICAgIHVwZGF0ZUFjdGlvbnMoZWxlbWVudCkge1xuICAgICAgICB0aGlzLnRhYnNDb250YWluZXIuc2V0UmlnaHRBY3Rpb25zRWxlbWVudChlbGVtZW50KTtcbiAgICB9XG4gICAgc2V0QWN0aXZlKGlzR3JvdXBBY3RpdmUsIGZvcmNlID0gZmFsc2UpIHtcbiAgICAgICAgaWYgKCFmb3JjZSAmJiB0aGlzLmlzQWN0aXZlID09PSBpc0dyb3VwQWN0aXZlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faXNHcm91cEFjdGl2ZSA9IGlzR3JvdXBBY3RpdmU7XG4gICAgICAgIHRvZ2dsZUNsYXNzKHRoaXMuY29udGFpbmVyLCAnZHYtYWN0aXZlLWdyb3VwJywgaXNHcm91cEFjdGl2ZSk7XG4gICAgICAgIHRvZ2dsZUNsYXNzKHRoaXMuY29udGFpbmVyLCAnZHYtaW5hY3RpdmUtZ3JvdXAnLCAhaXNHcm91cEFjdGl2ZSk7XG4gICAgICAgIHRoaXMudGFic0NvbnRhaW5lci5zZXRBY3RpdmUodGhpcy5pc0FjdGl2ZSk7XG4gICAgICAgIGlmICghdGhpcy5fYWN0aXZlUGFuZWwgJiYgdGhpcy5wYW5lbHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5kb1NldEFjdGl2ZVBhbmVsKHRoaXMucGFuZWxzWzBdKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVwZGF0ZUNvbnRhaW5lcigpO1xuICAgIH1cbiAgICBsYXlvdXQod2lkdGgsIGhlaWdodCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHRoaXMuX3dpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuX2hlaWdodCA9IGhlaWdodDtcbiAgICAgICAgdGhpcy5jb250ZW50Q29udGFpbmVyLmxheW91dCh0aGlzLl93aWR0aCwgdGhpcy5faGVpZ2h0KTtcbiAgICAgICAgaWYgKChfYSA9IHRoaXMuX2FjdGl2ZVBhbmVsKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubGF5b3V0KSB7XG4gICAgICAgICAgICB0aGlzLl9hY3RpdmVQYW5lbC5sYXlvdXQodGhpcy5fd2lkdGgsIHRoaXMuX2hlaWdodCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3JlbW92ZVBhbmVsKHBhbmVsLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGlzQWN0aXZlUGFuZWwgPSB0aGlzLl9hY3RpdmVQYW5lbCA9PT0gcGFuZWw7XG4gICAgICAgIHRoaXMuZG9SZW1vdmVQYW5lbChwYW5lbCk7XG4gICAgICAgIGlmIChpc0FjdGl2ZVBhbmVsICYmIHRoaXMucGFuZWxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IG5leHRQYW5lbCA9IHRoaXMubW9zdFJlY2VudGx5VXNlZFswXTtcbiAgICAgICAgICAgIHRoaXMub3BlblBhbmVsKG5leHRQYW5lbCwge1xuICAgICAgICAgICAgICAgIHNraXBTZXRBY3RpdmU6IG9wdGlvbnMuc2tpcFNldEFjdGl2ZSxcbiAgICAgICAgICAgICAgICBza2lwU2V0R3JvdXBBY3RpdmU6IG9wdGlvbnMuc2tpcFNldEFjdGl2ZUdyb3VwLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZVBhbmVsICYmIHRoaXMucGFuZWxzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5kb1NldEFjdGl2ZVBhbmVsKHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFvcHRpb25zLnNraXBTZXRBY3RpdmUpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQ29udGFpbmVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhbmVsO1xuICAgIH1cbiAgICBkb1JlbW92ZVBhbmVsKHBhbmVsKSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5wYW5lbHMuaW5kZXhPZihwYW5lbCk7XG4gICAgICAgIGlmICh0aGlzLl9hY3RpdmVQYW5lbCA9PT0gcGFuZWwpIHtcbiAgICAgICAgICAgIHRoaXMuY29udGVudENvbnRhaW5lci5jbG9zZVBhbmVsKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50YWJzQ29udGFpbmVyLmRlbGV0ZShwYW5lbC5pZCk7XG4gICAgICAgIHRoaXMuX3BhbmVscy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBpZiAodGhpcy5tb3N0UmVjZW50bHlVc2VkLmluY2x1ZGVzKHBhbmVsKSkge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLm1vc3RSZWNlbnRseVVzZWQuaW5kZXhPZihwYW5lbCk7XG4gICAgICAgICAgICB0aGlzLm1vc3RSZWNlbnRseVVzZWQuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkaXNwb3NhYmxlID0gdGhpcy5fcGFuZWxEaXNwb3NhYmxlcy5nZXQocGFuZWwuaWQpO1xuICAgICAgICBpZiAoZGlzcG9zYWJsZSkge1xuICAgICAgICAgICAgZGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gICAgICAgICAgICB0aGlzLl9wYW5lbERpc3Bvc2FibGVzLmRlbGV0ZShwYW5lbC5pZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fb25EaWRSZW1vdmVQYW5lbC5maXJlKHsgcGFuZWwgfSk7XG4gICAgfVxuICAgIGRvQWRkUGFuZWwocGFuZWwsIGluZGV4ID0gdGhpcy5wYW5lbHMubGVuZ3RoLCBvcHRpb25zID0geyBza2lwU2V0QWN0aXZlOiBmYWxzZSB9KSB7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nUGFuZWwgPSB0aGlzLl9wYW5lbHMuaW5kZXhPZihwYW5lbCk7XG4gICAgICAgIGNvbnN0IGhhc0V4aXN0aW5nUGFuZWwgPSBleGlzdGluZ1BhbmVsID4gLTE7XG4gICAgICAgIHRoaXMudGFic0NvbnRhaW5lci5zaG93KCk7XG4gICAgICAgIHRoaXMuY29udGVudENvbnRhaW5lci5zaG93KCk7XG4gICAgICAgIHRoaXMudGFic0NvbnRhaW5lci5vcGVuUGFuZWwocGFuZWwsIGluZGV4KTtcbiAgICAgICAgaWYgKCFvcHRpb25zLnNraXBTZXRBY3RpdmUpIHtcbiAgICAgICAgICAgIHRoaXMuY29udGVudENvbnRhaW5lci5vcGVuUGFuZWwocGFuZWwpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNFeGlzdGluZ1BhbmVsKSB7XG4gICAgICAgICAgICAvLyBUT0RPIC0gbmVlZCB0byBlbnN1cmUgb3JkZXJpbmcgaGFzbid0IGNoYW5nZWQgYW5kIGlmIGl0IGhhcyBuZWVkIHRvIHJlLW9yZGVyIHRoaXMucGFuZWxzXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51cGRhdGVNcnUocGFuZWwpO1xuICAgICAgICB0aGlzLnBhbmVscy5zcGxpY2UoaW5kZXgsIDAsIHBhbmVsKTtcbiAgICAgICAgdGhpcy5fcGFuZWxEaXNwb3NhYmxlcy5zZXQocGFuZWwuaWQsIG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKHBhbmVsLmFwaS5vbkRpZFRpdGxlQ2hhbmdlKChldmVudCkgPT4gdGhpcy5fb25EaWRQYW5lbFRpdGxlQ2hhbmdlLmZpcmUoZXZlbnQpKSwgcGFuZWwuYXBpLm9uRGlkUGFyYW1ldGVyc0NoYW5nZSgoZXZlbnQpID0+IHRoaXMuX29uRGlkUGFuZWxQYXJhbWV0ZXJzQ2hhbmdlLmZpcmUoZXZlbnQpKSkpO1xuICAgICAgICB0aGlzLl9vbkRpZEFkZFBhbmVsLmZpcmUoeyBwYW5lbCB9KTtcbiAgICB9XG4gICAgZG9TZXRBY3RpdmVQYW5lbChwYW5lbCkge1xuICAgICAgICBpZiAodGhpcy5fYWN0aXZlUGFuZWwgPT09IHBhbmVsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYWN0aXZlUGFuZWwgPSBwYW5lbDtcbiAgICAgICAgaWYgKHBhbmVsKSB7XG4gICAgICAgICAgICB0aGlzLnRhYnNDb250YWluZXIuc2V0QWN0aXZlUGFuZWwocGFuZWwpO1xuICAgICAgICAgICAgcGFuZWwubGF5b3V0KHRoaXMuX3dpZHRoLCB0aGlzLl9oZWlnaHQpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVNcnUocGFuZWwpO1xuICAgICAgICAgICAgdGhpcy5fb25EaWRBY3RpdmVQYW5lbENoYW5nZS5maXJlKHtcbiAgICAgICAgICAgICAgICBwYW5lbCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHVwZGF0ZU1ydShwYW5lbCkge1xuICAgICAgICBpZiAodGhpcy5tb3N0UmVjZW50bHlVc2VkLmluY2x1ZGVzKHBhbmVsKSkge1xuICAgICAgICAgICAgdGhpcy5tb3N0UmVjZW50bHlVc2VkLnNwbGljZSh0aGlzLm1vc3RSZWNlbnRseVVzZWQuaW5kZXhPZihwYW5lbCksIDEpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubW9zdFJlY2VudGx5VXNlZCA9IFtwYW5lbCwgLi4udGhpcy5tb3N0UmVjZW50bHlVc2VkXTtcbiAgICB9XG4gICAgdXBkYXRlQ29udGFpbmVyKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICB0aGlzLnBhbmVscy5mb3JFYWNoKChwYW5lbCkgPT4gcGFuZWwucnVuRXZlbnRzKCkpO1xuICAgICAgICBpZiAodGhpcy5pc0VtcHR5ICYmICF0aGlzLndhdGVybWFyaykge1xuICAgICAgICAgICAgY29uc3Qgd2F0ZXJtYXJrID0gdGhpcy5hY2Nlc3Nvci5jcmVhdGVXYXRlcm1hcmtDb21wb25lbnQoKTtcbiAgICAgICAgICAgIHdhdGVybWFyay5pbml0KHtcbiAgICAgICAgICAgICAgICBjb250YWluZXJBcGk6IHRoaXMuX2FwaSxcbiAgICAgICAgICAgICAgICBncm91cDogdGhpcy5ncm91cFBhbmVsLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLndhdGVybWFyayA9IHdhdGVybWFyaztcbiAgICAgICAgICAgIGFkZERpc3Bvc2FibGVMaXN0ZW5lcih0aGlzLndhdGVybWFyay5lbGVtZW50LCAncG9pbnRlcmRvd24nLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWNjZXNzb3IuZG9TZXRHcm91cEFjdGl2ZSh0aGlzLmdyb3VwUGFuZWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5jb250ZW50Q29udGFpbmVyLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy53YXRlcm1hcmsuZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLmlzRW1wdHkgJiYgdGhpcy53YXRlcm1hcmspIHtcbiAgICAgICAgICAgIHRoaXMud2F0ZXJtYXJrLmVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLndhdGVybWFyaykuZGlzcG9zZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EpO1xuICAgICAgICAgICAgdGhpcy53YXRlcm1hcmsgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2FuRGlzcGxheU92ZXJsYXkoZXZlbnQsIHBvc2l0aW9uLCB0YXJnZXQpIHtcbiAgICAgICAgY29uc3QgZmlyZWRFdmVudCA9IG5ldyBEb2Nrdmlld1VuaGFuZGxlZERyYWdPdmVyRXZlbnQoZXZlbnQsIHRhcmdldCwgcG9zaXRpb24sIGdldFBhbmVsRGF0YSwgdGhpcy5hY2Nlc3Nvci5nZXRQYW5lbCh0aGlzLmlkKSk7XG4gICAgICAgIHRoaXMuX29uVW5oYW5kbGVkRHJhZ092ZXJFdmVudC5maXJlKGZpcmVkRXZlbnQpO1xuICAgICAgICByZXR1cm4gZmlyZWRFdmVudC5pc0FjY2VwdGVkO1xuICAgIH1cbiAgICBoYW5kbGVEcm9wRXZlbnQodHlwZSwgZXZlbnQsIHBvc2l0aW9uLCBpbmRleCkge1xuICAgICAgICBpZiAodGhpcy5sb2NrZWQgPT09ICduby1kcm9wLXRhcmdldCcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBnZXRLaW5kKCkge1xuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnaGVhZGVyJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBpbmRleCA9PT0gJ251bWJlcicgPyAndGFiJyA6ICdoZWFkZXJfc3BhY2UnO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2NvbnRlbnQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2NvbnRlbnQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhbmVsID0gdHlwZW9mIGluZGV4ID09PSAnbnVtYmVyJyA/IHRoaXMucGFuZWxzW2luZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgICAgY29uc3Qgd2lsbERyb3BFdmVudCA9IG5ldyBEb2Nrdmlld1dpbGxEcm9wRXZlbnQoe1xuICAgICAgICAgICAgbmF0aXZlRXZlbnQ6IGV2ZW50LFxuICAgICAgICAgICAgcG9zaXRpb24sXG4gICAgICAgICAgICBwYW5lbCxcbiAgICAgICAgICAgIGdldERhdGE6ICgpID0+IGdldFBhbmVsRGF0YSgpLFxuICAgICAgICAgICAga2luZDogZ2V0S2luZCgpLFxuICAgICAgICAgICAgZ3JvdXA6IHRoaXMuZ3JvdXBQYW5lbCxcbiAgICAgICAgICAgIGFwaTogdGhpcy5fYXBpLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fb25XaWxsRHJvcC5maXJlKHdpbGxEcm9wRXZlbnQpO1xuICAgICAgICBpZiAod2lsbERyb3BFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGF0YSA9IGdldFBhbmVsRGF0YSgpO1xuICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLnZpZXdJZCA9PT0gdGhpcy5hY2Nlc3Nvci5pZCkge1xuICAgICAgICAgICAgaWYgKGRhdGEucGFuZWxJZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIHRoaXMgaXMgYSBncm91cCBtb3ZlIGRuZCBldmVudFxuICAgICAgICAgICAgICAgIGNvbnN0IHsgZ3JvdXBJZCB9ID0gZGF0YTtcbiAgICAgICAgICAgICAgICB0aGlzLl9vbk1vdmUuZmlyZSh7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogcG9zaXRpb24sXG4gICAgICAgICAgICAgICAgICAgIGdyb3VwSWQ6IGdyb3VwSWQsXG4gICAgICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGZyb21TYW1lR3JvdXAgPSB0aGlzLnRhYnNDb250YWluZXIuaW5kZXhPZihkYXRhLnBhbmVsSWQpICE9PSAtMTtcbiAgICAgICAgICAgIGlmIChmcm9tU2FtZUdyb3VwICYmIHRoaXMudGFic0NvbnRhaW5lci5zaXplID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgeyBncm91cElkLCBwYW5lbElkIH0gPSBkYXRhO1xuICAgICAgICAgICAgY29uc3QgaXNTYW1lR3JvdXAgPSB0aGlzLmlkID09PSBncm91cElkO1xuICAgICAgICAgICAgaWYgKGlzU2FtZUdyb3VwICYmICFwb3NpdGlvbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IG9sZEluZGV4ID0gdGhpcy50YWJzQ29udGFpbmVyLmluZGV4T2YocGFuZWxJZCk7XG4gICAgICAgICAgICAgICAgaWYgKG9sZEluZGV4ID09PSBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fb25Nb3ZlLmZpcmUoe1xuICAgICAgICAgICAgICAgIHRhcmdldDogcG9zaXRpb24sXG4gICAgICAgICAgICAgICAgZ3JvdXBJZDogZGF0YS5ncm91cElkLFxuICAgICAgICAgICAgICAgIGl0ZW1JZDogZGF0YS5wYW5lbElkLFxuICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9vbkRpZERyb3AuZmlyZShuZXcgRG9ja3ZpZXdEaWREcm9wRXZlbnQoe1xuICAgICAgICAgICAgICAgIG5hdGl2ZUV2ZW50OiBldmVudCxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbixcbiAgICAgICAgICAgICAgICBwYW5lbCxcbiAgICAgICAgICAgICAgICBnZXREYXRhOiAoKSA9PiBnZXRQYW5lbERhdGEoKSxcbiAgICAgICAgICAgICAgICBncm91cDogdGhpcy5ncm91cFBhbmVsLFxuICAgICAgICAgICAgICAgIGFwaTogdGhpcy5fYXBpLFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICBzdXBlci5kaXNwb3NlKCk7XG4gICAgICAgIChfYSA9IHRoaXMud2F0ZXJtYXJrKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZWxlbWVudC5yZW1vdmUoKTtcbiAgICAgICAgKF9jID0gKF9iID0gdGhpcy53YXRlcm1hcmspID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5kaXNwb3NlKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuY2FsbChfYik7XG4gICAgICAgIHRoaXMud2F0ZXJtYXJrID0gdW5kZWZpbmVkO1xuICAgICAgICBmb3IgKGNvbnN0IHBhbmVsIG9mIHRoaXMucGFuZWxzKSB7XG4gICAgICAgICAgICBwYW5lbC5kaXNwb3NlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50YWJzQ29udGFpbmVyLmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5jb250ZW50Q29udGFpbmVyLmRpc3Bvc2UoKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBEb2Nrdmlld1BhbmVsQXBpSW1wbCwgfSBmcm9tICcuLi9hcGkvZG9ja3ZpZXdQYW5lbEFwaSc7XG5pbXBvcnQgeyBDb21wb3NpdGVEaXNwb3NhYmxlIH0gZnJvbSAnLi4vbGlmZWN5Y2xlJztcbmltcG9ydCB7IFdpbGxGb2N1c0V2ZW50IH0gZnJvbSAnLi4vYXBpL3BhbmVsQXBpJztcbmV4cG9ydCBjbGFzcyBEb2Nrdmlld1BhbmVsIGV4dGVuZHMgQ29tcG9zaXRlRGlzcG9zYWJsZSB7XG4gICAgZ2V0IHBhcmFtcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcmFtcztcbiAgICB9XG4gICAgZ2V0IHRpdGxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdGl0bGU7XG4gICAgfVxuICAgIGdldCBncm91cCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dyb3VwO1xuICAgIH1cbiAgICBnZXQgcmVuZGVyZXIoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIChfYSA9IHRoaXMuX3JlbmRlcmVyKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB0aGlzLmFjY2Vzc29yLnJlbmRlcmVyO1xuICAgIH1cbiAgICBnZXQgbWluaW11bVdpZHRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWluaW11bVdpZHRoO1xuICAgIH1cbiAgICBnZXQgbWluaW11bUhlaWdodCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21pbmltdW1IZWlnaHQ7XG4gICAgfVxuICAgIGdldCBtYXhpbXVtV2lkdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXhpbXVtV2lkdGg7XG4gICAgfVxuICAgIGdldCBtYXhpbXVtSGVpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWF4aW11bUhlaWdodDtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoaWQsIGNvbXBvbmVudCwgdGFiQ29tcG9uZW50LCBhY2Nlc3NvciwgY29udGFpbmVyQXBpLCBncm91cCwgdmlldywgb3B0aW9ucykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMuYWNjZXNzb3IgPSBhY2Nlc3NvcjtcbiAgICAgICAgdGhpcy5jb250YWluZXJBcGkgPSBjb250YWluZXJBcGk7XG4gICAgICAgIHRoaXMudmlldyA9IHZpZXc7XG4gICAgICAgIHRoaXMuX3JlbmRlcmVyID0gb3B0aW9ucy5yZW5kZXJlcjtcbiAgICAgICAgdGhpcy5fZ3JvdXAgPSBncm91cDtcbiAgICAgICAgdGhpcy5fbWluaW11bVdpZHRoID0gb3B0aW9ucy5taW5pbXVtV2lkdGg7XG4gICAgICAgIHRoaXMuX21pbmltdW1IZWlnaHQgPSBvcHRpb25zLm1pbmltdW1IZWlnaHQ7XG4gICAgICAgIHRoaXMuX21heGltdW1XaWR0aCA9IG9wdGlvbnMubWF4aW11bVdpZHRoO1xuICAgICAgICB0aGlzLl9tYXhpbXVtSGVpZ2h0ID0gb3B0aW9ucy5tYXhpbXVtSGVpZ2h0O1xuICAgICAgICB0aGlzLmFwaSA9IG5ldyBEb2Nrdmlld1BhbmVsQXBpSW1wbCh0aGlzLCB0aGlzLl9ncm91cCwgYWNjZXNzb3IsIGNvbXBvbmVudCwgdGFiQ29tcG9uZW50KTtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyh0aGlzLmFwaS5vbkFjdGl2ZUNoYW5nZSgoKSA9PiB7XG4gICAgICAgICAgICBhY2Nlc3Nvci5zZXRBY3RpdmVQYW5lbCh0aGlzKTtcbiAgICAgICAgfSksIHRoaXMuYXBpLm9uRGlkU2l6ZUNoYW5nZSgoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIC8vIGZvcndhcmQgdGhlIHJlc2l6ZSBldmVudCB0byB0aGUgZ3JvdXAgc2luY2UgaWYgeW91IHdhbnQgdG8gcmVzaXplIGEgcGFuZWxcbiAgICAgICAgICAgIC8vIHlvdSBhcmUgYWN0dWFsbHkganVzdCByZXNpemluZyB0aGUgcGFuZWxzIHBhcmVudCB3aGljaCBpcyB0aGUgZ3JvdXBcbiAgICAgICAgICAgIHRoaXMuZ3JvdXAuYXBpLnNldFNpemUoZXZlbnQpO1xuICAgICAgICB9KSwgdGhpcy5hcGkub25EaWRSZW5kZXJlckNoYW5nZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmdyb3VwLm1vZGVsLnJlcmVuZGVyKHRoaXMpO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGluaXQocGFyYW1zKSB7XG4gICAgICAgIHRoaXMuX3BhcmFtcyA9IHBhcmFtcy5wYXJhbXM7XG4gICAgICAgIHRoaXMudmlldy5pbml0KE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcGFyYW1zKSwgeyBhcGk6IHRoaXMuYXBpLCBjb250YWluZXJBcGk6IHRoaXMuY29udGFpbmVyQXBpIH0pKTtcbiAgICAgICAgdGhpcy5zZXRUaXRsZShwYXJhbXMudGl0bGUpO1xuICAgIH1cbiAgICBmb2N1cygpIHtcbiAgICAgICAgY29uc3QgZXZlbnQgPSBuZXcgV2lsbEZvY3VzRXZlbnQoKTtcbiAgICAgICAgdGhpcy5hcGkuX29uV2lsbEZvY3VzLmZpcmUoZXZlbnQpO1xuICAgICAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5hcGkuaXNBY3RpdmUpIHtcbiAgICAgICAgICAgIHRoaXMuYXBpLnNldEFjdGl2ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlkOiB0aGlzLmlkLFxuICAgICAgICAgICAgY29udGVudENvbXBvbmVudDogdGhpcy52aWV3LmNvbnRlbnRDb21wb25lbnQsXG4gICAgICAgICAgICB0YWJDb21wb25lbnQ6IHRoaXMudmlldy50YWJDb21wb25lbnQsXG4gICAgICAgICAgICBwYXJhbXM6IE9iamVjdC5rZXlzKHRoaXMuX3BhcmFtcyB8fCB7fSkubGVuZ3RoID4gMFxuICAgICAgICAgICAgICAgID8gdGhpcy5fcGFyYW1zXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB0aXRsZTogdGhpcy50aXRsZSxcbiAgICAgICAgICAgIHJlbmRlcmVyOiB0aGlzLl9yZW5kZXJlcixcbiAgICAgICAgICAgIG1pbmltdW1IZWlnaHQ6IHRoaXMuX21pbmltdW1IZWlnaHQsXG4gICAgICAgICAgICBtYXhpbXVtSGVpZ2h0OiB0aGlzLl9tYXhpbXVtSGVpZ2h0LFxuICAgICAgICAgICAgbWluaW11bVdpZHRoOiB0aGlzLl9taW5pbXVtV2lkdGgsXG4gICAgICAgICAgICBtYXhpbXVtV2lkdGg6IHRoaXMuX21heGltdW1XaWR0aCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgc2V0VGl0bGUodGl0bGUpIHtcbiAgICAgICAgY29uc3QgZGlkVGl0bGVDaGFuZ2UgPSB0aXRsZSAhPT0gdGhpcy50aXRsZTtcbiAgICAgICAgaWYgKGRpZFRpdGxlQ2hhbmdlKSB7XG4gICAgICAgICAgICB0aGlzLl90aXRsZSA9IHRpdGxlO1xuICAgICAgICAgICAgdGhpcy5hcGkuX29uRGlkVGl0bGVDaGFuZ2UuZmlyZSh7IHRpdGxlIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldFJlbmRlcmVyKHJlbmRlcmVyKSB7XG4gICAgICAgIGNvbnN0IGRpZENoYW5nZSA9IHJlbmRlcmVyICE9PSB0aGlzLnJlbmRlcmVyO1xuICAgICAgICBpZiAoZGlkQ2hhbmdlKSB7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xuICAgICAgICAgICAgdGhpcy5hcGkuX29uRGlkUmVuZGVyZXJDaGFuZ2UuZmlyZSh7XG4gICAgICAgICAgICAgICAgcmVuZGVyZXI6IHJlbmRlcmVyLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlKGV2ZW50KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgLy8gbWVyZ2UgdGhlIG5ldyBwYXJhbWV0ZXJzIHdpdGggdGhlIGV4aXN0aW5nIHBhcmFtZXRlcnNcbiAgICAgICAgdGhpcy5fcGFyYW1zID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCAoKF9hID0gdGhpcy5fcGFyYW1zKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB7fSkpLCBldmVudC5wYXJhbXMpO1xuICAgICAgICAvKipcbiAgICAgICAgICogZGVsZXRlIG5ldyBrZXlzIHRoYXQgaGF2ZSBhIHZhbHVlIG9mIHVuZGVmaW5lZCxcbiAgICAgICAgICogYWxsb3cgdmFsdWVzIG9mIG51bGxcbiAgICAgICAgICovXG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKGV2ZW50LnBhcmFtcykpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5wYXJhbXNba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3BhcmFtc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHVwZGF0ZSB0aGUgdmlldyB3aXRoIHRoZSB1cGRhdGVkIHByb3BzXG4gICAgICAgIHRoaXMudmlldy51cGRhdGUoe1xuICAgICAgICAgICAgcGFyYW1zOiB0aGlzLl9wYXJhbXMsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB1cGRhdGVQYXJlbnRHcm91cChncm91cCwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLl9ncm91cCA9IGdyb3VwO1xuICAgICAgICB0aGlzLmFwaS5ncm91cCA9IHRoaXMuX2dyb3VwO1xuICAgICAgICBjb25zdCBpc1BhbmVsVmlzaWJsZSA9IHRoaXMuX2dyb3VwLm1vZGVsLmlzUGFuZWxBY3RpdmUodGhpcyk7XG4gICAgICAgIGNvbnN0IGlzQWN0aXZlID0gdGhpcy5ncm91cC5hcGkuaXNBY3RpdmUgJiYgaXNQYW5lbFZpc2libGU7XG4gICAgICAgIGlmICghKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5za2lwU2V0QWN0aXZlKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYXBpLmlzQWN0aXZlICE9PSBpc0FjdGl2ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYXBpLl9vbkRpZEFjdGl2ZUNoYW5nZS5maXJlKHtcbiAgICAgICAgICAgICAgICAgICAgaXNBY3RpdmU6IHRoaXMuZ3JvdXAuYXBpLmlzQWN0aXZlICYmIGlzUGFuZWxWaXNpYmxlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmFwaS5pc1Zpc2libGUgIT09IGlzUGFuZWxWaXNpYmxlKSB7XG4gICAgICAgICAgICB0aGlzLmFwaS5fb25EaWRWaXNpYmlsaXR5Q2hhbmdlLmZpcmUoe1xuICAgICAgICAgICAgICAgIGlzVmlzaWJsZTogaXNQYW5lbFZpc2libGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBydW5FdmVudHMoKSB7XG4gICAgICAgIGNvbnN0IGlzUGFuZWxWaXNpYmxlID0gdGhpcy5fZ3JvdXAubW9kZWwuaXNQYW5lbEFjdGl2ZSh0aGlzKTtcbiAgICAgICAgY29uc3QgaXNBY3RpdmUgPSB0aGlzLmdyb3VwLmFwaS5pc0FjdGl2ZSAmJiBpc1BhbmVsVmlzaWJsZTtcbiAgICAgICAgaWYgKHRoaXMuYXBpLmlzQWN0aXZlICE9PSBpc0FjdGl2ZSkge1xuICAgICAgICAgICAgdGhpcy5hcGkuX29uRGlkQWN0aXZlQ2hhbmdlLmZpcmUoe1xuICAgICAgICAgICAgICAgIGlzQWN0aXZlOiB0aGlzLmdyb3VwLmFwaS5pc0FjdGl2ZSAmJiBpc1BhbmVsVmlzaWJsZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmFwaS5pc1Zpc2libGUgIT09IGlzUGFuZWxWaXNpYmxlKSB7XG4gICAgICAgICAgICB0aGlzLmFwaS5fb25EaWRWaXNpYmlsaXR5Q2hhbmdlLmZpcmUoe1xuICAgICAgICAgICAgICAgIGlzVmlzaWJsZTogaXNQYW5lbFZpc2libGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsYXlvdXQod2lkdGgsIGhlaWdodCkge1xuICAgICAgICAvLyBUT0RPOiBDYW4gd2Ugc29tZWhvdyBkbyBoZWlnaHQgd2l0aG91dCBoZWFkZXIgaGVpZ2h0IG9yIGluZGljYXRlIHdoYXQgdGhlIGhlYWRlciBoZWlnaHQgaXM/XG4gICAgICAgIHRoaXMuYXBpLl9vbkRpZERpbWVuc2lvbkNoYW5nZS5maXJlKHtcbiAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnZpZXcubGF5b3V0KHdpZHRoLCBoZWlnaHQpO1xuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICB0aGlzLmFwaS5kaXNwb3NlKCk7XG4gICAgICAgIHRoaXMudmlldy5kaXNwb3NlKCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgRGVmYXVsdFRhYiB9IGZyb20gJy4vY29tcG9uZW50cy90YWIvZGVmYXVsdFRhYic7XG5leHBvcnQgY2xhc3MgRG9ja3ZpZXdQYW5lbE1vZGVsIHtcbiAgICBnZXQgY29udGVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRlbnQ7XG4gICAgfVxuICAgIGdldCB0YWIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90YWI7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGFjY2Vzc29yLCBpZCwgY29udGVudENvbXBvbmVudCwgdGFiQ29tcG9uZW50KSB7XG4gICAgICAgIHRoaXMuYWNjZXNzb3IgPSBhY2Nlc3NvcjtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLmNvbnRlbnRDb21wb25lbnQgPSBjb250ZW50Q29tcG9uZW50O1xuICAgICAgICB0aGlzLnRhYkNvbXBvbmVudCA9IHRhYkNvbXBvbmVudDtcbiAgICAgICAgdGhpcy5fY29udGVudCA9IHRoaXMuY3JlYXRlQ29udGVudENvbXBvbmVudCh0aGlzLmlkLCBjb250ZW50Q29tcG9uZW50KTtcbiAgICAgICAgdGhpcy5fdGFiID0gdGhpcy5jcmVhdGVUYWJDb21wb25lbnQodGhpcy5pZCwgdGFiQ29tcG9uZW50KTtcbiAgICB9XG4gICAgaW5pdChwYXJhbXMpIHtcbiAgICAgICAgdGhpcy5jb250ZW50LmluaXQocGFyYW1zKTtcbiAgICAgICAgdGhpcy50YWIuaW5pdChwYXJhbXMpO1xuICAgIH1cbiAgICB1cGRhdGVQYXJlbnRHcm91cChfZ3JvdXAsIF9pc1BhbmVsVmlzaWJsZSkge1xuICAgICAgICAvLyBub29wXG4gICAgfVxuICAgIGxheW91dCh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuY29udGVudCkubGF5b3V0KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgd2lkdGgsIGhlaWdodCk7XG4gICAgfVxuICAgIHVwZGF0ZShldmVudCkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuY29udGVudCkudXBkYXRlKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgZXZlbnQpO1xuICAgICAgICAoX2QgPSAoX2MgPSB0aGlzLnRhYikudXBkYXRlKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QuY2FsbChfYywgZXZlbnQpO1xuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuY29udGVudCkuZGlzcG9zZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EpO1xuICAgICAgICAoX2QgPSAoX2MgPSB0aGlzLnRhYikuZGlzcG9zZSkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmNhbGwoX2MpO1xuICAgIH1cbiAgICBjcmVhdGVDb250ZW50Q29tcG9uZW50KGlkLCBjb21wb25lbnROYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFjY2Vzc29yLm9wdGlvbnMuY3JlYXRlQ29tcG9uZW50KHtcbiAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgbmFtZTogY29tcG9uZW50TmFtZSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNyZWF0ZVRhYkNvbXBvbmVudChpZCwgY29tcG9uZW50TmFtZSkge1xuICAgICAgICBjb25zdCBuYW1lID0gY29tcG9uZW50TmFtZSAhPT0gbnVsbCAmJiBjb21wb25lbnROYW1lICE9PSB2b2lkIDAgPyBjb21wb25lbnROYW1lIDogdGhpcy5hY2Nlc3Nvci5vcHRpb25zLmRlZmF1bHRUYWJDb21wb25lbnQ7XG4gICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hY2Nlc3Nvci5vcHRpb25zLmNyZWF0ZVRhYkNvbXBvbmVudCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IHRoaXMuYWNjZXNzb3Iub3B0aW9ucy5jcmVhdGVUYWJDb21wb25lbnQoe1xuICAgICAgICAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoY29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb21wb25lbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERlZmF1bHRUYWIoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYGRvY2t2aWV3OiB0YWJDb21wb25lbnQgJyR7Y29tcG9uZW50TmFtZX0nIHdhcyBub3QgZm91bmQuIGZhbGxpbmcgYmFjayB0byB0aGUgZGVmYXVsdCB0YWIuYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBEZWZhdWx0VGFiKCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQWNjZXB0YWJsZUV2ZW50IH0gZnJvbSAnLi4vZXZlbnRzJztcbmV4cG9ydCBjbGFzcyBEb2Nrdmlld1VuaGFuZGxlZERyYWdPdmVyRXZlbnQgZXh0ZW5kcyBBY2NlcHRhYmxlRXZlbnQge1xuICAgIGNvbnN0cnVjdG9yKG5hdGl2ZUV2ZW50LCB0YXJnZXQsIHBvc2l0aW9uLCBnZXREYXRhLCBncm91cCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm5hdGl2ZUV2ZW50ID0gbmF0aXZlRXZlbnQ7XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICB0aGlzLnBvc2l0aW9uID0gcG9zaXRpb247XG4gICAgICAgIHRoaXMuZ2V0RGF0YSA9IGdldERhdGE7XG4gICAgICAgIHRoaXMuZ3JvdXAgPSBncm91cDtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgUFJPUEVSVFlfS0VZU19ET0NLVklFVyA9ICgoKSA9PiB7XG4gICAgLyoqXG4gICAgICogYnkgcmVhZG9uZyB0aGUga2V5cyBmcm9tIGFuIGVtcHR5IHZhbHVlIG9iamVjdCBUeXBlU2NyaXB0IHdpbGwgZXJyb3JcbiAgICAgKiB3aGVuIHdlIGFkZCBvciByZW1vdmUgbmV3IHByb3BlcnRpZXMgdG8gYERvY2t2aWV3T3B0aW9uc2BcbiAgICAgKi9cbiAgICBjb25zdCBwcm9wZXJ0aWVzID0ge1xuICAgICAgICBkaXNhYmxlQXV0b1Jlc2l6aW5nOiB1bmRlZmluZWQsXG4gICAgICAgIGhpZGVCb3JkZXJzOiB1bmRlZmluZWQsXG4gICAgICAgIHNpbmdsZVRhYk1vZGU6IHVuZGVmaW5lZCxcbiAgICAgICAgZGlzYWJsZUZsb2F0aW5nR3JvdXBzOiB1bmRlZmluZWQsXG4gICAgICAgIGZsb2F0aW5nR3JvdXBCb3VuZHM6IHVuZGVmaW5lZCxcbiAgICAgICAgcG9wb3V0VXJsOiB1bmRlZmluZWQsXG4gICAgICAgIGRlZmF1bHRSZW5kZXJlcjogdW5kZWZpbmVkLFxuICAgICAgICBkZWJ1ZzogdW5kZWZpbmVkLFxuICAgICAgICByb290T3ZlcmxheU1vZGVsOiB1bmRlZmluZWQsXG4gICAgICAgIGxvY2tlZDogdW5kZWZpbmVkLFxuICAgICAgICBkaXNhYmxlRG5kOiB1bmRlZmluZWQsXG4gICAgICAgIGdhcDogdW5kZWZpbmVkLFxuICAgICAgICBjbGFzc05hbWU6IHVuZGVmaW5lZCxcbiAgICAgICAgbm9QYW5lbHNPdmVybGF5OiB1bmRlZmluZWQsXG4gICAgfTtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMocHJvcGVydGllcyk7XG59KSgpO1xuZXhwb3J0IGZ1bmN0aW9uIGlzUGFuZWxPcHRpb25zV2l0aFBhbmVsKGRhdGEpIHtcbiAgICBpZiAoZGF0YS5yZWZlcmVuY2VQYW5lbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUGFuZWxPcHRpb25zV2l0aEdyb3VwKGRhdGEpIHtcbiAgICBpZiAoZGF0YS5yZWZlcmVuY2VHcm91cCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzR3JvdXBPcHRpb25zV2l0aFBhbmVsKGRhdGEpIHtcbiAgICBpZiAoZGF0YS5yZWZlcmVuY2VQYW5lbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzR3JvdXBPcHRpb25zV2l0aEdyb3VwKGRhdGEpIHtcbiAgICBpZiAoZGF0YS5yZWZlcmVuY2VHcm91cCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuIiwiaW1wb3J0IHsgQ29tcG9zaXRlRGlzcG9zYWJsZSB9IGZyb20gJy4uL2xpZmVjeWNsZSc7XG5leHBvcnQgY2xhc3MgU3RyaWN0RXZlbnRzU2VxdWVuY2luZyBleHRlbmRzIENvbXBvc2l0ZURpc3Bvc2FibGUge1xuICAgIGNvbnN0cnVjdG9yKGFjY2Vzc29yKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuYWNjZXNzb3IgPSBhY2Nlc3NvcjtcbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgfVxuICAgIGluaXQoKSB7XG4gICAgICAgIGNvbnN0IHBhbmVscyA9IG5ldyBTZXQoKTtcbiAgICAgICAgY29uc3QgZ3JvdXBzID0gbmV3IFNldCgpO1xuICAgICAgICB0aGlzLmFkZERpc3Bvc2FibGVzKHRoaXMuYWNjZXNzb3Iub25EaWRBZGRQYW5lbCgocGFuZWwpID0+IHtcbiAgICAgICAgICAgIGlmIChwYW5lbHMuaGFzKHBhbmVsLmFwaS5pZCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGRvY2t2aWV3OiBJbnZhbGlkIGV2ZW50IHNlcXVlbmNlLiBbb25EaWRBZGRQYW5lbF0gY2FsbGVkIGZvciBwYW5lbCAke3BhbmVsLmFwaS5pZH0gYnV0IHBhbmVsIGFscmVhZHkgZXhpc3RzYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYW5lbHMuYWRkKHBhbmVsLmFwaS5pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLCB0aGlzLmFjY2Vzc29yLm9uRGlkUmVtb3ZlUGFuZWwoKHBhbmVsKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXBhbmVscy5oYXMocGFuZWwuYXBpLmlkKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgZG9ja3ZpZXc6IEludmFsaWQgZXZlbnQgc2VxdWVuY2UuIFtvbkRpZFJlbW92ZVBhbmVsXSBjYWxsZWQgZm9yIHBhbmVsICR7cGFuZWwuYXBpLmlkfSBidXQgcGFuZWwgZG9lcyBub3QgZXhpc3RzYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYW5lbHMuZGVsZXRlKHBhbmVsLmFwaS5pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLCB0aGlzLmFjY2Vzc29yLm9uRGlkQWRkR3JvdXAoKGdyb3VwKSA9PiB7XG4gICAgICAgICAgICBpZiAoZ3JvdXBzLmhhcyhncm91cC5hcGkuaWQpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBkb2NrdmlldzogSW52YWxpZCBldmVudCBzZXF1ZW5jZS4gW29uRGlkQWRkR3JvdXBdIGNhbGxlZCBmb3IgZ3JvdXAgJHtncm91cC5hcGkuaWR9IGJ1dCBncm91cCBhbHJlYWR5IGV4aXN0c2ApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZ3JvdXBzLmFkZChncm91cC5hcGkuaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSwgdGhpcy5hY2Nlc3Nvci5vbkRpZFJlbW92ZUdyb3VwKChncm91cCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFncm91cHMuaGFzKGdyb3VwLmFwaS5pZCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGRvY2t2aWV3OiBJbnZhbGlkIGV2ZW50IHNlcXVlbmNlLiBbb25EaWRSZW1vdmVHcm91cF0gY2FsbGVkIGZvciBncm91cCAke2dyb3VwLmFwaS5pZH0gYnV0IGdyb3VwIGRvZXMgbm90IGV4aXN0c2ApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZ3JvdXBzLmRlbGV0ZShncm91cC5hcGkuaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgfVxufVxuIiwiZXhwb3J0IHt9O1xuIiwiaW1wb3J0IHsgRW1pdHRlciwgYWRkRGlzcG9zYWJsZUxpc3RlbmVyLCBhZGREaXNwb3NhYmxlV2luZG93TGlzdGVuZXIsIH0gZnJvbSAnLi9ldmVudHMnO1xuaW1wb3J0IHsgQ29tcG9zaXRlRGlzcG9zYWJsZSB9IGZyb20gJy4vbGlmZWN5Y2xlJztcbmV4cG9ydCBjbGFzcyBPdmVyZmxvd09ic2VydmVyIGV4dGVuZHMgQ29tcG9zaXRlRGlzcG9zYWJsZSB7XG4gICAgY29uc3RydWN0b3IoZWwpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fb25EaWRDaGFuZ2UgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRGlkQ2hhbmdlID0gdGhpcy5fb25EaWRDaGFuZ2UuZXZlbnQ7XG4gICAgICAgIHRoaXMuX3ZhbHVlID0gbnVsbDtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyh0aGlzLl9vbkRpZENoYW5nZSwgd2F0Y2hFbGVtZW50UmVzaXplKGVsLCAoZW50cnkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGhhc1Njcm9sbFggPSBlbnRyeS50YXJnZXQuc2Nyb2xsV2lkdGggPiBlbnRyeS50YXJnZXQuY2xpZW50V2lkdGg7XG4gICAgICAgICAgICBjb25zdCBoYXNTY3JvbGxZID0gZW50cnkudGFyZ2V0LnNjcm9sbEhlaWdodCA+IGVudHJ5LnRhcmdldC5jbGllbnRIZWlnaHQ7XG4gICAgICAgICAgICB0aGlzLl92YWx1ZSA9IHsgaGFzU2Nyb2xsWCwgaGFzU2Nyb2xsWSB9O1xuICAgICAgICAgICAgdGhpcy5fb25EaWRDaGFuZ2UuZmlyZSh0aGlzLl92YWx1ZSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gd2F0Y2hFbGVtZW50UmVzaXplKGVsZW1lbnQsIGNiKSB7XG4gICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoKGVudGlyZXMpID0+IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZhc3QgYnJvd3NlciB3aW5kb3cgcmVzaXplIHByb2R1Y2VzIEVycm9yOiBSZXNpemVPYnNlcnZlciBsb29wIGxpbWl0IGV4Y2VlZGVkLlxuICAgICAgICAgKiBUaGUgZXJyb3IgaXNuJ3QgdmlzaWJsZSBpbiBicm93c2VyIGNvbnNvbGUsIGRvZXNuJ3QgYWZmZWN0IGZ1bmN0aW9uYWxpdHksIGJ1dCBkZWdyYWRlcyBwZXJmb3JtYW5jZS5cbiAgICAgICAgICogU2VlIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQ5Mzg0MTIwL3Jlc2l6ZW9ic2VydmVyLWxvb3AtbGltaXQtZXhjZWVkZWQvNTg3MDE1MjMjNTg3MDE1MjNcbiAgICAgICAgICovXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmaXJzdEVudHJ5ID0gZW50aXJlc1swXTtcbiAgICAgICAgICAgIGNiKGZpcnN0RW50cnkpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBvYnNlcnZlci5vYnNlcnZlKGVsZW1lbnQpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRpc3Bvc2U6ICgpID0+IHtcbiAgICAgICAgICAgIG9ic2VydmVyLnVub2JzZXJ2ZShlbGVtZW50KTtcbiAgICAgICAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuZXhwb3J0IGNvbnN0IHJlbW92ZUNsYXNzZXMgPSAoZWxlbWVudCwgLi4uY2xhc3NlcykgPT4ge1xuICAgIGZvciAoY29uc3QgY2xhc3NuYW1lIG9mIGNsYXNzZXMpIHtcbiAgICAgICAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzbmFtZSkpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShjbGFzc25hbWUpO1xuICAgICAgICB9XG4gICAgfVxufTtcbmV4cG9ydCBjb25zdCBhZGRDbGFzc2VzID0gKGVsZW1lbnQsIC4uLmNsYXNzZXMpID0+IHtcbiAgICBmb3IgKGNvbnN0IGNsYXNzbmFtZSBvZiBjbGFzc2VzKSB7XG4gICAgICAgIGlmICghZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NuYW1lKSkge1xuICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKGNsYXNzbmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuZXhwb3J0IGNvbnN0IHRvZ2dsZUNsYXNzID0gKGVsZW1lbnQsIGNsYXNzTmFtZSwgaXNUb2dnbGVkKSA9PiB7XG4gICAgY29uc3QgaGFzQ2xhc3MgPSBlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpO1xuICAgIGlmIChpc1RvZ2dsZWQgJiYgIWhhc0NsYXNzKSB7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICAgIH1cbiAgICBpZiAoIWlzVG9nZ2xlZCAmJiBoYXNDbGFzcykge1xuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgICB9XG59O1xuZXhwb3J0IGZ1bmN0aW9uIGlzQW5jZXN0b3IodGVzdENoaWxkLCB0ZXN0QW5jZXN0b3IpIHtcbiAgICB3aGlsZSAodGVzdENoaWxkKSB7XG4gICAgICAgIGlmICh0ZXN0Q2hpbGQgPT09IHRlc3RBbmNlc3Rvcikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdGVzdENoaWxkID0gdGVzdENoaWxkLnBhcmVudE5vZGU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRFbGVtZW50c0J5VGFnTmFtZSh0YWcpIHtcbiAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUodGFnKSwgMCk7XG59XG5leHBvcnQgZnVuY3Rpb24gdHJhY2tGb2N1cyhlbGVtZW50KSB7XG4gICAgcmV0dXJuIG5ldyBGb2N1c1RyYWNrZXIoZWxlbWVudCk7XG59XG4vKipcbiAqIFRyYWNrIGZvY3VzIG9uIGFuIGVsZW1lbnQuIEVuc3VyZSB0YWJJbmRleCBpcyBzZXQgd2hlbiBhbiBIVE1MRWxlbWVudCBpcyBub3QgZm9jdXNhYmxlIGJ5IGRlZmF1bHRcbiAqL1xuY2xhc3MgRm9jdXNUcmFja2VyIGV4dGVuZHMgQ29tcG9zaXRlRGlzcG9zYWJsZSB7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl9vbkRpZEZvY3VzID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZEZvY3VzID0gdGhpcy5fb25EaWRGb2N1cy5ldmVudDtcbiAgICAgICAgdGhpcy5fb25EaWRCbHVyID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZEJsdXIgPSB0aGlzLl9vbkRpZEJsdXIuZXZlbnQ7XG4gICAgICAgIHRoaXMuYWRkRGlzcG9zYWJsZXModGhpcy5fb25EaWRGb2N1cywgdGhpcy5fb25EaWRCbHVyKTtcbiAgICAgICAgbGV0IGhhc0ZvY3VzID0gaXNBbmNlc3Rvcihkb2N1bWVudC5hY3RpdmVFbGVtZW50LCBlbGVtZW50KTtcbiAgICAgICAgbGV0IGxvb3NpbmdGb2N1cyA9IGZhbHNlO1xuICAgICAgICBjb25zdCBvbkZvY3VzID0gKCkgPT4ge1xuICAgICAgICAgICAgbG9vc2luZ0ZvY3VzID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoIWhhc0ZvY3VzKSB7XG4gICAgICAgICAgICAgICAgaGFzRm9jdXMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuX29uRGlkRm9jdXMuZmlyZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBvbkJsdXIgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoaGFzRm9jdXMpIHtcbiAgICAgICAgICAgICAgICBsb29zaW5nRm9jdXMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxvb3NpbmdGb2N1cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9vc2luZ0ZvY3VzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNGb2N1cyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25EaWRCbHVyLmZpcmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9yZWZyZXNoU3RhdGVIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudE5vZGVIYXNGb2N1cyA9IGlzQW5jZXN0b3IoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCwgZWxlbWVudCk7XG4gICAgICAgICAgICBpZiAoY3VycmVudE5vZGVIYXNGb2N1cyAhPT0gaGFzRm9jdXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoaGFzRm9jdXMpIHtcbiAgICAgICAgICAgICAgICAgICAgb25CbHVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBvbkZvY3VzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLmFkZERpc3Bvc2FibGVzKGFkZERpc3Bvc2FibGVMaXN0ZW5lcihlbGVtZW50LCAnZm9jdXMnLCBvbkZvY3VzLCB0cnVlKSk7XG4gICAgICAgICAgICB0aGlzLmFkZERpc3Bvc2FibGVzKGFkZERpc3Bvc2FibGVMaXN0ZW5lcihlbGVtZW50LCAnYmx1cicsIG9uQmx1ciwgdHJ1ZSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyhhZGREaXNwb3NhYmxlV2luZG93TGlzdGVuZXIoZWxlbWVudCwgJ2ZvY3VzJywgb25Gb2N1cywgdHJ1ZSkpO1xuICAgICAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyhhZGREaXNwb3NhYmxlV2luZG93TGlzdGVuZXIoZWxlbWVudCwgJ2JsdXInLCBvbkJsdXIsIHRydWUpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZWZyZXNoU3RhdGUoKSB7XG4gICAgICAgIHRoaXMuX3JlZnJlc2hTdGF0ZUhhbmRsZXIoKTtcbiAgICB9XG59XG4vLyBxdWFzaTogYXBwYXJlbnRseSwgYnV0IG5vdCByZWFsbHk7IHNlZW1pbmdseVxuY29uc3QgUVVBU0lfUFJFVkVOVF9ERUZBVUxUX0tFWSA9ICdkdi1xdWFzaVByZXZlbnREZWZhdWx0Jztcbi8vIG1hcmsgYW4gZXZlbnQgZGlyZWN0bHkgZm9yIG90aGVyIGxpc3RlbmVycyB0byBjaGVja1xuZXhwb3J0IGZ1bmN0aW9uIHF1YXNpUHJldmVudERlZmF1bHQoZXZlbnQpIHtcbiAgICBldmVudFtRVUFTSV9QUkVWRU5UX0RFRkFVTFRfS0VZXSA9IHRydWU7XG59XG4vLyBjaGVjayBpZiB0aGlzIGV2ZW50IGhhcyBiZWVuIG1hcmtlZFxuZXhwb3J0IGZ1bmN0aW9uIHF1YXNpRGVmYXVsdFByZXZlbnRlZChldmVudCkge1xuICAgIHJldHVybiBldmVudFtRVUFTSV9QUkVWRU5UX0RFRkFVTFRfS0VZXTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhZGRTdHlsZXMoZG9jdW1lbnQsIHN0eWxlU2hlZXRMaXN0KSB7XG4gICAgY29uc3Qgc3R5bGVTaGVldHMgPSBBcnJheS5mcm9tKHN0eWxlU2hlZXRMaXN0KTtcbiAgICBmb3IgKGNvbnN0IHN0eWxlU2hlZXQgb2Ygc3R5bGVTaGVldHMpIHtcbiAgICAgICAgaWYgKHN0eWxlU2hlZXQuaHJlZikge1xuICAgICAgICAgICAgY29uc3QgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTtcbiAgICAgICAgICAgIGxpbmsuaHJlZiA9IHN0eWxlU2hlZXQuaHJlZjtcbiAgICAgICAgICAgIGxpbmsudHlwZSA9IHN0eWxlU2hlZXQudHlwZTtcbiAgICAgICAgICAgIGxpbmsucmVsID0gJ3N0eWxlc2hlZXQnO1xuICAgICAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChsaW5rKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgY3NzVGV4dHMgPSBbXTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChzdHlsZVNoZWV0LmNzc1J1bGVzKSB7XG4gICAgICAgICAgICAgICAgY3NzVGV4dHMgPSBBcnJheS5mcm9tKHN0eWxlU2hlZXQuY3NzUnVsZXMpLm1hcCgocnVsZSkgPT4gcnVsZS5jc3NUZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAvLyBzZWN1cml0eSBlcnJvcnMgKGxhY2sgb2YgcGVybWlzc2lvbnMpLCBpZ25vcmVcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHJ1bGUgb2YgY3NzVGV4dHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICAgICAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHJ1bGUpKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGdldERvbU5vZGVQYWdlUG9zaXRpb24oZG9tTm9kZSkge1xuICAgIGNvbnN0IHsgbGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0IH0gPSBkb21Ob2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6IGxlZnQgKyB3aW5kb3cuc2Nyb2xsWCxcbiAgICAgICAgdG9wOiB0b3AgKyB3aW5kb3cuc2Nyb2xsWSxcbiAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICB9O1xufVxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIGFuIGVsZW1lbnQgaXMgaW4gdGhlIERPTSAoaW5jbHVkaW5nIHRoZSBTaGFkb3cgRE9NKVxuICogQHNlZSBodHRwczovL3Rlcm9kb3gudGVjaC9ob3ctdG8tdGVsbC1pZi1hbi1lbGVtZW50LWlzLWluLXRoZS1kb20taW5jbHVkaW5nLXRoZS1zaGFkb3ctZG9tL1xuICovXG5leHBvcnQgZnVuY3Rpb24gaXNJbkRvY3VtZW50KGVsZW1lbnQpIHtcbiAgICBsZXQgY3VycmVudEVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHdoaWxlIChjdXJyZW50RWxlbWVudCA9PT0gbnVsbCB8fCBjdXJyZW50RWxlbWVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogY3VycmVudEVsZW1lbnQucGFyZW50Tm9kZSkge1xuICAgICAgICBpZiAoY3VycmVudEVsZW1lbnQucGFyZW50Tm9kZSA9PT0gZG9jdW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGN1cnJlbnRFbGVtZW50LnBhcmVudE5vZGUgaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50KSB7XG4gICAgICAgICAgICAvLyBoYW5kbGUgc2hhZG93IERPTXNcbiAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50ID0gY3VycmVudEVsZW1lbnQucGFyZW50Tm9kZS5ob3N0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY3VycmVudEVsZW1lbnQgPSBjdXJyZW50RWxlbWVudC5wYXJlbnROb2RlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhZGRUZXN0SWQoZWxlbWVudCwgaWQpIHtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS10ZXN0aWQnLCBpZCk7XG59XG5leHBvcnQgZnVuY3Rpb24gZGlzYWJsZUlmcmFtZVBvaW50RXZlbnRzKCkge1xuICAgIGNvbnN0IGlmcmFtZXMgPSBbXG4gICAgICAgIC4uLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdpZnJhbWUnKSxcbiAgICAgICAgLi4uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3dlYnZpZXcnKSxcbiAgICBdO1xuICAgIGNvbnN0IG9yaWdpbmFsID0gbmV3IFdlYWtNYXAoKTsgLy8gZG9uJ3QgaG9sZCBvbnRvIEhUTUxFbGVtZW50IHJlZmVyZW5jZXMgbG9uZ2VyIHRoYW4gcmVxdWlyZWRcbiAgICBmb3IgKGNvbnN0IGlmcmFtZSBvZiBpZnJhbWVzKSB7XG4gICAgICAgIG9yaWdpbmFsLnNldChpZnJhbWUsIGlmcmFtZS5zdHlsZS5wb2ludGVyRXZlbnRzKTtcbiAgICAgICAgaWZyYW1lLnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnbm9uZSc7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHJlbGVhc2U6ICgpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgaWZyYW1lIG9mIGlmcmFtZXMpIHtcbiAgICAgICAgICAgICAgICBpZnJhbWUuc3R5bGUucG9pbnRlckV2ZW50cyA9IChfYSA9IG9yaWdpbmFsLmdldChpZnJhbWUpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAnYXV0byc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZnJhbWVzLnNwbGljZSgwLCBpZnJhbWVzLmxlbmd0aCk7IC8vIGRvbid0IGhvbGQgb250byBIVE1MRWxlbWVudCByZWZlcmVuY2VzIGxvbmdlciB0aGFuIHJlcXVpcmVkXG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXREb2Nrdmlld1RoZW1lKGVsZW1lbnQpIHtcbiAgICBmdW5jdGlvbiB0b0NsYXNzTGlzdChlbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IGxpc3QgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbGVtZW50LmNsYXNzTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGlzdC5wdXNoKGVsZW1lbnQuY2xhc3NMaXN0Lml0ZW0oaSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsaXN0O1xuICAgIH1cbiAgICBsZXQgdGhlbWUgPSB1bmRlZmluZWQ7XG4gICAgbGV0IHBhcmVudCA9IGVsZW1lbnQ7XG4gICAgd2hpbGUgKHBhcmVudCAhPT0gbnVsbCkge1xuICAgICAgICB0aGVtZSA9IHRvQ2xhc3NMaXN0KHBhcmVudCkuZmluZCgoY2xzKSA9PiBjbHMuc3RhcnRzV2l0aCgnZG9ja3ZpZXctdGhlbWUtJykpO1xuICAgICAgICBpZiAodHlwZW9mIHRoZW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgfVxuICAgIHJldHVybiB0aGVtZTtcbn1cbmV4cG9ydCBjbGFzcyBDbGFzc25hbWVzIHtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIHRoaXMuX2NsYXNzTmFtZXMgPSBbXTtcbiAgICB9XG4gICAgc2V0Q2xhc3NOYW1lcyhjbGFzc05hbWVzKSB7XG4gICAgICAgIGZvciAoY29uc3QgY2xhc3NOYW1lIG9mIHRoaXMuX2NsYXNzTmFtZXMpIHtcbiAgICAgICAgICAgIHRvZ2dsZUNsYXNzKHRoaXMuZWxlbWVudCwgY2xhc3NOYW1lLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXNcbiAgICAgICAgICAgIC5zcGxpdCgnICcpXG4gICAgICAgICAgICAuZmlsdGVyKCh2KSA9PiB2LnRyaW0oKS5sZW5ndGggPiAwKTtcbiAgICAgICAgZm9yIChjb25zdCBjbGFzc05hbWUgb2YgdGhpcy5fY2xhc3NOYW1lcykge1xuICAgICAgICAgICAgdG9nZ2xlQ2xhc3ModGhpcy5lbGVtZW50LCBjbGFzc05hbWUsIHRydWUpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiZXhwb3J0IHZhciBFdmVudDtcbihmdW5jdGlvbiAoRXZlbnQpIHtcbiAgICBFdmVudC5hbnkgPSAoLi4uY2hpbGRyZW4pID0+IHtcbiAgICAgICAgcmV0dXJuIChsaXN0ZW5lcikgPT4ge1xuICAgICAgICAgICAgY29uc3QgZGlzcG9zYWJsZXMgPSBjaGlsZHJlbi5tYXAoKGNoaWxkKSA9PiBjaGlsZChsaXN0ZW5lcikpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBkaXNwb3NlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3Bvc2FibGVzLmZvckVhY2goKGQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICB9O1xufSkoRXZlbnQgfHwgKEV2ZW50ID0ge30pKTtcbmV4cG9ydCBjbGFzcyBEb2Nrdmlld0V2ZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5fZGVmYXVsdFByZXZlbnRlZCA9IGZhbHNlO1xuICAgIH1cbiAgICBnZXQgZGVmYXVsdFByZXZlbnRlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZmF1bHRQcmV2ZW50ZWQ7XG4gICAgfVxuICAgIHByZXZlbnREZWZhdWx0KCkge1xuICAgICAgICB0aGlzLl9kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQWNjZXB0YWJsZUV2ZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5faXNBY2NlcHRlZCA9IGZhbHNlO1xuICAgIH1cbiAgICBnZXQgaXNBY2NlcHRlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzQWNjZXB0ZWQ7XG4gICAgfVxuICAgIGFjY2VwdCgpIHtcbiAgICAgICAgdGhpcy5faXNBY2NlcHRlZCA9IHRydWU7XG4gICAgfVxufVxuY2xhc3MgTGVha2FnZU1vbml0b3Ige1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmV2ZW50cyA9IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgZ2V0IHNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV2ZW50cy5zaXplO1xuICAgIH1cbiAgICBhZGQoZXZlbnQsIHN0YWNrdHJhY2UpIHtcbiAgICAgICAgdGhpcy5ldmVudHMuc2V0KGV2ZW50LCBzdGFja3RyYWNlKTtcbiAgICB9XG4gICAgZGVsZXRlKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuZXZlbnRzLmRlbGV0ZShldmVudCk7XG4gICAgfVxuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLmV2ZW50cy5jbGVhcigpO1xuICAgIH1cbn1cbmNsYXNzIFN0YWNrdHJhY2Uge1xuICAgIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIG5ldyBTdGFja3RyYWNlKChfYSA9IG5ldyBFcnJvcigpLnN0YWNrKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAnJyk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgcHJpbnQoKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignZG9ja3ZpZXc6IHN0YWNrdHJhY2UnLCB0aGlzLnZhbHVlKTtcbiAgICB9XG59XG5jbGFzcyBMaXN0ZW5lciB7XG4gICAgY29uc3RydWN0b3IoY2FsbGJhY2ssIHN0YWNrdHJhY2UpIHtcbiAgICAgICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgICAgICB0aGlzLnN0YWNrdHJhY2UgPSBzdGFja3RyYWNlO1xuICAgIH1cbn1cbi8vIHJlbGF0aXZlbHkgc2ltcGxlIGV2ZW50IGVtaXR0ZXIgdGFrZW4gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L3ZzY29kZS9ibG9iL21hc3Rlci9zcmMvdnMvYmFzZS9jb21tb24vZXZlbnQudHNcbmV4cG9ydCBjbGFzcyBFbWl0dGVyIHtcbiAgICBzdGF0aWMgc2V0TGVha2FnZU1vbml0b3JFbmFibGVkKGlzRW5hYmxlZCkge1xuICAgICAgICBpZiAoaXNFbmFibGVkICE9PSBFbWl0dGVyLkVOQUJMRV9UUkFDS0lORykge1xuICAgICAgICAgICAgRW1pdHRlci5NRU1PUllfTEVBS19XQVRDSEVSLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICAgICAgRW1pdHRlci5FTkFCTEVfVFJBQ0tJTkcgPSBpc0VuYWJsZWQ7XG4gICAgfVxuICAgIGdldCB2YWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xhc3Q7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5fbGlzdGVuZXJzID0gW107XG4gICAgICAgIHRoaXMuX2Rpc3Bvc2VkID0gZmFsc2U7XG4gICAgfVxuICAgIGdldCBldmVudCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9ldmVudCkge1xuICAgICAgICAgICAgdGhpcy5fZXZlbnQgPSAoY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgaWYgKCgoX2EgPSB0aGlzLm9wdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5yZXBsYXkpICYmIHRoaXMuX2xhc3QgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh0aGlzLl9sYXN0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgbGlzdGVuZXIgPSBuZXcgTGlzdGVuZXIoY2FsbGJhY2ssIEVtaXR0ZXIuRU5BQkxFX1RSQUNLSU5HID8gU3RhY2t0cmFjZS5jcmVhdGUoKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3Bvc2U6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9saXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKEVtaXR0ZXIuRU5BQkxFX1RSQUNLSU5HKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS53YXJuKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICBgZG9ja3ZpZXc6IGxpc3RlbmVyIGFscmVhZHkgZGlzcG9zZWRgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICBTdGFja3RyYWNlLmNyZWF0ZSgpLnByaW50KClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKEVtaXR0ZXIuRU5BQkxFX1RSQUNLSU5HKSB7XG4gICAgICAgICAgICAgICAgRW1pdHRlci5NRU1PUllfTEVBS19XQVRDSEVSLmFkZCh0aGlzLl9ldmVudCwgU3RhY2t0cmFjZS5jcmVhdGUoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2V2ZW50O1xuICAgIH1cbiAgICBmaXJlKGUpIHtcbiAgICAgICAgdGhpcy5fbGFzdCA9IGU7XG4gICAgICAgIGZvciAoY29uc3QgbGlzdGVuZXIgb2YgdGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgICAgICAgICBsaXN0ZW5lci5jYWxsYmFjayhlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2Rpc3Bvc2VkKSB7XG4gICAgICAgICAgICB0aGlzLl9kaXNwb3NlZCA9IHRydWU7XG4gICAgICAgICAgICBpZiAodGhpcy5fbGlzdGVuZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoRW1pdHRlci5FTkFCTEVfVFJBQ0tJTkcpIHtcbiAgICAgICAgICAgICAgICAgICAgcXVldWVNaWNyb3Rhc2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZG9uJ3QgY2hlY2sgdW50aWwgc3RhY2sgb2YgZXhlY3V0aW9uIGlzIGNvbXBsZXRlZCB0byBhbGxvdyBmb3Igb3V0LW9mLW9yZGVyIGRpc3Bvc2FscyB3aXRoaW4gdGhlIHNhbWUgZXhlY3V0aW9uIGJsb2NrXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGxpc3RlbmVyIG9mIHRoaXMuX2xpc3RlbmVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignZG9ja3ZpZXc6IHN0YWNrdHJhY2UnLCAoX2EgPSBsaXN0ZW5lci5zdGFja3RyYWNlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucHJpbnQoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9saXN0ZW5lcnMgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChFbWl0dGVyLkVOQUJMRV9UUkFDS0lORyAmJiB0aGlzLl9ldmVudCkge1xuICAgICAgICAgICAgICAgIEVtaXR0ZXIuTUVNT1JZX0xFQUtfV0FUQ0hFUi5kZWxldGUodGhpcy5fZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuRW1pdHRlci5FTkFCTEVfVFJBQ0tJTkcgPSBmYWxzZTtcbkVtaXR0ZXIuTUVNT1JZX0xFQUtfV0FUQ0hFUiA9IG5ldyBMZWFrYWdlTW9uaXRvcigpO1xuZXhwb3J0IGZ1bmN0aW9uIGFkZERpc3Bvc2FibGVXaW5kb3dMaXN0ZW5lcihlbGVtZW50LCB0eXBlLCBsaXN0ZW5lciwgb3B0aW9ucykge1xuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGlzcG9zZTogKCkgPT4ge1xuICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCBvcHRpb25zKTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFkZERpc3Bvc2FibGVMaXN0ZW5lcihlbGVtZW50LCB0eXBlLCBsaXN0ZW5lciwgb3B0aW9ucykge1xuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGlzcG9zZTogKCkgPT4ge1xuICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCBvcHRpb25zKTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLyoqXG4gKlxuICogRXZlbnQgRW1pdHRlciB0aGF0IGZpcmVzIGV2ZW50cyBmcm9tIGEgTWljcm90YXNrIGNhbGxiYWNrLCBvbmx5IG9uZSBldmVudCB3aWxsIGZpcmUgcGVyIGV2ZW50LWxvb3AgY3ljbGUuXG4gKlxuICogSXQncyBraW5kIG9mIGxpa2UgdXNpbmcgYW4gYGFzYXBTY2hlZHVsZXJgIGluIFJ4SnMgd2l0aCBhZGRpdGlvbmFsIGxvZ2ljIHRvIG9ubHkgZmlyZSBvbmNlIHBlciBldmVudC1sb29wIGN5Y2xlLlxuICogVGhpcyBpbXBsZW1lbnRhdGlvbiBleGlzdHMgdG8gYXZvaWQgZXh0ZXJuYWwgZGVwZW5kZW5jaWVzLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL3F1ZXVlTWljcm90YXNrXG4gKiBAc2VlIGh0dHBzOi8vcnhqcy5kZXYvYXBpL2luZGV4L2NvbnN0L2FzYXBTY2hlZHVsZXJcbiAqL1xuZXhwb3J0IGNsYXNzIEFzYXBFdmVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuX29uRmlyZWQgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLl9jdXJyZW50RmlyZUNvdW50ID0gMDtcbiAgICAgICAgdGhpcy5fcXVldWVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMub25FdmVudCA9IChlKSA9PiB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIHdoZW4gdGhlIGV2ZW50IGlzIGZpcnN0IHN1YnNjcmliZWQgdG8gdGFrZSBub3RlIG9mIHRoZSBjdXJyZW50IGZpcmUgY291bnRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3QgZmlyZUNvdW50QXRUaW1lT2ZFdmVudFN1YnNjcmlwdGlvbiA9IHRoaXMuX2N1cnJlbnRGaXJlQ291bnQ7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fb25GaXJlZC5ldmVudCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogaWYgdGhlIGN1cnJlbnQgZmlyZSBjb3VudCBpcyBncmVhdGVyIHRoYW4gdGhlIGZpcmUgY291bnQgYXQgZXZlbnQgc3Vic2NyaXB0aW9uXG4gICAgICAgICAgICAgICAgICogdGhlbiB0aGUgZXZlbnQgaGFzIGJlZW4gZmlyZWQgc2luY2Ugd2Ugc3Vic2NyaWJlZCBhbmQgaXQncyBvayB0byBcIm9uX25leHRcIiB0aGUgZXZlbnQuXG4gICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgKiBpZiB0aGUgY291bnQgaXMgbm90IGdyZWF0ZXIgdGhlbiB3aGF0IHdlIGFyZSByZWNpZXZpbmcgaXMgYW4gZXZlbnQgZnJvbSB0aGUgbWljcm90YXNrXG4gICAgICAgICAgICAgICAgICogcXVldWUgdGhhdCB3YXMgdHJpZ2dlcmVkIGJlZm9yZSB3ZSBhY3R1YWxseSBzdWJzY3JpYmVkIGFuZCB0aGVyZm9yZSB3ZSBzaG91bGQgaWdub3JlIGl0LlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jdXJyZW50RmlyZUNvdW50ID4gZmlyZUNvdW50QXRUaW1lT2ZFdmVudFN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGZpcmUoKSB7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRGaXJlQ291bnQrKztcbiAgICAgICAgaWYgKHRoaXMuX3F1ZXVlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3F1ZXVlZCA9IHRydWU7XG4gICAgICAgIHF1ZXVlTWljcm90YXNrKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3F1ZXVlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5fb25GaXJlZC5maXJlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICB0aGlzLl9vbkZpcmVkLmRpc3Bvc2UoKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBFbWl0dGVyLCBFdmVudCwgQXNhcEV2ZW50IH0gZnJvbSAnLi4vZXZlbnRzJztcbmltcG9ydCB7IGdldEdyaWRMb2NhdGlvbiwgR3JpZHZpZXcgfSBmcm9tICcuL2dyaWR2aWV3JztcbmltcG9ydCB7IERpc3Bvc2FibGUgfSBmcm9tICcuLi9saWZlY3ljbGUnO1xuaW1wb3J0IHsgc2VxdWVudGlhbE51bWJlckdlbmVyYXRvciB9IGZyb20gJy4uL21hdGgnO1xuaW1wb3J0IHsgU2l6aW5nIH0gZnJvbSAnLi4vc3BsaXR2aWV3L3NwbGl0dmlldyc7XG5pbXBvcnQgeyBSZXNpemFibGUgfSBmcm9tICcuLi9yZXNpemFibGUnO1xuaW1wb3J0IHsgQ2xhc3NuYW1lcyB9IGZyb20gJy4uL2RvbSc7XG5jb25zdCBuZXh0TGF5b3V0SWQgPSBzZXF1ZW50aWFsTnVtYmVyR2VuZXJhdG9yKCk7XG5leHBvcnQgZnVuY3Rpb24gdG9UYXJnZXQoZGlyZWN0aW9uKSB7XG4gICAgc3dpdGNoIChkaXJlY3Rpb24pIHtcbiAgICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgICAgICByZXR1cm4gJ2xlZnQnO1xuICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgICByZXR1cm4gJ3JpZ2h0JztcbiAgICAgICAgY2FzZSAnYWJvdmUnOlxuICAgICAgICAgICAgcmV0dXJuICd0b3AnO1xuICAgICAgICBjYXNlICdiZWxvdyc6XG4gICAgICAgICAgICByZXR1cm4gJ2JvdHRvbSc7XG4gICAgICAgIGNhc2UgJ3dpdGhpbic6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gJ2NlbnRlcic7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEJhc2VHcmlkIGV4dGVuZHMgUmVzaXphYmxlIHtcbiAgICBnZXQgaWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcbiAgICB9XG4gICAgZ2V0IHNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ncm91cHMuc2l6ZTtcbiAgICB9XG4gICAgZ2V0IGdyb3VwcygpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5fZ3JvdXBzLnZhbHVlcygpKS5tYXAoKF8pID0+IF8udmFsdWUpO1xuICAgIH1cbiAgICBnZXQgd2lkdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyaWR2aWV3LndpZHRoO1xuICAgIH1cbiAgICBnZXQgaGVpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ncmlkdmlldy5oZWlnaHQ7XG4gICAgfVxuICAgIGdldCBtaW5pbXVtSGVpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ncmlkdmlldy5taW5pbXVtSGVpZ2h0O1xuICAgIH1cbiAgICBnZXQgbWF4aW11bUhlaWdodCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3JpZHZpZXcubWF4aW11bUhlaWdodDtcbiAgICB9XG4gICAgZ2V0IG1pbmltdW1XaWR0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3JpZHZpZXcubWluaW11bVdpZHRoO1xuICAgIH1cbiAgICBnZXQgbWF4aW11bVdpZHRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ncmlkdmlldy5tYXhpbXVtV2lkdGg7XG4gICAgfVxuICAgIGdldCBhY3RpdmVHcm91cCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2ZUdyb3VwO1xuICAgIH1cbiAgICBnZXQgbG9ja2VkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ncmlkdmlldy5sb2NrZWQ7XG4gICAgfVxuICAgIHNldCBsb2NrZWQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5ncmlkdmlldy5sb2NrZWQgPSB2YWx1ZTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgc3VwZXIoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksIG9wdGlvbnMuZGlzYWJsZUF1dG9SZXNpemluZyk7XG4gICAgICAgIHRoaXMuX2lkID0gbmV4dExheW91dElkLm5leHQoKTtcbiAgICAgICAgdGhpcy5fZ3JvdXBzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLl9vbkRpZFJlbW92ZSA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRSZW1vdmUgPSB0aGlzLl9vbkRpZFJlbW92ZS5ldmVudDtcbiAgICAgICAgdGhpcy5fb25EaWRBZGQgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRGlkQWRkID0gdGhpcy5fb25EaWRBZGQuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uRGlkTWF4aW1pemVkQ2hhbmdlID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZE1heGltaXplZENoYW5nZSA9IHRoaXMuX29uRGlkTWF4aW1pemVkQ2hhbmdlLmV2ZW50O1xuICAgICAgICB0aGlzLl9vbkRpZEFjdGl2ZUNoYW5nZSA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRBY3RpdmVDaGFuZ2UgPSB0aGlzLl9vbkRpZEFjdGl2ZUNoYW5nZS5ldmVudDtcbiAgICAgICAgdGhpcy5fYnVmZmVyT25EaWRMYXlvdXRDaGFuZ2UgPSBuZXcgQXNhcEV2ZW50KCk7XG4gICAgICAgIHRoaXMub25EaWRMYXlvdXRDaGFuZ2UgPSB0aGlzLl9idWZmZXJPbkRpZExheW91dENoYW5nZS5vbkV2ZW50O1xuICAgICAgICB0aGlzLl9vbkRpZFZpZXdWaXNpYmlsaXR5Q2hhbmdlTWljcm9UYXNrUXVldWUgPSBuZXcgQXNhcEV2ZW50KCk7XG4gICAgICAgIHRoaXMub25EaWRWaWV3VmlzaWJpbGl0eUNoYW5nZU1pY3JvVGFza1F1ZXVlID0gdGhpcy5fb25EaWRWaWV3VmlzaWJpbGl0eUNoYW5nZU1pY3JvVGFza1F1ZXVlLm9uRXZlbnQ7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS53aWR0aCA9ICcxMDAlJztcbiAgICAgICAgdGhpcy5fY2xhc3NOYW1lcyA9IG5ldyBDbGFzc25hbWVzKHRoaXMuZWxlbWVudCk7XG4gICAgICAgIHRoaXMuX2NsYXNzTmFtZXMuc2V0Q2xhc3NOYW1lcygoX2EgPSBvcHRpb25zLmNsYXNzTmFtZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJycpO1xuICAgICAgICAvLyB0aGUgY29udGFpbmVyIGlzIG93bmVkIGJ5IHRoZSB0aGlyZC1wYXJ0eSwgZG8gbm90IG1vZGlmeS9kZWxldGUgaXRcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudCk7XG4gICAgICAgIHRoaXMuZ3JpZHZpZXcgPSBuZXcgR3JpZHZpZXcoISFvcHRpb25zLnByb3BvcnRpb25hbExheW91dCwgb3B0aW9ucy5zdHlsZXMsIG9wdGlvbnMub3JpZW50YXRpb24sIG9wdGlvbnMubG9ja2VkLCBvcHRpb25zLm1hcmdpbik7XG4gICAgICAgIHRoaXMuZ3JpZHZpZXcubG9ja2VkID0gISFvcHRpb25zLmxvY2tlZDtcbiAgICAgICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuZ3JpZHZpZXcuZWxlbWVudCk7XG4gICAgICAgIHRoaXMubGF5b3V0KDAsIDAsIHRydWUpOyAvLyBzZXQgc29tZSBlbGVtZW50cyBoZWlnaHQvd2lkdGhzXG4gICAgICAgIHRoaXMuYWRkRGlzcG9zYWJsZXModGhpcy5ncmlkdmlldy5vbkRpZE1heGltaXplZE5vZGVDaGFuZ2UoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9vbkRpZE1heGltaXplZENoYW5nZS5maXJlKHtcbiAgICAgICAgICAgICAgICBwYW5lbDogZXZlbnQudmlldyxcbiAgICAgICAgICAgICAgICBpc01heGltaXplZDogZXZlbnQuaXNNYXhpbWl6ZWQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSksIHRoaXMuZ3JpZHZpZXcub25EaWRWaWV3VmlzaWJpbGl0eUNoYW5nZSgoKSA9PiB0aGlzLl9vbkRpZFZpZXdWaXNpYmlsaXR5Q2hhbmdlTWljcm9UYXNrUXVldWUuZmlyZSgpKSwgdGhpcy5vbkRpZFZpZXdWaXNpYmlsaXR5Q2hhbmdlTWljcm9UYXNrUXVldWUoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5sYXlvdXQodGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIHRydWUpO1xuICAgICAgICB9KSwgRGlzcG9zYWJsZS5mcm9tKCgpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIChfYSA9IHRoaXMuZWxlbWVudC5wYXJlbnRFbGVtZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50KTtcbiAgICAgICAgfSksIHRoaXMuZ3JpZHZpZXcub25EaWRDaGFuZ2UoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fYnVmZmVyT25EaWRMYXlvdXRDaGFuZ2UuZmlyZSgpO1xuICAgICAgICB9KSwgRXZlbnQuYW55KHRoaXMub25EaWRBZGQsIHRoaXMub25EaWRSZW1vdmUsIHRoaXMub25EaWRBY3RpdmVDaGFuZ2UpKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlck9uRGlkTGF5b3V0Q2hhbmdlLmZpcmUoKTtcbiAgICAgICAgfSksIHRoaXMuX29uRGlkTWF4aW1pemVkQ2hhbmdlLCB0aGlzLl9vbkRpZFZpZXdWaXNpYmlsaXR5Q2hhbmdlTWljcm9UYXNrUXVldWUsIHRoaXMuX2J1ZmZlck9uRGlkTGF5b3V0Q2hhbmdlKTtcbiAgICB9XG4gICAgc2V0VmlzaWJsZShwYW5lbCwgdmlzaWJsZSkge1xuICAgICAgICB0aGlzLmdyaWR2aWV3LnNldFZpZXdWaXNpYmxlKGdldEdyaWRMb2NhdGlvbihwYW5lbC5lbGVtZW50KSwgdmlzaWJsZSk7XG4gICAgICAgIHRoaXMuX2J1ZmZlck9uRGlkTGF5b3V0Q2hhbmdlLmZpcmUoKTtcbiAgICB9XG4gICAgaXNWaXNpYmxlKHBhbmVsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyaWR2aWV3LmlzVmlld1Zpc2libGUoZ2V0R3JpZExvY2F0aW9uKHBhbmVsLmVsZW1lbnQpKTtcbiAgICB9XG4gICAgdXBkYXRlT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLnByb3BvcnRpb25hbExheW91dCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICAvLyB0aGlzLmdyaWR2aWV3LnByb3BvcnRpb25hbExheW91dCA9IG9wdGlvbnMucHJvcG9ydGlvbmFsTGF5b3V0OyAvLyBub3Qgc3VwcG9ydGVkXG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMub3JpZW50YXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuZ3JpZHZpZXcub3JpZW50YXRpb24gPSBvcHRpb25zLm9yaWVudGF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmICgnc3R5bGVzJyBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICAvLyB0aGlzLmdyaWR2aWV3LnN0eWxlcyA9IG9wdGlvbnMuc3R5bGVzOyAvLyBub3Qgc3VwcG9ydGVkXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCdkaXNhYmxlUmVzaXppbmcnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzYWJsZVJlc2l6aW5nID0gKF9hID0gb3B0aW9ucy5kaXNhYmxlQXV0b1Jlc2l6aW5nKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJ2xvY2tlZCcgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5sb2NrZWQgPSAoX2IgPSBvcHRpb25zLmxvY2tlZCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCdtYXJnaW4nIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMuZ3JpZHZpZXcubWFyZ2luID0gKF9jID0gb3B0aW9ucy5tYXJnaW4pICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCdjbGFzc05hbWUnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMuX2NsYXNzTmFtZXMuc2V0Q2xhc3NOYW1lcygoX2QgPSBvcHRpb25zLmNsYXNzTmFtZSkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogJycpO1xuICAgICAgICB9XG4gICAgfVxuICAgIG1heGltaXplR3JvdXAocGFuZWwpIHtcbiAgICAgICAgdGhpcy5ncmlkdmlldy5tYXhpbWl6ZVZpZXcocGFuZWwpO1xuICAgICAgICB0aGlzLmRvU2V0R3JvdXBBY3RpdmUocGFuZWwpO1xuICAgIH1cbiAgICBpc01heGltaXplZEdyb3VwKHBhbmVsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyaWR2aWV3Lm1heGltaXplZFZpZXcoKSA9PT0gcGFuZWw7XG4gICAgfVxuICAgIGV4aXRNYXhpbWl6ZWRHcm91cCgpIHtcbiAgICAgICAgdGhpcy5ncmlkdmlldy5leGl0TWF4aW1pemVkVmlldygpO1xuICAgIH1cbiAgICBoYXNNYXhpbWl6ZWRHcm91cCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3JpZHZpZXcuaGFzTWF4aW1pemVkVmlldygpO1xuICAgIH1cbiAgICBkb0FkZEdyb3VwKGdyb3VwLCBsb2NhdGlvbiA9IFswXSwgc2l6ZSkge1xuICAgICAgICB0aGlzLmdyaWR2aWV3LmFkZFZpZXcoZ3JvdXAsIHNpemUgIT09IG51bGwgJiYgc2l6ZSAhPT0gdm9pZCAwID8gc2l6ZSA6IFNpemluZy5EaXN0cmlidXRlLCBsb2NhdGlvbik7XG4gICAgICAgIHRoaXMuX29uRGlkQWRkLmZpcmUoZ3JvdXApO1xuICAgIH1cbiAgICBkb1JlbW92ZUdyb3VwKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgICAgIGlmICghdGhpcy5fZ3JvdXBzLmhhcyhncm91cC5pZCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBvcGVyYXRpb24nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5fZ3JvdXBzLmdldChncm91cC5pZCk7XG4gICAgICAgIGNvbnN0IHZpZXcgPSB0aGlzLmdyaWR2aWV3LnJlbW92ZShncm91cCwgU2l6aW5nLkRpc3RyaWJ1dGUpO1xuICAgICAgICBpZiAoaXRlbSAmJiAhKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5za2lwRGlzcG9zZSkpIHtcbiAgICAgICAgICAgIGl0ZW0uZGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gICAgICAgICAgICBpdGVtLnZhbHVlLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIHRoaXMuX2dyb3Vwcy5kZWxldGUoZ3JvdXAuaWQpO1xuICAgICAgICAgICAgdGhpcy5fb25EaWRSZW1vdmUuZmlyZShncm91cCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnNraXBBY3RpdmUpICYmIHRoaXMuX2FjdGl2ZUdyb3VwID09PSBncm91cCkge1xuICAgICAgICAgICAgY29uc3QgZ3JvdXBzID0gQXJyYXkuZnJvbSh0aGlzLl9ncm91cHMudmFsdWVzKCkpO1xuICAgICAgICAgICAgdGhpcy5kb1NldEdyb3VwQWN0aXZlKGdyb3Vwcy5sZW5ndGggPiAwID8gZ3JvdXBzWzBdLnZhbHVlIDogdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmlldztcbiAgICB9XG4gICAgZ2V0UGFuZWwoaWQpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5fZ3JvdXBzLmdldChpZCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS52YWx1ZTtcbiAgICB9XG4gICAgZG9TZXRHcm91cEFjdGl2ZShncm91cCkge1xuICAgICAgICBpZiAodGhpcy5fYWN0aXZlR3JvdXAgPT09IGdyb3VwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZUdyb3VwKSB7XG4gICAgICAgICAgICB0aGlzLl9hY3RpdmVHcm91cC5zZXRBY3RpdmUoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChncm91cCkge1xuICAgICAgICAgICAgZ3JvdXAuc2V0QWN0aXZlKHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2FjdGl2ZUdyb3VwID0gZ3JvdXA7XG4gICAgICAgIHRoaXMuX29uRGlkQWN0aXZlQ2hhbmdlLmZpcmUoZ3JvdXApO1xuICAgIH1cbiAgICByZW1vdmVHcm91cChncm91cCkge1xuICAgICAgICB0aGlzLmRvUmVtb3ZlR3JvdXAoZ3JvdXApO1xuICAgIH1cbiAgICBtb3ZlVG9OZXh0KG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW9wdGlvbnMuZ3JvdXApIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5hY3RpdmVHcm91cCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdGlvbnMuZ3JvdXAgPSB0aGlzLmFjdGl2ZUdyb3VwO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxvY2F0aW9uID0gZ2V0R3JpZExvY2F0aW9uKG9wdGlvbnMuZ3JvdXAuZWxlbWVudCk7XG4gICAgICAgIGNvbnN0IG5leHQgPSAoX2EgPSB0aGlzLmdyaWR2aWV3Lm5leHQobG9jYXRpb24pKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudmlldztcbiAgICAgICAgdGhpcy5kb1NldEdyb3VwQWN0aXZlKG5leHQpO1xuICAgIH1cbiAgICBtb3ZlVG9QcmV2aW91cyhvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICAgICAgICBvcHRpb25zID0ge307XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFvcHRpb25zLmdyb3VwKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuYWN0aXZlR3JvdXApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcHRpb25zLmdyb3VwID0gdGhpcy5hY3RpdmVHcm91cDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsb2NhdGlvbiA9IGdldEdyaWRMb2NhdGlvbihvcHRpb25zLmdyb3VwLmVsZW1lbnQpO1xuICAgICAgICBjb25zdCBuZXh0ID0gKF9hID0gdGhpcy5ncmlkdmlldy5wcmV2aW91cyhsb2NhdGlvbikpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS52aWV3O1xuICAgICAgICB0aGlzLmRvU2V0R3JvdXBBY3RpdmUobmV4dCk7XG4gICAgfVxuICAgIGxheW91dCh3aWR0aCwgaGVpZ2h0LCBmb3JjZVJlc2l6ZSkge1xuICAgICAgICBjb25zdCBkaWZmZXJlbnQgPSBmb3JjZVJlc2l6ZSB8fCB3aWR0aCAhPT0gdGhpcy53aWR0aCB8fCBoZWlnaHQgIT09IHRoaXMuaGVpZ2h0O1xuICAgICAgICBpZiAoIWRpZmZlcmVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZ3JpZHZpZXcuZWxlbWVudC5zdHlsZS5oZWlnaHQgPSBgJHtoZWlnaHR9cHhgO1xuICAgICAgICB0aGlzLmdyaWR2aWV3LmVsZW1lbnQuc3R5bGUud2lkdGggPSBgJHt3aWR0aH1weGA7XG4gICAgICAgIHRoaXMuZ3JpZHZpZXcubGF5b3V0KHdpZHRoLCBoZWlnaHQpO1xuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICB0aGlzLl9vbkRpZEFjdGl2ZUNoYW5nZS5kaXNwb3NlKCk7XG4gICAgICAgIHRoaXMuX29uRGlkQWRkLmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5fb25EaWRSZW1vdmUuZGlzcG9zZSgpO1xuICAgICAgICBmb3IgKGNvbnN0IGdyb3VwIG9mIHRoaXMuZ3JvdXBzKSB7XG4gICAgICAgICAgICBncm91cC5kaXNwb3NlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ncmlkdmlldy5kaXNwb3NlKCk7XG4gICAgICAgIHN1cGVyLmRpc3Bvc2UoKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyB0cmFja0ZvY3VzIH0gZnJvbSAnLi4vZG9tJztcbmltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUgfSBmcm9tICcuLi9saWZlY3ljbGUnO1xuaW1wb3J0IHsgV2lsbEZvY3VzRXZlbnQgfSBmcm9tICcuLi9hcGkvcGFuZWxBcGknO1xuZXhwb3J0IGNsYXNzIEJhc2VQYW5lbFZpZXcgZXh0ZW5kcyBDb21wb3NpdGVEaXNwb3NhYmxlIHtcbiAgICBnZXQgZWxlbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7XG4gICAgfVxuICAgIGdldCB3aWR0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dpZHRoO1xuICAgIH1cbiAgICBnZXQgaGVpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faGVpZ2h0O1xuICAgIH1cbiAgICBnZXQgcGFyYW1zKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoX2EgPSB0aGlzLl9wYXJhbXMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5wYXJhbXM7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGlkLCBjb21wb25lbnQsIGFwaSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMuY29tcG9uZW50ID0gY29tcG9uZW50O1xuICAgICAgICB0aGlzLmFwaSA9IGFwaTtcbiAgICAgICAgdGhpcy5faGVpZ2h0ID0gMDtcbiAgICAgICAgdGhpcy5fd2lkdGggPSAwO1xuICAgICAgICB0aGlzLl9lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQudGFiSW5kZXggPSAtMTtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5vdXRsaW5lID0gJ25vbmUnO1xuICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLmhlaWdodCA9ICcxMDAlJztcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS53aWR0aCA9ICcxMDAlJztcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgICAgICBjb25zdCBmb2N1c1RyYWNrZXIgPSB0cmFja0ZvY3VzKHRoaXMuX2VsZW1lbnQpO1xuICAgICAgICB0aGlzLmFkZERpc3Bvc2FibGVzKHRoaXMuYXBpLCBmb2N1c1RyYWNrZXIub25EaWRGb2N1cygoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFwaS5fb25EaWRDaGFuZ2VGb2N1cy5maXJlKHsgaXNGb2N1c2VkOiB0cnVlIH0pO1xuICAgICAgICB9KSwgZm9jdXNUcmFja2VyLm9uRGlkQmx1cigoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFwaS5fb25EaWRDaGFuZ2VGb2N1cy5maXJlKHsgaXNGb2N1c2VkOiBmYWxzZSB9KTtcbiAgICAgICAgfSksIGZvY3VzVHJhY2tlcik7XG4gICAgfVxuICAgIGZvY3VzKCkge1xuICAgICAgICBjb25zdCBldmVudCA9IG5ldyBXaWxsRm9jdXNFdmVudCgpO1xuICAgICAgICB0aGlzLmFwaS5fb25XaWxsRm9jdXMuZmlyZShldmVudCk7XG4gICAgICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZWxlbWVudC5mb2N1cygpO1xuICAgIH1cbiAgICBsYXlvdXQod2lkdGgsIGhlaWdodCkge1xuICAgICAgICB0aGlzLl93aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLl9oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIHRoaXMuYXBpLl9vbkRpZERpbWVuc2lvbkNoYW5nZS5maXJlKHsgd2lkdGgsIGhlaWdodCB9KTtcbiAgICAgICAgaWYgKHRoaXMucGFydCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3BhcmFtcykge1xuICAgICAgICAgICAgICAgIHRoaXMucGFydC51cGRhdGUodGhpcy5fcGFyYW1zLnBhcmFtcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaW5pdChwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHRoaXMuX3BhcmFtcyA9IHBhcmFtZXRlcnM7XG4gICAgICAgIHRoaXMucGFydCA9IHRoaXMuZ2V0Q29tcG9uZW50KCk7XG4gICAgfVxuICAgIHVwZGF0ZShldmVudCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAvLyBtZXJnZSB0aGUgbmV3IHBhcmFtZXRlcnMgd2l0aCB0aGUgZXhpc3RpbmcgcGFyYW1ldGVyc1xuICAgICAgICB0aGlzLl9wYXJhbXMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHRoaXMuX3BhcmFtcyksIHsgcGFyYW1zOiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIChfYSA9IHRoaXMuX3BhcmFtcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnBhcmFtcyksIGV2ZW50LnBhcmFtcykgfSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBkZWxldGUgbmV3IGtleXMgdGhhdCBoYXZlIGEgdmFsdWUgb2YgdW5kZWZpbmVkLFxuICAgICAgICAgKiBhbGxvdyB2YWx1ZXMgb2YgbnVsbFxuICAgICAgICAgKi9cbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoZXZlbnQucGFyYW1zKSkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnBhcmFtc1trZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fcGFyYW1zLnBhcmFtc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHVwZGF0ZSB0aGUgdmlldyB3aXRoIHRoZSB1cGRhdGVkIHByb3BzXG4gICAgICAgIChfYiA9IHRoaXMucGFydCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnVwZGF0ZSh7IHBhcmFtczogdGhpcy5fcGFyYW1zLnBhcmFtcyB9KTtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBjb25zdCBwYXJhbXMgPSAoX2IgPSAoX2EgPSB0aGlzLl9wYXJhbXMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5wYXJhbXMpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHt9O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaWQ6IHRoaXMuaWQsXG4gICAgICAgICAgICBjb21wb25lbnQ6IHRoaXMuY29tcG9uZW50LFxuICAgICAgICAgICAgcGFyYW1zOiBPYmplY3Qua2V5cyhwYXJhbXMpLmxlbmd0aCA+IDAgPyBwYXJhbXMgOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdGhpcy5hcGkuZGlzcG9zZSgpO1xuICAgICAgICAoX2EgPSB0aGlzLnBhcnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kaXNwb3NlKCk7XG4gICAgICAgIHN1cGVyLmRpc3Bvc2UoKTtcbiAgICB9XG59XG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQWNjcmVkaXRhdGlvbjogVGhpcyBmaWxlIGlzIGxhcmdseSBiYXNlZCB1cG9uIHRoZSBNSVQgbGljZW5jZWQgVlNDb2RlIHNvdXJjZWNvZGUgZm91bmQgYXQ6XG4gKiBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L3ZzY29kZS90cmVlL21haW4vc3JjL3ZzL2Jhc2UvYnJvd3Nlci91aS9ncmlkXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IFNwbGl0dmlldywgT3JpZW50YXRpb24sIExheW91dFByaW9yaXR5LCB9IGZyb20gJy4uL3NwbGl0dmlldy9zcGxpdHZpZXcnO1xuaW1wb3J0IHsgRW1pdHRlciwgRXZlbnQgfSBmcm9tICcuLi9ldmVudHMnO1xuaW1wb3J0IHsgTGVhZk5vZGUgfSBmcm9tICcuL2xlYWZOb2RlJztcbmltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUsIERpc3Bvc2FibGUgfSBmcm9tICcuLi9saWZlY3ljbGUnO1xuZXhwb3J0IGNsYXNzIEJyYW5jaE5vZGUgZXh0ZW5kcyBDb21wb3NpdGVEaXNwb3NhYmxlIHtcbiAgICBnZXQgd2lkdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9yaWVudGF0aW9uID09PSBPcmllbnRhdGlvbi5IT1JJWk9OVEFMXG4gICAgICAgICAgICA/IHRoaXMuc2l6ZVxuICAgICAgICAgICAgOiB0aGlzLm9ydGhvZ29uYWxTaXplO1xuICAgIH1cbiAgICBnZXQgaGVpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcmllbnRhdGlvbiA9PT0gT3JpZW50YXRpb24uSE9SSVpPTlRBTFxuICAgICAgICAgICAgPyB0aGlzLm9ydGhvZ29uYWxTaXplXG4gICAgICAgICAgICA6IHRoaXMuc2l6ZTtcbiAgICB9XG4gICAgZ2V0IG1pbmltdW1TaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbi5sZW5ndGggPT09IDBcbiAgICAgICAgICAgID8gMFxuICAgICAgICAgICAgOiBNYXRoLm1heCguLi50aGlzLmNoaWxkcmVuLm1hcCgoYywgaW5kZXgpID0+IHRoaXMuc3BsaXR2aWV3LmlzVmlld1Zpc2libGUoaW5kZXgpXG4gICAgICAgICAgICAgICAgPyBjLm1pbmltdW1PcnRob2dvbmFsU2l6ZVxuICAgICAgICAgICAgICAgIDogMCkpO1xuICAgIH1cbiAgICBnZXQgbWF4aW11bVNpemUoKSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1pbiguLi50aGlzLmNoaWxkcmVuLm1hcCgoYywgaW5kZXgpID0+IHRoaXMuc3BsaXR2aWV3LmlzVmlld1Zpc2libGUoaW5kZXgpXG4gICAgICAgICAgICA/IGMubWF4aW11bU9ydGhvZ29uYWxTaXplXG4gICAgICAgICAgICA6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSkpO1xuICAgIH1cbiAgICBnZXQgbWluaW11bU9ydGhvZ29uYWxTaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zcGxpdHZpZXcubWluaW11bVNpemU7XG4gICAgfVxuICAgIGdldCBtYXhpbXVtT3J0aG9nb25hbFNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNwbGl0dmlldy5tYXhpbXVtU2l6ZTtcbiAgICB9XG4gICAgZ2V0IG9ydGhvZ29uYWxTaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3J0aG9nb25hbFNpemU7XG4gICAgfVxuICAgIGdldCBzaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2l6ZTtcbiAgICB9XG4gICAgZ2V0IG1pbmltdW1XaWR0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3JpZW50YXRpb24gPT09IE9yaWVudGF0aW9uLkhPUklaT05UQUxcbiAgICAgICAgICAgID8gdGhpcy5taW5pbXVtT3J0aG9nb25hbFNpemVcbiAgICAgICAgICAgIDogdGhpcy5taW5pbXVtU2l6ZTtcbiAgICB9XG4gICAgZ2V0IG1pbmltdW1IZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9yaWVudGF0aW9uID09PSBPcmllbnRhdGlvbi5IT1JJWk9OVEFMXG4gICAgICAgICAgICA/IHRoaXMubWluaW11bVNpemVcbiAgICAgICAgICAgIDogdGhpcy5taW5pbXVtT3J0aG9nb25hbFNpemU7XG4gICAgfVxuICAgIGdldCBtYXhpbXVtV2lkdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9yaWVudGF0aW9uID09PSBPcmllbnRhdGlvbi5IT1JJWk9OVEFMXG4gICAgICAgICAgICA/IHRoaXMubWF4aW11bU9ydGhvZ29uYWxTaXplXG4gICAgICAgICAgICA6IHRoaXMubWF4aW11bVNpemU7XG4gICAgfVxuICAgIGdldCBtYXhpbXVtSGVpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcmllbnRhdGlvbiA9PT0gT3JpZW50YXRpb24uSE9SSVpPTlRBTFxuICAgICAgICAgICAgPyB0aGlzLm1heGltdW1TaXplXG4gICAgICAgICAgICA6IHRoaXMubWF4aW11bU9ydGhvZ29uYWxTaXplO1xuICAgIH1cbiAgICBnZXQgcHJpb3JpdHkoKSB7XG4gICAgICAgIGlmICh0aGlzLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIExheW91dFByaW9yaXR5Lk5vcm1hbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcmlvcml0aWVzID0gdGhpcy5jaGlsZHJlbi5tYXAoKGMpID0+IHR5cGVvZiBjLnByaW9yaXR5ID09PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgPyBMYXlvdXRQcmlvcml0eS5Ob3JtYWxcbiAgICAgICAgICAgIDogYy5wcmlvcml0eSk7XG4gICAgICAgIGlmIChwcmlvcml0aWVzLnNvbWUoKHApID0+IHAgPT09IExheW91dFByaW9yaXR5LkhpZ2gpKSB7XG4gICAgICAgICAgICByZXR1cm4gTGF5b3V0UHJpb3JpdHkuSGlnaDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwcmlvcml0aWVzLnNvbWUoKHApID0+IHAgPT09IExheW91dFByaW9yaXR5LkxvdykpIHtcbiAgICAgICAgICAgIHJldHVybiBMYXlvdXRQcmlvcml0eS5Mb3c7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIExheW91dFByaW9yaXR5Lk5vcm1hbDtcbiAgICB9XG4gICAgZ2V0IGRpc2FibGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zcGxpdHZpZXcuZGlzYWJsZWQ7XG4gICAgfVxuICAgIHNldCBkaXNhYmxlZCh2YWx1ZSkge1xuICAgICAgICB0aGlzLnNwbGl0dmlldy5kaXNhYmxlZCA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgbWFyZ2luKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zcGxpdHZpZXcubWFyZ2luO1xuICAgIH1cbiAgICBzZXQgbWFyZ2luKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuc3BsaXR2aWV3Lm1hcmdpbiA9IHZhbHVlO1xuICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goKGNoaWxkKSA9PiB7XG4gICAgICAgICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBCcmFuY2hOb2RlKSB7XG4gICAgICAgICAgICAgICAgY2hpbGQubWFyZ2luID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihvcmllbnRhdGlvbiwgcHJvcG9ydGlvbmFsTGF5b3V0LCBzdHlsZXMsIHNpemUsIG9ydGhvZ29uYWxTaXplLCBkaXNhYmxlZCwgbWFyZ2luLCBjaGlsZERlc2NyaXB0b3JzKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMub3JpZW50YXRpb24gPSBvcmllbnRhdGlvbjtcbiAgICAgICAgdGhpcy5wcm9wb3J0aW9uYWxMYXlvdXQgPSBwcm9wb3J0aW9uYWxMYXlvdXQ7XG4gICAgICAgIHRoaXMuc3R5bGVzID0gc3R5bGVzO1xuICAgICAgICB0aGlzLl9jaGlsZHJlbkRpc3Bvc2FibGUgPSBEaXNwb3NhYmxlLk5PTkU7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgdGhpcy5fb25EaWRDaGFuZ2UgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRGlkQ2hhbmdlID0gdGhpcy5fb25EaWRDaGFuZ2UuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uRGlkVmlzaWJpbGl0eUNoYW5nZSA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRWaXNpYmlsaXR5Q2hhbmdlID0gdGhpcy5fb25EaWRWaXNpYmlsaXR5Q2hhbmdlLmV2ZW50O1xuICAgICAgICB0aGlzLl9vcnRob2dvbmFsU2l6ZSA9IG9ydGhvZ29uYWxTaXplO1xuICAgICAgICB0aGlzLl9zaXplID0gc2l6ZTtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc05hbWUgPSAnZHYtYnJhbmNoLW5vZGUnO1xuICAgICAgICBpZiAoIWNoaWxkRGVzY3JpcHRvcnMpIHtcbiAgICAgICAgICAgIHRoaXMuc3BsaXR2aWV3ID0gbmV3IFNwbGl0dmlldyh0aGlzLmVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgICBvcmllbnRhdGlvbjogdGhpcy5vcmllbnRhdGlvbixcbiAgICAgICAgICAgICAgICBwcm9wb3J0aW9uYWxMYXlvdXQsXG4gICAgICAgICAgICAgICAgc3R5bGVzLFxuICAgICAgICAgICAgICAgIG1hcmdpbixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5zcGxpdHZpZXcubGF5b3V0KHRoaXMuc2l6ZSwgdGhpcy5vcnRob2dvbmFsU2l6ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBkZXNjcmlwdG9yID0ge1xuICAgICAgICAgICAgICAgIHZpZXdzOiBjaGlsZERlc2NyaXB0b3JzLm1hcCgoY2hpbGREZXNjcmlwdG9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3OiBjaGlsZERlc2NyaXB0b3Iubm9kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IGNoaWxkRGVzY3JpcHRvci5ub2RlLnNpemUsXG4gICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiBjaGlsZERlc2NyaXB0b3Iubm9kZSBpbnN0YW5jZW9mIExlYWZOb2RlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGREZXNjcmlwdG9yLnZpc2libGUgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gY2hpbGREZXNjcmlwdG9yLnZpc2libGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgc2l6ZTogdGhpcy5vcnRob2dvbmFsU2l6ZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGREZXNjcmlwdG9ycy5tYXAoKGMpID0+IGMubm9kZSk7XG4gICAgICAgICAgICB0aGlzLnNwbGl0dmlldyA9IG5ldyBTcGxpdHZpZXcodGhpcy5lbGVtZW50LCB7XG4gICAgICAgICAgICAgICAgb3JpZW50YXRpb246IHRoaXMub3JpZW50YXRpb24sXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRvcixcbiAgICAgICAgICAgICAgICBwcm9wb3J0aW9uYWxMYXlvdXQsXG4gICAgICAgICAgICAgICAgc3R5bGVzLFxuICAgICAgICAgICAgICAgIG1hcmdpbixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyh0aGlzLl9vbkRpZENoYW5nZSwgdGhpcy5fb25EaWRWaXNpYmlsaXR5Q2hhbmdlLCB0aGlzLnNwbGl0dmlldy5vbkRpZFNhc2hFbmQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25EaWRDaGFuZ2UuZmlyZSh7fSk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5zZXR1cENoaWxkcmVuRXZlbnRzKCk7XG4gICAgfVxuICAgIHNldFZpc2libGUoX3Zpc2libGUpIHtcbiAgICAgICAgLy8gbm9vcFxuICAgIH1cbiAgICBpc0NoaWxkVmlzaWJsZShpbmRleCkge1xuICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHRoaXMuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaW5kZXgnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5zcGxpdHZpZXcuaXNWaWV3VmlzaWJsZShpbmRleCk7XG4gICAgfVxuICAgIHNldENoaWxkVmlzaWJsZShpbmRleCwgdmlzaWJsZSkge1xuICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHRoaXMuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaW5kZXgnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zcGxpdHZpZXcuaXNWaWV3VmlzaWJsZShpbmRleCkgPT09IHZpc2libGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB3ZXJlQWxsQ2hpbGRyZW5IaWRkZW4gPSB0aGlzLnNwbGl0dmlldy5jb250ZW50U2l6ZSA9PT0gMDtcbiAgICAgICAgdGhpcy5zcGxpdHZpZXcuc2V0Vmlld1Zpc2libGUoaW5kZXgsIHZpc2libGUpO1xuICAgICAgICAvLyB9XG4gICAgICAgIGNvbnN0IGFyZUFsbENoaWxkcmVuSGlkZGVuID0gdGhpcy5zcGxpdHZpZXcuY29udGVudFNpemUgPT09IDA7XG4gICAgICAgIC8vIElmIGFsbCBjaGlsZHJlbiBhcmUgaGlkZGVuIHRoZW4gdGhlIHBhcmVudCBzaG91bGQgaGlkZSB0aGUgZW50aXJlIHNwbGl0dmlld1xuICAgICAgICAvLyBJZiB0aGUgZW50aXJlIHNwbGl0dmlldyBpcyBoaWRkZW4gdGhlbiB0aGUgcGFyZW50IHNob3VsZCBzaG93IHRoZSBzcGxpdHZpZXcgd2hlbiBhIGNoaWxkIGlzIHNob3duXG4gICAgICAgIGlmICgodmlzaWJsZSAmJiB3ZXJlQWxsQ2hpbGRyZW5IaWRkZW4pIHx8XG4gICAgICAgICAgICAoIXZpc2libGUgJiYgYXJlQWxsQ2hpbGRyZW5IaWRkZW4pKSB7XG4gICAgICAgICAgICB0aGlzLl9vbkRpZFZpc2liaWxpdHlDaGFuZ2UuZmlyZSh7IHZpc2libGUgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbW92ZUNoaWxkKGZyb20sIHRvKSB7XG4gICAgICAgIGlmIChmcm9tID09PSB0bykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmcm9tIDwgMCB8fCBmcm9tID49IHRoaXMuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZnJvbSBpbmRleCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmcm9tIDwgdG8pIHtcbiAgICAgICAgICAgIHRvLS07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zcGxpdHZpZXcubW92ZVZpZXcoZnJvbSwgdG8pO1xuICAgICAgICBjb25zdCBjaGlsZCA9IHRoaXMuX3JlbW92ZUNoaWxkKGZyb20pO1xuICAgICAgICB0aGlzLl9hZGRDaGlsZChjaGlsZCwgdG8pO1xuICAgIH1cbiAgICBnZXRDaGlsZFNpemUoaW5kZXgpIHtcbiAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGluZGV4Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc3BsaXR2aWV3LmdldFZpZXdTaXplKGluZGV4KTtcbiAgICB9XG4gICAgcmVzaXplQ2hpbGQoaW5kZXgsIHNpemUpIHtcbiAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGluZGV4Jyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zcGxpdHZpZXcucmVzaXplVmlldyhpbmRleCwgc2l6ZSk7XG4gICAgfVxuICAgIGxheW91dChzaXplLCBvcnRob2dvbmFsU2l6ZSkge1xuICAgICAgICB0aGlzLl9zaXplID0gb3J0aG9nb25hbFNpemU7XG4gICAgICAgIHRoaXMuX29ydGhvZ29uYWxTaXplID0gc2l6ZTtcbiAgICAgICAgdGhpcy5zcGxpdHZpZXcubGF5b3V0KG9ydGhvZ29uYWxTaXplLCBzaXplKTtcbiAgICB9XG4gICAgYWRkQ2hpbGQobm9kZSwgc2l6ZSwgaW5kZXgsIHNraXBMYXlvdXQpIHtcbiAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+IHRoaXMuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaW5kZXgnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNwbGl0dmlldy5hZGRWaWV3KG5vZGUsIHNpemUsIGluZGV4LCBza2lwTGF5b3V0KTtcbiAgICAgICAgdGhpcy5fYWRkQ2hpbGQobm9kZSwgaW5kZXgpO1xuICAgIH1cbiAgICBnZXRDaGlsZENhY2hlZFZpc2libGVTaXplKGluZGV4KSB7XG4gICAgICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPj0gdGhpcy5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBpbmRleCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnNwbGl0dmlldy5nZXRWaWV3Q2FjaGVkVmlzaWJsZVNpemUoaW5kZXgpO1xuICAgIH1cbiAgICByZW1vdmVDaGlsZChpbmRleCwgc2l6aW5nKSB7XG4gICAgICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPj0gdGhpcy5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBpbmRleCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3BsaXR2aWV3LnJlbW92ZVZpZXcoaW5kZXgsIHNpemluZyk7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZW1vdmVDaGlsZChpbmRleCk7XG4gICAgfVxuICAgIF9hZGRDaGlsZChub2RlLCBpbmRleCkge1xuICAgICAgICB0aGlzLmNoaWxkcmVuLnNwbGljZShpbmRleCwgMCwgbm9kZSk7XG4gICAgICAgIHRoaXMuc2V0dXBDaGlsZHJlbkV2ZW50cygpO1xuICAgIH1cbiAgICBfcmVtb3ZlQ2hpbGQoaW5kZXgpIHtcbiAgICAgICAgY29uc3QgW2NoaWxkXSA9IHRoaXMuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgdGhpcy5zZXR1cENoaWxkcmVuRXZlbnRzKCk7XG4gICAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9XG4gICAgc2V0dXBDaGlsZHJlbkV2ZW50cygpIHtcbiAgICAgICAgdGhpcy5fY2hpbGRyZW5EaXNwb3NhYmxlLmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5fY2hpbGRyZW5EaXNwb3NhYmxlID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoRXZlbnQuYW55KC4uLnRoaXMuY2hpbGRyZW4ubWFwKChjKSA9PiBjLm9uRGlkQ2hhbmdlKSkoKGUpID0+IHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogaW5kaWNhdGUgYSBjaGFuZ2UgaGFzIG9jY3VyZWQgdG8gYWxsb3dzIGFueSByZS1yZW5kZXJpbmcgYnV0IGRvbid0IGJ1YmJsZVxuICAgICAgICAgICAgICogZXZlbnQgYmVjYXVzZSB0aGF0IHdhcyBzcGVjaWZpYyB0byB0aGlzIGJyYW5jaFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLl9vbkRpZENoYW5nZS5maXJlKHsgc2l6ZTogZS5vcnRob2dvbmFsU2l6ZSB9KTtcbiAgICAgICAgfSksIC4uLnRoaXMuY2hpbGRyZW4ubWFwKChjLCBpKSA9PiB7XG4gICAgICAgICAgICBpZiAoYyBpbnN0YW5jZW9mIEJyYW5jaE5vZGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYy5vbkRpZFZpc2liaWxpdHlDaGFuZ2UoKHsgdmlzaWJsZSB9KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0Q2hpbGRWaXNpYmxlKGksIHZpc2libGUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIERpc3Bvc2FibGUuTk9ORTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICB0aGlzLl9jaGlsZHJlbkRpc3Bvc2FibGUuZGlzcG9zZSgpO1xuICAgICAgICB0aGlzLnNwbGl0dmlldy5kaXNwb3NlKCk7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQpID0+IGNoaWxkLmRpc3Bvc2UoKSk7XG4gICAgICAgIHN1cGVyLmRpc3Bvc2UoKTtcbiAgICB9XG59XG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQWNjcmVkaXRhdGlvbjogVGhpcyBmaWxlIGlzIGxhcmdseSBiYXNlZCB1cG9uIHRoZSBNSVQgbGljZW5jZWQgVlNDb2RlIHNvdXJjZWNvZGUgZm91bmQgYXQ6XG4gKiBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L3ZzY29kZS90cmVlL21haW4vc3JjL3ZzL2Jhc2UvYnJvd3Nlci91aS9ncmlkXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IE9yaWVudGF0aW9uLCBTaXppbmcsIH0gZnJvbSAnLi4vc3BsaXR2aWV3L3NwbGl0dmlldyc7XG5pbXBvcnQgeyB0YWlsIH0gZnJvbSAnLi4vYXJyYXknO1xuaW1wb3J0IHsgTGVhZk5vZGUgfSBmcm9tICcuL2xlYWZOb2RlJztcbmltcG9ydCB7IEJyYW5jaE5vZGUgfSBmcm9tICcuL2JyYW5jaE5vZGUnO1xuaW1wb3J0IHsgRW1pdHRlciB9IGZyb20gJy4uL2V2ZW50cyc7XG5pbXBvcnQgeyBNdXRhYmxlRGlzcG9zYWJsZSB9IGZyb20gJy4uL2xpZmVjeWNsZSc7XG5mdW5jdGlvbiBmaW5kTGVhZihjYW5kaWF0ZU5vZGUsIGxhc3QpIHtcbiAgICBpZiAoY2FuZGlhdGVOb2RlIGluc3RhbmNlb2YgTGVhZk5vZGUpIHtcbiAgICAgICAgcmV0dXJuIGNhbmRpYXRlTm9kZTtcbiAgICB9XG4gICAgaWYgKGNhbmRpYXRlTm9kZSBpbnN0YW5jZW9mIEJyYW5jaE5vZGUpIHtcbiAgICAgICAgcmV0dXJuIGZpbmRMZWFmKGNhbmRpYXRlTm9kZS5jaGlsZHJlbltsYXN0ID8gY2FuZGlhdGVOb2RlLmNoaWxkcmVuLmxlbmd0aCAtIDEgOiAwXSwgbGFzdCk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBub2RlJyk7XG59XG5mdW5jdGlvbiBmbGlwTm9kZShub2RlLCBzaXplLCBvcnRob2dvbmFsU2l6ZSkge1xuICAgIGlmIChub2RlIGluc3RhbmNlb2YgQnJhbmNoTm9kZSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgQnJhbmNoTm9kZShvcnRob2dvbmFsKG5vZGUub3JpZW50YXRpb24pLCBub2RlLnByb3BvcnRpb25hbExheW91dCwgbm9kZS5zdHlsZXMsIHNpemUsIG9ydGhvZ29uYWxTaXplLCBub2RlLmRpc2FibGVkLCBub2RlLm1hcmdpbik7XG4gICAgICAgIGxldCB0b3RhbFNpemUgPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gbm9kZS5jaGlsZHJlbi5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgY29uc3QgY2hpbGQgPSBub2RlLmNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgY29uc3QgY2hpbGRTaXplID0gY2hpbGQgaW5zdGFuY2VvZiBCcmFuY2hOb2RlID8gY2hpbGQub3J0aG9nb25hbFNpemUgOiBjaGlsZC5zaXplO1xuICAgICAgICAgICAgbGV0IG5ld1NpemUgPSBub2RlLnNpemUgPT09IDBcbiAgICAgICAgICAgICAgICA/IDBcbiAgICAgICAgICAgICAgICA6IE1hdGgucm91bmQoKHNpemUgKiBjaGlsZFNpemUpIC8gbm9kZS5zaXplKTtcbiAgICAgICAgICAgIHRvdGFsU2l6ZSArPSBuZXdTaXplO1xuICAgICAgICAgICAgLy8gVGhlIGxhc3QgdmlldyB0byBhZGQgc2hvdWxkIGFkanVzdCB0byByb3VuZGluZyBlcnJvcnNcbiAgICAgICAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgbmV3U2l6ZSArPSBzaXplIC0gdG90YWxTaXplO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0LmFkZENoaWxkKGZsaXBOb2RlKGNoaWxkLCBvcnRob2dvbmFsU2l6ZSwgbmV3U2l6ZSksIG5ld1NpemUsIDAsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IExlYWZOb2RlKG5vZGUudmlldywgb3J0aG9nb25hbChub2RlLm9yaWVudGF0aW9uKSwgb3J0aG9nb25hbFNpemUpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBpbmRleEluUGFyZW50KGVsZW1lbnQpIHtcbiAgICBjb25zdCBwYXJlbnRFbGVtZW50ID0gZWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICAgIGlmICghcGFyZW50RWxlbWVudCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZ3JpZCBlbGVtZW50Jyk7XG4gICAgfVxuICAgIGxldCBlbCA9IHBhcmVudEVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gICAgbGV0IGluZGV4ID0gMDtcbiAgICB3aGlsZSAoZWwgIT09IGVsZW1lbnQgJiYgZWwgIT09IHBhcmVudEVsZW1lbnQubGFzdEVsZW1lbnRDaGlsZCAmJiBlbCkge1xuICAgICAgICBlbCA9IGVsLm5leHRFbGVtZW50U2libGluZztcbiAgICAgICAgaW5kZXgrKztcbiAgICB9XG4gICAgcmV0dXJuIGluZGV4O1xufVxuLyoqXG4gKiBGaW5kIHRoZSBncmlkIGxvY2F0aW9uIG9mIGEgc3BlY2lmaWMgRE9NIGVsZW1lbnQgYnkgdHJhdmVyc2luZyB0aGUgcGFyZW50XG4gKiBjaGFpbiBhbmQgZmluZGluZyBlYWNoIGNoaWxkIGluZGV4IG9uIHRoZSB3YXkuXG4gKlxuICogVGhpcyB3aWxsIGJyZWFrIGFzIHNvb24gYXMgRE9NIHN0cnVjdHVyZXMgb2YgdGhlIFNwbGl0dmlldyBvciBHcmlkdmlldyBjaGFuZ2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRHcmlkTG9jYXRpb24oZWxlbWVudCkge1xuICAgIGNvbnN0IHBhcmVudEVsZW1lbnQgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgaWYgKCFwYXJlbnRFbGVtZW50KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBncmlkIGVsZW1lbnQnKTtcbiAgICB9XG4gICAgaWYgKC9cXGJkdi1ncmlkLXZpZXdcXGIvLnRlc3QocGFyZW50RWxlbWVudC5jbGFzc05hbWUpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgY29uc3QgaW5kZXggPSBpbmRleEluUGFyZW50KHBhcmVudEVsZW1lbnQpO1xuICAgIGNvbnN0IGFuY2VzdG9yID0gcGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgICByZXR1cm4gWy4uLmdldEdyaWRMb2NhdGlvbihhbmNlc3RvciksIGluZGV4XTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRSZWxhdGl2ZUxvY2F0aW9uKHJvb3RPcmllbnRhdGlvbiwgbG9jYXRpb24sIGRpcmVjdGlvbikge1xuICAgIGNvbnN0IG9yaWVudGF0aW9uID0gZ2V0TG9jYXRpb25PcmllbnRhdGlvbihyb290T3JpZW50YXRpb24sIGxvY2F0aW9uKTtcbiAgICBjb25zdCBkaXJlY3Rpb25PcmllbnRhdGlvbiA9IGdldERpcmVjdGlvbk9yaWVudGF0aW9uKGRpcmVjdGlvbik7XG4gICAgaWYgKG9yaWVudGF0aW9uID09PSBkaXJlY3Rpb25PcmllbnRhdGlvbikge1xuICAgICAgICBjb25zdCBbcmVzdCwgX2luZGV4XSA9IHRhaWwobG9jYXRpb24pO1xuICAgICAgICBsZXQgaW5kZXggPSBfaW5kZXg7XG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdyaWdodCcgfHwgZGlyZWN0aW9uID09PSAnYm90dG9tJykge1xuICAgICAgICAgICAgaW5kZXggKz0gMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gWy4uLnJlc3QsIGluZGV4XTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gZGlyZWN0aW9uID09PSAncmlnaHQnIHx8IGRpcmVjdGlvbiA9PT0gJ2JvdHRvbScgPyAxIDogMDtcbiAgICAgICAgcmV0dXJuIFsuLi5sb2NhdGlvbiwgaW5kZXhdO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXREaXJlY3Rpb25PcmllbnRhdGlvbihkaXJlY3Rpb24pIHtcbiAgICByZXR1cm4gZGlyZWN0aW9uID09PSAndG9wJyB8fCBkaXJlY3Rpb24gPT09ICdib3R0b20nXG4gICAgICAgID8gT3JpZW50YXRpb24uVkVSVElDQUxcbiAgICAgICAgOiBPcmllbnRhdGlvbi5IT1JJWk9OVEFMO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldExvY2F0aW9uT3JpZW50YXRpb24ocm9vdE9yaWVudGF0aW9uLCBsb2NhdGlvbikge1xuICAgIHJldHVybiBsb2NhdGlvbi5sZW5ndGggJSAyID09PSAwXG4gICAgICAgID8gb3J0aG9nb25hbChyb290T3JpZW50YXRpb24pXG4gICAgICAgIDogcm9vdE9yaWVudGF0aW9uO1xufVxuZXhwb3J0IGNvbnN0IG9ydGhvZ29uYWwgPSAob3JpZW50YXRpb24pID0+IG9yaWVudGF0aW9uID09PSBPcmllbnRhdGlvbi5IT1JJWk9OVEFMXG4gICAgPyBPcmllbnRhdGlvbi5WRVJUSUNBTFxuICAgIDogT3JpZW50YXRpb24uSE9SSVpPTlRBTDtcbmV4cG9ydCBmdW5jdGlvbiBpc0dyaWRCcmFuY2hOb2RlKG5vZGUpIHtcbiAgICByZXR1cm4gISFub2RlLmNoaWxkcmVuO1xufVxuY29uc3Qgc2VyaWFsaXplQnJhbmNoTm9kZSA9IChub2RlLCBvcmllbnRhdGlvbikgPT4ge1xuICAgIGNvbnN0IHNpemUgPSBvcmllbnRhdGlvbiA9PT0gT3JpZW50YXRpb24uVkVSVElDQUwgPyBub2RlLmJveC53aWR0aCA6IG5vZGUuYm94LmhlaWdodDtcbiAgICBpZiAoIWlzR3JpZEJyYW5jaE5vZGUobm9kZSkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBub2RlLmNhY2hlZFZpc2libGVTaXplID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnbGVhZicsXG4gICAgICAgICAgICAgICAgZGF0YTogbm9kZS52aWV3LnRvSlNPTigpLFxuICAgICAgICAgICAgICAgIHNpemU6IG5vZGUuY2FjaGVkVmlzaWJsZVNpemUsXG4gICAgICAgICAgICAgICAgdmlzaWJsZTogZmFsc2UsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHR5cGU6ICdsZWFmJywgZGF0YTogbm9kZS52aWV3LnRvSlNPTigpLCBzaXplIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdicmFuY2gnLFxuICAgICAgICBkYXRhOiBub2RlLmNoaWxkcmVuLm1hcCgoYykgPT4gc2VyaWFsaXplQnJhbmNoTm9kZShjLCBvcnRob2dvbmFsKG9yaWVudGF0aW9uKSkpLFxuICAgICAgICBzaXplLFxuICAgIH07XG59O1xuZXhwb3J0IGNsYXNzIEdyaWR2aWV3IHtcbiAgICBnZXQgbGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcm9vdCA/IHRoaXMuX3Jvb3QuY2hpbGRyZW4ubGVuZ3RoIDogMDtcbiAgICB9XG4gICAgZ2V0IG9yaWVudGF0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yb290Lm9yaWVudGF0aW9uO1xuICAgIH1cbiAgICBzZXQgb3JpZW50YXRpb24ob3JpZW50YXRpb24pIHtcbiAgICAgICAgaWYgKHRoaXMucm9vdC5vcmllbnRhdGlvbiA9PT0gb3JpZW50YXRpb24pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IHNpemUsIG9ydGhvZ29uYWxTaXplIH0gPSB0aGlzLnJvb3Q7XG4gICAgICAgIHRoaXMucm9vdCA9IGZsaXBOb2RlKHRoaXMucm9vdCwgb3J0aG9nb25hbFNpemUsIHNpemUpO1xuICAgICAgICB0aGlzLnJvb3QubGF5b3V0KHNpemUsIG9ydGhvZ29uYWxTaXplKTtcbiAgICB9XG4gICAgZ2V0IHdpZHRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yb290LndpZHRoO1xuICAgIH1cbiAgICBnZXQgaGVpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yb290LmhlaWdodDtcbiAgICB9XG4gICAgZ2V0IG1pbmltdW1XaWR0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucm9vdC5taW5pbXVtV2lkdGg7XG4gICAgfVxuICAgIGdldCBtaW5pbXVtSGVpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yb290Lm1pbmltdW1IZWlnaHQ7XG4gICAgfVxuICAgIGdldCBtYXhpbXVtV2lkdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvb3QubWF4aW11bUhlaWdodDtcbiAgICB9XG4gICAgZ2V0IG1heGltdW1IZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvb3QubWF4aW11bUhlaWdodDtcbiAgICB9XG4gICAgZ2V0IGxvY2tlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvY2tlZDtcbiAgICB9XG4gICAgc2V0IGxvY2tlZCh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9sb2NrZWQgPSB2YWx1ZTtcbiAgICAgICAgY29uc3QgYnJhbmNoID0gW3RoaXMucm9vdF07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzaW1wbGUgZGVwdGgtZmlyc3Qtc2VhcmNoIHRvIGNvdmVyIGFsbCBub2Rlc1xuICAgICAgICAgKlxuICAgICAgICAgKiBAc2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0RlcHRoLWZpcnN0X3NlYXJjaFxuICAgICAgICAgKi9cbiAgICAgICAgd2hpbGUgKGJyYW5jaC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gYnJhbmNoLnBvcCgpO1xuICAgICAgICAgICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBCcmFuY2hOb2RlKSB7XG4gICAgICAgICAgICAgICAgbm9kZS5kaXNhYmxlZCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGJyYW5jaC5wdXNoKC4uLm5vZGUuY2hpbGRyZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBtYXJnaW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXJnaW47XG4gICAgfVxuICAgIHNldCBtYXJnaW4odmFsdWUpIHtcbiAgICAgICAgdGhpcy5fbWFyZ2luID0gdmFsdWU7XG4gICAgICAgIHRoaXMucm9vdC5tYXJnaW4gPSB2YWx1ZTtcbiAgICB9XG4gICAgbWF4aW1pemVkVmlldygpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5fbWF4aW1pemVkTm9kZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxlYWYudmlldztcbiAgICB9XG4gICAgaGFzTWF4aW1pemVkVmlldygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21heGltaXplZE5vZGUgIT09IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgbWF4aW1pemVWaWV3KHZpZXcpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBsb2NhdGlvbiA9IGdldEdyaWRMb2NhdGlvbih2aWV3LmVsZW1lbnQpO1xuICAgICAgICBjb25zdCBbXywgbm9kZV0gPSB0aGlzLmdldE5vZGUobG9jYXRpb24pO1xuICAgICAgICBpZiAoIShub2RlIGluc3RhbmNlb2YgTGVhZk5vZGUpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCgoX2EgPSB0aGlzLl9tYXhpbWl6ZWROb2RlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubGVhZikgPT09IG5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5oYXNNYXhpbWl6ZWRWaWV3KCkpIHtcbiAgICAgICAgICAgIHRoaXMuZXhpdE1heGltaXplZFZpZXcoKTtcbiAgICAgICAgfVxuICAgICAgICBzZXJpYWxpemVCcmFuY2hOb2RlKHRoaXMuZ2V0VmlldygpLCB0aGlzLm9yaWVudGF0aW9uKTtcbiAgICAgICAgY29uc3QgaGlkZGVuT25NYXhpbWl6ZSA9IFtdO1xuICAgICAgICBmdW5jdGlvbiBoaWRlQWxsVmlld3NCdXQocGFyZW50LCBleGNsdWRlKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcmVudC5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gcGFyZW50LmNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIExlYWZOb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZCAhPT0gZXhjbHVkZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudC5pc0NoaWxkVmlzaWJsZShpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5zZXRDaGlsZFZpc2libGUoaSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlkZGVuT25NYXhpbWl6ZS5wdXNoKGNoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaGlkZUFsbFZpZXdzQnV0KGNoaWxkLCBleGNsdWRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaGlkZUFsbFZpZXdzQnV0KHRoaXMucm9vdCwgbm9kZSk7XG4gICAgICAgIHRoaXMuX21heGltaXplZE5vZGUgPSB7IGxlYWY6IG5vZGUsIGhpZGRlbk9uTWF4aW1pemUgfTtcbiAgICAgICAgdGhpcy5fb25EaWRNYXhpbWl6ZWROb2RlQ2hhbmdlLmZpcmUoe1xuICAgICAgICAgICAgdmlldzogbm9kZS52aWV3LFxuICAgICAgICAgICAgaXNNYXhpbWl6ZWQ6IHRydWUsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBleGl0TWF4aW1pemVkVmlldygpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9tYXhpbWl6ZWROb2RlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaGlkZGVuT25NYXhpbWl6ZSA9IHRoaXMuX21heGltaXplZE5vZGUuaGlkZGVuT25NYXhpbWl6ZTtcbiAgICAgICAgZnVuY3Rpb24gc2hvd1ZpZXdzSW5SZXZlcnNlT3JkZXIocGFyZW50KSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IHBhcmVudC5jaGlsZHJlbi5sZW5ndGggLSAxOyBpbmRleCA+PSAwOyBpbmRleC0tKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGQgPSBwYXJlbnQuY2hpbGRyZW5baW5kZXhdO1xuICAgICAgICAgICAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIExlYWZOb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaGlkZGVuT25NYXhpbWl6ZS5pbmNsdWRlcyhjaGlsZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5zZXRDaGlsZFZpc2libGUoaW5kZXgsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzaG93Vmlld3NJblJldmVyc2VPcmRlcihjaGlsZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNob3dWaWV3c0luUmV2ZXJzZU9yZGVyKHRoaXMucm9vdCk7XG4gICAgICAgIGNvbnN0IHRtcCA9IHRoaXMuX21heGltaXplZE5vZGUubGVhZjtcbiAgICAgICAgdGhpcy5fbWF4aW1pemVkTm9kZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fb25EaWRNYXhpbWl6ZWROb2RlQ2hhbmdlLmZpcmUoe1xuICAgICAgICAgICAgdmlldzogdG1wLnZpZXcsXG4gICAgICAgICAgICBpc01heGltaXplZDogZmFsc2UsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzZXJpYWxpemUoKSB7XG4gICAgICAgIGNvbnN0IG1heGltaXplZFZpZXcgPSB0aGlzLm1heGltaXplZFZpZXcoKTtcbiAgICAgICAgbGV0IG1heG1pemVkVmlld0xvY2F0aW9uO1xuICAgICAgICBpZiAobWF4aW1pemVkVmlldykge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUaGUgbWluaW11bSBpbmZvcm1hdGlvbiB3ZSBjYW4gZ2V0IGF3YXkgd2l0aCBpbiBvcmRlciB0byBzZXJpYWxpemUgYSBtYXhtaXplZCB2aWV3IGlzIGl0J3MgbG9jYXRpb24gd2l0aGluIHRoZSBncmlkXG4gICAgICAgICAgICAgKiB3aGljaCBpcyByZXByZXNlbnRlZCBhcyBhIGJyYW5jaCBvZiBpbmRpY2VzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIG1heG1pemVkVmlld0xvY2F0aW9uID0gZ2V0R3JpZExvY2F0aW9uKG1heGltaXplZFZpZXcuZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaGFzTWF4aW1pemVkVmlldygpKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIHRoZSBzYXZlZCBsYXlvdXQgY2Fubm90IGJlIGluIGl0cyBtYXhtaXplZCBzdGF0ZSBvdGhlcndpc2UgYWxsIG9mIHRoZSB1bmRlcmx5aW5nXG4gICAgICAgICAgICAgKiB2aWV3IGRpbWVuc2lvbnMgd2lsbCBiZSB3cm9uZ1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFRvIGNvdW50ZXJhY3QgdGhpcyB3ZSB0ZW1wb3JhaWx5IHJlbW92ZSB0aGUgbWF4aW1pemVkIHZpZXcgdG8gY29tcHV0ZSB0aGUgc2VyaWFsaXplZCBvdXRwdXRcbiAgICAgICAgICAgICAqIG9mIHRoZSBncmlkIGJlZm9yZSBhZGRpbmcgYmFjayB0aGUgbWF4bWl6ZWQgdmlldyBhcyB0byBub3QgYWx0ZXIgdGhlIGxheW91dCBmcm9tIHRoZSB1c2Vyc1xuICAgICAgICAgICAgICogcGVyc3BlY3RpdmUgd2hlbiBgLnRvSlNPTigpYCBpcyBjYWxsZWRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5leGl0TWF4aW1pemVkVmlldygpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJvb3QgPSBzZXJpYWxpemVCcmFuY2hOb2RlKHRoaXMuZ2V0VmlldygpLCB0aGlzLm9yaWVudGF0aW9uKTtcbiAgICAgICAgY29uc3QgcmVzdWxsdCA9IHtcbiAgICAgICAgICAgIHJvb3QsXG4gICAgICAgICAgICB3aWR0aDogdGhpcy53aWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogdGhpcy5oZWlnaHQsXG4gICAgICAgICAgICBvcmllbnRhdGlvbjogdGhpcy5vcmllbnRhdGlvbixcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKG1heG1pemVkVmlld0xvY2F0aW9uKSB7XG4gICAgICAgICAgICByZXN1bGx0Lm1heGltaXplZE5vZGUgPSB7XG4gICAgICAgICAgICAgICAgbG9jYXRpb246IG1heG1pemVkVmlld0xvY2F0aW9uLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF4aW1pemVkVmlldykge1xuICAgICAgICAgICAgLy8gcmVwbGFjZSBhbnkgbWF4aW16aWVkIHZpZXcgdGhhdCB3YXMgcmVtb3ZlZCBmb3Igc2VyaWFsaXphdGlvbiBwdXJwb3Nlc1xuICAgICAgICAgICAgdGhpcy5tYXhpbWl6ZVZpZXcobWF4aW1pemVkVmlldyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsbHQ7XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHRoaXMuZGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gICAgICAgIHRoaXMuX29uRGlkQ2hhbmdlLmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5fb25EaWRNYXhpbWl6ZWROb2RlQ2hhbmdlLmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5fb25EaWRWaWV3VmlzaWJpbGl0eUNoYW5nZS5kaXNwb3NlKCk7XG4gICAgICAgIHRoaXMucm9vdC5kaXNwb3NlKCk7XG4gICAgICAgIHRoaXMuX21heGltaXplZE5vZGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmUoKTtcbiAgICB9XG4gICAgY2xlYXIoKSB7XG4gICAgICAgIGNvbnN0IG9yaWVudGF0aW9uID0gdGhpcy5yb290Lm9yaWVudGF0aW9uO1xuICAgICAgICB0aGlzLnJvb3QgPSBuZXcgQnJhbmNoTm9kZShvcmllbnRhdGlvbiwgdGhpcy5wcm9wb3J0aW9uYWxMYXlvdXQsIHRoaXMuc3R5bGVzLCB0aGlzLnJvb3Quc2l6ZSwgdGhpcy5yb290Lm9ydGhvZ29uYWxTaXplLCB0aGlzLmxvY2tlZCwgdGhpcy5tYXJnaW4pO1xuICAgIH1cbiAgICBkZXNlcmlhbGl6ZShqc29uLCBkZXNlcmlhbGl6ZXIpIHtcbiAgICAgICAgY29uc3Qgb3JpZW50YXRpb24gPSBqc29uLm9yaWVudGF0aW9uO1xuICAgICAgICBjb25zdCBoZWlnaHQgPSBvcmllbnRhdGlvbiA9PT0gT3JpZW50YXRpb24uVkVSVElDQUwgPyBqc29uLmhlaWdodCA6IGpzb24ud2lkdGg7XG4gICAgICAgIHRoaXMuX2Rlc2VyaWFsaXplKGpzb24ucm9vdCwgb3JpZW50YXRpb24sIGRlc2VyaWFsaXplciwgaGVpZ2h0KTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBkZXNlcmlhbGllZCBsYXlvdXQgbXVzdCBiZSBwb3NpdGlvbmVkIHRocm91Z2ggdGhpcy5sYXlvdXQoLi4uKVxuICAgICAgICAgKiBiZWZvcmUgYW55IG1heGltaXplZE5vZGUgY2FuIGJlIHBvc2l0aW9uZWRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubGF5b3V0KGpzb24ud2lkdGgsIGpzb24uaGVpZ2h0KTtcbiAgICAgICAgaWYgKGpzb24ubWF4aW1pemVkTm9kZSkge1xuICAgICAgICAgICAgY29uc3QgbG9jYXRpb24gPSBqc29uLm1heGltaXplZE5vZGUubG9jYXRpb247XG4gICAgICAgICAgICBjb25zdCBbXywgbm9kZV0gPSB0aGlzLmdldE5vZGUobG9jYXRpb24pO1xuICAgICAgICAgICAgaWYgKCEobm9kZSBpbnN0YW5jZW9mIExlYWZOb2RlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubWF4aW1pemVWaWV3KG5vZGUudmlldyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2Rlc2VyaWFsaXplKHJvb3QsIG9yaWVudGF0aW9uLCBkZXNlcmlhbGl6ZXIsIG9ydGhvZ29uYWxTaXplKSB7XG4gICAgICAgIHRoaXMucm9vdCA9IHRoaXMuX2Rlc2VyaWFsaXplTm9kZShyb290LCBvcmllbnRhdGlvbiwgZGVzZXJpYWxpemVyLCBvcnRob2dvbmFsU2l6ZSk7XG4gICAgfVxuICAgIF9kZXNlcmlhbGl6ZU5vZGUobm9kZSwgb3JpZW50YXRpb24sIGRlc2VyaWFsaXplciwgb3J0aG9nb25hbFNpemUpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBsZXQgcmVzdWx0O1xuICAgICAgICBpZiAobm9kZS50eXBlID09PSAnYnJhbmNoJykge1xuICAgICAgICAgICAgY29uc3Qgc2VyaWFsaXplZENoaWxkcmVuID0gbm9kZS5kYXRhO1xuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBzZXJpYWxpemVkQ2hpbGRyZW4ubWFwKChzZXJpYWxpemVkQ2hpbGQpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBub2RlOiB0aGlzLl9kZXNlcmlhbGl6ZU5vZGUoc2VyaWFsaXplZENoaWxkLCBvcnRob2dvbmFsKG9yaWVudGF0aW9uKSwgZGVzZXJpYWxpemVyLCBub2RlLnNpemUpLFxuICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiBzZXJpYWxpemVkQ2hpbGQudmlzaWJsZSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXN1bHQgPSBuZXcgQnJhbmNoTm9kZShvcmllbnRhdGlvbiwgdGhpcy5wcm9wb3J0aW9uYWxMYXlvdXQsIHRoaXMuc3R5bGVzLCBub2RlLnNpemUsIC8vIDwtIG9ydGhvZ29uYWwgc2l6ZSAtIGZsaXBzIGF0IGVhY2ggZGVwdGhcbiAgICAgICAgICAgIG9ydGhvZ29uYWxTaXplLCAvLyA8LSBzaXplIC0gZmxpcHMgYXQgZWFjaCBkZXB0aCxcbiAgICAgICAgICAgIHRoaXMubG9ja2VkLCB0aGlzLm1hcmdpbiwgY2hpbGRyZW4pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdmlldyA9IGRlc2VyaWFsaXplci5mcm9tSlNPTihub2RlKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygbm9kZS52aXNpYmxlID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgICAgICAoX2EgPSB2aWV3LnNldFZpc2libGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHZpZXcsIG5vZGUudmlzaWJsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHQgPSBuZXcgTGVhZk5vZGUodmlldywgb3JpZW50YXRpb24sIG9ydGhvZ29uYWxTaXplLCBub2RlLnNpemUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGdldCByb290KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcm9vdDtcbiAgICB9XG4gICAgc2V0IHJvb3Qocm9vdCkge1xuICAgICAgICBjb25zdCBvbGRSb290ID0gdGhpcy5fcm9vdDtcbiAgICAgICAgaWYgKG9sZFJvb3QpIHtcbiAgICAgICAgICAgIG9sZFJvb3QuZGlzcG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5fbWF4aW1pemVkTm9kZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVDaGlsZChvbGRSb290LmVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Jvb3QgPSByb290O1xuICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5fcm9vdC5lbGVtZW50KTtcbiAgICAgICAgdGhpcy5kaXNwb3NhYmxlLnZhbHVlID0gdGhpcy5fcm9vdC5vbkRpZENoYW5nZSgoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25EaWRDaGFuZ2UuZmlyZShlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIElmIHRoZSByb290IGlzIG9yaWVudGF0ZWQgYXMgYSBWRVJUSUNBTCBub2RlIHRoZW4gbmVzdCB0aGUgZXhpc3Rpbmcgcm9vdCB3aXRoaW4gYSBuZXcgSE9SSVpJT05UQUwgcm9vdCBub2RlXG4gICAgICogSWYgdGhlIHJvb3QgaXMgb3JpZW50YXRlZCBhcyBhIEhPUklaT05UQUwgbm9kZSB0aGVuIG5lc3QgdGhlIGV4aXN0aW5nIHJvb3Qgd2l0aGluIGEgbmV3IFZFUklUQ0FMIHJvb3Qgbm9kZVxuICAgICAqL1xuICAgIGluc2VydE9ydGhvZ29uYWxTcGxpdHZpZXdBdFJvb3QoKSB7XG4gICAgICAgIGlmICghdGhpcy5fcm9vdCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9sZFJvb3QgPSB0aGlzLnJvb3Q7XG4gICAgICAgIG9sZFJvb3QuZWxlbWVudC5yZW1vdmUoKTtcbiAgICAgICAgdGhpcy5fcm9vdCA9IG5ldyBCcmFuY2hOb2RlKG9ydGhvZ29uYWwob2xkUm9vdC5vcmllbnRhdGlvbiksIHRoaXMucHJvcG9ydGlvbmFsTGF5b3V0LCB0aGlzLnN0eWxlcywgdGhpcy5yb290Lm9ydGhvZ29uYWxTaXplLCB0aGlzLnJvb3Quc2l6ZSwgdGhpcy5sb2NrZWQsIHRoaXMubWFyZ2luKTtcbiAgICAgICAgaWYgKG9sZFJvb3QuY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAvLyBubyBkYXRhIHNvIG5vIG5lZWQgdG8gYWRkIGFueXRoaW5nIGJhY2sgaW5cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvbGRSb290LmNoaWxkcmVuLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgLy8gY2FuIHJlbW92ZSBvbmUgbGV2ZWwgb2YgcmVkdW5kYW50IGJyYW5jaGluZyBpZiB0aGVyZSBpcyBvbmx5IGEgc2luZ2xlIGNoaWxkXG4gICAgICAgICAgICBjb25zdCBjaGlsZFJlZmVyZW5jZSA9IG9sZFJvb3QuY2hpbGRyZW5bMF07XG4gICAgICAgICAgICBjb25zdCBjaGlsZCA9IG9sZFJvb3QucmVtb3ZlQ2hpbGQoMCk7IC8vIHJlbW92ZSB0byBwcmV2ZW50IGRpc3Bvc2FsIHdoZW4gZGlzcG9zaW5nIG9mIHVud2FudGVkIHJvb3RcbiAgICAgICAgICAgIGNoaWxkLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIG9sZFJvb3QuZGlzcG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5fcm9vdC5hZGRDaGlsZChcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogdGhlIGNoaWxkIG5vZGUgd2lsbCBoYXZlIHRoZSBzYW1lIG9yaWVudGF0aW9uIGFzIHRoZSBuZXcgcm9vdCBzaW5jZVxuICAgICAgICAgICAgICogd2UgYXJlIHJlbW92aW5nIHRoZSBpbmJldHdlZW4gbm9kZS5cbiAgICAgICAgICAgICAqIHRoZSBlbnRpcmUgJ3RyZWUnIG11c3QgYmUgZmxpcHBlZCByZWN1cnNpdmVseSB0byBlbnN1cmUgdGhhdCB0aGUgb3JpZW50YXRpb25cbiAgICAgICAgICAgICAqIGZsaXBzIGF0IGVhY2ggbGV2ZWxcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZmxpcE5vZGUoY2hpbGRSZWZlcmVuY2UsIGNoaWxkUmVmZXJlbmNlLm9ydGhvZ29uYWxTaXplLCBjaGlsZFJlZmVyZW5jZS5zaXplKSwgU2l6aW5nLkRpc3RyaWJ1dGUsIDApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fcm9vdC5hZGRDaGlsZChvbGRSb290LCBTaXppbmcuRGlzdHJpYnV0ZSwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuX3Jvb3QuZWxlbWVudCk7XG4gICAgICAgIHRoaXMuZGlzcG9zYWJsZS52YWx1ZSA9IHRoaXMuX3Jvb3Qub25EaWRDaGFuZ2UoKGUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX29uRGlkQ2hhbmdlLmZpcmUoZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBuZXh0KGxvY2F0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb2dtYXRpY1NlbGVjdChsb2NhdGlvbik7XG4gICAgfVxuICAgIHByZXZpb3VzKGxvY2F0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb2dtYXRpY1NlbGVjdChsb2NhdGlvbiwgdHJ1ZSk7XG4gICAgfVxuICAgIGdldFZpZXcobG9jYXRpb24pIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IGxvY2F0aW9uID8gdGhpcy5nZXROb2RlKGxvY2F0aW9uKVsxXSA6IHRoaXMucm9vdDtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldFZpZXdzKG5vZGUsIHRoaXMub3JpZW50YXRpb24pO1xuICAgIH1cbiAgICBfZ2V0Vmlld3Mobm9kZSwgb3JpZW50YXRpb24sIGNhY2hlZFZpc2libGVTaXplKSB7XG4gICAgICAgIGNvbnN0IGJveCA9IHsgaGVpZ2h0OiBub2RlLmhlaWdodCwgd2lkdGg6IG5vZGUud2lkdGggfTtcbiAgICAgICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBMZWFmTm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgYm94LCB2aWV3OiBub2RlLnZpZXcsIGNhY2hlZFZpc2libGVTaXplIH07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBjaGlsZCA9IG5vZGUuY2hpbGRyZW5baV07XG4gICAgICAgICAgICBjb25zdCBub2RlQ2FjaGVkVmlzaWJsZVNpemUgPSBub2RlLmdldENoaWxkQ2FjaGVkVmlzaWJsZVNpemUoaSk7XG4gICAgICAgICAgICBjaGlsZHJlbi5wdXNoKHRoaXMuX2dldFZpZXdzKGNoaWxkLCBvcnRob2dvbmFsKG9yaWVudGF0aW9uKSwgbm9kZUNhY2hlZFZpc2libGVTaXplKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgYm94LCBjaGlsZHJlbiB9O1xuICAgIH1cbiAgICBwcm9nbWF0aWNTZWxlY3QobG9jYXRpb24sIHJldmVyc2UgPSBmYWxzZSkge1xuICAgICAgICBjb25zdCBbcGF0aCwgbm9kZV0gPSB0aGlzLmdldE5vZGUobG9jYXRpb24pO1xuICAgICAgICBpZiAoIShub2RlIGluc3RhbmNlb2YgTGVhZk5vZGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgbG9jYXRpb24nKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gcGF0aC5sZW5ndGggLSAxOyBpID4gLTE7IGktLSkge1xuICAgICAgICAgICAgY29uc3QgbiA9IHBhdGhbaV07XG4gICAgICAgICAgICBjb25zdCBsID0gbG9jYXRpb25baV0gfHwgMDtcbiAgICAgICAgICAgIGNvbnN0IGNhblByb2dyZXNzSW5DdXJyZW50TGV2ZWwgPSByZXZlcnNlXG4gICAgICAgICAgICAgICAgPyBsIC0gMSA+IC0xXG4gICAgICAgICAgICAgICAgOiBsICsgMSA8IG4uY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKGNhblByb2dyZXNzSW5DdXJyZW50TGV2ZWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmluZExlYWYobi5jaGlsZHJlbltyZXZlcnNlID8gbCAtIDEgOiBsICsgMV0sIHJldmVyc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaW5kTGVhZih0aGlzLnJvb3QsIHJldmVyc2UpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcihwcm9wb3J0aW9uYWxMYXlvdXQsIHN0eWxlcywgb3JpZW50YXRpb24sIGxvY2tlZCwgbWFyZ2luKSB7XG4gICAgICAgIHRoaXMucHJvcG9ydGlvbmFsTGF5b3V0ID0gcHJvcG9ydGlvbmFsTGF5b3V0O1xuICAgICAgICB0aGlzLnN0eWxlcyA9IHN0eWxlcztcbiAgICAgICAgdGhpcy5fbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX21hcmdpbiA9IDA7XG4gICAgICAgIHRoaXMuX21heGltaXplZE5vZGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuZGlzcG9zYWJsZSA9IG5ldyBNdXRhYmxlRGlzcG9zYWJsZSgpO1xuICAgICAgICB0aGlzLl9vbkRpZENoYW5nZSA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRDaGFuZ2UgPSB0aGlzLl9vbkRpZENoYW5nZS5ldmVudDtcbiAgICAgICAgdGhpcy5fb25EaWRWaWV3VmlzaWJpbGl0eUNoYW5nZSA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRWaWV3VmlzaWJpbGl0eUNoYW5nZSA9IHRoaXMuX29uRGlkVmlld1Zpc2liaWxpdHlDaGFuZ2UuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uRGlkTWF4aW1pemVkTm9kZUNoYW5nZSA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRNYXhpbWl6ZWROb2RlQ2hhbmdlID0gdGhpcy5fb25EaWRNYXhpbWl6ZWROb2RlQ2hhbmdlLmV2ZW50O1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTmFtZSA9ICdkdi1ncmlkLXZpZXcnO1xuICAgICAgICB0aGlzLl9sb2NrZWQgPSBsb2NrZWQgIT09IG51bGwgJiYgbG9ja2VkICE9PSB2b2lkIDAgPyBsb2NrZWQgOiBmYWxzZTtcbiAgICAgICAgdGhpcy5fbWFyZ2luID0gbWFyZ2luICE9PSBudWxsICYmIG1hcmdpbiAhPT0gdm9pZCAwID8gbWFyZ2luIDogMDtcbiAgICAgICAgdGhpcy5yb290ID0gbmV3IEJyYW5jaE5vZGUob3JpZW50YXRpb24sIHByb3BvcnRpb25hbExheW91dCwgc3R5bGVzLCAwLCAwLCB0aGlzLmxvY2tlZCwgdGhpcy5tYXJnaW4pO1xuICAgIH1cbiAgICBpc1ZpZXdWaXNpYmxlKGxvY2F0aW9uKSB7XG4gICAgICAgIGNvbnN0IFtyZXN0LCBpbmRleF0gPSB0YWlsKGxvY2F0aW9uKTtcbiAgICAgICAgY29uc3QgWywgcGFyZW50XSA9IHRoaXMuZ2V0Tm9kZShyZXN0KTtcbiAgICAgICAgaWYgKCEocGFyZW50IGluc3RhbmNlb2YgQnJhbmNoTm9kZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBmcm9tIGxvY2F0aW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcmVudC5pc0NoaWxkVmlzaWJsZShpbmRleCk7XG4gICAgfVxuICAgIHNldFZpZXdWaXNpYmxlKGxvY2F0aW9uLCB2aXNpYmxlKSB7XG4gICAgICAgIGlmICh0aGlzLmhhc01heGltaXplZFZpZXcoKSkge1xuICAgICAgICAgICAgdGhpcy5leGl0TWF4aW1pemVkVmlldygpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IFtyZXN0LCBpbmRleF0gPSB0YWlsKGxvY2F0aW9uKTtcbiAgICAgICAgY29uc3QgWywgcGFyZW50XSA9IHRoaXMuZ2V0Tm9kZShyZXN0KTtcbiAgICAgICAgaWYgKCEocGFyZW50IGluc3RhbmNlb2YgQnJhbmNoTm9kZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBmcm9tIGxvY2F0aW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fb25EaWRWaWV3VmlzaWJpbGl0eUNoYW5nZS5maXJlKCk7XG4gICAgICAgIHBhcmVudC5zZXRDaGlsZFZpc2libGUoaW5kZXgsIHZpc2libGUpO1xuICAgIH1cbiAgICBtb3ZlVmlldyhwYXJlbnRMb2NhdGlvbiwgZnJvbSwgdG8pIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzTWF4aW1pemVkVmlldygpKSB7XG4gICAgICAgICAgICB0aGlzLmV4aXRNYXhpbWl6ZWRWaWV3KCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgWywgcGFyZW50XSA9IHRoaXMuZ2V0Tm9kZShwYXJlbnRMb2NhdGlvbik7XG4gICAgICAgIGlmICghKHBhcmVudCBpbnN0YW5jZW9mIEJyYW5jaE5vZGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbG9jYXRpb24nKTtcbiAgICAgICAgfVxuICAgICAgICBwYXJlbnQubW92ZUNoaWxkKGZyb20sIHRvKTtcbiAgICB9XG4gICAgYWRkVmlldyh2aWV3LCBzaXplLCBsb2NhdGlvbikge1xuICAgICAgICBpZiAodGhpcy5oYXNNYXhpbWl6ZWRWaWV3KCkpIHtcbiAgICAgICAgICAgIHRoaXMuZXhpdE1heGltaXplZFZpZXcoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBbcmVzdCwgaW5kZXhdID0gdGFpbChsb2NhdGlvbik7XG4gICAgICAgIGNvbnN0IFtwYXRoVG9QYXJlbnQsIHBhcmVudF0gPSB0aGlzLmdldE5vZGUocmVzdCk7XG4gICAgICAgIGlmIChwYXJlbnQgaW5zdGFuY2VvZiBCcmFuY2hOb2RlKSB7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gbmV3IExlYWZOb2RlKHZpZXcsIG9ydGhvZ29uYWwocGFyZW50Lm9yaWVudGF0aW9uKSwgcGFyZW50Lm9ydGhvZ29uYWxTaXplKTtcbiAgICAgICAgICAgIHBhcmVudC5hZGRDaGlsZChub2RlLCBzaXplLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBbZ3JhbmRQYXJlbnQsIC4uLl9dID0gWy4uLnBhdGhUb1BhcmVudF0ucmV2ZXJzZSgpO1xuICAgICAgICAgICAgY29uc3QgW3BhcmVudEluZGV4LCAuLi5fX10gPSBbLi4ucmVzdF0ucmV2ZXJzZSgpO1xuICAgICAgICAgICAgbGV0IG5ld1NpYmxpbmdTaXplID0gMDtcbiAgICAgICAgICAgIGNvbnN0IG5ld1NpYmxpbmdDYWNoZWRWaXNpYmxlU2l6ZSA9IGdyYW5kUGFyZW50LmdldENoaWxkQ2FjaGVkVmlzaWJsZVNpemUocGFyZW50SW5kZXgpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBuZXdTaWJsaW5nQ2FjaGVkVmlzaWJsZVNpemUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgbmV3U2libGluZ1NpemUgPSBTaXppbmcuSW52aXNpYmxlKG5ld1NpYmxpbmdDYWNoZWRWaXNpYmxlU2l6ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjaGlsZCA9IGdyYW5kUGFyZW50LnJlbW92ZUNoaWxkKHBhcmVudEluZGV4KTtcbiAgICAgICAgICAgIGNoaWxkLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIGNvbnN0IG5ld1BhcmVudCA9IG5ldyBCcmFuY2hOb2RlKHBhcmVudC5vcmllbnRhdGlvbiwgdGhpcy5wcm9wb3J0aW9uYWxMYXlvdXQsIHRoaXMuc3R5bGVzLCBwYXJlbnQuc2l6ZSwgcGFyZW50Lm9ydGhvZ29uYWxTaXplLCB0aGlzLmxvY2tlZCwgdGhpcy5tYXJnaW4pO1xuICAgICAgICAgICAgZ3JhbmRQYXJlbnQuYWRkQ2hpbGQobmV3UGFyZW50LCBwYXJlbnQuc2l6ZSwgcGFyZW50SW5kZXgpO1xuICAgICAgICAgICAgY29uc3QgbmV3U2libGluZyA9IG5ldyBMZWFmTm9kZShwYXJlbnQudmlldywgZ3JhbmRQYXJlbnQub3JpZW50YXRpb24sIHBhcmVudC5zaXplKTtcbiAgICAgICAgICAgIG5ld1BhcmVudC5hZGRDaGlsZChuZXdTaWJsaW5nLCBuZXdTaWJsaW5nU2l6ZSwgMCk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInICYmIHNpemUudHlwZSA9PT0gJ3NwbGl0Jykge1xuICAgICAgICAgICAgICAgIHNpemUgPSB7IHR5cGU6ICdzcGxpdCcsIGluZGV4OiAwIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBub2RlID0gbmV3IExlYWZOb2RlKHZpZXcsIGdyYW5kUGFyZW50Lm9yaWVudGF0aW9uLCBwYXJlbnQuc2l6ZSk7XG4gICAgICAgICAgICBuZXdQYXJlbnQuYWRkQ2hpbGQobm9kZSwgc2l6ZSwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlbW92ZSh2aWV3LCBzaXppbmcpIHtcbiAgICAgICAgY29uc3QgbG9jYXRpb24gPSBnZXRHcmlkTG9jYXRpb24odmlldy5lbGVtZW50KTtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlVmlldyhsb2NhdGlvbiwgc2l6aW5nKTtcbiAgICB9XG4gICAgcmVtb3ZlVmlldyhsb2NhdGlvbiwgc2l6aW5nKSB7XG4gICAgICAgIGlmICh0aGlzLmhhc01heGltaXplZFZpZXcoKSkge1xuICAgICAgICAgICAgdGhpcy5leGl0TWF4aW1pemVkVmlldygpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IFtyZXN0LCBpbmRleF0gPSB0YWlsKGxvY2F0aW9uKTtcbiAgICAgICAgY29uc3QgW3BhdGhUb1BhcmVudCwgcGFyZW50XSA9IHRoaXMuZ2V0Tm9kZShyZXN0KTtcbiAgICAgICAgaWYgKCEocGFyZW50IGluc3RhbmNlb2YgQnJhbmNoTm9kZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBsb2NhdGlvbicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5vZGVUb1JlbW92ZSA9IHBhcmVudC5jaGlsZHJlbltpbmRleF07XG4gICAgICAgIGlmICghKG5vZGVUb1JlbW92ZSBpbnN0YW5jZW9mIExlYWZOb2RlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGxvY2F0aW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKGluZGV4LCBzaXppbmcpO1xuICAgICAgICBub2RlVG9SZW1vdmUuZGlzcG9zZSgpO1xuICAgICAgICBpZiAocGFyZW50LmNoaWxkcmVuLmxlbmd0aCAhPT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGVUb1JlbW92ZS52aWV3O1xuICAgICAgICB9XG4gICAgICAgIC8vIGlmIHRoZSBwYXJlbnQgaGFzIG9ubHkgb25lIGNoaWxkIGFuZCB3ZSBrbm93IHRoZSBwYXJlbnQgaXMgYSBCcmFuY2hOb2RlIHdlIGNhbiBtYWtlIHRoZSB0cmVlXG4gICAgICAgIC8vIG1vcmUgZWZmaWNpZW50bHkgc3BhY2VkIGJ5IHJlcGxhY2luZyB0aGUgcGFyZW50IEJyYW5jaE5vZGUgd2l0aCB0aGUgY2hpbGQuXG4gICAgICAgIC8vIGlmIHRoYXQgY2hpbGQgaXMgYSBMZWFmTm9kZSB0aGVuIHdlIHNpbXBseSByZXBsYWNlIHRoZSBCcmFuY2hOb2RlIHdpdGggdGhlIGNoaWxkIG90aGVyd2lzZSBpZiB0aGUgY2hpbGRcbiAgICAgICAgLy8gaXMgYSBCcmFuY2hOb2RlIHRvbyB3ZSBzaG91bGQgc3ByZWFkIGl0J3MgY2hpbGRyZW4gaW50byB0aGUgZ3JhbmRwYXJlbnQuXG4gICAgICAgIC8vIHJlZmVyIHRvIHRoZSByZW1haW5pbmcgY2hpbGQgYXMgdGhlIHNpYmxpbmdcbiAgICAgICAgY29uc3Qgc2libGluZyA9IHBhcmVudC5jaGlsZHJlblswXTtcbiAgICAgICAgaWYgKHBhdGhUb1BhcmVudC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIC8vIGlmIHRoZSBwYXJlbnQgaXMgcm9vdFxuICAgICAgICAgICAgaWYgKHNpYmxpbmcgaW5zdGFuY2VvZiBMZWFmTm9kZSkge1xuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBzaWJsaW5nIGlzIGEgbGVhZiBub2RlIG5vIGFjdGlvbiBpcyByZXF1aXJlZFxuICAgICAgICAgICAgICAgIHJldHVybiBub2RlVG9SZW1vdmUudmlldztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIG90aGVyd2lzZSB0aGUgc2libGluZyBpcyBhIGJyYW5jaCBub2RlLiBzaW5jZSB0aGUgcGFyZW50IGlzIHRoZSByb290IGFuZCB0aGUgcm9vdCBoYXMgb25seSBvbmUgY2hpbGRcbiAgICAgICAgICAgIC8vIHdoaWNoIGlzIGEgYnJhbmNoIG5vZGUgd2UgY2FuIGp1c3Qgc2V0IHRoaXMgYnJhbmNoIG5vZGUgdG8gYmUgdGhlIG5ldyByb290IG5vZGVcbiAgICAgICAgICAgIC8vIGZvciBnb29kIGhvdXNla2VlcGluZyB3ZSdsbCByZW1vdmluZyB0aGUgc2libGluZyBmcm9tIGl0J3MgZXhpc3RpbmcgdHJlZVxuICAgICAgICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKDAsIHNpemluZyk7XG4gICAgICAgICAgICAvLyBhbmQgc2V0IHRoYXQgc2libGluZyBub2RlIHRvIGJlIHJvb3RcbiAgICAgICAgICAgIHRoaXMucm9vdCA9IHNpYmxpbmc7XG4gICAgICAgICAgICByZXR1cm4gbm9kZVRvUmVtb3ZlLnZpZXc7XG4gICAgICAgIH1cbiAgICAgICAgLy8gb3RoZXJ3aXNlIHRoZSBwYXJlbnQgaXMgYXBhcnQgb2YgYSBsYXJnZSBzdWItdHJlZVxuICAgICAgICBjb25zdCBbZ3JhbmRQYXJlbnQsIC4uLl9dID0gWy4uLnBhdGhUb1BhcmVudF0ucmV2ZXJzZSgpO1xuICAgICAgICBjb25zdCBbcGFyZW50SW5kZXgsIC4uLl9fXSA9IFsuLi5yZXN0XS5yZXZlcnNlKCk7XG4gICAgICAgIGNvbnN0IGlzU2libGluZ1Zpc2libGUgPSBwYXJlbnQuaXNDaGlsZFZpc2libGUoMCk7XG4gICAgICAgIC8vIGVpdGhlciB3YXkgd2UgbmVlZCB0byByZW1vdmUgdGhlIHNpYmxpbmcgZnJvbSBpdCdzIGV4aXN0aW5nIHRyZWVcbiAgICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKDAsIHNpemluZyk7XG4gICAgICAgIC8vIG5vdGUgdGhlIHNpemVzIG9mIGFsbCBvZiB0aGUgZ3JhbmRwYXJlbnRzIGNoaWxkcmVuXG4gICAgICAgIGNvbnN0IHNpemVzID0gZ3JhbmRQYXJlbnQuY2hpbGRyZW4ubWFwKChfc2l6ZSwgaSkgPT4gZ3JhbmRQYXJlbnQuZ2V0Q2hpbGRTaXplKGkpKTtcbiAgICAgICAgLy8gcmVtb3ZlIHRoZSBwYXJlbnQgZnJvbSB0aGUgZ3JhbmRwYXJlbnQgc2luY2Ugd2UgYXJlIG1vdmluZyB0aGUgc2libGluZyB0byB0YWtlIHRoZSBwYXJlbnRzIHBsYWNlXG4gICAgICAgIC8vIHRoaXMgcGFyZW50IGlzIG5vIGxvbmdlciB1c2VkIGFuZCBjYW4gYmUgZGlzcG9zZWQgb2ZcbiAgICAgICAgZ3JhbmRQYXJlbnQucmVtb3ZlQ2hpbGQocGFyZW50SW5kZXgsIHNpemluZykuZGlzcG9zZSgpO1xuICAgICAgICBpZiAoc2libGluZyBpbnN0YW5jZW9mIEJyYW5jaE5vZGUpIHtcbiAgICAgICAgICAgIC8vIHJlcGxhY2UgdGhlIHBhcmVudCB3aXRoIHRoZSBzaWJsaW5ncyBjaGlsZHJlblxuICAgICAgICAgICAgc2l6ZXMuc3BsaWNlKHBhcmVudEluZGV4LCAxLCAuLi5zaWJsaW5nLmNoaWxkcmVuLm1hcCgoYykgPT4gYy5zaXplKSk7XG4gICAgICAgICAgICAvLyBhbmQgYWRkIHRob3NlIHNpYmxpbmdzIHRvIHRoZSBncmFuZHBhcmVudFxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaWJsaW5nLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGQgPSBzaWJsaW5nLmNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgICAgIGdyYW5kUGFyZW50LmFkZENoaWxkKGNoaWxkLCBjaGlsZC5zaXplLCBwYXJlbnRJbmRleCArIGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBjbGVhbiBkb3duIHRoZSBicmFuY2ggbm9kZSBzaW5jZSB3ZSBuZWVkIHRvIGRpcG9zZSBvZiBpdCBhbmRcbiAgICAgICAgICAgICAqIHdoZW4gLmRpc3Bvc2UoKSBpdCBjYWxsZWQgb24gYSBicmFuY2ggaXQgd2lsbCBkaXNwb3NlIG9mIGFueVxuICAgICAgICAgICAgICogdmlld3MgaXQgaXMgaG9sZGluZyBvbnRvLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB3aGlsZSAoc2libGluZy5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgc2libGluZy5yZW1vdmVDaGlsZCgwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIG90aGVyd2lzZSBjcmVhdGUgYSBuZXcgbGVhZiBub2RlIGFuZCBhZGQgdGhhdCB0byB0aGUgZ3JhbmRwYXJlbnRcbiAgICAgICAgICAgIGNvbnN0IG5ld1NpYmxpbmcgPSBuZXcgTGVhZk5vZGUoc2libGluZy52aWV3LCBvcnRob2dvbmFsKHNpYmxpbmcub3JpZW50YXRpb24pLCBzaWJsaW5nLnNpemUpO1xuICAgICAgICAgICAgY29uc3Qgc2libGluZ1NpemluZyA9IGlzU2libGluZ1Zpc2libGVcbiAgICAgICAgICAgICAgICA/IHNpYmxpbmcub3J0aG9nb25hbFNpemVcbiAgICAgICAgICAgICAgICA6IFNpemluZy5JbnZpc2libGUoc2libGluZy5vcnRob2dvbmFsU2l6ZSk7XG4gICAgICAgICAgICBncmFuZFBhcmVudC5hZGRDaGlsZChuZXdTaWJsaW5nLCBzaWJsaW5nU2l6aW5nLCBwYXJlbnRJbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdGhlIGNvbnRhaW5pbmcgbm9kZSBvZiB0aGUgc2libGluZyBpcyBubyBsb25nZXIgcmVxdWlyZWQgYW5kIGNhbiBiZSBkaXNwb3NlZCBvZlxuICAgICAgICBzaWJsaW5nLmRpc3Bvc2UoKTtcbiAgICAgICAgLy8gcmVzaXplIGV2ZXJ5dGhpbmdcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaXplcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZ3JhbmRQYXJlbnQucmVzaXplQ2hpbGQoaSwgc2l6ZXNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBub2RlVG9SZW1vdmUudmlldztcbiAgICB9XG4gICAgbGF5b3V0KHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgY29uc3QgW3NpemUsIG9ydGhvZ29uYWxTaXplXSA9IHRoaXMucm9vdC5vcmllbnRhdGlvbiA9PT0gT3JpZW50YXRpb24uSE9SSVpPTlRBTFxuICAgICAgICAgICAgPyBbaGVpZ2h0LCB3aWR0aF1cbiAgICAgICAgICAgIDogW3dpZHRoLCBoZWlnaHRdO1xuICAgICAgICB0aGlzLnJvb3QubGF5b3V0KHNpemUsIG9ydGhvZ29uYWxTaXplKTtcbiAgICB9XG4gICAgZ2V0Tm9kZShsb2NhdGlvbiwgbm9kZSA9IHRoaXMucm9vdCwgcGF0aCA9IFtdKSB7XG4gICAgICAgIGlmIChsb2NhdGlvbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBbcGF0aCwgbm9kZV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEobm9kZSBpbnN0YW5jZW9mIEJyYW5jaE5vZGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbG9jYXRpb24nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBbaW5kZXgsIC4uLnJlc3RdID0gbG9jYXRpb247XG4gICAgICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPj0gbm9kZS5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBsb2NhdGlvbicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNoaWxkID0gbm9kZS5jaGlsZHJlbltpbmRleF07XG4gICAgICAgIHBhdGgucHVzaChub2RlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Tm9kZShyZXN0LCBjaGlsZCwgcGF0aCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgZ2V0UmVsYXRpdmVMb2NhdGlvbiwgZ2V0R3JpZExvY2F0aW9uLCB9IGZyb20gJy4vZ3JpZHZpZXcnO1xuaW1wb3J0IHsgdGFpbCwgc2VxdWVuY2VFcXVhbHMgfSBmcm9tICcuLi9hcnJheSc7XG5pbXBvcnQgeyBDb21wb3NpdGVEaXNwb3NhYmxlIH0gZnJvbSAnLi4vbGlmZWN5Y2xlJztcbmltcG9ydCB7IEJhc2VHcmlkLCB0b1RhcmdldCwgfSBmcm9tICcuL2Jhc2VDb21wb25lbnRHcmlkdmlldyc7XG5pbXBvcnQgeyBFbWl0dGVyIH0gZnJvbSAnLi4vZXZlbnRzJztcbmV4cG9ydCBjbGFzcyBHcmlkdmlld0NvbXBvbmVudCBleHRlbmRzIEJhc2VHcmlkIHtcbiAgICBnZXQgb3JpZW50YXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyaWR2aWV3Lm9yaWVudGF0aW9uO1xuICAgIH1cbiAgICBzZXQgb3JpZW50YXRpb24odmFsdWUpIHtcbiAgICAgICAgdGhpcy5ncmlkdmlldy5vcmllbnRhdGlvbiA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgb3B0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29wdGlvbnM7XG4gICAgfVxuICAgIGdldCBkZXNlcmlhbGl6ZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZXNlcmlhbGl6ZXI7XG4gICAgfVxuICAgIHNldCBkZXNlcmlhbGl6ZXIodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fZGVzZXJpYWxpemVyID0gdmFsdWU7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lciwgb3B0aW9ucykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHN1cGVyKGNvbnRhaW5lciwge1xuICAgICAgICAgICAgcHJvcG9ydGlvbmFsTGF5b3V0OiAoX2EgPSBvcHRpb25zLnByb3BvcnRpb25hbExheW91dCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdHJ1ZSxcbiAgICAgICAgICAgIG9yaWVudGF0aW9uOiBvcHRpb25zLm9yaWVudGF0aW9uLFxuICAgICAgICAgICAgc3R5bGVzOiBvcHRpb25zLmhpZGVCb3JkZXJzXG4gICAgICAgICAgICAgICAgPyB7IHNlcGFyYXRvckJvcmRlcjogJ3RyYW5zcGFyZW50JyB9XG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBkaXNhYmxlQXV0b1Jlc2l6aW5nOiBvcHRpb25zLmRpc2FibGVBdXRvUmVzaXppbmcsXG4gICAgICAgICAgICBjbGFzc05hbWU6IG9wdGlvbnMuY2xhc3NOYW1lLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fb25EaWRMYXlvdXRmcm9tSlNPTiA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRMYXlvdXRGcm9tSlNPTiA9IHRoaXMuX29uRGlkTGF5b3V0ZnJvbUpTT04uZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uRGlkUmVtb3ZlR3JvdXAgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRGlkUmVtb3ZlR3JvdXAgPSB0aGlzLl9vbkRpZFJlbW92ZUdyb3VwLmV2ZW50O1xuICAgICAgICB0aGlzLl9vbkRpZEFkZEdyb3VwID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZEFkZEdyb3VwID0gdGhpcy5fb25EaWRBZGRHcm91cC5ldmVudDtcbiAgICAgICAgdGhpcy5fb25EaWRBY3RpdmVHcm91cENoYW5nZSA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRBY3RpdmVHcm91cENoYW5nZSA9IHRoaXMuX29uRGlkQWN0aXZlR3JvdXBDaGFuZ2UuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmFkZERpc3Bvc2FibGVzKHRoaXMuX29uRGlkQWRkR3JvdXAsIHRoaXMuX29uRGlkUmVtb3ZlR3JvdXAsIHRoaXMuX29uRGlkQWN0aXZlR3JvdXBDaGFuZ2UsIHRoaXMub25EaWRBZGQoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9vbkRpZEFkZEdyb3VwLmZpcmUoZXZlbnQpO1xuICAgICAgICB9KSwgdGhpcy5vbkRpZFJlbW92ZSgoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX29uRGlkUmVtb3ZlR3JvdXAuZmlyZShldmVudCk7XG4gICAgICAgIH0pLCB0aGlzLm9uRGlkQWN0aXZlQ2hhbmdlKChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25EaWRBY3RpdmVHcm91cENoYW5nZS5maXJlKGV2ZW50KTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICB1cGRhdGVPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIudXBkYXRlT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgY29uc3QgaGFzT3JpZW50YXRpb25DaGFuZ2VkID0gdHlwZW9mIG9wdGlvbnMub3JpZW50YXRpb24gPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICB0aGlzLmdyaWR2aWV3Lm9yaWVudGF0aW9uICE9PSBvcHRpb25zLm9yaWVudGF0aW9uO1xuICAgICAgICB0aGlzLl9vcHRpb25zID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB0aGlzLm9wdGlvbnMpLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKGhhc09yaWVudGF0aW9uQ2hhbmdlZCkge1xuICAgICAgICAgICAgdGhpcy5ncmlkdmlldy5vcmllbnRhdGlvbiA9IG9wdGlvbnMub3JpZW50YXRpb247XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sYXlvdXQodGhpcy5ncmlkdmlldy53aWR0aCwgdGhpcy5ncmlkdmlldy5oZWlnaHQsIHRydWUpO1xuICAgIH1cbiAgICByZW1vdmVQYW5lbChwYW5lbCkge1xuICAgICAgICB0aGlzLnJlbW92ZUdyb3VwKHBhbmVsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VyaWFsaXplIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBsYXlvdXRcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIEEgSlNPTiByZXNwcmVzZW50YXRpb24gb2YgdGhlIGxheW91dFxuICAgICAqL1xuICAgIHRvSlNPTigpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5ncmlkdmlldy5zZXJpYWxpemUoKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGdyaWQ6IGRhdGEsXG4gICAgICAgICAgICBhY3RpdmVQYW5lbDogKF9hID0gdGhpcy5hY3RpdmVHcm91cCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmlkLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBzZXRWaXNpYmxlKHBhbmVsLCB2aXNpYmxlKSB7XG4gICAgICAgIHRoaXMuZ3JpZHZpZXcuc2V0Vmlld1Zpc2libGUoZ2V0R3JpZExvY2F0aW9uKHBhbmVsLmVsZW1lbnQpLCB2aXNpYmxlKTtcbiAgICB9XG4gICAgc2V0QWN0aXZlKHBhbmVsKSB7XG4gICAgICAgIHRoaXMuX2dyb3Vwcy5mb3JFYWNoKCh2YWx1ZSwgX2tleSkgPT4ge1xuICAgICAgICAgICAgdmFsdWUudmFsdWUuc2V0QWN0aXZlKHBhbmVsID09PSB2YWx1ZS52YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmb2N1cygpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAoX2EgPSB0aGlzLmFjdGl2ZUdyb3VwKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZm9jdXMoKTtcbiAgICB9XG4gICAgZnJvbUpTT04oc2VyaWFsaXplZEdyaWR2aWV3KSB7XG4gICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgY29uc3QgeyBncmlkLCBhY3RpdmVQYW5lbCB9ID0gc2VyaWFsaXplZEdyaWR2aWV3O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcXVldWUgPSBbXTtcbiAgICAgICAgICAgIC8vIHRha2Ugbm90ZSBvZiB0aGUgZXhpc3RpbmcgZGltZW5zaW9uc1xuICAgICAgICAgICAgY29uc3Qgd2lkdGggPSB0aGlzLndpZHRoO1xuICAgICAgICAgICAgY29uc3QgaGVpZ2h0ID0gdGhpcy5oZWlnaHQ7XG4gICAgICAgICAgICB0aGlzLmdyaWR2aWV3LmRlc2VyaWFsaXplKGdyaWQsIHtcbiAgICAgICAgICAgICAgICBmcm9tSlNPTjogKG5vZGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBkYXRhIH0gPSBub2RlO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2aWV3ID0gdGhpcy5vcHRpb25zLmNyZWF0ZUNvbXBvbmVudCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogZGF0YS5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGRhdGEuY29tcG9uZW50LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcXVldWUucHVzaCgoKSA9PiB2aWV3LmluaXQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBkYXRhLnBhcmFtcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmltdW1XaWR0aDogZGF0YS5taW5pbXVtV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhpbXVtV2lkdGg6IGRhdGEubWF4aW11bVdpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWluaW11bUhlaWdodDogZGF0YS5taW5pbXVtSGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4aW11bUhlaWdodDogZGF0YS5tYXhpbXVtSGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJpb3JpdHk6IGRhdGEucHJpb3JpdHksXG4gICAgICAgICAgICAgICAgICAgICAgICBzbmFwOiAhIWRhdGEuc25hcCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc29yOiB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNWaXNpYmxlOiBub2RlLnZpc2libGUsXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25EaWRBZGRHcm91cC5maXJlKHZpZXcpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlZ2lzdGVyUGFuZWwodmlldyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2aWV3O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMubGF5b3V0KHdpZHRoLCBoZWlnaHQsIHRydWUpO1xuICAgICAgICAgICAgcXVldWUuZm9yRWFjaCgoZikgPT4gZigpKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYWN0aXZlUGFuZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFuZWwgPSB0aGlzLmdldFBhbmVsKGFjdGl2ZVBhbmVsKTtcbiAgICAgICAgICAgICAgICBpZiAocGFuZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb1NldEdyb3VwQWN0aXZlKHBhbmVsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUbyByZW1vdmUgYSBncm91cCB3ZSBjYW5ub3QgY2FsbCB0aGlzLnJlbW92ZUdyb3VwKC4uLikgc2luY2UgdGhpcyBtYWtlcyBhc3N1bXB0aW9ucyBhYm91dFxuICAgICAgICAgICAgICogdGhlIHVuZGVybHlpbmcgSFRNTEVsZW1lbnQgZXhpc3RpbmcgaW4gdGhlIEdyaWR2aWV3LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGdyb3VwIG9mIHRoaXMuZ3JvdXBzKSB7XG4gICAgICAgICAgICAgICAgZ3JvdXAuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2dyb3Vwcy5kZWxldGUoZ3JvdXAuaWQpO1xuICAgICAgICAgICAgICAgIHRoaXMuX29uRGlkUmVtb3ZlR3JvdXAuZmlyZShncm91cCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBmaXJlcyBjbGVhbi11cCBldmVudHMgYW5kIGNsZWFycyB0aGUgdW5kZXJseWluZyBIVE1MIGdyaWR2aWV3LlxuICAgICAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBldmVuIHRob3VnaCB3ZSBoYXZlIGNsZWFuZWQtdXAgd2Ugc3RpbGwgd2FudCB0byBpbmZvcm0gdGhlIGNhbGxlciBvZiB0aGVpciBlcnJvclxuICAgICAgICAgICAgICogYW5kIHdlJ2xsIGRvIHRoaXMgdGhyb3VnaCByZS10aHJvd2luZyB0aGUgb3JpZ2luYWwgZXJyb3Igc2luY2UgYWZ0ZXJhbGwgeW91IHdvdWxkXG4gICAgICAgICAgICAgKiBleHBlY3QgdHJ5aW5nIHRvIGxvYWQgYSBjb3JydXB0ZWQgbGF5b3V0IHRvIHJlc3VsdCBpbiBhbiBlcnJvciBhbmQgbm90IHNpbGVudGx5IGZhaWwuLi5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX29uRGlkTGF5b3V0ZnJvbUpTT04uZmlyZSgpO1xuICAgIH1cbiAgICBjbGVhcigpIHtcbiAgICAgICAgY29uc3QgaGFzQWN0aXZlR3JvdXAgPSB0aGlzLmFjdGl2ZUdyb3VwO1xuICAgICAgICBjb25zdCBncm91cHMgPSBBcnJheS5mcm9tKHRoaXMuX2dyb3Vwcy52YWx1ZXMoKSk7IC8vIHJlYXNzaWduIHNpbmNlIGdyb3VwIHBhbmVscyB3aWxsIG11dGF0ZVxuICAgICAgICBmb3IgKGNvbnN0IGdyb3VwIG9mIGdyb3Vwcykge1xuICAgICAgICAgICAgZ3JvdXAuZGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gICAgICAgICAgICB0aGlzLmRvUmVtb3ZlR3JvdXAoZ3JvdXAudmFsdWUsIHsgc2tpcEFjdGl2ZTogdHJ1ZSB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzQWN0aXZlR3JvdXApIHtcbiAgICAgICAgICAgIHRoaXMuZG9TZXRHcm91cEFjdGl2ZSh1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZ3JpZHZpZXcuY2xlYXIoKTtcbiAgICB9XG4gICAgbW92ZVBhbmVsKHBhbmVsLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgbGV0IHJlbGF0aXZlTG9jYXRpb247XG4gICAgICAgIGNvbnN0IHJlbW92ZWRQYW5lbCA9IHRoaXMuZ3JpZHZpZXcucmVtb3ZlKHBhbmVsKTtcbiAgICAgICAgY29uc3QgcmVmZXJlbmNlR3JvdXAgPSAoX2EgPSB0aGlzLl9ncm91cHMuZ2V0KG9wdGlvbnMucmVmZXJlbmNlKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnZhbHVlO1xuICAgICAgICBpZiAoIXJlZmVyZW5jZUdyb3VwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHJlZmVyZW5jZSBncm91cCAke29wdGlvbnMucmVmZXJlbmNlfSBkb2VzIG5vdCBleGlzdGApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHRvVGFyZ2V0KG9wdGlvbnMuZGlyZWN0aW9uKTtcbiAgICAgICAgaWYgKHRhcmdldCA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHt0YXJnZXR9IG5vdCBzdXBwb3J0ZWQgYXMgYW4gb3B0aW9uYCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9IGdldEdyaWRMb2NhdGlvbihyZWZlcmVuY2VHcm91cC5lbGVtZW50KTtcbiAgICAgICAgICAgIHJlbGF0aXZlTG9jYXRpb24gPSBnZXRSZWxhdGl2ZUxvY2F0aW9uKHRoaXMuZ3JpZHZpZXcub3JpZW50YXRpb24sIGxvY2F0aW9uLCB0YXJnZXQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZG9BZGRHcm91cChyZW1vdmVkUGFuZWwsIHJlbGF0aXZlTG9jYXRpb24sIG9wdGlvbnMuc2l6ZSk7XG4gICAgfVxuICAgIGFkZFBhbmVsKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgICAgICBsZXQgcmVsYXRpdmVMb2NhdGlvbiA9IChfYSA9IG9wdGlvbnMubG9jYXRpb24pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFswXTtcbiAgICAgICAgaWYgKChfYiA9IG9wdGlvbnMucG9zaXRpb24pID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5yZWZlcmVuY2VQYW5lbCkge1xuICAgICAgICAgICAgY29uc3QgcmVmZXJlbmNlR3JvdXAgPSAoX2MgPSB0aGlzLl9ncm91cHMuZ2V0KG9wdGlvbnMucG9zaXRpb24ucmVmZXJlbmNlUGFuZWwpKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MudmFsdWU7XG4gICAgICAgICAgICBpZiAoIXJlZmVyZW5jZUdyb3VwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGByZWZlcmVuY2UgZ3JvdXAgJHtvcHRpb25zLnBvc2l0aW9uLnJlZmVyZW5jZVBhbmVsfSBkb2VzIG5vdCBleGlzdGApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gdG9UYXJnZXQob3B0aW9ucy5wb3NpdGlvbi5kaXJlY3Rpb24pO1xuICAgICAgICAgICAgaWYgKHRhcmdldCA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7dGFyZ2V0fSBub3Qgc3VwcG9ydGVkIGFzIGFuIG9wdGlvbmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYXRpb24gPSBnZXRHcmlkTG9jYXRpb24ocmVmZXJlbmNlR3JvdXAuZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgcmVsYXRpdmVMb2NhdGlvbiA9IGdldFJlbGF0aXZlTG9jYXRpb24odGhpcy5ncmlkdmlldy5vcmllbnRhdGlvbiwgbG9jYXRpb24sIHRhcmdldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmlldyA9IHRoaXMub3B0aW9ucy5jcmVhdGVDb21wb25lbnQoe1xuICAgICAgICAgICAgaWQ6IG9wdGlvbnMuaWQsXG4gICAgICAgICAgICBuYW1lOiBvcHRpb25zLmNvbXBvbmVudCxcbiAgICAgICAgfSk7XG4gICAgICAgIHZpZXcuaW5pdCh7XG4gICAgICAgICAgICBwYXJhbXM6IChfZCA9IG9wdGlvbnMucGFyYW1zKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiB7fSxcbiAgICAgICAgICAgIG1pbmltdW1XaWR0aDogb3B0aW9ucy5taW5pbXVtV2lkdGgsXG4gICAgICAgICAgICBtYXhpbXVtV2lkdGg6IG9wdGlvbnMubWF4aW11bVdpZHRoLFxuICAgICAgICAgICAgbWluaW11bUhlaWdodDogb3B0aW9ucy5taW5pbXVtSGVpZ2h0LFxuICAgICAgICAgICAgbWF4aW11bUhlaWdodDogb3B0aW9ucy5tYXhpbXVtSGVpZ2h0LFxuICAgICAgICAgICAgcHJpb3JpdHk6IG9wdGlvbnMucHJpb3JpdHksXG4gICAgICAgICAgICBzbmFwOiAhIW9wdGlvbnMuc25hcCxcbiAgICAgICAgICAgIGFjY2Vzc29yOiB0aGlzLFxuICAgICAgICAgICAgaXNWaXNpYmxlOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yZWdpc3RlclBhbmVsKHZpZXcpO1xuICAgICAgICB0aGlzLmRvQWRkR3JvdXAodmlldywgcmVsYXRpdmVMb2NhdGlvbiwgb3B0aW9ucy5zaXplKTtcbiAgICAgICAgdGhpcy5kb1NldEdyb3VwQWN0aXZlKHZpZXcpO1xuICAgICAgICByZXR1cm4gdmlldztcbiAgICB9XG4gICAgcmVnaXN0ZXJQYW5lbChwYW5lbCkge1xuICAgICAgICBjb25zdCBkaXNwb3NhYmxlID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUocGFuZWwuYXBpLm9uRGlkRm9jdXNDaGFuZ2UoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoIWV2ZW50LmlzRm9jdXNlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2dyb3Vwcy5mb3JFYWNoKChncm91cEl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBncm91cCA9IGdyb3VwSXRlbS52YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAoZ3JvdXAgIT09IHBhbmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwLnNldEFjdGl2ZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBncm91cC5zZXRBY3RpdmUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5fZ3JvdXBzLnNldChwYW5lbC5pZCwge1xuICAgICAgICAgICAgdmFsdWU6IHBhbmVsLFxuICAgICAgICAgICAgZGlzcG9zYWJsZSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG1vdmVHcm91cChyZWZlcmVuY2VHcm91cCwgZ3JvdXBJZCwgdGFyZ2V0KSB7XG4gICAgICAgIGNvbnN0IHNvdXJjZUdyb3VwID0gdGhpcy5nZXRQYW5lbChncm91cElkKTtcbiAgICAgICAgaWYgKCFzb3VyY2VHcm91cCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIG9wZXJhdGlvbicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlZmVyZW5jZUxvY2F0aW9uID0gZ2V0R3JpZExvY2F0aW9uKHJlZmVyZW5jZUdyb3VwLmVsZW1lbnQpO1xuICAgICAgICBjb25zdCB0YXJnZXRMb2NhdGlvbiA9IGdldFJlbGF0aXZlTG9jYXRpb24odGhpcy5ncmlkdmlldy5vcmllbnRhdGlvbiwgcmVmZXJlbmNlTG9jYXRpb24sIHRhcmdldCk7XG4gICAgICAgIGNvbnN0IFt0YXJnZXRQYXJlbnRMb2NhdGlvbiwgdG9dID0gdGFpbCh0YXJnZXRMb2NhdGlvbik7XG4gICAgICAgIGNvbnN0IHNvdXJjZUxvY2F0aW9uID0gZ2V0R3JpZExvY2F0aW9uKHNvdXJjZUdyb3VwLmVsZW1lbnQpO1xuICAgICAgICBjb25zdCBbc291cmNlUGFyZW50TG9jYXRpb24sIGZyb21dID0gdGFpbChzb3VyY2VMb2NhdGlvbik7XG4gICAgICAgIGlmIChzZXF1ZW5jZUVxdWFscyhzb3VyY2VQYXJlbnRMb2NhdGlvbiwgdGFyZ2V0UGFyZW50TG9jYXRpb24pKSB7XG4gICAgICAgICAgICAvLyBzcGVjaWFsIGNhc2Ugd2hlbiAnc3dhcHBpbmcnIHR3byB2aWV3cyB3aXRoaW4gc2FtZSBncmlkIGxvY2F0aW9uXG4gICAgICAgICAgICAvLyBpZiBhIGdyb3VwIGhhcyBvbmUgdGFiIC0gd2UgYXJlIGVzc2VudGlhbGx5IG1vdmluZyB0aGUgJ2dyb3VwJ1xuICAgICAgICAgICAgLy8gd2hpY2ggaXMgZXF1aXZhbGVudCB0byBzd2FwcGluZyB0d28gdmlld3MgaW4gdGhpcyBjYXNlXG4gICAgICAgICAgICB0aGlzLmdyaWR2aWV3Lm1vdmVWaWV3KHNvdXJjZVBhcmVudExvY2F0aW9uLCBmcm9tLCB0byk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gc291cmNlIGdyb3VwIHdpbGwgYmVjb21lIGVtcHR5IHNvIGRlbGV0ZSB0aGUgZ3JvdXBcbiAgICAgICAgY29uc3QgdGFyZ2V0R3JvdXAgPSB0aGlzLmRvUmVtb3ZlR3JvdXAoc291cmNlR3JvdXAsIHtcbiAgICAgICAgICAgIHNraXBBY3RpdmU6IHRydWUsXG4gICAgICAgICAgICBza2lwRGlzcG9zZTogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGFmdGVyIGRlbGV0aW5nIHRoZSBncm91cCB3ZSBuZWVkIHRvIHJlLWV2YXVsYXRlIHRoZSByZWYgbG9jYXRpb25cbiAgICAgICAgY29uc3QgdXBkYXRlZFJlZmVyZW5jZUxvY2F0aW9uID0gZ2V0R3JpZExvY2F0aW9uKHJlZmVyZW5jZUdyb3VwLmVsZW1lbnQpO1xuICAgICAgICBjb25zdCBsb2NhdGlvbiA9IGdldFJlbGF0aXZlTG9jYXRpb24odGhpcy5ncmlkdmlldy5vcmllbnRhdGlvbiwgdXBkYXRlZFJlZmVyZW5jZUxvY2F0aW9uLCB0YXJnZXQpO1xuICAgICAgICB0aGlzLmRvQWRkR3JvdXAodGFyZ2V0R3JvdXAsIGxvY2F0aW9uKTtcbiAgICB9XG4gICAgcmVtb3ZlR3JvdXAoZ3JvdXApIHtcbiAgICAgICAgc3VwZXIucmVtb3ZlR3JvdXAoZ3JvdXApO1xuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICBzdXBlci5kaXNwb3NlKCk7XG4gICAgICAgIHRoaXMuX29uRGlkTGF5b3V0ZnJvbUpTT04uZGlzcG9zZSgpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEJhc2VQYW5lbFZpZXcsIH0gZnJvbSAnLi9iYXNlUGFuZWxWaWV3JztcbmltcG9ydCB7IEdyaWR2aWV3UGFuZWxBcGlJbXBsLCB9IGZyb20gJy4uL2FwaS9ncmlkdmlld1BhbmVsQXBpJztcbmltcG9ydCB7IEVtaXR0ZXIgfSBmcm9tICcuLi9ldmVudHMnO1xuZXhwb3J0IGNsYXNzIEdyaWR2aWV3UGFuZWwgZXh0ZW5kcyBCYXNlUGFuZWxWaWV3IHtcbiAgICBnZXQgcHJpb3JpdHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcmlvcml0eTtcbiAgICB9XG4gICAgZ2V0IHNuYXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zbmFwO1xuICAgIH1cbiAgICBnZXQgbWluaW11bVdpZHRoKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogZGVmZXIgdG8gcHJvdGVjdGVkIGZ1bmN0aW9uIHRvIGFsbG93IHN1YmNsYXNzZXMgdG8gb3ZlcnJpZGUgZWFzaWx5LlxuICAgICAgICAgKiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy8zMzhcbiAgICAgICAgICovXG4gICAgICAgIHJldHVybiB0aGlzLl9fbWluaW11bVdpZHRoKCk7XG4gICAgfVxuICAgIGdldCBtaW5pbXVtSGVpZ2h0KCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogZGVmZXIgdG8gcHJvdGVjdGVkIGZ1bmN0aW9uIHRvIGFsbG93IHN1YmNsYXNzZXMgdG8gb3ZlcnJpZGUgZWFzaWx5LlxuICAgICAgICAgKiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy8zMzhcbiAgICAgICAgICovXG4gICAgICAgIHJldHVybiB0aGlzLl9fbWluaW11bUhlaWdodCgpO1xuICAgIH1cbiAgICBnZXQgbWF4aW11bUhlaWdodCgpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGRlZmVyIHRvIHByb3RlY3RlZCBmdW5jdGlvbiB0byBhbGxvdyBzdWJjbGFzc2VzIHRvIG92ZXJyaWRlIGVhc2lseS5cbiAgICAgICAgICogc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMzM4XG4gICAgICAgICAqL1xuICAgICAgICByZXR1cm4gdGhpcy5fX21heGltdW1IZWlnaHQoKTtcbiAgICB9XG4gICAgZ2V0IG1heGltdW1XaWR0aCgpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGRlZmVyIHRvIHByb3RlY3RlZCBmdW5jdGlvbiB0byBhbGxvdyBzdWJjbGFzc2VzIHRvIG92ZXJyaWRlIGVhc2lseS5cbiAgICAgICAgICogc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMzM4XG4gICAgICAgICAqL1xuICAgICAgICByZXR1cm4gdGhpcy5fX21heGltdW1XaWR0aCgpO1xuICAgIH1cbiAgICBfX21pbmltdW1XaWR0aCgpIHtcbiAgICAgICAgY29uc3Qgd2lkdGggPSB0eXBlb2YgdGhpcy5fbWluaW11bVdpZHRoID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICA/IHRoaXMuX21pbmltdW1XaWR0aCgpXG4gICAgICAgICAgICA6IHRoaXMuX21pbmltdW1XaWR0aDtcbiAgICAgICAgaWYgKHdpZHRoICE9PSB0aGlzLl9ldmFsdWF0ZWRNaW5pbXVtV2lkdGgpIHtcbiAgICAgICAgICAgIHRoaXMuX2V2YWx1YXRlZE1pbmltdW1XaWR0aCA9IHdpZHRoO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVDb25zdHJhaW50cygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3aWR0aDtcbiAgICB9XG4gICAgX19tYXhpbXVtV2lkdGgoKSB7XG4gICAgICAgIGNvbnN0IHdpZHRoID0gdHlwZW9mIHRoaXMuX21heGltdW1XaWR0aCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgPyB0aGlzLl9tYXhpbXVtV2lkdGgoKVxuICAgICAgICAgICAgOiB0aGlzLl9tYXhpbXVtV2lkdGg7XG4gICAgICAgIGlmICh3aWR0aCAhPT0gdGhpcy5fZXZhbHVhdGVkTWF4aW11bVdpZHRoKSB7XG4gICAgICAgICAgICB0aGlzLl9ldmFsdWF0ZWRNYXhpbXVtV2lkdGggPSB3aWR0aDtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQ29uc3RyYWludHMoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd2lkdGg7XG4gICAgfVxuICAgIF9fbWluaW11bUhlaWdodCgpIHtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gdHlwZW9mIHRoaXMuX21pbmltdW1IZWlnaHQgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgID8gdGhpcy5fbWluaW11bUhlaWdodCgpXG4gICAgICAgICAgICA6IHRoaXMuX21pbmltdW1IZWlnaHQ7XG4gICAgICAgIGlmIChoZWlnaHQgIT09IHRoaXMuX2V2YWx1YXRlZE1pbmltdW1IZWlnaHQpIHtcbiAgICAgICAgICAgIHRoaXMuX2V2YWx1YXRlZE1pbmltdW1IZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUNvbnN0cmFpbnRzKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhlaWdodDtcbiAgICB9XG4gICAgX19tYXhpbXVtSGVpZ2h0KCkge1xuICAgICAgICBjb25zdCBoZWlnaHQgPSB0eXBlb2YgdGhpcy5fbWF4aW11bUhlaWdodCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgPyB0aGlzLl9tYXhpbXVtSGVpZ2h0KClcbiAgICAgICAgICAgIDogdGhpcy5fbWF4aW11bUhlaWdodDtcbiAgICAgICAgaWYgKGhlaWdodCAhPT0gdGhpcy5fZXZhbHVhdGVkTWF4aW11bUhlaWdodCkge1xuICAgICAgICAgICAgdGhpcy5fZXZhbHVhdGVkTWF4aW11bUhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQ29uc3RyYWludHMoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGVpZ2h0O1xuICAgIH1cbiAgICBnZXQgaXNBY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFwaS5pc0FjdGl2ZTtcbiAgICB9XG4gICAgZ2V0IGlzVmlzaWJsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBpLmlzVmlzaWJsZTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoaWQsIGNvbXBvbmVudCwgb3B0aW9ucywgYXBpKSB7XG4gICAgICAgIHN1cGVyKGlkLCBjb21wb25lbnQsIGFwaSAhPT0gbnVsbCAmJiBhcGkgIT09IHZvaWQgMCA/IGFwaSA6IG5ldyBHcmlkdmlld1BhbmVsQXBpSW1wbChpZCwgY29tcG9uZW50KSk7XG4gICAgICAgIHRoaXMuX2V2YWx1YXRlZE1pbmltdW1XaWR0aCA9IDA7XG4gICAgICAgIHRoaXMuX2V2YWx1YXRlZE1heGltdW1XaWR0aCA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSO1xuICAgICAgICB0aGlzLl9ldmFsdWF0ZWRNaW5pbXVtSGVpZ2h0ID0gMDtcbiAgICAgICAgdGhpcy5fZXZhbHVhdGVkTWF4aW11bUhlaWdodCA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSO1xuICAgICAgICB0aGlzLl9taW5pbXVtV2lkdGggPSAwO1xuICAgICAgICB0aGlzLl9taW5pbXVtSGVpZ2h0ID0gMDtcbiAgICAgICAgdGhpcy5fbWF4aW11bVdpZHRoID0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7XG4gICAgICAgIHRoaXMuX21heGltdW1IZWlnaHQgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcbiAgICAgICAgdGhpcy5fc25hcCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9vbkRpZENoYW5nZSA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRDaGFuZ2UgPSB0aGlzLl9vbkRpZENoYW5nZS5ldmVudDtcbiAgICAgICAgaWYgKHR5cGVvZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm1pbmltdW1XaWR0aCkgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aGlzLl9taW5pbXVtV2lkdGggPSBvcHRpb25zLm1pbmltdW1XaWR0aDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubWF4aW11bVdpZHRoKSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHRoaXMuX21heGltdW1XaWR0aCA9IG9wdGlvbnMubWF4aW11bVdpZHRoO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5taW5pbXVtSGVpZ2h0KSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHRoaXMuX21pbmltdW1IZWlnaHQgPSBvcHRpb25zLm1pbmltdW1IZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm1heGltdW1IZWlnaHQpID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgdGhpcy5fbWF4aW11bUhlaWdodCA9IG9wdGlvbnMubWF4aW11bUhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFwaS5pbml0aWFsaXplKHRoaXMpOyAvLyBUT0RPOiByZXF1aXJlZCB0byBieS1wYXNzICdzdXBlciBiZWZvcmUgdGhpcycgcmVxdWlyZW1lbnRcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyh0aGlzLmFwaS5vbldpbGxWaXNpYmlsaXR5Q2hhbmdlKChldmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBpc1Zpc2libGUgfSA9IGV2ZW50O1xuICAgICAgICAgICAgY29uc3QgeyBhY2Nlc3NvciB9ID0gdGhpcy5fcGFyYW1zO1xuICAgICAgICAgICAgYWNjZXNzb3Iuc2V0VmlzaWJsZSh0aGlzLCBpc1Zpc2libGUpO1xuICAgICAgICB9KSwgdGhpcy5hcGkub25BY3RpdmVDaGFuZ2UoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBhY2Nlc3NvciB9ID0gdGhpcy5fcGFyYW1zO1xuICAgICAgICAgICAgYWNjZXNzb3IuZG9TZXRHcm91cEFjdGl2ZSh0aGlzKTtcbiAgICAgICAgfSksIHRoaXMuYXBpLm9uRGlkQ29uc3RyYWludHNDaGFuZ2VJbnRlcm5hbCgoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZXZlbnQubWluaW11bVdpZHRoID09PSAnbnVtYmVyJyB8fFxuICAgICAgICAgICAgICAgIHR5cGVvZiBldmVudC5taW5pbXVtV2lkdGggPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9taW5pbXVtV2lkdGggPSBldmVudC5taW5pbXVtV2lkdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIGV2ZW50Lm1pbmltdW1IZWlnaHQgPT09ICdudW1iZXInIHx8XG4gICAgICAgICAgICAgICAgdHlwZW9mIGV2ZW50Lm1pbmltdW1IZWlnaHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9taW5pbXVtSGVpZ2h0ID0gZXZlbnQubWluaW11bUhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgZXZlbnQubWF4aW11bVdpZHRoID09PSAnbnVtYmVyJyB8fFxuICAgICAgICAgICAgICAgIHR5cGVvZiBldmVudC5tYXhpbXVtV2lkdGggPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXhpbXVtV2lkdGggPSBldmVudC5tYXhpbXVtV2lkdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIGV2ZW50Lm1heGltdW1IZWlnaHQgPT09ICdudW1iZXInIHx8XG4gICAgICAgICAgICAgICAgdHlwZW9mIGV2ZW50Lm1heGltdW1IZWlnaHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXhpbXVtSGVpZ2h0ID0gZXZlbnQubWF4aW11bUhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksIHRoaXMuYXBpLm9uRGlkU2l6ZUNoYW5nZSgoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX29uRGlkQ2hhbmdlLmZpcmUoe1xuICAgICAgICAgICAgICAgIGhlaWdodDogZXZlbnQuaGVpZ2h0LFxuICAgICAgICAgICAgICAgIHdpZHRoOiBldmVudC53aWR0aCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KSwgdGhpcy5fb25EaWRDaGFuZ2UpO1xuICAgIH1cbiAgICBzZXRWaXNpYmxlKGlzVmlzaWJsZSkge1xuICAgICAgICB0aGlzLmFwaS5fb25EaWRWaXNpYmlsaXR5Q2hhbmdlLmZpcmUoeyBpc1Zpc2libGUgfSk7XG4gICAgfVxuICAgIHNldEFjdGl2ZShpc0FjdGl2ZSkge1xuICAgICAgICB0aGlzLmFwaS5fb25EaWRBY3RpdmVDaGFuZ2UuZmlyZSh7IGlzQWN0aXZlIH0pO1xuICAgIH1cbiAgICBpbml0KHBhcmFtZXRlcnMpIHtcbiAgICAgICAgaWYgKHBhcmFtZXRlcnMubWF4aW11bUhlaWdodCkge1xuICAgICAgICAgICAgdGhpcy5fbWF4aW11bUhlaWdodCA9IHBhcmFtZXRlcnMubWF4aW11bUhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyYW1ldGVycy5taW5pbXVtSGVpZ2h0KSB7XG4gICAgICAgICAgICB0aGlzLl9taW5pbXVtSGVpZ2h0ID0gcGFyYW1ldGVycy5taW5pbXVtSGVpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJhbWV0ZXJzLm1heGltdW1XaWR0aCkge1xuICAgICAgICAgICAgdGhpcy5fbWF4aW11bVdpZHRoID0gcGFyYW1ldGVycy5tYXhpbXVtV2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmFtZXRlcnMubWluaW11bVdpZHRoKSB7XG4gICAgICAgICAgICB0aGlzLl9taW5pbXVtV2lkdGggPSBwYXJhbWV0ZXJzLm1pbmltdW1XaWR0aDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcmlvcml0eSA9IHBhcmFtZXRlcnMucHJpb3JpdHk7XG4gICAgICAgIHRoaXMuX3NuYXAgPSAhIXBhcmFtZXRlcnMuc25hcDtcbiAgICAgICAgc3VwZXIuaW5pdChwYXJhbWV0ZXJzKTtcbiAgICAgICAgaWYgKHR5cGVvZiBwYXJhbWV0ZXJzLmlzVmlzaWJsZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICB0aGlzLnNldFZpc2libGUocGFyYW1ldGVycy5pc1Zpc2libGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHVwZGF0ZUNvbnN0cmFpbnRzKCkge1xuICAgICAgICB0aGlzLmFwaS5fb25EaWRDb25zdHJhaW50c0NoYW5nZS5maXJlKHtcbiAgICAgICAgICAgIG1pbmltdW1XaWR0aDogdGhpcy5fZXZhbHVhdGVkTWluaW11bVdpZHRoLFxuICAgICAgICAgICAgbWF4aW11bVdpZHRoOiB0aGlzLl9ldmFsdWF0ZWRNYXhpbXVtV2lkdGgsXG4gICAgICAgICAgICBtaW5pbXVtSGVpZ2h0OiB0aGlzLl9ldmFsdWF0ZWRNaW5pbXVtSGVpZ2h0LFxuICAgICAgICAgICAgbWF4aW11bUhlaWdodDogdGhpcy5fZXZhbHVhdGVkTWF4aW11bUhlaWdodCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSBzdXBlci50b0pTT04oKTtcbiAgICAgICAgY29uc3QgbWF4aW11bSA9ICh2YWx1ZSkgPT4gdmFsdWUgPT09IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSID8gdW5kZWZpbmVkIDogdmFsdWU7XG4gICAgICAgIGNvbnN0IG1pbmltdW0gPSAodmFsdWUpID0+ICh2YWx1ZSA8PSAwID8gdW5kZWZpbmVkIDogdmFsdWUpO1xuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSksIHsgbWluaW11bUhlaWdodDogbWluaW11bSh0aGlzLm1pbmltdW1IZWlnaHQpLCBtYXhpbXVtSGVpZ2h0OiBtYXhpbXVtKHRoaXMubWF4aW11bUhlaWdodCksIG1pbmltdW1XaWR0aDogbWluaW11bSh0aGlzLm1pbmltdW1XaWR0aCksIG1heGltdW1XaWR0aDogbWF4aW11bSh0aGlzLm1heGltdW1XaWR0aCksIHNuYXA6IHRoaXMuc25hcCwgcHJpb3JpdHk6IHRoaXMucHJpb3JpdHkgfSk7XG4gICAgfVxufVxuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEFjY3JlZGl0YXRpb246IFRoaXMgZmlsZSBpcyBsYXJnbHkgYmFzZWQgdXBvbiB0aGUgTUlUIGxpY2VuY2VkIFZTQ29kZSBzb3VyY2Vjb2RlIGZvdW5kIGF0OlxuICogaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC92c2NvZGUvdHJlZS9tYWluL3NyYy92cy9iYXNlL2Jyb3dzZXIvdWkvZ3JpZFxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBPcmllbnRhdGlvbiB9IGZyb20gJy4uL3NwbGl0dmlldy9zcGxpdHZpZXcnO1xuaW1wb3J0IHsgRW1pdHRlciB9IGZyb20gJy4uL2V2ZW50cyc7XG5leHBvcnQgY2xhc3MgTGVhZk5vZGUge1xuICAgIGdldCBtaW5pbXVtV2lkdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXcubWluaW11bVdpZHRoO1xuICAgIH1cbiAgICBnZXQgbWF4aW11bVdpZHRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3Lm1heGltdW1XaWR0aDtcbiAgICB9XG4gICAgZ2V0IG1pbmltdW1IZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXcubWluaW11bUhlaWdodDtcbiAgICB9XG4gICAgZ2V0IG1heGltdW1IZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXcubWF4aW11bUhlaWdodDtcbiAgICB9XG4gICAgZ2V0IHByaW9yaXR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3LnByaW9yaXR5O1xuICAgIH1cbiAgICBnZXQgc25hcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlldy5zbmFwO1xuICAgIH1cbiAgICBnZXQgbWluaW11bVNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9yaWVudGF0aW9uID09PSBPcmllbnRhdGlvbi5IT1JJWk9OVEFMXG4gICAgICAgICAgICA/IHRoaXMubWluaW11bUhlaWdodFxuICAgICAgICAgICAgOiB0aGlzLm1pbmltdW1XaWR0aDtcbiAgICB9XG4gICAgZ2V0IG1heGltdW1TaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcmllbnRhdGlvbiA9PT0gT3JpZW50YXRpb24uSE9SSVpPTlRBTFxuICAgICAgICAgICAgPyB0aGlzLm1heGltdW1IZWlnaHRcbiAgICAgICAgICAgIDogdGhpcy5tYXhpbXVtV2lkdGg7XG4gICAgfVxuICAgIGdldCBtaW5pbXVtT3J0aG9nb25hbFNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9yaWVudGF0aW9uID09PSBPcmllbnRhdGlvbi5IT1JJWk9OVEFMXG4gICAgICAgICAgICA/IHRoaXMubWluaW11bVdpZHRoXG4gICAgICAgICAgICA6IHRoaXMubWluaW11bUhlaWdodDtcbiAgICB9XG4gICAgZ2V0IG1heGltdW1PcnRob2dvbmFsU2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3JpZW50YXRpb24gPT09IE9yaWVudGF0aW9uLkhPUklaT05UQUxcbiAgICAgICAgICAgID8gdGhpcy5tYXhpbXVtV2lkdGhcbiAgICAgICAgICAgIDogdGhpcy5tYXhpbXVtSGVpZ2h0O1xuICAgIH1cbiAgICBnZXQgb3J0aG9nb25hbFNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vcnRob2dvbmFsU2l6ZTtcbiAgICB9XG4gICAgZ2V0IHNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zaXplO1xuICAgIH1cbiAgICBnZXQgZWxlbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlldy5lbGVtZW50O1xuICAgIH1cbiAgICBnZXQgd2lkdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9yaWVudGF0aW9uID09PSBPcmllbnRhdGlvbi5IT1JJWk9OVEFMXG4gICAgICAgICAgICA/IHRoaXMub3J0aG9nb25hbFNpemVcbiAgICAgICAgICAgIDogdGhpcy5zaXplO1xuICAgIH1cbiAgICBnZXQgaGVpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcmllbnRhdGlvbiA9PT0gT3JpZW50YXRpb24uSE9SSVpPTlRBTFxuICAgICAgICAgICAgPyB0aGlzLnNpemVcbiAgICAgICAgICAgIDogdGhpcy5vcnRob2dvbmFsU2l6ZTtcbiAgICB9XG4gICAgY29uc3RydWN0b3Iodmlldywgb3JpZW50YXRpb24sIG9ydGhvZ29uYWxTaXplLCBzaXplID0gMCkge1xuICAgICAgICB0aGlzLnZpZXcgPSB2aWV3O1xuICAgICAgICB0aGlzLm9yaWVudGF0aW9uID0gb3JpZW50YXRpb247XG4gICAgICAgIHRoaXMuX29uRGlkQ2hhbmdlID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZENoYW5nZSA9IHRoaXMuX29uRGlkQ2hhbmdlLmV2ZW50O1xuICAgICAgICB0aGlzLl9vcnRob2dvbmFsU2l6ZSA9IG9ydGhvZ29uYWxTaXplO1xuICAgICAgICB0aGlzLl9zaXplID0gc2l6ZTtcbiAgICAgICAgdGhpcy5fZGlzcG9zYWJsZSA9IHRoaXMudmlldy5vbkRpZENoYW5nZSgoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChldmVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX29uRGlkQ2hhbmdlLmZpcmUoe1xuICAgICAgICAgICAgICAgICAgICBzaXplOiB0aGlzLm9yaWVudGF0aW9uID09PSBPcmllbnRhdGlvbi5WRVJUSUNBTFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBldmVudC53aWR0aFxuICAgICAgICAgICAgICAgICAgICAgICAgOiBldmVudC5oZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgIG9ydGhvZ29uYWxTaXplOiB0aGlzLm9yaWVudGF0aW9uID09PSBPcmllbnRhdGlvbi5WRVJUSUNBTFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBldmVudC5oZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgICAgIDogZXZlbnQud2lkdGgsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vbkRpZENoYW5nZS5maXJlKHt9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHNldFZpc2libGUodmlzaWJsZSkge1xuICAgICAgICBpZiAodGhpcy52aWV3LnNldFZpc2libGUpIHtcbiAgICAgICAgICAgIHRoaXMudmlldy5zZXRWaXNpYmxlKHZpc2libGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxheW91dChzaXplLCBvcnRob2dvbmFsU2l6ZSkge1xuICAgICAgICB0aGlzLl9zaXplID0gc2l6ZTtcbiAgICAgICAgdGhpcy5fb3J0aG9nb25hbFNpemUgPSBvcnRob2dvbmFsU2l6ZTtcbiAgICAgICAgdGhpcy52aWV3LmxheW91dCh0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHRoaXMuX29uRGlkQ2hhbmdlLmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5fZGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gICAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IFBST1BFUlRZX0tFWVNfR1JJRFZJRVcgPSAoKCkgPT4ge1xuICAgIC8qKlxuICAgICAqIGJ5IHJlYWRvbmcgdGhlIGtleXMgZnJvbSBhbiBlbXB0eSB2YWx1ZSBvYmplY3QgVHlwZVNjcmlwdCB3aWxsIGVycm9yXG4gICAgICogd2hlbiB3ZSBhZGQgb3IgcmVtb3ZlIG5ldyBwcm9wZXJ0aWVzIHRvIGBEb2Nrdmlld09wdGlvbnNgXG4gICAgICovXG4gICAgY29uc3QgcHJvcGVydGllcyA9IHtcbiAgICAgICAgZGlzYWJsZUF1dG9SZXNpemluZzogdW5kZWZpbmVkLFxuICAgICAgICBwcm9wb3J0aW9uYWxMYXlvdXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgb3JpZW50YXRpb246IHVuZGVmaW5lZCxcbiAgICAgICAgaGlkZUJvcmRlcnM6IHVuZGVmaW5lZCxcbiAgICAgICAgY2xhc3NOYW1lOiB1bmRlZmluZWQsXG4gICAgfTtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMocHJvcGVydGllcyk7XG59KSgpO1xuIiwiZXhwb3J0IHsgZ2V0UGFuZURhdGEsIGdldFBhbmVsRGF0YSwgUGFuZVRyYW5zZmVyLCBQYW5lbFRyYW5zZmVyLCB9IGZyb20gJy4vZG5kL2RhdGFUcmFuc2Zlcic7XG4vKipcbiAqIEV2ZW50cywgRW1pdHRlcnMgYW5kIERpc3Bvc2FibGVzIGFyZSB2ZXJ5IGNvbW1vbiBjb25jZXB0cyB0aGF0IG1hbnkgY29kZWJhc2VzIHdpbGwgY29udGFpbiwgaG93ZXZlciB3ZSBuZWVkXG4gKiB0byBleHBvcnQgdGhlbSBmb3IgZG9ja3ZpZXcgZnJhbWV3b3JrIHBhY2thZ2VzIHRvIHVzZS5cbiAqIFRvIGJlIGEgZ29vZCBjaXRpemVuIHRoZXNlIGFyZSBleHBvcnRlZCB3aXRoIGEgYERvY2t2aWV3YCBwcmVmaXggdG8gcHJldmVudCBhY2NpZGVudGFsIHVzZSBieSBvdGhlcnMuXG4gKi9cbmV4cG9ydCB7IEVtaXR0ZXIgYXMgRG9ja3ZpZXdFbWl0dGVyLCBFdmVudCBhcyBEb2Nrdmlld0V2ZW50IH0gZnJvbSAnLi9ldmVudHMnO1xuZXhwb3J0IHsgTXV0YWJsZURpc3Bvc2FibGUgYXMgRG9ja3ZpZXdNdXRhYmxlRGlzcG9zYWJsZSwgQ29tcG9zaXRlRGlzcG9zYWJsZSBhcyBEb2Nrdmlld0NvbXBvc2l0ZURpc3Bvc2FibGUsIERpc3Bvc2FibGUgYXMgRG9ja3ZpZXdEaXNwb3NhYmxlLCB9IGZyb20gJy4vbGlmZWN5Y2xlJztcbmV4cG9ydCAqIGZyb20gJy4vcGFuZWwvdHlwZXMnO1xuZXhwb3J0ICogZnJvbSAnLi9zcGxpdHZpZXcvc3BsaXR2aWV3JztcbmV4cG9ydCB7IFBST1BFUlRZX0tFWVNfU1BMSVRWSUVXLCB9IGZyb20gJy4vc3BsaXR2aWV3L29wdGlvbnMnO1xuZXhwb3J0ICogZnJvbSAnLi9wYW5ldmlldy9wYW5ldmlldyc7XG5leHBvcnQgKiBmcm9tICcuL2dyaWR2aWV3L2dyaWR2aWV3JztcbmV4cG9ydCB7IFBST1BFUlRZX0tFWVNfR1JJRFZJRVcsIH0gZnJvbSAnLi9ncmlkdmlldy9vcHRpb25zJztcbmV4cG9ydCAqIGZyb20gJy4vZ3JpZHZpZXcvYmFzZUNvbXBvbmVudEdyaWR2aWV3JztcbmV4cG9ydCB7IERyYWdnYWJsZVBhbmV2aWV3UGFuZWwsIH0gZnJvbSAnLi9wYW5ldmlldy9kcmFnZ2FibGVQYW5ldmlld1BhbmVsJztcbmV4cG9ydCAqIGZyb20gJy4vZG9ja3ZpZXcvY29tcG9uZW50cy9wYW5lbC9jb250ZW50JztcbmV4cG9ydCAqIGZyb20gJy4vZG9ja3ZpZXcvY29tcG9uZW50cy90YWIvdGFiJztcbmV4cG9ydCAqIGZyb20gJy4vZG9ja3ZpZXcvZG9ja3ZpZXdHcm91cFBhbmVsTW9kZWwnO1xuZXhwb3J0ICogZnJvbSAnLi9kb2Nrdmlldy90eXBlcyc7XG5leHBvcnQgKiBmcm9tICcuL2RvY2t2aWV3L2RvY2t2aWV3R3JvdXBQYW5lbCc7XG5leHBvcnQgKiBmcm9tICcuL2RvY2t2aWV3L29wdGlvbnMnO1xuZXhwb3J0ICogZnJvbSAnLi9kb2Nrdmlldy9kb2Nrdmlld1BhbmVsJztcbmV4cG9ydCB7IERlZmF1bHRUYWIgfSBmcm9tICcuL2RvY2t2aWV3L2NvbXBvbmVudHMvdGFiL2RlZmF1bHRUYWInO1xuZXhwb3J0IHsgRGVmYXVsdERvY2t2aWV3RGVzZXJpYWx6aWVyLCB9IGZyb20gJy4vZG9ja3ZpZXcvZGVzZXJpYWxpemVyJztcbmV4cG9ydCAqIGZyb20gJy4vZG9ja3ZpZXcvZG9ja3ZpZXdDb21wb25lbnQnO1xuZXhwb3J0ICogZnJvbSAnLi9ncmlkdmlldy9ncmlkdmlld0NvbXBvbmVudCc7XG5leHBvcnQgKiBmcm9tICcuL3NwbGl0dmlldy9zcGxpdHZpZXdDb21wb25lbnQnO1xuZXhwb3J0ICogZnJvbSAnLi9wYW5ldmlldy9wYW5ldmlld0NvbXBvbmVudCc7XG5leHBvcnQgeyBQUk9QRVJUWV9LRVlTX1BBTkVWSUVXLCBQYW5ldmlld1VuaGFuZGxlZERyYWdPdmVyRXZlbnQsIH0gZnJvbSAnLi9wYW5ldmlldy9vcHRpb25zJztcbmV4cG9ydCAqIGZyb20gJy4vZ3JpZHZpZXcvZ3JpZHZpZXdQYW5lbCc7XG5leHBvcnQgeyBTcGxpdHZpZXdQYW5lbCB9IGZyb20gJy4vc3BsaXR2aWV3L3NwbGl0dmlld1BhbmVsJztcbmV4cG9ydCAqIGZyb20gJy4vcGFuZXZpZXcvcGFuZXZpZXdQYW5lbCc7XG5leHBvcnQgKiBmcm9tICcuL2RvY2t2aWV3L3R5cGVzJztcbmV4cG9ydCB7IHBvc2l0aW9uVG9EaXJlY3Rpb24sIGRpcmVjdGlvblRvUG9zaXRpb24sIH0gZnJvbSAnLi9kbmQvZHJvcHRhcmdldCc7XG5leHBvcnQgeyBTcGxpdHZpZXdBcGksIFBhbmV2aWV3QXBpLCBHcmlkdmlld0FwaSwgRG9ja3ZpZXdBcGksIH0gZnJvbSAnLi9hcGkvY29tcG9uZW50LmFwaSc7XG5leHBvcnQgeyBjcmVhdGVEb2NrdmlldywgY3JlYXRlR3JpZHZpZXcsIGNyZWF0ZVBhbmV2aWV3LCBjcmVhdGVTcGxpdHZpZXcsIH0gZnJvbSAnLi9hcGkvZW50cnlQb2ludHMnO1xuIiwiZXhwb3J0IHZhciBEaXNwb3NhYmxlO1xuKGZ1bmN0aW9uIChEaXNwb3NhYmxlKSB7XG4gICAgRGlzcG9zYWJsZS5OT05FID0ge1xuICAgICAgICBkaXNwb3NlOiAoKSA9PiB7XG4gICAgICAgICAgICAvLyBub29wXG4gICAgICAgIH0sXG4gICAgfTtcbiAgICBmdW5jdGlvbiBmcm9tKGZ1bmMpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRpc3Bvc2U6ICgpID0+IHtcbiAgICAgICAgICAgICAgICBmdW5jKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cbiAgICBEaXNwb3NhYmxlLmZyb20gPSBmcm9tO1xufSkoRGlzcG9zYWJsZSB8fCAoRGlzcG9zYWJsZSA9IHt9KSk7XG5leHBvcnQgY2xhc3MgQ29tcG9zaXRlRGlzcG9zYWJsZSB7XG4gICAgZ2V0IGlzRGlzcG9zZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc0Rpc3Bvc2VkO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuX2lzRGlzcG9zZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fZGlzcG9zYWJsZXMgPSBhcmdzO1xuICAgIH1cbiAgICBhZGREaXNwb3NhYmxlcyguLi5hcmdzKSB7XG4gICAgICAgIGFyZ3MuZm9yRWFjaCgoYXJnKSA9PiB0aGlzLl9kaXNwb3NhYmxlcy5wdXNoKGFyZykpO1xuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICBpZiAodGhpcy5faXNEaXNwb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2lzRGlzcG9zZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9kaXNwb3NhYmxlcy5mb3JFYWNoKChhcmcpID0+IGFyZy5kaXNwb3NlKCkpO1xuICAgICAgICB0aGlzLl9kaXNwb3NhYmxlcyA9IFtdO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBNdXRhYmxlRGlzcG9zYWJsZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuX2Rpc3Bvc2FibGUgPSBEaXNwb3NhYmxlLk5PTkU7XG4gICAgfVxuICAgIHNldCB2YWx1ZShkaXNwb3NhYmxlKSB7XG4gICAgICAgIGlmICh0aGlzLl9kaXNwb3NhYmxlKSB7XG4gICAgICAgICAgICB0aGlzLl9kaXNwb3NhYmxlLmRpc3Bvc2UoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9kaXNwb3NhYmxlID0gZGlzcG9zYWJsZTtcbiAgICB9XG4gICAgZGlzcG9zZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2Rpc3Bvc2FibGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2Rpc3Bvc2FibGUuZGlzcG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5fZGlzcG9zYWJsZSA9IERpc3Bvc2FibGUuTk9ORTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImV4cG9ydCBjb25zdCBjbGFtcCA9ICh2YWx1ZSwgbWluLCBtYXgpID0+IHtcbiAgICBpZiAobWluID4gbWF4KSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjYXZlYXQ6IGFuIGVycm9yIHNob3VsZCBiZSB0aHJvd24gaGVyZSBpZiB0aGlzIHdhcyBhIHByb3BlciBgY2xhbXBgIGZ1bmN0aW9uIGJ1dCB3ZSBuZWVkIHRvIGhhbmRsZVxuICAgICAgICAgKiBjYXNlcyB3aGVyZSBgbWluYCA+IGBtYXhgIGFuZCBpbiB0aG9zZSBjYXNlcyByZXR1cm4gYG1pbmAuXG4gICAgICAgICAqL1xuICAgICAgICByZXR1cm4gbWluO1xuICAgIH1cbiAgICByZXR1cm4gTWF0aC5taW4obWF4LCBNYXRoLm1heCh2YWx1ZSwgbWluKSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlcXVlbnRpYWxOdW1iZXJHZW5lcmF0b3IgPSAoKSA9PiB7XG4gICAgbGV0IHZhbHVlID0gMTtcbiAgICByZXR1cm4geyBuZXh0OiAoKSA9PiAodmFsdWUrKykudG9TdHJpbmcoKSB9O1xufTtcbmV4cG9ydCBjb25zdCByYW5nZSA9IChmcm9tLCB0bykgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGlmICh0eXBlb2YgdG8gIT09ICdudW1iZXInKSB7XG4gICAgICAgIHRvID0gZnJvbTtcbiAgICAgICAgZnJvbSA9IDA7XG4gICAgfVxuICAgIGlmIChmcm9tIDw9IHRvKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSBmcm9tOyBpIDwgdG87IGkrKykge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goaSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGZvciAobGV0IGkgPSBmcm9tOyBpID4gdG87IGktLSkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goaSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJpbXBvcnQgeyBkaXNhYmxlSWZyYW1lUG9pbnRFdmVudHMsIHF1YXNpRGVmYXVsdFByZXZlbnRlZCwgdG9nZ2xlQ2xhc3MsIH0gZnJvbSAnLi4vZG9tJztcbmltcG9ydCB7IEVtaXR0ZXIsIGFkZERpc3Bvc2FibGVMaXN0ZW5lciwgYWRkRGlzcG9zYWJsZVdpbmRvd0xpc3RlbmVyLCB9IGZyb20gJy4uL2V2ZW50cyc7XG5pbXBvcnQgeyBDb21wb3NpdGVEaXNwb3NhYmxlLCBNdXRhYmxlRGlzcG9zYWJsZSB9IGZyb20gJy4uL2xpZmVjeWNsZSc7XG5pbXBvcnQgeyBjbGFtcCB9IGZyb20gJy4uL21hdGgnO1xuY2xhc3MgQXJpYUxldmVsVHJhY2tlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuX29yZGVyZWRMaXN0ID0gW107XG4gICAgfVxuICAgIHB1c2goZWxlbWVudCkge1xuICAgICAgICB0aGlzLl9vcmRlcmVkTGlzdCA9IFtcbiAgICAgICAgICAgIC4uLnRoaXMuX29yZGVyZWRMaXN0LmZpbHRlcigoaXRlbSkgPT4gaXRlbSAhPT0gZWxlbWVudCksXG4gICAgICAgICAgICBlbGVtZW50LFxuICAgICAgICBdO1xuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIH1cbiAgICBkZXN0cm95KGVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5fb3JkZXJlZExpc3QgPSB0aGlzLl9vcmRlcmVkTGlzdC5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0gIT09IGVsZW1lbnQpO1xuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIH1cbiAgICB1cGRhdGUoKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fb3JkZXJlZExpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuX29yZGVyZWRMaXN0W2ldLnNldEF0dHJpYnV0ZSgnYXJpYS1sZXZlbCcsIGAke2l9YCk7XG4gICAgICAgICAgICB0aGlzLl9vcmRlcmVkTGlzdFtpXS5zdHlsZS56SW5kZXggPSBgY2FsYyh2YXIoLS1kdi1vdmVybGF5LXotaW5kZXgsIDk5OSkgKyAke2kgKiAyfSlgO1xuICAgICAgICB9XG4gICAgfVxufVxuY29uc3QgYXJpYWxMZXZlbFRyYWNrZXIgPSBuZXcgQXJpYUxldmVsVHJhY2tlcigpO1xuZXhwb3J0IGNsYXNzIE92ZXJsYXkgZXh0ZW5kcyBDb21wb3NpdGVEaXNwb3NhYmxlIHtcbiAgICBzZXQgbWluaW11bUluVmlld3BvcnRXaWR0aCh2YWx1ZSkge1xuICAgICAgICB0aGlzLm9wdGlvbnMubWluaW11bUluVmlld3BvcnRXaWR0aCA9IHZhbHVlO1xuICAgIH1cbiAgICBzZXQgbWluaW11bUluVmlld3BvcnRIZWlnaHQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLm1pbmltdW1JblZpZXdwb3J0SGVpZ2h0ID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBlbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZWxlbWVudDtcbiAgICB9XG4gICAgZ2V0IGlzVmlzaWJsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzVmlzaWJsZTtcbiAgICB9XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLl9lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRoaXMuX29uRGlkQ2hhbmdlID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZENoYW5nZSA9IHRoaXMuX29uRGlkQ2hhbmdlLmV2ZW50O1xuICAgICAgICB0aGlzLl9vbkRpZENoYW5nZUVuZCA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRDaGFuZ2VFbmQgPSB0aGlzLl9vbkRpZENoYW5nZUVuZC5ldmVudDtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyh0aGlzLl9vbkRpZENoYW5nZSwgdGhpcy5fb25EaWRDaGFuZ2VFbmQpO1xuICAgICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTmFtZSA9ICdkdi1yZXNpemUtY29udGFpbmVyJztcbiAgICAgICAgdGhpcy5faXNWaXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zZXR1cFJlc2l6ZSgndG9wJyk7XG4gICAgICAgIHRoaXMuc2V0dXBSZXNpemUoJ2JvdHRvbScpO1xuICAgICAgICB0aGlzLnNldHVwUmVzaXplKCdsZWZ0Jyk7XG4gICAgICAgIHRoaXMuc2V0dXBSZXNpemUoJ3JpZ2h0Jyk7XG4gICAgICAgIHRoaXMuc2V0dXBSZXNpemUoJ3RvcGxlZnQnKTtcbiAgICAgICAgdGhpcy5zZXR1cFJlc2l6ZSgndG9wcmlnaHQnKTtcbiAgICAgICAgdGhpcy5zZXR1cFJlc2l6ZSgnYm90dG9tbGVmdCcpO1xuICAgICAgICB0aGlzLnNldHVwUmVzaXplKCdib3R0b21yaWdodCcpO1xuICAgICAgICB0aGlzLl9lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMub3B0aW9ucy5jb250ZW50KTtcbiAgICAgICAgdGhpcy5vcHRpb25zLmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLl9lbGVtZW50KTtcbiAgICAgICAgLy8gaWYgaW5wdXQgYmFkIHJlc2l6ZSB3aXRoaW4gYWNjZXB0YWJsZSBib3VuZGFyaWVzXG4gICAgICAgIHRoaXMuc2V0Qm91bmRzKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBoZWlnaHQ6IHRoaXMub3B0aW9ucy5oZWlnaHQsIHdpZHRoOiB0aGlzLm9wdGlvbnMud2lkdGggfSwgKCd0b3AnIGluIHRoaXMub3B0aW9ucyAmJiB7IHRvcDogdGhpcy5vcHRpb25zLnRvcCB9KSksICgnYm90dG9tJyBpbiB0aGlzLm9wdGlvbnMgJiYgeyBib3R0b206IHRoaXMub3B0aW9ucy5ib3R0b20gfSkpLCAoJ2xlZnQnIGluIHRoaXMub3B0aW9ucyAmJiB7IGxlZnQ6IHRoaXMub3B0aW9ucy5sZWZ0IH0pKSwgKCdyaWdodCcgaW4gdGhpcy5vcHRpb25zICYmIHsgcmlnaHQ6IHRoaXMub3B0aW9ucy5yaWdodCB9KSkpO1xuICAgICAgICBhcmlhbExldmVsVHJhY2tlci5wdXNoKHRoaXMuX2VsZW1lbnQpO1xuICAgIH1cbiAgICBzZXRWaXNpYmxlKGlzVmlzaWJsZSkge1xuICAgICAgICBpZiAoaXNWaXNpYmxlID09PSB0aGlzLmlzVmlzaWJsZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2lzVmlzaWJsZSA9IGlzVmlzaWJsZTtcbiAgICAgICAgdG9nZ2xlQ2xhc3ModGhpcy5lbGVtZW50LCAnZHYtaGlkZGVuJywgIXRoaXMuaXNWaXNpYmxlKTtcbiAgICB9XG4gICAgYnJpbmdUb0Zyb250KCkge1xuICAgICAgICBhcmlhbExldmVsVHJhY2tlci5wdXNoKHRoaXMuX2VsZW1lbnQpO1xuICAgIH1cbiAgICBzZXRCb3VuZHMoYm91bmRzID0ge30pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBib3VuZHMuaGVpZ2h0ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5oZWlnaHQgPSBgJHtib3VuZHMuaGVpZ2h0fXB4YDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGJvdW5kcy53aWR0aCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUud2lkdGggPSBgJHtib3VuZHMud2lkdGh9cHhgO1xuICAgICAgICB9XG4gICAgICAgIGlmICgndG9wJyBpbiBib3VuZHMgJiYgdHlwZW9mIGJvdW5kcy50b3AgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnRvcCA9IGAke2JvdW5kcy50b3B9cHhgO1xuICAgICAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5ib3R0b20gPSAnYXV0byc7XG4gICAgICAgICAgICB0aGlzLnZlcnRpY2FsQWxpZ25tZW50ID0gJ3RvcCc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCdib3R0b20nIGluIGJvdW5kcyAmJiB0eXBlb2YgYm91bmRzLmJvdHRvbSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUuYm90dG9tID0gYCR7Ym91bmRzLmJvdHRvbX1weGA7XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnRvcCA9ICdhdXRvJztcbiAgICAgICAgICAgIHRoaXMudmVydGljYWxBbGlnbm1lbnQgPSAnYm90dG9tJztcbiAgICAgICAgfVxuICAgICAgICBpZiAoJ2xlZnQnIGluIGJvdW5kcyAmJiB0eXBlb2YgYm91bmRzLmxlZnQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLmxlZnQgPSBgJHtib3VuZHMubGVmdH1weGA7XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnJpZ2h0ID0gJ2F1dG8nO1xuICAgICAgICAgICAgdGhpcy5ob3JpemlvbnRhbEFsaWdubWVudCA9ICdsZWZ0JztcbiAgICAgICAgfVxuICAgICAgICBpZiAoJ3JpZ2h0JyBpbiBib3VuZHMgJiYgdHlwZW9mIGJvdW5kcy5yaWdodCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucmlnaHQgPSBgJHtib3VuZHMucmlnaHR9cHhgO1xuICAgICAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5sZWZ0ID0gJ2F1dG8nO1xuICAgICAgICAgICAgdGhpcy5ob3JpemlvbnRhbEFsaWdubWVudCA9ICdyaWdodCc7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29udGFpbmVyUmVjdCA9IHRoaXMub3B0aW9ucy5jb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGNvbnN0IG92ZXJsYXlSZWN0ID0gdGhpcy5fZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgLy8gcmVnaW9uOiBlbnN1cmUgYm91bmRzIHdpdGhpbiBhbGxvd2FibGUgbGltaXRzXG4gICAgICAgIC8vIGEgbWluaW11bSB3aWR0aCBvZiBtaW5pbXVtVmlld3BvcnRXaWR0aCBtdXN0IGJlIGluc2lkZSB0aGUgdmlld3BvcnRcbiAgICAgICAgY29uc3QgeE9mZnNldCA9IE1hdGgubWF4KDAsIHRoaXMuZ2V0TWluaW11bVdpZHRoKG92ZXJsYXlSZWN0LndpZHRoKSk7XG4gICAgICAgIC8vIGEgbWluaW11bSBoZWlnaHQgb2YgbWluaW11bVZpZXdwb3J0SGVpZ2h0IG11c3QgYmUgaW5zaWRlIHRoZSB2aWV3cG9ydFxuICAgICAgICBjb25zdCB5T2Zmc2V0ID0gTWF0aC5tYXgoMCwgdGhpcy5nZXRNaW5pbXVtSGVpZ2h0KG92ZXJsYXlSZWN0LmhlaWdodCkpO1xuICAgICAgICBpZiAodGhpcy52ZXJ0aWNhbEFsaWdubWVudCA9PT0gJ3RvcCcpIHtcbiAgICAgICAgICAgIGNvbnN0IHRvcCA9IGNsYW1wKG92ZXJsYXlSZWN0LnRvcCAtIGNvbnRhaW5lclJlY3QudG9wLCAteU9mZnNldCwgTWF0aC5tYXgoMCwgY29udGFpbmVyUmVjdC5oZWlnaHQgLSBvdmVybGF5UmVjdC5oZWlnaHQgKyB5T2Zmc2V0KSk7XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnRvcCA9IGAke3RvcH1weGA7XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLmJvdHRvbSA9ICdhdXRvJztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy52ZXJ0aWNhbEFsaWdubWVudCA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgICAgIGNvbnN0IGJvdHRvbSA9IGNsYW1wKGNvbnRhaW5lclJlY3QuYm90dG9tIC0gb3ZlcmxheVJlY3QuYm90dG9tLCAteU9mZnNldCwgTWF0aC5tYXgoMCwgY29udGFpbmVyUmVjdC5oZWlnaHQgLSBvdmVybGF5UmVjdC5oZWlnaHQgKyB5T2Zmc2V0KSk7XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLmJvdHRvbSA9IGAke2JvdHRvbX1weGA7XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnRvcCA9ICdhdXRvJztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5ob3JpemlvbnRhbEFsaWdubWVudCA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgICBjb25zdCBsZWZ0ID0gY2xhbXAob3ZlcmxheVJlY3QubGVmdCAtIGNvbnRhaW5lclJlY3QubGVmdCwgLXhPZmZzZXQsIE1hdGgubWF4KDAsIGNvbnRhaW5lclJlY3Qud2lkdGggLSBvdmVybGF5UmVjdC53aWR0aCArIHhPZmZzZXQpKTtcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUubGVmdCA9IGAke2xlZnR9cHhgO1xuICAgICAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5yaWdodCA9ICdhdXRvJztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5ob3JpemlvbnRhbEFsaWdubWVudCA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgICAgY29uc3QgcmlnaHQgPSBjbGFtcChjb250YWluZXJSZWN0LnJpZ2h0IC0gb3ZlcmxheVJlY3QucmlnaHQsIC14T2Zmc2V0LCBNYXRoLm1heCgwLCBjb250YWluZXJSZWN0LndpZHRoIC0gb3ZlcmxheVJlY3Qud2lkdGggKyB4T2Zmc2V0KSk7XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnJpZ2h0ID0gYCR7cmlnaHR9cHhgO1xuICAgICAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5sZWZ0ID0gJ2F1dG8nO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX29uRGlkQ2hhbmdlLmZpcmUoKTtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLm9wdGlvbnMuY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5fZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgICAgIGlmICh0aGlzLnZlcnRpY2FsQWxpZ25tZW50ID09PSAndG9wJykge1xuICAgICAgICAgICAgcmVzdWx0LnRvcCA9IHBhcnNlRmxvYXQodGhpcy5fZWxlbWVudC5zdHlsZS50b3ApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMudmVydGljYWxBbGlnbm1lbnQgPT09ICdib3R0b20nKSB7XG4gICAgICAgICAgICByZXN1bHQuYm90dG9tID0gcGFyc2VGbG9hdCh0aGlzLl9lbGVtZW50LnN0eWxlLmJvdHRvbSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQudG9wID0gZWxlbWVudC50b3AgLSBjb250YWluZXIudG9wO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmhvcml6aW9udGFsQWxpZ25tZW50ID09PSAnbGVmdCcpIHtcbiAgICAgICAgICAgIHJlc3VsdC5sZWZ0ID0gcGFyc2VGbG9hdCh0aGlzLl9lbGVtZW50LnN0eWxlLmxlZnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuaG9yaXppb250YWxBbGlnbm1lbnQgPT09ICdyaWdodCcpIHtcbiAgICAgICAgICAgIHJlc3VsdC5yaWdodCA9IHBhcnNlRmxvYXQodGhpcy5fZWxlbWVudC5zdHlsZS5yaWdodCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQubGVmdCA9IGVsZW1lbnQubGVmdCAtIGNvbnRhaW5lci5sZWZ0O1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdC53aWR0aCA9IGVsZW1lbnQud2lkdGg7XG4gICAgICAgIHJlc3VsdC5oZWlnaHQgPSBlbGVtZW50LmhlaWdodDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgc2V0dXBEcmFnKGRyYWdUYXJnZXQsIG9wdGlvbnMgPSB7IGluRHJhZ01vZGU6IGZhbHNlIH0pIHtcbiAgICAgICAgY29uc3QgbW92ZSA9IG5ldyBNdXRhYmxlRGlzcG9zYWJsZSgpO1xuICAgICAgICBjb25zdCB0cmFjayA9ICgpID0+IHtcbiAgICAgICAgICAgIGxldCBvZmZzZXQgPSBudWxsO1xuICAgICAgICAgICAgY29uc3QgaWZyYW1lcyA9IGRpc2FibGVJZnJhbWVQb2ludEV2ZW50cygpO1xuICAgICAgICAgICAgbW92ZS52YWx1ZSA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKHtcbiAgICAgICAgICAgICAgICBkaXNwb3NlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmcmFtZXMucmVsZWFzZSgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LCBhZGREaXNwb3NhYmxlV2luZG93TGlzdGVuZXIod2luZG93LCAncG9pbnRlcm1vdmUnLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lclJlY3QgPSB0aGlzLm9wdGlvbnMuY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHggPSBlLmNsaWVudFggLSBjb250YWluZXJSZWN0LmxlZnQ7XG4gICAgICAgICAgICAgICAgY29uc3QgeSA9IGUuY2xpZW50WSAtIGNvbnRhaW5lclJlY3QudG9wO1xuICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKHRoaXMuX2VsZW1lbnQsICdkdi1yZXNpemUtY29udGFpbmVyLWRyYWdnaW5nJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3ZlcmxheVJlY3QgPSB0aGlzLl9lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgICAgIGlmIChvZmZzZXQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgeDogZS5jbGllbnRYIC0gb3ZlcmxheVJlY3QubGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IGUuY2xpZW50WSAtIG92ZXJsYXlSZWN0LnRvcCxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgeE9mZnNldCA9IE1hdGgubWF4KDAsIHRoaXMuZ2V0TWluaW11bVdpZHRoKG92ZXJsYXlSZWN0LndpZHRoKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgeU9mZnNldCA9IE1hdGgubWF4KDAsIHRoaXMuZ2V0TWluaW11bUhlaWdodChvdmVybGF5UmVjdC5oZWlnaHQpKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0b3AgPSBjbGFtcCh5IC0gb2Zmc2V0LnksIC15T2Zmc2V0LCBNYXRoLm1heCgwLCBjb250YWluZXJSZWN0LmhlaWdodCAtIG92ZXJsYXlSZWN0LmhlaWdodCArIHlPZmZzZXQpKTtcbiAgICAgICAgICAgICAgICBjb25zdCBib3R0b20gPSBjbGFtcChvZmZzZXQueSAtXG4gICAgICAgICAgICAgICAgICAgIHkgK1xuICAgICAgICAgICAgICAgICAgICBjb250YWluZXJSZWN0LmhlaWdodCAtXG4gICAgICAgICAgICAgICAgICAgIG92ZXJsYXlSZWN0LmhlaWdodCwgLXlPZmZzZXQsIE1hdGgubWF4KDAsIGNvbnRhaW5lclJlY3QuaGVpZ2h0IC0gb3ZlcmxheVJlY3QuaGVpZ2h0ICsgeU9mZnNldCkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxlZnQgPSBjbGFtcCh4IC0gb2Zmc2V0LngsIC14T2Zmc2V0LCBNYXRoLm1heCgwLCBjb250YWluZXJSZWN0LndpZHRoIC0gb3ZlcmxheVJlY3Qud2lkdGggKyB4T2Zmc2V0KSk7XG4gICAgICAgICAgICAgICAgY29uc3QgcmlnaHQgPSBjbGFtcChvZmZzZXQueCAtIHggKyBjb250YWluZXJSZWN0LndpZHRoIC0gb3ZlcmxheVJlY3Qud2lkdGgsIC14T2Zmc2V0LCBNYXRoLm1heCgwLCBjb250YWluZXJSZWN0LndpZHRoIC0gb3ZlcmxheVJlY3Qud2lkdGggKyB4T2Zmc2V0KSk7XG4gICAgICAgICAgICAgICAgY29uc3QgYm91bmRzID0ge307XG4gICAgICAgICAgICAgICAgLy8gQW5jaG9yIHRvIHRvcCBvciB0byBib3R0b20gZGVwZW5kaW5nIG9uIHdoaWNoIG9uZSBpcyBjbG9zZXJcbiAgICAgICAgICAgICAgICBpZiAodG9wIDw9IGJvdHRvbSkge1xuICAgICAgICAgICAgICAgICAgICBib3VuZHMudG9wID0gdG9wO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYm91bmRzLmJvdHRvbSA9IGJvdHRvbTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gQW5jaG9yIHRvIGxlZnQgb3IgdG8gcmlnaHQgZGVwZW5kaW5nIG9uIHdoaWNoIG9uZSBpcyBjbG9zZXJcbiAgICAgICAgICAgICAgICBpZiAobGVmdCA8PSByaWdodCkge1xuICAgICAgICAgICAgICAgICAgICBib3VuZHMubGVmdCA9IGxlZnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBib3VuZHMucmlnaHQgPSByaWdodDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRCb3VuZHMoYm91bmRzKTtcbiAgICAgICAgICAgIH0pLCBhZGREaXNwb3NhYmxlV2luZG93TGlzdGVuZXIod2luZG93LCAncG9pbnRlcnVwJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKHRoaXMuX2VsZW1lbnQsICdkdi1yZXNpemUtY29udGFpbmVyLWRyYWdnaW5nJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgIG1vdmUuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX29uRGlkQ2hhbmdlRW5kLmZpcmUoKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyhtb3ZlLCBhZGREaXNwb3NhYmxlTGlzdGVuZXIoZHJhZ1RhcmdldCwgJ3BvaW50ZXJkb3duJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgc29tZWJvZHkgaGFzIG1hcmtlZCB0aGlzIGV2ZW50IHRoZW4gdHJlYXQgYXMgYSBkZWZhdWx0UHJldmVudGVkXG4gICAgICAgICAgICAvLyB3aXRob3V0IGFjdHVhbGx5IGNhbGxpbmcgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICAgICAgaWYgKHF1YXNpRGVmYXVsdFByZXZlbnRlZChldmVudCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cmFjaygpO1xuICAgICAgICB9KSwgYWRkRGlzcG9zYWJsZUxpc3RlbmVyKHRoaXMub3B0aW9ucy5jb250ZW50LCAncG9pbnRlcmRvd24nLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgc29tZWJvZHkgaGFzIG1hcmtlZCB0aGlzIGV2ZW50IHRoZW4gdHJlYXQgYXMgYSBkZWZhdWx0UHJldmVudGVkXG4gICAgICAgICAgICAvLyB3aXRob3V0IGFjdHVhbGx5IGNhbGxpbmcgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICAgICAgaWYgKHF1YXNpRGVmYXVsdFByZXZlbnRlZChldmVudCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXZlbnQuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgICAgICB0cmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSwgYWRkRGlzcG9zYWJsZUxpc3RlbmVyKHRoaXMub3B0aW9ucy5jb250ZW50LCAncG9pbnRlcmRvd24nLCAoKSA9PiB7XG4gICAgICAgICAgICBhcmlhbExldmVsVHJhY2tlci5wdXNoKHRoaXMuX2VsZW1lbnQpO1xuICAgICAgICB9LCB0cnVlKSk7XG4gICAgICAgIGlmIChvcHRpb25zLmluRHJhZ01vZGUpIHtcbiAgICAgICAgICAgIHRyYWNrKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2V0dXBSZXNpemUoZGlyZWN0aW9uKSB7XG4gICAgICAgIGNvbnN0IHJlc2l6ZUhhbmRsZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgcmVzaXplSGFuZGxlRWxlbWVudC5jbGFzc05hbWUgPSBgZHYtcmVzaXplLWhhbmRsZS0ke2RpcmVjdGlvbn1gO1xuICAgICAgICB0aGlzLl9lbGVtZW50LmFwcGVuZENoaWxkKHJlc2l6ZUhhbmRsZUVsZW1lbnQpO1xuICAgICAgICBjb25zdCBtb3ZlID0gbmV3IE11dGFibGVEaXNwb3NhYmxlKCk7XG4gICAgICAgIHRoaXMuYWRkRGlzcG9zYWJsZXMobW92ZSwgYWRkRGlzcG9zYWJsZUxpc3RlbmVyKHJlc2l6ZUhhbmRsZUVsZW1lbnQsICdwb2ludGVyZG93bicsIChlKSA9PiB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBsZXQgc3RhcnRQb3NpdGlvbiA9IG51bGw7XG4gICAgICAgICAgICBjb25zdCBpZnJhbWVzID0gZGlzYWJsZUlmcmFtZVBvaW50RXZlbnRzKCk7XG4gICAgICAgICAgICBtb3ZlLnZhbHVlID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoYWRkRGlzcG9zYWJsZVdpbmRvd0xpc3RlbmVyKHdpbmRvdywgJ3BvaW50ZXJtb3ZlJywgKGUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb250YWluZXJSZWN0ID0gdGhpcy5vcHRpb25zLmNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBvdmVybGF5UmVjdCA9IHRoaXMuX2VsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgeSA9IGUuY2xpZW50WSAtIGNvbnRhaW5lclJlY3QudG9wO1xuICAgICAgICAgICAgICAgIGNvbnN0IHggPSBlLmNsaWVudFggLSBjb250YWluZXJSZWN0LmxlZnQ7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0UG9zaXRpb24gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVjb3JkIHRoZSBpbml0aWFsIGRpbWVuc2lvbnMgc2luY2UgYXMgYWxsIHN1YnNlcXVlbmNlIG1vdmVzIGFyZSByZWxhdGl2ZSB0byB0aGlzXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0UG9zaXRpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbFk6IHksXG4gICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbEhlaWdodDogb3ZlcmxheVJlY3QuaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxYOiB4LFxuICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxXaWR0aDogb3ZlcmxheVJlY3Qud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCB0b3AgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgbGV0IGJvdHRvbSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBsZXQgaGVpZ2h0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGxldCBsZWZ0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGxldCByaWdodCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBsZXQgd2lkdGggPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgY29uc3QgbW92ZVRvcCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdG9wID0gY2xhbXAoeSwgLU51bWJlci5NQVhfVkFMVUUsIHN0YXJ0UG9zaXRpb24ub3JpZ2luYWxZICtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0UG9zaXRpb24ub3JpZ2luYWxIZWlnaHQgPlxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyUmVjdC5oZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5nZXRNaW5pbXVtSGVpZ2h0KGNvbnRhaW5lclJlY3QuaGVpZ2h0KVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBNYXRoLm1heCgwLCBzdGFydFBvc2l0aW9uLm9yaWdpbmFsWSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRQb3NpdGlvbi5vcmlnaW5hbEhlaWdodCAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgT3ZlcmxheS5NSU5JTVVNX0hFSUdIVCkpO1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRQb3NpdGlvbi5vcmlnaW5hbFkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0UG9zaXRpb24ub3JpZ2luYWxIZWlnaHQgLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDtcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tID0gY29udGFpbmVyUmVjdC5oZWlnaHQgLSB0b3AgLSBoZWlnaHQ7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCBtb3ZlQm90dG9tID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0b3AgPVxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRQb3NpdGlvbi5vcmlnaW5hbFkgLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0UG9zaXRpb24ub3JpZ2luYWxIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGNsYW1wKHkgLSB0b3AsIHRvcCA8IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiB0aGlzLm9wdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWluaW11bUluVmlld3BvcnRIZWlnaHQgPT09ICdudW1iZXInXG4gICAgICAgICAgICAgICAgICAgICAgICA/IC10b3AgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5taW5pbXVtSW5WaWV3cG9ydEhlaWdodFxuICAgICAgICAgICAgICAgICAgICAgICAgOiBPdmVybGF5Lk1JTklNVU1fSEVJR0hULCBOdW1iZXIuTUFYX1ZBTFVFKTtcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tID0gY29udGFpbmVyUmVjdC5oZWlnaHQgLSB0b3AgLSBoZWlnaHQ7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCBtb3ZlTGVmdCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGVmdCA9IGNsYW1wKHgsIC1OdW1iZXIuTUFYX1ZBTFVFLCBzdGFydFBvc2l0aW9uLm9yaWdpbmFsWCArXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydFBvc2l0aW9uLm9yaWdpbmFsV2lkdGggPlxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyUmVjdC53aWR0aFxuICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLmdldE1pbmltdW1XaWR0aChjb250YWluZXJSZWN0LndpZHRoKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBNYXRoLm1heCgwLCBzdGFydFBvc2l0aW9uLm9yaWdpbmFsWCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRQb3NpdGlvbi5vcmlnaW5hbFdpZHRoIC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBPdmVybGF5Lk1JTklNVU1fV0lEVEgpKTtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggPVxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRQb3NpdGlvbi5vcmlnaW5hbFggK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0UG9zaXRpb24ub3JpZ2luYWxXaWR0aCAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDtcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQgPSBjb250YWluZXJSZWN0LndpZHRoIC0gbGVmdCAtIHdpZHRoO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY29uc3QgbW92ZVJpZ2h0ID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZWZ0ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0UG9zaXRpb24ub3JpZ2luYWxYIC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydFBvc2l0aW9uLm9yaWdpbmFsV2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoID0gY2xhbXAoeCAtIGxlZnQsIGxlZnQgPCAwICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgdGhpcy5vcHRpb25zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1pbmltdW1JblZpZXdwb3J0V2lkdGggPT09ICdudW1iZXInXG4gICAgICAgICAgICAgICAgICAgICAgICA/IC1sZWZ0ICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMubWluaW11bUluVmlld3BvcnRXaWR0aFxuICAgICAgICAgICAgICAgICAgICAgICAgOiBPdmVybGF5Lk1JTklNVU1fV0lEVEgsIE51bWJlci5NQVhfVkFMVUUpO1xuICAgICAgICAgICAgICAgICAgICByaWdodCA9IGNvbnRhaW5lclJlY3Qud2lkdGggLSBsZWZ0IC0gd2lkdGg7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGRpcmVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd0b3AnOlxuICAgICAgICAgICAgICAgICAgICAgICAgbW92ZVRvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBtb3ZlQm90dG9tKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBtb3ZlTGVmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vdmVSaWdodCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RvcGxlZnQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgbW92ZVRvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbW92ZUxlZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd0b3ByaWdodCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBtb3ZlVG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb3ZlUmlnaHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdib3R0b21sZWZ0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vdmVCb3R0b20oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vdmVMZWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm90dG9tcmlnaHQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgbW92ZUJvdHRvbSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbW92ZVJpZ2h0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgYm91bmRzID0ge307XG4gICAgICAgICAgICAgICAgLy8gQW5jaG9yIHRvIHRvcCBvciB0byBib3R0b20gZGVwZW5kaW5nIG9uIHdoaWNoIG9uZSBpcyBjbG9zZXJcbiAgICAgICAgICAgICAgICBpZiAodG9wIDw9IGJvdHRvbSkge1xuICAgICAgICAgICAgICAgICAgICBib3VuZHMudG9wID0gdG9wO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYm91bmRzLmJvdHRvbSA9IGJvdHRvbTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gQW5jaG9yIHRvIGxlZnQgb3IgdG8gcmlnaHQgZGVwZW5kaW5nIG9uIHdoaWNoIG9uZSBpcyBjbG9zZXJcbiAgICAgICAgICAgICAgICBpZiAobGVmdCA8PSByaWdodCkge1xuICAgICAgICAgICAgICAgICAgICBib3VuZHMubGVmdCA9IGxlZnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBib3VuZHMucmlnaHQgPSByaWdodDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYm91bmRzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgICAgICAgICBib3VuZHMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEJvdW5kcyhib3VuZHMpO1xuICAgICAgICAgICAgfSksIHtcbiAgICAgICAgICAgICAgICBkaXNwb3NlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmcmFtZXMucmVsZWFzZSgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LCBhZGREaXNwb3NhYmxlV2luZG93TGlzdGVuZXIod2luZG93LCAncG9pbnRlcnVwJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIG1vdmUuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX29uRGlkQ2hhbmdlRW5kLmZpcmUoKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBnZXRNaW5pbXVtV2lkdGgod2lkdGgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMubWluaW11bUluVmlld3BvcnRXaWR0aCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHJldHVybiB3aWR0aCAtIHRoaXMub3B0aW9ucy5taW5pbXVtSW5WaWV3cG9ydFdpZHRoO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBnZXRNaW5pbXVtSGVpZ2h0KGhlaWdodCkge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5taW5pbXVtSW5WaWV3cG9ydEhlaWdodCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHJldHVybiBoZWlnaHQgLSB0aGlzLm9wdGlvbnMubWluaW11bUluVmlld3BvcnRIZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIGFyaWFsTGV2ZWxUcmFja2VyLmRlc3Ryb3kodGhpcy5fZWxlbWVudCk7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgIHN1cGVyLmRpc3Bvc2UoKTtcbiAgICB9XG59XG5PdmVybGF5Lk1JTklNVU1fSEVJR0hUID0gMjA7XG5PdmVybGF5Lk1JTklNVU1fV0lEVEggPSAyMDtcbiIsImltcG9ydCB7IERyYWdBbmREcm9wT2JzZXJ2ZXIgfSBmcm9tICcuLi9kbmQvZG5kJztcbmltcG9ydCB7IGdldERvbU5vZGVQYWdlUG9zaXRpb24sIHRvZ2dsZUNsYXNzIH0gZnJvbSAnLi4vZG9tJztcbmltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUsIERpc3Bvc2FibGUsIE11dGFibGVEaXNwb3NhYmxlLCB9IGZyb20gJy4uL2xpZmVjeWNsZSc7XG5mdW5jdGlvbiBjcmVhdGVGb2N1c2FibGVFbGVtZW50KCkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBlbGVtZW50LnRhYkluZGV4ID0gLTE7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG59XG5leHBvcnQgY2xhc3MgT3ZlcmxheVJlbmRlckNvbnRhaW5lciBleHRlbmRzIENvbXBvc2l0ZURpc3Bvc2FibGUge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGFjY2Vzc29yKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIHRoaXMuYWNjZXNzb3IgPSBhY2Nlc3NvcjtcbiAgICAgICAgdGhpcy5tYXAgPSB7fTtcbiAgICAgICAgdGhpcy5fZGlzcG9zZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyhEaXNwb3NhYmxlLmZyb20oKCkgPT4ge1xuICAgICAgICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiBPYmplY3QudmFsdWVzKHRoaXMubWFwKSkge1xuICAgICAgICAgICAgICAgIHZhbHVlLmRpc3Bvc2FibGUuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIHZhbHVlLmRlc3Ryb3kuZGlzcG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fZGlzcG9zZWQgPSB0cnVlO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGRldGF0Y2gocGFuZWwpIHtcbiAgICAgICAgaWYgKHRoaXMubWFwW3BhbmVsLmFwaS5pZF0pIHtcbiAgICAgICAgICAgIGNvbnN0IHsgZGlzcG9zYWJsZSwgZGVzdHJveSB9ID0gdGhpcy5tYXBbcGFuZWwuYXBpLmlkXTtcbiAgICAgICAgICAgIGRpc3Bvc2FibGUuZGlzcG9zZSgpO1xuICAgICAgICAgICAgZGVzdHJveS5kaXNwb3NlKCk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5tYXBbcGFuZWwuYXBpLmlkXTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgYXR0YWNoKG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBwYW5lbCwgcmVmZXJlbmNlQ29udGFpbmVyIH0gPSBvcHRpb25zO1xuICAgICAgICBpZiAoIXRoaXMubWFwW3BhbmVsLmFwaS5pZF0pIHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBjcmVhdGVGb2N1c2FibGVFbGVtZW50KCk7XG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9ICdkdi1yZW5kZXItb3ZlcmxheSc7XG4gICAgICAgICAgICB0aGlzLm1hcFtwYW5lbC5hcGkuaWRdID0ge1xuICAgICAgICAgICAgICAgIHBhbmVsLFxuICAgICAgICAgICAgICAgIGRpc3Bvc2FibGU6IERpc3Bvc2FibGUuTk9ORSxcbiAgICAgICAgICAgICAgICBkZXN0cm95OiBEaXNwb3NhYmxlLk5PTkUsXG4gICAgICAgICAgICAgICAgZWxlbWVudCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZm9jdXNDb250YWluZXIgPSB0aGlzLm1hcFtwYW5lbC5hcGkuaWRdLmVsZW1lbnQ7XG4gICAgICAgIGlmIChwYW5lbC52aWV3LmNvbnRlbnQuZWxlbWVudC5wYXJlbnRFbGVtZW50ICE9PSBmb2N1c0NvbnRhaW5lcikge1xuICAgICAgICAgICAgZm9jdXNDb250YWluZXIuYXBwZW5kQ2hpbGQocGFuZWwudmlldy5jb250ZW50LmVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb2N1c0NvbnRhaW5lci5wYXJlbnRFbGVtZW50ICE9PSB0aGlzLmVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZChmb2N1c0NvbnRhaW5lcik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzaXplID0gKCkgPT4ge1xuICAgICAgICAgICAgLy8gVE9ETyBwcm9wYWdhdGUgcG9zaXRpb24gdG8gYXZvaWQgZ2V0RG9tTm9kZVBhZ2VQb3NpdGlvbiBjYWxscywgcG9zc2libGUgcGVyZm9ybWFuY2UgYm90dGxlbmVjaz9cbiAgICAgICAgICAgIGNvbnN0IGJveCA9IGdldERvbU5vZGVQYWdlUG9zaXRpb24ocmVmZXJlbmNlQ29udGFpbmVyLmVsZW1lbnQpO1xuICAgICAgICAgICAgY29uc3QgYm94MiA9IGdldERvbU5vZGVQYWdlUG9zaXRpb24odGhpcy5lbGVtZW50KTtcbiAgICAgICAgICAgIGZvY3VzQ29udGFpbmVyLnN0eWxlLmxlZnQgPSBgJHtib3gubGVmdCAtIGJveDIubGVmdH1weGA7XG4gICAgICAgICAgICBmb2N1c0NvbnRhaW5lci5zdHlsZS50b3AgPSBgJHtib3gudG9wIC0gYm94Mi50b3B9cHhgO1xuICAgICAgICAgICAgZm9jdXNDb250YWluZXIuc3R5bGUud2lkdGggPSBgJHtib3gud2lkdGh9cHhgO1xuICAgICAgICAgICAgZm9jdXNDb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gYCR7Ym94LmhlaWdodH1weGA7XG4gICAgICAgICAgICB0b2dnbGVDbGFzcyhmb2N1c0NvbnRhaW5lciwgJ2R2LXJlbmRlci1vdmVybGF5LWZsb2F0JywgcGFuZWwuZ3JvdXAuYXBpLmxvY2F0aW9uLnR5cGUgPT09ICdmbG9hdGluZycpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCB2aXNpYmlsaXR5Q2hhbmdlZCA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmIChwYW5lbC5hcGkuaXNWaXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgcmVzaXplKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb2N1c0NvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gcGFuZWwuYXBpLmlzVmlzaWJsZSA/ICcnIDogJ25vbmUnO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBvYnNlcnZlckRpc3Bvc2FibGUgPSBuZXcgTXV0YWJsZURpc3Bvc2FibGUoKTtcbiAgICAgICAgY29uc3QgY29ycmVjdExheWVyUG9zaXRpb24gPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAocGFuZWwuYXBpLmxvY2F0aW9uLnR5cGUgPT09ICdmbG9hdGluZycpIHtcbiAgICAgICAgICAgICAgICBxdWV1ZU1pY3JvdGFzaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZsb2F0aW5nR3JvdXAgPSB0aGlzLmFjY2Vzc29yLmZsb2F0aW5nR3JvdXBzLmZpbmQoKGdyb3VwKSA9PiBncm91cC5ncm91cCA9PT0gcGFuZWwuYXBpLmdyb3VwKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFmbG9hdGluZ0dyb3VwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGZsb2F0aW5nR3JvdXAub3ZlcmxheS5lbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB1cGRhdGUgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsZXZlbCA9IE51bWJlcihlbGVtZW50LmdldEF0dHJpYnV0ZSgnYXJpYS1sZXZlbCcpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvY3VzQ29udGFpbmVyLnN0eWxlLnpJbmRleCA9IGBjYWxjKHZhcigtLWR2LW92ZXJsYXktei1pbmRleCwgOTk5KSArICR7bGV2ZWwgKiAyICsgMX0pYDtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyRGlzcG9zYWJsZS52YWx1ZSA9IERpc3Bvc2FibGUuZnJvbSgoKSA9PiBvYnNlcnZlci5kaXNjb25uZWN0KCkpO1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5vYnNlcnZlKGVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZUZpbHRlcjogWydhcmlhLWxldmVsJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb2N1c0NvbnRhaW5lci5zdHlsZS56SW5kZXggPSAnJzsgLy8gcmVzZXQgdGhlIHotaW5kZXgsIHBlcmhhcHMgQ1NTIHdpbGwgdGFrZSBvdmVyIGhlcmVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZGlzcG9zYWJsZSA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKG9ic2VydmVyRGlzcG9zYWJsZSwgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzaW5jZSBjb250YWluZXIgaXMgcG9zaXRpb25lZCBhYnNvdXRlbHkgd2UgbXVzdCBleHBsaWNpdGx5IGZvcndhcmRcbiAgICAgICAgICogdGhlIGRuZCBldmVudHMgZm9yIHRoZSBleHBlY3QgYmVoYXZpb3VycyB0byBjb250aW51ZSB0byBvY2N1ciBpbiB0ZXJtcyBvZiBkbmRcbiAgICAgICAgICpcbiAgICAgICAgICogdGhlIGRuZCBvYnNlcnZlciBkb2VzIG5vdCBuZWVkIHRvIGJlIGNvbmRpdGlvbmFsIG9uIHdoZXRoZXIgdGhlIHBhbmVsIGlzIHZpc2libGUgc2luY2VcbiAgICAgICAgICogbm9uLXZpc2libGUgcGFuZWxzIGFyZSAnZGlzcGxheTogbm9uZScgYW5kIGluIHN1Y2ggY2FzZSB0aGUgZG5kIG9ic2VydmVyIHdpbGwgbm90IGZpcmUuXG4gICAgICAgICAqL1xuICAgICAgICBuZXcgRHJhZ0FuZERyb3BPYnNlcnZlcihmb2N1c0NvbnRhaW5lciwge1xuICAgICAgICAgICAgb25EcmFnRW5kOiAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIHJlZmVyZW5jZUNvbnRhaW5lci5kcm9wVGFyZ2V0LmRuZC5vbkRyYWdFbmQoZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25EcmFnRW50ZXI6IChlKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVmZXJlbmNlQ29udGFpbmVyLmRyb3BUYXJnZXQuZG5kLm9uRHJhZ0VudGVyKGUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uRHJhZ0xlYXZlOiAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIHJlZmVyZW5jZUNvbnRhaW5lci5kcm9wVGFyZ2V0LmRuZC5vbkRyYWdMZWF2ZShlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkRyb3A6IChlKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVmZXJlbmNlQ29udGFpbmVyLmRyb3BUYXJnZXQuZG5kLm9uRHJvcChlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkRyYWdPdmVyOiAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIHJlZmVyZW5jZUNvbnRhaW5lci5kcm9wVGFyZ2V0LmRuZC5vbkRyYWdPdmVyKGUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSksIHBhbmVsLmFwaS5vbkRpZFZpc2liaWxpdHlDaGFuZ2UoKCkgPT4ge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDb250cm9sIHRoZSB2aXNpYmlsaXR5IG9mIHRoZSBjb250ZW50LCBob3dldmVyIGV2ZW4gd2hlbiBub3QgdmlzaWJsZSAoZGlzcGxheTogbm9uZSlcbiAgICAgICAgICAgICAqIHRoZSBjb250ZW50IGlzIHN0aWxsIG1haW50YWluZWQgd2l0aGluIHRoZSBET00gaGVuY2UgRE9NIHNwZWNpZmljIGF0dHJpYnV0ZXNcbiAgICAgICAgICAgICAqIHN1Y2ggYXMgc2Nyb2xsIHBvc2l0aW9uIGFyZSBtYWludGFpbmVkIHdoZW4gbmV4dCBtYWRlIHZpc2libGUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZpc2liaWxpdHlDaGFuZ2VkKCk7XG4gICAgICAgIH0pLCBwYW5lbC5hcGkub25EaWREaW1lbnNpb25zQ2hhbmdlKCgpID0+IHtcbiAgICAgICAgICAgIGlmICghcGFuZWwuYXBpLmlzVmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc2l6ZSgpO1xuICAgICAgICB9KSwgcGFuZWwuYXBpLm9uRGlkTG9jYXRpb25DaGFuZ2UoKCkgPT4ge1xuICAgICAgICAgICAgY29ycmVjdExheWVyUG9zaXRpb24oKTtcbiAgICAgICAgfSkpO1xuICAgICAgICB0aGlzLm1hcFtwYW5lbC5hcGkuaWRdLmRlc3Ryb3kgPSBEaXNwb3NhYmxlLmZyb20oKCkgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgaWYgKHBhbmVsLnZpZXcuY29udGVudC5lbGVtZW50LnBhcmVudEVsZW1lbnQgPT09IGZvY3VzQ29udGFpbmVyKSB7XG4gICAgICAgICAgICAgICAgZm9jdXNDb250YWluZXIucmVtb3ZlQ2hpbGQocGFuZWwudmlldy5jb250ZW50LmVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKF9hID0gZm9jdXNDb250YWluZXIucGFyZW50RWxlbWVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnJlbW92ZUNoaWxkKGZvY3VzQ29udGFpbmVyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvcnJlY3RMYXllclBvc2l0aW9uKCk7XG4gICAgICAgIHF1ZXVlTWljcm90YXNrKCgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzRGlzcG9zZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIHdhaXQgdW50aWwgZXZlcnl0aGluZyBoYXMgZmluaXNoZWQgaW4gdGhlIGN1cnJlbnQgc3RhY2stZnJhbWUgY2FsbCBiZWZvcmVcbiAgICAgICAgICAgICAqIGNhbGxpbmcgdGhlIGZpcnN0IHJlc2l6ZSBhcyBvdGhlciBzaXplLWFsdGVyaW5nIGV2ZW50cyBtYXkgc3RpbGwgb2NjdXIgYmVmb3JlXG4gICAgICAgICAgICAgKiB0aGUgZW5kIG9mIHRoZSBzdGFjay1mcmFtZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmlzaWJpbGl0eUNoYW5nZWQoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGRpc3Bvc2Ugb2YgbG9naWMgYXNvY2NjaWF0ZWQgd2l0aCBwcmV2aW91cyByZWZlcmVuY2UtY29udGFpbmVyXG4gICAgICAgIHRoaXMubWFwW3BhbmVsLmFwaS5pZF0uZGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gICAgICAgIC8vIGFuZCByZXNldCB0aGUgZGlzcG9zYWJsZSB0byB0aGUgYWN0aXZlIHJlZmVyZW5jZS1jb250YWluZXJcbiAgICAgICAgdGhpcy5tYXBbcGFuZWwuYXBpLmlkXS5kaXNwb3NhYmxlID0gZGlzcG9zYWJsZTtcbiAgICAgICAgcmV0dXJuIGZvY3VzQ29udGFpbmVyO1xuICAgIH1cbn1cbiIsImV4cG9ydCB7fTtcbiIsImltcG9ydCB7IGFkZERpc3Bvc2FibGVMaXN0ZW5lciB9IGZyb20gJy4uL2V2ZW50cyc7XG5pbXBvcnQgeyBDb21wb3NpdGVEaXNwb3NhYmxlLCBNdXRhYmxlRGlzcG9zYWJsZSB9IGZyb20gJy4uL2xpZmVjeWNsZSc7XG5pbXBvcnQgeyB0b2dnbGVDbGFzcyB9IGZyb20gJy4uL2RvbSc7XG5pbXBvcnQgeyBjcmVhdGVDaGV2cm9uUmlnaHRCdXR0b24sIGNyZWF0ZUV4cGFuZE1vcmVCdXR0b24gfSBmcm9tICcuLi9zdmcnO1xuZXhwb3J0IGNsYXNzIERlZmF1bHRIZWFkZXIgZXh0ZW5kcyBDb21wb3NpdGVEaXNwb3NhYmxlIHtcbiAgICBnZXQgZWxlbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl9leHBhbmRlZEljb24gPSBjcmVhdGVFeHBhbmRNb3JlQnV0dG9uKCk7XG4gICAgICAgIHRoaXMuX2NvbGxhcHNlZEljb24gPSBjcmVhdGVDaGV2cm9uUmlnaHRCdXR0b24oKTtcbiAgICAgICAgdGhpcy5kaXNwb3NhYmxlID0gbmV3IE11dGFibGVEaXNwb3NhYmxlKCk7XG4gICAgICAgIHRoaXMuYXBpUmVmID0ge1xuICAgICAgICAgICAgYXBpOiBudWxsLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc05hbWUgPSAnZHYtZGVmYXVsdC1oZWFkZXInO1xuICAgICAgICB0aGlzLl9jb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICB0aGlzLl9leHBhbmRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0aGlzLl9leHBhbmRlci5jbGFzc05hbWUgPSAnZHYtcGFuZS1oZWFkZXItaWNvbic7XG4gICAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLl9leHBhbmRlcik7XG4gICAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLl9jb250ZW50KTtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyhhZGREaXNwb3NhYmxlTGlzdGVuZXIodGhpcy5fZWxlbWVudCwgJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgKF9hID0gdGhpcy5hcGlSZWYuYXBpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0RXhwYW5kZWQoIXRoaXMuYXBpUmVmLmFwaS5pc0V4cGFuZGVkKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBpbml0KHBhcmFtcykge1xuICAgICAgICB0aGlzLmFwaVJlZi5hcGkgPSBwYXJhbXMuYXBpO1xuICAgICAgICB0aGlzLl9jb250ZW50LnRleHRDb250ZW50ID0gcGFyYW1zLnRpdGxlO1xuICAgICAgICB0aGlzLnVwZGF0ZUljb24oKTtcbiAgICAgICAgdGhpcy5kaXNwb3NhYmxlLnZhbHVlID0gcGFyYW1zLmFwaS5vbkRpZEV4cGFuc2lvbkNoYW5nZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUljb24oKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHVwZGF0ZUljb24oKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgaXNFeHBhbmRlZCA9ICEhKChfYSA9IHRoaXMuYXBpUmVmLmFwaSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmlzRXhwYW5kZWQpO1xuICAgICAgICB0b2dnbGVDbGFzcyh0aGlzLl9leHBhbmRlciwgJ2NvbGxhcHNlZCcsICFpc0V4cGFuZGVkKTtcbiAgICAgICAgaWYgKGlzRXhwYW5kZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9leHBhbmRlci5jb250YWlucyh0aGlzLl9jb2xsYXBzZWRJY29uKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NvbGxhcHNlZEljb24ucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2V4cGFuZGVyLmNvbnRhaW5zKHRoaXMuX2V4cGFuZGVkSWNvbikpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9leHBhbmRlci5hcHBlbmRDaGlsZCh0aGlzLl9leHBhbmRlZEljb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2V4cGFuZGVyLmNvbnRhaW5zKHRoaXMuX2V4cGFuZGVkSWNvbikpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9leHBhbmRlZEljb24ucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2V4cGFuZGVyLmNvbnRhaW5zKHRoaXMuX2NvbGxhcHNlZEljb24pKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXhwYW5kZXIuYXBwZW5kQ2hpbGQodGhpcy5fY29sbGFwc2VkSWNvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlKF9wYXJhbXMpIHtcbiAgICAgICAgLy9cbiAgICB9XG4gICAgZGlzcG9zZSgpIHtcbiAgICAgICAgdGhpcy5kaXNwb3NhYmxlLmRpc3Bvc2UoKTtcbiAgICAgICAgc3VwZXIuZGlzcG9zZSgpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFBhbmV2aWV3QXBpIH0gZnJvbSAnLi4vYXBpL2NvbXBvbmVudC5hcGknO1xuaW1wb3J0IHsgRHJhZ0hhbmRsZXIgfSBmcm9tICcuLi9kbmQvYWJzdHJhY3REcmFnSGFuZGxlcic7XG5pbXBvcnQgeyBnZXRQYW5lRGF0YSwgTG9jYWxTZWxlY3Rpb25UcmFuc2ZlciwgUGFuZVRyYW5zZmVyLCB9IGZyb20gJy4uL2RuZC9kYXRhVHJhbnNmZXInO1xuaW1wb3J0IHsgRHJvcHRhcmdldCB9IGZyb20gJy4uL2RuZC9kcm9wdGFyZ2V0JztcbmltcG9ydCB7IEVtaXR0ZXIgfSBmcm9tICcuLi9ldmVudHMnO1xuaW1wb3J0IHsgUGFuZXZpZXdVbmhhbmRsZWREcmFnT3ZlckV2ZW50LCB9IGZyb20gJy4vb3B0aW9ucyc7XG5pbXBvcnQgeyBQYW5ldmlld1BhbmVsLCB9IGZyb20gJy4vcGFuZXZpZXdQYW5lbCc7XG5leHBvcnQgY2xhc3MgRHJhZ2dhYmxlUGFuZXZpZXdQYW5lbCBleHRlbmRzIFBhbmV2aWV3UGFuZWwge1xuICAgIGNvbnN0cnVjdG9yKGFjY2Vzc29yLCBpZCwgY29tcG9uZW50LCBoZWFkZXJDb21wb25lbnQsIG9yaWVudGF0aW9uLCBpc0V4cGFuZGVkLCBkaXNhYmxlRG5kKSB7XG4gICAgICAgIHN1cGVyKGlkLCBjb21wb25lbnQsIGhlYWRlckNvbXBvbmVudCwgb3JpZW50YXRpb24sIGlzRXhwYW5kZWQsIHRydWUpO1xuICAgICAgICB0aGlzLmFjY2Vzc29yID0gYWNjZXNzb3I7XG4gICAgICAgIHRoaXMuX29uRGlkRHJvcCA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWREcm9wID0gdGhpcy5fb25EaWREcm9wLmV2ZW50O1xuICAgICAgICB0aGlzLl9vblVuaGFuZGxlZERyYWdPdmVyRXZlbnQgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uVW5oYW5kbGVkRHJhZ092ZXJFdmVudCA9IHRoaXMuX29uVW5oYW5kbGVkRHJhZ092ZXJFdmVudC5ldmVudDtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyh0aGlzLl9vbkRpZERyb3AsIHRoaXMuX29uVW5oYW5kbGVkRHJhZ092ZXJFdmVudCk7XG4gICAgICAgIGlmICghZGlzYWJsZURuZCkge1xuICAgICAgICAgICAgdGhpcy5pbml0RHJhZ0ZlYXR1cmVzKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaW5pdERyYWdGZWF0dXJlcygpIHtcbiAgICAgICAgaWYgKCF0aGlzLmhlYWRlcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGlkID0gdGhpcy5pZDtcbiAgICAgICAgY29uc3QgYWNjZXNzb3JJZCA9IHRoaXMuYWNjZXNzb3IuaWQ7XG4gICAgICAgIHRoaXMuaGVhZGVyLmRyYWdnYWJsZSA9IHRydWU7XG4gICAgICAgIHRoaXMuaGFuZGxlciA9IG5ldyAoY2xhc3MgUGFuZURyYWdIYW5kbGVyIGV4dGVuZHMgRHJhZ0hhbmRsZXIge1xuICAgICAgICAgICAgZ2V0RGF0YSgpIHtcbiAgICAgICAgICAgICAgICBMb2NhbFNlbGVjdGlvblRyYW5zZmVyLmdldEluc3RhbmNlKCkuc2V0RGF0YShbbmV3IFBhbmVUcmFuc2ZlcihhY2Nlc3NvcklkLCBpZCldLCBQYW5lVHJhbnNmZXIucHJvdG90eXBlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBkaXNwb3NlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBMb2NhbFNlbGVjdGlvblRyYW5zZmVyLmdldEluc3RhbmNlKCkuY2xlYXJEYXRhKFBhbmVUcmFuc2Zlci5wcm90b3R5cGUpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKHRoaXMuaGVhZGVyKTtcbiAgICAgICAgdGhpcy50YXJnZXQgPSBuZXcgRHJvcHRhcmdldCh0aGlzLmVsZW1lbnQsIHtcbiAgICAgICAgICAgIGFjY2VwdGVkVGFyZ2V0Wm9uZXM6IFsndG9wJywgJ2JvdHRvbSddLFxuICAgICAgICAgICAgb3ZlcmxheU1vZGVsOiB7XG4gICAgICAgICAgICAgICAgYWN0aXZhdGlvblNpemU6IHsgdHlwZTogJ3BlcmNlbnRhZ2UnLCB2YWx1ZTogNTAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYW5EaXNwbGF5T3ZlcmxheTogKGV2ZW50LCBwb3NpdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBnZXRQYW5lRGF0YSgpO1xuICAgICAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnBhbmVJZCAhPT0gdGhpcy5pZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS52aWV3SWQgPT09IHRoaXMuYWNjZXNzb3IuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGZpcmVkRXZlbnQgPSBuZXcgUGFuZXZpZXdVbmhhbmRsZWREcmFnT3ZlckV2ZW50KGV2ZW50LCBwb3NpdGlvbiwgZ2V0UGFuZURhdGEsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuX29uVW5oYW5kbGVkRHJhZ092ZXJFdmVudC5maXJlKGZpcmVkRXZlbnQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmaXJlZEV2ZW50LmlzQWNjZXB0ZWQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyh0aGlzLl9vbkRpZERyb3AsIHRoaXMuaGFuZGxlciwgdGhpcy50YXJnZXQsIHRoaXMudGFyZ2V0Lm9uRHJvcCgoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMub25Ecm9wKGV2ZW50KTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBvbkRyb3AoZXZlbnQpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IGdldFBhbmVEYXRhKCk7XG4gICAgICAgIGlmICghZGF0YSB8fCBkYXRhLnZpZXdJZCAhPT0gdGhpcy5hY2Nlc3Nvci5pZCkge1xuICAgICAgICAgICAgLy8gaWYgdGhlcmUgaXMgbm8gbG9jYWwgZHJhZyBldmVudCBmb3IgdGhpcyBwYW5lbFxuICAgICAgICAgICAgLy8gb3IgaWYgdGhlIGRyYWcgZXZlbnQgd2FzIGNyZWF0aW5nIGJ5IGFub3RoZXIgUGFuZXZpZXcgaW5zdGFuY2VcbiAgICAgICAgICAgIHRoaXMuX29uRGlkRHJvcC5maXJlKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZXZlbnQpLCB7IHBhbmVsOiB0aGlzLCBhcGk6IG5ldyBQYW5ldmlld0FwaSh0aGlzLmFjY2Vzc29yKSwgZ2V0RGF0YTogZ2V0UGFuZURhdGEgfSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lckFwaSA9IHRoaXMuX3BhcmFtc1xuICAgICAgICAgICAgLmNvbnRhaW5lckFwaTtcbiAgICAgICAgY29uc3QgcGFuZWxJZCA9IGRhdGEucGFuZUlkO1xuICAgICAgICBjb25zdCBleGlzdGluZ1BhbmVsID0gY29udGFpbmVyQXBpLmdldFBhbmVsKHBhbmVsSWQpO1xuICAgICAgICBpZiAoIWV4aXN0aW5nUGFuZWwpIHtcbiAgICAgICAgICAgIC8vIGlmIHRoZSBwYW5lbCBkb2Vzbid0IGV4aXN0XG4gICAgICAgICAgICB0aGlzLl9vbkRpZERyb3AuZmlyZShPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGV2ZW50KSwgeyBwYW5lbDogdGhpcywgZ2V0RGF0YTogZ2V0UGFuZURhdGEsIGFwaTogbmV3IFBhbmV2aWV3QXBpKHRoaXMuYWNjZXNzb3IpIH0pKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhbGxQYW5lbHMgPSBjb250YWluZXJBcGkucGFuZWxzO1xuICAgICAgICBjb25zdCBmcm9tSW5kZXggPSBhbGxQYW5lbHMuaW5kZXhPZihleGlzdGluZ1BhbmVsKTtcbiAgICAgICAgbGV0IHRvSW5kZXggPSBjb250YWluZXJBcGkucGFuZWxzLmluZGV4T2YodGhpcyk7XG4gICAgICAgIGlmIChldmVudC5wb3NpdGlvbiA9PT0gJ2xlZnQnIHx8IGV2ZW50LnBvc2l0aW9uID09PSAndG9wJykge1xuICAgICAgICAgICAgdG9JbmRleCA9IE1hdGgubWF4KDAsIHRvSW5kZXggLSAxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnQucG9zaXRpb24gPT09ICdyaWdodCcgfHwgZXZlbnQucG9zaXRpb24gPT09ICdib3R0b20nKSB7XG4gICAgICAgICAgICBpZiAoZnJvbUluZGV4ID4gdG9JbmRleCkge1xuICAgICAgICAgICAgICAgIHRvSW5kZXgrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRvSW5kZXggPSBNYXRoLm1pbihhbGxQYW5lbHMubGVuZ3RoIC0gMSwgdG9JbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgY29udGFpbmVyQXBpLm1vdmVQYW5lbChmcm9tSW5kZXgsIHRvSW5kZXgpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEFjY2VwdGFibGVFdmVudCB9IGZyb20gJy4uL2V2ZW50cyc7XG5leHBvcnQgY29uc3QgUFJPUEVSVFlfS0VZU19QQU5FVklFVyA9ICgoKSA9PiB7XG4gICAgLyoqXG4gICAgICogYnkgcmVhZG9uZyB0aGUga2V5cyBmcm9tIGFuIGVtcHR5IHZhbHVlIG9iamVjdCBUeXBlU2NyaXB0IHdpbGwgZXJyb3JcbiAgICAgKiB3aGVuIHdlIGFkZCBvciByZW1vdmUgbmV3IHByb3BlcnRpZXMgdG8gYERvY2t2aWV3T3B0aW9uc2BcbiAgICAgKi9cbiAgICBjb25zdCBwcm9wZXJ0aWVzID0ge1xuICAgICAgICBkaXNhYmxlQXV0b1Jlc2l6aW5nOiB1bmRlZmluZWQsXG4gICAgICAgIGRpc2FibGVEbmQ6IHVuZGVmaW5lZCxcbiAgICAgICAgY2xhc3NOYW1lOiB1bmRlZmluZWQsXG4gICAgfTtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMocHJvcGVydGllcyk7XG59KSgpO1xuZXhwb3J0IGNsYXNzIFBhbmV2aWV3VW5oYW5kbGVkRHJhZ092ZXJFdmVudCBleHRlbmRzIEFjY2VwdGFibGVFdmVudCB7XG4gICAgY29uc3RydWN0b3IobmF0aXZlRXZlbnQsIHBvc2l0aW9uLCBnZXREYXRhLCBwYW5lbCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm5hdGl2ZUV2ZW50ID0gbmF0aXZlRXZlbnQ7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbjtcbiAgICAgICAgdGhpcy5nZXREYXRhID0gZ2V0RGF0YTtcbiAgICAgICAgdGhpcy5wYW5lbCA9IHBhbmVsO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFNwbGl0dmlldywgT3JpZW50YXRpb24sIH0gZnJvbSAnLi4vc3BsaXR2aWV3L3NwbGl0dmlldyc7XG5pbXBvcnQgeyBDb21wb3NpdGVEaXNwb3NhYmxlIH0gZnJvbSAnLi4vbGlmZWN5Y2xlJztcbmltcG9ydCB7IEVtaXR0ZXIgfSBmcm9tICcuLi9ldmVudHMnO1xuaW1wb3J0IHsgYWRkQ2xhc3NlcywgcmVtb3ZlQ2xhc3NlcyB9IGZyb20gJy4uL2RvbSc7XG5leHBvcnQgY2xhc3MgUGFuZXZpZXcgZXh0ZW5kcyBDb21wb3NpdGVEaXNwb3NhYmxlIHtcbiAgICBnZXQgb25EaWRBZGRWaWV3KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zcGxpdHZpZXcub25EaWRBZGRWaWV3O1xuICAgIH1cbiAgICBnZXQgb25EaWRSZW1vdmVWaWV3KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zcGxpdHZpZXcub25EaWRSZW1vdmVWaWV3O1xuICAgIH1cbiAgICBnZXQgbWluaW11bVNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNwbGl0dmlldy5taW5pbXVtU2l6ZTtcbiAgICB9XG4gICAgZ2V0IG1heGltdW1TaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zcGxpdHZpZXcubWF4aW11bVNpemU7XG4gICAgfVxuICAgIGdldCBvcmllbnRhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3BsaXR2aWV3Lm9yaWVudGF0aW9uO1xuICAgIH1cbiAgICBnZXQgc2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3BsaXR2aWV3LnNpemU7XG4gICAgfVxuICAgIGdldCBvcnRob2dvbmFsU2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3BsaXR2aWV3Lm9ydGhvZ29uYWxTaXplO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcihjb250YWluZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnBhbmVJdGVtcyA9IFtdO1xuICAgICAgICB0aGlzLnNraXBBbmltYXRpb24gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fb25EaWRDaGFuZ2UgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRGlkQ2hhbmdlID0gdGhpcy5fb25EaWRDaGFuZ2UuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29yaWVudGF0aW9uID0gKF9hID0gb3B0aW9ucy5vcmllbnRhdGlvbikgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogT3JpZW50YXRpb24uVkVSVElDQUw7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NOYW1lID0gJ2R2LXBhbmUtY29udGFpbmVyJztcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudCk7XG4gICAgICAgIHRoaXMuc3BsaXR2aWV3ID0gbmV3IFNwbGl0dmlldyh0aGlzLmVsZW1lbnQsIHtcbiAgICAgICAgICAgIG9yaWVudGF0aW9uOiB0aGlzLl9vcmllbnRhdGlvbixcbiAgICAgICAgICAgIHByb3BvcnRpb25hbExheW91dDogZmFsc2UsXG4gICAgICAgICAgICBkZXNjcmlwdG9yOiBvcHRpb25zLmRlc2NyaXB0b3IsXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBpZiB3ZSd2ZSBhZGRlZCB2aWV3cyBmcm9tIHRoZSBkZXNjcmlwdG9yIHdlIG5lZWQgdG9cbiAgICAgICAgLy8gYWRkIHRoZSBwYW5lcyB0byBvdXIgUGFuZSBhcnJheSBhbmQgc2V0dXAgYW5pbWF0aW9uXG4gICAgICAgIHRoaXMuZ2V0UGFuZXMoKS5mb3JFYWNoKChwYW5lKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBkaXNwb3NhYmxlID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUocGFuZS5vbkRpZENoYW5nZUV4cGFuc2lvblN0YXRlKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldHVwQW5pbWF0aW9uKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fb25EaWRDaGFuZ2UuZmlyZSh1bmRlZmluZWQpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgY29uc3QgcGFuZUl0ZW0gPSB7XG4gICAgICAgICAgICAgICAgcGFuZSxcbiAgICAgICAgICAgICAgICBkaXNwb3NhYmxlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3Bvc2U6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3Bvc2FibGUuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5wYW5lSXRlbXMucHVzaChwYW5lSXRlbSk7XG4gICAgICAgICAgICBwYW5lLm9ydGhvZ29uYWxTaXplID0gdGhpcy5zcGxpdHZpZXcub3J0aG9nb25hbFNpemU7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmFkZERpc3Bvc2FibGVzKHRoaXMuX29uRGlkQ2hhbmdlLCB0aGlzLnNwbGl0dmlldy5vbkRpZFNhc2hFbmQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25EaWRDaGFuZ2UuZmlyZSh1bmRlZmluZWQpO1xuICAgICAgICB9KSwgdGhpcy5zcGxpdHZpZXcub25EaWRBZGRWaWV3KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX29uRGlkQ2hhbmdlLmZpcmUoKTtcbiAgICAgICAgfSksIHRoaXMuc3BsaXR2aWV3Lm9uRGlkUmVtb3ZlVmlldygoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9vbkRpZENoYW5nZS5maXJlKCk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgc2V0Vmlld1Zpc2libGUoaW5kZXgsIHZpc2libGUpIHtcbiAgICAgICAgdGhpcy5zcGxpdHZpZXcuc2V0Vmlld1Zpc2libGUoaW5kZXgsIHZpc2libGUpO1xuICAgIH1cbiAgICBhZGRQYW5lKHBhbmUsIHNpemUsIGluZGV4ID0gdGhpcy5zcGxpdHZpZXcubGVuZ3RoLCBza2lwTGF5b3V0ID0gZmFsc2UpIHtcbiAgICAgICAgY29uc3QgZGlzcG9zYWJsZSA9IHBhbmUub25EaWRDaGFuZ2VFeHBhbnNpb25TdGF0ZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNldHVwQW5pbWF0aW9uKCk7XG4gICAgICAgICAgICB0aGlzLl9vbkRpZENoYW5nZS5maXJlKHVuZGVmaW5lZCk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBwYW5lSXRlbSA9IHtcbiAgICAgICAgICAgIHBhbmUsXG4gICAgICAgICAgICBkaXNwb3NhYmxlOiB7XG4gICAgICAgICAgICAgICAgZGlzcG9zZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBkaXNwb3NhYmxlLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5wYW5lSXRlbXMuc3BsaWNlKGluZGV4LCAwLCBwYW5lSXRlbSk7XG4gICAgICAgIHBhbmUub3J0aG9nb25hbFNpemUgPSB0aGlzLnNwbGl0dmlldy5vcnRob2dvbmFsU2l6ZTtcbiAgICAgICAgdGhpcy5zcGxpdHZpZXcuYWRkVmlldyhwYW5lLCBzaXplLCBpbmRleCwgc2tpcExheW91dCk7XG4gICAgfVxuICAgIGdldFZpZXdTaXplKGluZGV4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNwbGl0dmlldy5nZXRWaWV3U2l6ZShpbmRleCk7XG4gICAgfVxuICAgIGdldFBhbmVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zcGxpdHZpZXcuZ2V0Vmlld3MoKTtcbiAgICB9XG4gICAgcmVtb3ZlUGFuZShpbmRleCwgb3B0aW9ucyA9IHsgc2tpcERpc3Bvc2U6IGZhbHNlIH0pIHtcbiAgICAgICAgY29uc3QgcGFuZUl0ZW0gPSB0aGlzLnBhbmVJdGVtcy5zcGxpY2UoaW5kZXgsIDEpWzBdO1xuICAgICAgICB0aGlzLnNwbGl0dmlldy5yZW1vdmVWaWV3KGluZGV4KTtcbiAgICAgICAgaWYgKCFvcHRpb25zLnNraXBEaXNwb3NlKSB7XG4gICAgICAgICAgICBwYW5lSXRlbS5kaXNwb3NhYmxlLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIHBhbmVJdGVtLnBhbmUuZGlzcG9zZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYW5lSXRlbTtcbiAgICB9XG4gICAgbW92ZVZpZXcoZnJvbSwgdG8pIHtcbiAgICAgICAgaWYgKGZyb20gPT09IHRvKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmlldyA9IHRoaXMucmVtb3ZlUGFuZShmcm9tLCB7IHNraXBEaXNwb3NlOiB0cnVlIH0pO1xuICAgICAgICB0aGlzLnNraXBBbmltYXRpb24gPSB0cnVlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5hZGRQYW5lKHZpZXcucGFuZSwgdmlldy5wYW5lLnNpemUsIHRvLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLnNraXBBbmltYXRpb24gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsYXlvdXQoc2l6ZSwgb3J0aG9nb25hbFNpemUpIHtcbiAgICAgICAgdGhpcy5zcGxpdHZpZXcubGF5b3V0KHNpemUsIG9ydGhvZ29uYWxTaXplKTtcbiAgICB9XG4gICAgc2V0dXBBbmltYXRpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLnNraXBBbmltYXRpb24pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5hbmltYXRpb25UaW1lcikge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuYW5pbWF0aW9uVGltZXIpO1xuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25UaW1lciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBhZGRDbGFzc2VzKHRoaXMuZWxlbWVudCwgJ2R2LWFuaW1hdGVkJyk7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9uVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uVGltZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICByZW1vdmVDbGFzc2VzKHRoaXMuZWxlbWVudCwgJ2R2LWFuaW1hdGVkJyk7XG4gICAgICAgIH0sIDIwMCk7XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHN1cGVyLmRpc3Bvc2UoKTtcbiAgICAgICAgaWYgKHRoaXMuYW5pbWF0aW9uVGltZXIpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmFuaW1hdGlvblRpbWVyKTtcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uVGltZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wYW5lSXRlbXMuZm9yRWFjaCgocGFuZUl0ZW0pID0+IHtcbiAgICAgICAgICAgIHBhbmVJdGVtLmRpc3Bvc2FibGUuZGlzcG9zZSgpO1xuICAgICAgICAgICAgcGFuZUl0ZW0ucGFuZS5kaXNwb3NlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnBhbmVJdGVtcyA9IFtdO1xuICAgICAgICB0aGlzLnNwbGl0dmlldy5kaXNwb3NlKCk7XG4gICAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmUoKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBQYW5ldmlld0FwaSB9IGZyb20gJy4uL2FwaS9jb21wb25lbnQuYXBpJztcbmltcG9ydCB7IEVtaXR0ZXIgfSBmcm9tICcuLi9ldmVudHMnO1xuaW1wb3J0IHsgQ29tcG9zaXRlRGlzcG9zYWJsZSwgTXV0YWJsZURpc3Bvc2FibGUsIH0gZnJvbSAnLi4vbGlmZWN5Y2xlJztcbmltcG9ydCB7IE9yaWVudGF0aW9uLCBTaXppbmcgfSBmcm9tICcuLi9zcGxpdHZpZXcvc3BsaXR2aWV3JztcbmltcG9ydCB7IFBhbmV2aWV3IH0gZnJvbSAnLi9wYW5ldmlldyc7XG5pbXBvcnQgeyBEcmFnZ2FibGVQYW5ldmlld1BhbmVsLCB9IGZyb20gJy4vZHJhZ2dhYmxlUGFuZXZpZXdQYW5lbCc7XG5pbXBvcnQgeyBEZWZhdWx0SGVhZGVyIH0gZnJvbSAnLi9kZWZhdWx0UGFuZXZpZXdIZWFkZXInO1xuaW1wb3J0IHsgc2VxdWVudGlhbE51bWJlckdlbmVyYXRvciB9IGZyb20gJy4uL21hdGgnO1xuaW1wb3J0IHsgUmVzaXphYmxlIH0gZnJvbSAnLi4vcmVzaXphYmxlJztcbmltcG9ydCB7IENsYXNzbmFtZXMgfSBmcm9tICcuLi9kb20nO1xuY29uc3QgbmV4dExheW91dElkID0gc2VxdWVudGlhbE51bWJlckdlbmVyYXRvcigpO1xuZXhwb3J0IGNsYXNzIFBhbmVGcmFtZXdvcmsgZXh0ZW5kcyBEcmFnZ2FibGVQYW5ldmlld1BhbmVsIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMuYWNjZXNzb3IsIG9wdGlvbnMuaWQsIG9wdGlvbnMuY29tcG9uZW50LCBvcHRpb25zLmhlYWRlckNvbXBvbmVudCwgb3B0aW9ucy5vcmllbnRhdGlvbiwgb3B0aW9ucy5pc0V4cGFuZGVkLCBvcHRpb25zLmRpc2FibGVEbmQpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICBnZXRCb2R5Q29tcG9uZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmJvZHk7XG4gICAgfVxuICAgIGdldEhlYWRlckNvbXBvbmVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5oZWFkZXI7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFBhbmV2aWV3Q29tcG9uZW50IGV4dGVuZHMgUmVzaXphYmxlIHtcbiAgICBnZXQgaWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcbiAgICB9XG4gICAgZ2V0IHBhbmVscygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFuZXZpZXcuZ2V0UGFuZXMoKTtcbiAgICB9XG4gICAgc2V0IHBhbmV2aWV3KHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3BhbmV2aWV3ID0gdmFsdWU7XG4gICAgICAgIHRoaXMuX2Rpc3Bvc2FibGUudmFsdWUgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSh0aGlzLl9wYW5ldmlldy5vbkRpZENoYW5nZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9vbkRpZExheW91dENoYW5nZS5maXJlKHVuZGVmaW5lZCk7XG4gICAgICAgIH0pLCB0aGlzLl9wYW5ldmlldy5vbkRpZEFkZFZpZXcoKGUpID0+IHRoaXMuX29uRGlkQWRkVmlldy5maXJlKGUpKSwgdGhpcy5fcGFuZXZpZXcub25EaWRSZW1vdmVWaWV3KChlKSA9PiB0aGlzLl9vbkRpZFJlbW92ZVZpZXcuZmlyZShlKSkpO1xuICAgIH1cbiAgICBnZXQgcGFuZXZpZXcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYW5ldmlldztcbiAgICB9XG4gICAgZ2V0IG1pbmltdW1TaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYW5ldmlldy5taW5pbXVtU2l6ZTtcbiAgICB9XG4gICAgZ2V0IG1heGltdW1TaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYW5ldmlldy5tYXhpbXVtU2l6ZTtcbiAgICB9XG4gICAgZ2V0IGhlaWdodCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFuZXZpZXcub3JpZW50YXRpb24gPT09IE9yaWVudGF0aW9uLkhPUklaT05UQUxcbiAgICAgICAgICAgID8gdGhpcy5wYW5ldmlldy5vcnRob2dvbmFsU2l6ZVxuICAgICAgICAgICAgOiB0aGlzLnBhbmV2aWV3LnNpemU7XG4gICAgfVxuICAgIGdldCB3aWR0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFuZXZpZXcub3JpZW50YXRpb24gPT09IE9yaWVudGF0aW9uLkhPUklaT05UQUxcbiAgICAgICAgICAgID8gdGhpcy5wYW5ldmlldy5zaXplXG4gICAgICAgICAgICA6IHRoaXMucGFuZXZpZXcub3J0aG9nb25hbFNpemU7XG4gICAgfVxuICAgIGdldCBvcHRpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3B0aW9ucztcbiAgICB9XG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgc3VwZXIoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksIG9wdGlvbnMuZGlzYWJsZUF1dG9SZXNpemluZyk7XG4gICAgICAgIHRoaXMuX2lkID0gbmV4dExheW91dElkLm5leHQoKTtcbiAgICAgICAgdGhpcy5fZGlzcG9zYWJsZSA9IG5ldyBNdXRhYmxlRGlzcG9zYWJsZSgpO1xuICAgICAgICB0aGlzLl92aWV3RGlzcG9zYWJsZXMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuX29uRGlkTGF5b3V0ZnJvbUpTT04gPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRGlkTGF5b3V0RnJvbUpTT04gPSB0aGlzLl9vbkRpZExheW91dGZyb21KU09OLmV2ZW50O1xuICAgICAgICB0aGlzLl9vbkRpZExheW91dENoYW5nZSA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRMYXlvdXRDaGFuZ2UgPSB0aGlzLl9vbkRpZExheW91dENoYW5nZS5ldmVudDtcbiAgICAgICAgdGhpcy5fb25EaWREcm9wID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZERyb3AgPSB0aGlzLl9vbkRpZERyb3AuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uRGlkQWRkVmlldyA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRBZGRWaWV3ID0gdGhpcy5fb25EaWRBZGRWaWV3LmV2ZW50O1xuICAgICAgICB0aGlzLl9vbkRpZFJlbW92ZVZpZXcgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRGlkUmVtb3ZlVmlldyA9IHRoaXMuX29uRGlkUmVtb3ZlVmlldy5ldmVudDtcbiAgICAgICAgdGhpcy5fb25VbmhhbmRsZWREcmFnT3ZlckV2ZW50ID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vblVuaGFuZGxlZERyYWdPdmVyRXZlbnQgPSB0aGlzLl9vblVuaGFuZGxlZERyYWdPdmVyRXZlbnQuZXZlbnQ7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS53aWR0aCA9ICcxMDAlJztcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyh0aGlzLl9vbkRpZExheW91dENoYW5nZSwgdGhpcy5fb25EaWRMYXlvdXRmcm9tSlNPTiwgdGhpcy5fb25EaWREcm9wLCB0aGlzLl9vbkRpZEFkZFZpZXcsIHRoaXMuX29uRGlkUmVtb3ZlVmlldywgdGhpcy5fb25VbmhhbmRsZWREcmFnT3ZlckV2ZW50KTtcbiAgICAgICAgdGhpcy5fY2xhc3NOYW1lcyA9IG5ldyBDbGFzc25hbWVzKHRoaXMuZWxlbWVudCk7XG4gICAgICAgIHRoaXMuX2NsYXNzTmFtZXMuc2V0Q2xhc3NOYW1lcygoX2EgPSBvcHRpb25zLmNsYXNzTmFtZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJycpO1xuICAgICAgICAvLyB0aGUgY29udGFpbmVyIGlzIG93bmVkIGJ5IHRoZSB0aGlyZC1wYXJ0eSwgZG8gbm90IG1vZGlmeS9kZWxldGUgaXRcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudCk7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLnBhbmV2aWV3ID0gbmV3IFBhbmV2aWV3KHRoaXMuZWxlbWVudCwge1xuICAgICAgICAgICAgLy8gb25seSBhbGxvdyBwYW5ldmlldyBpbiB0aGUgdmVydGljYWwgb3JpZW50YXRpb24gZm9yIG5vd1xuICAgICAgICAgICAgb3JpZW50YXRpb246IE9yaWVudGF0aW9uLlZFUlRJQ0FMLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyh0aGlzLl9kaXNwb3NhYmxlKTtcbiAgICB9XG4gICAgc2V0VmlzaWJsZShwYW5lbCwgdmlzaWJsZSkge1xuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMucGFuZWxzLmluZGV4T2YocGFuZWwpO1xuICAgICAgICB0aGlzLnBhbmV2aWV3LnNldFZpZXdWaXNpYmxlKGluZGV4LCB2aXNpYmxlKTtcbiAgICB9XG4gICAgZm9jdXMoKSB7XG4gICAgICAgIC8vbm9vcFxuICAgIH1cbiAgICB1cGRhdGVPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgaWYgKCdjbGFzc05hbWUnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMuX2NsYXNzTmFtZXMuc2V0Q2xhc3NOYW1lcygoX2EgPSBvcHRpb25zLmNsYXNzTmFtZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJycpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgnZGlzYWJsZVJlc2l6aW5nJyBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICB0aGlzLmRpc2FibGVSZXNpemluZyA9IChfYiA9IG9wdGlvbnMuZGlzYWJsZUF1dG9SZXNpemluZykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5vcHRpb25zKSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGFkZFBhbmVsKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBib2R5ID0gdGhpcy5vcHRpb25zLmNyZWF0ZUNvbXBvbmVudCh7XG4gICAgICAgICAgICBpZDogb3B0aW9ucy5pZCxcbiAgICAgICAgICAgIG5hbWU6IG9wdGlvbnMuY29tcG9uZW50LFxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IGhlYWRlcjtcbiAgICAgICAgaWYgKG9wdGlvbnMuaGVhZGVyQ29tcG9uZW50ICYmIHRoaXMub3B0aW9ucy5jcmVhdGVIZWFkZXJDb21wb25lbnQpIHtcbiAgICAgICAgICAgIGhlYWRlciA9IHRoaXMub3B0aW9ucy5jcmVhdGVIZWFkZXJDb21wb25lbnQoe1xuICAgICAgICAgICAgICAgIGlkOiBvcHRpb25zLmlkLFxuICAgICAgICAgICAgICAgIG5hbWU6IG9wdGlvbnMuaGVhZGVyQ29tcG9uZW50LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFoZWFkZXIpIHtcbiAgICAgICAgICAgIGhlYWRlciA9IG5ldyBEZWZhdWx0SGVhZGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmlldyA9IG5ldyBQYW5lRnJhbWV3b3JrKHtcbiAgICAgICAgICAgIGlkOiBvcHRpb25zLmlkLFxuICAgICAgICAgICAgY29tcG9uZW50OiBvcHRpb25zLmNvbXBvbmVudCxcbiAgICAgICAgICAgIGhlYWRlckNvbXBvbmVudDogb3B0aW9ucy5oZWFkZXJDb21wb25lbnQsXG4gICAgICAgICAgICBoZWFkZXIsXG4gICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgb3JpZW50YXRpb246IE9yaWVudGF0aW9uLlZFUlRJQ0FMLFxuICAgICAgICAgICAgaXNFeHBhbmRlZDogISFvcHRpb25zLmlzRXhwYW5kZWQsXG4gICAgICAgICAgICBkaXNhYmxlRG5kOiAhIXRoaXMub3B0aW9ucy5kaXNhYmxlRG5kLFxuICAgICAgICAgICAgYWNjZXNzb3I6IHRoaXMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmRvQWRkUGFuZWwodmlldyk7XG4gICAgICAgIGNvbnN0IHNpemUgPSB0eXBlb2Ygb3B0aW9ucy5zaXplID09PSAnbnVtYmVyJyA/IG9wdGlvbnMuc2l6ZSA6IFNpemluZy5EaXN0cmlidXRlO1xuICAgICAgICBjb25zdCBpbmRleCA9IHR5cGVvZiBvcHRpb25zLmluZGV4ID09PSAnbnVtYmVyJyA/IG9wdGlvbnMuaW5kZXggOiB1bmRlZmluZWQ7XG4gICAgICAgIHZpZXcuaW5pdCh7XG4gICAgICAgICAgICBwYXJhbXM6IChfYSA9IG9wdGlvbnMucGFyYW1zKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB7fSxcbiAgICAgICAgICAgIG1pbmltdW1Cb2R5U2l6ZTogb3B0aW9ucy5taW5pbXVtQm9keVNpemUsXG4gICAgICAgICAgICBtYXhpbXVtQm9keVNpemU6IG9wdGlvbnMubWF4aW11bUJvZHlTaXplLFxuICAgICAgICAgICAgaXNFeHBhbmRlZDogb3B0aW9ucy5pc0V4cGFuZGVkLFxuICAgICAgICAgICAgdGl0bGU6IG9wdGlvbnMudGl0bGUsXG4gICAgICAgICAgICBjb250YWluZXJBcGk6IG5ldyBQYW5ldmlld0FwaSh0aGlzKSxcbiAgICAgICAgICAgIGFjY2Vzc29yOiB0aGlzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5wYW5ldmlldy5hZGRQYW5lKHZpZXcsIHNpemUsIGluZGV4KTtcbiAgICAgICAgdmlldy5vcmllbnRhdGlvbiA9IHRoaXMucGFuZXZpZXcub3JpZW50YXRpb247XG4gICAgICAgIHJldHVybiB2aWV3O1xuICAgIH1cbiAgICByZW1vdmVQYW5lbChwYW5lbCkge1xuICAgICAgICBjb25zdCB2aWV3cyA9IHRoaXMucGFuZWxzO1xuICAgICAgICBjb25zdCBpbmRleCA9IHZpZXdzLmZpbmRJbmRleCgoXykgPT4gXyA9PT0gcGFuZWwpO1xuICAgICAgICB0aGlzLnBhbmV2aWV3LnJlbW92ZVBhbmUoaW5kZXgpO1xuICAgICAgICB0aGlzLmRvUmVtb3ZlUGFuZWwocGFuZWwpO1xuICAgIH1cbiAgICBtb3ZlUGFuZWwoZnJvbSwgdG8pIHtcbiAgICAgICAgdGhpcy5wYW5ldmlldy5tb3ZlVmlldyhmcm9tLCB0byk7XG4gICAgfVxuICAgIGdldFBhbmVsKGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhbmVscy5maW5kKCh2aWV3KSA9PiB2aWV3LmlkID09PSBpZCk7XG4gICAgfVxuICAgIGxheW91dCh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIGNvbnN0IFtzaXplLCBvcnRob2dvbmFsU2l6ZV0gPSB0aGlzLnBhbmV2aWV3Lm9yaWVudGF0aW9uID09PSBPcmllbnRhdGlvbi5IT1JJWk9OVEFMXG4gICAgICAgICAgICA/IFt3aWR0aCwgaGVpZ2h0XVxuICAgICAgICAgICAgOiBbaGVpZ2h0LCB3aWR0aF07XG4gICAgICAgIHRoaXMucGFuZXZpZXcubGF5b3V0KHNpemUsIG9ydGhvZ29uYWxTaXplKTtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICBjb25zdCBtYXhpbXVtID0gKHZhbHVlKSA9PiB2YWx1ZSA9PT0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgfHxcbiAgICAgICAgICAgIHZhbHVlID09PSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFlcbiAgICAgICAgICAgID8gdW5kZWZpbmVkXG4gICAgICAgICAgICA6IHZhbHVlO1xuICAgICAgICBjb25zdCBtaW5pbXVtID0gKHZhbHVlKSA9PiAodmFsdWUgPD0gMCA/IHVuZGVmaW5lZCA6IHZhbHVlKTtcbiAgICAgICAgY29uc3Qgdmlld3MgPSB0aGlzLnBhbmV2aWV3XG4gICAgICAgICAgICAuZ2V0UGFuZXMoKVxuICAgICAgICAgICAgLm1hcCgodmlldywgaSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2l6ZSA9IHRoaXMucGFuZXZpZXcuZ2V0Vmlld1NpemUoaSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHNpemUsXG4gICAgICAgICAgICAgICAgZGF0YTogdmlldy50b0pTT04oKSxcbiAgICAgICAgICAgICAgICBtaW5pbXVtU2l6ZTogbWluaW11bSh2aWV3Lm1pbmltdW1Cb2R5U2l6ZSksXG4gICAgICAgICAgICAgICAgbWF4aW11bVNpemU6IG1heGltdW0odmlldy5tYXhpbXVtQm9keVNpemUpLFxuICAgICAgICAgICAgICAgIGV4cGFuZGVkOiB2aWV3LmlzRXhwYW5kZWQoKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmlld3MsXG4gICAgICAgICAgICBzaXplOiB0aGlzLnBhbmV2aWV3LnNpemUsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGZyb21KU09OKHNlcmlhbGl6ZWRQYW5ldmlldykge1xuICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgIGNvbnN0IHsgdmlld3MsIHNpemUgfSA9IHNlcmlhbGl6ZWRQYW5ldmlldztcbiAgICAgICAgY29uc3QgcXVldWUgPSBbXTtcbiAgICAgICAgLy8gdGFrZSBub3RlIG9mIHRoZSBleGlzdGluZyBkaW1lbnNpb25zXG4gICAgICAgIGNvbnN0IHdpZHRoID0gdGhpcy53aWR0aDtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gdGhpcy5oZWlnaHQ7XG4gICAgICAgIHRoaXMucGFuZXZpZXcgPSBuZXcgUGFuZXZpZXcodGhpcy5lbGVtZW50LCB7XG4gICAgICAgICAgICBvcmllbnRhdGlvbjogT3JpZW50YXRpb24uVkVSVElDQUwsXG4gICAgICAgICAgICBkZXNjcmlwdG9yOiB7XG4gICAgICAgICAgICAgICAgc2l6ZSxcbiAgICAgICAgICAgICAgICB2aWV3czogdmlld3MubWFwKCh2aWV3KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB2aWV3LmRhdGE7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB0aGlzLm9wdGlvbnMuY3JlYXRlQ29tcG9uZW50KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBkYXRhLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogZGF0YS5jb21wb25lbnQsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBsZXQgaGVhZGVyO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5oZWFkZXJDb21wb25lbnQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5jcmVhdGVIZWFkZXJDb21wb25lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlciA9IHRoaXMub3B0aW9ucy5jcmVhdGVIZWFkZXJDb21wb25lbnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBkYXRhLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGRhdGEuaGVhZGVyQ29tcG9uZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFoZWFkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlciA9IG5ldyBEZWZhdWx0SGVhZGVyKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFuZWwgPSBuZXcgUGFuZUZyYW1ld29yayh7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogZGF0YS5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudDogZGF0YS5jb21wb25lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJDb21wb25lbnQ6IGRhdGEuaGVhZGVyQ29tcG9uZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yaWVudGF0aW9uOiBPcmllbnRhdGlvbi5WRVJUSUNBTCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRXhwYW5kZWQ6ICEhdmlldy5leHBhbmRlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVEbmQ6ICEhdGhpcy5vcHRpb25zLmRpc2FibGVEbmQsXG4gICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3NvcjogdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9BZGRQYW5lbChwYW5lbCk7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlLnB1c2goKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFuZWwuaW5pdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiAoX2EgPSBkYXRhLnBhcmFtcykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDoge30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluaW11bUJvZHlTaXplOiB2aWV3Lm1pbmltdW1TaXplLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heGltdW1Cb2R5U2l6ZTogdmlldy5tYXhpbXVtU2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogZGF0YS50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0V4cGFuZGVkOiAhIXZpZXcuZXhwYW5kZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyQXBpOiBuZXcgUGFuZXZpZXdBcGkodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzb3I6IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhbmVsLm9yaWVudGF0aW9uID0gdGhpcy5wYW5ldmlldy5vcmllbnRhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIG9yaWdpbmFsIG9uRGlkQWRkVmlldyBldmVudHMgYXJlIG1pc3NlZCBzaW5jZSB0aGV5IGFyZSBmaXJlZCBiZWZvcmUgd2UgY2FuIHN1YmNyaWJlIHRvIHRoZW1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29uRGlkQWRkVmlldy5maXJlKHBhbmVsKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHNpemU6IHZpZXcuc2l6ZSwgdmlldzogcGFuZWwgfTtcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmxheW91dCh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgcXVldWUuZm9yRWFjaCgoZikgPT4gZigpKTtcbiAgICAgICAgdGhpcy5fb25EaWRMYXlvdXRmcm9tSlNPTi5maXJlKCk7XG4gICAgfVxuICAgIGNsZWFyKCkge1xuICAgICAgICBmb3IgKGNvbnN0IFtfLCB2YWx1ZV0gb2YgdGhpcy5fdmlld0Rpc3Bvc2FibGVzLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgdmFsdWUuZGlzcG9zZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ZpZXdEaXNwb3NhYmxlcy5jbGVhcigpO1xuICAgICAgICB0aGlzLnBhbmV2aWV3LmRpc3Bvc2UoKTtcbiAgICB9XG4gICAgZG9BZGRQYW5lbChwYW5lbCkge1xuICAgICAgICBjb25zdCBkaXNwb3NhYmxlID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUocGFuZWwub25EaWREcm9wKChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25EaWREcm9wLmZpcmUoZXZlbnQpO1xuICAgICAgICB9KSwgcGFuZWwub25VbmhhbmRsZWREcmFnT3ZlckV2ZW50KChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25VbmhhbmRsZWREcmFnT3ZlckV2ZW50LmZpcmUoZXZlbnQpO1xuICAgICAgICB9KSk7XG4gICAgICAgIHRoaXMuX3ZpZXdEaXNwb3NhYmxlcy5zZXQocGFuZWwuaWQsIGRpc3Bvc2FibGUpO1xuICAgIH1cbiAgICBkb1JlbW92ZVBhbmVsKHBhbmVsKSB7XG4gICAgICAgIGNvbnN0IGRpc3Bvc2FibGUgPSB0aGlzLl92aWV3RGlzcG9zYWJsZXMuZ2V0KHBhbmVsLmlkKTtcbiAgICAgICAgaWYgKGRpc3Bvc2FibGUpIHtcbiAgICAgICAgICAgIGRpc3Bvc2FibGUuZGlzcG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5fdmlld0Rpc3Bvc2FibGVzLmRlbGV0ZShwYW5lbC5pZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGlzcG9zZSgpIHtcbiAgICAgICAgc3VwZXIuZGlzcG9zZSgpO1xuICAgICAgICBmb3IgKGNvbnN0IFtfLCB2YWx1ZV0gb2YgdGhpcy5fdmlld0Rpc3Bvc2FibGVzLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgdmFsdWUuZGlzcG9zZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ZpZXdEaXNwb3NhYmxlcy5jbGVhcigpO1xuICAgICAgICB0aGlzLnBhbmV2aWV3LmRpc3Bvc2UoKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBQYW5ldmlld1BhbmVsQXBpSW1wbCB9IGZyb20gJy4uL2FwaS9wYW5ldmlld1BhbmVsQXBpJztcbmltcG9ydCB7IGFkZENsYXNzZXMsIHJlbW92ZUNsYXNzZXMgfSBmcm9tICcuLi9kb20nO1xuaW1wb3J0IHsgYWRkRGlzcG9zYWJsZUxpc3RlbmVyLCBFbWl0dGVyIH0gZnJvbSAnLi4vZXZlbnRzJztcbmltcG9ydCB7IEJhc2VQYW5lbFZpZXcsIH0gZnJvbSAnLi4vZ3JpZHZpZXcvYmFzZVBhbmVsVmlldyc7XG5pbXBvcnQgeyBPcmllbnRhdGlvbiB9IGZyb20gJy4uL3NwbGl0dmlldy9zcGxpdHZpZXcnO1xuZXhwb3J0IGNsYXNzIFBhbmV2aWV3UGFuZWwgZXh0ZW5kcyBCYXNlUGFuZWxWaWV3IHtcbiAgICBzZXQgb3JpZW50YXRpb24odmFsdWUpIHtcbiAgICAgICAgdGhpcy5fb3JpZW50YXRpb24gPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IG9yaWVudGF0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3JpZW50YXRpb247XG4gICAgfVxuICAgIGdldCBtaW5pbXVtU2l6ZSgpIHtcbiAgICAgICAgY29uc3QgaGVhZGVyU2l6ZSA9IHRoaXMuaGVhZGVyU2l6ZTtcbiAgICAgICAgY29uc3QgZXhwYW5kZWQgPSB0aGlzLmlzRXhwYW5kZWQoKTtcbiAgICAgICAgY29uc3QgbWluaW11bUJvZHlTaXplID0gZXhwYW5kZWQgPyB0aGlzLl9taW5pbXVtQm9keVNpemUgOiAwO1xuICAgICAgICByZXR1cm4gaGVhZGVyU2l6ZSArIG1pbmltdW1Cb2R5U2l6ZTtcbiAgICB9XG4gICAgZ2V0IG1heGltdW1TaXplKCkge1xuICAgICAgICBjb25zdCBoZWFkZXJTaXplID0gdGhpcy5oZWFkZXJTaXplO1xuICAgICAgICBjb25zdCBleHBhbmRlZCA9IHRoaXMuaXNFeHBhbmRlZCgpO1xuICAgICAgICBjb25zdCBtYXhpbXVtQm9keVNpemUgPSBleHBhbmRlZCA/IHRoaXMuX21heGltdW1Cb2R5U2l6ZSA6IDA7XG4gICAgICAgIHJldHVybiBoZWFkZXJTaXplICsgbWF4aW11bUJvZHlTaXplO1xuICAgIH1cbiAgICBnZXQgc2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NpemU7XG4gICAgfVxuICAgIGdldCBvcnRob2dvbmFsU2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29ydGhvZ29uYWxTaXplO1xuICAgIH1cbiAgICBzZXQgb3J0aG9nb25hbFNpemUoc2l6ZSkge1xuICAgICAgICB0aGlzLl9vcnRob2dvbmFsU2l6ZSA9IHNpemU7XG4gICAgfVxuICAgIGdldCBtaW5pbXVtQm9keVNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9taW5pbXVtQm9keVNpemU7XG4gICAgfVxuICAgIHNldCBtaW5pbXVtQm9keVNpemUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fbWluaW11bUJvZHlTaXplID0gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyA/IHZhbHVlIDogMDtcbiAgICB9XG4gICAgZ2V0IG1heGltdW1Cb2R5U2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21heGltdW1Cb2R5U2l6ZTtcbiAgICB9XG4gICAgc2V0IG1heGltdW1Cb2R5U2l6ZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9tYXhpbXVtQm9keVNpemUgPVxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyA/IHZhbHVlIDogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgIH1cbiAgICBnZXQgaGVhZGVyVmlzaWJsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hlYWRlclZpc2libGU7XG4gICAgfVxuICAgIHNldCBoZWFkZXJWaXNpYmxlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2hlYWRlclZpc2libGUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5oZWFkZXIuc3R5bGUuZGlzcGxheSA9IHZhbHVlID8gJycgOiAnbm9uZSc7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGlkLCBjb21wb25lbnQsIGhlYWRlckNvbXBvbmVudCwgb3JpZW50YXRpb24sIGlzRXhwYW5kZWQsIGlzSGVhZGVyVmlzaWJsZSkge1xuICAgICAgICBzdXBlcihpZCwgY29tcG9uZW50LCBuZXcgUGFuZXZpZXdQYW5lbEFwaUltcGwoaWQsIGNvbXBvbmVudCkpO1xuICAgICAgICB0aGlzLmhlYWRlckNvbXBvbmVudCA9IGhlYWRlckNvbXBvbmVudDtcbiAgICAgICAgdGhpcy5fb25EaWRDaGFuZ2VFeHBhbnNpb25TdGF0ZSA9IG5ldyBFbWl0dGVyKHsgcmVwbGF5OiB0cnVlIH0pO1xuICAgICAgICB0aGlzLm9uRGlkQ2hhbmdlRXhwYW5zaW9uU3RhdGUgPSB0aGlzLl9vbkRpZENoYW5nZUV4cGFuc2lvblN0YXRlLmV2ZW50O1xuICAgICAgICB0aGlzLl9vbkRpZENoYW5nZSA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRDaGFuZ2UgPSB0aGlzLl9vbkRpZENoYW5nZS5ldmVudDtcbiAgICAgICAgdGhpcy5oZWFkZXJTaXplID0gMjI7XG4gICAgICAgIHRoaXMuX29ydGhvZ29uYWxTaXplID0gMDtcbiAgICAgICAgdGhpcy5fc2l6ZSA9IDA7XG4gICAgICAgIHRoaXMuX21pbmltdW1Cb2R5U2l6ZSA9IDEwMDtcbiAgICAgICAgdGhpcy5fbWF4aW11bUJvZHlTaXplID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgICB0aGlzLl9pc0V4cGFuZGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZXhwYW5kZWRTaXplID0gMDtcbiAgICAgICAgdGhpcy5hcGkucGFuZSA9IHRoaXM7IC8vIFRPRE8gY2Fubm90IHVzZSAndGhpcycgYmVmb3JlICdzdXBlcidcbiAgICAgICAgdGhpcy5hcGkuaW5pdGlhbGl6ZSh0aGlzKTtcbiAgICAgICAgdGhpcy5faXNFeHBhbmRlZCA9IGlzRXhwYW5kZWQ7XG4gICAgICAgIHRoaXMuX2hlYWRlclZpc2libGUgPSBpc0hlYWRlclZpc2libGU7XG4gICAgICAgIHRoaXMuX29uRGlkQ2hhbmdlRXhwYW5zaW9uU3RhdGUuZmlyZSh0aGlzLmlzRXhwYW5kZWQoKSk7IC8vIGluaXRpYWxpemUgdmFsdWVcbiAgICAgICAgdGhpcy5fb3JpZW50YXRpb24gPSBvcmllbnRhdGlvbjtcbiAgICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2R2LXBhbmUnKTtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyh0aGlzLmFwaS5vbldpbGxWaXNpYmlsaXR5Q2hhbmdlKChldmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBpc1Zpc2libGUgfSA9IGV2ZW50O1xuICAgICAgICAgICAgY29uc3QgeyBhY2Nlc3NvciB9ID0gdGhpcy5fcGFyYW1zO1xuICAgICAgICAgICAgYWNjZXNzb3Iuc2V0VmlzaWJsZSh0aGlzLCBpc1Zpc2libGUpO1xuICAgICAgICB9KSwgdGhpcy5hcGkub25EaWRTaXplQ2hhbmdlKChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25EaWRDaGFuZ2UuZmlyZSh7IHNpemU6IGV2ZW50LnNpemUgfSk7XG4gICAgICAgIH0pLCBhZGREaXNwb3NhYmxlTGlzdGVuZXIodGhpcy5lbGVtZW50LCAnbW91c2VlbnRlcicsIChldikgPT4ge1xuICAgICAgICAgICAgdGhpcy5hcGkuX29uTW91c2VFbnRlci5maXJlKGV2KTtcbiAgICAgICAgfSksIGFkZERpc3Bvc2FibGVMaXN0ZW5lcih0aGlzLmVsZW1lbnQsICdtb3VzZWxlYXZlJywgKGV2KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFwaS5fb25Nb3VzZUxlYXZlLmZpcmUoZXYpO1xuICAgICAgICB9KSk7XG4gICAgICAgIHRoaXMuYWRkRGlzcG9zYWJsZXModGhpcy5fb25EaWRDaGFuZ2VFeHBhbnNpb25TdGF0ZSwgdGhpcy5vbkRpZENoYW5nZUV4cGFuc2lvblN0YXRlKChpc1BhbmVsRXhwYW5kZWQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYXBpLl9vbkRpZEV4cGFuc2lvbkNoYW5nZS5maXJlKHtcbiAgICAgICAgICAgICAgICBpc0V4cGFuZGVkOiBpc1BhbmVsRXhwYW5kZWQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSksIHRoaXMuYXBpLm9uRGlkRm9jdXNDaGFuZ2UoKGUpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5oZWFkZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZS5pc0ZvY3VzZWQpIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzc2VzKHRoaXMuaGVhZGVyLCAnZm9jdXNlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3Nlcyh0aGlzLmhlYWRlciwgJ2ZvY3VzZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgICAgICB0aGlzLnJlbmRlck9uY2UoKTtcbiAgICB9XG4gICAgc2V0VmlzaWJsZShpc1Zpc2libGUpIHtcbiAgICAgICAgdGhpcy5hcGkuX29uRGlkVmlzaWJpbGl0eUNoYW5nZS5maXJlKHsgaXNWaXNpYmxlIH0pO1xuICAgIH1cbiAgICBzZXRBY3RpdmUoaXNBY3RpdmUpIHtcbiAgICAgICAgdGhpcy5hcGkuX29uRGlkQWN0aXZlQ2hhbmdlLmZpcmUoeyBpc0FjdGl2ZSB9KTtcbiAgICB9XG4gICAgaXNFeHBhbmRlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzRXhwYW5kZWQ7XG4gICAgfVxuICAgIHNldEV4cGFuZGVkKGV4cGFuZGVkKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc0V4cGFuZGVkID09PSBleHBhbmRlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2lzRXhwYW5kZWQgPSBleHBhbmRlZDtcbiAgICAgICAgaWYgKGV4cGFuZGVkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hbmltYXRpb25UaW1lcikge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmFuaW1hdGlvblRpbWVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmJvZHkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5ib2R5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgKF9hID0gdGhpcy5ib2R5KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucmVtb3ZlKCk7XG4gICAgICAgICAgICB9LCAyMDApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX29uRGlkQ2hhbmdlLmZpcmUoZXhwYW5kZWQgPyB7IHNpemU6IHRoaXMud2lkdGggfSA6IHt9KTtcbiAgICAgICAgdGhpcy5fb25EaWRDaGFuZ2VFeHBhbnNpb25TdGF0ZS5maXJlKGV4cGFuZGVkKTtcbiAgICB9XG4gICAgbGF5b3V0KHNpemUsIG9ydGhvZ29uYWxTaXplKSB7XG4gICAgICAgIHRoaXMuX3NpemUgPSBzaXplO1xuICAgICAgICB0aGlzLl9vcnRob2dvbmFsU2l6ZSA9IG9ydGhvZ29uYWxTaXplO1xuICAgICAgICBjb25zdCBbd2lkdGgsIGhlaWdodF0gPSB0aGlzLm9yaWVudGF0aW9uID09PSBPcmllbnRhdGlvbi5IT1JJWk9OVEFMXG4gICAgICAgICAgICA/IFtzaXplLCBvcnRob2dvbmFsU2l6ZV1cbiAgICAgICAgICAgIDogW29ydGhvZ29uYWxTaXplLCBzaXplXTtcbiAgICAgICAgaWYgKHRoaXMuaXNFeHBhbmRlZCgpKSB7XG4gICAgICAgICAgICB0aGlzLmV4cGFuZGVkU2l6ZSA9IHdpZHRoO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyLmxheW91dCh3aWR0aCwgaGVpZ2h0KTtcbiAgICB9XG4gICAgaW5pdChwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHN1cGVyLmluaXQocGFyYW1ldGVycyk7XG4gICAgICAgIGlmICh0eXBlb2YgcGFyYW1ldGVycy5taW5pbXVtQm9keVNpemUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aGlzLm1pbmltdW1Cb2R5U2l6ZSA9IHBhcmFtZXRlcnMubWluaW11bUJvZHlTaXplO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgcGFyYW1ldGVycy5tYXhpbXVtQm9keVNpemUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aGlzLm1heGltdW1Cb2R5U2l6ZSA9IHBhcmFtZXRlcnMubWF4aW11bUJvZHlTaXplO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYm9keVBhcnQgPSB0aGlzLmdldEJvZHlDb21wb25lbnQoKTtcbiAgICAgICAgdGhpcy5oZWFkZXJQYXJ0ID0gdGhpcy5nZXRIZWFkZXJDb21wb25lbnQoKTtcbiAgICAgICAgdGhpcy5ib2R5UGFydC5pbml0KE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcGFyYW1ldGVycyksIHsgYXBpOiB0aGlzLmFwaSB9KSk7XG4gICAgICAgIHRoaXMuaGVhZGVyUGFydC5pbml0KE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcGFyYW1ldGVycyksIHsgYXBpOiB0aGlzLmFwaSB9KSk7XG4gICAgICAgIChfYSA9IHRoaXMuYm9keSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmFwcGVuZCh0aGlzLmJvZHlQYXJ0LmVsZW1lbnQpO1xuICAgICAgICAoX2IgPSB0aGlzLmhlYWRlcikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmFwcGVuZCh0aGlzLmhlYWRlclBhcnQuZWxlbWVudCk7XG4gICAgICAgIGlmICh0eXBlb2YgcGFyYW1ldGVycy5pc0V4cGFuZGVkID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0RXhwYW5kZWQocGFyYW1ldGVycy5pc0V4cGFuZGVkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IHRoaXMuX3BhcmFtcztcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgc3VwZXIudG9KU09OKCkpLCB7IGhlYWRlckNvbXBvbmVudDogdGhpcy5oZWFkZXJDb21wb25lbnQsIHRpdGxlOiBwYXJhbXMudGl0bGUgfSk7XG4gICAgfVxuICAgIHJlbmRlck9uY2UoKSB7XG4gICAgICAgIHRoaXMuaGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRoaXMuaGVhZGVyLnRhYkluZGV4ID0gMDtcbiAgICAgICAgdGhpcy5oZWFkZXIuY2xhc3NOYW1lID0gJ2R2LXBhbmUtaGVhZGVyJztcbiAgICAgICAgdGhpcy5oZWFkZXIuc3R5bGUuaGVpZ2h0ID0gYCR7dGhpcy5oZWFkZXJTaXplfXB4YDtcbiAgICAgICAgdGhpcy5oZWFkZXIuc3R5bGUubGluZUhlaWdodCA9IGAke3RoaXMuaGVhZGVyU2l6ZX1weGA7XG4gICAgICAgIHRoaXMuaGVhZGVyLnN0eWxlLm1pbkhlaWdodCA9IGAke3RoaXMuaGVhZGVyU2l6ZX1weGA7XG4gICAgICAgIHRoaXMuaGVhZGVyLnN0eWxlLm1heEhlaWdodCA9IGAke3RoaXMuaGVhZGVyU2l6ZX1weGA7XG4gICAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmhlYWRlcik7XG4gICAgICAgIHRoaXMuYm9keSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0aGlzLmJvZHkuY2xhc3NOYW1lID0gJ2R2LXBhbmUtYm9keSc7XG4gICAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmJvZHkpO1xuICAgIH1cbiAgICAvLyBUT0RPIHNsaWdodGx5IGhhY2t5IGJ5LXBhc3Mgb2YgdGhlIGNvbXBvbmVudCB0byBjcmVhdGUgYSBib2R5IGFuZCBoZWFkZXIgY29tcG9uZW50XG4gICAgZ2V0Q29tcG9uZW50KCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdXBkYXRlOiAocGFyYW1zKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgICAgICAgICAoX2EgPSB0aGlzLmJvZHlQYXJ0KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudXBkYXRlKHsgcGFyYW1zIH0pO1xuICAgICAgICAgICAgICAgIChfYiA9IHRoaXMuaGVhZGVyUGFydCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnVwZGF0ZSh7IHBhcmFtcyB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkaXNwb3NlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgICAgICAgICAoX2EgPSB0aGlzLmJvZHlQYXJ0KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIChfYiA9IHRoaXMuaGVhZGVyUGFydCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxufVxuIiwidmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5pbXBvcnQgeyBhZGRTdHlsZXMgfSBmcm9tICcuL2RvbSc7XG5pbXBvcnQgeyBFbWl0dGVyLCBhZGREaXNwb3NhYmxlV2luZG93TGlzdGVuZXIgfSBmcm9tICcuL2V2ZW50cyc7XG5pbXBvcnQgeyBDb21wb3NpdGVEaXNwb3NhYmxlLCBEaXNwb3NhYmxlIH0gZnJvbSAnLi9saWZlY3ljbGUnO1xuZXhwb3J0IGNsYXNzIFBvcG91dFdpbmRvdyBleHRlbmRzIENvbXBvc2l0ZURpc3Bvc2FibGUge1xuICAgIGdldCB3aW5kb3coKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHJldHVybiAoX2IgPSAoX2EgPSB0aGlzLl93aW5kb3cpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS52YWx1ZSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogbnVsbDtcbiAgICB9XG4gICAgY29uc3RydWN0b3IodGFyZ2V0LCBjbGFzc05hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgIHRoaXMuY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLl9vbldpbGxDbG9zZSA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25XaWxsQ2xvc2UgPSB0aGlzLl9vbldpbGxDbG9zZS5ldmVudDtcbiAgICAgICAgdGhpcy5fb25EaWRDbG9zZSA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRDbG9zZSA9IHRoaXMuX29uRGlkQ2xvc2UuZXZlbnQ7XG4gICAgICAgIHRoaXMuX3dpbmRvdyA9IG51bGw7XG4gICAgICAgIHRoaXMuYWRkRGlzcG9zYWJsZXModGhpcy5fb25XaWxsQ2xvc2UsIHRoaXMuX29uRGlkQ2xvc2UsIHtcbiAgICAgICAgICAgIGRpc3Bvc2U6ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZGltZW5zaW9ucygpIHtcbiAgICAgICAgaWYgKCF0aGlzLl93aW5kb3cpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxlZnQgPSB0aGlzLl93aW5kb3cudmFsdWUuc2NyZWVuWDtcbiAgICAgICAgY29uc3QgdG9wID0gdGhpcy5fd2luZG93LnZhbHVlLnNjcmVlblk7XG4gICAgICAgIGNvbnN0IHdpZHRoID0gdGhpcy5fd2luZG93LnZhbHVlLmlubmVyV2lkdGg7XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuX3dpbmRvdy52YWx1ZS5pbm5lckhlaWdodDtcbiAgICAgICAgcmV0dXJuIHsgdG9wLCBsZWZ0LCB3aWR0aCwgaGVpZ2h0IH07XG4gICAgfVxuICAgIGNsb3NlKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBpZiAodGhpcy5fd2luZG93KSB7XG4gICAgICAgICAgICB0aGlzLl9vbldpbGxDbG9zZS5maXJlKCk7XG4gICAgICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLm9wdGlvbnMpLm9uV2lsbENsb3NlKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwge1xuICAgICAgICAgICAgICAgIGlkOiB0aGlzLnRhcmdldCxcbiAgICAgICAgICAgICAgICB3aW5kb3c6IHRoaXMuX3dpbmRvdy52YWx1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5fd2luZG93LmRpc3Bvc2FibGUuZGlzcG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5fd2luZG93ID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX29uRGlkQ2xvc2UuZmlyZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIG9wZW4oKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fd2luZG93KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnN0YW5jZSBvZiBwb3BvdXQgd2luZG93IGlzIGFscmVhZHkgb3BlbicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdXJsID0gYCR7dGhpcy5vcHRpb25zLnVybH1gO1xuICAgICAgICAgICAgY29uc3QgZmVhdHVyZXMgPSBPYmplY3QuZW50cmllcyh7XG4gICAgICAgICAgICAgICAgdG9wOiB0aGlzLm9wdGlvbnMudG9wLFxuICAgICAgICAgICAgICAgIGxlZnQ6IHRoaXMub3B0aW9ucy5sZWZ0LFxuICAgICAgICAgICAgICAgIHdpZHRoOiB0aGlzLm9wdGlvbnMud2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLm9wdGlvbnMuaGVpZ2h0LFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAubWFwKChba2V5LCB2YWx1ZV0pID0+IGAke2tleX09JHt2YWx1ZX1gKVxuICAgICAgICAgICAgICAgIC5qb2luKCcsJyk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dpbmRvdy9vcGVuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnN0IGV4dGVybmFsV2luZG93ID0gd2luZG93Lm9wZW4odXJsLCB0aGlzLnRhcmdldCwgZmVhdHVyZXMpO1xuICAgICAgICAgICAgaWYgKCFleHRlcm5hbFdpbmRvdykge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFBvcHVwIGJsb2NrZWRcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGRpc3Bvc2FibGUgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpO1xuICAgICAgICAgICAgdGhpcy5fd2luZG93ID0geyB2YWx1ZTogZXh0ZXJuYWxXaW5kb3csIGRpc3Bvc2FibGUgfTtcbiAgICAgICAgICAgIGRpc3Bvc2FibGUuYWRkRGlzcG9zYWJsZXMoRGlzcG9zYWJsZS5mcm9tKCgpID0+IHtcbiAgICAgICAgICAgICAgICBleHRlcm5hbFdpbmRvdy5jbG9zZSgpO1xuICAgICAgICAgICAgfSksIGFkZERpc3Bvc2FibGVXaW5kb3dMaXN0ZW5lcih3aW5kb3csICdiZWZvcmV1bmxvYWQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogYmVmb3JlIHRoZSBtYWluIHdpbmRvdyBjbG9zZXMgd2Ugc2hvdWxkIGNsb3NlIHRoaXMgcG9wdXAgdG9vXG4gICAgICAgICAgICAgICAgICogdG8gYmUgZ29vZCBjaXRpemVuc1xuICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2luZG93L2JlZm9yZXVubG9hZF9ldmVudFxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY3JlYXRlUG9wb3V0V2luZG93Q29udGFpbmVyKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5jbGFzc05hbWUpIHtcbiAgICAgICAgICAgICAgICBjb250YWluZXIuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLm9wdGlvbnMpLm9uRGlkT3BlbikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIHtcbiAgICAgICAgICAgICAgICBpZDogdGhpcy50YXJnZXQsXG4gICAgICAgICAgICAgICAgd2luZG93OiBleHRlcm5hbFdpbmRvdyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICBleHRlcm5hbFdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd1bmxvYWQnLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiBwYWdlIGZhaWxzIHRvIGxvYWQgYmVmb3JlIHVubG9hZGluZ1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZXh0ZXJuYWxXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dpbmRvdy9sb2FkX2V2ZW50XG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXh0ZXJuYWxEb2N1bWVudCA9IGV4dGVybmFsV2luZG93LmRvY3VtZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZXJuYWxEb2N1bWVudC50aXRsZSA9IGRvY3VtZW50LnRpdGxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZXJuYWxEb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRTdHlsZXMoZXh0ZXJuYWxEb2N1bWVudCwgd2luZG93LmRvY3VtZW50LnN0eWxlU2hlZXRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICogYmVmb3JldW5sb2FkIG11c3QgYmUgcmVnaXN0ZXJlZCBhZnRlciBsb2FkIGZvciByZWFzb25zIEkgY291bGQgbm90IGRldGVybWluZVxuICAgICAgICAgICAgICAgICAgICAgICAgICogb3RoZXJ3aXNlIHRoZSBiZWZvcmV1bmxvYWQgZXZlbnQgd2lsbCBub3QgZmlyZSB3aGVuIHRoZSB3aW5kb3cgaXMgY2xvc2VkXG4gICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZERpc3Bvc2FibGVXaW5kb3dMaXN0ZW5lcihleHRlcm5hbFdpbmRvdywgJ2JlZm9yZXVubG9hZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XaW5kb3cvYmVmb3JldW5sb2FkX2V2ZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGNvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gb25seSBleGNlcHQgdGhpcyBpcyB0aGUgRE9NIGlzbid0IHNldHVwLiBlLmcuIGluIGEgaW4gY29ycmVjdGx5IGNvbmZpZ3VyZWQgdGVzdFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgY3JlYXRlUG9wb3V0V2luZG93Q29udGFpbmVyKCkge1xuICAgICAgICBjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKCdkdi1wb3BvdXQtd2luZG93Jyk7XG4gICAgICAgIGVsLmlkID0gJ2R2LXBvcG91dC13aW5kb3cnO1xuICAgICAgICBlbC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgICAgIGVsLnN0eWxlLndpZHRoID0gJzEwMCUnO1xuICAgICAgICBlbC5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XG4gICAgICAgIGVsLnN0eWxlLnRvcCA9ICcwcHgnO1xuICAgICAgICBlbC5zdHlsZS5sZWZ0ID0gJzBweCc7XG4gICAgICAgIHJldHVybiBlbDtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBpc0luRG9jdW1lbnQsIHdhdGNoRWxlbWVudFJlc2l6ZSB9IGZyb20gJy4vZG9tJztcbmltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUgfSBmcm9tICcuL2xpZmVjeWNsZSc7XG5leHBvcnQgY2xhc3MgUmVzaXphYmxlIGV4dGVuZHMgQ29tcG9zaXRlRGlzcG9zYWJsZSB7XG4gICAgZ2V0IGVsZW1lbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbGVtZW50O1xuICAgIH1cbiAgICBnZXQgZGlzYWJsZVJlc2l6aW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGlzYWJsZVJlc2l6aW5nO1xuICAgIH1cbiAgICBzZXQgZGlzYWJsZVJlc2l6aW5nKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2Rpc2FibGVSZXNpemluZyA9IHZhbHVlO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihwYXJlbnRFbGVtZW50LCBkaXNhYmxlUmVzaXppbmcgPSBmYWxzZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl9kaXNhYmxlUmVzaXppbmcgPSBkaXNhYmxlUmVzaXppbmc7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBwYXJlbnRFbGVtZW50O1xuICAgICAgICB0aGlzLmFkZERpc3Bvc2FibGVzKHdhdGNoRWxlbWVudFJlc2l6ZSh0aGlzLl9lbGVtZW50LCAoZW50cnkpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzRGlzcG9zZWQpIHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiByZXNpemUgaXMgZGVsYXllZCB0aHJvdWdoIHJlcXVlc3RBbmltYXRpb25GcmFtZSBzbyB0aGVyZSBpcyBhIHNtYWxsIGNoYW5jZVxuICAgICAgICAgICAgICAgICAqIHRoZSBjb21wb25lbnQgaGFzIGFscmVhZHkgYmVlbiBkaXNwb3NlZCBvZlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmRpc2FibGVSZXNpemluZykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5fZWxlbWVudC5vZmZzZXRQYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBvZmZzZXRQYXJlbnQgPT09IG51bGwgaXMgZXF1aXZhbGVudCB0byBkaXNwbGF5OiBub25lIGJlaW5nIHNldCBvbiB0aGUgZWxlbWVudCBvciBvbmVcbiAgICAgICAgICAgICAgICAgKiBvZiBpdCdzIHBhcmVudHMuIEluIHRoZSBkaXNwbGF5OiBub25lIGNhc2UgdGhlIHNpemUgd2lsbCBiZWNvbWUgKDAsIDApIHdoaWNoIHdlIGRvXG4gICAgICAgICAgICAgICAgICogbm90IHdhbnQgdG8gcHJvcGFnYXRlLlxuICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSFRNTEVsZW1lbnQvb2Zmc2V0UGFyZW50XG4gICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgKiBZb3UgY291bGQgdXNlIGNoZWNrVmlzaWJpbGl0eSgpIGJ1dCBhdCB0aGUgdGltZSBvZiB3cml0aW5nIGl0J3Mgbm90IHN1cHBvcnRlZCBhY3Jvc3NcbiAgICAgICAgICAgICAgICAgKiBhbGwgQnJvd3NlcnNcbiAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0VsZW1lbnQvY2hlY2tWaXNpYmlsaXR5XG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc0luRG9jdW1lbnQodGhpcy5fZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBzaW5jZSB0aGUgZXZlbnQgaXMgZGlzcGF0Y2hlZCB0aHJvdWdoIHJlcXVlc3RBbmltYXRpb25GcmFtZSB0aGVyZSBpcyBhIHNtYWxsIGNoYW5jZVxuICAgICAgICAgICAgICAgICAqIHRoZSBjb21wb25lbnQgaXMgbm8gbG9uZ2VyIGF0dGFjaGVkIHRvIHRoZSBET00sIGlmIHRoYXQgaXMgdGhlIGNhc2UgdGhlIGRpbWVuc2lvbnNcbiAgICAgICAgICAgICAgICAgKiBhcmUgbW9zdGx5IGxpa2VseSBhbGwgemVybyBhbmQgbWVhbmluZ2xlc3MuIHdlIHNob3VsZCBza2lwIHRoaXMgY2FzZS5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IGVudHJ5LmNvbnRlbnRSZWN0O1xuICAgICAgICAgICAgdGhpcy5sYXlvdXQod2lkdGgsIGhlaWdodCk7XG4gICAgICAgIH0pKTtcbiAgICB9XG59XG4iLCJleHBvcnQgY29uc3QgUFJPUEVSVFlfS0VZU19TUExJVFZJRVcgPSAoKCkgPT4ge1xuICAgIC8qKlxuICAgICAqIGJ5IHJlYWRvbmcgdGhlIGtleXMgZnJvbSBhbiBlbXB0eSB2YWx1ZSBvYmplY3QgVHlwZVNjcmlwdCB3aWxsIGVycm9yXG4gICAgICogd2hlbiB3ZSBhZGQgb3IgcmVtb3ZlIG5ldyBwcm9wZXJ0aWVzIHRvIGBEb2Nrdmlld09wdGlvbnNgXG4gICAgICovXG4gICAgY29uc3QgcHJvcGVydGllcyA9IHtcbiAgICAgICAgb3JpZW50YXRpb246IHVuZGVmaW5lZCxcbiAgICAgICAgZGVzY3JpcHRvcjogdW5kZWZpbmVkLFxuICAgICAgICBwcm9wb3J0aW9uYWxMYXlvdXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgc3R5bGVzOiB1bmRlZmluZWQsXG4gICAgICAgIG1hcmdpbjogdW5kZWZpbmVkLFxuICAgICAgICBkaXNhYmxlQXV0b1Jlc2l6aW5nOiB1bmRlZmluZWQsXG4gICAgICAgIGNsYXNzTmFtZTogdW5kZWZpbmVkLFxuICAgIH07XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BlcnRpZXMpO1xufSkoKTtcbiIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBBY2NyZWRpdGF0aW9uOiBUaGlzIGZpbGUgaXMgbGFyZ2x5IGJhc2VkIHVwb24gdGhlIE1JVCBsaWNlbmNlZCBWU0NvZGUgc291cmNlY29kZSBmb3VuZCBhdDpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvdnNjb2RlL3RyZWUvbWFpbi9zcmMvdnMvYmFzZS9icm93c2VyL3VpL3NwbGl0dmlld1xuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyByZW1vdmVDbGFzc2VzLCBhZGRDbGFzc2VzLCB0b2dnbGVDbGFzcywgZGlzYWJsZUlmcmFtZVBvaW50RXZlbnRzLCB9IGZyb20gJy4uL2RvbSc7XG5pbXBvcnQgeyBFbWl0dGVyIH0gZnJvbSAnLi4vZXZlbnRzJztcbmltcG9ydCB7IHB1c2hUb1N0YXJ0LCBwdXNoVG9FbmQsIGZpcnN0SW5kZXggfSBmcm9tICcuLi9hcnJheSc7XG5pbXBvcnQgeyByYW5nZSwgY2xhbXAgfSBmcm9tICcuLi9tYXRoJztcbmltcG9ydCB7IFZpZXdJdGVtIH0gZnJvbSAnLi92aWV3SXRlbSc7XG5leHBvcnQgdmFyIE9yaWVudGF0aW9uO1xuKGZ1bmN0aW9uIChPcmllbnRhdGlvbikge1xuICAgIE9yaWVudGF0aW9uW1wiSE9SSVpPTlRBTFwiXSA9IFwiSE9SSVpPTlRBTFwiO1xuICAgIE9yaWVudGF0aW9uW1wiVkVSVElDQUxcIl0gPSBcIlZFUlRJQ0FMXCI7XG59KShPcmllbnRhdGlvbiB8fCAoT3JpZW50YXRpb24gPSB7fSkpO1xuZXhwb3J0IHZhciBTYXNoU3RhdGU7XG4oZnVuY3Rpb24gKFNhc2hTdGF0ZSkge1xuICAgIFNhc2hTdGF0ZVtTYXNoU3RhdGVbXCJNQVhJTVVNXCJdID0gMF0gPSBcIk1BWElNVU1cIjtcbiAgICBTYXNoU3RhdGVbU2FzaFN0YXRlW1wiTUlOSU1VTVwiXSA9IDFdID0gXCJNSU5JTVVNXCI7XG4gICAgU2FzaFN0YXRlW1Nhc2hTdGF0ZVtcIkRJU0FCTEVEXCJdID0gMl0gPSBcIkRJU0FCTEVEXCI7XG4gICAgU2FzaFN0YXRlW1Nhc2hTdGF0ZVtcIkVOQUJMRURcIl0gPSAzXSA9IFwiRU5BQkxFRFwiO1xufSkoU2FzaFN0YXRlIHx8IChTYXNoU3RhdGUgPSB7fSkpO1xuZXhwb3J0IHZhciBMYXlvdXRQcmlvcml0eTtcbihmdW5jdGlvbiAoTGF5b3V0UHJpb3JpdHkpIHtcbiAgICBMYXlvdXRQcmlvcml0eVtcIkxvd1wiXSA9IFwibG93XCI7XG4gICAgTGF5b3V0UHJpb3JpdHlbXCJIaWdoXCJdID0gXCJoaWdoXCI7XG4gICAgTGF5b3V0UHJpb3JpdHlbXCJOb3JtYWxcIl0gPSBcIm5vcm1hbFwiO1xufSkoTGF5b3V0UHJpb3JpdHkgfHwgKExheW91dFByaW9yaXR5ID0ge30pKTtcbmV4cG9ydCB2YXIgU2l6aW5nO1xuKGZ1bmN0aW9uIChTaXppbmcpIHtcbiAgICBTaXppbmcuRGlzdHJpYnV0ZSA9IHsgdHlwZTogJ2Rpc3RyaWJ1dGUnIH07XG4gICAgZnVuY3Rpb24gU3BsaXQoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogJ3NwbGl0JywgaW5kZXggfTtcbiAgICB9XG4gICAgU2l6aW5nLlNwbGl0ID0gU3BsaXQ7XG4gICAgZnVuY3Rpb24gSW52aXNpYmxlKGNhY2hlZFZpc2libGVTaXplKSB7XG4gICAgICAgIHJldHVybiB7IHR5cGU6ICdpbnZpc2libGUnLCBjYWNoZWRWaXNpYmxlU2l6ZSB9O1xuICAgIH1cbiAgICBTaXppbmcuSW52aXNpYmxlID0gSW52aXNpYmxlO1xufSkoU2l6aW5nIHx8IChTaXppbmcgPSB7fSkpO1xuZXhwb3J0IGNsYXNzIFNwbGl0dmlldyB7XG4gICAgZ2V0IGNvbnRlbnRTaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29udGVudFNpemU7XG4gICAgfVxuICAgIGdldCBzaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2l6ZTtcbiAgICB9XG4gICAgc2V0IHNpemUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fc2l6ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgb3J0aG9nb25hbFNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vcnRob2dvbmFsU2l6ZTtcbiAgICB9XG4gICAgc2V0IG9ydGhvZ29uYWxTaXplKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX29ydGhvZ29uYWxTaXplID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBsZW5ndGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXdJdGVtcy5sZW5ndGg7XG4gICAgfVxuICAgIGdldCBwcm9wb3J0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb3BvcnRpb25zID8gWy4uLnRoaXMuX3Byb3BvcnRpb25zXSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZ2V0IG9yaWVudGF0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3JpZW50YXRpb247XG4gICAgfVxuICAgIHNldCBvcmllbnRhdGlvbih2YWx1ZSkge1xuICAgICAgICB0aGlzLl9vcmllbnRhdGlvbiA9IHZhbHVlO1xuICAgICAgICBjb25zdCB0bXAgPSB0aGlzLnNpemU7XG4gICAgICAgIHRoaXMuc2l6ZSA9IHRoaXMub3J0aG9nb25hbFNpemU7XG4gICAgICAgIHRoaXMub3J0aG9nb25hbFNpemUgPSB0bXA7XG4gICAgICAgIHJlbW92ZUNsYXNzZXModGhpcy5lbGVtZW50LCAnZHYtaG9yaXpvbnRhbCcsICdkdi12ZXJ0aWNhbCcpO1xuICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLm9yaWVudGF0aW9uID09IE9yaWVudGF0aW9uLkhPUklaT05UQUxcbiAgICAgICAgICAgID8gJ2R2LWhvcml6b250YWwnXG4gICAgICAgICAgICA6ICdkdi12ZXJ0aWNhbCcpO1xuICAgIH1cbiAgICBnZXQgbWluaW11bVNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXdJdGVtcy5yZWR1Y2UoKHIsIGl0ZW0pID0+IHIgKyBpdGVtLm1pbmltdW1TaXplLCAwKTtcbiAgICB9XG4gICAgZ2V0IG1heGltdW1TaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sZW5ndGggPT09IDBcbiAgICAgICAgICAgID8gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZXG4gICAgICAgICAgICA6IHRoaXMudmlld0l0ZW1zLnJlZHVjZSgociwgaXRlbSkgPT4gciArIGl0ZW0ubWF4aW11bVNpemUsIDApO1xuICAgIH1cbiAgICBnZXQgc3RhcnRTbmFwcGluZ0VuYWJsZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGFydFNuYXBwaW5nRW5hYmxlZDtcbiAgICB9XG4gICAgc2V0IHN0YXJ0U25hcHBpbmdFbmFibGVkKHN0YXJ0U25hcHBpbmdFbmFibGVkKSB7XG4gICAgICAgIGlmICh0aGlzLl9zdGFydFNuYXBwaW5nRW5hYmxlZCA9PT0gc3RhcnRTbmFwcGluZ0VuYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zdGFydFNuYXBwaW5nRW5hYmxlZCA9IHN0YXJ0U25hcHBpbmdFbmFibGVkO1xuICAgICAgICB0aGlzLnVwZGF0ZVNhc2hFbmFibGVtZW50KCk7XG4gICAgfVxuICAgIGdldCBlbmRTbmFwcGluZ0VuYWJsZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbmRTbmFwcGluZ0VuYWJsZWQ7XG4gICAgfVxuICAgIHNldCBlbmRTbmFwcGluZ0VuYWJsZWQoZW5kU25hcHBpbmdFbmFibGVkKSB7XG4gICAgICAgIGlmICh0aGlzLl9lbmRTbmFwcGluZ0VuYWJsZWQgPT09IGVuZFNuYXBwaW5nRW5hYmxlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2VuZFNuYXBwaW5nRW5hYmxlZCA9IGVuZFNuYXBwaW5nRW5hYmxlZDtcbiAgICAgICAgdGhpcy51cGRhdGVTYXNoRW5hYmxlbWVudCgpO1xuICAgIH1cbiAgICBnZXQgZGlzYWJsZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kaXNhYmxlZDtcbiAgICB9XG4gICAgc2V0IGRpc2FibGVkKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2Rpc2FibGVkID0gdmFsdWU7XG4gICAgICAgIHRvZ2dsZUNsYXNzKHRoaXMuZWxlbWVudCwgJ2R2LXNwbGl0dmlldy1kaXNhYmxlZCcsIHZhbHVlKTtcbiAgICB9XG4gICAgZ2V0IG1hcmdpbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hcmdpbjtcbiAgICB9XG4gICAgc2V0IG1hcmdpbih2YWx1ZSkge1xuICAgICAgICB0aGlzLl9tYXJnaW4gPSB2YWx1ZTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgICB0aGlzLnZpZXdJdGVtcyA9IFtdO1xuICAgICAgICB0aGlzLnNhc2hlcyA9IFtdO1xuICAgICAgICB0aGlzLl9zaXplID0gMDtcbiAgICAgICAgdGhpcy5fb3J0aG9nb25hbFNpemUgPSAwO1xuICAgICAgICB0aGlzLl9jb250ZW50U2l6ZSA9IDA7XG4gICAgICAgIHRoaXMuX3Byb3BvcnRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9zdGFydFNuYXBwaW5nRW5hYmxlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX2VuZFNuYXBwaW5nRW5hYmxlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX2Rpc2FibGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX21hcmdpbiA9IDA7XG4gICAgICAgIHRoaXMuX29uRGlkU2FzaEVuZCA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRTYXNoRW5kID0gdGhpcy5fb25EaWRTYXNoRW5kLmV2ZW50O1xuICAgICAgICB0aGlzLl9vbkRpZEFkZFZpZXcgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRGlkQWRkVmlldyA9IHRoaXMuX29uRGlkQWRkVmlldy5ldmVudDtcbiAgICAgICAgdGhpcy5fb25EaWRSZW1vdmVWaWV3ID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZFJlbW92ZVZpZXcgPSB0aGlzLl9vbkRpZFJlbW92ZVZpZXcuZXZlbnQ7XG4gICAgICAgIHRoaXMucmVzaXplID0gKGluZGV4LCBkZWx0YSwgc2l6ZXMgPSB0aGlzLnZpZXdJdGVtcy5tYXAoKHgpID0+IHguc2l6ZSksIGxvd1ByaW9yaXR5SW5kZXhlcywgaGlnaFByaW9yaXR5SW5kZXhlcywgb3ZlcmxvYWRNaW5EZWx0YSA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWSwgb3ZlcmxvYWRNYXhEZWx0YSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSwgc25hcEJlZm9yZSwgc25hcEFmdGVyKSA9PiB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID4gdGhpcy52aWV3SXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB1cEluZGV4ZXMgPSByYW5nZShpbmRleCwgLTEpO1xuICAgICAgICAgICAgY29uc3QgZG93bkluZGV4ZXMgPSByYW5nZShpbmRleCArIDEsIHRoaXMudmlld0l0ZW1zLmxlbmd0aCk7XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgaWYgKGhpZ2hQcmlvcml0eUluZGV4ZXMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgaGlnaFByaW9yaXR5SW5kZXhlcykge1xuICAgICAgICAgICAgICAgICAgICBwdXNoVG9TdGFydCh1cEluZGV4ZXMsIGkpO1xuICAgICAgICAgICAgICAgICAgICBwdXNoVG9TdGFydChkb3duSW5kZXhlcywgaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxvd1ByaW9yaXR5SW5kZXhlcykge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaSBvZiBsb3dQcmlvcml0eUluZGV4ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcHVzaFRvRW5kKHVwSW5kZXhlcywgaSk7XG4gICAgICAgICAgICAgICAgICAgIHB1c2hUb0VuZChkb3duSW5kZXhlcywgaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIGNvbnN0IHVwSXRlbXMgPSB1cEluZGV4ZXMubWFwKChpKSA9PiB0aGlzLnZpZXdJdGVtc1tpXSk7XG4gICAgICAgICAgICBjb25zdCB1cFNpemVzID0gdXBJbmRleGVzLm1hcCgoaSkgPT4gc2l6ZXNbaV0pO1xuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIGNvbnN0IGRvd25JdGVtcyA9IGRvd25JbmRleGVzLm1hcCgoaSkgPT4gdGhpcy52aWV3SXRlbXNbaV0pO1xuICAgICAgICAgICAgY29uc3QgZG93blNpemVzID0gZG93bkluZGV4ZXMubWFwKChpKSA9PiBzaXplc1tpXSk7XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgY29uc3QgbWluRGVsdGFVcCA9IHVwSW5kZXhlcy5yZWR1Y2UoKF8sIGkpID0+IF8gKyB0aGlzLnZpZXdJdGVtc1tpXS5taW5pbXVtU2l6ZSAtIHNpemVzW2ldLCAwKTtcbiAgICAgICAgICAgIGNvbnN0IG1heERlbHRhVXAgPSB1cEluZGV4ZXMucmVkdWNlKChfLCBpKSA9PiBfICsgdGhpcy52aWV3SXRlbXNbaV0ubWF4aW11bVNpemUgLSBzaXplc1tpXSwgMCk7XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgY29uc3QgbWF4RGVsdGFEb3duID0gZG93bkluZGV4ZXMubGVuZ3RoID09PSAwXG4gICAgICAgICAgICAgICAgPyBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFlcbiAgICAgICAgICAgICAgICA6IGRvd25JbmRleGVzLnJlZHVjZSgoXywgaSkgPT4gXyArIHNpemVzW2ldIC0gdGhpcy52aWV3SXRlbXNbaV0ubWluaW11bVNpemUsIDApO1xuICAgICAgICAgICAgY29uc3QgbWluRGVsdGFEb3duID0gZG93bkluZGV4ZXMubGVuZ3RoID09PSAwXG4gICAgICAgICAgICAgICAgPyBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFlcbiAgICAgICAgICAgICAgICA6IGRvd25JbmRleGVzLnJlZHVjZSgoXywgaSkgPT4gXyArIHNpemVzW2ldIC0gdGhpcy52aWV3SXRlbXNbaV0ubWF4aW11bVNpemUsIDApO1xuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIGNvbnN0IG1pbkRlbHRhID0gTWF0aC5tYXgobWluRGVsdGFVcCwgbWluRGVsdGFEb3duKTtcbiAgICAgICAgICAgIGNvbnN0IG1heERlbHRhID0gTWF0aC5taW4obWF4RGVsdGFEb3duLCBtYXhEZWx0YVVwKTtcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICBsZXQgc25hcHBlZCA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHNuYXBCZWZvcmUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzbmFwVmlldyA9IHRoaXMudmlld0l0ZW1zW3NuYXBCZWZvcmUuaW5kZXhdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZpc2libGUgPSBkZWx0YSA+PSBzbmFwQmVmb3JlLmxpbWl0RGVsdGE7XG4gICAgICAgICAgICAgICAgc25hcHBlZCA9IHZpc2libGUgIT09IHNuYXBWaWV3LnZpc2libGU7XG4gICAgICAgICAgICAgICAgc25hcFZpZXcuc2V0VmlzaWJsZSh2aXNpYmxlLCBzbmFwQmVmb3JlLnNpemUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFzbmFwcGVkICYmIHNuYXBBZnRlcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNuYXBWaWV3ID0gdGhpcy52aWV3SXRlbXNbc25hcEFmdGVyLmluZGV4XTtcbiAgICAgICAgICAgICAgICBjb25zdCB2aXNpYmxlID0gZGVsdGEgPCBzbmFwQWZ0ZXIubGltaXREZWx0YTtcbiAgICAgICAgICAgICAgICBzbmFwcGVkID0gdmlzaWJsZSAhPT0gc25hcFZpZXcudmlzaWJsZTtcbiAgICAgICAgICAgICAgICBzbmFwVmlldy5zZXRWaXNpYmxlKHZpc2libGUsIHNuYXBBZnRlci5zaXplKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzbmFwcGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVzaXplKGluZGV4LCBkZWx0YSwgc2l6ZXMsIGxvd1ByaW9yaXR5SW5kZXhlcywgaGlnaFByaW9yaXR5SW5kZXhlcywgb3ZlcmxvYWRNaW5EZWx0YSwgb3ZlcmxvYWRNYXhEZWx0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgY29uc3QgdGVudGF0aXZlRGVsdGEgPSBjbGFtcChkZWx0YSwgbWluRGVsdGEsIG1heERlbHRhKTtcbiAgICAgICAgICAgIGxldCBhY3R1YWxEZWx0YSA9IDA7XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgbGV0IGRlbHRhVXAgPSB0ZW50YXRpdmVEZWx0YTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdXBJdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSB1cEl0ZW1zW2ldO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNpemUgPSBjbGFtcCh1cFNpemVzW2ldICsgZGVsdGFVcCwgaXRlbS5taW5pbXVtU2l6ZSwgaXRlbS5tYXhpbXVtU2l6ZSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgdmlld0RlbHRhID0gc2l6ZSAtIHVwU2l6ZXNbaV07XG4gICAgICAgICAgICAgICAgYWN0dWFsRGVsdGEgKz0gdmlld0RlbHRhO1xuICAgICAgICAgICAgICAgIGRlbHRhVXAgLT0gdmlld0RlbHRhO1xuICAgICAgICAgICAgICAgIGl0ZW0uc2l6ZSA9IHNpemU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgbGV0IGRlbHRhRG93biA9IGFjdHVhbERlbHRhO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkb3duSXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0gZG93bkl0ZW1zW2ldO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNpemUgPSBjbGFtcChkb3duU2l6ZXNbaV0gLSBkZWx0YURvd24sIGl0ZW0ubWluaW11bVNpemUsIGl0ZW0ubWF4aW11bVNpemUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZpZXdEZWx0YSA9IHNpemUgLSBkb3duU2l6ZXNbaV07XG4gICAgICAgICAgICAgICAgZGVsdGFEb3duICs9IHZpZXdEZWx0YTtcbiAgICAgICAgICAgICAgICBpdGVtLnNpemUgPSBzaXplO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIHJldHVybiBkZWx0YTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fb3JpZW50YXRpb24gPSAoX2EgPSBvcHRpb25zLm9yaWVudGF0aW9uKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBPcmllbnRhdGlvbi5WRVJUSUNBTDtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gdGhpcy5jcmVhdGVDb250YWluZXIoKTtcbiAgICAgICAgdGhpcy5tYXJnaW4gPSAoX2IgPSBvcHRpb25zLm1hcmdpbikgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogMDtcbiAgICAgICAgdGhpcy5wcm9wb3J0aW9uYWxMYXlvdXQgPVxuICAgICAgICAgICAgb3B0aW9ucy5wcm9wb3J0aW9uYWxMYXlvdXQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gdHJ1ZVxuICAgICAgICAgICAgICAgIDogISFvcHRpb25zLnByb3BvcnRpb25hbExheW91dDtcbiAgICAgICAgdGhpcy52aWV3Q29udGFpbmVyID0gdGhpcy5jcmVhdGVWaWV3Q29udGFpbmVyKCk7XG4gICAgICAgIHRoaXMuc2FzaENvbnRhaW5lciA9IHRoaXMuY3JlYXRlU2FzaENvbnRhaW5lcigpO1xuICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5zYXNoQ29udGFpbmVyKTtcbiAgICAgICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMudmlld0NvbnRhaW5lcik7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudCk7XG4gICAgICAgIHRoaXMuc3R5bGUob3B0aW9ucy5zdHlsZXMpO1xuICAgICAgICAvLyBXZSBoYXZlIGFuIGV4aXN0aW5nIHNldCBvZiB2aWV3LCBhZGQgdGhlbSBub3dcbiAgICAgICAgaWYgKG9wdGlvbnMuZGVzY3JpcHRvcikge1xuICAgICAgICAgICAgdGhpcy5fc2l6ZSA9IG9wdGlvbnMuZGVzY3JpcHRvci5zaXplO1xuICAgICAgICAgICAgb3B0aW9ucy5kZXNjcmlwdG9yLnZpZXdzLmZvckVhY2goKHZpZXdEZXNjcmlwdG9yLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNpemluZyA9IHZpZXdEZXNjcmlwdG9yLnZpc2libGUgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgICAgICAgICB2aWV3RGVzY3JpcHRvci52aXNpYmxlXG4gICAgICAgICAgICAgICAgICAgID8gdmlld0Rlc2NyaXB0b3Iuc2l6ZVxuICAgICAgICAgICAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdpbnZpc2libGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGVkVmlzaWJsZVNpemU6IHZpZXdEZXNjcmlwdG9yLnNpemUsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY29uc3QgdmlldyA9IHZpZXdEZXNjcmlwdG9yLnZpZXc7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRWaWV3KHZpZXcsIHNpemluZywgaW5kZXgsIHRydWVcbiAgICAgICAgICAgICAgICAvLyB0cnVlIHNraXAgbGF5b3V0XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZSBjb250ZW50IHNpemUgYW5kIHByb3BvcnRpb25zIGZvciBmaXJzdCBsYXlvdXRcbiAgICAgICAgICAgIHRoaXMuX2NvbnRlbnRTaXplID0gdGhpcy52aWV3SXRlbXMucmVkdWNlKChyLCBpKSA9PiByICsgaS5zaXplLCAwKTtcbiAgICAgICAgICAgIHRoaXMuc2F2ZVByb3BvcnRpb25zKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3R5bGUoc3R5bGVzKSB7XG4gICAgICAgIGlmICgoc3R5bGVzID09PSBudWxsIHx8IHN0eWxlcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogc3R5bGVzLnNlcGFyYXRvckJvcmRlcikgPT09ICd0cmFuc3BhcmVudCcpIHtcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzZXModGhpcy5lbGVtZW50LCAnZHYtc2VwYXJhdG9yLWJvcmRlcicpO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLnJlbW92ZVByb3BlcnR5KCctLWR2LXNlcGFyYXRvci1ib3JkZXInKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGFkZENsYXNzZXModGhpcy5lbGVtZW50LCAnZHYtc2VwYXJhdG9yLWJvcmRlcicpO1xuICAgICAgICAgICAgaWYgKHN0eWxlcyA9PT0gbnVsbCB8fCBzdHlsZXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHN0eWxlcy5zZXBhcmF0b3JCb3JkZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoJy0tZHYtc2VwYXJhdG9yLWJvcmRlcicsIHN0eWxlcy5zZXBhcmF0b3JCb3JkZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlzVmlld1Zpc2libGUoaW5kZXgpIHtcbiAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLnZpZXdJdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW5kZXggb3V0IG9mIGJvdW5kcycpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZpZXdJdGVtID0gdGhpcy52aWV3SXRlbXNbaW5kZXhdO1xuICAgICAgICByZXR1cm4gdmlld0l0ZW0udmlzaWJsZTtcbiAgICB9XG4gICAgc2V0Vmlld1Zpc2libGUoaW5kZXgsIHZpc2libGUpIHtcbiAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLnZpZXdJdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW5kZXggb3V0IG9mIGJvdW5kcycpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZpZXdJdGVtID0gdGhpcy52aWV3SXRlbXNbaW5kZXhdO1xuICAgICAgICB2aWV3SXRlbS5zZXRWaXNpYmxlKHZpc2libGUsIHZpZXdJdGVtLnNpemUpO1xuICAgICAgICB0aGlzLmRpc3RyaWJ1dGVFbXB0eVNwYWNlKGluZGV4KTtcbiAgICAgICAgdGhpcy5sYXlvdXRWaWV3cygpO1xuICAgICAgICB0aGlzLnNhdmVQcm9wb3J0aW9ucygpO1xuICAgIH1cbiAgICBnZXRWaWV3U2l6ZShpbmRleCkge1xuICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHRoaXMudmlld0l0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXdJdGVtc1tpbmRleF0uc2l6ZTtcbiAgICB9XG4gICAgcmVzaXplVmlldyhpbmRleCwgc2l6ZSkge1xuICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHRoaXMudmlld0l0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGluZGV4ZXMgPSByYW5nZSh0aGlzLnZpZXdJdGVtcy5sZW5ndGgpLmZpbHRlcigoaSkgPT4gaSAhPT0gaW5kZXgpO1xuICAgICAgICBjb25zdCBsb3dQcmlvcml0eUluZGV4ZXMgPSBbXG4gICAgICAgICAgICAuLi5pbmRleGVzLmZpbHRlcigoaSkgPT4gdGhpcy52aWV3SXRlbXNbaV0ucHJpb3JpdHkgPT09IExheW91dFByaW9yaXR5LkxvdyksXG4gICAgICAgICAgICBpbmRleCxcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgaGlnaFByaW9yaXR5SW5kZXhlcyA9IGluZGV4ZXMuZmlsdGVyKChpKSA9PiB0aGlzLnZpZXdJdGVtc1tpXS5wcmlvcml0eSA9PT0gTGF5b3V0UHJpb3JpdHkuSGlnaCk7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLnZpZXdJdGVtc1tpbmRleF07XG4gICAgICAgIHNpemUgPSBNYXRoLnJvdW5kKHNpemUpO1xuICAgICAgICBzaXplID0gY2xhbXAoc2l6ZSwgaXRlbS5taW5pbXVtU2l6ZSwgTWF0aC5taW4oaXRlbS5tYXhpbXVtU2l6ZSwgdGhpcy5fc2l6ZSkpO1xuICAgICAgICBpdGVtLnNpemUgPSBzaXplO1xuICAgICAgICB0aGlzLnJlbGF5b3V0KGxvd1ByaW9yaXR5SW5kZXhlcywgaGlnaFByaW9yaXR5SW5kZXhlcyk7XG4gICAgfVxuICAgIGdldFZpZXdzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3SXRlbXMubWFwKCh4KSA9PiB4LnZpZXcpO1xuICAgIH1cbiAgICBvbkRpZENoYW5nZShpdGVtLCBzaXplKSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy52aWV3SXRlbXMuaW5kZXhPZihpdGVtKTtcbiAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLnZpZXdJdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzaXplID0gdHlwZW9mIHNpemUgPT09ICdudW1iZXInID8gc2l6ZSA6IGl0ZW0uc2l6ZTtcbiAgICAgICAgc2l6ZSA9IGNsYW1wKHNpemUsIGl0ZW0ubWluaW11bVNpemUsIGl0ZW0ubWF4aW11bVNpemUpO1xuICAgICAgICBpdGVtLnNpemUgPSBzaXplO1xuICAgICAgICBjb25zdCBpbmRleGVzID0gcmFuZ2UodGhpcy52aWV3SXRlbXMubGVuZ3RoKS5maWx0ZXIoKGkpID0+IGkgIT09IGluZGV4KTtcbiAgICAgICAgY29uc3QgbG93UHJpb3JpdHlJbmRleGVzID0gW1xuICAgICAgICAgICAgLi4uaW5kZXhlcy5maWx0ZXIoKGkpID0+IHRoaXMudmlld0l0ZW1zW2ldLnByaW9yaXR5ID09PSBMYXlvdXRQcmlvcml0eS5Mb3cpLFxuICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgIF07XG4gICAgICAgIGNvbnN0IGhpZ2hQcmlvcml0eUluZGV4ZXMgPSBpbmRleGVzLmZpbHRlcigoaSkgPT4gdGhpcy52aWV3SXRlbXNbaV0ucHJpb3JpdHkgPT09IExheW91dFByaW9yaXR5LkhpZ2gpO1xuICAgICAgICAvKipcbiAgICAgICAgICogYWRkIHRoaXMgdmlldyB3ZSBhcmUgY2hhbmdpbmcgdG8gdGhlIGxvdy1pbmRleCBsaXN0IHNpbmNlIHdlIGhhdmUgZGV0ZXJtaW5lZCB0aGUgc2l6ZVxuICAgICAgICAgKiBoZXJlIGFuZCBkb24ndCB3YW50IGl0IGNoYW5nZWRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVsYXlvdXQoWy4uLmxvd1ByaW9yaXR5SW5kZXhlcywgaW5kZXhdLCBoaWdoUHJpb3JpdHlJbmRleGVzKTtcbiAgICB9XG4gICAgYWRkVmlldyh2aWV3LCBzaXplID0geyB0eXBlOiAnZGlzdHJpYnV0ZScgfSwgaW5kZXggPSB0aGlzLnZpZXdJdGVtcy5sZW5ndGgsIHNraXBMYXlvdXQpIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGNvbnRhaW5lci5jbGFzc05hbWUgPSAnZHYtdmlldyc7XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh2aWV3LmVsZW1lbnQpO1xuICAgICAgICBsZXQgdmlld1NpemU7XG4gICAgICAgIGlmICh0eXBlb2Ygc2l6ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHZpZXdTaXplID0gc2l6ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzaXplLnR5cGUgPT09ICdzcGxpdCcpIHtcbiAgICAgICAgICAgIHZpZXdTaXplID0gdGhpcy5nZXRWaWV3U2l6ZShzaXplLmluZGV4KSAvIDI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc2l6ZS50eXBlID09PSAnaW52aXNpYmxlJykge1xuICAgICAgICAgICAgdmlld1NpemUgPSB7IGNhY2hlZFZpc2libGVTaXplOiBzaXplLmNhY2hlZFZpc2libGVTaXplIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2aWV3U2l6ZSA9IHZpZXcubWluaW11bVNpemU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGlzcG9zYWJsZSA9IHZpZXcub25EaWRDaGFuZ2UoKG5ld1NpemUpID0+IHRoaXMub25EaWRDaGFuZ2Uodmlld0l0ZW0sIG5ld1NpemUuc2l6ZSkpO1xuICAgICAgICBjb25zdCB2aWV3SXRlbSA9IG5ldyBWaWV3SXRlbShjb250YWluZXIsIHZpZXcsIHZpZXdTaXplLCB7XG4gICAgICAgICAgICBkaXNwb3NlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgZGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3Q29udGFpbmVyLnJlbW92ZUNoaWxkKGNvbnRhaW5lcik7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGluZGV4ID09PSB0aGlzLnZpZXdJdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMudmlld0NvbnRhaW5lci5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy52aWV3Q29udGFpbmVyLmluc2VydEJlZm9yZShjb250YWluZXIsIHRoaXMudmlld0NvbnRhaW5lci5jaGlsZHJlbi5pdGVtKGluZGV4KSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy52aWV3SXRlbXMuc3BsaWNlKGluZGV4LCAwLCB2aWV3SXRlbSk7XG4gICAgICAgIGlmICh0aGlzLnZpZXdJdGVtcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAvL2FkZCBzYXNoXG4gICAgICAgICAgICBjb25zdCBzYXNoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBzYXNoLmNsYXNzTmFtZSA9ICdkdi1zYXNoJztcbiAgICAgICAgICAgIGNvbnN0IG9uUG9pbnRlclN0YXJ0ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHRoaXMudmlld0l0ZW1zKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uZW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBpZnJhbWVzID0gZGlzYWJsZUlmcmFtZVBvaW50RXZlbnRzKCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSB0aGlzLl9vcmllbnRhdGlvbiA9PT0gT3JpZW50YXRpb24uSE9SSVpPTlRBTFxuICAgICAgICAgICAgICAgICAgICA/IGV2ZW50LmNsaWVudFhcbiAgICAgICAgICAgICAgICAgICAgOiBldmVudC5jbGllbnRZO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNhc2hJbmRleCA9IGZpcnN0SW5kZXgodGhpcy5zYXNoZXMsIChzKSA9PiBzLmNvbnRhaW5lciA9PT0gc2FzaCk7XG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICBjb25zdCBzaXplcyA9IHRoaXMudmlld0l0ZW1zLm1hcCgoeCkgPT4geC5zaXplKTtcbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIGxldCBzbmFwQmVmb3JlO1xuICAgICAgICAgICAgICAgIGxldCBzbmFwQWZ0ZXI7XG4gICAgICAgICAgICAgICAgY29uc3QgdXBJbmRleGVzID0gcmFuZ2Uoc2FzaEluZGV4LCAtMSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZG93bkluZGV4ZXMgPSByYW5nZShzYXNoSW5kZXggKyAxLCB0aGlzLnZpZXdJdGVtcy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1pbkRlbHRhVXAgPSB1cEluZGV4ZXMucmVkdWNlKChyLCBpKSA9PiByICsgKHRoaXMudmlld0l0ZW1zW2ldLm1pbmltdW1TaXplIC0gc2l6ZXNbaV0pLCAwKTtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXhEZWx0YVVwID0gdXBJbmRleGVzLnJlZHVjZSgociwgaSkgPT4gciArICh0aGlzLnZpZXdJdGVtc1tpXS52aWV3TWF4aW11bVNpemUgLSBzaXplc1tpXSksIDApO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1heERlbHRhRG93biA9IGRvd25JbmRleGVzLmxlbmd0aCA9PT0gMFxuICAgICAgICAgICAgICAgICAgICA/IE51bWJlci5QT1NJVElWRV9JTkZJTklUWVxuICAgICAgICAgICAgICAgICAgICA6IGRvd25JbmRleGVzLnJlZHVjZSgociwgaSkgPT4gciArXG4gICAgICAgICAgICAgICAgICAgICAgICAoc2l6ZXNbaV0gLSB0aGlzLnZpZXdJdGVtc1tpXS5taW5pbXVtU2l6ZSksIDApO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1pbkRlbHRhRG93biA9IGRvd25JbmRleGVzLmxlbmd0aCA9PT0gMFxuICAgICAgICAgICAgICAgICAgICA/IE51bWJlci5ORUdBVElWRV9JTkZJTklUWVxuICAgICAgICAgICAgICAgICAgICA6IGRvd25JbmRleGVzLnJlZHVjZSgociwgaSkgPT4gciArXG4gICAgICAgICAgICAgICAgICAgICAgICAoc2l6ZXNbaV0gLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmlld0l0ZW1zW2ldLnZpZXdNYXhpbXVtU2l6ZSksIDApO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1pbkRlbHRhID0gTWF0aC5tYXgobWluRGVsdGFVcCwgbWluRGVsdGFEb3duKTtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXhEZWx0YSA9IE1hdGgubWluKG1heERlbHRhRG93biwgbWF4RGVsdGFVcCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc25hcEJlZm9yZUluZGV4ID0gdGhpcy5maW5kRmlyc3RTbmFwSW5kZXgodXBJbmRleGVzKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzbmFwQWZ0ZXJJbmRleCA9IHRoaXMuZmluZEZpcnN0U25hcEluZGV4KGRvd25JbmRleGVzKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNuYXBCZWZvcmVJbmRleCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc25hcHBlZFZpZXdJdGVtID0gdGhpcy52aWV3SXRlbXNbc25hcEJlZm9yZUluZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaGFsZlNpemUgPSBNYXRoLmZsb29yKHNuYXBwZWRWaWV3SXRlbS52aWV3TWluaW11bVNpemUgLyAyKTtcbiAgICAgICAgICAgICAgICAgICAgc25hcEJlZm9yZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBzbmFwQmVmb3JlSW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW1pdERlbHRhOiBzbmFwcGVkVmlld0l0ZW0udmlzaWJsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gbWluRGVsdGEgLSBoYWxmU2l6ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbWluRGVsdGEgKyBoYWxmU2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IHNuYXBwZWRWaWV3SXRlbS5zaXplLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNuYXBBZnRlckluZGV4ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzbmFwcGVkVmlld0l0ZW0gPSB0aGlzLnZpZXdJdGVtc1tzbmFwQWZ0ZXJJbmRleF07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhhbGZTaXplID0gTWF0aC5mbG9vcihzbmFwcGVkVmlld0l0ZW0udmlld01pbmltdW1TaXplIC8gMik7XG4gICAgICAgICAgICAgICAgICAgIHNuYXBBZnRlciA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBzbmFwQWZ0ZXJJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbWl0RGVsdGE6IHNuYXBwZWRWaWV3SXRlbS52aXNpYmxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBtYXhEZWx0YSArIGhhbGZTaXplXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBtYXhEZWx0YSAtIGhhbGZTaXplLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogc25hcHBlZFZpZXdJdGVtLnNpemUsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IG9uUG9pbnRlck1vdmUgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudCA9IHRoaXMuX29yaWVudGF0aW9uID09PSBPcmllbnRhdGlvbi5IT1JJWk9OVEFMXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGV2ZW50LmNsaWVudFhcbiAgICAgICAgICAgICAgICAgICAgICAgIDogZXZlbnQuY2xpZW50WTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVsdGEgPSBjdXJyZW50IC0gc3RhcnQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzaXplKHNhc2hJbmRleCwgZGVsdGEsIHNpemVzLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgbWluRGVsdGEsIG1heERlbHRhLCBzbmFwQmVmb3JlLCBzbmFwQWZ0ZXIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3RyaWJ1dGVFbXB0eVNwYWNlKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGF5b3V0Vmlld3MoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IGVuZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHRoaXMudmlld0l0ZW1zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmVuYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmcmFtZXMucmVsZWFzZSgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNhdmVQcm9wb3J0aW9ucygpO1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVybW92ZScsIG9uUG9pbnRlck1vdmUpO1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVydXAnLCBlbmQpO1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVyY2FuY2VsJywgZW5kKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25EaWRTYXNoRW5kLmZpcmUodW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgb25Qb2ludGVyTW92ZSk7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcnVwJywgZW5kKTtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyY2FuY2VsJywgZW5kKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzYXNoLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgb25Qb2ludGVyU3RhcnQpO1xuICAgICAgICAgICAgY29uc3Qgc2FzaEl0ZW0gPSB7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyOiBzYXNoLFxuICAgICAgICAgICAgICAgIGRpc3Bvc2FibGU6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2FzaC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIG9uUG9pbnRlclN0YXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXNoQ29udGFpbmVyLnJlbW92ZUNoaWxkKHNhc2gpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5zYXNoQ29udGFpbmVyLmFwcGVuZENoaWxkKHNhc2gpO1xuICAgICAgICAgICAgdGhpcy5zYXNoZXMucHVzaChzYXNoSXRlbSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFza2lwTGF5b3V0KSB7XG4gICAgICAgICAgICB0aGlzLnJlbGF5b3V0KFtpbmRleF0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc2tpcExheW91dCAmJlxuICAgICAgICAgICAgdHlwZW9mIHNpemUgIT09ICdudW1iZXInICYmXG4gICAgICAgICAgICBzaXplLnR5cGUgPT09ICdkaXN0cmlidXRlJykge1xuICAgICAgICAgICAgdGhpcy5kaXN0cmlidXRlVmlld1NpemVzKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fb25EaWRBZGRWaWV3LmZpcmUodmlldyk7XG4gICAgfVxuICAgIGRpc3RyaWJ1dGVWaWV3U2l6ZXMoKSB7XG4gICAgICAgIGNvbnN0IGZsZXhpYmxlVmlld0l0ZW1zID0gW107XG4gICAgICAgIGxldCBmbGV4aWJsZVNpemUgPSAwO1xuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdGhpcy52aWV3SXRlbXMpIHtcbiAgICAgICAgICAgIGlmIChpdGVtLm1heGltdW1TaXplIC0gaXRlbS5taW5pbXVtU2l6ZSA+IDApIHtcbiAgICAgICAgICAgICAgICBmbGV4aWJsZVZpZXdJdGVtcy5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgICAgIGZsZXhpYmxlU2l6ZSArPSBpdGVtLnNpemU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2l6ZSA9IE1hdGguZmxvb3IoZmxleGlibGVTaXplIC8gZmxleGlibGVWaWV3SXRlbXMubGVuZ3RoKTtcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGZsZXhpYmxlVmlld0l0ZW1zKSB7XG4gICAgICAgICAgICBpdGVtLnNpemUgPSBjbGFtcChzaXplLCBpdGVtLm1pbmltdW1TaXplLCBpdGVtLm1heGltdW1TaXplKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbmRleGVzID0gcmFuZ2UodGhpcy52aWV3SXRlbXMubGVuZ3RoKTtcbiAgICAgICAgY29uc3QgbG93UHJpb3JpdHlJbmRleGVzID0gaW5kZXhlcy5maWx0ZXIoKGkpID0+IHRoaXMudmlld0l0ZW1zW2ldLnByaW9yaXR5ID09PSBMYXlvdXRQcmlvcml0eS5Mb3cpO1xuICAgICAgICBjb25zdCBoaWdoUHJpb3JpdHlJbmRleGVzID0gaW5kZXhlcy5maWx0ZXIoKGkpID0+IHRoaXMudmlld0l0ZW1zW2ldLnByaW9yaXR5ID09PSBMYXlvdXRQcmlvcml0eS5IaWdoKTtcbiAgICAgICAgdGhpcy5yZWxheW91dChsb3dQcmlvcml0eUluZGV4ZXMsIGhpZ2hQcmlvcml0eUluZGV4ZXMpO1xuICAgIH1cbiAgICByZW1vdmVWaWV3KGluZGV4LCBzaXppbmcsIHNraXBMYXlvdXQgPSBmYWxzZSkge1xuICAgICAgICAvLyBSZW1vdmUgdmlld1xuICAgICAgICBjb25zdCB2aWV3SXRlbSA9IHRoaXMudmlld0l0ZW1zLnNwbGljZShpbmRleCwgMSlbMF07XG4gICAgICAgIHZpZXdJdGVtLmRpc3Bvc2UoKTtcbiAgICAgICAgLy8gUmVtb3ZlIHNhc2hcbiAgICAgICAgaWYgKHRoaXMudmlld0l0ZW1zLmxlbmd0aCA+PSAxKSB7XG4gICAgICAgICAgICBjb25zdCBzYXNoSW5kZXggPSBNYXRoLm1heChpbmRleCAtIDEsIDApO1xuICAgICAgICAgICAgY29uc3Qgc2FzaEl0ZW0gPSB0aGlzLnNhc2hlcy5zcGxpY2Uoc2FzaEluZGV4LCAxKVswXTtcbiAgICAgICAgICAgIHNhc2hJdGVtLmRpc3Bvc2FibGUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXNraXBMYXlvdXQpIHtcbiAgICAgICAgICAgIHRoaXMucmVsYXlvdXQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2l6aW5nICYmIHNpemluZy50eXBlID09PSAnZGlzdHJpYnV0ZScpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzdHJpYnV0ZVZpZXdTaXplcygpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX29uRGlkUmVtb3ZlVmlldy5maXJlKHZpZXdJdGVtLnZpZXcpO1xuICAgICAgICByZXR1cm4gdmlld0l0ZW0udmlldztcbiAgICB9XG4gICAgZ2V0Vmlld0NhY2hlZFZpc2libGVTaXplKGluZGV4KSB7XG4gICAgICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPj0gdGhpcy52aWV3SXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0luZGV4IG91dCBvZiBib3VuZHMnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2aWV3SXRlbSA9IHRoaXMudmlld0l0ZW1zW2luZGV4XTtcbiAgICAgICAgcmV0dXJuIHZpZXdJdGVtLmNhY2hlZFZpc2libGVTaXplO1xuICAgIH1cbiAgICBtb3ZlVmlldyhmcm9tLCB0bykge1xuICAgICAgICBjb25zdCBjYWNoZWRWaXNpYmxlU2l6ZSA9IHRoaXMuZ2V0Vmlld0NhY2hlZFZpc2libGVTaXplKGZyb20pO1xuICAgICAgICBjb25zdCBzaXppbmcgPSB0eXBlb2YgY2FjaGVkVmlzaWJsZVNpemUgPT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICA/IHRoaXMuZ2V0Vmlld1NpemUoZnJvbSlcbiAgICAgICAgICAgIDogU2l6aW5nLkludmlzaWJsZShjYWNoZWRWaXNpYmxlU2l6ZSk7XG4gICAgICAgIGNvbnN0IHZpZXcgPSB0aGlzLnJlbW92ZVZpZXcoZnJvbSwgdW5kZWZpbmVkLCB0cnVlKTtcbiAgICAgICAgdGhpcy5hZGRWaWV3KHZpZXcsIHNpemluZywgdG8pO1xuICAgIH1cbiAgICBsYXlvdXQoc2l6ZSwgb3J0aG9nb25hbFNpemUpIHtcbiAgICAgICAgY29uc3QgcHJldmlvdXNTaXplID0gTWF0aC5tYXgodGhpcy5zaXplLCB0aGlzLl9jb250ZW50U2l6ZSk7XG4gICAgICAgIHRoaXMuc2l6ZSA9IHNpemU7XG4gICAgICAgIHRoaXMub3J0aG9nb25hbFNpemUgPSBvcnRob2dvbmFsU2l6ZTtcbiAgICAgICAgaWYgKCF0aGlzLnByb3BvcnRpb25zKSB7XG4gICAgICAgICAgICBjb25zdCBpbmRleGVzID0gcmFuZ2UodGhpcy52aWV3SXRlbXMubGVuZ3RoKTtcbiAgICAgICAgICAgIGNvbnN0IGxvd1ByaW9yaXR5SW5kZXhlcyA9IGluZGV4ZXMuZmlsdGVyKChpKSA9PiB0aGlzLnZpZXdJdGVtc1tpXS5wcmlvcml0eSA9PT0gTGF5b3V0UHJpb3JpdHkuTG93KTtcbiAgICAgICAgICAgIGNvbnN0IGhpZ2hQcmlvcml0eUluZGV4ZXMgPSBpbmRleGVzLmZpbHRlcigoaSkgPT4gdGhpcy52aWV3SXRlbXNbaV0ucHJpb3JpdHkgPT09IExheW91dFByaW9yaXR5LkhpZ2gpO1xuICAgICAgICAgICAgdGhpcy5yZXNpemUodGhpcy52aWV3SXRlbXMubGVuZ3RoIC0gMSwgc2l6ZSAtIHByZXZpb3VzU2l6ZSwgdW5kZWZpbmVkLCBsb3dQcmlvcml0eUluZGV4ZXMsIGhpZ2hQcmlvcml0eUluZGV4ZXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbGV0IHRvdGFsID0gMDtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy52aWV3SXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0gdGhpcy52aWV3SXRlbXNbaV07XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvcG9ydGlvbiA9IHRoaXMucHJvcG9ydGlvbnNbaV07XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwcm9wb3J0aW9uID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgICB0b3RhbCArPSBwcm9wb3J0aW9uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2l6ZSAtPSBpdGVtLnNpemU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnZpZXdJdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLnZpZXdJdGVtc1tpXTtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9wb3J0aW9uID0gdGhpcy5wcm9wb3J0aW9uc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHByb3BvcnRpb24gPT09ICdudW1iZXInICYmIHRvdGFsID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBpdGVtLnNpemUgPSBjbGFtcChNYXRoLnJvdW5kKChwcm9wb3J0aW9uICogc2l6ZSkgLyB0b3RhbCksIGl0ZW0ubWluaW11bVNpemUsIGl0ZW0ubWF4aW11bVNpemUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRpc3RyaWJ1dGVFbXB0eVNwYWNlKCk7XG4gICAgICAgIHRoaXMubGF5b3V0Vmlld3MoKTtcbiAgICB9XG4gICAgcmVsYXlvdXQobG93UHJpb3JpdHlJbmRleGVzLCBoaWdoUHJpb3JpdHlJbmRleGVzKSB7XG4gICAgICAgIGNvbnN0IGNvbnRlbnRTaXplID0gdGhpcy52aWV3SXRlbXMucmVkdWNlKChyLCBpKSA9PiByICsgaS5zaXplLCAwKTtcbiAgICAgICAgdGhpcy5yZXNpemUodGhpcy52aWV3SXRlbXMubGVuZ3RoIC0gMSwgdGhpcy5fc2l6ZSAtIGNvbnRlbnRTaXplLCB1bmRlZmluZWQsIGxvd1ByaW9yaXR5SW5kZXhlcywgaGlnaFByaW9yaXR5SW5kZXhlcyk7XG4gICAgICAgIHRoaXMuZGlzdHJpYnV0ZUVtcHR5U3BhY2UoKTtcbiAgICAgICAgdGhpcy5sYXlvdXRWaWV3cygpO1xuICAgICAgICB0aGlzLnNhdmVQcm9wb3J0aW9ucygpO1xuICAgIH1cbiAgICBkaXN0cmlidXRlRW1wdHlTcGFjZShsb3dQcmlvcml0eUluZGV4KSB7XG4gICAgICAgIGNvbnN0IGNvbnRlbnRTaXplID0gdGhpcy52aWV3SXRlbXMucmVkdWNlKChyLCBpKSA9PiByICsgaS5zaXplLCAwKTtcbiAgICAgICAgbGV0IGVtcHR5RGVsdGEgPSB0aGlzLnNpemUgLSBjb250ZW50U2l6ZTtcbiAgICAgICAgY29uc3QgaW5kZXhlcyA9IHJhbmdlKHRoaXMudmlld0l0ZW1zLmxlbmd0aCAtIDEsIC0xKTtcbiAgICAgICAgY29uc3QgbG93UHJpb3JpdHlJbmRleGVzID0gaW5kZXhlcy5maWx0ZXIoKGkpID0+IHRoaXMudmlld0l0ZW1zW2ldLnByaW9yaXR5ID09PSBMYXlvdXRQcmlvcml0eS5Mb3cpO1xuICAgICAgICBjb25zdCBoaWdoUHJpb3JpdHlJbmRleGVzID0gaW5kZXhlcy5maWx0ZXIoKGkpID0+IHRoaXMudmlld0l0ZW1zW2ldLnByaW9yaXR5ID09PSBMYXlvdXRQcmlvcml0eS5IaWdoKTtcbiAgICAgICAgZm9yIChjb25zdCBpbmRleCBvZiBoaWdoUHJpb3JpdHlJbmRleGVzKSB7XG4gICAgICAgICAgICBwdXNoVG9TdGFydChpbmRleGVzLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBpbmRleCBvZiBsb3dQcmlvcml0eUluZGV4ZXMpIHtcbiAgICAgICAgICAgIHB1c2hUb0VuZChpbmRleGVzLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBsb3dQcmlvcml0eUluZGV4ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcHVzaFRvRW5kKGluZGV4ZXMsIGxvd1ByaW9yaXR5SW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBlbXB0eURlbHRhICE9PSAwICYmIGkgPCBpbmRleGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gdGhpcy52aWV3SXRlbXNbaW5kZXhlc1tpXV07XG4gICAgICAgICAgICBjb25zdCBzaXplID0gY2xhbXAoaXRlbS5zaXplICsgZW1wdHlEZWx0YSwgaXRlbS5taW5pbXVtU2l6ZSwgaXRlbS5tYXhpbXVtU2l6ZSk7XG4gICAgICAgICAgICBjb25zdCB2aWV3RGVsdGEgPSBzaXplIC0gaXRlbS5zaXplO1xuICAgICAgICAgICAgZW1wdHlEZWx0YSAtPSB2aWV3RGVsdGE7XG4gICAgICAgICAgICBpdGVtLnNpemUgPSBzaXplO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNhdmVQcm9wb3J0aW9ucygpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcG9ydGlvbmFsTGF5b3V0ICYmIHRoaXMuX2NvbnRlbnRTaXplID4gMCkge1xuICAgICAgICAgICAgdGhpcy5fcHJvcG9ydGlvbnMgPSB0aGlzLnZpZXdJdGVtcy5tYXAoKGkpID0+IGkudmlzaWJsZSA/IGkuc2l6ZSAvIHRoaXMuX2NvbnRlbnRTaXplIDogdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYXJnaW4gZXhwbGFpbjpcbiAgICAgKlxuICAgICAqIEZvciBgbmAgdmlld3MgaW4gYSBzcGxpdHZpZXcgdGhlcmUgd2lsbCBiZSBgbi0xYCBtYXJnaW5zIGBtYC5cbiAgICAgKlxuICAgICAqIFRvIGZpdCB0aGUgbWFyZ2lucyBlYWNoIHZpZXcgbXVzdCByZWR1Y2UgaW4gc2l6ZSBieSBgKG0gKiAobiAtIDEpKSAvIG5gLlxuICAgICAqXG4gICAgICogRm9yIGVhY2ggdmlldyBgaWAgdGhlIG9mZmV0IG11c3QgYmUgYWRqdXN0ZWQgYnkgYG0gKiBpLyhuIC0gMSlgLlxuICAgICAqL1xuICAgIGxheW91dFZpZXdzKCkge1xuICAgICAgICB0aGlzLl9jb250ZW50U2l6ZSA9IHRoaXMudmlld0l0ZW1zLnJlZHVjZSgociwgaSkgPT4gciArIGkuc2l6ZSwgMCk7XG4gICAgICAgIHRoaXMudXBkYXRlU2FzaEVuYWJsZW1lbnQoKTtcbiAgICAgICAgaWYgKHRoaXMudmlld0l0ZW1zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZpc2libGVWaWV3SXRlbXMgPSB0aGlzLnZpZXdJdGVtcy5maWx0ZXIoKGkpID0+IGkudmlzaWJsZSk7XG4gICAgICAgIGNvbnN0IHNhc2hDb3VudCA9IE1hdGgubWF4KDAsIHZpc2libGVWaWV3SXRlbXMubGVuZ3RoIC0gMSk7XG4gICAgICAgIGNvbnN0IG1hcmdpblJlZHVjZWRTaXplID0gKHRoaXMubWFyZ2luICogc2FzaENvdW50KSAvIE1hdGgubWF4KDEsIHZpc2libGVWaWV3SXRlbXMubGVuZ3RoKTtcbiAgICAgICAgbGV0IHRvdGFsTGVmdE9mZnNldCA9IDA7XG4gICAgICAgIGNvbnN0IHZpZXdMZWZ0T2Zmc2V0cyA9IFtdO1xuICAgICAgICBjb25zdCBzYXNoV2lkdGggPSA0OyAvLyBoYXJkY29kZWQgaW4gY3NzXG4gICAgICAgIGNvbnN0IHJ1bm5pbmdWaXNpYmxlUGFuZWxDb3VudCA9IHRoaXMudmlld0l0ZW1zLnJlZHVjZSgoYXJyLCB2aWV3SXRlbSwgaSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmxhZyA9IHZpZXdJdGVtLnZpc2libGUgPyAxIDogMDtcbiAgICAgICAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYXJyLnB1c2goZmxhZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBhcnIucHVzaChhcnJbaSAtIDFdICsgZmxhZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYXJyO1xuICAgICAgICB9LCBbXSk7XG4gICAgICAgIC8vIGNhbGN1bGF0ZSBib3RoIHZpZXcgYW5kIGNhc2ggcG9zaXRpb25zXG4gICAgICAgIHRoaXMudmlld0l0ZW1zLmZvckVhY2goKHZpZXcsIGkpID0+IHtcbiAgICAgICAgICAgIHRvdGFsTGVmdE9mZnNldCArPSB0aGlzLnZpZXdJdGVtc1tpXS5zaXplO1xuICAgICAgICAgICAgdmlld0xlZnRPZmZzZXRzLnB1c2godG90YWxMZWZ0T2Zmc2V0KTtcbiAgICAgICAgICAgIGNvbnN0IHNpemUgPSB2aWV3LnZpc2libGUgPyB2aWV3LnNpemUgLSBtYXJnaW5SZWR1Y2VkU2l6ZSA6IDA7XG4gICAgICAgICAgICBjb25zdCB2aXNpYmxlUGFuZWxzQmVmb3JlVGhpc1ZpZXcgPSBNYXRoLm1heCgwLCBydW5uaW5nVmlzaWJsZVBhbmVsQ291bnRbaV0gLSAxKTtcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IGkgPT09IDAgfHwgdmlzaWJsZVBhbmVsc0JlZm9yZVRoaXNWaWV3ID09PSAwXG4gICAgICAgICAgICAgICAgPyAwXG4gICAgICAgICAgICAgICAgOiB2aWV3TGVmdE9mZnNldHNbaSAtIDFdICtcbiAgICAgICAgICAgICAgICAgICAgKHZpc2libGVQYW5lbHNCZWZvcmVUaGlzVmlldyAvIHNhc2hDb3VudCkgKlxuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luUmVkdWNlZFNpemU7XG4gICAgICAgICAgICBpZiAoaSA8IHRoaXMudmlld0l0ZW1zLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAvLyBjYWxjdWxhdGUgc2FzaCBwb3NpdGlvblxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1NpemUgPSB2aWV3LnZpc2libGVcbiAgICAgICAgICAgICAgICAgICAgPyBvZmZzZXQgKyBzaXplIC0gc2FzaFdpZHRoIC8gMiArIHRoaXMubWFyZ2luIC8gMlxuICAgICAgICAgICAgICAgICAgICA6IG9mZnNldDtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fb3JpZW50YXRpb24gPT09IE9yaWVudGF0aW9uLkhPUklaT05UQUwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXNoZXNbaV0uY29udGFpbmVyLnN0eWxlLmxlZnQgPSBgJHtuZXdTaXplfXB4YDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXNoZXNbaV0uY29udGFpbmVyLnN0eWxlLnRvcCA9IGAwcHhgO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fb3JpZW50YXRpb24gPT09IE9yaWVudGF0aW9uLlZFUlRJQ0FMKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2FzaGVzW2ldLmNvbnRhaW5lci5zdHlsZS5sZWZ0ID0gYDBweGA7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2FzaGVzW2ldLmNvbnRhaW5lci5zdHlsZS50b3AgPSBgJHtuZXdTaXplfXB4YDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBjYWxjdWxhdGUgdmlldyBwb3NpdGlvblxuICAgICAgICAgICAgaWYgKHRoaXMuX29yaWVudGF0aW9uID09PSBPcmllbnRhdGlvbi5IT1JJWk9OVEFMKSB7XG4gICAgICAgICAgICAgICAgdmlldy5jb250YWluZXIuc3R5bGUud2lkdGggPSBgJHtzaXplfXB4YDtcbiAgICAgICAgICAgICAgICB2aWV3LmNvbnRhaW5lci5zdHlsZS5sZWZ0ID0gYCR7b2Zmc2V0fXB4YDtcbiAgICAgICAgICAgICAgICB2aWV3LmNvbnRhaW5lci5zdHlsZS50b3AgPSAnJztcbiAgICAgICAgICAgICAgICB2aWV3LmNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLl9vcmllbnRhdGlvbiA9PT0gT3JpZW50YXRpb24uVkVSVElDQUwpIHtcbiAgICAgICAgICAgICAgICB2aWV3LmNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSBgJHtzaXplfXB4YDtcbiAgICAgICAgICAgICAgICB2aWV3LmNvbnRhaW5lci5zdHlsZS50b3AgPSBgJHtvZmZzZXR9cHhgO1xuICAgICAgICAgICAgICAgIHZpZXcuY29udGFpbmVyLnN0eWxlLndpZHRoID0gJyc7XG4gICAgICAgICAgICAgICAgdmlldy5jb250YWluZXIuc3R5bGUubGVmdCA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmlldy52aWV3LmxheW91dCh2aWV3LnNpemUgLSBtYXJnaW5SZWR1Y2VkU2l6ZSwgdGhpcy5fb3J0aG9nb25hbFNpemUpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZmluZEZpcnN0U25hcEluZGV4KGluZGV4ZXMpIHtcbiAgICAgICAgLy8gdmlzaWJsZSB2aWV3cyBmaXJzdFxuICAgICAgICBmb3IgKGNvbnN0IGluZGV4IG9mIGluZGV4ZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHZpZXdJdGVtID0gdGhpcy52aWV3SXRlbXNbaW5kZXhdO1xuICAgICAgICAgICAgaWYgKCF2aWV3SXRlbS52aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodmlld0l0ZW0uc25hcCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyB0aGVuLCBoaWRkZW4gdmlld3NcbiAgICAgICAgZm9yIChjb25zdCBpbmRleCBvZiBpbmRleGVzKSB7XG4gICAgICAgICAgICBjb25zdCB2aWV3SXRlbSA9IHRoaXMudmlld0l0ZW1zW2luZGV4XTtcbiAgICAgICAgICAgIGlmICh2aWV3SXRlbS52aXNpYmxlICYmXG4gICAgICAgICAgICAgICAgdmlld0l0ZW0ubWF4aW11bVNpemUgLSB2aWV3SXRlbS5taW5pbXVtU2l6ZSA+IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF2aWV3SXRlbS52aXNpYmxlICYmIHZpZXdJdGVtLnNuYXApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgdXBkYXRlU2FzaEVuYWJsZW1lbnQoKSB7XG4gICAgICAgIGxldCBwcmV2aW91cyA9IGZhbHNlO1xuICAgICAgICBjb25zdCBjb2xsYXBzZXNEb3duID0gdGhpcy52aWV3SXRlbXMubWFwKChpKSA9PiAocHJldmlvdXMgPSBpLnNpemUgLSBpLm1pbmltdW1TaXplID4gMCB8fCBwcmV2aW91cykpO1xuICAgICAgICBwcmV2aW91cyA9IGZhbHNlO1xuICAgICAgICBjb25zdCBleHBhbmRzRG93biA9IHRoaXMudmlld0l0ZW1zLm1hcCgoaSkgPT4gKHByZXZpb3VzID0gaS5tYXhpbXVtU2l6ZSAtIGkuc2l6ZSA+IDAgfHwgcHJldmlvdXMpKTtcbiAgICAgICAgY29uc3QgcmV2ZXJzZVZpZXdzID0gWy4uLnRoaXMudmlld0l0ZW1zXS5yZXZlcnNlKCk7XG4gICAgICAgIHByZXZpb3VzID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IGNvbGxhcHNlc1VwID0gcmV2ZXJzZVZpZXdzXG4gICAgICAgICAgICAubWFwKChpKSA9PiAocHJldmlvdXMgPSBpLnNpemUgLSBpLm1pbmltdW1TaXplID4gMCB8fCBwcmV2aW91cykpXG4gICAgICAgICAgICAucmV2ZXJzZSgpO1xuICAgICAgICBwcmV2aW91cyA9IGZhbHNlO1xuICAgICAgICBjb25zdCBleHBhbmRzVXAgPSByZXZlcnNlVmlld3NcbiAgICAgICAgICAgIC5tYXAoKGkpID0+IChwcmV2aW91cyA9IGkubWF4aW11bVNpemUgLSBpLnNpemUgPiAwIHx8IHByZXZpb3VzKSlcbiAgICAgICAgICAgIC5yZXZlcnNlKCk7XG4gICAgICAgIGxldCBwb3NpdGlvbiA9IDA7XG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnNhc2hlcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IHNhc2ggPSB0aGlzLnNhc2hlc1tpbmRleF07XG4gICAgICAgICAgICBjb25zdCB2aWV3SXRlbSA9IHRoaXMudmlld0l0ZW1zW2luZGV4XTtcbiAgICAgICAgICAgIHBvc2l0aW9uICs9IHZpZXdJdGVtLnNpemU7XG4gICAgICAgICAgICBjb25zdCBtaW4gPSAhKGNvbGxhcHNlc0Rvd25baW5kZXhdICYmIGV4cGFuZHNVcFtpbmRleCArIDFdKTtcbiAgICAgICAgICAgIGNvbnN0IG1heCA9ICEoZXhwYW5kc0Rvd25baW5kZXhdICYmIGNvbGxhcHNlc1VwW2luZGV4ICsgMV0pO1xuICAgICAgICAgICAgaWYgKG1pbiAmJiBtYXgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB1cEluZGV4ZXMgPSByYW5nZShpbmRleCwgLTEpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRvd25JbmRleGVzID0gcmFuZ2UoaW5kZXggKyAxLCB0aGlzLnZpZXdJdGVtcy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNuYXBCZWZvcmVJbmRleCA9IHRoaXMuZmluZEZpcnN0U25hcEluZGV4KHVwSW5kZXhlcyk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc25hcEFmdGVySW5kZXggPSB0aGlzLmZpbmRGaXJzdFNuYXBJbmRleChkb3duSW5kZXhlcyk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc25hcHBlZEJlZm9yZSA9IHR5cGVvZiBzbmFwQmVmb3JlSW5kZXggPT09ICdudW1iZXInICYmXG4gICAgICAgICAgICAgICAgICAgICF0aGlzLnZpZXdJdGVtc1tzbmFwQmVmb3JlSW5kZXhdLnZpc2libGU7XG4gICAgICAgICAgICAgICAgY29uc3Qgc25hcHBlZEFmdGVyID0gdHlwZW9mIHNuYXBBZnRlckluZGV4ID09PSAnbnVtYmVyJyAmJlxuICAgICAgICAgICAgICAgICAgICAhdGhpcy52aWV3SXRlbXNbc25hcEFmdGVySW5kZXhdLnZpc2libGU7XG4gICAgICAgICAgICAgICAgaWYgKHNuYXBwZWRCZWZvcmUgJiZcbiAgICAgICAgICAgICAgICAgICAgY29sbGFwc2VzVXBbaW5kZXhdICYmXG4gICAgICAgICAgICAgICAgICAgIChwb3NpdGlvbiA+IDAgfHwgdGhpcy5zdGFydFNuYXBwaW5nRW5hYmxlZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTYXNoKHNhc2gsIFNhc2hTdGF0ZS5NSU5JTVVNKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc25hcHBlZEFmdGVyICYmXG4gICAgICAgICAgICAgICAgICAgIGNvbGxhcHNlc0Rvd25baW5kZXhdICYmXG4gICAgICAgICAgICAgICAgICAgIChwb3NpdGlvbiA8IHRoaXMuX2NvbnRlbnRTaXplIHx8IHRoaXMuZW5kU25hcHBpbmdFbmFibGVkKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVNhc2goc2FzaCwgU2FzaFN0YXRlLk1BWElNVU0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTYXNoKHNhc2gsIFNhc2hTdGF0ZS5ESVNBQkxFRCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobWluICYmICFtYXgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVNhc2goc2FzaCwgU2FzaFN0YXRlLk1JTklNVU0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIW1pbiAmJiBtYXgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVNhc2goc2FzaCwgU2FzaFN0YXRlLk1BWElNVU0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTYXNoKHNhc2gsIFNhc2hTdGF0ZS5FTkFCTEVEKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICB1cGRhdGVTYXNoKHNhc2gsIHN0YXRlKSB7XG4gICAgICAgIHRvZ2dsZUNsYXNzKHNhc2guY29udGFpbmVyLCAnZHYtZGlzYWJsZWQnLCBzdGF0ZSA9PT0gU2FzaFN0YXRlLkRJU0FCTEVEKTtcbiAgICAgICAgdG9nZ2xlQ2xhc3Moc2FzaC5jb250YWluZXIsICdkdi1lbmFibGVkJywgc3RhdGUgPT09IFNhc2hTdGF0ZS5FTkFCTEVEKTtcbiAgICAgICAgdG9nZ2xlQ2xhc3Moc2FzaC5jb250YWluZXIsICdkdi1tYXhpbXVtJywgc3RhdGUgPT09IFNhc2hTdGF0ZS5NQVhJTVVNKTtcbiAgICAgICAgdG9nZ2xlQ2xhc3Moc2FzaC5jb250YWluZXIsICdkdi1taW5pbXVtJywgc3RhdGUgPT09IFNhc2hTdGF0ZS5NSU5JTVVNKTtcbiAgICB9XG4gICAgY3JlYXRlVmlld0NvbnRhaW5lcigpIHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9ICdkdi12aWV3LWNvbnRhaW5lcic7XG4gICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH1cbiAgICBjcmVhdGVTYXNoQ29udGFpbmVyKCkge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gJ2R2LXNhc2gtY29udGFpbmVyJztcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfVxuICAgIGNyZWF0ZUNvbnRhaW5lcigpIHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBjb25zdCBvcmllbnRhdGlvbkNsYXNzbmFtZSA9IHRoaXMuX29yaWVudGF0aW9uID09PSBPcmllbnRhdGlvbi5IT1JJWk9OVEFMXG4gICAgICAgICAgICA/ICdkdi1ob3Jpem9udGFsJ1xuICAgICAgICAgICAgOiAnZHYtdmVydGljYWwnO1xuICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IGBkdi1zcGxpdC12aWV3LWNvbnRhaW5lciAke29yaWVudGF0aW9uQ2xhc3NuYW1lfWA7XG4gICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICB0aGlzLl9vbkRpZFNhc2hFbmQuZGlzcG9zZSgpO1xuICAgICAgICB0aGlzLl9vbkRpZEFkZFZpZXcuZGlzcG9zZSgpO1xuICAgICAgICB0aGlzLl9vbkRpZFJlbW92ZVZpZXcuZGlzcG9zZSgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZWxlbWVudC5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuZWxlbWVudC5jaGlsZHJlbi5pdGVtKGkpID09PSB0aGlzLmVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHZpZXdJdGVtIG9mIHRoaXMudmlld0l0ZW1zKSB7XG4gICAgICAgICAgICB2aWV3SXRlbS5kaXNwb3NlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZSgpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUsIE11dGFibGVEaXNwb3NhYmxlLCB9IGZyb20gJy4uL2xpZmVjeWNsZSc7XG5pbXBvcnQgeyBPcmllbnRhdGlvbiwgU2l6aW5nLCBTcGxpdHZpZXcsIH0gZnJvbSAnLi9zcGxpdHZpZXcnO1xuaW1wb3J0IHsgRW1pdHRlciB9IGZyb20gJy4uL2V2ZW50cyc7XG5pbXBvcnQgeyBSZXNpemFibGUgfSBmcm9tICcuLi9yZXNpemFibGUnO1xuaW1wb3J0IHsgQ2xhc3NuYW1lcyB9IGZyb20gJy4uL2RvbSc7XG4vKipcbiAqIEEgaGlnaC1sZXZlbCBpbXBsZW1lbnRhdGlvbiBvZiBzcGxpdHZpZXcgdGhhdCB3b3JrcyB1c2luZyAncGFuZWxzJ1xuICovXG5leHBvcnQgY2xhc3MgU3BsaXR2aWV3Q29tcG9uZW50IGV4dGVuZHMgUmVzaXphYmxlIHtcbiAgICBnZXQgcGFuZWxzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zcGxpdHZpZXcuZ2V0Vmlld3MoKTtcbiAgICB9XG4gICAgZ2V0IG9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vcHRpb25zO1xuICAgIH1cbiAgICBnZXQgbGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGFuZWxzLnNpemU7XG4gICAgfVxuICAgIGdldCBvcmllbnRhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3BsaXR2aWV3Lm9yaWVudGF0aW9uO1xuICAgIH1cbiAgICBnZXQgc3BsaXR2aWV3KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3BsaXR2aWV3O1xuICAgIH1cbiAgICBzZXQgc3BsaXR2aWV3KHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3NwbGl0dmlldyA9IHZhbHVlO1xuICAgICAgICB0aGlzLl9zcGxpdHZpZXdDaGFuZ2VEaXNwb3NhYmxlLnZhbHVlID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUodGhpcy5fc3BsaXR2aWV3Lm9uRGlkU2FzaEVuZCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9vbkRpZExheW91dENoYW5nZS5maXJlKHVuZGVmaW5lZCk7XG4gICAgICAgIH0pLCB0aGlzLl9zcGxpdHZpZXcub25EaWRBZGRWaWV3KChlKSA9PiB0aGlzLl9vbkRpZEFkZFZpZXcuZmlyZShlKSksIHRoaXMuX3NwbGl0dmlldy5vbkRpZFJlbW92ZVZpZXcoKGUpID0+IHRoaXMuX29uRGlkUmVtb3ZlVmlldy5maXJlKGUpKSk7XG4gICAgfVxuICAgIGdldCBtaW5pbXVtU2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3BsaXR2aWV3Lm1pbmltdW1TaXplO1xuICAgIH1cbiAgICBnZXQgbWF4aW11bVNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNwbGl0dmlldy5tYXhpbXVtU2l6ZTtcbiAgICB9XG4gICAgZ2V0IGhlaWdodCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3BsaXR2aWV3Lm9yaWVudGF0aW9uID09PSBPcmllbnRhdGlvbi5IT1JJWk9OVEFMXG4gICAgICAgICAgICA/IHRoaXMuc3BsaXR2aWV3Lm9ydGhvZ29uYWxTaXplXG4gICAgICAgICAgICA6IHRoaXMuc3BsaXR2aWV3LnNpemU7XG4gICAgfVxuICAgIGdldCB3aWR0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3BsaXR2aWV3Lm9yaWVudGF0aW9uID09PSBPcmllbnRhdGlvbi5IT1JJWk9OVEFMXG4gICAgICAgICAgICA/IHRoaXMuc3BsaXR2aWV3LnNpemVcbiAgICAgICAgICAgIDogdGhpcy5zcGxpdHZpZXcub3J0aG9nb25hbFNpemU7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lciwgb3B0aW9ucykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHN1cGVyKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLCBvcHRpb25zLmRpc2FibGVBdXRvUmVzaXppbmcpO1xuICAgICAgICB0aGlzLl9zcGxpdHZpZXdDaGFuZ2VEaXNwb3NhYmxlID0gbmV3IE11dGFibGVEaXNwb3NhYmxlKCk7XG4gICAgICAgIHRoaXMuX3BhbmVscyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5fb25EaWRMYXlvdXRmcm9tSlNPTiA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRMYXlvdXRGcm9tSlNPTiA9IHRoaXMuX29uRGlkTGF5b3V0ZnJvbUpTT04uZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uRGlkQWRkVmlldyA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRBZGRWaWV3ID0gdGhpcy5fb25EaWRBZGRWaWV3LmV2ZW50O1xuICAgICAgICB0aGlzLl9vbkRpZFJlbW92ZVZpZXcgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRGlkUmVtb3ZlVmlldyA9IHRoaXMuX29uRGlkUmVtb3ZlVmlldy5ldmVudDtcbiAgICAgICAgdGhpcy5fb25EaWRMYXlvdXRDaGFuZ2UgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRGlkTGF5b3V0Q2hhbmdlID0gdGhpcy5fb25EaWRMYXlvdXRDaGFuZ2UuZXZlbnQ7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS53aWR0aCA9ICcxMDAlJztcbiAgICAgICAgdGhpcy5fY2xhc3NOYW1lcyA9IG5ldyBDbGFzc25hbWVzKHRoaXMuZWxlbWVudCk7XG4gICAgICAgIHRoaXMuX2NsYXNzTmFtZXMuc2V0Q2xhc3NOYW1lcygoX2EgPSBvcHRpb25zLmNsYXNzTmFtZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJycpO1xuICAgICAgICAvLyB0aGUgY29udGFpbmVyIGlzIG93bmVkIGJ5IHRoZSB0aGlyZC1wYXJ0eSwgZG8gbm90IG1vZGlmeS9kZWxldGUgaXRcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudCk7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLnNwbGl0dmlldyA9IG5ldyBTcGxpdHZpZXcodGhpcy5lbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyh0aGlzLl9vbkRpZEFkZFZpZXcsIHRoaXMuX29uRGlkTGF5b3V0ZnJvbUpTT04sIHRoaXMuX29uRGlkUmVtb3ZlVmlldywgdGhpcy5fb25EaWRMYXlvdXRDaGFuZ2UpO1xuICAgIH1cbiAgICB1cGRhdGVPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgaWYgKCdjbGFzc05hbWUnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMuX2NsYXNzTmFtZXMuc2V0Q2xhc3NOYW1lcygoX2EgPSBvcHRpb25zLmNsYXNzTmFtZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJycpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgnZGlzYWJsZVJlc2l6aW5nJyBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICB0aGlzLmRpc2FibGVSZXNpemluZyA9IChfYiA9IG9wdGlvbnMuZGlzYWJsZUF1dG9SZXNpemluZykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLm9yaWVudGF0aW9uID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhpcy5zcGxpdHZpZXcub3JpZW50YXRpb24gPSBvcHRpb25zLm9yaWVudGF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHRoaXMub3B0aW9ucyksIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLnNwbGl0dmlldy5sYXlvdXQodGhpcy5zcGxpdHZpZXcuc2l6ZSwgdGhpcy5zcGxpdHZpZXcub3J0aG9nb25hbFNpemUpO1xuICAgIH1cbiAgICBmb2N1cygpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAoX2EgPSB0aGlzLl9hY3RpdmVQYW5lbCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmZvY3VzKCk7XG4gICAgfVxuICAgIG1vdmVQYW5lbChmcm9tLCB0bykge1xuICAgICAgICB0aGlzLnNwbGl0dmlldy5tb3ZlVmlldyhmcm9tLCB0byk7XG4gICAgfVxuICAgIHNldFZpc2libGUocGFuZWwsIHZpc2libGUpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLnBhbmVscy5pbmRleE9mKHBhbmVsKTtcbiAgICAgICAgdGhpcy5zcGxpdHZpZXcuc2V0Vmlld1Zpc2libGUoaW5kZXgsIHZpc2libGUpO1xuICAgIH1cbiAgICBzZXRBY3RpdmUocGFuZWwsIHNraXBGb2N1cykge1xuICAgICAgICB0aGlzLl9hY3RpdmVQYW5lbCA9IHBhbmVsO1xuICAgICAgICB0aGlzLnBhbmVsc1xuICAgICAgICAgICAgLmZpbHRlcigodikgPT4gdiAhPT0gcGFuZWwpXG4gICAgICAgICAgICAuZm9yRWFjaCgodikgPT4ge1xuICAgICAgICAgICAgdi5hcGkuX29uRGlkQWN0aXZlQ2hhbmdlLmZpcmUoeyBpc0FjdGl2ZTogZmFsc2UgfSk7XG4gICAgICAgICAgICBpZiAoIXNraXBGb2N1cykge1xuICAgICAgICAgICAgICAgIHYuZm9jdXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHBhbmVsLmFwaS5fb25EaWRBY3RpdmVDaGFuZ2UuZmlyZSh7IGlzQWN0aXZlOiB0cnVlIH0pO1xuICAgICAgICBpZiAoIXNraXBGb2N1cykge1xuICAgICAgICAgICAgcGFuZWwuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZW1vdmVQYW5lbChwYW5lbCwgc2l6aW5nKSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLl9wYW5lbHMuZ2V0KHBhbmVsLmlkKTtcbiAgICAgICAgaWYgKCFpdGVtKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHVua25vd24gc3BsaXR2aWV3IHBhbmVsICR7cGFuZWwuaWR9YCk7XG4gICAgICAgIH1cbiAgICAgICAgaXRlbS5kaXNwb3NlKCk7XG4gICAgICAgIHRoaXMuX3BhbmVscy5kZWxldGUocGFuZWwuaWQpO1xuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMucGFuZWxzLmZpbmRJbmRleCgoXykgPT4gXyA9PT0gcGFuZWwpO1xuICAgICAgICBjb25zdCByZW1vdmVkVmlldyA9IHRoaXMuc3BsaXR2aWV3LnJlbW92ZVZpZXcoaW5kZXgsIHNpemluZyk7XG4gICAgICAgIHJlbW92ZWRWaWV3LmRpc3Bvc2UoKTtcbiAgICAgICAgY29uc3QgcGFuZWxzID0gdGhpcy5wYW5lbHM7XG4gICAgICAgIGlmIChwYW5lbHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5zZXRBY3RpdmUocGFuZWxzW3BhbmVscy5sZW5ndGggLSAxXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0UGFuZWwoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFuZWxzLmZpbmQoKHZpZXcpID0+IHZpZXcuaWQgPT09IGlkKTtcbiAgICB9XG4gICAgYWRkUGFuZWwob3B0aW9ucykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICh0aGlzLl9wYW5lbHMuaGFzKG9wdGlvbnMuaWQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHBhbmVsICR7b3B0aW9ucy5pZH0gYWxyZWFkeSBleGlzdHNgKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2aWV3ID0gdGhpcy5vcHRpb25zLmNyZWF0ZUNvbXBvbmVudCh7XG4gICAgICAgICAgICBpZDogb3B0aW9ucy5pZCxcbiAgICAgICAgICAgIG5hbWU6IG9wdGlvbnMuY29tcG9uZW50LFxuICAgICAgICB9KTtcbiAgICAgICAgdmlldy5vcmllbnRhdGlvbiA9IHRoaXMuc3BsaXR2aWV3Lm9yaWVudGF0aW9uO1xuICAgICAgICB2aWV3LmluaXQoe1xuICAgICAgICAgICAgcGFyYW1zOiAoX2EgPSBvcHRpb25zLnBhcmFtcykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDoge30sXG4gICAgICAgICAgICBtaW5pbXVtU2l6ZTogb3B0aW9ucy5taW5pbXVtU2l6ZSxcbiAgICAgICAgICAgIG1heGltdW1TaXplOiBvcHRpb25zLm1heGltdW1TaXplLFxuICAgICAgICAgICAgc25hcDogb3B0aW9ucy5zbmFwLFxuICAgICAgICAgICAgcHJpb3JpdHk6IG9wdGlvbnMucHJpb3JpdHksXG4gICAgICAgICAgICBhY2Nlc3NvcjogdGhpcyxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHNpemUgPSB0eXBlb2Ygb3B0aW9ucy5zaXplID09PSAnbnVtYmVyJyA/IG9wdGlvbnMuc2l6ZSA6IFNpemluZy5EaXN0cmlidXRlO1xuICAgICAgICBjb25zdCBpbmRleCA9IHR5cGVvZiBvcHRpb25zLmluZGV4ID09PSAnbnVtYmVyJyA/IG9wdGlvbnMuaW5kZXggOiB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuc3BsaXR2aWV3LmFkZFZpZXcodmlldywgc2l6ZSwgaW5kZXgpO1xuICAgICAgICB0aGlzLmRvQWRkVmlldyh2aWV3KTtcbiAgICAgICAgdGhpcy5zZXRBY3RpdmUodmlldyk7XG4gICAgICAgIHJldHVybiB2aWV3O1xuICAgIH1cbiAgICBsYXlvdXQod2lkdGgsIGhlaWdodCkge1xuICAgICAgICBjb25zdCBbc2l6ZSwgb3J0aG9nb25hbFNpemVdID0gdGhpcy5zcGxpdHZpZXcub3JpZW50YXRpb24gPT09IE9yaWVudGF0aW9uLkhPUklaT05UQUxcbiAgICAgICAgICAgID8gW3dpZHRoLCBoZWlnaHRdXG4gICAgICAgICAgICA6IFtoZWlnaHQsIHdpZHRoXTtcbiAgICAgICAgdGhpcy5zcGxpdHZpZXcubGF5b3V0KHNpemUsIG9ydGhvZ29uYWxTaXplKTtcbiAgICB9XG4gICAgZG9BZGRWaWV3KHZpZXcpIHtcbiAgICAgICAgY29uc3QgZGlzcG9zYWJsZSA9IHZpZXcuYXBpLm9uRGlkRm9jdXNDaGFuZ2UoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoIWV2ZW50LmlzRm9jdXNlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2V0QWN0aXZlKHZpZXcsIHRydWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fcGFuZWxzLnNldCh2aWV3LmlkLCBkaXNwb3NhYmxlKTtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IHZpZXdzID0gdGhpcy5zcGxpdHZpZXdcbiAgICAgICAgICAgIC5nZXRWaWV3cygpXG4gICAgICAgICAgICAubWFwKCh2aWV3LCBpKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzaXplID0gdGhpcy5zcGxpdHZpZXcuZ2V0Vmlld1NpemUoaSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHNpemUsXG4gICAgICAgICAgICAgICAgZGF0YTogdmlldy50b0pTT04oKSxcbiAgICAgICAgICAgICAgICBzbmFwOiAhIXZpZXcuc25hcCxcbiAgICAgICAgICAgICAgICBwcmlvcml0eTogdmlldy5wcmlvcml0eSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmlld3MsXG4gICAgICAgICAgICBhY3RpdmVWaWV3OiAoX2EgPSB0aGlzLl9hY3RpdmVQYW5lbCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmlkLFxuICAgICAgICAgICAgc2l6ZTogdGhpcy5zcGxpdHZpZXcuc2l6ZSxcbiAgICAgICAgICAgIG9yaWVudGF0aW9uOiB0aGlzLnNwbGl0dmlldy5vcmllbnRhdGlvbixcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnJvbUpTT04oc2VyaWFsaXplZFNwbGl0dmlldykge1xuICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgIGNvbnN0IHsgdmlld3MsIG9yaWVudGF0aW9uLCBzaXplLCBhY3RpdmVWaWV3IH0gPSBzZXJpYWxpemVkU3BsaXR2aWV3O1xuICAgICAgICBjb25zdCBxdWV1ZSA9IFtdO1xuICAgICAgICAvLyB0YWtlIG5vdGUgb2YgdGhlIGV4aXN0aW5nIGRpbWVuc2lvbnNcbiAgICAgICAgY29uc3Qgd2lkdGggPSB0aGlzLndpZHRoO1xuICAgICAgICBjb25zdCBoZWlnaHQgPSB0aGlzLmhlaWdodDtcbiAgICAgICAgdGhpcy5zcGxpdHZpZXcgPSBuZXcgU3BsaXR2aWV3KHRoaXMuZWxlbWVudCwge1xuICAgICAgICAgICAgb3JpZW50YXRpb24sXG4gICAgICAgICAgICBwcm9wb3J0aW9uYWxMYXlvdXQ6IHRoaXMub3B0aW9ucy5wcm9wb3J0aW9uYWxMYXlvdXQsXG4gICAgICAgICAgICBkZXNjcmlwdG9yOiB7XG4gICAgICAgICAgICAgICAgc2l6ZSxcbiAgICAgICAgICAgICAgICB2aWV3czogdmlld3MubWFwKCh2aWV3KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB2aWV3LmRhdGE7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9wYW5lbHMuaGFzKGRhdGEuaWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHBhbmVsICR7ZGF0YS5pZH0gYWxyZWFkeSBleGlzdHNgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYW5lbCA9IHRoaXMub3B0aW9ucy5jcmVhdGVDb21wb25lbnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGRhdGEuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBkYXRhLmNvbXBvbmVudCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlLnB1c2goKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFuZWwuaW5pdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiAoX2EgPSBkYXRhLnBhcmFtcykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDoge30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluaW11bVNpemU6IGRhdGEubWluaW11bVNpemUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4aW11bVNpemU6IGRhdGEubWF4aW11bVNpemUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc25hcDogdmlldy5zbmFwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW9yaXR5OiB2aWV3LnByaW9yaXR5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc29yOiB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBwYW5lbC5vcmllbnRhdGlvbiA9IG9yaWVudGF0aW9uO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvQWRkVmlldyhwYW5lbCk7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIG9yaWdpbmFsIG9uRGlkQWRkVmlldyBldmVudHMgYXJlIG1pc3NlZCBzaW5jZSB0aGV5IGFyZSBmaXJlZCBiZWZvcmUgd2UgY2FuIHN1YmNyaWJlIHRvIHRoZW1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29uRGlkQWRkVmlldy5maXJlKHBhbmVsKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHNpemU6IHZpZXcuc2l6ZSwgdmlldzogcGFuZWwgfTtcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmxheW91dCh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgcXVldWUuZm9yRWFjaCgoZikgPT4gZigpKTtcbiAgICAgICAgaWYgKHR5cGVvZiBhY3RpdmVWaWV3ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29uc3QgcGFuZWwgPSB0aGlzLmdldFBhbmVsKGFjdGl2ZVZpZXcpO1xuICAgICAgICAgICAgaWYgKHBhbmVsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRBY3RpdmUocGFuZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX29uRGlkTGF5b3V0ZnJvbUpTT04uZmlyZSgpO1xuICAgIH1cbiAgICBjbGVhcigpIHtcbiAgICAgICAgZm9yIChjb25zdCBkaXNwb3NhYmxlIG9mIHRoaXMuX3BhbmVscy52YWx1ZXMoKSkge1xuICAgICAgICAgICAgZGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcGFuZWxzLmNsZWFyKCk7XG4gICAgICAgIHdoaWxlICh0aGlzLnNwbGl0dmlldy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCB2aWV3ID0gdGhpcy5zcGxpdHZpZXcucmVtb3ZlVmlldygwLCBTaXppbmcuRGlzdHJpYnV0ZSwgdHJ1ZSk7XG4gICAgICAgICAgICB2aWV3LmRpc3Bvc2UoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICBmb3IgKGNvbnN0IGRpc3Bvc2FibGUgb2YgdGhpcy5fcGFuZWxzLnZhbHVlcygpKSB7XG4gICAgICAgICAgICBkaXNwb3NhYmxlLmRpc3Bvc2UoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wYW5lbHMuY2xlYXIoKTtcbiAgICAgICAgY29uc3Qgdmlld3MgPSB0aGlzLnNwbGl0dmlldy5nZXRWaWV3cygpO1xuICAgICAgICB0aGlzLl9zcGxpdHZpZXdDaGFuZ2VEaXNwb3NhYmxlLmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5zcGxpdHZpZXcuZGlzcG9zZSgpO1xuICAgICAgICBmb3IgKGNvbnN0IHZpZXcgb2Ygdmlld3MpIHtcbiAgICAgICAgICAgIHZpZXcuZGlzcG9zZSgpO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyLmRpc3Bvc2UoKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBCYXNlUGFuZWxWaWV3LCB9IGZyb20gJy4uL2dyaWR2aWV3L2Jhc2VQYW5lbFZpZXcnO1xuaW1wb3J0IHsgU3BsaXR2aWV3UGFuZWxBcGlJbXBsIH0gZnJvbSAnLi4vYXBpL3NwbGl0dmlld1BhbmVsQXBpJztcbmltcG9ydCB7IE9yaWVudGF0aW9uIH0gZnJvbSAnLi9zcGxpdHZpZXcnO1xuaW1wb3J0IHsgRW1pdHRlciB9IGZyb20gJy4uL2V2ZW50cyc7XG5leHBvcnQgY2xhc3MgU3BsaXR2aWV3UGFuZWwgZXh0ZW5kcyBCYXNlUGFuZWxWaWV3IHtcbiAgICBnZXQgcHJpb3JpdHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcmlvcml0eTtcbiAgICB9XG4gICAgc2V0IG9yaWVudGF0aW9uKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX29yaWVudGF0aW9uID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBvcmllbnRhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29yaWVudGF0aW9uO1xuICAgIH1cbiAgICBnZXQgbWluaW11bVNpemUoKSB7XG4gICAgICAgIGNvbnN0IHNpemUgPSB0eXBlb2YgdGhpcy5fbWluaW11bVNpemUgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgID8gdGhpcy5fbWluaW11bVNpemUoKVxuICAgICAgICAgICAgOiB0aGlzLl9taW5pbXVtU2l6ZTtcbiAgICAgICAgaWYgKHNpemUgIT09IHRoaXMuX2V2YWx1YXRlZE1pbmltdW1TaXplKSB7XG4gICAgICAgICAgICB0aGlzLl9ldmFsdWF0ZWRNaW5pbXVtU2l6ZSA9IHNpemU7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUNvbnN0cmFpbnRzKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgfVxuICAgIGdldCBtYXhpbXVtU2l6ZSgpIHtcbiAgICAgICAgY29uc3Qgc2l6ZSA9IHR5cGVvZiB0aGlzLl9tYXhpbXVtU2l6ZSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgPyB0aGlzLl9tYXhpbXVtU2l6ZSgpXG4gICAgICAgICAgICA6IHRoaXMuX21heGltdW1TaXplO1xuICAgICAgICBpZiAoc2l6ZSAhPT0gdGhpcy5fZXZhbHVhdGVkTWF4aW11bVNpemUpIHtcbiAgICAgICAgICAgIHRoaXMuX2V2YWx1YXRlZE1heGltdW1TaXplID0gc2l6ZTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQ29uc3RyYWludHMoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2l6ZTtcbiAgICB9XG4gICAgZ2V0IHNuYXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zbmFwO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihpZCwgY29tcG9uZW50TmFtZSkge1xuICAgICAgICBzdXBlcihpZCwgY29tcG9uZW50TmFtZSwgbmV3IFNwbGl0dmlld1BhbmVsQXBpSW1wbChpZCwgY29tcG9uZW50TmFtZSkpO1xuICAgICAgICB0aGlzLl9ldmFsdWF0ZWRNaW5pbXVtU2l6ZSA9IDA7XG4gICAgICAgIHRoaXMuX2V2YWx1YXRlZE1heGltdW1TaXplID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgICB0aGlzLl9taW5pbXVtU2l6ZSA9IDA7XG4gICAgICAgIHRoaXMuX21heGltdW1TaXplID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgICB0aGlzLl9zbmFwID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX29uRGlkQ2hhbmdlID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZENoYW5nZSA9IHRoaXMuX29uRGlkQ2hhbmdlLmV2ZW50O1xuICAgICAgICB0aGlzLmFwaS5pbml0aWFsaXplKHRoaXMpO1xuICAgICAgICB0aGlzLmFkZERpc3Bvc2FibGVzKHRoaXMuX29uRGlkQ2hhbmdlLCB0aGlzLmFwaS5vbldpbGxWaXNpYmlsaXR5Q2hhbmdlKChldmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBpc1Zpc2libGUgfSA9IGV2ZW50O1xuICAgICAgICAgICAgY29uc3QgeyBhY2Nlc3NvciB9ID0gdGhpcy5fcGFyYW1zO1xuICAgICAgICAgICAgYWNjZXNzb3Iuc2V0VmlzaWJsZSh0aGlzLCBpc1Zpc2libGUpO1xuICAgICAgICB9KSwgdGhpcy5hcGkub25BY3RpdmVDaGFuZ2UoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBhY2Nlc3NvciB9ID0gdGhpcy5fcGFyYW1zO1xuICAgICAgICAgICAgYWNjZXNzb3Iuc2V0QWN0aXZlKHRoaXMpO1xuICAgICAgICB9KSwgdGhpcy5hcGkub25EaWRDb25zdHJhaW50c0NoYW5nZUludGVybmFsKChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBldmVudC5taW5pbXVtU2l6ZSA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgICAgICAgICB0eXBlb2YgZXZlbnQubWluaW11bVNpemUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9taW5pbXVtU2l6ZSA9IGV2ZW50Lm1pbmltdW1TaXplO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBldmVudC5tYXhpbXVtU2l6ZSA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgICAgICAgICB0eXBlb2YgZXZlbnQubWF4aW11bVNpemUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXhpbXVtU2l6ZSA9IGV2ZW50Lm1heGltdW1TaXplO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy51cGRhdGVDb25zdHJhaW50cygpO1xuICAgICAgICB9KSwgdGhpcy5hcGkub25EaWRTaXplQ2hhbmdlKChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25EaWRDaGFuZ2UuZmlyZSh7IHNpemU6IGV2ZW50LnNpemUgfSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgc2V0VmlzaWJsZShpc1Zpc2libGUpIHtcbiAgICAgICAgdGhpcy5hcGkuX29uRGlkVmlzaWJpbGl0eUNoYW5nZS5maXJlKHsgaXNWaXNpYmxlIH0pO1xuICAgIH1cbiAgICBzZXRBY3RpdmUoaXNBY3RpdmUpIHtcbiAgICAgICAgdGhpcy5hcGkuX29uRGlkQWN0aXZlQ2hhbmdlLmZpcmUoeyBpc0FjdGl2ZSB9KTtcbiAgICB9XG4gICAgbGF5b3V0KHNpemUsIG9ydGhvZ29uYWxTaXplKSB7XG4gICAgICAgIGNvbnN0IFt3aWR0aCwgaGVpZ2h0XSA9IHRoaXMub3JpZW50YXRpb24gPT09IE9yaWVudGF0aW9uLkhPUklaT05UQUxcbiAgICAgICAgICAgID8gW3NpemUsIG9ydGhvZ29uYWxTaXplXVxuICAgICAgICAgICAgOiBbb3J0aG9nb25hbFNpemUsIHNpemVdO1xuICAgICAgICBzdXBlci5sYXlvdXQod2lkdGgsIGhlaWdodCk7XG4gICAgfVxuICAgIGluaXQocGFyYW1ldGVycykge1xuICAgICAgICBzdXBlci5pbml0KHBhcmFtZXRlcnMpO1xuICAgICAgICB0aGlzLl9wcmlvcml0eSA9IHBhcmFtZXRlcnMucHJpb3JpdHk7XG4gICAgICAgIGlmIChwYXJhbWV0ZXJzLm1pbmltdW1TaXplKSB7XG4gICAgICAgICAgICB0aGlzLl9taW5pbXVtU2l6ZSA9IHBhcmFtZXRlcnMubWluaW11bVNpemU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmFtZXRlcnMubWF4aW11bVNpemUpIHtcbiAgICAgICAgICAgIHRoaXMuX21heGltdW1TaXplID0gcGFyYW1ldGVycy5tYXhpbXVtU2l6ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyYW1ldGVycy5zbmFwKSB7XG4gICAgICAgICAgICB0aGlzLl9zbmFwID0gcGFyYW1ldGVycy5zbmFwO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgY29uc3QgbWF4aW11bSA9ICh2YWx1ZSkgPT4gdmFsdWUgPT09IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSIHx8XG4gICAgICAgICAgICB2YWx1ZSA9PT0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZXG4gICAgICAgICAgICA/IHVuZGVmaW5lZFxuICAgICAgICAgICAgOiB2YWx1ZTtcbiAgICAgICAgY29uc3QgbWluaW11bSA9ICh2YWx1ZSkgPT4gKHZhbHVlIDw9IDAgPyB1bmRlZmluZWQgOiB2YWx1ZSk7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHN1cGVyLnRvSlNPTigpKSwgeyBtaW5pbXVtU2l6ZTogbWluaW11bSh0aGlzLm1pbmltdW1TaXplKSwgbWF4aW11bVNpemU6IG1heGltdW0odGhpcy5tYXhpbXVtU2l6ZSkgfSk7XG4gICAgfVxuICAgIHVwZGF0ZUNvbnN0cmFpbnRzKCkge1xuICAgICAgICB0aGlzLmFwaS5fb25EaWRDb25zdHJhaW50c0NoYW5nZS5maXJlKHtcbiAgICAgICAgICAgIG1heGltdW1TaXplOiB0aGlzLl9ldmFsdWF0ZWRNYXhpbXVtU2l6ZSxcbiAgICAgICAgICAgIG1pbmltdW1TaXplOiB0aGlzLl9ldmFsdWF0ZWRNaW5pbXVtU2l6ZSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgY2xhbXAgfSBmcm9tICcuLi9tYXRoJztcbmV4cG9ydCBjbGFzcyBWaWV3SXRlbSB7XG4gICAgc2V0IHNpemUoc2l6ZSkge1xuICAgICAgICB0aGlzLl9zaXplID0gc2l6ZTtcbiAgICB9XG4gICAgZ2V0IHNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zaXplO1xuICAgIH1cbiAgICBnZXQgY2FjaGVkVmlzaWJsZVNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jYWNoZWRWaXNpYmxlU2l6ZTtcbiAgICB9XG4gICAgZ2V0IHZpc2libGUoKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdGhpcy5fY2FjaGVkVmlzaWJsZVNpemUgPT09ICd1bmRlZmluZWQnO1xuICAgIH1cbiAgICBnZXQgbWluaW11bVNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpc2libGUgPyB0aGlzLnZpZXcubWluaW11bVNpemUgOiAwO1xuICAgIH1cbiAgICBnZXQgdmlld01pbmltdW1TaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3Lm1pbmltdW1TaXplO1xuICAgIH1cbiAgICBnZXQgbWF4aW11bVNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpc2libGUgPyB0aGlzLnZpZXcubWF4aW11bVNpemUgOiAwO1xuICAgIH1cbiAgICBnZXQgdmlld01heGltdW1TaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3Lm1heGltdW1TaXplO1xuICAgIH1cbiAgICBnZXQgcHJpb3JpdHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXcucHJpb3JpdHk7XG4gICAgfVxuICAgIGdldCBzbmFwKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLnZpZXcuc25hcDtcbiAgICB9XG4gICAgc2V0IGVuYWJsZWQoZW5hYmxlZCkge1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5zdHlsZS5wb2ludGVyRXZlbnRzID0gZW5hYmxlZCA/ICcnIDogJ25vbmUnO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcihjb250YWluZXIsIHZpZXcsIHNpemUsIGRpc3Bvc2FibGUpIHtcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgICAgIHRoaXMudmlldyA9IHZpZXc7XG4gICAgICAgIHRoaXMuZGlzcG9zYWJsZSA9IGRpc3Bvc2FibGU7XG4gICAgICAgIHRoaXMuX2NhY2hlZFZpc2libGVTaXplID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAodHlwZW9mIHNpemUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aGlzLl9zaXplID0gc2l6ZTtcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlZFZpc2libGVTaXplID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3Zpc2libGUnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3NpemUgPSAwO1xuICAgICAgICAgICAgdGhpcy5fY2FjaGVkVmlzaWJsZVNpemUgPSBzaXplLmNhY2hlZFZpc2libGVTaXplO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldFZpc2libGUodmlzaWJsZSwgc2l6ZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICh2aXNpYmxlID09PSB0aGlzLnZpc2libGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmlzaWJsZSkge1xuICAgICAgICAgICAgdGhpcy5zaXplID0gY2xhbXAoKF9hID0gdGhpcy5fY2FjaGVkVmlzaWJsZVNpemUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDAsIHRoaXMudmlld01pbmltdW1TaXplLCB0aGlzLnZpZXdNYXhpbXVtU2l6ZSk7XG4gICAgICAgICAgICB0aGlzLl9jYWNoZWRWaXNpYmxlU2l6ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlZFZpc2libGVTaXplID1cbiAgICAgICAgICAgICAgICB0eXBlb2Ygc2l6ZSA9PT0gJ251bWJlcicgPyBzaXplIDogdGhpcy5zaXplO1xuICAgICAgICAgICAgdGhpcy5zaXplID0gMDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QudG9nZ2xlKCd2aXNpYmxlJywgdmlzaWJsZSk7XG4gICAgICAgIGlmICh0aGlzLnZpZXcuc2V0VmlzaWJsZSkge1xuICAgICAgICAgICAgdGhpcy52aWV3LnNldFZpc2libGUodmlzaWJsZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGlzcG9zZSgpIHtcbiAgICAgICAgdGhpcy5kaXNwb3NhYmxlLmRpc3Bvc2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlldztcbiAgICB9XG59XG4iLCJjb25zdCBjcmVhdGVTdmdFbGVtZW50RnJvbVBhdGggPSAocGFyYW1zKSA9PiB7XG4gICAgY29uc3Qgc3ZnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdzdmcnKTtcbiAgICBzdmcuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2hlaWdodCcsIHBhcmFtcy5oZWlnaHQpO1xuICAgIHN2Zy5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnd2lkdGgnLCBwYXJhbXMud2lkdGgpO1xuICAgIHN2Zy5zZXRBdHRyaWJ1dGVOUyhudWxsLCAndmlld0JveCcsIHBhcmFtcy52aWV3Ym94KTtcbiAgICBzdmcuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG4gICAgc3ZnLnNldEF0dHJpYnV0ZU5TKG51bGwsICdmb2N1c2FibGUnLCAnZmFsc2UnKTtcbiAgICBzdmcuY2xhc3NMaXN0LmFkZCgnZHYtc3ZnJyk7XG4gICAgY29uc3QgcGF0aCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAncGF0aCcpO1xuICAgIHBhdGguc2V0QXR0cmlidXRlTlMobnVsbCwgJ2QnLCBwYXJhbXMucGF0aCk7XG4gICAgc3ZnLmFwcGVuZENoaWxkKHBhdGgpO1xuICAgIHJldHVybiBzdmc7XG59O1xuZXhwb3J0IGNvbnN0IGNyZWF0ZUNsb3NlQnV0dG9uID0gKCkgPT4gY3JlYXRlU3ZnRWxlbWVudEZyb21QYXRoKHtcbiAgICB3aWR0aDogJzExJyxcbiAgICBoZWlnaHQ6ICcxMScsXG4gICAgdmlld2JveDogJzAgMCAyOCAyOCcsXG4gICAgcGF0aDogJ00yLjEgMjcuM0wwIDI1LjJMMTEuNTUgMTMuNjVMMCAyLjFMMi4xIDBMMTMuNjUgMTEuNTVMMjUuMiAwTDI3LjMgMi4xTDE1Ljc1IDEzLjY1TDI3LjMgMjUuMkwyNS4yIDI3LjNMMTMuNjUgMTUuNzVMMi4xIDI3LjNaJyxcbn0pO1xuZXhwb3J0IGNvbnN0IGNyZWF0ZUV4cGFuZE1vcmVCdXR0b24gPSAoKSA9PiBjcmVhdGVTdmdFbGVtZW50RnJvbVBhdGgoe1xuICAgIHdpZHRoOiAnMTEnLFxuICAgIGhlaWdodDogJzExJyxcbiAgICB2aWV3Ym94OiAnMCAwIDI0IDE1JyxcbiAgICBwYXRoOiAnTTEyIDE0LjE1TDAgMi4xNUwyLjE1IDBMMTIgOS45TDIxLjg1IDAuMDQ5OTk5MkwyNCAyLjJMMTIgMTQuMTVaJyxcbn0pO1xuZXhwb3J0IGNvbnN0IGNyZWF0ZUNoZXZyb25SaWdodEJ1dHRvbiA9ICgpID0+IGNyZWF0ZVN2Z0VsZW1lbnRGcm9tUGF0aCh7XG4gICAgd2lkdGg6ICcxMScsXG4gICAgaGVpZ2h0OiAnMTEnLFxuICAgIHZpZXdib3g6ICcwIDAgMTUgMjUnLFxuICAgIHBhdGg6ICdNMi4xNSAyNC4xTDAgMjEuOTVMOS45IDEyLjA1TDAgMi4xNUwyLjE1IDBMMTQuMiAxMi4wNUwyLjE1IDI0LjFaJyxcbn0pO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsxXSEuL2RvY2t2aWV3LmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xub3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsxXSEuL2RvY2t2aWV3LmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB1cGRhdGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwibW9kdWxlLmV4cG9ydHMgPSBIVE1MV2lkZ2V0czsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCJpbXBvcnQgJ3dpZGdldHMnO1xuXG5pbXBvcnQgXCJkb2Nrdmlldy1jb3JlL2Rpc3Qvc3R5bGVzL2RvY2t2aWV3LmNzc1wiXG5pbXBvcnQgeyBjcmVhdGVEb2NrdmlldyB9IGZyb20gXCJkb2Nrdmlldy1jb3JlXCJcblxuY2xhc3MgUGFuZWwge1xuICBnZXQgZWxlbWVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZWxlbWVudFxuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIilcbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlLmNvbG9yID0gXCJ3aGl0ZVwiXG4gIH1cblxuICBpbml0KHBhcmFtZXRlcnMpIHtcbiAgICB0aGlzLl9lbGVtZW50LnRleHRDb250ZW50ID0gXCJIZWxsbyBXb3JsZFwiXG4gIH1cbn1cblxuSFRNTFdpZGdldHMud2lkZ2V0KHtcblxuICBuYW1lOiAnZG9ja192aWV3JyxcblxuICB0eXBlOiAnb3V0cHV0JyxcblxuICBmYWN0b3J5OiBmdW5jdGlvbiAoZWwsIHdpZHRoLCBoZWlnaHQpIHtcblxuICAgIC8vIFRPRE86IGRlZmluZSBzaGFyZWQgdmFyaWFibGVzIGZvciB0aGlzIGluc3RhbmNlXG5cbiAgICByZXR1cm4ge1xuXG4gICAgICByZW5kZXJWYWx1ZTogZnVuY3Rpb24gKHgsIGlkID0gZWwuaWQpIHtcblxuICAgICAgICAvLyBUT0RPOiBjb2RlIHRvIHJlbmRlciB0aGUgd2lkZ2V0LCBlLmcuXG4gICAgICAgIGNvbnN0IGFwaSA9IGNyZWF0ZURvY2t2aWV3KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKSwge1xuICAgICAgICAgIGNsYXNzTmFtZTogXCJkb2Nrdmlldy10aGVtZS1hYnlzc1wiLFxuICAgICAgICAgIGNyZWF0ZUNvbXBvbmVudDogb3B0aW9ucyA9PiB7XG4gICAgICAgICAgICBzd2l0Y2ggKG9wdGlvbnMubmFtZSkge1xuICAgICAgICAgICAgICBjYXNlIFwiZGVmYXVsdFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUGFuZWwoKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuICAgICAgICBhcGkuYWRkUGFuZWwoe1xuICAgICAgICAgIGlkOiBcInBhbmVsXzFcIixcbiAgICAgICAgICBjb21wb25lbnQ6IFwiZGVmYXVsdFwiLFxuICAgICAgICAgIHRpdGxlOiBcIlBhbmVsIDFcIlxuICAgICAgICB9KVxuXG4gICAgICAgIGFwaS5hZGRQYW5lbCh7XG4gICAgICAgICAgaWQ6IFwicGFuZWxfMlwiLFxuICAgICAgICAgIGNvbXBvbmVudDogXCJkZWZhdWx0XCIsXG4gICAgICAgICAgcG9zaXRpb246IHsgcmVmZXJlbmNlUGFuZWw6IFwicGFuZWxfMVwiLCBkaXJlY3Rpb246IFwicmlnaHRcIiB9LFxuICAgICAgICAgIHRpdGxlOiBcIlBhbmVsIDJcIlxuICAgICAgICB9KVxuXG4gICAgICB9LFxuXG4gICAgICByZXNpemU6IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0KSB7XG5cbiAgICAgICAgLy8gVE9ETzogY29kZSB0byByZS1yZW5kZXIgdGhlIHdpZGdldCB3aXRoIGEgbmV3IHNpemVcblxuICAgICAgfVxuXG4gICAgfTtcbiAgfVxufSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=