/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/dockview-core/dist/styles/dockview.css":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/dockview-core/dist/styles/dockview.css ***!
  \*******************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.dv-scrollable {
  position: relative;
  overflow: hidden;
}
.dv-scrollable .dv-scrollbar-horizontal {
  position: absolute;
  bottom: 0px;
  left: 0px;
  height: 4px;
  border-radius: 2px;
  background-color: transparent;
  /* GPU optimizations */
  will-change: background-color, transform;
  transform: translate3d(0, 0, 0);
  backface-visibility: hidden;
  transition-property: background-color;
  transition-timing-function: ease-in-out;
  transition-duration: 1s;
  transition-delay: 0s;
}
.dv-scrollable:hover .dv-scrollbar-horizontal, .dv-scrollable.dv-scrollable-resizing .dv-scrollbar-horizontal, .dv-scrollable.dv-scrollable-scrolling .dv-scrollbar-horizontal {
  background-color: var(--dv-scrollbar-background-color, rgba(255, 255, 255, 0.25));
}
.dv-svg {
  display: inline-block;
  fill: currentcolor;
  line-height: 1;
  stroke: currentcolor;
  stroke-width: 0;
}
.dockview-theme-dark {
  --dv-paneview-active-outline-color: dodgerblue;
  --dv-tabs-and-actions-container-font-size: 13px;
  --dv-tabs-and-actions-container-height: 35px;
  --dv-drag-over-background-color: rgba(83, 89, 93, 0.5);
  --dv-drag-over-border-color: transparent;
  --dv-tabs-container-scrollbar-color: #888;
  --dv-icon-hover-background-color: rgba(90, 93, 94, 0.31);
  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(83, 89, 93, 0.5);
  --dv-overlay-z-index: 999;
  --dv-tab-font-size: inherit;
  --dv-border-radius: 0px;
  --dv-tab-margin: 0;
  --dv-sash-color: transparent;
  --dv-active-sash-color: transparent;
  --dv-active-sash-transition-duration: 0.1s;
  --dv-active-sash-transition-delay: 0.5s;
  --dv-group-view-background-color: #1e1e1e;
  --dv-tabs-and-actions-container-background-color: #252526;
  --dv-activegroup-visiblepanel-tab-background-color: #1e1e1e;
  --dv-activegroup-hiddenpanel-tab-background-color: #2d2d2d;
  --dv-inactivegroup-visiblepanel-tab-background-color: #1e1e1e;
  --dv-inactivegroup-hiddenpanel-tab-background-color: #2d2d2d;
  --dv-tab-divider-color: #1e1e1e;
  --dv-activegroup-visiblepanel-tab-color: white;
  --dv-activegroup-hiddenpanel-tab-color: #969696;
  --dv-inactivegroup-visiblepanel-tab-color: #8f8f8f;
  --dv-inactivegroup-hiddenpanel-tab-color: #626262;
  --dv-separator-border: rgb(68, 68, 68);
  --dv-paneview-header-border-color: rgba(204, 204, 204, 0.2);
}
.dockview-theme-dark .dv-drop-target-container .dv-drop-target-anchor.dv-drop-target-anchor-container-changed {
  opacity: 0;
  transition: none;
}

.dockview-theme-light {
  --dv-paneview-active-outline-color: dodgerblue;
  --dv-tabs-and-actions-container-font-size: 13px;
  --dv-tabs-and-actions-container-height: 35px;
  --dv-drag-over-background-color: rgba(83, 89, 93, 0.5);
  --dv-drag-over-border-color: transparent;
  --dv-tabs-container-scrollbar-color: #888;
  --dv-icon-hover-background-color: rgba(90, 93, 94, 0.31);
  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(83, 89, 93, 0.5);
  --dv-overlay-z-index: 999;
  --dv-tab-font-size: inherit;
  --dv-border-radius: 0px;
  --dv-tab-margin: 0;
  --dv-sash-color: transparent;
  --dv-active-sash-color: transparent;
  --dv-active-sash-transition-duration: 0.1s;
  --dv-active-sash-transition-delay: 0.5s;
  --dv-group-view-background-color: white;
  --dv-tabs-and-actions-container-background-color: #f3f3f3;
  --dv-activegroup-visiblepanel-tab-background-color: white;
  --dv-activegroup-hiddenpanel-tab-background-color: #ececec;
  --dv-inactivegroup-visiblepanel-tab-background-color: white;
  --dv-inactivegroup-hiddenpanel-tab-background-color: #ececec;
  --dv-tab-divider-color: white;
  --dv-activegroup-visiblepanel-tab-color: rgb(51, 51, 51);
  --dv-activegroup-hiddenpanel-tab-color: rgba(51, 51, 51, 0.7);
  --dv-inactivegroup-visiblepanel-tab-color: rgba(51, 51, 51, 0.7);
  --dv-inactivegroup-hiddenpanel-tab-color: rgba(51, 51, 51, 0.35);
  --dv-separator-border: rgba(128, 128, 128, 0.35);
  --dv-paneview-header-border-color: rgb(51, 51, 51);
  --dv-scrollbar-background-color: rgba(0, 0, 0, 0.25);
}
.dockview-theme-light .dv-drop-target-container .dv-drop-target-anchor.dv-drop-target-anchor-container-changed {
  opacity: 0;
  transition: none;
}

.dockview-theme-vs {
  --dv-paneview-active-outline-color: dodgerblue;
  --dv-tabs-and-actions-container-font-size: 13px;
  --dv-tabs-and-actions-container-height: 35px;
  --dv-drag-over-background-color: rgba(83, 89, 93, 0.5);
  --dv-drag-over-border-color: transparent;
  --dv-tabs-container-scrollbar-color: #888;
  --dv-icon-hover-background-color: rgba(90, 93, 94, 0.31);
  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(83, 89, 93, 0.5);
  --dv-overlay-z-index: 999;
  --dv-tab-font-size: inherit;
  --dv-border-radius: 0px;
  --dv-tab-margin: 0;
  --dv-sash-color: transparent;
  --dv-active-sash-color: transparent;
  --dv-active-sash-transition-duration: 0.1s;
  --dv-active-sash-transition-delay: 0.5s;
  --dv-group-view-background-color: #1e1e1e;
  --dv-tabs-and-actions-container-background-color: #252526;
  --dv-activegroup-visiblepanel-tab-background-color: #1e1e1e;
  --dv-activegroup-hiddenpanel-tab-background-color: #2d2d2d;
  --dv-inactivegroup-visiblepanel-tab-background-color: #1e1e1e;
  --dv-inactivegroup-hiddenpanel-tab-background-color: #2d2d2d;
  --dv-tab-divider-color: #1e1e1e;
  --dv-activegroup-visiblepanel-tab-color: white;
  --dv-activegroup-hiddenpanel-tab-color: #969696;
  --dv-inactivegroup-visiblepanel-tab-color: #8f8f8f;
  --dv-inactivegroup-hiddenpanel-tab-color: #626262;
  --dv-separator-border: rgb(68, 68, 68);
  --dv-paneview-header-border-color: rgba(204, 204, 204, 0.2);
  --dv-tabs-and-actions-container-background-color: #2d2d30;
  --dv-tabs-and-actions-container-height: 20px;
  --dv-tabs-and-actions-container-font-size: 11px;
  --dv-activegroup-visiblepanel-tab-background-color: #007acc;
  --dv-inactivegroup-visiblepanel-tab-background-color: #3f3f46;
  --dv-activegroup-visiblepanel-tab-color: white;
  --dv-activegroup-hiddenpanel-tab-color: white;
  --dv-inactivegroup-visiblepanel-tab-color: white;
  --dv-inactivegroup-hiddenpanel-tab-color: white;
}
.dockview-theme-vs .dv-drop-target-container .dv-drop-target-anchor.dv-drop-target-anchor-container-changed {
  opacity: 0;
  transition: none;
}
.dockview-theme-vs .dv-groupview.dv-active-group > .dv-tabs-and-actions-container {
  box-sizing: content-box;
  border-bottom: 2px solid var(--dv-activegroup-visiblepanel-tab-background-color);
}
.dockview-theme-vs .dv-groupview.dv-active-group > .dv-tabs-and-actions-container .dv-tab.dv-active-tab {
  border-top: 2px solid var(--dv-activegroup-visiblepanel-tab-background-color);
}
.dockview-theme-vs .dv-groupview.dv-active-group > .dv-tabs-and-actions-container .dv-tab.dv-inactive-tab {
  border-top: 2px solid var(--dv-activegroup-hiddenpanel-tab-background-color);
}
.dockview-theme-vs .dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container {
  box-sizing: content-box;
  border-bottom: 2px solid var(--dv-inactivegroup-visiblepanel-tab-background-color);
}
.dockview-theme-vs .dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container .dv-tab.dv-active-tab {
  border-top: 2px solid var(--dv-inactivegroup-visiblepanel-tab-background-color);
}
.dockview-theme-vs .dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container .dv-tab.dv-inactive-tab {
  border-top: 2px solid var(--dv-inactivegroup-hiddenpanel-tab-background-color);
}

.dockview-theme-abyss {
  --dv-paneview-active-outline-color: dodgerblue;
  --dv-tabs-and-actions-container-font-size: 13px;
  --dv-tabs-and-actions-container-height: 35px;
  --dv-drag-over-background-color: rgba(83, 89, 93, 0.5);
  --dv-drag-over-border-color: transparent;
  --dv-tabs-container-scrollbar-color: #888;
  --dv-icon-hover-background-color: rgba(90, 93, 94, 0.31);
  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(83, 89, 93, 0.5);
  --dv-overlay-z-index: 999;
  --dv-tab-font-size: inherit;
  --dv-border-radius: 0px;
  --dv-tab-margin: 0;
  --dv-sash-color: transparent;
  --dv-active-sash-color: transparent;
  --dv-active-sash-transition-duration: 0.1s;
  --dv-active-sash-transition-delay: 0.5s;
  --dv-color-abyss-dark: #000c18;
  --dv-color-abyss: #10192c;
  --dv-color-abyss-light: #1c1c2a;
  --dv-color-abyss-lighter: #2b2b4a;
  --dv-color-abyss-accent: rgb(91, 30, 207);
  --dv-color-abyss-primary-text: white;
  --dv-color-abyss-secondary-text: rgb(148, 151, 169);
  --dv-group-view-background-color: var(--dv-color-abyss-dark);
  --dv-tabs-and-actions-container-background-color: var(
      --dv-color-abyss-light
  );
  --dv-activegroup-visiblepanel-tab-background-color: var(
      --dv-color-abyss-dark
  );
  --dv-activegroup-hiddenpanel-tab-background-color: var(--dv-color-abyss);
  --dv-inactivegroup-visiblepanel-tab-background-color: var(
      --dv-color-abyss-dark
  );
  --dv-inactivegroup-hiddenpanel-tab-background-color: var(--dv-color-abyss);
  --dv-tab-divider-color: var(--dv-color-abyss-lighter);
  --dv-activegroup-visiblepanel-tab-color: white;
  --dv-activegroup-hiddenpanel-tab-color: rgba(255, 255, 255, 0.5);
  --dv-inactivegroup-visiblepanel-tab-color: rgba(255, 255, 255, 0.5);
  --dv-inactivegroup-hiddenpanel-tab-color: rgba(255, 255, 255, 0.25);
  --dv-separator-border: var(--dv-color-abyss-lighter);
  --dv-paneview-header-border-color: var(--dv-color-abyss-lighter);
  --dv-paneview-active-outline-color: #596f99;
}
.dockview-theme-abyss .dv-drop-target-container .dv-drop-target-anchor.dv-drop-target-anchor-container-changed {
  opacity: 0;
  transition: none;
}

.dockview-theme-dracula {
  --dv-paneview-active-outline-color: dodgerblue;
  --dv-tabs-and-actions-container-font-size: 13px;
  --dv-tabs-and-actions-container-height: 35px;
  --dv-drag-over-background-color: rgba(83, 89, 93, 0.5);
  --dv-drag-over-border-color: transparent;
  --dv-tabs-container-scrollbar-color: #888;
  --dv-icon-hover-background-color: rgba(90, 93, 94, 0.31);
  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(83, 89, 93, 0.5);
  --dv-overlay-z-index: 999;
  --dv-tab-font-size: inherit;
  --dv-border-radius: 0px;
  --dv-tab-margin: 0;
  --dv-sash-color: transparent;
  --dv-active-sash-color: transparent;
  --dv-active-sash-transition-duration: 0.1s;
  --dv-active-sash-transition-delay: 0.5s;
  --dv-group-view-background-color: #282a36;
  --dv-tabs-and-actions-container-background-color: #191a21;
  --dv-activegroup-visiblepanel-tab-background-color: #282a36;
  --dv-activegroup-hiddenpanel-tab-background-color: #21222c;
  --dv-inactivegroup-visiblepanel-tab-background-color: #282a36;
  --dv-inactivegroup-hiddenpanel-tab-background-color: #21222c;
  --dv-tab-divider-color: #191a21;
  --dv-activegroup-visiblepanel-tab-color: rgb(248, 248, 242);
  --dv-activegroup-hiddenpanel-tab-color: rgb(98, 114, 164);
  --dv-inactivegroup-visiblepanel-tab-color: rgba(248, 248, 242, 0.5);
  --dv-inactivegroup-hiddenpanel-tab-color: rgba(98, 114, 164, 0.5);
  --dv-separator-border: #bd93f9;
  --dv-paneview-header-border-color: #bd93f9;
  --dv-paneview-active-outline-color: #6272a4;
}
.dockview-theme-dracula .dv-drop-target-container .dv-drop-target-anchor.dv-drop-target-anchor-container-changed {
  opacity: 0;
  transition: none;
}
.dockview-theme-dracula .dv-groupview.dv-active-group > .dv-tabs-and-actions-container .dv-tabs-container > .dv-tab.dv-active-tab {
  position: relative;
}
.dockview-theme-dracula .dv-groupview.dv-active-group > .dv-tabs-and-actions-container .dv-tabs-container > .dv-tab.dv-active-tab::after {
  position: absolute;
  left: 0px;
  top: 0px;
  content: "";
  width: 100%;
  height: 1px;
  background-color: #94527e;
  z-index: 999;
}
.dockview-theme-dracula .dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container .dv-tabs-container > .dv-tab.dv-active-tab {
  position: relative;
}
.dockview-theme-dracula .dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container .dv-tabs-container > .dv-tab.dv-active-tab::after {
  position: absolute;
  left: 0px;
  bottom: 0px;
  content: "";
  width: 100%;
  height: 1px;
  background-color: #5e3d5a;
  z-index: 999;
}

.dockview-theme-replit {
  --dv-paneview-active-outline-color: dodgerblue;
  --dv-tabs-and-actions-container-font-size: 13px;
  --dv-tabs-and-actions-container-height: 35px;
  --dv-drag-over-background-color: rgba(83, 89, 93, 0.5);
  --dv-drag-over-border-color: transparent;
  --dv-tabs-container-scrollbar-color: #888;
  --dv-icon-hover-background-color: rgba(90, 93, 94, 0.31);
  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(83, 89, 93, 0.5);
  --dv-overlay-z-index: 999;
  --dv-tab-font-size: inherit;
  --dv-border-radius: 0px;
  --dv-tab-margin: 0;
  --dv-sash-color: transparent;
  --dv-active-sash-color: transparent;
  --dv-active-sash-transition-duration: 0.1s;
  --dv-active-sash-transition-delay: 0.5s;
  box-sizing: border-box;
  padding: 10px;
  background-color: #ebeced;
  --dv-group-view-background-color: #ebeced;
  --dv-tabs-and-actions-container-background-color: #fcfcfc;
  --dv-activegroup-visiblepanel-tab-background-color: #f0f1f2;
  --dv-activegroup-hiddenpanel-tab-background-color: #fcfcfc;
  --dv-inactivegroup-visiblepanel-tab-background-color: #f0f1f2;
  --dv-inactivegroup-hiddenpanel-tab-background-color: #fcfcfc;
  --dv-tab-divider-color: transparent;
  --dv-activegroup-visiblepanel-tab-color: rgb(51, 51, 51);
  --dv-activegroup-hiddenpanel-tab-color: rgb(51, 51, 51);
  --dv-inactivegroup-visiblepanel-tab-color: rgb(51, 51, 51);
  --dv-inactivegroup-hiddenpanel-tab-color: rgb(51, 51, 51);
  --dv-separator-border: transparent;
  --dv-paneview-header-border-color: rgb(51, 51, 51);
  --dv-sash-color: #cfd1d3;
  --dv-active-sash-color: #babbbb;
}
.dockview-theme-replit .dv-drop-target-container .dv-drop-target-anchor.dv-drop-target-anchor-container-changed {
  opacity: 0;
  transition: none;
}
.dockview-theme-replit .dv-resize-container:has(> .dv-groupview) {
  border-radius: 8px;
}
.dockview-theme-replit .dv-resize-container {
  border-radius: 10px !important;
  border: none;
}
.dockview-theme-replit .dv-groupview {
  overflow: hidden;
  border-radius: 10px;
}
.dockview-theme-replit .dv-groupview .dv-tabs-and-actions-container {
  border-bottom: 1px solid rgba(128, 128, 128, 0.35);
}
.dockview-theme-replit .dv-groupview .dv-tabs-and-actions-container .dv-tab {
  margin: 4px;
  border-radius: 8px;
}
.dockview-theme-replit .dv-groupview .dv-tabs-and-actions-container .dv-tab .dv-svg {
  height: 8px;
  width: 8px;
}
.dockview-theme-replit .dv-groupview .dv-tabs-and-actions-container .dv-tab:hover {
  background-color: #e4e5e6 !important;
}
.dockview-theme-replit .dv-groupview .dv-content-container {
  background-color: #fcfcfc;
}
.dockview-theme-replit .dv-groupview.dv-active-group {
  border: 1px solid rgba(128, 128, 128, 0.35);
}
.dockview-theme-replit .dv-groupview.dv-inactive-group {
  border: 1px solid transparent;
}
.dockview-theme-replit .dv-vertical > .dv-sash-container > .dv-sash {
  background-color: transparent;
}
.dockview-theme-replit .dv-vertical > .dv-sash-container > .dv-sash:not(.disabled)::after {
  content: "";
  height: 4px;
  width: 40px;
  border-radius: 2px;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background-color: var(--dv-sash-color);
  position: absolute;
}
.dockview-theme-replit .dv-vertical > .dv-sash-container > .dv-sash:not(.disabled):hover, .dockview-theme-replit .dv-vertical > .dv-sash-container > .dv-sash:not(.disabled):active {
  background-color: transparent;
}
.dockview-theme-replit .dv-vertical > .dv-sash-container > .dv-sash:not(.disabled):hover::after, .dockview-theme-replit .dv-vertical > .dv-sash-container > .dv-sash:not(.disabled):active::after {
  background-color: var(--dv-active-sash-color);
}
.dockview-theme-replit .dv-horizontal > .dv-sash-container > .dv-sash {
  background-color: transparent;
}
.dockview-theme-replit .dv-horizontal > .dv-sash-container > .dv-sash:not(.disabled)::after {
  content: "";
  height: 40px;
  width: 4px;
  border-radius: 2px;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background-color: var(--dv-sash-color);
  position: absolute;
}
.dockview-theme-replit .dv-horizontal > .dv-sash-container > .dv-sash:not(.disabled):hover, .dockview-theme-replit .dv-horizontal > .dv-sash-container > .dv-sash:not(.disabled):active {
  background-color: transparent;
}
.dockview-theme-replit .dv-horizontal > .dv-sash-container > .dv-sash:not(.disabled):hover::after, .dockview-theme-replit .dv-horizontal > .dv-sash-container > .dv-sash:not(.disabled):active::after {
  background-color: var(--dv-active-sash-color);
}

.dockview-theme-abyss-spaced {
  --dv-paneview-active-outline-color: dodgerblue;
  --dv-tabs-and-actions-container-font-size: 13px;
  --dv-tabs-and-actions-container-height: 35px;
  --dv-drag-over-background-color: rgba(83, 89, 93, 0.5);
  --dv-drag-over-border-color: transparent;
  --dv-tabs-container-scrollbar-color: #888;
  --dv-icon-hover-background-color: rgba(90, 93, 94, 0.31);
  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(83, 89, 93, 0.5);
  --dv-overlay-z-index: 999;
  --dv-tab-font-size: inherit;
  --dv-border-radius: 0px;
  --dv-tab-margin: 0;
  --dv-sash-color: transparent;
  --dv-active-sash-color: transparent;
  --dv-active-sash-transition-duration: 0.1s;
  --dv-active-sash-transition-delay: 0.5s;
  --dv-tab-font-size: 12px;
  --dv-border-radius: 20px;
  --dv-tab-margin: 0.5rem 0.25rem;
  --dv-tabs-and-actions-container-height: 44px;
  --dv-border-radius: 20px;
  box-sizing: border-box;
  --dv-color-abyss-dark: rgb(11, 6, 17);
  --dv-color-abyss: #16121f;
  --dv-color-abyss-light: #201d2b;
  --dv-color-abyss-lighter: #2a2837;
  --dv-color-abyss-accent: rgb(91, 30, 207);
  --dv-color-abyss-primary-text: white;
  --dv-color-abyss-secondary-text: rgb(148, 151, 169);
  --dv-drag-over-border: 2px solid var(--dv-color-abyss-accent);
  --dv-drag-over-background-color: "";
  --dv-group-view-background-color: var(--dv-color-abyss-dark);
  --dv-tabs-and-actions-container-background-color: var(--dv-color-abyss);
  --dv-activegroup-visiblepanel-tab-background-color: var(
      --dv-color-abyss-lighter
  );
  --dv-activegroup-hiddenpanel-tab-background-color: var(
      --dv-color-abyss-light
  );
  --dv-inactivegroup-visiblepanel-tab-background-color: var(
      --dv-color-abyss-lighter
  );
  --dv-inactivegroup-hiddenpanel-tab-background-color: var(
      --dv-color-abyss-light
  );
  --dv-tab-divider-color: transparent;
  --dv-activegroup-visiblepanel-tab-color: var(--dv-color-abyss-primary-text);
  --dv-activegroup-hiddenpanel-tab-color: var(
      --dv-color-abyss-secondary-text
  );
  --dv-inactivegroup-visiblepanel-tab-color: var(
      --dv-color-abyss-primary-text
  );
  --dv-inactivegroup-hiddenpanel-tab-color: var(
      --dv-color-abyss-secondary-text
  );
  --dv-separator-border: transparent;
  --dv-paneview-header-border-color: rgb(51, 51, 51);
  --dv-active-sash-color: var(--dv-color-abyss-accent);
  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(0, 0, 0, 0.5);
  padding: 10px;
  background-color: var(--dv-color-abyss-dark);
}
.dockview-theme-abyss-spaced .dv-resize-container:has(> .dv-groupview) {
  border-radius: 8px;
}
.dockview-theme-abyss-spaced .dv-sash {
  border-radius: 4px;
}
.dockview-theme-abyss-spaced .dv-drop-target-anchor {
  border-radius: calc(var(--dv-border-radius) / 4);
}
.dockview-theme-abyss-spaced .dv-drop-target-anchor.dv-drop-target-content {
  border-radius: var(--dv-border-radius);
}
.dockview-theme-abyss-spaced .dv-resize-container {
  border-radius: var(--dv-border-radius) !important;
  border: none;
}
.dockview-theme-abyss-spaced .dv-tabs-overflow-container,
.dockview-theme-abyss-spaced .dv-tabs-overflow-dropdown-default {
  border-radius: 8px;
  height: unset !important;
}
.dockview-theme-abyss-spaced .dv-tab {
  border-radius: 8px;
}
.dockview-theme-abyss-spaced .dv-tab .dv-svg {
  height: 8px;
  width: 8px;
}
.dockview-theme-abyss-spaced .dv-groupview {
  border-radius: var(--dv-border-radius);
}
.dockview-theme-abyss-spaced .dv-groupview .dv-tabs-and-actions-container {
  padding: 0px calc(var(--dv-border-radius) / 2);
}
.dockview-theme-abyss-spaced .dv-groupview .dv-content-container {
  background-color: var(--dv-tabs-and-actions-container-background-color);
}
.dockview-theme-abyss-spaced .dv-resize-container .dv-groupview {
  border: 2px solid var(--dv-color-abyss-dark);
}

.dockview-theme-light-spaced {
  --dv-paneview-active-outline-color: dodgerblue;
  --dv-tabs-and-actions-container-font-size: 13px;
  --dv-tabs-and-actions-container-height: 35px;
  --dv-drag-over-background-color: rgba(83, 89, 93, 0.5);
  --dv-drag-over-border-color: transparent;
  --dv-tabs-container-scrollbar-color: #888;
  --dv-icon-hover-background-color: rgba(90, 93, 94, 0.31);
  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(83, 89, 93, 0.5);
  --dv-overlay-z-index: 999;
  --dv-tab-font-size: inherit;
  --dv-border-radius: 0px;
  --dv-tab-margin: 0;
  --dv-sash-color: transparent;
  --dv-active-sash-color: transparent;
  --dv-active-sash-transition-duration: 0.1s;
  --dv-active-sash-transition-delay: 0.5s;
  --dv-tab-font-size: 12px;
  --dv-border-radius: 20px;
  --dv-tab-margin: 0.5rem 0.25rem;
  --dv-tabs-and-actions-container-height: 44px;
  --dv-border-radius: 20px;
  box-sizing: border-box;
  --dv-drag-over-border: 2px solid rgb(91, 30, 207);
  --dv-drag-over-background-color: "";
  --dv-group-view-background-color: #f6f5f9;
  --dv-tabs-and-actions-container-background-color: white;
  --dv-activegroup-visiblepanel-tab-background-color: #ededf0;
  --dv-activegroup-hiddenpanel-tab-background-color: #f9f9fa;
  --dv-inactivegroup-visiblepanel-tab-background-color: #ededf0;
  --dv-inactivegroup-hiddenpanel-tab-background-color: #f9f9fa;
  --dv-tab-divider-color: transparent;
  --dv-activegroup-visiblepanel-tab-color: rgb(104, 107, 130);
  --dv-activegroup-hiddenpanel-tab-color: rgb(148, 151, 169);
  --dv-inactivegroup-visiblepanel-tab-color: rgb(104, 107, 130);
  --dv-inactivegroup-hiddenpanel-tab-color: rgb(148, 151, 169);
  --dv-separator-border: transparent;
  --dv-paneview-header-border-color: rgb(51, 51, 51);
  --dv-active-sash-color: rgb(91, 30, 207);
  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(0, 0, 0, 0.1);
  padding: 10px;
  background-color: #f6f5f9;
  --dv-scrollbar-background-color: rgba(0, 0, 0, 0.25);
}
.dockview-theme-light-spaced .dv-resize-container:has(> .dv-groupview) {
  border-radius: 8px;
}
.dockview-theme-light-spaced .dv-sash {
  border-radius: 4px;
}
.dockview-theme-light-spaced .dv-drop-target-anchor {
  border-radius: calc(var(--dv-border-radius) / 4);
}
.dockview-theme-light-spaced .dv-drop-target-anchor.dv-drop-target-content {
  border-radius: var(--dv-border-radius);
}
.dockview-theme-light-spaced .dv-resize-container {
  border-radius: var(--dv-border-radius) !important;
  border: none;
}
.dockview-theme-light-spaced .dv-tabs-overflow-container,
.dockview-theme-light-spaced .dv-tabs-overflow-dropdown-default {
  border-radius: 8px;
  height: unset !important;
}
.dockview-theme-light-spaced .dv-tab {
  border-radius: 8px;
}
.dockview-theme-light-spaced .dv-tab .dv-svg {
  height: 8px;
  width: 8px;
}
.dockview-theme-light-spaced .dv-groupview {
  border-radius: var(--dv-border-radius);
}
.dockview-theme-light-spaced .dv-groupview .dv-tabs-and-actions-container {
  padding: 0px calc(var(--dv-border-radius) / 2);
}
.dockview-theme-light-spaced .dv-groupview .dv-content-container {
  background-color: var(--dv-tabs-and-actions-container-background-color);
}
.dockview-theme-light-spaced .dv-resize-container .dv-groupview {
  border: 2px solid rgba(255, 255, 255, 0.1);
}
.dv-drop-target-container {
  position: absolute;
  z-index: 9999;
  top: 0px;
  left: 0px;
  height: 100%;
  width: 100%;
  pointer-events: none;
  overflow: hidden;
  --dv-transition-duration: 300ms;
}
.dv-drop-target-container .dv-drop-target-anchor {
  position: relative;
  border: var(--dv-drag-over-border);
  background-color: var(--dv-drag-over-background-color);
  opacity: 1;
  /* GPU optimizations */
  will-change: transform, opacity;
  transform: translate3d(0, 0, 0);
  backface-visibility: hidden;
  contain: layout paint;
  transition: opacity var(--dv-transition-duration) ease-in, transform var(--dv-transition-duration) ease-out;
}
.dv-drop-target {
  position: relative;
  --dv-transition-duration: 70ms;
}
.dv-drop-target > .dv-drop-target-dropzone {
  position: absolute;
  left: 0px;
  top: 0px;
  height: 100%;
  width: 100%;
  z-index: 1000;
  pointer-events: none;
}
.dv-drop-target > .dv-drop-target-dropzone > .dv-drop-target-selection {
  position: relative;
  box-sizing: border-box;
  height: 100%;
  width: 100%;
  border: var(--dv-drag-over-border);
  background-color: var(--dv-drag-over-background-color);
  transition: top var(--dv-transition-duration) ease-out, left var(--dv-transition-duration) ease-out, width var(--dv-transition-duration) ease-out, height var(--dv-transition-duration) ease-out, opacity var(--dv-transition-duration) ease-out;
  will-change: transform;
  pointer-events: none;
}
.dv-drop-target > .dv-drop-target-dropzone > .dv-drop-target-selection.dv-drop-target-top.dv-drop-target-small-vertical {
  border-top: 1px solid var(--dv-drag-over-border-color);
}
.dv-drop-target > .dv-drop-target-dropzone > .dv-drop-target-selection.dv-drop-target-bottom.dv-drop-target-small-vertical {
  border-bottom: 1px solid var(--dv-drag-over-border-color);
}
.dv-drop-target > .dv-drop-target-dropzone > .dv-drop-target-selection.dv-drop-target-left.dv-drop-target-small-horizontal {
  border-left: 1px solid var(--dv-drag-over-border-color);
}
.dv-drop-target > .dv-drop-target-dropzone > .dv-drop-target-selection.dv-drop-target-right.dv-drop-target-small-horizontal {
  border-right: 1px solid var(--dv-drag-over-border-color);
}
.dv-dockview {
  position: relative;
  background-color: var(--dv-group-view-background-color);
  contain: layout;
}
.dv-dockview .dv-watermark-container {
  position: absolute;
  top: 0px;
  left: 0px;
  height: 100%;
  width: 100%;
  z-index: 1;
}
.dv-dockview .dv-overlay-render-container {
  position: relative;
}

.dv-groupview.dv-active-group > .dv-tabs-and-actions-container .dv-tabs-container > .dv-tab.dv-active-tab {
  background-color: var(--dv-activegroup-visiblepanel-tab-background-color);
  color: var(--dv-activegroup-visiblepanel-tab-color);
}
.dv-groupview.dv-active-group > .dv-tabs-and-actions-container .dv-tabs-container > .dv-tab.dv-inactive-tab {
  background-color: var(--dv-activegroup-hiddenpanel-tab-background-color);
  color: var(--dv-activegroup-hiddenpanel-tab-color);
}
.dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container .dv-tabs-container > .dv-tab.dv-active-tab {
  background-color: var(--dv-inactivegroup-visiblepanel-tab-background-color);
  color: var(--dv-inactivegroup-visiblepanel-tab-color);
}
.dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container .dv-tabs-container > .dv-tab.dv-inactive-tab {
  background-color: var(--dv-inactivegroup-hiddenpanel-tab-background-color);
  color: var(--dv-inactivegroup-hiddenpanel-tab-color);
}

/**
 * when a tab is dragged we lose the above stylings because they are conditional on parent elements
 * therefore we also set some stylings for the dragging event
 **/
.dv-tab.dv-tab-dragging {
  background-color: var(--dv-activegroup-visiblepanel-tab-background-color);
  color: var(--dv-activegroup-visiblepanel-tab-color);
}
.dv-groupview {
  display: flex;
  flex-direction: column;
  height: 100%;
  background-color: var(--dv-group-view-background-color);
  overflow: hidden;
}
.dv-groupview:focus {
  outline: none;
}
.dv-groupview > .dv-content-container {
  flex-grow: 1;
  min-height: 0;
  outline: none;
}
.dv-root-wrapper {
  height: 100%;
  width: 100%;
}
.dv-grid-view,
.dv-branch-node {
  height: 100%;
  width: 100%;
}
.dv-debug .dv-resize-container .dv-resize-handle-top {
  background-color: red;
}
.dv-debug .dv-resize-container .dv-resize-handle-bottom {
  background-color: green;
}
.dv-debug .dv-resize-container .dv-resize-handle-left {
  background-color: yellow;
}
.dv-debug .dv-resize-container .dv-resize-handle-right {
  background-color: blue;
}
.dv-debug .dv-resize-container .dv-resize-handle-topleft,
.dv-debug .dv-resize-container .dv-resize-handle-topright,
.dv-debug .dv-resize-container .dv-resize-handle-bottomleft,
.dv-debug .dv-resize-container .dv-resize-handle-bottomright {
  background-color: cyan;
}

.dv-resize-container {
  --dv-overlay-z-index: var(--dv-overlay-z-index, 999);
  position: absolute;
  z-index: calc(var(--dv-overlay-z-index) - 2);
  border: 1px solid var(--dv-tab-divider-color);
  box-shadow: var(--dv-floating-box-shadow);
  /* GPU optimizations for floating group movement */
  will-change: transform, opacity;
  transform: translate3d(0, 0, 0);
  backface-visibility: hidden;
}
.dv-resize-container.dv-hidden {
  display: none;
}
.dv-resize-container.dv-resize-container-dragging {
  opacity: 0.5;
  /* Enhanced GPU acceleration during drag */
  will-change: transform, opacity;
}
.dv-resize-container .dv-resize-handle-top {
  height: 4px;
  width: calc(100% - 8px);
  left: 4px;
  top: -2px;
  z-index: var(--dv-overlay-z-index);
  position: absolute;
  cursor: ns-resize;
}
.dv-resize-container .dv-resize-handle-bottom {
  height: 4px;
  width: calc(100% - 8px);
  left: 4px;
  bottom: -2px;
  z-index: var(--dv-overlay-z-index);
  position: absolute;
  cursor: ns-resize;
}
.dv-resize-container .dv-resize-handle-left {
  height: calc(100% - 8px);
  width: 4px;
  left: -2px;
  top: 4px;
  z-index: var(--dv-overlay-z-index);
  position: absolute;
  cursor: ew-resize;
}
.dv-resize-container .dv-resize-handle-right {
  height: calc(100% - 8px);
  width: 4px;
  right: -2px;
  top: 4px;
  z-index: var(--dv-overlay-z-index);
  position: absolute;
  cursor: ew-resize;
}
.dv-resize-container .dv-resize-handle-topleft {
  height: 4px;
  width: 4px;
  top: -2px;
  left: -2px;
  z-index: var(--dv-overlay-z-index);
  position: absolute;
  cursor: nw-resize;
}
.dv-resize-container .dv-resize-handle-topright {
  height: 4px;
  width: 4px;
  right: -2px;
  top: -2px;
  z-index: var(--dv-overlay-z-index);
  position: absolute;
  cursor: ne-resize;
}
.dv-resize-container .dv-resize-handle-bottomleft {
  height: 4px;
  width: 4px;
  left: -2px;
  bottom: -2px;
  z-index: var(--dv-overlay-z-index);
  position: absolute;
  cursor: sw-resize;
}
.dv-resize-container .dv-resize-handle-bottomright {
  height: 4px;
  width: 4px;
  right: -2px;
  bottom: -2px;
  z-index: var(--dv-overlay-z-index);
  position: absolute;
  cursor: se-resize;
}
.dv-render-overlay {
  --dv-overlay-z-index: var(--dv-overlay-z-index, 999);
  position: absolute;
  z-index: 1;
  width: 100%;
  height: 100%;
  contain: layout paint;
  isolation: isolate;
  /* GPU optimizations */
  will-change: transform;
  transform: translate3d(0, 0, 0);
  backface-visibility: hidden;
}
.dv-render-overlay.dv-render-overlay-float {
  z-index: calc(var(--dv-overlay-z-index) - 1);
}

.dv-debug .dv-render-overlay {
  outline: 1px solid red;
  outline-offset: -1;
}
.dv-pane-container {
  height: 100%;
  width: 100%;
}
.dv-pane-container.dv-animated .dv-view {
  /* GPU optimizations for smooth pane animations */
  will-change: transform;
  transform: translate3d(0, 0, 0);
  backface-visibility: hidden;
  transition: transform 0.15s ease-out;
}
.dv-pane-container .dv-view {
  overflow: hidden;
  display: flex;
  flex-direction: column;
  padding: 0px !important;
}
.dv-pane-container .dv-view:not(:first-child)::before {
  background-color: transparent !important;
}
.dv-pane-container .dv-view:not(:first-child) .dv-pane > .dv-pane-header {
  border-top: 1px solid var(--dv-paneview-header-border-color);
}
.dv-pane-container .dv-view .dv-default-header {
  background-color: var(--dv-group-view-background-color);
  color: var(--dv-activegroup-visiblepanel-tab-color);
  display: flex;
  padding: 0px 8px;
  cursor: pointer;
}
.dv-pane-container .dv-view .dv-default-header .dv-pane-header-icon {
  display: flex;
  justify-content: center;
  align-items: center;
}
.dv-pane-container .dv-view .dv-default-header > span {
  padding-left: 8px;
  flex-grow: 1;
}
.dv-pane-container:first-of-type > .dv-pane > .dv-pane-header {
  border-top: none !important;
}
.dv-pane-container .dv-pane {
  display: flex;
  flex-direction: column;
  overflow: hidden;
  height: 100%;
}
.dv-pane-container .dv-pane .dv-pane-header {
  box-sizing: border-box;
  user-select: none;
  position: relative;
  outline: none;
}
.dv-pane-container .dv-pane .dv-pane-header.dv-pane-draggable {
  cursor: pointer;
}
.dv-pane-container .dv-pane .dv-pane-header:focus:before, .dv-pane-container .dv-pane .dv-pane-header:focus-within:before {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 5;
  content: "";
  pointer-events: none;
  outline: 1px solid;
  outline-width: -1px;
  outline-style: solid;
  outline-offset: -1px;
  outline-color: var(--dv-paneview-active-outline-color);
}
.dv-pane-container .dv-pane .dv-pane-body {
  overflow-y: auto;
  overflow-x: hidden;
  flex-grow: 1;
  position: relative;
  outline: none;
}
.dv-pane-container .dv-pane .dv-pane-body:focus:before, .dv-pane-container .dv-pane .dv-pane-body:focus-within:before {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 5;
  content: "";
  pointer-events: none;
  outline: 1px solid;
  outline-width: -1px;
  outline-style: solid;
  outline-offset: -1px;
  outline-color: var(--dv-paneview-active-outline-color);
}
.dv-debug .dv-split-view-container .dv-sash-container .dv-sash.dv-enabled {
  background-color: black;
}
.dv-debug .dv-split-view-container .dv-sash-container .dv-sash.dv-disabled {
  background-color: orange;
}
.dv-debug .dv-split-view-container .dv-sash-container .dv-sash.dv-maximum {
  background-color: green;
}
.dv-debug .dv-split-view-container .dv-sash-container .dv-sash.dv-minimum {
  background-color: red;
}

.dv-split-view-container {
  position: relative;
  overflow: hidden;
  height: 100%;
  width: 100%;
}
.dv-split-view-container.dv-splitview-disabled > .dv-sash-container > .dv-sash {
  pointer-events: none;
}
.dv-split-view-container.dv-animation .dv-view,
.dv-split-view-container.dv-animation .dv-sash {
  /* GPU optimizations for smooth animations */
  will-change: transform;
  transform: translate3d(0, 0, 0);
  backface-visibility: hidden;
  transition: transform 0.15s ease-out;
}
.dv-split-view-container.dv-horizontal {
  height: 100%;
}
.dv-split-view-container.dv-horizontal > .dv-sash-container > .dv-sash {
  height: 100%;
  width: 4px;
}
.dv-split-view-container.dv-horizontal > .dv-sash-container > .dv-sash.dv-enabled {
  cursor: ew-resize;
}
.dv-split-view-container.dv-horizontal > .dv-sash-container > .dv-sash.dv-disabled {
  cursor: default;
}
.dv-split-view-container.dv-horizontal > .dv-sash-container > .dv-sash.dv-maximum {
  cursor: w-resize;
}
.dv-split-view-container.dv-horizontal > .dv-sash-container > .dv-sash.dv-minimum {
  cursor: e-resize;
}
.dv-split-view-container.dv-horizontal > .dv-view-container > .dv-view:not(:first-child)::before {
  height: 100%;
  width: 1px;
}
.dv-split-view-container.dv-vertical {
  width: 100%;
}
.dv-split-view-container.dv-vertical > .dv-sash-container > .dv-sash {
  width: 100%;
  height: 4px;
}
.dv-split-view-container.dv-vertical > .dv-sash-container > .dv-sash.dv-enabled {
  cursor: ns-resize;
}
.dv-split-view-container.dv-vertical > .dv-sash-container > .dv-sash.dv-disabled {
  cursor: default;
}
.dv-split-view-container.dv-vertical > .dv-sash-container > .dv-sash.dv-maximum {
  cursor: n-resize;
}
.dv-split-view-container.dv-vertical > .dv-sash-container > .dv-sash.dv-minimum {
  cursor: s-resize;
}
.dv-split-view-container.dv-vertical > .dv-view-container > .dv-view {
  width: 100%;
}
.dv-split-view-container.dv-vertical > .dv-view-container > .dv-view:not(:first-child)::before {
  height: 1px;
  width: 100%;
}
.dv-split-view-container .dv-sash-container {
  height: 100%;
  width: 100%;
  position: absolute;
}
.dv-split-view-container .dv-sash-container .dv-sash {
  position: absolute;
  z-index: 99;
  outline: none;
  user-select: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  touch-action: none;
  background-color: var(--dv-sash-color, transparent);
}
.dv-split-view-container .dv-sash-container .dv-sash:not(.disabled):active, .dv-split-view-container .dv-sash-container .dv-sash:not(.disabled):hover {
  background-color: var(--dv-active-sash-color, transparent);
  transition-property: background-color;
  transition-timing-function: ease-in-out;
  transition-duration: var(--dv-active-sash-transition-duration, 0.1s);
  transition-delay: var(--dv-active-sash-transition-delay, 0.5s);
}
.dv-split-view-container .dv-view-container {
  position: relative;
  height: 100%;
  width: 100%;
}
.dv-split-view-container .dv-view-container .dv-view {
  height: 100%;
  box-sizing: border-box;
  overflow: auto;
  position: absolute;
}
.dv-split-view-container.dv-separator-border .dv-view:not(:first-child)::before {
  content: " ";
  position: absolute;
  top: 0;
  left: 0;
  z-index: 5;
  pointer-events: none;
  background-color: var(--dv-separator-border);
}
.dv-dragged {
  transform: translate3d(0px, 0px, 0px); /* forces tab to be drawn on a separate layer (see https://github.com/microsoft/vscode/issues/18733) */
}

.dv-tab {
  flex-shrink: 0;
}
.dv-tab:focus-within, .dv-tab:focus {
  position: relative;
}
.dv-tab:focus-within::after, .dv-tab:focus::after {
  position: absolute;
  content: "";
  height: 100%;
  width: 100%;
  top: 0px;
  left: 0px;
  pointer-events: none;
  outline: 1px solid var(--dv-tab-divider-color) !important;
  outline-offset: -1px;
  z-index: 5;
}
.dv-tab.dv-tab-dragging .dv-default-tab-action {
  background-color: var(--dv-activegroup-visiblepanel-tab-color);
}
.dv-tab.dv-active-tab .dv-default-tab .dv-default-tab-action {
  visibility: visible;
}
.dv-tab.dv-inactive-tab .dv-default-tab .dv-default-tab-action {
  visibility: hidden;
}
.dv-tab.dv-inactive-tab .dv-default-tab:hover .dv-default-tab-action {
  visibility: visible;
}
.dv-tab .dv-default-tab {
  position: relative;
  height: 100%;
  display: flex;
  align-items: center;
  white-space: nowrap;
  text-overflow: ellipsis;
}
.dv-tab .dv-default-tab .dv-default-tab-content {
  flex-grow: 1;
  margin-right: 4px;
}
.dv-tab .dv-default-tab .dv-default-tab-action {
  padding: 4px;
  display: flex;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
}
.dv-tab .dv-default-tab .dv-default-tab-action:hover {
  border-radius: 2px;
  background-color: var(--dv-icon-hover-background-color);
}
.dv-tabs-overflow-dropdown-default {
  height: 100%;
  color: var(--dv-activegroup-hiddenpanel-tab-color);
  margin: var(--dv-tab-margin);
  display: flex;
  align-items: center;
  flex-shrink: 0;
  padding: 0.25rem 0.5rem;
  cursor: pointer;
}
.dv-tabs-overflow-dropdown-default > span {
  padding-left: 0.25rem;
}
.dv-tabs-overflow-dropdown-default > svg {
  transform: rotate(90deg);
}
.dv-tabs-container {
  display: flex;
  height: 100%;
  overflow: auto;
  scrollbar-width: thin;
  /* GPU optimizations for smooth scrolling */
  will-change: scroll-position;
  transform: translate3d(0, 0, 0);
  /* Track */
  /* Handle */
}
.dv-tabs-container.dv-horizontal .dv-tab:not(:first-child)::before {
  content: " ";
  position: absolute;
  top: 0;
  left: 0;
  z-index: 5;
  pointer-events: none;
  background-color: var(--dv-tab-divider-color);
  width: 1px;
  height: 100%;
}
.dv-tabs-container::-webkit-scrollbar {
  height: 3px;
}
.dv-tabs-container::-webkit-scrollbar-track {
  background: transparent;
}
.dv-tabs-container::-webkit-scrollbar-thumb {
  background: var(--dv-tabs-container-scrollbar-color);
}

.dv-scrollable > .dv-tabs-container {
  overflow: hidden;
}

.dv-tab {
  -webkit-user-drag: element;
  outline: none;
  padding: 0.25rem 0.5rem;
  cursor: pointer;
  position: relative;
  box-sizing: border-box;
  font-size: var(--dv-tab-font-size);
  margin: var(--dv-tab-margin);
}

.dv-tabs-overflow-container {
  flex-direction: column;
  height: unset;
  border: 1px solid var(--dv-tab-divider-color);
  background-color: var(--dv-group-view-background-color);
}
.dv-tabs-overflow-container .dv-tab:not(:last-child) {
  border-bottom: 1px solid var(--dv-tab-divider-color);
}
.dv-tabs-overflow-container .dv-active-tab {
  background-color: var(--dv-activegroup-visiblepanel-tab-background-color);
  color: var(--dv-activegroup-visiblepanel-tab-color);
}
.dv-tabs-overflow-container .dv-inactive-tab {
  background-color: var(--dv-activegroup-hiddenpanel-tab-background-color);
  color: var(--dv-activegroup-hiddenpanel-tab-color);
}
.dv-tabs-and-actions-container {
  display: flex;
  background-color: var(--dv-tabs-and-actions-container-background-color);
  flex-shrink: 0;
  box-sizing: border-box;
  height: var(--dv-tabs-and-actions-container-height);
  font-size: var(--dv-tabs-and-actions-container-font-size);
}
.dv-tabs-and-actions-container.dv-single-tab.dv-full-width-single-tab .dv-scrollable {
  flex-grow: 1;
}
.dv-tabs-and-actions-container.dv-single-tab.dv-full-width-single-tab .dv-tabs-container {
  flex-grow: 1;
}
.dv-tabs-and-actions-container.dv-single-tab.dv-full-width-single-tab .dv-tabs-container .dv-tab {
  flex-grow: 1;
  padding: 0px;
}
.dv-tabs-and-actions-container.dv-single-tab.dv-full-width-single-tab .dv-void-container {
  flex-grow: 0;
}
.dv-tabs-and-actions-container .dv-void-container {
  display: flex;
  flex-grow: 1;
}
.dv-tabs-and-actions-container .dv-void-container.dv-draggable {
  cursor: grab;
}
.dv-tabs-and-actions-container .dv-right-actions-container {
  display: flex;
}
.dv-watermark {
  display: flex;
  height: 100%;
}`, "",{"version":3,"sources":["webpack://./node_modules/dockview-core/dist/styles/dockview.css"],"names":[],"mappings":"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3B,oCAAoC;AACtC;AACA;EACE,gBAAgB;EAChB,aAAa;EACb,sBAAsB;EACtB,uBAAuB;AACzB;AACA;EACE,wCAAwC;AAC1C;AACA;EACE,4DAA4D;AAC9D;AACA;EACE,uDAAuD;EACvD,mDAAmD;EACnD,aAAa;EACb,gBAAgB;EAChB,eAAe;AACjB;AACA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;AACA;EACE,iBAAiB;EACjB,YAAY;AACd;AACA;EACE,2BAA2B;AAC7B;AACA;EACE,aAAa;EACb,sBAAsB;EACtB,gBAAgB;EAChB,YAAY;AACd;AACA;EACE,sBAAsB;EACtB,iBAAiB;EACjB,kBAAkB;EAClB,aAAa;AACf;AACA;EACE,eAAe;AACjB;AACA;EACE,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,WAAW;EACX,YAAY;EACZ,UAAU;EACV,WAAW;EACX,oBAAoB;EACpB,kBAAkB;EAClB,mBAAmB;EACnB,oBAAoB;EACpB,oBAAoB;EACpB,sDAAsD;AACxD;AACA;EACE,gBAAgB;EAChB,kBAAkB;EAClB,YAAY;EACZ,kBAAkB;EAClB,aAAa;AACf;AACA;EACE,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,WAAW;EACX,YAAY;EACZ,UAAU;EACV,WAAW;EACX,oBAAoB;EACpB,kBAAkB;EAClB,mBAAmB;EACnB,oBAAoB;EACpB,oBAAoB;EACpB,sDAAsD;AACxD;AACA;EACE,uBAAuB;AACzB;AACA;EACE,wBAAwB;AAC1B;AACA;EACE,uBAAuB;AACzB;AACA;EACE,qBAAqB;AACvB;;AAEA;EACE,kBAAkB;EAClB,gBAAgB;EAChB,YAAY;EACZ,WAAW;AACb;AACA;EACE,oBAAoB;AACtB;AACA;;EAEE,4CAA4C;EAC5C,sBAAsB;EACtB,+BAA+B;EAC/B,2BAA2B;EAC3B,oCAAoC;AACtC;AACA;EACE,YAAY;AACd;AACA;EACE,YAAY;EACZ,UAAU;AACZ;AACA;EACE,iBAAiB;AACnB;AACA;EACE,eAAe;AACjB;AACA;EACE,gBAAgB;AAClB;AACA;EACE,gBAAgB;AAClB;AACA;EACE,YAAY;EACZ,UAAU;AACZ;AACA;EACE,WAAW;AACb;AACA;EACE,WAAW;EACX,WAAW;AACb;AACA;EACE,iBAAiB;AACnB;AACA;EACE,eAAe;AACjB;AACA;EACE,gBAAgB;AAClB;AACA;EACE,gBAAgB;AAClB;AACA;EACE,WAAW;AACb;AACA;EACE,WAAW;EACX,WAAW;AACb;AACA;EACE,YAAY;EACZ,WAAW;EACX,kBAAkB;AACpB;AACA;EACE,kBAAkB;EAClB,WAAW;EACX,aAAa;EACb,iBAAiB;EACjB,yBAAyB;EACzB,sBAAsB;EACtB,qBAAqB;EACrB,kBAAkB;EAClB,mDAAmD;AACrD;AACA;EACE,0DAA0D;EAC1D,qCAAqC;EACrC,uCAAuC;EACvC,oEAAoE;EACpE,8DAA8D;AAChE;AACA;EACE,kBAAkB;EAClB,YAAY;EACZ,WAAW;AACb;AACA;EACE,YAAY;EACZ,sBAAsB;EACtB,cAAc;EACd,kBAAkB;AACpB;AACA;EACE,YAAY;EACZ,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,UAAU;EACV,oBAAoB;EACpB,4CAA4C;AAC9C;AACA;EACE,qCAAqC,EAAE,sGAAsG;AAC/I;;AAEA;EACE,cAAc;AAChB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,WAAW;EACX,QAAQ;EACR,SAAS;EACT,oBAAoB;EACpB,yDAAyD;EACzD,oBAAoB;EACpB,UAAU;AACZ;AACA;EACE,8DAA8D;AAChE;AACA;EACE,mBAAmB;AACrB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,kBAAkB;EAClB,YAAY;EACZ,aAAa;EACb,mBAAmB;EACnB,mBAAmB;EACnB,uBAAuB;AACzB;AACA;EACE,YAAY;EACZ,iBAAiB;AACnB;AACA;EACE,YAAY;EACZ,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,sBAAsB;AACxB;AACA;EACE,kBAAkB;EAClB,uDAAuD;AACzD;AACA;EACE,YAAY;EACZ,kDAAkD;EAClD,4BAA4B;EAC5B,aAAa;EACb,mBAAmB;EACnB,cAAc;EACd,uBAAuB;EACvB,eAAe;AACjB;AACA;EACE,qBAAqB;AACvB;AACA;EACE,wBAAwB;AAC1B;AACA;EACE,aAAa;EACb,YAAY;EACZ,cAAc;EACd,qBAAqB;EACrB,2CAA2C;EAC3C,4BAA4B;EAC5B,+BAA+B;EAC/B,UAAU;EACV,WAAW;AACb;AACA;EACE,YAAY;EACZ,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,UAAU;EACV,oBAAoB;EACpB,6CAA6C;EAC7C,UAAU;EACV,YAAY;AACd;AACA;EACE,WAAW;AACb;AACA;EACE,uBAAuB;AACzB;AACA;EACE,oDAAoD;AACtD;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,0BAA0B;EAC1B,aAAa;EACb,uBAAuB;EACvB,eAAe;EACf,kBAAkB;EAClB,sBAAsB;EACtB,kCAAkC;EAClC,4BAA4B;AAC9B;;AAEA;EACE,sBAAsB;EACtB,aAAa;EACb,6CAA6C;EAC7C,uDAAuD;AACzD;AACA;EACE,oDAAoD;AACtD;AACA;EACE,yEAAyE;EACzE,mDAAmD;AACrD;AACA;EACE,wEAAwE;EACxE,kDAAkD;AACpD;AACA;EACE,aAAa;EACb,uEAAuE;EACvE,cAAc;EACd,sBAAsB;EACtB,mDAAmD;EACnD,yDAAyD;AAC3D;AACA;EACE,YAAY;AACd;AACA;EACE,YAAY;AACd;AACA;EACE,YAAY;EACZ,YAAY;AACd;AACA;EACE,YAAY;AACd;AACA;EACE,aAAa;EACb,YAAY;AACd;AACA;EACE,YAAY;AACd;AACA;EACE,aAAa;AACf;AACA;EACE,aAAa;EACb,YAAY;AACd","sourcesContent":[".dv-scrollable {\n  position: relative;\n  overflow: hidden;\n}\n.dv-scrollable .dv-scrollbar-horizontal {\n  position: absolute;\n  bottom: 0px;\n  left: 0px;\n  height: 4px;\n  border-radius: 2px;\n  background-color: transparent;\n  /* GPU optimizations */\n  will-change: background-color, transform;\n  transform: translate3d(0, 0, 0);\n  backface-visibility: hidden;\n  transition-property: background-color;\n  transition-timing-function: ease-in-out;\n  transition-duration: 1s;\n  transition-delay: 0s;\n}\n.dv-scrollable:hover .dv-scrollbar-horizontal, .dv-scrollable.dv-scrollable-resizing .dv-scrollbar-horizontal, .dv-scrollable.dv-scrollable-scrolling .dv-scrollbar-horizontal {\n  background-color: var(--dv-scrollbar-background-color, rgba(255, 255, 255, 0.25));\n}\n.dv-svg {\n  display: inline-block;\n  fill: currentcolor;\n  line-height: 1;\n  stroke: currentcolor;\n  stroke-width: 0;\n}\n.dockview-theme-dark {\n  --dv-paneview-active-outline-color: dodgerblue;\n  --dv-tabs-and-actions-container-font-size: 13px;\n  --dv-tabs-and-actions-container-height: 35px;\n  --dv-drag-over-background-color: rgba(83, 89, 93, 0.5);\n  --dv-drag-over-border-color: transparent;\n  --dv-tabs-container-scrollbar-color: #888;\n  --dv-icon-hover-background-color: rgba(90, 93, 94, 0.31);\n  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(83, 89, 93, 0.5);\n  --dv-overlay-z-index: 999;\n  --dv-tab-font-size: inherit;\n  --dv-border-radius: 0px;\n  --dv-tab-margin: 0;\n  --dv-sash-color: transparent;\n  --dv-active-sash-color: transparent;\n  --dv-active-sash-transition-duration: 0.1s;\n  --dv-active-sash-transition-delay: 0.5s;\n  --dv-group-view-background-color: #1e1e1e;\n  --dv-tabs-and-actions-container-background-color: #252526;\n  --dv-activegroup-visiblepanel-tab-background-color: #1e1e1e;\n  --dv-activegroup-hiddenpanel-tab-background-color: #2d2d2d;\n  --dv-inactivegroup-visiblepanel-tab-background-color: #1e1e1e;\n  --dv-inactivegroup-hiddenpanel-tab-background-color: #2d2d2d;\n  --dv-tab-divider-color: #1e1e1e;\n  --dv-activegroup-visiblepanel-tab-color: white;\n  --dv-activegroup-hiddenpanel-tab-color: #969696;\n  --dv-inactivegroup-visiblepanel-tab-color: #8f8f8f;\n  --dv-inactivegroup-hiddenpanel-tab-color: #626262;\n  --dv-separator-border: rgb(68, 68, 68);\n  --dv-paneview-header-border-color: rgba(204, 204, 204, 0.2);\n}\n.dockview-theme-dark .dv-drop-target-container .dv-drop-target-anchor.dv-drop-target-anchor-container-changed {\n  opacity: 0;\n  transition: none;\n}\n\n.dockview-theme-light {\n  --dv-paneview-active-outline-color: dodgerblue;\n  --dv-tabs-and-actions-container-font-size: 13px;\n  --dv-tabs-and-actions-container-height: 35px;\n  --dv-drag-over-background-color: rgba(83, 89, 93, 0.5);\n  --dv-drag-over-border-color: transparent;\n  --dv-tabs-container-scrollbar-color: #888;\n  --dv-icon-hover-background-color: rgba(90, 93, 94, 0.31);\n  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(83, 89, 93, 0.5);\n  --dv-overlay-z-index: 999;\n  --dv-tab-font-size: inherit;\n  --dv-border-radius: 0px;\n  --dv-tab-margin: 0;\n  --dv-sash-color: transparent;\n  --dv-active-sash-color: transparent;\n  --dv-active-sash-transition-duration: 0.1s;\n  --dv-active-sash-transition-delay: 0.5s;\n  --dv-group-view-background-color: white;\n  --dv-tabs-and-actions-container-background-color: #f3f3f3;\n  --dv-activegroup-visiblepanel-tab-background-color: white;\n  --dv-activegroup-hiddenpanel-tab-background-color: #ececec;\n  --dv-inactivegroup-visiblepanel-tab-background-color: white;\n  --dv-inactivegroup-hiddenpanel-tab-background-color: #ececec;\n  --dv-tab-divider-color: white;\n  --dv-activegroup-visiblepanel-tab-color: rgb(51, 51, 51);\n  --dv-activegroup-hiddenpanel-tab-color: rgba(51, 51, 51, 0.7);\n  --dv-inactivegroup-visiblepanel-tab-color: rgba(51, 51, 51, 0.7);\n  --dv-inactivegroup-hiddenpanel-tab-color: rgba(51, 51, 51, 0.35);\n  --dv-separator-border: rgba(128, 128, 128, 0.35);\n  --dv-paneview-header-border-color: rgb(51, 51, 51);\n  --dv-scrollbar-background-color: rgba(0, 0, 0, 0.25);\n}\n.dockview-theme-light .dv-drop-target-container .dv-drop-target-anchor.dv-drop-target-anchor-container-changed {\n  opacity: 0;\n  transition: none;\n}\n\n.dockview-theme-vs {\n  --dv-paneview-active-outline-color: dodgerblue;\n  --dv-tabs-and-actions-container-font-size: 13px;\n  --dv-tabs-and-actions-container-height: 35px;\n  --dv-drag-over-background-color: rgba(83, 89, 93, 0.5);\n  --dv-drag-over-border-color: transparent;\n  --dv-tabs-container-scrollbar-color: #888;\n  --dv-icon-hover-background-color: rgba(90, 93, 94, 0.31);\n  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(83, 89, 93, 0.5);\n  --dv-overlay-z-index: 999;\n  --dv-tab-font-size: inherit;\n  --dv-border-radius: 0px;\n  --dv-tab-margin: 0;\n  --dv-sash-color: transparent;\n  --dv-active-sash-color: transparent;\n  --dv-active-sash-transition-duration: 0.1s;\n  --dv-active-sash-transition-delay: 0.5s;\n  --dv-group-view-background-color: #1e1e1e;\n  --dv-tabs-and-actions-container-background-color: #252526;\n  --dv-activegroup-visiblepanel-tab-background-color: #1e1e1e;\n  --dv-activegroup-hiddenpanel-tab-background-color: #2d2d2d;\n  --dv-inactivegroup-visiblepanel-tab-background-color: #1e1e1e;\n  --dv-inactivegroup-hiddenpanel-tab-background-color: #2d2d2d;\n  --dv-tab-divider-color: #1e1e1e;\n  --dv-activegroup-visiblepanel-tab-color: white;\n  --dv-activegroup-hiddenpanel-tab-color: #969696;\n  --dv-inactivegroup-visiblepanel-tab-color: #8f8f8f;\n  --dv-inactivegroup-hiddenpanel-tab-color: #626262;\n  --dv-separator-border: rgb(68, 68, 68);\n  --dv-paneview-header-border-color: rgba(204, 204, 204, 0.2);\n  --dv-tabs-and-actions-container-background-color: #2d2d30;\n  --dv-tabs-and-actions-container-height: 20px;\n  --dv-tabs-and-actions-container-font-size: 11px;\n  --dv-activegroup-visiblepanel-tab-background-color: #007acc;\n  --dv-inactivegroup-visiblepanel-tab-background-color: #3f3f46;\n  --dv-activegroup-visiblepanel-tab-color: white;\n  --dv-activegroup-hiddenpanel-tab-color: white;\n  --dv-inactivegroup-visiblepanel-tab-color: white;\n  --dv-inactivegroup-hiddenpanel-tab-color: white;\n}\n.dockview-theme-vs .dv-drop-target-container .dv-drop-target-anchor.dv-drop-target-anchor-container-changed {\n  opacity: 0;\n  transition: none;\n}\n.dockview-theme-vs .dv-groupview.dv-active-group > .dv-tabs-and-actions-container {\n  box-sizing: content-box;\n  border-bottom: 2px solid var(--dv-activegroup-visiblepanel-tab-background-color);\n}\n.dockview-theme-vs .dv-groupview.dv-active-group > .dv-tabs-and-actions-container .dv-tab.dv-active-tab {\n  border-top: 2px solid var(--dv-activegroup-visiblepanel-tab-background-color);\n}\n.dockview-theme-vs .dv-groupview.dv-active-group > .dv-tabs-and-actions-container .dv-tab.dv-inactive-tab {\n  border-top: 2px solid var(--dv-activegroup-hiddenpanel-tab-background-color);\n}\n.dockview-theme-vs .dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container {\n  box-sizing: content-box;\n  border-bottom: 2px solid var(--dv-inactivegroup-visiblepanel-tab-background-color);\n}\n.dockview-theme-vs .dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container .dv-tab.dv-active-tab {\n  border-top: 2px solid var(--dv-inactivegroup-visiblepanel-tab-background-color);\n}\n.dockview-theme-vs .dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container .dv-tab.dv-inactive-tab {\n  border-top: 2px solid var(--dv-inactivegroup-hiddenpanel-tab-background-color);\n}\n\n.dockview-theme-abyss {\n  --dv-paneview-active-outline-color: dodgerblue;\n  --dv-tabs-and-actions-container-font-size: 13px;\n  --dv-tabs-and-actions-container-height: 35px;\n  --dv-drag-over-background-color: rgba(83, 89, 93, 0.5);\n  --dv-drag-over-border-color: transparent;\n  --dv-tabs-container-scrollbar-color: #888;\n  --dv-icon-hover-background-color: rgba(90, 93, 94, 0.31);\n  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(83, 89, 93, 0.5);\n  --dv-overlay-z-index: 999;\n  --dv-tab-font-size: inherit;\n  --dv-border-radius: 0px;\n  --dv-tab-margin: 0;\n  --dv-sash-color: transparent;\n  --dv-active-sash-color: transparent;\n  --dv-active-sash-transition-duration: 0.1s;\n  --dv-active-sash-transition-delay: 0.5s;\n  --dv-color-abyss-dark: #000c18;\n  --dv-color-abyss: #10192c;\n  --dv-color-abyss-light: #1c1c2a;\n  --dv-color-abyss-lighter: #2b2b4a;\n  --dv-color-abyss-accent: rgb(91, 30, 207);\n  --dv-color-abyss-primary-text: white;\n  --dv-color-abyss-secondary-text: rgb(148, 151, 169);\n  --dv-group-view-background-color: var(--dv-color-abyss-dark);\n  --dv-tabs-and-actions-container-background-color: var(\n      --dv-color-abyss-light\n  );\n  --dv-activegroup-visiblepanel-tab-background-color: var(\n      --dv-color-abyss-dark\n  );\n  --dv-activegroup-hiddenpanel-tab-background-color: var(--dv-color-abyss);\n  --dv-inactivegroup-visiblepanel-tab-background-color: var(\n      --dv-color-abyss-dark\n  );\n  --dv-inactivegroup-hiddenpanel-tab-background-color: var(--dv-color-abyss);\n  --dv-tab-divider-color: var(--dv-color-abyss-lighter);\n  --dv-activegroup-visiblepanel-tab-color: white;\n  --dv-activegroup-hiddenpanel-tab-color: rgba(255, 255, 255, 0.5);\n  --dv-inactivegroup-visiblepanel-tab-color: rgba(255, 255, 255, 0.5);\n  --dv-inactivegroup-hiddenpanel-tab-color: rgba(255, 255, 255, 0.25);\n  --dv-separator-border: var(--dv-color-abyss-lighter);\n  --dv-paneview-header-border-color: var(--dv-color-abyss-lighter);\n  --dv-paneview-active-outline-color: #596f99;\n}\n.dockview-theme-abyss .dv-drop-target-container .dv-drop-target-anchor.dv-drop-target-anchor-container-changed {\n  opacity: 0;\n  transition: none;\n}\n\n.dockview-theme-dracula {\n  --dv-paneview-active-outline-color: dodgerblue;\n  --dv-tabs-and-actions-container-font-size: 13px;\n  --dv-tabs-and-actions-container-height: 35px;\n  --dv-drag-over-background-color: rgba(83, 89, 93, 0.5);\n  --dv-drag-over-border-color: transparent;\n  --dv-tabs-container-scrollbar-color: #888;\n  --dv-icon-hover-background-color: rgba(90, 93, 94, 0.31);\n  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(83, 89, 93, 0.5);\n  --dv-overlay-z-index: 999;\n  --dv-tab-font-size: inherit;\n  --dv-border-radius: 0px;\n  --dv-tab-margin: 0;\n  --dv-sash-color: transparent;\n  --dv-active-sash-color: transparent;\n  --dv-active-sash-transition-duration: 0.1s;\n  --dv-active-sash-transition-delay: 0.5s;\n  --dv-group-view-background-color: #282a36;\n  --dv-tabs-and-actions-container-background-color: #191a21;\n  --dv-activegroup-visiblepanel-tab-background-color: #282a36;\n  --dv-activegroup-hiddenpanel-tab-background-color: #21222c;\n  --dv-inactivegroup-visiblepanel-tab-background-color: #282a36;\n  --dv-inactivegroup-hiddenpanel-tab-background-color: #21222c;\n  --dv-tab-divider-color: #191a21;\n  --dv-activegroup-visiblepanel-tab-color: rgb(248, 248, 242);\n  --dv-activegroup-hiddenpanel-tab-color: rgb(98, 114, 164);\n  --dv-inactivegroup-visiblepanel-tab-color: rgba(248, 248, 242, 0.5);\n  --dv-inactivegroup-hiddenpanel-tab-color: rgba(98, 114, 164, 0.5);\n  --dv-separator-border: #bd93f9;\n  --dv-paneview-header-border-color: #bd93f9;\n  --dv-paneview-active-outline-color: #6272a4;\n}\n.dockview-theme-dracula .dv-drop-target-container .dv-drop-target-anchor.dv-drop-target-anchor-container-changed {\n  opacity: 0;\n  transition: none;\n}\n.dockview-theme-dracula .dv-groupview.dv-active-group > .dv-tabs-and-actions-container .dv-tabs-container > .dv-tab.dv-active-tab {\n  position: relative;\n}\n.dockview-theme-dracula .dv-groupview.dv-active-group > .dv-tabs-and-actions-container .dv-tabs-container > .dv-tab.dv-active-tab::after {\n  position: absolute;\n  left: 0px;\n  top: 0px;\n  content: \"\";\n  width: 100%;\n  height: 1px;\n  background-color: #94527e;\n  z-index: 999;\n}\n.dockview-theme-dracula .dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container .dv-tabs-container > .dv-tab.dv-active-tab {\n  position: relative;\n}\n.dockview-theme-dracula .dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container .dv-tabs-container > .dv-tab.dv-active-tab::after {\n  position: absolute;\n  left: 0px;\n  bottom: 0px;\n  content: \"\";\n  width: 100%;\n  height: 1px;\n  background-color: #5e3d5a;\n  z-index: 999;\n}\n\n.dockview-theme-replit {\n  --dv-paneview-active-outline-color: dodgerblue;\n  --dv-tabs-and-actions-container-font-size: 13px;\n  --dv-tabs-and-actions-container-height: 35px;\n  --dv-drag-over-background-color: rgba(83, 89, 93, 0.5);\n  --dv-drag-over-border-color: transparent;\n  --dv-tabs-container-scrollbar-color: #888;\n  --dv-icon-hover-background-color: rgba(90, 93, 94, 0.31);\n  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(83, 89, 93, 0.5);\n  --dv-overlay-z-index: 999;\n  --dv-tab-font-size: inherit;\n  --dv-border-radius: 0px;\n  --dv-tab-margin: 0;\n  --dv-sash-color: transparent;\n  --dv-active-sash-color: transparent;\n  --dv-active-sash-transition-duration: 0.1s;\n  --dv-active-sash-transition-delay: 0.5s;\n  box-sizing: border-box;\n  padding: 10px;\n  background-color: #ebeced;\n  --dv-group-view-background-color: #ebeced;\n  --dv-tabs-and-actions-container-background-color: #fcfcfc;\n  --dv-activegroup-visiblepanel-tab-background-color: #f0f1f2;\n  --dv-activegroup-hiddenpanel-tab-background-color: #fcfcfc;\n  --dv-inactivegroup-visiblepanel-tab-background-color: #f0f1f2;\n  --dv-inactivegroup-hiddenpanel-tab-background-color: #fcfcfc;\n  --dv-tab-divider-color: transparent;\n  --dv-activegroup-visiblepanel-tab-color: rgb(51, 51, 51);\n  --dv-activegroup-hiddenpanel-tab-color: rgb(51, 51, 51);\n  --dv-inactivegroup-visiblepanel-tab-color: rgb(51, 51, 51);\n  --dv-inactivegroup-hiddenpanel-tab-color: rgb(51, 51, 51);\n  --dv-separator-border: transparent;\n  --dv-paneview-header-border-color: rgb(51, 51, 51);\n  --dv-sash-color: #cfd1d3;\n  --dv-active-sash-color: #babbbb;\n}\n.dockview-theme-replit .dv-drop-target-container .dv-drop-target-anchor.dv-drop-target-anchor-container-changed {\n  opacity: 0;\n  transition: none;\n}\n.dockview-theme-replit .dv-resize-container:has(> .dv-groupview) {\n  border-radius: 8px;\n}\n.dockview-theme-replit .dv-resize-container {\n  border-radius: 10px !important;\n  border: none;\n}\n.dockview-theme-replit .dv-groupview {\n  overflow: hidden;\n  border-radius: 10px;\n}\n.dockview-theme-replit .dv-groupview .dv-tabs-and-actions-container {\n  border-bottom: 1px solid rgba(128, 128, 128, 0.35);\n}\n.dockview-theme-replit .dv-groupview .dv-tabs-and-actions-container .dv-tab {\n  margin: 4px;\n  border-radius: 8px;\n}\n.dockview-theme-replit .dv-groupview .dv-tabs-and-actions-container .dv-tab .dv-svg {\n  height: 8px;\n  width: 8px;\n}\n.dockview-theme-replit .dv-groupview .dv-tabs-and-actions-container .dv-tab:hover {\n  background-color: #e4e5e6 !important;\n}\n.dockview-theme-replit .dv-groupview .dv-content-container {\n  background-color: #fcfcfc;\n}\n.dockview-theme-replit .dv-groupview.dv-active-group {\n  border: 1px solid rgba(128, 128, 128, 0.35);\n}\n.dockview-theme-replit .dv-groupview.dv-inactive-group {\n  border: 1px solid transparent;\n}\n.dockview-theme-replit .dv-vertical > .dv-sash-container > .dv-sash {\n  background-color: transparent;\n}\n.dockview-theme-replit .dv-vertical > .dv-sash-container > .dv-sash:not(.disabled)::after {\n  content: \"\";\n  height: 4px;\n  width: 40px;\n  border-radius: 2px;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--dv-sash-color);\n  position: absolute;\n}\n.dockview-theme-replit .dv-vertical > .dv-sash-container > .dv-sash:not(.disabled):hover, .dockview-theme-replit .dv-vertical > .dv-sash-container > .dv-sash:not(.disabled):active {\n  background-color: transparent;\n}\n.dockview-theme-replit .dv-vertical > .dv-sash-container > .dv-sash:not(.disabled):hover::after, .dockview-theme-replit .dv-vertical > .dv-sash-container > .dv-sash:not(.disabled):active::after {\n  background-color: var(--dv-active-sash-color);\n}\n.dockview-theme-replit .dv-horizontal > .dv-sash-container > .dv-sash {\n  background-color: transparent;\n}\n.dockview-theme-replit .dv-horizontal > .dv-sash-container > .dv-sash:not(.disabled)::after {\n  content: \"\";\n  height: 40px;\n  width: 4px;\n  border-radius: 2px;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--dv-sash-color);\n  position: absolute;\n}\n.dockview-theme-replit .dv-horizontal > .dv-sash-container > .dv-sash:not(.disabled):hover, .dockview-theme-replit .dv-horizontal > .dv-sash-container > .dv-sash:not(.disabled):active {\n  background-color: transparent;\n}\n.dockview-theme-replit .dv-horizontal > .dv-sash-container > .dv-sash:not(.disabled):hover::after, .dockview-theme-replit .dv-horizontal > .dv-sash-container > .dv-sash:not(.disabled):active::after {\n  background-color: var(--dv-active-sash-color);\n}\n\n.dockview-theme-abyss-spaced {\n  --dv-paneview-active-outline-color: dodgerblue;\n  --dv-tabs-and-actions-container-font-size: 13px;\n  --dv-tabs-and-actions-container-height: 35px;\n  --dv-drag-over-background-color: rgba(83, 89, 93, 0.5);\n  --dv-drag-over-border-color: transparent;\n  --dv-tabs-container-scrollbar-color: #888;\n  --dv-icon-hover-background-color: rgba(90, 93, 94, 0.31);\n  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(83, 89, 93, 0.5);\n  --dv-overlay-z-index: 999;\n  --dv-tab-font-size: inherit;\n  --dv-border-radius: 0px;\n  --dv-tab-margin: 0;\n  --dv-sash-color: transparent;\n  --dv-active-sash-color: transparent;\n  --dv-active-sash-transition-duration: 0.1s;\n  --dv-active-sash-transition-delay: 0.5s;\n  --dv-tab-font-size: 12px;\n  --dv-border-radius: 20px;\n  --dv-tab-margin: 0.5rem 0.25rem;\n  --dv-tabs-and-actions-container-height: 44px;\n  --dv-border-radius: 20px;\n  box-sizing: border-box;\n  --dv-color-abyss-dark: rgb(11, 6, 17);\n  --dv-color-abyss: #16121f;\n  --dv-color-abyss-light: #201d2b;\n  --dv-color-abyss-lighter: #2a2837;\n  --dv-color-abyss-accent: rgb(91, 30, 207);\n  --dv-color-abyss-primary-text: white;\n  --dv-color-abyss-secondary-text: rgb(148, 151, 169);\n  --dv-drag-over-border: 2px solid var(--dv-color-abyss-accent);\n  --dv-drag-over-background-color: \"\";\n  --dv-group-view-background-color: var(--dv-color-abyss-dark);\n  --dv-tabs-and-actions-container-background-color: var(--dv-color-abyss);\n  --dv-activegroup-visiblepanel-tab-background-color: var(\n      --dv-color-abyss-lighter\n  );\n  --dv-activegroup-hiddenpanel-tab-background-color: var(\n      --dv-color-abyss-light\n  );\n  --dv-inactivegroup-visiblepanel-tab-background-color: var(\n      --dv-color-abyss-lighter\n  );\n  --dv-inactivegroup-hiddenpanel-tab-background-color: var(\n      --dv-color-abyss-light\n  );\n  --dv-tab-divider-color: transparent;\n  --dv-activegroup-visiblepanel-tab-color: var(--dv-color-abyss-primary-text);\n  --dv-activegroup-hiddenpanel-tab-color: var(\n      --dv-color-abyss-secondary-text\n  );\n  --dv-inactivegroup-visiblepanel-tab-color: var(\n      --dv-color-abyss-primary-text\n  );\n  --dv-inactivegroup-hiddenpanel-tab-color: var(\n      --dv-color-abyss-secondary-text\n  );\n  --dv-separator-border: transparent;\n  --dv-paneview-header-border-color: rgb(51, 51, 51);\n  --dv-active-sash-color: var(--dv-color-abyss-accent);\n  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(0, 0, 0, 0.5);\n  padding: 10px;\n  background-color: var(--dv-color-abyss-dark);\n}\n.dockview-theme-abyss-spaced .dv-resize-container:has(> .dv-groupview) {\n  border-radius: 8px;\n}\n.dockview-theme-abyss-spaced .dv-sash {\n  border-radius: 4px;\n}\n.dockview-theme-abyss-spaced .dv-drop-target-anchor {\n  border-radius: calc(var(--dv-border-radius) / 4);\n}\n.dockview-theme-abyss-spaced .dv-drop-target-anchor.dv-drop-target-content {\n  border-radius: var(--dv-border-radius);\n}\n.dockview-theme-abyss-spaced .dv-resize-container {\n  border-radius: var(--dv-border-radius) !important;\n  border: none;\n}\n.dockview-theme-abyss-spaced .dv-tabs-overflow-container,\n.dockview-theme-abyss-spaced .dv-tabs-overflow-dropdown-default {\n  border-radius: 8px;\n  height: unset !important;\n}\n.dockview-theme-abyss-spaced .dv-tab {\n  border-radius: 8px;\n}\n.dockview-theme-abyss-spaced .dv-tab .dv-svg {\n  height: 8px;\n  width: 8px;\n}\n.dockview-theme-abyss-spaced .dv-groupview {\n  border-radius: var(--dv-border-radius);\n}\n.dockview-theme-abyss-spaced .dv-groupview .dv-tabs-and-actions-container {\n  padding: 0px calc(var(--dv-border-radius) / 2);\n}\n.dockview-theme-abyss-spaced .dv-groupview .dv-content-container {\n  background-color: var(--dv-tabs-and-actions-container-background-color);\n}\n.dockview-theme-abyss-spaced .dv-resize-container .dv-groupview {\n  border: 2px solid var(--dv-color-abyss-dark);\n}\n\n.dockview-theme-light-spaced {\n  --dv-paneview-active-outline-color: dodgerblue;\n  --dv-tabs-and-actions-container-font-size: 13px;\n  --dv-tabs-and-actions-container-height: 35px;\n  --dv-drag-over-background-color: rgba(83, 89, 93, 0.5);\n  --dv-drag-over-border-color: transparent;\n  --dv-tabs-container-scrollbar-color: #888;\n  --dv-icon-hover-background-color: rgba(90, 93, 94, 0.31);\n  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(83, 89, 93, 0.5);\n  --dv-overlay-z-index: 999;\n  --dv-tab-font-size: inherit;\n  --dv-border-radius: 0px;\n  --dv-tab-margin: 0;\n  --dv-sash-color: transparent;\n  --dv-active-sash-color: transparent;\n  --dv-active-sash-transition-duration: 0.1s;\n  --dv-active-sash-transition-delay: 0.5s;\n  --dv-tab-font-size: 12px;\n  --dv-border-radius: 20px;\n  --dv-tab-margin: 0.5rem 0.25rem;\n  --dv-tabs-and-actions-container-height: 44px;\n  --dv-border-radius: 20px;\n  box-sizing: border-box;\n  --dv-drag-over-border: 2px solid rgb(91, 30, 207);\n  --dv-drag-over-background-color: \"\";\n  --dv-group-view-background-color: #f6f5f9;\n  --dv-tabs-and-actions-container-background-color: white;\n  --dv-activegroup-visiblepanel-tab-background-color: #ededf0;\n  --dv-activegroup-hiddenpanel-tab-background-color: #f9f9fa;\n  --dv-inactivegroup-visiblepanel-tab-background-color: #ededf0;\n  --dv-inactivegroup-hiddenpanel-tab-background-color: #f9f9fa;\n  --dv-tab-divider-color: transparent;\n  --dv-activegroup-visiblepanel-tab-color: rgb(104, 107, 130);\n  --dv-activegroup-hiddenpanel-tab-color: rgb(148, 151, 169);\n  --dv-inactivegroup-visiblepanel-tab-color: rgb(104, 107, 130);\n  --dv-inactivegroup-hiddenpanel-tab-color: rgb(148, 151, 169);\n  --dv-separator-border: transparent;\n  --dv-paneview-header-border-color: rgb(51, 51, 51);\n  --dv-active-sash-color: rgb(91, 30, 207);\n  --dv-floating-box-shadow: 8px 8px 8px 0px rgba(0, 0, 0, 0.1);\n  padding: 10px;\n  background-color: #f6f5f9;\n  --dv-scrollbar-background-color: rgba(0, 0, 0, 0.25);\n}\n.dockview-theme-light-spaced .dv-resize-container:has(> .dv-groupview) {\n  border-radius: 8px;\n}\n.dockview-theme-light-spaced .dv-sash {\n  border-radius: 4px;\n}\n.dockview-theme-light-spaced .dv-drop-target-anchor {\n  border-radius: calc(var(--dv-border-radius) / 4);\n}\n.dockview-theme-light-spaced .dv-drop-target-anchor.dv-drop-target-content {\n  border-radius: var(--dv-border-radius);\n}\n.dockview-theme-light-spaced .dv-resize-container {\n  border-radius: var(--dv-border-radius) !important;\n  border: none;\n}\n.dockview-theme-light-spaced .dv-tabs-overflow-container,\n.dockview-theme-light-spaced .dv-tabs-overflow-dropdown-default {\n  border-radius: 8px;\n  height: unset !important;\n}\n.dockview-theme-light-spaced .dv-tab {\n  border-radius: 8px;\n}\n.dockview-theme-light-spaced .dv-tab .dv-svg {\n  height: 8px;\n  width: 8px;\n}\n.dockview-theme-light-spaced .dv-groupview {\n  border-radius: var(--dv-border-radius);\n}\n.dockview-theme-light-spaced .dv-groupview .dv-tabs-and-actions-container {\n  padding: 0px calc(var(--dv-border-radius) / 2);\n}\n.dockview-theme-light-spaced .dv-groupview .dv-content-container {\n  background-color: var(--dv-tabs-and-actions-container-background-color);\n}\n.dockview-theme-light-spaced .dv-resize-container .dv-groupview {\n  border: 2px solid rgba(255, 255, 255, 0.1);\n}\n.dv-drop-target-container {\n  position: absolute;\n  z-index: 9999;\n  top: 0px;\n  left: 0px;\n  height: 100%;\n  width: 100%;\n  pointer-events: none;\n  overflow: hidden;\n  --dv-transition-duration: 300ms;\n}\n.dv-drop-target-container .dv-drop-target-anchor {\n  position: relative;\n  border: var(--dv-drag-over-border);\n  background-color: var(--dv-drag-over-background-color);\n  opacity: 1;\n  /* GPU optimizations */\n  will-change: transform, opacity;\n  transform: translate3d(0, 0, 0);\n  backface-visibility: hidden;\n  contain: layout paint;\n  transition: opacity var(--dv-transition-duration) ease-in, transform var(--dv-transition-duration) ease-out;\n}\n.dv-drop-target {\n  position: relative;\n  --dv-transition-duration: 70ms;\n}\n.dv-drop-target > .dv-drop-target-dropzone {\n  position: absolute;\n  left: 0px;\n  top: 0px;\n  height: 100%;\n  width: 100%;\n  z-index: 1000;\n  pointer-events: none;\n}\n.dv-drop-target > .dv-drop-target-dropzone > .dv-drop-target-selection {\n  position: relative;\n  box-sizing: border-box;\n  height: 100%;\n  width: 100%;\n  border: var(--dv-drag-over-border);\n  background-color: var(--dv-drag-over-background-color);\n  transition: top var(--dv-transition-duration) ease-out, left var(--dv-transition-duration) ease-out, width var(--dv-transition-duration) ease-out, height var(--dv-transition-duration) ease-out, opacity var(--dv-transition-duration) ease-out;\n  will-change: transform;\n  pointer-events: none;\n}\n.dv-drop-target > .dv-drop-target-dropzone > .dv-drop-target-selection.dv-drop-target-top.dv-drop-target-small-vertical {\n  border-top: 1px solid var(--dv-drag-over-border-color);\n}\n.dv-drop-target > .dv-drop-target-dropzone > .dv-drop-target-selection.dv-drop-target-bottom.dv-drop-target-small-vertical {\n  border-bottom: 1px solid var(--dv-drag-over-border-color);\n}\n.dv-drop-target > .dv-drop-target-dropzone > .dv-drop-target-selection.dv-drop-target-left.dv-drop-target-small-horizontal {\n  border-left: 1px solid var(--dv-drag-over-border-color);\n}\n.dv-drop-target > .dv-drop-target-dropzone > .dv-drop-target-selection.dv-drop-target-right.dv-drop-target-small-horizontal {\n  border-right: 1px solid var(--dv-drag-over-border-color);\n}\n.dv-dockview {\n  position: relative;\n  background-color: var(--dv-group-view-background-color);\n  contain: layout;\n}\n.dv-dockview .dv-watermark-container {\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  height: 100%;\n  width: 100%;\n  z-index: 1;\n}\n.dv-dockview .dv-overlay-render-container {\n  position: relative;\n}\n\n.dv-groupview.dv-active-group > .dv-tabs-and-actions-container .dv-tabs-container > .dv-tab.dv-active-tab {\n  background-color: var(--dv-activegroup-visiblepanel-tab-background-color);\n  color: var(--dv-activegroup-visiblepanel-tab-color);\n}\n.dv-groupview.dv-active-group > .dv-tabs-and-actions-container .dv-tabs-container > .dv-tab.dv-inactive-tab {\n  background-color: var(--dv-activegroup-hiddenpanel-tab-background-color);\n  color: var(--dv-activegroup-hiddenpanel-tab-color);\n}\n.dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container .dv-tabs-container > .dv-tab.dv-active-tab {\n  background-color: var(--dv-inactivegroup-visiblepanel-tab-background-color);\n  color: var(--dv-inactivegroup-visiblepanel-tab-color);\n}\n.dv-groupview.dv-inactive-group > .dv-tabs-and-actions-container .dv-tabs-container > .dv-tab.dv-inactive-tab {\n  background-color: var(--dv-inactivegroup-hiddenpanel-tab-background-color);\n  color: var(--dv-inactivegroup-hiddenpanel-tab-color);\n}\n\n/**\n * when a tab is dragged we lose the above stylings because they are conditional on parent elements\n * therefore we also set some stylings for the dragging event\n **/\n.dv-tab.dv-tab-dragging {\n  background-color: var(--dv-activegroup-visiblepanel-tab-background-color);\n  color: var(--dv-activegroup-visiblepanel-tab-color);\n}\n.dv-groupview {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background-color: var(--dv-group-view-background-color);\n  overflow: hidden;\n}\n.dv-groupview:focus {\n  outline: none;\n}\n.dv-groupview > .dv-content-container {\n  flex-grow: 1;\n  min-height: 0;\n  outline: none;\n}\n.dv-root-wrapper {\n  height: 100%;\n  width: 100%;\n}\n.dv-grid-view,\n.dv-branch-node {\n  height: 100%;\n  width: 100%;\n}\n.dv-debug .dv-resize-container .dv-resize-handle-top {\n  background-color: red;\n}\n.dv-debug .dv-resize-container .dv-resize-handle-bottom {\n  background-color: green;\n}\n.dv-debug .dv-resize-container .dv-resize-handle-left {\n  background-color: yellow;\n}\n.dv-debug .dv-resize-container .dv-resize-handle-right {\n  background-color: blue;\n}\n.dv-debug .dv-resize-container .dv-resize-handle-topleft,\n.dv-debug .dv-resize-container .dv-resize-handle-topright,\n.dv-debug .dv-resize-container .dv-resize-handle-bottomleft,\n.dv-debug .dv-resize-container .dv-resize-handle-bottomright {\n  background-color: cyan;\n}\n\n.dv-resize-container {\n  --dv-overlay-z-index: var(--dv-overlay-z-index, 999);\n  position: absolute;\n  z-index: calc(var(--dv-overlay-z-index) - 2);\n  border: 1px solid var(--dv-tab-divider-color);\n  box-shadow: var(--dv-floating-box-shadow);\n  /* GPU optimizations for floating group movement */\n  will-change: transform, opacity;\n  transform: translate3d(0, 0, 0);\n  backface-visibility: hidden;\n}\n.dv-resize-container.dv-hidden {\n  display: none;\n}\n.dv-resize-container.dv-resize-container-dragging {\n  opacity: 0.5;\n  /* Enhanced GPU acceleration during drag */\n  will-change: transform, opacity;\n}\n.dv-resize-container .dv-resize-handle-top {\n  height: 4px;\n  width: calc(100% - 8px);\n  left: 4px;\n  top: -2px;\n  z-index: var(--dv-overlay-z-index);\n  position: absolute;\n  cursor: ns-resize;\n}\n.dv-resize-container .dv-resize-handle-bottom {\n  height: 4px;\n  width: calc(100% - 8px);\n  left: 4px;\n  bottom: -2px;\n  z-index: var(--dv-overlay-z-index);\n  position: absolute;\n  cursor: ns-resize;\n}\n.dv-resize-container .dv-resize-handle-left {\n  height: calc(100% - 8px);\n  width: 4px;\n  left: -2px;\n  top: 4px;\n  z-index: var(--dv-overlay-z-index);\n  position: absolute;\n  cursor: ew-resize;\n}\n.dv-resize-container .dv-resize-handle-right {\n  height: calc(100% - 8px);\n  width: 4px;\n  right: -2px;\n  top: 4px;\n  z-index: var(--dv-overlay-z-index);\n  position: absolute;\n  cursor: ew-resize;\n}\n.dv-resize-container .dv-resize-handle-topleft {\n  height: 4px;\n  width: 4px;\n  top: -2px;\n  left: -2px;\n  z-index: var(--dv-overlay-z-index);\n  position: absolute;\n  cursor: nw-resize;\n}\n.dv-resize-container .dv-resize-handle-topright {\n  height: 4px;\n  width: 4px;\n  right: -2px;\n  top: -2px;\n  z-index: var(--dv-overlay-z-index);\n  position: absolute;\n  cursor: ne-resize;\n}\n.dv-resize-container .dv-resize-handle-bottomleft {\n  height: 4px;\n  width: 4px;\n  left: -2px;\n  bottom: -2px;\n  z-index: var(--dv-overlay-z-index);\n  position: absolute;\n  cursor: sw-resize;\n}\n.dv-resize-container .dv-resize-handle-bottomright {\n  height: 4px;\n  width: 4px;\n  right: -2px;\n  bottom: -2px;\n  z-index: var(--dv-overlay-z-index);\n  position: absolute;\n  cursor: se-resize;\n}\n.dv-render-overlay {\n  --dv-overlay-z-index: var(--dv-overlay-z-index, 999);\n  position: absolute;\n  z-index: 1;\n  width: 100%;\n  height: 100%;\n  contain: layout paint;\n  isolation: isolate;\n  /* GPU optimizations */\n  will-change: transform;\n  transform: translate3d(0, 0, 0);\n  backface-visibility: hidden;\n}\n.dv-render-overlay.dv-render-overlay-float {\n  z-index: calc(var(--dv-overlay-z-index) - 1);\n}\n\n.dv-debug .dv-render-overlay {\n  outline: 1px solid red;\n  outline-offset: -1;\n}\n.dv-pane-container {\n  height: 100%;\n  width: 100%;\n}\n.dv-pane-container.dv-animated .dv-view {\n  /* GPU optimizations for smooth pane animations */\n  will-change: transform;\n  transform: translate3d(0, 0, 0);\n  backface-visibility: hidden;\n  transition: transform 0.15s ease-out;\n}\n.dv-pane-container .dv-view {\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  padding: 0px !important;\n}\n.dv-pane-container .dv-view:not(:first-child)::before {\n  background-color: transparent !important;\n}\n.dv-pane-container .dv-view:not(:first-child) .dv-pane > .dv-pane-header {\n  border-top: 1px solid var(--dv-paneview-header-border-color);\n}\n.dv-pane-container .dv-view .dv-default-header {\n  background-color: var(--dv-group-view-background-color);\n  color: var(--dv-activegroup-visiblepanel-tab-color);\n  display: flex;\n  padding: 0px 8px;\n  cursor: pointer;\n}\n.dv-pane-container .dv-view .dv-default-header .dv-pane-header-icon {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.dv-pane-container .dv-view .dv-default-header > span {\n  padding-left: 8px;\n  flex-grow: 1;\n}\n.dv-pane-container:first-of-type > .dv-pane > .dv-pane-header {\n  border-top: none !important;\n}\n.dv-pane-container .dv-pane {\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  height: 100%;\n}\n.dv-pane-container .dv-pane .dv-pane-header {\n  box-sizing: border-box;\n  user-select: none;\n  position: relative;\n  outline: none;\n}\n.dv-pane-container .dv-pane .dv-pane-header.dv-pane-draggable {\n  cursor: pointer;\n}\n.dv-pane-container .dv-pane .dv-pane-header:focus:before, .dv-pane-container .dv-pane .dv-pane-header:focus-within:before {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 5;\n  content: \"\";\n  pointer-events: none;\n  outline: 1px solid;\n  outline-width: -1px;\n  outline-style: solid;\n  outline-offset: -1px;\n  outline-color: var(--dv-paneview-active-outline-color);\n}\n.dv-pane-container .dv-pane .dv-pane-body {\n  overflow-y: auto;\n  overflow-x: hidden;\n  flex-grow: 1;\n  position: relative;\n  outline: none;\n}\n.dv-pane-container .dv-pane .dv-pane-body:focus:before, .dv-pane-container .dv-pane .dv-pane-body:focus-within:before {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 5;\n  content: \"\";\n  pointer-events: none;\n  outline: 1px solid;\n  outline-width: -1px;\n  outline-style: solid;\n  outline-offset: -1px;\n  outline-color: var(--dv-paneview-active-outline-color);\n}\n.dv-debug .dv-split-view-container .dv-sash-container .dv-sash.dv-enabled {\n  background-color: black;\n}\n.dv-debug .dv-split-view-container .dv-sash-container .dv-sash.dv-disabled {\n  background-color: orange;\n}\n.dv-debug .dv-split-view-container .dv-sash-container .dv-sash.dv-maximum {\n  background-color: green;\n}\n.dv-debug .dv-split-view-container .dv-sash-container .dv-sash.dv-minimum {\n  background-color: red;\n}\n\n.dv-split-view-container {\n  position: relative;\n  overflow: hidden;\n  height: 100%;\n  width: 100%;\n}\n.dv-split-view-container.dv-splitview-disabled > .dv-sash-container > .dv-sash {\n  pointer-events: none;\n}\n.dv-split-view-container.dv-animation .dv-view,\n.dv-split-view-container.dv-animation .dv-sash {\n  /* GPU optimizations for smooth animations */\n  will-change: transform;\n  transform: translate3d(0, 0, 0);\n  backface-visibility: hidden;\n  transition: transform 0.15s ease-out;\n}\n.dv-split-view-container.dv-horizontal {\n  height: 100%;\n}\n.dv-split-view-container.dv-horizontal > .dv-sash-container > .dv-sash {\n  height: 100%;\n  width: 4px;\n}\n.dv-split-view-container.dv-horizontal > .dv-sash-container > .dv-sash.dv-enabled {\n  cursor: ew-resize;\n}\n.dv-split-view-container.dv-horizontal > .dv-sash-container > .dv-sash.dv-disabled {\n  cursor: default;\n}\n.dv-split-view-container.dv-horizontal > .dv-sash-container > .dv-sash.dv-maximum {\n  cursor: w-resize;\n}\n.dv-split-view-container.dv-horizontal > .dv-sash-container > .dv-sash.dv-minimum {\n  cursor: e-resize;\n}\n.dv-split-view-container.dv-horizontal > .dv-view-container > .dv-view:not(:first-child)::before {\n  height: 100%;\n  width: 1px;\n}\n.dv-split-view-container.dv-vertical {\n  width: 100%;\n}\n.dv-split-view-container.dv-vertical > .dv-sash-container > .dv-sash {\n  width: 100%;\n  height: 4px;\n}\n.dv-split-view-container.dv-vertical > .dv-sash-container > .dv-sash.dv-enabled {\n  cursor: ns-resize;\n}\n.dv-split-view-container.dv-vertical > .dv-sash-container > .dv-sash.dv-disabled {\n  cursor: default;\n}\n.dv-split-view-container.dv-vertical > .dv-sash-container > .dv-sash.dv-maximum {\n  cursor: n-resize;\n}\n.dv-split-view-container.dv-vertical > .dv-sash-container > .dv-sash.dv-minimum {\n  cursor: s-resize;\n}\n.dv-split-view-container.dv-vertical > .dv-view-container > .dv-view {\n  width: 100%;\n}\n.dv-split-view-container.dv-vertical > .dv-view-container > .dv-view:not(:first-child)::before {\n  height: 1px;\n  width: 100%;\n}\n.dv-split-view-container .dv-sash-container {\n  height: 100%;\n  width: 100%;\n  position: absolute;\n}\n.dv-split-view-container .dv-sash-container .dv-sash {\n  position: absolute;\n  z-index: 99;\n  outline: none;\n  user-select: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  touch-action: none;\n  background-color: var(--dv-sash-color, transparent);\n}\n.dv-split-view-container .dv-sash-container .dv-sash:not(.disabled):active, .dv-split-view-container .dv-sash-container .dv-sash:not(.disabled):hover {\n  background-color: var(--dv-active-sash-color, transparent);\n  transition-property: background-color;\n  transition-timing-function: ease-in-out;\n  transition-duration: var(--dv-active-sash-transition-duration, 0.1s);\n  transition-delay: var(--dv-active-sash-transition-delay, 0.5s);\n}\n.dv-split-view-container .dv-view-container {\n  position: relative;\n  height: 100%;\n  width: 100%;\n}\n.dv-split-view-container .dv-view-container .dv-view {\n  height: 100%;\n  box-sizing: border-box;\n  overflow: auto;\n  position: absolute;\n}\n.dv-split-view-container.dv-separator-border .dv-view:not(:first-child)::before {\n  content: \" \";\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 5;\n  pointer-events: none;\n  background-color: var(--dv-separator-border);\n}\n.dv-dragged {\n  transform: translate3d(0px, 0px, 0px); /* forces tab to be drawn on a separate layer (see https://github.com/microsoft/vscode/issues/18733) */\n}\n\n.dv-tab {\n  flex-shrink: 0;\n}\n.dv-tab:focus-within, .dv-tab:focus {\n  position: relative;\n}\n.dv-tab:focus-within::after, .dv-tab:focus::after {\n  position: absolute;\n  content: \"\";\n  height: 100%;\n  width: 100%;\n  top: 0px;\n  left: 0px;\n  pointer-events: none;\n  outline: 1px solid var(--dv-tab-divider-color) !important;\n  outline-offset: -1px;\n  z-index: 5;\n}\n.dv-tab.dv-tab-dragging .dv-default-tab-action {\n  background-color: var(--dv-activegroup-visiblepanel-tab-color);\n}\n.dv-tab.dv-active-tab .dv-default-tab .dv-default-tab-action {\n  visibility: visible;\n}\n.dv-tab.dv-inactive-tab .dv-default-tab .dv-default-tab-action {\n  visibility: hidden;\n}\n.dv-tab.dv-inactive-tab .dv-default-tab:hover .dv-default-tab-action {\n  visibility: visible;\n}\n.dv-tab .dv-default-tab {\n  position: relative;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n}\n.dv-tab .dv-default-tab .dv-default-tab-content {\n  flex-grow: 1;\n  margin-right: 4px;\n}\n.dv-tab .dv-default-tab .dv-default-tab-action {\n  padding: 4px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-sizing: border-box;\n}\n.dv-tab .dv-default-tab .dv-default-tab-action:hover {\n  border-radius: 2px;\n  background-color: var(--dv-icon-hover-background-color);\n}\n.dv-tabs-overflow-dropdown-default {\n  height: 100%;\n  color: var(--dv-activegroup-hiddenpanel-tab-color);\n  margin: var(--dv-tab-margin);\n  display: flex;\n  align-items: center;\n  flex-shrink: 0;\n  padding: 0.25rem 0.5rem;\n  cursor: pointer;\n}\n.dv-tabs-overflow-dropdown-default > span {\n  padding-left: 0.25rem;\n}\n.dv-tabs-overflow-dropdown-default > svg {\n  transform: rotate(90deg);\n}\n.dv-tabs-container {\n  display: flex;\n  height: 100%;\n  overflow: auto;\n  scrollbar-width: thin;\n  /* GPU optimizations for smooth scrolling */\n  will-change: scroll-position;\n  transform: translate3d(0, 0, 0);\n  /* Track */\n  /* Handle */\n}\n.dv-tabs-container.dv-horizontal .dv-tab:not(:first-child)::before {\n  content: \" \";\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 5;\n  pointer-events: none;\n  background-color: var(--dv-tab-divider-color);\n  width: 1px;\n  height: 100%;\n}\n.dv-tabs-container::-webkit-scrollbar {\n  height: 3px;\n}\n.dv-tabs-container::-webkit-scrollbar-track {\n  background: transparent;\n}\n.dv-tabs-container::-webkit-scrollbar-thumb {\n  background: var(--dv-tabs-container-scrollbar-color);\n}\n\n.dv-scrollable > .dv-tabs-container {\n  overflow: hidden;\n}\n\n.dv-tab {\n  -webkit-user-drag: element;\n  outline: none;\n  padding: 0.25rem 0.5rem;\n  cursor: pointer;\n  position: relative;\n  box-sizing: border-box;\n  font-size: var(--dv-tab-font-size);\n  margin: var(--dv-tab-margin);\n}\n\n.dv-tabs-overflow-container {\n  flex-direction: column;\n  height: unset;\n  border: 1px solid var(--dv-tab-divider-color);\n  background-color: var(--dv-group-view-background-color);\n}\n.dv-tabs-overflow-container .dv-tab:not(:last-child) {\n  border-bottom: 1px solid var(--dv-tab-divider-color);\n}\n.dv-tabs-overflow-container .dv-active-tab {\n  background-color: var(--dv-activegroup-visiblepanel-tab-background-color);\n  color: var(--dv-activegroup-visiblepanel-tab-color);\n}\n.dv-tabs-overflow-container .dv-inactive-tab {\n  background-color: var(--dv-activegroup-hiddenpanel-tab-background-color);\n  color: var(--dv-activegroup-hiddenpanel-tab-color);\n}\n.dv-tabs-and-actions-container {\n  display: flex;\n  background-color: var(--dv-tabs-and-actions-container-background-color);\n  flex-shrink: 0;\n  box-sizing: border-box;\n  height: var(--dv-tabs-and-actions-container-height);\n  font-size: var(--dv-tabs-and-actions-container-font-size);\n}\n.dv-tabs-and-actions-container.dv-single-tab.dv-full-width-single-tab .dv-scrollable {\n  flex-grow: 1;\n}\n.dv-tabs-and-actions-container.dv-single-tab.dv-full-width-single-tab .dv-tabs-container {\n  flex-grow: 1;\n}\n.dv-tabs-and-actions-container.dv-single-tab.dv-full-width-single-tab .dv-tabs-container .dv-tab {\n  flex-grow: 1;\n  padding: 0px;\n}\n.dv-tabs-and-actions-container.dv-single-tab.dv-full-width-single-tab .dv-void-container {\n  flex-grow: 0;\n}\n.dv-tabs-and-actions-container .dv-void-container {\n  display: flex;\n  flex-grow: 1;\n}\n.dv-tabs-and-actions-container .dv-void-container.dv-draggable {\n  cursor: grab;\n}\n.dv-tabs-and-actions-container .dv-right-actions-container {\n  display: flex;\n}\n.dv-watermark {\n  display: flex;\n  height: 100%;\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {



/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
module.exports = function (cssWithMappingToString) {
  var list = [];

  // return the list of modules as css string
  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";
      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }
      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }
      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }
      content += cssWithMappingToString(item);
      if (needLayer) {
        content += "}";
      }
      if (item[2]) {
        content += "}";
      }
      if (item[4]) {
        content += "}";
      }
      return content;
    }).join("");
  };

  // import a list of modules into the list
  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }
    var alreadyImportedModules = {};
    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];
        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }
    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);
      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }
      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }
      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }
      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }
      list.push(item);
    }
  };
  return list;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/sourceMaps.js":
/*!************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/sourceMaps.js ***!
  \************************************************************/
/***/ ((module) => {



module.exports = function (item) {
  var content = item[1];
  var cssMapping = item[3];
  if (!cssMapping) {
    return content;
  }
  if (typeof btoa === "function") {
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
    var sourceMapping = "/*# ".concat(data, " */");
    return [content].concat([sourceMapping]).join("\n");
  }
  return [content].join("\n");
};

/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/api/component.api.js":
/*!******************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/api/component.api.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DockviewApi: () => (/* binding */ DockviewApi),
/* harmony export */   GridviewApi: () => (/* binding */ GridviewApi),
/* harmony export */   PaneviewApi: () => (/* binding */ PaneviewApi),
/* harmony export */   SplitviewApi: () => (/* binding */ SplitviewApi)
/* harmony export */ });
class SplitviewApi {
    /**
     * The minimum size  the component can reach where size is measured in the direction of orientation provided.
     */
    get minimumSize() {
        return this.component.minimumSize;
    }
    /**
     * The maximum size the component can reach where size is measured in the direction of orientation provided.
     */
    get maximumSize() {
        return this.component.maximumSize;
    }
    /**
     * Width of the component.
     */
    get width() {
        return this.component.width;
    }
    /**
     * Height of the component.
     */
    get height() {
        return this.component.height;
    }
    /**
     * The current number of panels.
     */
    get length() {
        return this.component.length;
    }
    /**
     * The current orientation of the component.
     */
    get orientation() {
        return this.component.orientation;
    }
    /**
     * The list of current panels.
     */
    get panels() {
        return this.component.panels;
    }
    /**
     * Invoked after a layout is loaded through the `fromJSON` method.
     */
    get onDidLayoutFromJSON() {
        return this.component.onDidLayoutFromJSON;
    }
    /**
     * Invoked whenever any aspect of the layout changes.
     * If listening to this event it may be worth debouncing ouputs.
     */
    get onDidLayoutChange() {
        return this.component.onDidLayoutChange;
    }
    /**
     * Invoked when a view is added.
     */
    get onDidAddView() {
        return this.component.onDidAddView;
    }
    /**
     * Invoked when a view is removed.
     */
    get onDidRemoveView() {
        return this.component.onDidRemoveView;
    }
    constructor(component) {
        this.component = component;
    }
    /**
     * Removes an existing panel and optionally provide a `Sizing` method
     * for the subsequent resize.
     */
    removePanel(panel, sizing) {
        this.component.removePanel(panel, sizing);
    }
    /**
     * Focus the component.
     */
    focus() {
        this.component.focus();
    }
    /**
     * Get the reference to a panel given it's `string` id.
     */
    getPanel(id) {
        return this.component.getPanel(id);
    }
    /**
     * Layout the panel with a width and height.
     */
    layout(width, height) {
        return this.component.layout(width, height);
    }
    /**
     * Add a new panel and return the created instance.
     */
    addPanel(options) {
        return this.component.addPanel(options);
    }
    /**
     * Move a panel given it's current and desired index.
     */
    movePanel(from, to) {
        this.component.movePanel(from, to);
    }
    /**
     * Deserialize a layout to built a splitivew.
     */
    fromJSON(data) {
        this.component.fromJSON(data);
    }
    /** Serialize a layout */
    toJSON() {
        return this.component.toJSON();
    }
    /**
     * Remove all panels and clear the component.
     */
    clear() {
        this.component.clear();
    }
    /**
     * Update configuratable options.
     */
    updateOptions(options) {
        this.component.updateOptions(options);
    }
    /**
     * Release resources and teardown component. Do not call when using framework versions of dockview.
     */
    dispose() {
        this.component.dispose();
    }
}
class PaneviewApi {
    /**
     * The minimum size  the component can reach where size is measured in the direction of orientation provided.
     */
    get minimumSize() {
        return this.component.minimumSize;
    }
    /**
     * The maximum size the component can reach where size is measured in the direction of orientation provided.
     */
    get maximumSize() {
        return this.component.maximumSize;
    }
    /**
     * Width of the component.
     */
    get width() {
        return this.component.width;
    }
    /**
     * Height of the component.
     */
    get height() {
        return this.component.height;
    }
    /**
     * All panel objects.
     */
    get panels() {
        return this.component.panels;
    }
    /**
     * Invoked when any layout change occures, an aggregation of many events.
     */
    get onDidLayoutChange() {
        return this.component.onDidLayoutChange;
    }
    /**
     * Invoked after a layout is deserialzied using the `fromJSON` method.
     */
    get onDidLayoutFromJSON() {
        return this.component.onDidLayoutFromJSON;
    }
    /**
     * Invoked when a panel is added. May be called multiple times when moving panels.
     */
    get onDidAddView() {
        return this.component.onDidAddView;
    }
    /**
     * Invoked when a panel is removed. May be called multiple times when moving panels.
     */
    get onDidRemoveView() {
        return this.component.onDidRemoveView;
    }
    /**
     * Invoked when a Drag'n'Drop event occurs that the component was unable to handle. Exposed for custom Drag'n'Drop functionality.
     */
    get onDidDrop() {
        return this.component.onDidDrop;
    }
    get onUnhandledDragOverEvent() {
        return this.component.onUnhandledDragOverEvent;
    }
    constructor(component) {
        this.component = component;
    }
    /**
     * Remove a panel given the panel object.
     */
    removePanel(panel) {
        this.component.removePanel(panel);
    }
    /**
     * Get a panel object given a `string` id. May return `undefined`.
     */
    getPanel(id) {
        return this.component.getPanel(id);
    }
    /**
     * Move a panel given it's current and desired index.
     */
    movePanel(from, to) {
        this.component.movePanel(from, to);
    }
    /**
     *  Focus the component. Will try to focus an active panel if one exists.
     */
    focus() {
        this.component.focus();
    }
    /**
     * Force resize the component to an exact width and height. Read about auto-resizing before using.
     */
    layout(width, height) {
        this.component.layout(width, height);
    }
    /**
     * Add a panel and return the created object.
     */
    addPanel(options) {
        return this.component.addPanel(options);
    }
    /**
     * Create a component from a serialized object.
     */
    fromJSON(data) {
        this.component.fromJSON(data);
    }
    /**
     * Create a serialized object of the current component.
     */
    toJSON() {
        return this.component.toJSON();
    }
    /**
     * Reset the component back to an empty and default state.
     */
    clear() {
        this.component.clear();
    }
    /**
     * Update configuratable options.
     */
    updateOptions(options) {
        this.component.updateOptions(options);
    }
    /**
     * Release resources and teardown component. Do not call when using framework versions of dockview.
     */
    dispose() {
        this.component.dispose();
    }
}
class GridviewApi {
    /**
     * Width of the component.
     */
    get width() {
        return this.component.width;
    }
    /**
     * Height of the component.
     */
    get height() {
        return this.component.height;
    }
    /**
     * Minimum height of the component.
     */
    get minimumHeight() {
        return this.component.minimumHeight;
    }
    /**
     * Maximum height of the component.
     */
    get maximumHeight() {
        return this.component.maximumHeight;
    }
    /**
     * Minimum width of the component.
     */
    get minimumWidth() {
        return this.component.minimumWidth;
    }
    /**
     * Maximum width of the component.
     */
    get maximumWidth() {
        return this.component.maximumWidth;
    }
    /**
     * Invoked when any layout change occures, an aggregation of many events.
     */
    get onDidLayoutChange() {
        return this.component.onDidLayoutChange;
    }
    /**
     * Invoked when a panel is added. May be called multiple times when moving panels.
     */
    get onDidAddPanel() {
        return this.component.onDidAddGroup;
    }
    /**
     * Invoked when a panel is removed. May be called multiple times when moving panels.
     */
    get onDidRemovePanel() {
        return this.component.onDidRemoveGroup;
    }
    /**
     * Invoked when the active panel changes. May be undefined if no panel is active.
     */
    get onDidActivePanelChange() {
        return this.component.onDidActiveGroupChange;
    }
    /**
     * Invoked after a layout is deserialzied using the `fromJSON` method.
     */
    get onDidLayoutFromJSON() {
        return this.component.onDidLayoutFromJSON;
    }
    /**
     * All panel objects.
     */
    get panels() {
        return this.component.groups;
    }
    /**
     * Current orientation. Can be changed after initialization.
     */
    get orientation() {
        return this.component.orientation;
    }
    set orientation(value) {
        this.component.updateOptions({ orientation: value });
    }
    constructor(component) {
        this.component = component;
    }
    /**
     *  Focus the component. Will try to focus an active panel if one exists.
     */
    focus() {
        this.component.focus();
    }
    /**
     * Force resize the component to an exact width and height. Read about auto-resizing before using.
     */
    layout(width, height, force = false) {
        this.component.layout(width, height, force);
    }
    /**
     * Add a panel and return the created object.
     */
    addPanel(options) {
        return this.component.addPanel(options);
    }
    /**
     * Remove a panel given the panel object.
     */
    removePanel(panel, sizing) {
        this.component.removePanel(panel, sizing);
    }
    /**
     * Move a panel in a particular direction relative to another panel.
     */
    movePanel(panel, options) {
        this.component.movePanel(panel, options);
    }
    /**
     * Get a panel object given a `string` id. May return `undefined`.
     */
    getPanel(id) {
        return this.component.getPanel(id);
    }
    /**
     * Create a component from a serialized object.
     */
    fromJSON(data) {
        return this.component.fromJSON(data);
    }
    /**
     * Create a serialized object of the current component.
     */
    toJSON() {
        return this.component.toJSON();
    }
    /**
     * Reset the component back to an empty and default state.
     */
    clear() {
        this.component.clear();
    }
    updateOptions(options) {
        this.component.updateOptions(options);
    }
    /**
     * Release resources and teardown component. Do not call when using framework versions of dockview.
     */
    dispose() {
        this.component.dispose();
    }
}
class DockviewApi {
    /**
     * The unique identifier for this instance. Used to manage scope of Drag'n'Drop events.
     */
    get id() {
        return this.component.id;
    }
    /**
     * Width of the component.
     */
    get width() {
        return this.component.width;
    }
    /**
     * Height of the component.
     */
    get height() {
        return this.component.height;
    }
    /**
     * Minimum height of the component.
     */
    get minimumHeight() {
        return this.component.minimumHeight;
    }
    /**
     * Maximum height of the component.
     */
    get maximumHeight() {
        return this.component.maximumHeight;
    }
    /**
     * Minimum width of the component.
     */
    get minimumWidth() {
        return this.component.minimumWidth;
    }
    /**
     * Maximum width of the component.
     */
    get maximumWidth() {
        return this.component.maximumWidth;
    }
    /**
     * Total number of groups.
     */
    get size() {
        return this.component.size;
    }
    /**
     * Total number of panels.
     */
    get totalPanels() {
        return this.component.totalPanels;
    }
    /**
     * Invoked when the active group changes. May be undefined if no group is active.
     */
    get onDidActiveGroupChange() {
        return this.component.onDidActiveGroupChange;
    }
    /**
     * Invoked when a group is added. May be called multiple times when moving groups.
     */
    get onDidAddGroup() {
        return this.component.onDidAddGroup;
    }
    /**
     * Invoked when a group is removed. May be called multiple times when moving groups.
     */
    get onDidRemoveGroup() {
        return this.component.onDidRemoveGroup;
    }
    /**
     * Invoked when the active panel changes. May be undefined if no panel is active.
     */
    get onDidActivePanelChange() {
        return this.component.onDidActivePanelChange;
    }
    /**
     * Invoked when a panel is added. May be called multiple times when moving panels.
     */
    get onDidAddPanel() {
        return this.component.onDidAddPanel;
    }
    /**
     * Invoked when a panel is removed. May be called multiple times when moving panels.
     */
    get onDidRemovePanel() {
        return this.component.onDidRemovePanel;
    }
    get onDidMovePanel() {
        return this.component.onDidMovePanel;
    }
    /**
     * Invoked after a layout is deserialzied using the `fromJSON` method.
     */
    get onDidLayoutFromJSON() {
        return this.component.onDidLayoutFromJSON;
    }
    /**
     * Invoked when any layout change occures, an aggregation of many events.
     */
    get onDidLayoutChange() {
        return this.component.onDidLayoutChange;
    }
    /**
     * Invoked when a Drag'n'Drop event occurs that the component was unable to handle. Exposed for custom Drag'n'Drop functionality.
     */
    get onDidDrop() {
        return this.component.onDidDrop;
    }
    /**
     * Invoked when a Drag'n'Drop event occurs but before dockview handles it giving the user an opportunity to intecept and
     * prevent the event from occuring using the standard `preventDefault()` syntax.
     *
     * Preventing certain events may causes unexpected behaviours, use carefully.
     */
    get onWillDrop() {
        return this.component.onWillDrop;
    }
    /**
     * Invoked before an overlay is shown indicating a drop target.
     *
     * Calling `event.preventDefault()` will prevent the overlay being shown and prevent
     * the any subsequent drop event.
     */
    get onWillShowOverlay() {
        return this.component.onWillShowOverlay;
    }
    /**
     * Invoked before a group is dragged.
     *
     * Calling `event.nativeEvent.preventDefault()` will prevent the group drag starting.
     *
     */
    get onWillDragGroup() {
        return this.component.onWillDragGroup;
    }
    /**
     * Invoked before a panel is dragged.
     *
     * Calling `event.nativeEvent.preventDefault()` will prevent the panel drag starting.
     */
    get onWillDragPanel() {
        return this.component.onWillDragPanel;
    }
    get onUnhandledDragOverEvent() {
        return this.component.onUnhandledDragOverEvent;
    }
    get onDidPopoutGroupSizeChange() {
        return this.component.onDidPopoutGroupSizeChange;
    }
    get onDidPopoutGroupPositionChange() {
        return this.component.onDidPopoutGroupPositionChange;
    }
    get onDidOpenPopoutWindowFail() {
        return this.component.onDidOpenPopoutWindowFail;
    }
    /**
     * All panel objects.
     */
    get panels() {
        return this.component.panels;
    }
    /**
     * All group objects.
     */
    get groups() {
        return this.component.groups;
    }
    /**
     *  Active panel object.
     */
    get activePanel() {
        return this.component.activePanel;
    }
    /**
     * Active group object.
     */
    get activeGroup() {
        return this.component.activeGroup;
    }
    constructor(component) {
        this.component = component;
    }
    /**
     *  Focus the component. Will try to focus an active panel if one exists.
     */
    focus() {
        this.component.focus();
    }
    /**
     * Get a panel object given a `string` id. May return `undefined`.
     */
    getPanel(id) {
        return this.component.getGroupPanel(id);
    }
    /**
     * Force resize the component to an exact width and height. Read about auto-resizing before using.
     */
    layout(width, height, force = false) {
        this.component.layout(width, height, force);
    }
    /**
     * Add a panel and return the created object.
     */
    addPanel(options) {
        return this.component.addPanel(options);
    }
    /**
     * Remove a panel given the panel object.
     */
    removePanel(panel) {
        this.component.removePanel(panel);
    }
    /**
     * Add a group and return the created object.
     */
    addGroup(options) {
        return this.component.addGroup(options);
    }
    /**
     * Close all groups and panels.
     */
    closeAllGroups() {
        return this.component.closeAllGroups();
    }
    /**
     * Remove a group and any panels within the group.
     */
    removeGroup(group) {
        this.component.removeGroup(group);
    }
    /**
     * Get a group object given a `string` id. May return undefined.
     */
    getGroup(id) {
        return this.component.getPanel(id);
    }
    /**
     * Add a floating group
     */
    addFloatingGroup(item, options) {
        return this.component.addFloatingGroup(item, options);
    }
    /**
     * Create a component from a serialized object.
     */
    fromJSON(data) {
        this.component.fromJSON(data);
    }
    /**
     * Create a serialized object of the current component.
     */
    toJSON() {
        return this.component.toJSON();
    }
    /**
     * Reset the component back to an empty and default state.
     */
    clear() {
        this.component.clear();
    }
    /**
     * Move the focus progmatically to the next panel or group.
     */
    moveToNext(options) {
        this.component.moveToNext(options);
    }
    /**
     * Move the focus progmatically to the previous panel or group.
     */
    moveToPrevious(options) {
        this.component.moveToPrevious(options);
    }
    maximizeGroup(panel) {
        this.component.maximizeGroup(panel.group);
    }
    hasMaximizedGroup() {
        return this.component.hasMaximizedGroup();
    }
    exitMaximizedGroup() {
        this.component.exitMaximizedGroup();
    }
    get onDidMaximizedGroupChange() {
        return this.component.onDidMaximizedGroupChange;
    }
    /**
     * Add a popout group in a new Window
     */
    addPopoutGroup(item, options) {
        return this.component.addPopoutGroup(item, options);
    }
    updateOptions(options) {
        this.component.updateOptions(options);
    }
    /**
     * Release resources and teardown component. Do not call when using framework versions of dockview.
     */
    dispose() {
        this.component.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/api/dockviewGroupPanelApi.js":
/*!**************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/api/dockviewGroupPanelApi.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DockviewGroupPanelApiImpl: () => (/* binding */ DockviewGroupPanelApiImpl)
/* harmony export */ });
/* harmony import */ var _dnd_droptarget__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dnd/droptarget */ "./node_modules/dockview-core/dist/esm/dnd/droptarget.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _gridviewPanelApi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./gridviewPanelApi */ "./node_modules/dockview-core/dist/esm/api/gridviewPanelApi.js");



const NOT_INITIALIZED_MESSAGE = 'dockview: DockviewGroupPanelApiImpl not initialized';
class DockviewGroupPanelApiImpl extends _gridviewPanelApi__WEBPACK_IMPORTED_MODULE_2__.GridviewPanelApiImpl {
    get location() {
        if (!this._group) {
            throw new Error(NOT_INITIALIZED_MESSAGE);
        }
        return this._group.model.location;
    }
    constructor(id, accessor) {
        super(id, '__dockviewgroup__');
        this.accessor = accessor;
        this._onDidLocationChange = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidLocationChange = this._onDidLocationChange.event;
        this._onDidActivePanelChange = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidActivePanelChange = this._onDidActivePanelChange.event;
        this.addDisposables(this._onDidLocationChange, this._onDidActivePanelChange);
    }
    close() {
        if (!this._group) {
            return;
        }
        return this.accessor.removeGroup(this._group);
    }
    getWindow() {
        return this.location.type === 'popout'
            ? this.location.getWindow()
            : window;
    }
    moveTo(options) {
        var _a, _b, _c, _d;
        if (!this._group) {
            throw new Error(NOT_INITIALIZED_MESSAGE);
        }
        const group = (_a = options.group) !== null && _a !== void 0 ? _a : this.accessor.addGroup({
            direction: (0,_dnd_droptarget__WEBPACK_IMPORTED_MODULE_0__.positionToDirection)((_b = options.position) !== null && _b !== void 0 ? _b : 'right'),
            skipSetActive: (_c = options.skipSetActive) !== null && _c !== void 0 ? _c : false,
        });
        this.accessor.moveGroupOrPanel({
            from: { groupId: this._group.id },
            to: {
                group,
                position: options.group
                    ? (_d = options.position) !== null && _d !== void 0 ? _d : 'center'
                    : 'center',
                index: options.index,
            },
            skipSetActive: options.skipSetActive,
        });
    }
    maximize() {
        if (!this._group) {
            throw new Error(NOT_INITIALIZED_MESSAGE);
        }
        if (this.location.type !== 'grid') {
            // only grid groups can be maximized
            return;
        }
        this.accessor.maximizeGroup(this._group);
    }
    isMaximized() {
        if (!this._group) {
            throw new Error(NOT_INITIALIZED_MESSAGE);
        }
        return this.accessor.isMaximizedGroup(this._group);
    }
    exitMaximized() {
        if (!this._group) {
            throw new Error(NOT_INITIALIZED_MESSAGE);
        }
        if (this.isMaximized()) {
            this.accessor.exitMaximizedGroup();
        }
    }
    initialize(group) {
        this._group = group;
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/api/dockviewPanelApi.js":
/*!*********************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/api/dockviewPanelApi.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DockviewPanelApiImpl: () => (/* binding */ DockviewPanelApiImpl)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _gridviewPanelApi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gridviewPanelApi */ "./node_modules/dockview-core/dist/esm/api/gridviewPanelApi.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");



class DockviewPanelApiImpl extends _gridviewPanelApi__WEBPACK_IMPORTED_MODULE_1__.GridviewPanelApiImpl {
    get location() {
        return this.group.api.location;
    }
    get title() {
        return this.panel.title;
    }
    get isGroupActive() {
        return this.group.isActive;
    }
    get renderer() {
        return this.panel.renderer;
    }
    set group(value) {
        const oldGroup = this._group;
        if (this._group !== value) {
            this._group = value;
            this._onDidGroupChange.fire({});
            this.setupGroupEventListeners(oldGroup);
            this._onDidLocationChange.fire({
                location: this.group.api.location,
            });
        }
    }
    get group() {
        return this._group;
    }
    get tabComponent() {
        return this._tabComponent;
    }
    constructor(panel, group, accessor, component, tabComponent) {
        super(panel.id, component);
        this.panel = panel;
        this.accessor = accessor;
        this._onDidTitleChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidTitleChange = this._onDidTitleChange.event;
        this._onDidActiveGroupChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidActiveGroupChange = this._onDidActiveGroupChange.event;
        this._onDidGroupChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidGroupChange = this._onDidGroupChange.event;
        this._onDidRendererChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidRendererChange = this._onDidRendererChange.event;
        this._onDidLocationChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidLocationChange = this._onDidLocationChange.event;
        this.groupEventsDisposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.MutableDisposable();
        this._tabComponent = tabComponent;
        this.initialize(panel);
        this._group = group;
        this.setupGroupEventListeners();
        this.addDisposables(this.groupEventsDisposable, this._onDidRendererChange, this._onDidTitleChange, this._onDidGroupChange, this._onDidActiveGroupChange, this._onDidLocationChange);
    }
    getWindow() {
        return this.group.api.getWindow();
    }
    moveTo(options) {
        var _a, _b;
        this.accessor.moveGroupOrPanel({
            from: { groupId: this._group.id, panelId: this.panel.id },
            to: {
                group: (_a = options.group) !== null && _a !== void 0 ? _a : this._group,
                position: options.group
                    ? (_b = options.position) !== null && _b !== void 0 ? _b : 'center'
                    : 'center',
                index: options.index,
            },
            skipSetActive: options.skipSetActive,
        });
    }
    setTitle(title) {
        this.panel.setTitle(title);
    }
    setRenderer(renderer) {
        this.panel.setRenderer(renderer);
    }
    close() {
        this.group.model.closePanel(this.panel);
    }
    maximize() {
        this.group.api.maximize();
    }
    isMaximized() {
        return this.group.api.isMaximized();
    }
    exitMaximized() {
        this.group.api.exitMaximized();
    }
    setupGroupEventListeners(previousGroup) {
        var _a;
        let _trackGroupActive = (_a = previousGroup === null || previousGroup === void 0 ? void 0 : previousGroup.isActive) !== null && _a !== void 0 ? _a : false; // prevent duplicate events with same state
        this.groupEventsDisposable.value = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable(this.group.api.onDidVisibilityChange((event) => {
            const hasBecomeHidden = !event.isVisible && this.isVisible;
            const hasBecomeVisible = event.isVisible && !this.isVisible;
            const isActivePanel = this.group.model.isPanelActive(this.panel);
            if (hasBecomeHidden || (hasBecomeVisible && isActivePanel)) {
                this._onDidVisibilityChange.fire(event);
            }
        }), this.group.api.onDidLocationChange((event) => {
            if (this.group !== this.panel.group) {
                return;
            }
            this._onDidLocationChange.fire(event);
        }), this.group.api.onDidActiveChange(() => {
            if (this.group !== this.panel.group) {
                return;
            }
            if (_trackGroupActive !== this.isGroupActive) {
                _trackGroupActive = this.isGroupActive;
                this._onDidActiveGroupChange.fire({
                    isActive: this.isGroupActive,
                });
            }
        }));
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/api/entryPoints.js":
/*!****************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/api/entryPoints.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createDockview: () => (/* binding */ createDockview),
/* harmony export */   createGridview: () => (/* binding */ createGridview),
/* harmony export */   createPaneview: () => (/* binding */ createPaneview),
/* harmony export */   createSplitview: () => (/* binding */ createSplitview)
/* harmony export */ });
/* harmony import */ var _api_component_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api/component.api */ "./node_modules/dockview-core/dist/esm/api/component.api.js");
/* harmony import */ var _dockview_dockviewComponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dockview/dockviewComponent */ "./node_modules/dockview-core/dist/esm/dockview/dockviewComponent.js");
/* harmony import */ var _gridview_gridviewComponent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../gridview/gridviewComponent */ "./node_modules/dockview-core/dist/esm/gridview/gridviewComponent.js");
/* harmony import */ var _paneview_paneviewComponent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../paneview/paneviewComponent */ "./node_modules/dockview-core/dist/esm/paneview/paneviewComponent.js");
/* harmony import */ var _splitview_splitviewComponent__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../splitview/splitviewComponent */ "./node_modules/dockview-core/dist/esm/splitview/splitviewComponent.js");





function createDockview(element, options) {
    const component = new _dockview_dockviewComponent__WEBPACK_IMPORTED_MODULE_1__.DockviewComponent(element, options);
    return component.api;
}
function createSplitview(element, options) {
    const component = new _splitview_splitviewComponent__WEBPACK_IMPORTED_MODULE_4__.SplitviewComponent(element, options);
    return new _api_component_api__WEBPACK_IMPORTED_MODULE_0__.SplitviewApi(component);
}
function createGridview(element, options) {
    const component = new _gridview_gridviewComponent__WEBPACK_IMPORTED_MODULE_2__.GridviewComponent(element, options);
    return new _api_component_api__WEBPACK_IMPORTED_MODULE_0__.GridviewApi(component);
}
function createPaneview(element, options) {
    const component = new _paneview_paneviewComponent__WEBPACK_IMPORTED_MODULE_3__.PaneviewComponent(element, options);
    return new _api_component_api__WEBPACK_IMPORTED_MODULE_0__.PaneviewApi(component);
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/api/gridviewPanelApi.js":
/*!*********************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/api/gridviewPanelApi.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GridviewPanelApiImpl: () => (/* binding */ GridviewPanelApiImpl)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _panelApi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./panelApi */ "./node_modules/dockview-core/dist/esm/api/panelApi.js");


class GridviewPanelApiImpl extends _panelApi__WEBPACK_IMPORTED_MODULE_1__.PanelApiImpl {
    constructor(id, component, panel) {
        super(id, component);
        this._onDidConstraintsChangeInternal = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidConstraintsChangeInternal = this._onDidConstraintsChangeInternal.event;
        this._onDidConstraintsChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidConstraintsChange = this._onDidConstraintsChange.event;
        this._onDidSizeChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidSizeChange = this._onDidSizeChange.event;
        this.addDisposables(this._onDidConstraintsChangeInternal, this._onDidConstraintsChange, this._onDidSizeChange);
        if (panel) {
            this.initialize(panel);
        }
    }
    setConstraints(value) {
        this._onDidConstraintsChangeInternal.fire(value);
    }
    setSize(event) {
        this._onDidSizeChange.fire(event);
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/api/panelApi.js":
/*!*************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/api/panelApi.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PanelApiImpl: () => (/* binding */ PanelApiImpl),
/* harmony export */   WillFocusEvent: () => (/* binding */ WillFocusEvent)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");


class WillFocusEvent extends _events__WEBPACK_IMPORTED_MODULE_0__.DockviewEvent {
    constructor() {
        super();
    }
}
/**
 * A core api implementation that should be used across all panel-like objects
 */
class PanelApiImpl extends _lifecycle__WEBPACK_IMPORTED_MODULE_1__.CompositeDisposable {
    get isFocused() {
        return this._isFocused;
    }
    get isActive() {
        return this._isActive;
    }
    get isVisible() {
        return this._isVisible;
    }
    get width() {
        return this._width;
    }
    get height() {
        return this._height;
    }
    constructor(id, component) {
        super();
        this.id = id;
        this.component = component;
        this._isFocused = false;
        this._isActive = false;
        this._isVisible = true;
        this._width = 0;
        this._height = 0;
        this._parameters = {};
        this.panelUpdatesDisposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_1__.MutableDisposable();
        this._onDidDimensionChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidDimensionsChange = this._onDidDimensionChange.event;
        this._onDidChangeFocus = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidFocusChange = this._onDidChangeFocus.event;
        //
        this._onWillFocus = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onWillFocus = this._onWillFocus.event;
        //
        this._onDidVisibilityChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidVisibilityChange = this._onDidVisibilityChange.event;
        this._onWillVisibilityChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onWillVisibilityChange = this._onWillVisibilityChange.event;
        this._onDidActiveChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidActiveChange = this._onDidActiveChange.event;
        this._onActiveChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onActiveChange = this._onActiveChange.event;
        this._onDidParametersChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidParametersChange = this._onDidParametersChange.event;
        this.addDisposables(this.onDidFocusChange((event) => {
            this._isFocused = event.isFocused;
        }), this.onDidActiveChange((event) => {
            this._isActive = event.isActive;
        }), this.onDidVisibilityChange((event) => {
            this._isVisible = event.isVisible;
        }), this.onDidDimensionsChange((event) => {
            this._width = event.width;
            this._height = event.height;
        }), this.panelUpdatesDisposable, this._onDidDimensionChange, this._onDidChangeFocus, this._onDidVisibilityChange, this._onDidActiveChange, this._onWillFocus, this._onActiveChange, this._onWillFocus, this._onWillVisibilityChange, this._onDidParametersChange);
    }
    getParameters() {
        return this._parameters;
    }
    initialize(panel) {
        this.panelUpdatesDisposable.value = this._onDidParametersChange.event((parameters) => {
            this._parameters = parameters;
            panel.update({
                params: parameters,
            });
        });
    }
    setVisible(isVisible) {
        this._onWillVisibilityChange.fire({ isVisible });
    }
    setActive() {
        this._onActiveChange.fire();
    }
    updateParameters(parameters) {
        this._onDidParametersChange.fire(parameters);
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/api/paneviewPanelApi.js":
/*!*********************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/api/paneviewPanelApi.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PaneviewPanelApiImpl: () => (/* binding */ PaneviewPanelApiImpl)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _splitviewPanelApi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./splitviewPanelApi */ "./node_modules/dockview-core/dist/esm/api/splitviewPanelApi.js");


class PaneviewPanelApiImpl extends _splitviewPanelApi__WEBPACK_IMPORTED_MODULE_1__.SplitviewPanelApiImpl {
    set pane(pane) {
        this._pane = pane;
    }
    constructor(id, component) {
        super(id, component);
        this._onDidExpansionChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter({
            replay: true,
        });
        this.onDidExpansionChange = this._onDidExpansionChange.event;
        this._onMouseEnter = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter({});
        this.onMouseEnter = this._onMouseEnter.event;
        this._onMouseLeave = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter({});
        this.onMouseLeave = this._onMouseLeave.event;
        this.addDisposables(this._onDidExpansionChange, this._onMouseEnter, this._onMouseLeave);
    }
    setExpanded(isExpanded) {
        var _a;
        (_a = this._pane) === null || _a === void 0 ? void 0 : _a.setExpanded(isExpanded);
    }
    get isExpanded() {
        var _a;
        return !!((_a = this._pane) === null || _a === void 0 ? void 0 : _a.isExpanded());
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/api/splitviewPanelApi.js":
/*!**********************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/api/splitviewPanelApi.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SplitviewPanelApiImpl: () => (/* binding */ SplitviewPanelApiImpl)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _panelApi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./panelApi */ "./node_modules/dockview-core/dist/esm/api/panelApi.js");


class SplitviewPanelApiImpl extends _panelApi__WEBPACK_IMPORTED_MODULE_1__.PanelApiImpl {
    //
    constructor(id, component) {
        super(id, component);
        this._onDidConstraintsChangeInternal = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidConstraintsChangeInternal = this._onDidConstraintsChangeInternal.event;
        //
        this._onDidConstraintsChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter({
            replay: true,
        });
        this.onDidConstraintsChange = this._onDidConstraintsChange.event;
        //
        this._onDidSizeChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidSizeChange = this._onDidSizeChange.event;
        this.addDisposables(this._onDidConstraintsChangeInternal, this._onDidConstraintsChange, this._onDidSizeChange);
    }
    setConstraints(value) {
        this._onDidConstraintsChangeInternal.fire(value);
    }
    setSize(event) {
        this._onDidSizeChange.fire(event);
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/array.js":
/*!******************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/array.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   firstIndex: () => (/* binding */ firstIndex),
/* harmony export */   last: () => (/* binding */ last),
/* harmony export */   pushToEnd: () => (/* binding */ pushToEnd),
/* harmony export */   pushToStart: () => (/* binding */ pushToStart),
/* harmony export */   remove: () => (/* binding */ remove),
/* harmony export */   sequenceEquals: () => (/* binding */ sequenceEquals),
/* harmony export */   tail: () => (/* binding */ tail)
/* harmony export */ });
function tail(arr) {
    if (arr.length === 0) {
        throw new Error('Invalid tail call');
    }
    return [arr.slice(0, arr.length - 1), arr[arr.length - 1]];
}
function last(arr) {
    return arr.length > 0 ? arr[arr.length - 1] : undefined;
}
function sequenceEquals(arr1, arr2) {
    if (arr1.length !== arr2.length) {
        return false;
    }
    for (let i = 0; i < arr1.length; i++) {
        if (arr1[i] !== arr2[i]) {
            return false;
        }
    }
    return true;
}
/**
 * Pushes an element to the start of the array, if found.
 */
function pushToStart(arr, value) {
    const index = arr.indexOf(value);
    if (index > -1) {
        arr.splice(index, 1);
        arr.unshift(value);
    }
}
/**
 * Pushes an element to the end of the array, if found.
 */
function pushToEnd(arr, value) {
    const index = arr.indexOf(value);
    if (index > -1) {
        arr.splice(index, 1);
        arr.push(value);
    }
}
function firstIndex(array, fn) {
    for (let i = 0; i < array.length; i++) {
        const element = array[i];
        if (fn(element)) {
            return i;
        }
    }
    return -1;
}
function remove(array, value) {
    const index = array.findIndex((t) => t === value);
    if (index > -1) {
        array.splice(index, 1);
        return true;
    }
    return false;
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/constants.js":
/*!**********************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/constants.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE: () => (/* binding */ DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE),
/* harmony export */   DEFAULT_FLOATING_GROUP_POSITION: () => (/* binding */ DEFAULT_FLOATING_GROUP_POSITION),
/* harmony export */   DESERIALIZATION_POPOUT_DELAY_MS: () => (/* binding */ DESERIALIZATION_POPOUT_DELAY_MS)
/* harmony export */ });
const DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE = 100;
const DEFAULT_FLOATING_GROUP_POSITION = { left: 100, top: 100, width: 300, height: 300 };
const DESERIALIZATION_POPOUT_DELAY_MS = 100;


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dnd/abstractDragHandler.js":
/*!************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dnd/abstractDragHandler.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DragHandler: () => (/* binding */ DragHandler)
/* harmony export */ });
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");



class DragHandler extends _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable {
    constructor(el, disabled) {
        super();
        this.el = el;
        this.disabled = disabled;
        this.dataDisposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.MutableDisposable();
        this.pointerEventsDisposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.MutableDisposable();
        this._onDragStart = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDragStart = this._onDragStart.event;
        this.addDisposables(this._onDragStart, this.dataDisposable, this.pointerEventsDisposable);
        this.configure();
    }
    setDisabled(disabled) {
        this.disabled = disabled;
    }
    isCancelled(_event) {
        return false;
    }
    configure() {
        this.addDisposables(this._onDragStart, (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(this.el, 'dragstart', (event) => {
            if (event.defaultPrevented || this.isCancelled(event) || this.disabled) {
                event.preventDefault();
                return;
            }
            const iframes = (0,_dom__WEBPACK_IMPORTED_MODULE_0__.disableIframePointEvents)();
            this.pointerEventsDisposable.value = {
                dispose: () => {
                    iframes.release();
                },
            };
            this.el.classList.add('dv-dragged');
            setTimeout(() => this.el.classList.remove('dv-dragged'), 0);
            this.dataDisposable.value = this.getData(event);
            this._onDragStart.fire(event);
            if (event.dataTransfer) {
                event.dataTransfer.effectAllowed = 'move';
                const hasData = event.dataTransfer.items.length > 0;
                if (!hasData) {
                    /**
                     * Although this is not used by dockview many third party dnd libraries will check
                     * dataTransfer.types to determine valid drag events.
                     *
                     * For example: in react-dnd if dataTransfer.types is not set then the dragStart event will be cancelled
                     * through .preventDefault(). Since this is applied globally to all drag events this would break dockviews
                     * dnd logic. You can see the code at
                 P    * https://github.com/react-dnd/react-dnd/blob/main/packages/backend-html5/src/HTML5BackendImpl.ts#L542
                     */
                    event.dataTransfer.setData('text/plain', '');
                }
            }
        }), (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(this.el, 'dragend', () => {
            this.pointerEventsDisposable.dispose();
            setTimeout(() => {
                this.dataDisposable.dispose(); // allow the data to be read by other handlers before disposing
            }, 0);
        }));
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dnd/dataTransfer.js":
/*!*****************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dnd/dataTransfer.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LocalSelectionTransfer: () => (/* binding */ LocalSelectionTransfer),
/* harmony export */   PaneTransfer: () => (/* binding */ PaneTransfer),
/* harmony export */   PanelTransfer: () => (/* binding */ PanelTransfer),
/* harmony export */   getPaneData: () => (/* binding */ getPaneData),
/* harmony export */   getPanelData: () => (/* binding */ getPanelData)
/* harmony export */ });
class TransferObject {
}
class PanelTransfer extends TransferObject {
    constructor(viewId, groupId, panelId) {
        super();
        this.viewId = viewId;
        this.groupId = groupId;
        this.panelId = panelId;
    }
}
class PaneTransfer extends TransferObject {
    constructor(viewId, paneId) {
        super();
        this.viewId = viewId;
        this.paneId = paneId;
    }
}
/**
 * A singleton to store transfer data during drag & drop operations that are only valid within the application.
 */
class LocalSelectionTransfer {
    constructor() {
        // protect against external instantiation
    }
    static getInstance() {
        return LocalSelectionTransfer.INSTANCE;
    }
    hasData(proto) {
        return proto && proto === this.proto;
    }
    clearData(proto) {
        if (this.hasData(proto)) {
            this.proto = undefined;
            this.data = undefined;
        }
    }
    getData(proto) {
        if (this.hasData(proto)) {
            return this.data;
        }
        return undefined;
    }
    setData(data, proto) {
        if (proto) {
            this.data = data;
            this.proto = proto;
        }
    }
}
LocalSelectionTransfer.INSTANCE = new LocalSelectionTransfer();
function getPanelData() {
    const panelTransfer = LocalSelectionTransfer.getInstance();
    const isPanelEvent = panelTransfer.hasData(PanelTransfer.prototype);
    if (!isPanelEvent) {
        return undefined;
    }
    return panelTransfer.getData(PanelTransfer.prototype)[0];
}
function getPaneData() {
    const paneTransfer = LocalSelectionTransfer.getInstance();
    const isPanelEvent = paneTransfer.hasData(PaneTransfer.prototype);
    if (!isPanelEvent) {
        return undefined;
    }
    return paneTransfer.getData(PaneTransfer.prototype)[0];
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dnd/dnd.js":
/*!********************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dnd/dnd.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DragAndDropObserver: () => (/* binding */ DragAndDropObserver)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");


class DragAndDropObserver extends _lifecycle__WEBPACK_IMPORTED_MODULE_1__.CompositeDisposable {
    constructor(element, callbacks) {
        super();
        this.element = element;
        this.callbacks = callbacks;
        this.target = null;
        this.registerListeners();
    }
    onDragEnter(e) {
        this.target = e.target;
        this.callbacks.onDragEnter(e);
    }
    onDragOver(e) {
        e.preventDefault(); // needed so that the drop event fires (https://stackoverflow.com/questions/21339924/drop-event-not-firing-in-chrome)
        if (this.callbacks.onDragOver) {
            this.callbacks.onDragOver(e);
        }
    }
    onDragLeave(e) {
        if (this.target === e.target) {
            this.target = null;
            this.callbacks.onDragLeave(e);
        }
    }
    onDragEnd(e) {
        this.target = null;
        this.callbacks.onDragEnd(e);
    }
    onDrop(e) {
        this.callbacks.onDrop(e);
    }
    registerListeners() {
        this.addDisposables((0,_events__WEBPACK_IMPORTED_MODULE_0__.addDisposableListener)(this.element, 'dragenter', (e) => {
            this.onDragEnter(e);
        }, true));
        this.addDisposables((0,_events__WEBPACK_IMPORTED_MODULE_0__.addDisposableListener)(this.element, 'dragover', (e) => {
            this.onDragOver(e);
        }, true));
        this.addDisposables((0,_events__WEBPACK_IMPORTED_MODULE_0__.addDisposableListener)(this.element, 'dragleave', (e) => {
            this.onDragLeave(e);
        }));
        this.addDisposables((0,_events__WEBPACK_IMPORTED_MODULE_0__.addDisposableListener)(this.element, 'dragend', (e) => {
            this.onDragEnd(e);
        }));
        this.addDisposables((0,_events__WEBPACK_IMPORTED_MODULE_0__.addDisposableListener)(this.element, 'drop', (e) => {
            this.onDrop(e);
        }));
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dnd/dropTargetAnchorContainer.js":
/*!******************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dnd/dropTargetAnchorContainer.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DropTargetAnchorContainer: () => (/* binding */ DropTargetAnchorContainer)
/* harmony export */ });
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");

class DropTargetAnchorContainer extends _lifecycle__WEBPACK_IMPORTED_MODULE_0__.CompositeDisposable {
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        var _a;
        if (this.disabled === value) {
            return;
        }
        this._disabled = value;
        if (value) {
            (_a = this.model) === null || _a === void 0 ? void 0 : _a.clear();
        }
    }
    get model() {
        if (this.disabled) {
            return undefined;
        }
        return {
            clear: () => {
                var _a;
                if (this._model) {
                    (_a = this._model.root.parentElement) === null || _a === void 0 ? void 0 : _a.removeChild(this._model.root);
                }
                this._model = undefined;
            },
            exists: () => {
                return !!this._model;
            },
            getElements: (event, outline) => {
                const changed = this._outline !== outline;
                this._outline = outline;
                if (this._model) {
                    this._model.changed = changed;
                    return this._model;
                }
                const container = this.createContainer();
                const anchor = this.createAnchor();
                this._model = { root: container, overlay: anchor, changed };
                container.appendChild(anchor);
                this.element.appendChild(container);
                if ((event === null || event === void 0 ? void 0 : event.target) instanceof HTMLElement) {
                    const targetBox = event.target.getBoundingClientRect();
                    const box = this.element.getBoundingClientRect();
                    anchor.style.left = `${targetBox.left - box.left}px`;
                    anchor.style.top = `${targetBox.top - box.top}px`;
                }
                return this._model;
            },
        };
    }
    constructor(element, options) {
        super();
        this.element = element;
        this._disabled = false;
        this._disabled = options.disabled;
        this.addDisposables(_lifecycle__WEBPACK_IMPORTED_MODULE_0__.Disposable.from(() => {
            var _a;
            (_a = this.model) === null || _a === void 0 ? void 0 : _a.clear();
        }));
    }
    createContainer() {
        const el = document.createElement('div');
        el.className = 'dv-drop-target-container';
        return el;
    }
    createAnchor() {
        const el = document.createElement('div');
        el.className = 'dv-drop-target-anchor';
        el.style.visibility = 'hidden';
        return el;
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dnd/droptarget.js":
/*!***************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dnd/droptarget.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Droptarget: () => (/* binding */ Droptarget),
/* harmony export */   WillShowOverlayEvent: () => (/* binding */ WillShowOverlayEvent),
/* harmony export */   calculateQuadrantAsPercentage: () => (/* binding */ calculateQuadrantAsPercentage),
/* harmony export */   calculateQuadrantAsPixels: () => (/* binding */ calculateQuadrantAsPixels),
/* harmony export */   directionToPosition: () => (/* binding */ directionToPosition),
/* harmony export */   positionToDirection: () => (/* binding */ positionToDirection)
/* harmony export */ });
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _dnd__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dnd */ "./node_modules/dockview-core/dist/esm/dnd/dnd.js");
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../math */ "./node_modules/dockview-core/dist/esm/math.js");





function setGPUOptimizedBounds(element, bounds) {
    const { top, left, width, height } = bounds;
    const topPx = `${Math.round(top)}px`;
    const leftPx = `${Math.round(left)}px`;
    const widthPx = `${Math.round(width)}px`;
    const heightPx = `${Math.round(height)}px`;
    // Use traditional positioning but maintain GPU layer
    element.style.top = topPx;
    element.style.left = leftPx;
    element.style.width = widthPx;
    element.style.height = heightPx;
    element.style.visibility = 'visible';
    // Ensure GPU layer is maintained
    if (!element.style.transform || element.style.transform === '') {
        element.style.transform = 'translate3d(0, 0, 0)';
    }
}
function setGPUOptimizedBoundsFromStrings(element, bounds) {
    const { top, left, width, height } = bounds;
    // Use traditional positioning but maintain GPU layer
    element.style.top = top;
    element.style.left = left;
    element.style.width = width;
    element.style.height = height;
    element.style.visibility = 'visible';
    // Ensure GPU layer is maintained
    if (!element.style.transform || element.style.transform === '') {
        element.style.transform = 'translate3d(0, 0, 0)';
    }
}
function checkBoundsChanged(element, bounds) {
    const { top, left, width, height } = bounds;
    const topPx = `${Math.round(top)}px`;
    const leftPx = `${Math.round(left)}px`;
    const widthPx = `${Math.round(width)}px`;
    const heightPx = `${Math.round(height)}px`;
    // Check if position or size changed (back to traditional method)
    return element.style.top !== topPx ||
        element.style.left !== leftPx ||
        element.style.width !== widthPx ||
        element.style.height !== heightPx;
}
class WillShowOverlayEvent extends _events__WEBPACK_IMPORTED_MODULE_1__.DockviewEvent {
    get nativeEvent() {
        return this.options.nativeEvent;
    }
    get position() {
        return this.options.position;
    }
    constructor(options) {
        super();
        this.options = options;
    }
}
function directionToPosition(direction) {
    switch (direction) {
        case 'above':
            return 'top';
        case 'below':
            return 'bottom';
        case 'left':
            return 'left';
        case 'right':
            return 'right';
        case 'within':
            return 'center';
        default:
            throw new Error(`invalid direction '${direction}'`);
    }
}
function positionToDirection(position) {
    switch (position) {
        case 'top':
            return 'above';
        case 'bottom':
            return 'below';
        case 'left':
            return 'left';
        case 'right':
            return 'right';
        case 'center':
            return 'within';
        default:
            throw new Error(`invalid position '${position}'`);
    }
}
const DEFAULT_ACTIVATION_SIZE = {
    value: 20,
    type: 'percentage',
};
const DEFAULT_SIZE = {
    value: 50,
    type: 'percentage',
};
const SMALL_WIDTH_BOUNDARY = 100;
const SMALL_HEIGHT_BOUNDARY = 100;
class Droptarget extends _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable {
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = value;
    }
    get state() {
        return this._state;
    }
    constructor(element, options) {
        super();
        this.element = element;
        this.options = options;
        this._onDrop = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDrop = this._onDrop.event;
        this._onWillShowOverlay = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onWillShowOverlay = this._onWillShowOverlay.event;
        this._disabled = false;
        // use a set to take advantage of #<set>.has
        this._acceptedTargetZonesSet = new Set(this.options.acceptedTargetZones);
        this.dnd = new _dnd__WEBPACK_IMPORTED_MODULE_3__.DragAndDropObserver(this.element, {
            onDragEnter: () => {
                var _a, _b, _c;
                (_c = (_b = (_a = this.options).getOverrideTarget) === null || _b === void 0 ? void 0 : _b.call(_a)) === null || _c === void 0 ? void 0 : _c.getElements();
            },
            onDragOver: (e) => {
                var _a, _b, _c, _d, _e, _f, _g;
                Droptarget.ACTUAL_TARGET = this;
                const overrideTarget = (_b = (_a = this.options).getOverrideTarget) === null || _b === void 0 ? void 0 : _b.call(_a);
                if (this._acceptedTargetZonesSet.size === 0) {
                    if (overrideTarget) {
                        return;
                    }
                    this.removeDropTarget();
                    return;
                }
                const target = (_e = (_d = (_c = this.options).getOverlayOutline) === null || _d === void 0 ? void 0 : _d.call(_c)) !== null && _e !== void 0 ? _e : this.element;
                const width = target.offsetWidth;
                const height = target.offsetHeight;
                if (width === 0 || height === 0) {
                    return; // avoid div!0
                }
                const rect = e.currentTarget.getBoundingClientRect();
                const x = ((_f = e.clientX) !== null && _f !== void 0 ? _f : 0) - rect.left;
                const y = ((_g = e.clientY) !== null && _g !== void 0 ? _g : 0) - rect.top;
                const quadrant = this.calculateQuadrant(this._acceptedTargetZonesSet, x, y, width, height);
                /**
                 * If the event has already been used by another DropTarget instance
                 * then don't show a second drop target, only one target should be
                 * active at any one time
                 */
                if (this.isAlreadyUsed(e) || quadrant === null) {
                    // no drop target should be displayed
                    this.removeDropTarget();
                    return;
                }
                if (!this.options.canDisplayOverlay(e, quadrant)) {
                    if (overrideTarget) {
                        return;
                    }
                    this.removeDropTarget();
                    return;
                }
                const willShowOverlayEvent = new WillShowOverlayEvent({
                    nativeEvent: e,
                    position: quadrant,
                });
                /**
                 * Provide an opportunity to prevent the overlay appearing and in turn
                 * any dnd behaviours
                 */
                this._onWillShowOverlay.fire(willShowOverlayEvent);
                if (willShowOverlayEvent.defaultPrevented) {
                    this.removeDropTarget();
                    return;
                }
                this.markAsUsed(e);
                if (overrideTarget) {
                    //
                }
                else if (!this.targetElement) {
                    this.targetElement = document.createElement('div');
                    this.targetElement.className = 'dv-drop-target-dropzone';
                    this.overlayElement = document.createElement('div');
                    this.overlayElement.className = 'dv-drop-target-selection';
                    this._state = 'center';
                    this.targetElement.appendChild(this.overlayElement);
                    target.classList.add('dv-drop-target');
                    target.append(this.targetElement);
                    // this.overlayElement.style.opacity = '0';
                    // requestAnimationFrame(() => {
                    //     if (this.overlayElement) {
                    //         this.overlayElement.style.opacity = '';
                    //     }
                    // });
                }
                this.toggleClasses(quadrant, width, height);
                this._state = quadrant;
            },
            onDragLeave: () => {
                var _a, _b;
                const target = (_b = (_a = this.options).getOverrideTarget) === null || _b === void 0 ? void 0 : _b.call(_a);
                if (target) {
                    return;
                }
                this.removeDropTarget();
            },
            onDragEnd: (e) => {
                var _a, _b;
                const target = (_b = (_a = this.options).getOverrideTarget) === null || _b === void 0 ? void 0 : _b.call(_a);
                if (target && Droptarget.ACTUAL_TARGET === this) {
                    if (this._state) {
                        // only stop the propagation of the event if we are dealing with it
                        // which is only when the target has state
                        e.stopPropagation();
                        this._onDrop.fire({
                            position: this._state,
                            nativeEvent: e,
                        });
                    }
                }
                this.removeDropTarget();
                target === null || target === void 0 ? void 0 : target.clear();
            },
            onDrop: (e) => {
                var _a, _b, _c;
                e.preventDefault();
                const state = this._state;
                this.removeDropTarget();
                (_c = (_b = (_a = this.options).getOverrideTarget) === null || _b === void 0 ? void 0 : _b.call(_a)) === null || _c === void 0 ? void 0 : _c.clear();
                if (state) {
                    // only stop the propagation of the event if we are dealing with it
                    // which is only when the target has state
                    e.stopPropagation();
                    this._onDrop.fire({ position: state, nativeEvent: e });
                }
            },
        });
        this.addDisposables(this._onDrop, this._onWillShowOverlay, this.dnd);
    }
    setTargetZones(acceptedTargetZones) {
        this._acceptedTargetZonesSet = new Set(acceptedTargetZones);
    }
    setOverlayModel(model) {
        this.options.overlayModel = model;
    }
    dispose() {
        this.removeDropTarget();
        super.dispose();
    }
    /**
     * Add a property to the event object for other potential listeners to check
     */
    markAsUsed(event) {
        event[Droptarget.USED_EVENT_ID] = true;
    }
    /**
     * Check is the event has already been used by another instance of DropTarget
     */
    isAlreadyUsed(event) {
        const value = event[Droptarget.USED_EVENT_ID];
        return typeof value === 'boolean' && value;
    }
    toggleClasses(quadrant, width, height) {
        var _a, _b, _c, _d, _e, _f, _g;
        const target = (_b = (_a = this.options).getOverrideTarget) === null || _b === void 0 ? void 0 : _b.call(_a);
        if (!target && !this.overlayElement) {
            return;
        }
        const isSmallX = width < SMALL_WIDTH_BOUNDARY;
        const isSmallY = height < SMALL_HEIGHT_BOUNDARY;
        const isLeft = quadrant === 'left';
        const isRight = quadrant === 'right';
        const isTop = quadrant === 'top';
        const isBottom = quadrant === 'bottom';
        const rightClass = !isSmallX && isRight;
        const leftClass = !isSmallX && isLeft;
        const topClass = !isSmallY && isTop;
        const bottomClass = !isSmallY && isBottom;
        let size = 1;
        const sizeOptions = (_d = (_c = this.options.overlayModel) === null || _c === void 0 ? void 0 : _c.size) !== null && _d !== void 0 ? _d : DEFAULT_SIZE;
        if (sizeOptions.type === 'percentage') {
            size = (0,_math__WEBPACK_IMPORTED_MODULE_4__.clamp)(sizeOptions.value, 0, 100) / 100;
        }
        else {
            if (rightClass || leftClass) {
                size = (0,_math__WEBPACK_IMPORTED_MODULE_4__.clamp)(0, sizeOptions.value, width) / width;
            }
            if (topClass || bottomClass) {
                size = (0,_math__WEBPACK_IMPORTED_MODULE_4__.clamp)(0, sizeOptions.value, height) / height;
            }
        }
        if (target) {
            const outlineEl = (_g = (_f = (_e = this.options).getOverlayOutline) === null || _f === void 0 ? void 0 : _f.call(_e)) !== null && _g !== void 0 ? _g : this.element;
            const elBox = outlineEl.getBoundingClientRect();
            const ta = target.getElements(undefined, outlineEl);
            const el = ta.root;
            const overlay = ta.overlay;
            const bigbox = el.getBoundingClientRect();
            const rootTop = elBox.top - bigbox.top;
            const rootLeft = elBox.left - bigbox.left;
            const box = {
                top: rootTop,
                left: rootLeft,
                width: width,
                height: height,
            };
            if (rightClass) {
                box.left = rootLeft + width * (1 - size);
                box.width = width * size;
            }
            else if (leftClass) {
                box.width = width * size;
            }
            else if (topClass) {
                box.height = height * size;
            }
            else if (bottomClass) {
                box.top = rootTop + height * (1 - size);
                box.height = height * size;
            }
            if (isSmallX && isLeft) {
                box.width = 4;
            }
            if (isSmallX && isRight) {
                box.left = rootLeft + width - 4;
                box.width = 4;
            }
            // Use GPU-optimized bounds checking and setting
            if (!checkBoundsChanged(overlay, box)) {
                return;
            }
            setGPUOptimizedBounds(overlay, box);
            overlay.className = `dv-drop-target-anchor${this.options.className ? ` ${this.options.className}` : ''}`;
            (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(overlay, 'dv-drop-target-left', isLeft);
            (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(overlay, 'dv-drop-target-right', isRight);
            (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(overlay, 'dv-drop-target-top', isTop);
            (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(overlay, 'dv-drop-target-bottom', isBottom);
            (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(overlay, 'dv-drop-target-center', quadrant === 'center');
            if (ta.changed) {
                (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(overlay, 'dv-drop-target-anchor-container-changed', true);
                setTimeout(() => {
                    (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(overlay, 'dv-drop-target-anchor-container-changed', false);
                }, 10);
            }
            return;
        }
        if (!this.overlayElement) {
            return;
        }
        const box = { top: '0px', left: '0px', width: '100%', height: '100%' };
        /**
         * You can also achieve the overlay placement using the transform CSS property
         * to translate and scale the element however this has the undesired effect of
         * 'skewing' the element. Comment left here for anybody that ever revisits this.
         *
         * @see https://developer.mozilla.org/en-US/docs/Web/CSS/transform
         *
         * right
         * translateX(${100 * (1 - size) / 2}%) scaleX(${scale})
         *
         * left
         * translateX(-${100 * (1 - size) / 2}%) scaleX(${scale})
         *
         * top
         * translateY(-${100 * (1 - size) / 2}%) scaleY(${scale})
         *
         * bottom
         * translateY(${100 * (1 - size) / 2}%) scaleY(${scale})
         */
        if (rightClass) {
            box.left = `${100 * (1 - size)}%`;
            box.width = `${100 * size}%`;
        }
        else if (leftClass) {
            box.width = `${100 * size}%`;
        }
        else if (topClass) {
            box.height = `${100 * size}%`;
        }
        else if (bottomClass) {
            box.top = `${100 * (1 - size)}%`;
            box.height = `${100 * size}%`;
        }
        setGPUOptimizedBoundsFromStrings(this.overlayElement, box);
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(this.overlayElement, 'dv-drop-target-small-vertical', isSmallY);
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(this.overlayElement, 'dv-drop-target-small-horizontal', isSmallX);
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(this.overlayElement, 'dv-drop-target-left', isLeft);
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(this.overlayElement, 'dv-drop-target-right', isRight);
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(this.overlayElement, 'dv-drop-target-top', isTop);
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(this.overlayElement, 'dv-drop-target-bottom', isBottom);
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(this.overlayElement, 'dv-drop-target-center', quadrant === 'center');
    }
    calculateQuadrant(overlayType, x, y, width, height) {
        var _a, _b;
        const activationSizeOptions = (_b = (_a = this.options.overlayModel) === null || _a === void 0 ? void 0 : _a.activationSize) !== null && _b !== void 0 ? _b : DEFAULT_ACTIVATION_SIZE;
        const isPercentage = activationSizeOptions.type === 'percentage';
        if (isPercentage) {
            return calculateQuadrantAsPercentage(overlayType, x, y, width, height, activationSizeOptions.value);
        }
        return calculateQuadrantAsPixels(overlayType, x, y, width, height, activationSizeOptions.value);
    }
    removeDropTarget() {
        var _a;
        if (this.targetElement) {
            this._state = undefined;
            (_a = this.targetElement.parentElement) === null || _a === void 0 ? void 0 : _a.classList.remove('dv-drop-target');
            this.targetElement.remove();
            this.targetElement = undefined;
            this.overlayElement = undefined;
        }
    }
}
Droptarget.USED_EVENT_ID = '__dockview_droptarget_event_is_used__';
function calculateQuadrantAsPercentage(overlayType, x, y, width, height, threshold) {
    const xp = (100 * x) / width;
    const yp = (100 * y) / height;
    if (overlayType.has('left') && xp < threshold) {
        return 'left';
    }
    if (overlayType.has('right') && xp > 100 - threshold) {
        return 'right';
    }
    if (overlayType.has('top') && yp < threshold) {
        return 'top';
    }
    if (overlayType.has('bottom') && yp > 100 - threshold) {
        return 'bottom';
    }
    if (!overlayType.has('center')) {
        return null;
    }
    return 'center';
}
function calculateQuadrantAsPixels(overlayType, x, y, width, height, threshold) {
    if (overlayType.has('left') && x < threshold) {
        return 'left';
    }
    if (overlayType.has('right') && x > width - threshold) {
        return 'right';
    }
    if (overlayType.has('top') && y < threshold) {
        return 'top';
    }
    if (overlayType.has('bottom') && y > height - threshold) {
        return 'bottom';
    }
    if (!overlayType.has('center')) {
        return null;
    }
    return 'center';
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dnd/ghost.js":
/*!**********************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dnd/ghost.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addGhostImage: () => (/* binding */ addGhostImage)
/* harmony export */ });
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");

function addGhostImage(dataTransfer, ghostElement, options) {
    var _a, _b;
    // class dockview provides to force ghost image to be drawn on a different layer and prevent weird rendering issues
    (0,_dom__WEBPACK_IMPORTED_MODULE_0__.addClasses)(ghostElement, 'dv-dragged');
    // move the element off-screen initially otherwise it may in some cases be rendered at (0,0) momentarily
    ghostElement.style.top = '-9999px';
    document.body.appendChild(ghostElement);
    dataTransfer.setDragImage(ghostElement, (_a = options === null || options === void 0 ? void 0 : options.x) !== null && _a !== void 0 ? _a : 0, (_b = options === null || options === void 0 ? void 0 : options.y) !== null && _b !== void 0 ? _b : 0);
    setTimeout(() => {
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.removeClasses)(ghostElement, 'dv-dragged');
        ghostElement.remove();
    }, 0);
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dnd/groupDragHandler.js":
/*!*********************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dnd/groupDragHandler.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GroupDragHandler: () => (/* binding */ GroupDragHandler)
/* harmony export */ });
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _abstractDragHandler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./abstractDragHandler */ "./node_modules/dockview-core/dist/esm/dnd/abstractDragHandler.js");
/* harmony import */ var _dataTransfer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dataTransfer */ "./node_modules/dockview-core/dist/esm/dnd/dataTransfer.js");
/* harmony import */ var _ghost__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ghost */ "./node_modules/dockview-core/dist/esm/dnd/ghost.js");





class GroupDragHandler extends _abstractDragHandler__WEBPACK_IMPORTED_MODULE_2__.DragHandler {
    constructor(element, accessor, group, disabled) {
        super(element, disabled);
        this.accessor = accessor;
        this.group = group;
        this.panelTransfer = _dataTransfer__WEBPACK_IMPORTED_MODULE_3__.LocalSelectionTransfer.getInstance();
        this.addDisposables((0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(element, 'pointerdown', (e) => {
            if (e.shiftKey) {
                /**
                 * You cannot call e.preventDefault() because that will prevent drag events from firing
                 * but we also need to stop any group overlay drag events from occuring
                 * Use a custom event marker that can be checked by the overlay drag events
                 */
                (0,_dom__WEBPACK_IMPORTED_MODULE_0__.quasiPreventDefault)(e);
            }
        }, true));
    }
    isCancelled(_event) {
        if (this.group.api.location.type === 'floating' && !_event.shiftKey) {
            return true;
        }
        return false;
    }
    getData(dragEvent) {
        const dataTransfer = dragEvent.dataTransfer;
        this.panelTransfer.setData([new _dataTransfer__WEBPACK_IMPORTED_MODULE_3__.PanelTransfer(this.accessor.id, this.group.id, null)], _dataTransfer__WEBPACK_IMPORTED_MODULE_3__.PanelTransfer.prototype);
        const style = window.getComputedStyle(this.el);
        const bgColor = style.getPropertyValue('--dv-activegroup-visiblepanel-tab-background-color');
        const color = style.getPropertyValue('--dv-activegroup-visiblepanel-tab-color');
        if (dataTransfer) {
            const ghostElement = document.createElement('div');
            ghostElement.style.backgroundColor = bgColor;
            ghostElement.style.color = color;
            ghostElement.style.padding = '2px 8px';
            ghostElement.style.height = '24px';
            ghostElement.style.fontSize = '11px';
            ghostElement.style.lineHeight = '20px';
            ghostElement.style.borderRadius = '12px';
            ghostElement.style.position = 'absolute';
            ghostElement.style.pointerEvents = 'none';
            ghostElement.style.top = '-9999px';
            ghostElement.textContent = `Multiple Panels (${this.group.size})`;
            (0,_ghost__WEBPACK_IMPORTED_MODULE_4__.addGhostImage)(dataTransfer, ghostElement, { y: -10, x: 30 });
        }
        return {
            dispose: () => {
                this.panelTransfer.clearData(_dataTransfer__WEBPACK_IMPORTED_MODULE_3__.PanelTransfer.prototype);
            },
        };
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/components/panel/content.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/components/panel/content.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ContentContainer: () => (/* binding */ ContentContainer)
/* harmony export */ });
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _dnd_droptarget__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../dnd/droptarget */ "./node_modules/dockview-core/dist/esm/dnd/droptarget.js");
/* harmony import */ var _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../dnd/dataTransfer */ "./node_modules/dockview-core/dist/esm/dnd/dataTransfer.js");





class ContentContainer extends _lifecycle__WEBPACK_IMPORTED_MODULE_0__.CompositeDisposable {
    get element() {
        return this._element;
    }
    constructor(accessor, group) {
        super();
        this.accessor = accessor;
        this.group = group;
        this.disposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_0__.MutableDisposable();
        this._onDidFocus = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidFocus = this._onDidFocus.event;
        this._onDidBlur = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidBlur = this._onDidBlur.event;
        this._element = document.createElement('div');
        this._element.className = 'dv-content-container';
        this._element.tabIndex = -1;
        this.addDisposables(this._onDidFocus, this._onDidBlur);
        const target = group.dropTargetContainer;
        this.dropTarget = new _dnd_droptarget__WEBPACK_IMPORTED_MODULE_3__.Droptarget(this.element, {
            getOverlayOutline: () => {
                var _a;
                return ((_a = accessor.options.theme) === null || _a === void 0 ? void 0 : _a.dndPanelOverlay) === 'group'
                    ? this.element.parentElement
                    : null;
            },
            className: 'dv-drop-target-content',
            acceptedTargetZones: ['top', 'bottom', 'left', 'right', 'center'],
            canDisplayOverlay: (event, position) => {
                if (this.group.locked === 'no-drop-target' ||
                    (this.group.locked && position === 'center')) {
                    return false;
                }
                const data = (0,_dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_4__.getPanelData)();
                if (!data &&
                    event.shiftKey &&
                    this.group.location.type !== 'floating') {
                    return false;
                }
                if (data && data.viewId === this.accessor.id) {
                    return true;
                }
                return this.group.canDisplayOverlay(event, position, 'content');
            },
            getOverrideTarget: target ? () => target.model : undefined,
        });
        this.addDisposables(this.dropTarget);
    }
    show() {
        this.element.style.display = '';
    }
    hide() {
        this.element.style.display = 'none';
    }
    renderPanel(panel, options = { asActive: true }) {
        const doRender = options.asActive ||
            (this.panel && this.group.isPanelActive(this.panel));
        if (this.panel &&
            this.panel.view.content.element.parentElement === this._element) {
            /**
             * If the currently attached panel is mounted directly to the content then remove it
             */
            this._element.removeChild(this.panel.view.content.element);
        }
        this.panel = panel;
        let container;
        switch (panel.api.renderer) {
            case 'onlyWhenVisible':
                this.group.renderContainer.detatch(panel);
                if (this.panel) {
                    if (doRender) {
                        this._element.appendChild(this.panel.view.content.element);
                    }
                }
                container = this._element;
                break;
            case 'always':
                if (panel.view.content.element.parentElement === this._element) {
                    this._element.removeChild(panel.view.content.element);
                }
                container = this.group.renderContainer.attach({
                    panel,
                    referenceContainer: this,
                });
                break;
            default:
                throw new Error(`dockview: invalid renderer type '${panel.api.renderer}'`);
        }
        if (doRender) {
            const focusTracker = (0,_dom__WEBPACK_IMPORTED_MODULE_2__.trackFocus)(container);
            const disposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_0__.CompositeDisposable();
            disposable.addDisposables(focusTracker, focusTracker.onDidFocus(() => this._onDidFocus.fire()), focusTracker.onDidBlur(() => this._onDidBlur.fire()));
            this.disposable.value = disposable;
        }
    }
    openPanel(panel) {
        if (this.panel === panel) {
            return;
        }
        this.renderPanel(panel);
    }
    layout(_width, _height) {
        // noop
    }
    closePanel() {
        var _a;
        if (this.panel) {
            if (this.panel.api.renderer === 'onlyWhenVisible') {
                (_a = this.panel.view.content.element.parentElement) === null || _a === void 0 ? void 0 : _a.removeChild(this.panel.view.content.element);
            }
        }
        this.panel = undefined;
    }
    dispose() {
        this.disposable.dispose();
        super.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/components/popupService.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/components/popupService.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PopupService: () => (/* binding */ PopupService)
/* harmony export */ });
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");



class PopupService extends _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable {
    constructor(root) {
        super();
        this.root = root;
        this._active = null;
        this._activeDisposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.MutableDisposable();
        this._element = document.createElement('div');
        this._element.className = 'dv-popover-anchor';
        this._element.style.position = 'relative';
        this.root.prepend(this._element);
        this.addDisposables(_lifecycle__WEBPACK_IMPORTED_MODULE_2__.Disposable.from(() => {
            this.close();
        }), this._activeDisposable);
    }
    openPopover(element, position) {
        var _a;
        this.close();
        const wrapper = document.createElement('div');
        wrapper.style.position = 'absolute';
        wrapper.style.zIndex = (_a = position.zIndex) !== null && _a !== void 0 ? _a : 'var(--dv-overlay-z-index)';
        wrapper.appendChild(element);
        const anchorBox = this._element.getBoundingClientRect();
        const offsetX = anchorBox.left;
        const offsetY = anchorBox.top;
        wrapper.style.top = `${position.y - offsetY}px`;
        wrapper.style.left = `${position.x - offsetX}px`;
        this._element.appendChild(wrapper);
        this._active = wrapper;
        this._activeDisposable.value = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable((0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(window, 'pointerdown', (event) => {
            var _a;
            const target = event.target;
            if (!(target instanceof HTMLElement)) {
                return;
            }
            let el = target;
            while (el && el !== wrapper) {
                el = (_a = el === null || el === void 0 ? void 0 : el.parentElement) !== null && _a !== void 0 ? _a : null;
            }
            if (el) {
                return; // clicked within popover
            }
            this.close();
        }));
        requestAnimationFrame(() => {
            (0,_dom__WEBPACK_IMPORTED_MODULE_0__.shiftAbsoluteElementIntoView)(wrapper, this.root);
        });
    }
    close() {
        if (this._active) {
            this._active.remove();
            this._activeDisposable.dispose();
            this._active = null;
        }
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/components/tab/defaultTab.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/components/tab/defaultTab.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DefaultTab: () => (/* binding */ DefaultTab)
/* harmony export */ });
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _svg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../svg */ "./node_modules/dockview-core/dist/esm/svg.js");



class DefaultTab extends _lifecycle__WEBPACK_IMPORTED_MODULE_0__.CompositeDisposable {
    get element() {
        return this._element;
    }
    constructor() {
        super();
        this._element = document.createElement('div');
        this._element.className = 'dv-default-tab';
        this._content = document.createElement('div');
        this._content.className = 'dv-default-tab-content';
        this.action = document.createElement('div');
        this.action.className = 'dv-default-tab-action';
        this.action.appendChild((0,_svg__WEBPACK_IMPORTED_MODULE_2__.createCloseButton)());
        this._element.appendChild(this._content);
        this._element.appendChild(this.action);
        this.render();
    }
    init(params) {
        this._title = params.title;
        this.addDisposables(params.api.onDidTitleChange((event) => {
            this._title = event.title;
            this.render();
        }), (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(this.action, 'pointerdown', (ev) => {
            ev.preventDefault();
        }), (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(this.action, 'click', (ev) => {
            if (ev.defaultPrevented) {
                return;
            }
            ev.preventDefault();
            params.api.close();
        }));
        this.render();
    }
    render() {
        var _a;
        if (this._content.textContent !== this._title) {
            this._content.textContent = (_a = this._title) !== null && _a !== void 0 ? _a : '';
        }
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/components/tab/tab.js":
/*!****************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/components/tab/tab.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Tab: () => (/* binding */ Tab)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../dnd/dataTransfer */ "./node_modules/dockview-core/dist/esm/dnd/dataTransfer.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _dnd_droptarget__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../dnd/droptarget */ "./node_modules/dockview-core/dist/esm/dnd/droptarget.js");
/* harmony import */ var _dnd_abstractDragHandler__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../dnd/abstractDragHandler */ "./node_modules/dockview-core/dist/esm/dnd/abstractDragHandler.js");
/* harmony import */ var _dnd_ghost__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../dnd/ghost */ "./node_modules/dockview-core/dist/esm/dnd/ghost.js");







class TabDragHandler extends _dnd_abstractDragHandler__WEBPACK_IMPORTED_MODULE_5__.DragHandler {
    constructor(element, accessor, group, panel, disabled) {
        super(element, disabled);
        this.accessor = accessor;
        this.group = group;
        this.panel = panel;
        this.panelTransfer = _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.LocalSelectionTransfer.getInstance();
    }
    getData(event) {
        this.panelTransfer.setData([new _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.PanelTransfer(this.accessor.id, this.group.id, this.panel.id)], _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.PanelTransfer.prototype);
        return {
            dispose: () => {
                this.panelTransfer.clearData(_dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.PanelTransfer.prototype);
            },
        };
    }
}
class Tab extends _lifecycle__WEBPACK_IMPORTED_MODULE_1__.CompositeDisposable {
    get element() {
        return this._element;
    }
    constructor(panel, accessor, group) {
        super();
        this.panel = panel;
        this.accessor = accessor;
        this.group = group;
        this.content = undefined;
        this._onPointDown = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onPointerDown = this._onPointDown.event;
        this._onDropped = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDrop = this._onDropped.event;
        this._onDragStart = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDragStart = this._onDragStart.event;
        this._element = document.createElement('div');
        this._element.className = 'dv-tab';
        this._element.tabIndex = 0;
        this._element.draggable = !this.accessor.options.disableDnd;
        (0,_dom__WEBPACK_IMPORTED_MODULE_3__.toggleClass)(this.element, 'dv-inactive-tab', true);
        this.dragHandler = new TabDragHandler(this._element, this.accessor, this.group, this.panel, !!this.accessor.options.disableDnd);
        this.dropTarget = new _dnd_droptarget__WEBPACK_IMPORTED_MODULE_4__.Droptarget(this._element, {
            acceptedTargetZones: ['left', 'right'],
            overlayModel: { activationSize: { value: 50, type: 'percentage' } },
            canDisplayOverlay: (event, position) => {
                if (this.group.locked) {
                    return false;
                }
                const data = (0,_dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.getPanelData)();
                if (data && this.accessor.id === data.viewId) {
                    return true;
                }
                return this.group.model.canDisplayOverlay(event, position, 'tab');
            },
            getOverrideTarget: () => { var _a; return (_a = group.model.dropTargetContainer) === null || _a === void 0 ? void 0 : _a.model; },
        });
        this.onWillShowOverlay = this.dropTarget.onWillShowOverlay;
        this.addDisposables(this._onPointDown, this._onDropped, this._onDragStart, this.dragHandler.onDragStart((event) => {
            if (event.dataTransfer) {
                const style = getComputedStyle(this.element);
                const newNode = this.element.cloneNode(true);
                Array.from(style).forEach((key) => newNode.style.setProperty(key, style.getPropertyValue(key), style.getPropertyPriority(key)));
                newNode.style.position = 'absolute';
                (0,_dnd_ghost__WEBPACK_IMPORTED_MODULE_6__.addGhostImage)(event.dataTransfer, newNode, {
                    y: -10,
                    x: 30,
                });
            }
            this._onDragStart.fire(event);
        }), this.dragHandler, (0,_events__WEBPACK_IMPORTED_MODULE_0__.addDisposableListener)(this._element, 'pointerdown', (event) => {
            this._onPointDown.fire(event);
        }), this.dropTarget.onDrop((event) => {
            this._onDropped.fire(event);
        }), this.dropTarget);
    }
    setActive(isActive) {
        (0,_dom__WEBPACK_IMPORTED_MODULE_3__.toggleClass)(this.element, 'dv-active-tab', isActive);
        (0,_dom__WEBPACK_IMPORTED_MODULE_3__.toggleClass)(this.element, 'dv-inactive-tab', !isActive);
    }
    setContent(part) {
        if (this.content) {
            this._element.removeChild(this.content.element);
        }
        this.content = part;
        this._element.appendChild(this.content.element);
    }
    updateDragAndDropState() {
        this._element.draggable = !this.accessor.options.disableDnd;
        this.dragHandler.setDisabled(!!this.accessor.options.disableDnd);
    }
    dispose() {
        super.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/components/titlebar/tabOverflowControl.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/components/titlebar/tabOverflowControl.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createDropdownElementHandle: () => (/* binding */ createDropdownElementHandle)
/* harmony export */ });
/* harmony import */ var _svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../svg */ "./node_modules/dockview-core/dist/esm/svg.js");

function createDropdownElementHandle() {
    const el = document.createElement('div');
    el.className = 'dv-tabs-overflow-dropdown-default';
    const text = document.createElement('span');
    text.textContent = ``;
    const icon = (0,_svg__WEBPACK_IMPORTED_MODULE_0__.createChevronRightButton)();
    el.appendChild(icon);
    el.appendChild(text);
    return {
        element: el,
        update: (params) => {
            text.textContent = `${params.tabs}`;
        },
    };
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/components/titlebar/tabs.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/components/titlebar/tabs.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Tabs: () => (/* binding */ Tabs)
/* harmony export */ });
/* harmony import */ var _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../dnd/dataTransfer */ "./node_modules/dockview-core/dist/esm/dnd/dataTransfer.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _scrollbar__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../scrollbar */ "./node_modules/dockview-core/dist/esm/scrollbar.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../events */ "./node_modules/dockview-core/dist/esm/dockview/events.js");
/* harmony import */ var _tab_tab__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../tab/tab */ "./node_modules/dockview-core/dist/esm/dockview/components/tab/tab.js");







class Tabs extends _lifecycle__WEBPACK_IMPORTED_MODULE_3__.CompositeDisposable {
    get showTabsOverflowControl() {
        return this._showTabsOverflowControl;
    }
    set showTabsOverflowControl(value) {
        if (this._showTabsOverflowControl == value) {
            return;
        }
        this._showTabsOverflowControl = value;
        if (value) {
            const observer = new _dom__WEBPACK_IMPORTED_MODULE_1__.OverflowObserver(this._tabsList);
            this._observerDisposable.value = new _lifecycle__WEBPACK_IMPORTED_MODULE_3__.CompositeDisposable(observer, observer.onDidChange((event) => {
                const hasOverflow = event.hasScrollX || event.hasScrollY;
                this.toggleDropdown({ reset: !hasOverflow });
            }), (0,_events__WEBPACK_IMPORTED_MODULE_2__.addDisposableListener)(this._tabsList, 'scroll', () => {
                this.toggleDropdown({ reset: false });
            }));
        }
    }
    get element() {
        return this._element;
    }
    get panels() {
        return this._tabs.map((_) => _.value.panel.id);
    }
    get size() {
        return this._tabs.length;
    }
    get tabs() {
        return this._tabs.map((_) => _.value);
    }
    constructor(group, accessor, options) {
        super();
        this.group = group;
        this.accessor = accessor;
        this._observerDisposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_3__.MutableDisposable();
        this._tabs = [];
        this.selectedIndex = -1;
        this._showTabsOverflowControl = false;
        this._onTabDragStart = new _events__WEBPACK_IMPORTED_MODULE_2__.Emitter();
        this.onTabDragStart = this._onTabDragStart.event;
        this._onDrop = new _events__WEBPACK_IMPORTED_MODULE_2__.Emitter();
        this.onDrop = this._onDrop.event;
        this._onWillShowOverlay = new _events__WEBPACK_IMPORTED_MODULE_2__.Emitter();
        this.onWillShowOverlay = this._onWillShowOverlay.event;
        this._onOverflowTabsChange = new _events__WEBPACK_IMPORTED_MODULE_2__.Emitter();
        this.onOverflowTabsChange = this._onOverflowTabsChange.event;
        this._tabsList = document.createElement('div');
        this._tabsList.className = 'dv-tabs-container dv-horizontal';
        this.showTabsOverflowControl = options.showTabsOverflowControl;
        if (accessor.options.scrollbars === 'native') {
            this._element = this._tabsList;
        }
        else {
            const scrollbar = new _scrollbar__WEBPACK_IMPORTED_MODULE_4__.Scrollbar(this._tabsList);
            this._element = scrollbar.element;
            this.addDisposables(scrollbar);
        }
        this.addDisposables(this._onOverflowTabsChange, this._observerDisposable, this._onWillShowOverlay, this._onDrop, this._onTabDragStart, (0,_events__WEBPACK_IMPORTED_MODULE_2__.addDisposableListener)(this.element, 'pointerdown', (event) => {
            if (event.defaultPrevented) {
                return;
            }
            const isLeftClick = event.button === 0;
            if (isLeftClick) {
                this.accessor.doSetGroupActive(this.group);
            }
        }), _lifecycle__WEBPACK_IMPORTED_MODULE_3__.Disposable.from(() => {
            for (const { value, disposable } of this._tabs) {
                disposable.dispose();
                value.dispose();
            }
            this._tabs = [];
        }));
    }
    indexOf(id) {
        return this._tabs.findIndex((tab) => tab.value.panel.id === id);
    }
    isActive(tab) {
        return (this.selectedIndex > -1 &&
            this._tabs[this.selectedIndex].value === tab);
    }
    setActivePanel(panel) {
        let runningWidth = 0;
        for (const tab of this._tabs) {
            const isActivePanel = panel.id === tab.value.panel.id;
            tab.value.setActive(isActivePanel);
            if (isActivePanel) {
                const element = tab.value.element;
                const parentElement = element.parentElement;
                if (runningWidth < parentElement.scrollLeft ||
                    runningWidth + element.clientWidth >
                        parentElement.scrollLeft + parentElement.clientWidth) {
                    parentElement.scrollLeft = runningWidth;
                }
            }
            runningWidth += tab.value.element.clientWidth;
        }
    }
    openPanel(panel, index = this._tabs.length) {
        if (this._tabs.find((tab) => tab.value.panel.id === panel.id)) {
            return;
        }
        const tab = new _tab_tab__WEBPACK_IMPORTED_MODULE_6__.Tab(panel, this.accessor, this.group);
        tab.setContent(panel.view.tab);
        const disposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_3__.CompositeDisposable(tab.onDragStart((event) => {
            this._onTabDragStart.fire({ nativeEvent: event, panel });
        }), tab.onPointerDown((event) => {
            if (event.defaultPrevented) {
                return;
            }
            const isFloatingGroupsEnabled = !this.accessor.options.disableFloatingGroups;
            const isFloatingWithOnePanel = this.group.api.location.type === 'floating' &&
                this.size === 1;
            if (isFloatingGroupsEnabled &&
                !isFloatingWithOnePanel &&
                event.shiftKey) {
                event.preventDefault();
                const panel = this.accessor.getGroupPanel(tab.panel.id);
                const { top, left } = tab.element.getBoundingClientRect();
                const { top: rootTop, left: rootLeft } = this.accessor.element.getBoundingClientRect();
                this.accessor.addFloatingGroup(panel, {
                    x: left - rootLeft,
                    y: top - rootTop,
                    inDragMode: true,
                });
                return;
            }
            switch (event.button) {
                case 0: // left click or touch
                    if (this.group.activePanel !== panel) {
                        this.group.model.openPanel(panel);
                    }
                    break;
            }
        }), tab.onDrop((event) => {
            this._onDrop.fire({
                event: event.nativeEvent,
                index: this._tabs.findIndex((x) => x.value === tab),
            });
        }), tab.onWillShowOverlay((event) => {
            this._onWillShowOverlay.fire(new _events__WEBPACK_IMPORTED_MODULE_5__.WillShowOverlayLocationEvent(event, {
                kind: 'tab',
                panel: this.group.activePanel,
                api: this.accessor.api,
                group: this.group,
                getData: _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_0__.getPanelData,
            }));
        }));
        const value = { value: tab, disposable };
        this.addTab(value, index);
    }
    delete(id) {
        const index = this.indexOf(id);
        const tabToRemove = this._tabs.splice(index, 1)[0];
        const { value, disposable } = tabToRemove;
        disposable.dispose();
        value.dispose();
        value.element.remove();
    }
    addTab(tab, index = this._tabs.length) {
        if (index < 0 || index > this._tabs.length) {
            throw new Error('invalid location');
        }
        this._tabsList.insertBefore(tab.value.element, this._tabsList.children[index]);
        this._tabs = [
            ...this._tabs.slice(0, index),
            tab,
            ...this._tabs.slice(index),
        ];
        if (this.selectedIndex < 0) {
            this.selectedIndex = index;
        }
    }
    toggleDropdown(options) {
        const tabs = options.reset
            ? []
            : this._tabs
                .filter((tab) => !(0,_dom__WEBPACK_IMPORTED_MODULE_1__.isChildEntirelyVisibleWithinParent)(tab.value.element, this._tabsList))
                .map((x) => x.value.panel.id);
        this._onOverflowTabsChange.fire({ tabs, reset: options.reset });
    }
    updateDragAndDropState() {
        for (const tab of this._tabs) {
            tab.value.updateDragAndDropState();
        }
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/components/titlebar/tabsContainer.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/components/titlebar/tabsContainer.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TabsContainer: () => (/* binding */ TabsContainer)
/* harmony export */ });
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _voidContainer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./voidContainer */ "./node_modules/dockview-core/dist/esm/dockview/components/titlebar/voidContainer.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../events */ "./node_modules/dockview-core/dist/esm/dockview/events.js");
/* harmony import */ var _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../dnd/dataTransfer */ "./node_modules/dockview-core/dist/esm/dnd/dataTransfer.js");
/* harmony import */ var _tabs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tabs */ "./node_modules/dockview-core/dist/esm/dockview/components/titlebar/tabs.js");
/* harmony import */ var _tabOverflowControl__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./tabOverflowControl */ "./node_modules/dockview-core/dist/esm/dockview/components/titlebar/tabOverflowControl.js");








class TabsContainer extends _lifecycle__WEBPACK_IMPORTED_MODULE_0__.CompositeDisposable {
    get onTabDragStart() {
        return this.tabs.onTabDragStart;
    }
    get panels() {
        return this.tabs.panels;
    }
    get size() {
        return this.tabs.size;
    }
    get hidden() {
        return this._hidden;
    }
    set hidden(value) {
        this._hidden = value;
        this.element.style.display = value ? 'none' : '';
    }
    get element() {
        return this._element;
    }
    constructor(accessor, group) {
        super();
        this.accessor = accessor;
        this.group = group;
        this._hidden = false;
        this.dropdownPart = null;
        this._overflowTabs = [];
        this._dropdownDisposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_0__.MutableDisposable();
        this._onDrop = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDrop = this._onDrop.event;
        this._onGroupDragStart = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onGroupDragStart = this._onGroupDragStart.event;
        this._onWillShowOverlay = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onWillShowOverlay = this._onWillShowOverlay.event;
        this._element = document.createElement('div');
        this._element.className = 'dv-tabs-and-actions-container';
        (0,_dom__WEBPACK_IMPORTED_MODULE_3__.toggleClass)(this._element, 'dv-full-width-single-tab', this.accessor.options.singleTabMode === 'fullwidth');
        this.rightActionsContainer = document.createElement('div');
        this.rightActionsContainer.className = 'dv-right-actions-container';
        this.leftActionsContainer = document.createElement('div');
        this.leftActionsContainer.className = 'dv-left-actions-container';
        this.preActionsContainer = document.createElement('div');
        this.preActionsContainer.className = 'dv-pre-actions-container';
        this.tabs = new _tabs__WEBPACK_IMPORTED_MODULE_6__.Tabs(group, accessor, {
            showTabsOverflowControl: !accessor.options.disableTabsOverflowList,
        });
        this.voidContainer = new _voidContainer__WEBPACK_IMPORTED_MODULE_2__.VoidContainer(this.accessor, this.group);
        this._element.appendChild(this.preActionsContainer);
        this._element.appendChild(this.tabs.element);
        this._element.appendChild(this.leftActionsContainer);
        this._element.appendChild(this.voidContainer.element);
        this._element.appendChild(this.rightActionsContainer);
        this.addDisposables(this.tabs.onDrop((e) => this._onDrop.fire(e)), this.tabs.onWillShowOverlay((e) => this._onWillShowOverlay.fire(e)), accessor.onDidOptionsChange(() => {
            this.tabs.showTabsOverflowControl =
                !accessor.options.disableTabsOverflowList;
        }), this.tabs.onOverflowTabsChange((event) => {
            this.toggleDropdown(event);
        }), this.tabs, this._onWillShowOverlay, this._onDrop, this._onGroupDragStart, this.voidContainer, this.voidContainer.onDragStart((event) => {
            this._onGroupDragStart.fire({
                nativeEvent: event,
                group: this.group,
            });
        }), this.voidContainer.onDrop((event) => {
            this._onDrop.fire({
                event: event.nativeEvent,
                index: this.tabs.size,
            });
        }), this.voidContainer.onWillShowOverlay((event) => {
            this._onWillShowOverlay.fire(new _events__WEBPACK_IMPORTED_MODULE_4__.WillShowOverlayLocationEvent(event, {
                kind: 'header_space',
                panel: this.group.activePanel,
                api: this.accessor.api,
                group: this.group,
                getData: _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_5__.getPanelData,
            }));
        }), (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(this.voidContainer.element, 'pointerdown', (event) => {
            if (event.defaultPrevented) {
                return;
            }
            const isFloatingGroupsEnabled = !this.accessor.options.disableFloatingGroups;
            if (isFloatingGroupsEnabled &&
                event.shiftKey &&
                this.group.api.location.type !== 'floating') {
                event.preventDefault();
                const { top, left } = this.element.getBoundingClientRect();
                const { top: rootTop, left: rootLeft } = this.accessor.element.getBoundingClientRect();
                this.accessor.addFloatingGroup(this.group, {
                    x: left - rootLeft + 20,
                    y: top - rootTop + 20,
                    inDragMode: true,
                });
            }
        }));
    }
    show() {
        if (!this.hidden) {
            this.element.style.display = '';
        }
    }
    hide() {
        this._element.style.display = 'none';
    }
    setRightActionsElement(element) {
        if (this.rightActions === element) {
            return;
        }
        if (this.rightActions) {
            this.rightActions.remove();
            this.rightActions = undefined;
        }
        if (element) {
            this.rightActionsContainer.appendChild(element);
            this.rightActions = element;
        }
    }
    setLeftActionsElement(element) {
        if (this.leftActions === element) {
            return;
        }
        if (this.leftActions) {
            this.leftActions.remove();
            this.leftActions = undefined;
        }
        if (element) {
            this.leftActionsContainer.appendChild(element);
            this.leftActions = element;
        }
    }
    setPrefixActionsElement(element) {
        if (this.preActions === element) {
            return;
        }
        if (this.preActions) {
            this.preActions.remove();
            this.preActions = undefined;
        }
        if (element) {
            this.preActionsContainer.appendChild(element);
            this.preActions = element;
        }
    }
    isActive(tab) {
        return this.tabs.isActive(tab);
    }
    indexOf(id) {
        return this.tabs.indexOf(id);
    }
    setActive(_isGroupActive) {
        // noop
    }
    delete(id) {
        this.tabs.delete(id);
        this.updateClassnames();
    }
    setActivePanel(panel) {
        this.tabs.setActivePanel(panel);
    }
    openPanel(panel, index = this.tabs.size) {
        this.tabs.openPanel(panel, index);
        this.updateClassnames();
    }
    closePanel(panel) {
        this.delete(panel.id);
    }
    updateClassnames() {
        (0,_dom__WEBPACK_IMPORTED_MODULE_3__.toggleClass)(this._element, 'dv-single-tab', this.size === 1);
    }
    toggleDropdown(options) {
        const tabs = options.reset ? [] : options.tabs;
        this._overflowTabs = tabs;
        if (this._overflowTabs.length > 0 && this.dropdownPart) {
            this.dropdownPart.update({ tabs: tabs.length });
            return;
        }
        if (this._overflowTabs.length === 0) {
            this._dropdownDisposable.dispose();
            return;
        }
        const root = document.createElement('div');
        root.className = 'dv-tabs-overflow-dropdown-root';
        const part = (0,_tabOverflowControl__WEBPACK_IMPORTED_MODULE_7__.createDropdownElementHandle)();
        part.update({ tabs: tabs.length });
        this.dropdownPart = part;
        root.appendChild(part.element);
        this.rightActionsContainer.prepend(root);
        this._dropdownDisposable.value = new _lifecycle__WEBPACK_IMPORTED_MODULE_0__.CompositeDisposable(_lifecycle__WEBPACK_IMPORTED_MODULE_0__.Disposable.from(() => {
            var _a, _b;
            root.remove();
            (_b = (_a = this.dropdownPart) === null || _a === void 0 ? void 0 : _a.dispose) === null || _b === void 0 ? void 0 : _b.call(_a);
            this.dropdownPart = null;
        }), (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(root, 'pointerdown', (event) => {
            event.preventDefault();
        }, { capture: true }), (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(root, 'click', (event) => {
            const el = document.createElement('div');
            el.style.overflow = 'auto';
            el.className = 'dv-tabs-overflow-container';
            for (const tab of this.tabs.tabs.filter((tab) => this._overflowTabs.includes(tab.panel.id))) {
                const panelObject = this.group.panels.find((panel) => panel === tab.panel);
                const tabComponent = panelObject.view.createTabRenderer('headerOverflow');
                const child = tabComponent.element;
                const wrapper = document.createElement('div');
                (0,_dom__WEBPACK_IMPORTED_MODULE_3__.toggleClass)(wrapper, 'dv-tab', true);
                (0,_dom__WEBPACK_IMPORTED_MODULE_3__.toggleClass)(wrapper, 'dv-active-tab', panelObject.api.isActive);
                (0,_dom__WEBPACK_IMPORTED_MODULE_3__.toggleClass)(wrapper, 'dv-inactive-tab', !panelObject.api.isActive);
                wrapper.addEventListener('click', (event) => {
                    this.accessor.popupService.close();
                    if (event.defaultPrevented) {
                        return;
                    }
                    tab.element.scrollIntoView();
                    tab.panel.api.setActive();
                });
                wrapper.appendChild(child);
                el.appendChild(wrapper);
            }
            const relativeParent = (0,_dom__WEBPACK_IMPORTED_MODULE_3__.findRelativeZIndexParent)(root);
            this.accessor.popupService.openPopover(el, {
                x: event.clientX,
                y: event.clientY,
                zIndex: (relativeParent === null || relativeParent === void 0 ? void 0 : relativeParent.style.zIndex)
                    ? `calc(${relativeParent.style.zIndex} * 2)`
                    : undefined,
            });
        }));
    }
    updateDragAndDropState() {
        this.tabs.updateDragAndDropState();
        this.voidContainer.updateDragAndDropState();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/components/titlebar/voidContainer.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/components/titlebar/voidContainer.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VoidContainer: () => (/* binding */ VoidContainer)
/* harmony export */ });
/* harmony import */ var _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../dnd/dataTransfer */ "./node_modules/dockview-core/dist/esm/dnd/dataTransfer.js");
/* harmony import */ var _dnd_droptarget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../dnd/droptarget */ "./node_modules/dockview-core/dist/esm/dnd/droptarget.js");
/* harmony import */ var _dnd_groupDragHandler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../dnd/groupDragHandler */ "./node_modules/dockview-core/dist/esm/dnd/groupDragHandler.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../dom */ "./node_modules/dockview-core/dist/esm/dom.js");






class VoidContainer extends _lifecycle__WEBPACK_IMPORTED_MODULE_4__.CompositeDisposable {
    get element() {
        return this._element;
    }
    constructor(accessor, group) {
        super();
        this.accessor = accessor;
        this.group = group;
        this._onDrop = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onDrop = this._onDrop.event;
        this._onDragStart = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onDragStart = this._onDragStart.event;
        this._element = document.createElement('div');
        this._element.className = 'dv-void-container';
        this._element.draggable = !this.accessor.options.disableDnd;
        (0,_dom__WEBPACK_IMPORTED_MODULE_5__.toggleClass)(this._element, 'dv-draggable', !this.accessor.options.disableDnd);
        this.addDisposables(this._onDrop, this._onDragStart, (0,_events__WEBPACK_IMPORTED_MODULE_3__.addDisposableListener)(this._element, 'pointerdown', () => {
            this.accessor.doSetGroupActive(this.group);
        }));
        this.handler = new _dnd_groupDragHandler__WEBPACK_IMPORTED_MODULE_2__.GroupDragHandler(this._element, accessor, group, !!this.accessor.options.disableDnd);
        this.dropTarget = new _dnd_droptarget__WEBPACK_IMPORTED_MODULE_1__.Droptarget(this._element, {
            acceptedTargetZones: ['center'],
            canDisplayOverlay: (event, position) => {
                const data = (0,_dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_0__.getPanelData)();
                if (data && this.accessor.id === data.viewId) {
                    return true;
                }
                return group.model.canDisplayOverlay(event, position, 'header_space');
            },
            getOverrideTarget: () => { var _a; return (_a = group.model.dropTargetContainer) === null || _a === void 0 ? void 0 : _a.model; },
        });
        this.onWillShowOverlay = this.dropTarget.onWillShowOverlay;
        this.addDisposables(this.handler, this.handler.onDragStart((event) => {
            this._onDragStart.fire(event);
        }), this.dropTarget.onDrop((event) => {
            this._onDrop.fire(event);
        }), this.dropTarget);
    }
    updateDragAndDropState() {
        this._element.draggable = !this.accessor.options.disableDnd;
        (0,_dom__WEBPACK_IMPORTED_MODULE_5__.toggleClass)(this._element, 'dv-draggable', !this.accessor.options.disableDnd);
        this.handler.setDisabled(!!this.accessor.options.disableDnd);
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/components/watermark/watermark.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/components/watermark/watermark.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Watermark: () => (/* binding */ Watermark)
/* harmony export */ });
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");

class Watermark extends _lifecycle__WEBPACK_IMPORTED_MODULE_0__.CompositeDisposable {
    get element() {
        return this._element;
    }
    constructor() {
        super();
        this._element = document.createElement('div');
        this._element.className = 'dv-watermark';
    }
    init(_params) {
        // noop
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/deserializer.js":
/*!**********************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/deserializer.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DefaultDockviewDeserialzier: () => (/* binding */ DefaultDockviewDeserialzier)
/* harmony export */ });
/* harmony import */ var _dockviewPanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dockviewPanel */ "./node_modules/dockview-core/dist/esm/dockview/dockviewPanel.js");
/* harmony import */ var _dockviewPanelModel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dockviewPanelModel */ "./node_modules/dockview-core/dist/esm/dockview/dockviewPanelModel.js");
/* harmony import */ var _api_component_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../api/component.api */ "./node_modules/dockview-core/dist/esm/api/component.api.js");



class DefaultDockviewDeserialzier {
    constructor(accessor) {
        this.accessor = accessor;
    }
    fromJSON(panelData, group) {
        var _a, _b;
        const panelId = panelData.id;
        const params = panelData.params;
        const title = panelData.title;
        const viewData = panelData.view;
        const contentComponent = viewData
            ? viewData.content.id
            : (_a = panelData.contentComponent) !== null && _a !== void 0 ? _a : 'unknown';
        const tabComponent = viewData
            ? (_b = viewData.tab) === null || _b === void 0 ? void 0 : _b.id
            : panelData.tabComponent;
        const view = new _dockviewPanelModel__WEBPACK_IMPORTED_MODULE_1__.DockviewPanelModel(this.accessor, panelId, contentComponent, tabComponent);
        const panel = new _dockviewPanel__WEBPACK_IMPORTED_MODULE_0__.DockviewPanel(panelId, contentComponent, tabComponent, this.accessor, new _api_component_api__WEBPACK_IMPORTED_MODULE_2__.DockviewApi(this.accessor), group, view, {
            renderer: panelData.renderer,
            minimumWidth: panelData.minimumWidth,
            minimumHeight: panelData.minimumHeight,
            maximumWidth: panelData.maximumWidth,
            maximumHeight: panelData.maximumHeight,
        });
        panel.init({
            title: title !== null && title !== void 0 ? title : panelId,
            params: params !== null && params !== void 0 ? params : {},
        });
        return panel;
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/dockviewComponent.js":
/*!***************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/dockviewComponent.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DockviewComponent: () => (/* binding */ DockviewComponent)
/* harmony export */ });
/* harmony import */ var _gridview_gridview__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../gridview/gridview */ "./node_modules/dockview-core/dist/esm/gridview/gridview.js");
/* harmony import */ var _dnd_droptarget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dnd/droptarget */ "./node_modules/dockview-core/dist/esm/dnd/droptarget.js");
/* harmony import */ var _array__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../array */ "./node_modules/dockview-core/dist/esm/array.js");
/* harmony import */ var _dockviewPanel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dockviewPanel */ "./node_modules/dockview-core/dist/esm/dockview/dockviewPanel.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _components_watermark_watermark__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./components/watermark/watermark */ "./node_modules/dockview-core/dist/esm/dockview/components/watermark/watermark.js");
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../math */ "./node_modules/dockview-core/dist/esm/math.js");
/* harmony import */ var _deserializer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./deserializer */ "./node_modules/dockview-core/dist/esm/dockview/deserializer.js");
/* harmony import */ var _options__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./options */ "./node_modules/dockview-core/dist/esm/dockview/options.js");
/* harmony import */ var _gridview_baseComponentGridview__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../gridview/baseComponentGridview */ "./node_modules/dockview-core/dist/esm/gridview/baseComponentGridview.js");
/* harmony import */ var _api_component_api__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../api/component.api */ "./node_modules/dockview-core/dist/esm/api/component.api.js");
/* harmony import */ var _splitview_splitview__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../splitview/splitview */ "./node_modules/dockview-core/dist/esm/splitview/splitview.js");
/* harmony import */ var _dockviewGroupPanelModel__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./dockviewGroupPanelModel */ "./node_modules/dockview-core/dist/esm/dockview/dockviewGroupPanelModel.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./events */ "./node_modules/dockview-core/dist/esm/dockview/events.js");
/* harmony import */ var _dockviewGroupPanel__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./dockviewGroupPanel */ "./node_modules/dockview-core/dist/esm/dockview/dockviewGroupPanel.js");
/* harmony import */ var _dockviewPanelModel__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./dockviewPanelModel */ "./node_modules/dockview-core/dist/esm/dockview/dockviewPanelModel.js");
/* harmony import */ var _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../dnd/dataTransfer */ "./node_modules/dockview-core/dist/esm/dnd/dataTransfer.js");
/* harmony import */ var _overlay_overlay__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../overlay/overlay */ "./node_modules/dockview-core/dist/esm/overlay/overlay.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _dockviewFloatingGroupPanel__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./dockviewFloatingGroupPanel */ "./node_modules/dockview-core/dist/esm/dockview/dockviewFloatingGroupPanel.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../constants */ "./node_modules/dockview-core/dist/esm/constants.js");
/* harmony import */ var _overlay_overlayRenderContainer__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../overlay/overlayRenderContainer */ "./node_modules/dockview-core/dist/esm/overlay/overlayRenderContainer.js");
/* harmony import */ var _popoutWindow__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../popoutWindow */ "./node_modules/dockview-core/dist/esm/popoutWindow.js");
/* harmony import */ var _strictEventsSequencing__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./strictEventsSequencing */ "./node_modules/dockview-core/dist/esm/dockview/strictEventsSequencing.js");
/* harmony import */ var _components_popupService__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./components/popupService */ "./node_modules/dockview-core/dist/esm/dockview/components/popupService.js");
/* harmony import */ var _dnd_dropTargetAnchorContainer__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../dnd/dropTargetAnchorContainer */ "./node_modules/dockview-core/dist/esm/dnd/dropTargetAnchorContainer.js");
/* harmony import */ var _theme__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./theme */ "./node_modules/dockview-core/dist/esm/dockview/theme.js");




























const DEFAULT_ROOT_OVERLAY_MODEL = {
    activationSize: { type: 'pixels', value: 10 },
    size: { type: 'pixels', value: 20 },
};
function moveGroupWithoutDestroying(options) {
    const activePanel = options.from.activePanel;
    const panels = [...options.from.panels].map((panel) => {
        const removedPanel = options.from.model.removePanel(panel);
        options.from.model.renderContainer.detatch(panel);
        return removedPanel;
    });
    panels.forEach((panel) => {
        options.to.model.openPanel(panel, {
            skipSetActive: activePanel !== panel,
            skipSetGroupActive: true,
        });
    });
}
class DockviewComponent extends _gridview_baseComponentGridview__WEBPACK_IMPORTED_MODULE_10__.BaseGrid {
    get orientation() {
        return this.gridview.orientation;
    }
    get totalPanels() {
        return this.panels.length;
    }
    get panels() {
        return this.groups.flatMap((group) => group.panels);
    }
    get options() {
        return this._options;
    }
    get activePanel() {
        const activeGroup = this.activeGroup;
        if (!activeGroup) {
            return undefined;
        }
        return activeGroup.activePanel;
    }
    get renderer() {
        var _a;
        return (_a = this.options.defaultRenderer) !== null && _a !== void 0 ? _a : 'onlyWhenVisible';
    }
    get api() {
        return this._api;
    }
    get floatingGroups() {
        return this._floatingGroups;
    }
    /**
     * Promise that resolves when all popout groups from the last fromJSON call are restored.
     * Useful for tests that need to wait for delayed popout creation.
     */
    get popoutRestorationPromise() {
        return this._popoutRestorationPromise;
    }
    constructor(container, options) {
        var _a, _b, _c;
        super(container, {
            proportionalLayout: true,
            orientation: _splitview_splitview__WEBPACK_IMPORTED_MODULE_12__.Orientation.HORIZONTAL,
            styles: options.hideBorders
                ? { separatorBorder: 'transparent' }
                : undefined,
            disableAutoResizing: options.disableAutoResizing,
            locked: options.locked,
            margin: (_b = (_a = options.theme) === null || _a === void 0 ? void 0 : _a.gap) !== null && _b !== void 0 ? _b : 0,
            className: options.className,
        });
        this.nextGroupId = (0,_math__WEBPACK_IMPORTED_MODULE_7__.sequentialNumberGenerator)();
        this._deserializer = new _deserializer__WEBPACK_IMPORTED_MODULE_8__.DefaultDockviewDeserialzier(this);
        this._watermark = null;
        this._onWillDragPanel = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onWillDragPanel = this._onWillDragPanel.event;
        this._onWillDragGroup = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onWillDragGroup = this._onWillDragGroup.event;
        this._onDidDrop = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onDidDrop = this._onDidDrop.event;
        this._onWillDrop = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onWillDrop = this._onWillDrop.event;
        this._onWillShowOverlay = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onWillShowOverlay = this._onWillShowOverlay.event;
        this._onUnhandledDragOverEvent = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onUnhandledDragOverEvent = this._onUnhandledDragOverEvent.event;
        this._onDidRemovePanel = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onDidRemovePanel = this._onDidRemovePanel.event;
        this._onDidAddPanel = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onDidAddPanel = this._onDidAddPanel.event;
        this._onDidPopoutGroupSizeChange = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onDidPopoutGroupSizeChange = this._onDidPopoutGroupSizeChange.event;
        this._onDidPopoutGroupPositionChange = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onDidPopoutGroupPositionChange = this._onDidPopoutGroupPositionChange.event;
        this._onDidOpenPopoutWindowFail = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onDidOpenPopoutWindowFail = this._onDidOpenPopoutWindowFail.event;
        this._onDidLayoutFromJSON = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onDidLayoutFromJSON = this._onDidLayoutFromJSON.event;
        this._onDidActivePanelChange = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter({ replay: true });
        this.onDidActivePanelChange = this._onDidActivePanelChange.event;
        this._onDidMovePanel = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onDidMovePanel = this._onDidMovePanel.event;
        this._onDidMaximizedGroupChange = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onDidMaximizedGroupChange = this._onDidMaximizedGroupChange.event;
        this._floatingGroups = [];
        this._popoutGroups = [];
        this._popoutRestorationPromise = Promise.resolve();
        this._onDidRemoveGroup = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onDidRemoveGroup = this._onDidRemoveGroup.event;
        this._onDidAddGroup = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onDidAddGroup = this._onDidAddGroup.event;
        this._onDidOptionsChange = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onDidOptionsChange = this._onDidOptionsChange.event;
        this._onDidActiveGroupChange = new _events__WEBPACK_IMPORTED_MODULE_5__.Emitter();
        this.onDidActiveGroupChange = this._onDidActiveGroupChange.event;
        this._moving = false;
        this._options = options;
        this.popupService = new _components_popupService__WEBPACK_IMPORTED_MODULE_25__.PopupService(this.element);
        this._themeClassnames = new _dom__WEBPACK_IMPORTED_MODULE_19__.Classnames(this.element);
        this._api = new _api_component_api__WEBPACK_IMPORTED_MODULE_11__.DockviewApi(this);
        this.rootDropTargetContainer = new _dnd_dropTargetAnchorContainer__WEBPACK_IMPORTED_MODULE_26__.DropTargetAnchorContainer(this.element, { disabled: true });
        this.overlayRenderContainer = new _overlay_overlayRenderContainer__WEBPACK_IMPORTED_MODULE_22__.OverlayRenderContainer(this.gridview.element, this);
        this._rootDropTarget = new _dnd_droptarget__WEBPACK_IMPORTED_MODULE_1__.Droptarget(this.element, {
            className: 'dv-drop-target-edge',
            canDisplayOverlay: (event, position) => {
                const data = (0,_dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_17__.getPanelData)();
                if (data) {
                    if (data.viewId !== this.id) {
                        return false;
                    }
                    if (position === 'center') {
                        // center drop target is only allowed if there are no panels in the grid
                        // floating panels are allowed
                        return this.gridview.length === 0;
                    }
                    return true;
                }
                if (position === 'center' && this.gridview.length !== 0) {
                    /**
                     * for external events only show the four-corner drag overlays, disable
                     * the center position so that external drag events can fall through to the group
                     * and panel drop target handlers
                     */
                    return false;
                }
                const firedEvent = new _options__WEBPACK_IMPORTED_MODULE_9__.DockviewUnhandledDragOverEvent(event, 'edge', position, _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_17__.getPanelData);
                this._onUnhandledDragOverEvent.fire(firedEvent);
                return firedEvent.isAccepted;
            },
            acceptedTargetZones: ['top', 'bottom', 'left', 'right', 'center'],
            overlayModel: (_c = options.rootOverlayModel) !== null && _c !== void 0 ? _c : DEFAULT_ROOT_OVERLAY_MODEL,
            getOverrideTarget: () => { var _a; return (_a = this.rootDropTargetContainer) === null || _a === void 0 ? void 0 : _a.model; },
        });
        this.updateDropTargetModel(options);
        (0,_dom__WEBPACK_IMPORTED_MODULE_19__.toggleClass)(this.gridview.element, 'dv-dockview', true);
        (0,_dom__WEBPACK_IMPORTED_MODULE_19__.toggleClass)(this.element, 'dv-debug', !!options.debug);
        this.updateTheme();
        this.updateWatermark();
        if (options.debug) {
            this.addDisposables(new _strictEventsSequencing__WEBPACK_IMPORTED_MODULE_24__.StrictEventsSequencing(this));
        }
        this.addDisposables(this.rootDropTargetContainer, this.overlayRenderContainer, this._onWillDragPanel, this._onWillDragGroup, this._onWillShowOverlay, this._onDidActivePanelChange, this._onDidAddPanel, this._onDidRemovePanel, this._onDidLayoutFromJSON, this._onDidDrop, this._onWillDrop, this._onDidMovePanel, this._onDidAddGroup, this._onDidRemoveGroup, this._onDidActiveGroupChange, this._onUnhandledDragOverEvent, this._onDidMaximizedGroupChange, this._onDidOptionsChange, this._onDidPopoutGroupSizeChange, this._onDidPopoutGroupPositionChange, this._onDidOpenPopoutWindowFail, this.onDidViewVisibilityChangeMicroTaskQueue(() => {
            this.updateWatermark();
        }), this.onDidAdd((event) => {
            if (!this._moving) {
                this._onDidAddGroup.fire(event);
            }
        }), this.onDidRemove((event) => {
            if (!this._moving) {
                this._onDidRemoveGroup.fire(event);
            }
        }), this.onDidActiveChange((event) => {
            if (!this._moving) {
                this._onDidActiveGroupChange.fire(event);
            }
        }), this.onDidMaximizedChange((event) => {
            this._onDidMaximizedGroupChange.fire({
                group: event.panel,
                isMaximized: event.isMaximized,
            });
        }), _events__WEBPACK_IMPORTED_MODULE_5__.Event.any(this.onDidAdd, this.onDidRemove)(() => {
            this.updateWatermark();
        }), _events__WEBPACK_IMPORTED_MODULE_5__.Event.any(this.onDidAddPanel, this.onDidRemovePanel, this.onDidAddGroup, this.onDidRemove, this.onDidMovePanel, this.onDidActivePanelChange, this.onDidPopoutGroupPositionChange, this.onDidPopoutGroupSizeChange)(() => {
            this._bufferOnDidLayoutChange.fire();
        }), _lifecycle__WEBPACK_IMPORTED_MODULE_4__.Disposable.from(() => {
            // iterate over a copy of the array since .dispose() mutates the original array
            for (const group of [...this._floatingGroups]) {
                group.dispose();
            }
            // iterate over a copy of the array since .dispose() mutates the original array
            for (const group of [...this._popoutGroups]) {
                group.disposable.dispose();
            }
        }), this._rootDropTarget, this._rootDropTarget.onWillShowOverlay((event) => {
            if (this.gridview.length > 0 && event.position === 'center') {
                // option only available when no panels in primary grid
                return;
            }
            this._onWillShowOverlay.fire(new _events__WEBPACK_IMPORTED_MODULE_14__.WillShowOverlayLocationEvent(event, {
                kind: 'edge',
                panel: undefined,
                api: this._api,
                group: undefined,
                getData: _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_17__.getPanelData,
            }));
        }), this._rootDropTarget.onDrop((event) => {
            var _a;
            const willDropEvent = new _dockviewGroupPanelModel__WEBPACK_IMPORTED_MODULE_13__.DockviewWillDropEvent({
                nativeEvent: event.nativeEvent,
                position: event.position,
                panel: undefined,
                api: this._api,
                group: undefined,
                getData: _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_17__.getPanelData,
                kind: 'edge',
            });
            this._onWillDrop.fire(willDropEvent);
            if (willDropEvent.defaultPrevented) {
                return;
            }
            const data = (0,_dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_17__.getPanelData)();
            if (data) {
                this.moveGroupOrPanel({
                    from: {
                        groupId: data.groupId,
                        panelId: (_a = data.panelId) !== null && _a !== void 0 ? _a : undefined,
                    },
                    to: {
                        group: this.orthogonalize(event.position),
                        position: 'center',
                    },
                });
            }
            else {
                this._onDidDrop.fire(new _dockviewGroupPanelModel__WEBPACK_IMPORTED_MODULE_13__.DockviewDidDropEvent({
                    nativeEvent: event.nativeEvent,
                    position: event.position,
                    panel: undefined,
                    api: this._api,
                    group: undefined,
                    getData: _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_17__.getPanelData,
                }));
            }
        }), this._rootDropTarget);
    }
    setVisible(panel, visible) {
        switch (panel.api.location.type) {
            case 'grid':
                super.setVisible(panel, visible);
                break;
            case 'floating': {
                const item = this.floatingGroups.find((floatingGroup) => floatingGroup.group === panel);
                if (item) {
                    item.overlay.setVisible(visible);
                    panel.api._onDidVisibilityChange.fire({
                        isVisible: visible,
                    });
                }
                break;
            }
            case 'popout':
                console.warn('dockview: You cannot hide a group that is in a popout window');
                break;
        }
    }
    addPopoutGroup(itemToPopout, options) {
        var _a, _b, _c, _d, _e;
        if (itemToPopout instanceof _dockviewPanel__WEBPACK_IMPORTED_MODULE_3__.DockviewPanel &&
            itemToPopout.group.size === 1) {
            return this.addPopoutGroup(itemToPopout.group, options);
        }
        const theme = (0,_dom__WEBPACK_IMPORTED_MODULE_19__.getDockviewTheme)(this.gridview.element);
        const element = this.element;
        function getBox() {
            if (options === null || options === void 0 ? void 0 : options.position) {
                return options.position;
            }
            if (itemToPopout instanceof _dockviewGroupPanel__WEBPACK_IMPORTED_MODULE_15__.DockviewGroupPanel) {
                return itemToPopout.element.getBoundingClientRect();
            }
            if (itemToPopout.group) {
                return itemToPopout.group.element.getBoundingClientRect();
            }
            return element.getBoundingClientRect();
        }
        const box = getBox();
        const groupId = (_b = (_a = options === null || options === void 0 ? void 0 : options.overridePopoutGroup) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : this.getNextGroupId();
        const _window = new _popoutWindow__WEBPACK_IMPORTED_MODULE_23__.PopoutWindow(`${this.id}-${groupId}`, // unique id
        theme !== null && theme !== void 0 ? theme : '', {
            url: (_e = (_c = options === null || options === void 0 ? void 0 : options.popoutUrl) !== null && _c !== void 0 ? _c : (_d = this.options) === null || _d === void 0 ? void 0 : _d.popoutUrl) !== null && _e !== void 0 ? _e : '/popout.html',
            left: window.screenX + box.left,
            top: window.screenY + box.top,
            width: box.width,
            height: box.height,
            onDidOpen: options === null || options === void 0 ? void 0 : options.onDidOpen,
            onWillClose: options === null || options === void 0 ? void 0 : options.onWillClose,
        });
        const popoutWindowDisposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_4__.CompositeDisposable(_window, _window.onDidClose(() => {
            popoutWindowDisposable.dispose();
        }));
        return _window
            .open()
            .then((popoutContainer) => {
            var _a;
            if (_window.isDisposed) {
                return false;
            }
            const referenceGroup = (options === null || options === void 0 ? void 0 : options.referenceGroup)
                ? options.referenceGroup
                : itemToPopout instanceof _dockviewPanel__WEBPACK_IMPORTED_MODULE_3__.DockviewPanel
                    ? itemToPopout.group
                    : itemToPopout;
            const referenceLocation = itemToPopout.api.location.type;
            /**
             * The group that is being added doesn't already exist within the DOM, the most likely occurrence
             * of this case is when being called from the `fromJSON(...)` method
             */
            const isGroupAddedToDom = referenceGroup.element.parentElement !== null;
            let group;
            if (!isGroupAddedToDom) {
                group = referenceGroup;
            }
            else if (options === null || options === void 0 ? void 0 : options.overridePopoutGroup) {
                group = options.overridePopoutGroup;
            }
            else {
                group = this.createGroup({ id: groupId });
                if (popoutContainer) {
                    this._onDidAddGroup.fire(group);
                }
            }
            if (popoutContainer === null) {
                console.error('dockview: failed to create popout. perhaps you need to allow pop-ups for this website');
                popoutWindowDisposable.dispose();
                this._onDidOpenPopoutWindowFail.fire();
                // if the popout window was blocked, we need to move the group back to the reference group
                // and set it to visible
                this.movingLock(() => moveGroupWithoutDestroying({
                    from: group,
                    to: referenceGroup,
                }));
                if (!referenceGroup.api.isVisible) {
                    referenceGroup.api.setVisible(true);
                }
                return false;
            }
            const gready = document.createElement('div');
            gready.className = 'dv-overlay-render-container';
            const overlayRenderContainer = new _overlay_overlayRenderContainer__WEBPACK_IMPORTED_MODULE_22__.OverlayRenderContainer(gready, this);
            group.model.renderContainer = overlayRenderContainer;
            group.layout(_window.window.innerWidth, _window.window.innerHeight);
            let floatingBox;
            if (!(options === null || options === void 0 ? void 0 : options.overridePopoutGroup) && isGroupAddedToDom) {
                if (itemToPopout instanceof _dockviewPanel__WEBPACK_IMPORTED_MODULE_3__.DockviewPanel) {
                    this.movingLock(() => {
                        const panel = referenceGroup.model.removePanel(itemToPopout);
                        group.model.openPanel(panel);
                    });
                }
                else {
                    this.movingLock(() => moveGroupWithoutDestroying({
                        from: referenceGroup,
                        to: group,
                    }));
                    switch (referenceLocation) {
                        case 'grid':
                            referenceGroup.api.setVisible(false);
                            break;
                        case 'floating':
                        case 'popout':
                            floatingBox = (_a = this._floatingGroups
                                .find((value) => value.group.api.id ===
                                itemToPopout.api.id)) === null || _a === void 0 ? void 0 : _a.overlay.toJSON();
                            this.removeGroup(referenceGroup);
                            break;
                    }
                }
            }
            popoutContainer.classList.add('dv-dockview');
            popoutContainer.style.overflow = 'hidden';
            popoutContainer.appendChild(gready);
            popoutContainer.appendChild(group.element);
            const anchor = document.createElement('div');
            const dropTargetContainer = new _dnd_dropTargetAnchorContainer__WEBPACK_IMPORTED_MODULE_26__.DropTargetAnchorContainer(anchor, { disabled: this.rootDropTargetContainer.disabled });
            popoutContainer.appendChild(anchor);
            group.model.dropTargetContainer = dropTargetContainer;
            group.model.location = {
                type: 'popout',
                getWindow: () => _window.window,
                popoutUrl: options === null || options === void 0 ? void 0 : options.popoutUrl,
            };
            if (isGroupAddedToDom &&
                itemToPopout.api.location.type === 'grid') {
                itemToPopout.api.setVisible(false);
            }
            this.doSetGroupAndPanelActive(group);
            popoutWindowDisposable.addDisposables(group.api.onDidActiveChange((event) => {
                var _a;
                if (event.isActive) {
                    (_a = _window.window) === null || _a === void 0 ? void 0 : _a.focus();
                }
            }), group.api.onWillFocus(() => {
                var _a;
                (_a = _window.window) === null || _a === void 0 ? void 0 : _a.focus();
            }));
            let returnedGroup;
            const isValidReferenceGroup = isGroupAddedToDom &&
                referenceGroup &&
                this.getPanel(referenceGroup.id);
            const value = {
                window: _window,
                popoutGroup: group,
                referenceGroup: isValidReferenceGroup
                    ? referenceGroup.id
                    : undefined,
                disposable: {
                    dispose: () => {
                        popoutWindowDisposable.dispose();
                        return returnedGroup;
                    },
                },
            };
            const _onDidWindowPositionChange = (0,_dom__WEBPACK_IMPORTED_MODULE_19__.onDidWindowMoveEnd)(_window.window);
            popoutWindowDisposable.addDisposables(_onDidWindowPositionChange, (0,_dom__WEBPACK_IMPORTED_MODULE_19__.onDidWindowResizeEnd)(_window.window, () => {
                this._onDidPopoutGroupSizeChange.fire({
                    width: _window.window.innerWidth,
                    height: _window.window.innerHeight,
                    group,
                });
            }), _onDidWindowPositionChange.event(() => {
                this._onDidPopoutGroupPositionChange.fire({
                    screenX: _window.window.screenX,
                    screenY: _window.window.screenX,
                    group,
                });
            }), 
            /**
             * ResizeObserver seems slow here, I do not know why but we don't need it
             * since we can reply on the window resize event as we will occupy the full
             * window dimensions
             */
            (0,_events__WEBPACK_IMPORTED_MODULE_5__.addDisposableListener)(_window.window, 'resize', () => {
                group.layout(_window.window.innerWidth, _window.window.innerHeight);
            }), overlayRenderContainer, _lifecycle__WEBPACK_IMPORTED_MODULE_4__.Disposable.from(() => {
                if (this.isDisposed) {
                    return; // cleanup may run after instance is disposed
                }
                if (isGroupAddedToDom &&
                    this.getPanel(referenceGroup.id)) {
                    this.movingLock(() => moveGroupWithoutDestroying({
                        from: group,
                        to: referenceGroup,
                    }));
                    if (!referenceGroup.api.isVisible) {
                        referenceGroup.api.setVisible(true);
                    }
                    if (this.getPanel(group.id)) {
                        this.doRemoveGroup(group, {
                            skipPopoutAssociated: true,
                        });
                    }
                }
                else if (this.getPanel(group.id)) {
                    group.model.renderContainer =
                        this.overlayRenderContainer;
                    group.model.dropTargetContainer =
                        this.rootDropTargetContainer;
                    returnedGroup = group;
                    const alreadyRemoved = !this._popoutGroups.find((p) => p.popoutGroup === group);
                    if (alreadyRemoved) {
                        /**
                         * If this popout group was explicitly removed then we shouldn't run the additional
                         * steps. To tell if the running of this disposable is the result of this popout group
                         * being explicitly removed we can check if this popout group is still referenced in
                         * the `this._popoutGroups` list.
                         */
                        return;
                    }
                    if (floatingBox) {
                        this.addFloatingGroup(group, {
                            height: floatingBox.height,
                            width: floatingBox.width,
                            position: floatingBox,
                        });
                    }
                    else {
                        this.doRemoveGroup(group, {
                            skipDispose: true,
                            skipActive: true,
                            skipPopoutReturn: true,
                        });
                        group.model.location = { type: 'grid' };
                        this.movingLock(() => {
                            // suppress group add events since the group already exists
                            this.doAddGroup(group, [0]);
                        });
                    }
                    this.doSetGroupAndPanelActive(group);
                }
            }));
            this._popoutGroups.push(value);
            this.updateWatermark();
            return true;
        })
            .catch((err) => {
            console.error('dockview: failed to create popout.', err);
            return false;
        });
    }
    addFloatingGroup(item, options) {
        var _a, _b, _c, _d, _e;
        let group;
        if (item instanceof _dockviewPanel__WEBPACK_IMPORTED_MODULE_3__.DockviewPanel) {
            group = this.createGroup();
            this._onDidAddGroup.fire(group);
            this.movingLock(() => this.removePanel(item, {
                removeEmptyGroup: true,
                skipDispose: true,
                skipSetActiveGroup: true,
            }));
            this.movingLock(() => group.model.openPanel(item, { skipSetGroupActive: true }));
        }
        else {
            group = item;
            const popoutReferenceGroupId = (_a = this._popoutGroups.find((_) => _.popoutGroup === group)) === null || _a === void 0 ? void 0 : _a.referenceGroup;
            const popoutReferenceGroup = popoutReferenceGroupId
                ? this.getPanel(popoutReferenceGroupId)
                : undefined;
            const skip = typeof (options === null || options === void 0 ? void 0 : options.skipRemoveGroup) === 'boolean' &&
                options.skipRemoveGroup;
            if (!skip) {
                if (popoutReferenceGroup) {
                    this.movingLock(() => moveGroupWithoutDestroying({
                        from: item,
                        to: popoutReferenceGroup,
                    }));
                    this.doRemoveGroup(item, {
                        skipPopoutReturn: true,
                        skipPopoutAssociated: true,
                    });
                    this.doRemoveGroup(popoutReferenceGroup, {
                        skipDispose: true,
                    });
                    group = popoutReferenceGroup;
                }
                else {
                    this.doRemoveGroup(item, {
                        skipDispose: true,
                        skipPopoutReturn: true,
                        skipPopoutAssociated: false,
                    });
                }
            }
        }
        function getAnchoredBox() {
            if (options === null || options === void 0 ? void 0 : options.position) {
                const result = {};
                if ('left' in options.position) {
                    result.left = Math.max(options.position.left, 0);
                }
                else if ('right' in options.position) {
                    result.right = Math.max(options.position.right, 0);
                }
                else {
                    result.left = _constants__WEBPACK_IMPORTED_MODULE_21__.DEFAULT_FLOATING_GROUP_POSITION.left;
                }
                if ('top' in options.position) {
                    result.top = Math.max(options.position.top, 0);
                }
                else if ('bottom' in options.position) {
                    result.bottom = Math.max(options.position.bottom, 0);
                }
                else {
                    result.top = _constants__WEBPACK_IMPORTED_MODULE_21__.DEFAULT_FLOATING_GROUP_POSITION.top;
                }
                if (typeof options.width === 'number') {
                    result.width = Math.max(options.width, 0);
                }
                else {
                    result.width = _constants__WEBPACK_IMPORTED_MODULE_21__.DEFAULT_FLOATING_GROUP_POSITION.width;
                }
                if (typeof options.height === 'number') {
                    result.height = Math.max(options.height, 0);
                }
                else {
                    result.height = _constants__WEBPACK_IMPORTED_MODULE_21__.DEFAULT_FLOATING_GROUP_POSITION.height;
                }
                return result;
            }
            return {
                left: typeof (options === null || options === void 0 ? void 0 : options.x) === 'number'
                    ? Math.max(options.x, 0)
                    : _constants__WEBPACK_IMPORTED_MODULE_21__.DEFAULT_FLOATING_GROUP_POSITION.left,
                top: typeof (options === null || options === void 0 ? void 0 : options.y) === 'number'
                    ? Math.max(options.y, 0)
                    : _constants__WEBPACK_IMPORTED_MODULE_21__.DEFAULT_FLOATING_GROUP_POSITION.top,
                width: typeof (options === null || options === void 0 ? void 0 : options.width) === 'number'
                    ? Math.max(options.width, 0)
                    : _constants__WEBPACK_IMPORTED_MODULE_21__.DEFAULT_FLOATING_GROUP_POSITION.width,
                height: typeof (options === null || options === void 0 ? void 0 : options.height) === 'number'
                    ? Math.max(options.height, 0)
                    : _constants__WEBPACK_IMPORTED_MODULE_21__.DEFAULT_FLOATING_GROUP_POSITION.height,
            };
        }
        const anchoredBox = getAnchoredBox();
        const overlay = new _overlay_overlay__WEBPACK_IMPORTED_MODULE_18__.Overlay(Object.assign(Object.assign({ container: this.gridview.element, content: group.element }, anchoredBox), { minimumInViewportWidth: this.options.floatingGroupBounds === 'boundedWithinViewport'
                ? undefined
                : (_c = (_b = this.options.floatingGroupBounds) === null || _b === void 0 ? void 0 : _b.minimumWidthWithinViewport) !== null && _c !== void 0 ? _c : _constants__WEBPACK_IMPORTED_MODULE_21__.DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE, minimumInViewportHeight: this.options.floatingGroupBounds === 'boundedWithinViewport'
                ? undefined
                : (_e = (_d = this.options.floatingGroupBounds) === null || _d === void 0 ? void 0 : _d.minimumHeightWithinViewport) !== null && _e !== void 0 ? _e : _constants__WEBPACK_IMPORTED_MODULE_21__.DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE }));
        const el = group.element.querySelector('.dv-void-container');
        if (!el) {
            throw new Error('failed to find drag handle');
        }
        overlay.setupDrag(el, {
            inDragMode: typeof (options === null || options === void 0 ? void 0 : options.inDragMode) === 'boolean'
                ? options.inDragMode
                : false,
        });
        const floatingGroupPanel = new _dockviewFloatingGroupPanel__WEBPACK_IMPORTED_MODULE_20__.DockviewFloatingGroupPanel(group, overlay);
        const disposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_4__.CompositeDisposable(group.api.onDidActiveChange((event) => {
            if (event.isActive) {
                overlay.bringToFront();
            }
        }), (0,_dom__WEBPACK_IMPORTED_MODULE_19__.watchElementResize)(group.element, (entry) => {
            const { width, height } = entry.contentRect;
            group.layout(width, height); // let the group know it's size is changing so it can fire events to the panel
        }));
        floatingGroupPanel.addDisposables(overlay.onDidChange(() => {
            // this is either a resize or a move
            // to inform the panels .layout(...) the group with it's current size
            // don't care about resize since the above watcher handles that
            group.layout(group.width, group.height);
        }), overlay.onDidChangeEnd(() => {
            this._bufferOnDidLayoutChange.fire();
        }), group.onDidChange((event) => {
            overlay.setBounds({
                height: event === null || event === void 0 ? void 0 : event.height,
                width: event === null || event === void 0 ? void 0 : event.width,
            });
        }), {
            dispose: () => {
                disposable.dispose();
                (0,_array__WEBPACK_IMPORTED_MODULE_2__.remove)(this._floatingGroups, floatingGroupPanel);
                group.model.location = { type: 'grid' };
                this.updateWatermark();
            },
        });
        this._floatingGroups.push(floatingGroupPanel);
        group.model.location = { type: 'floating' };
        if (!(options === null || options === void 0 ? void 0 : options.skipActiveGroup)) {
            this.doSetGroupAndPanelActive(group);
        }
        this.updateWatermark();
    }
    orthogonalize(position, options) {
        this.gridview.normalize();
        switch (position) {
            case 'top':
            case 'bottom':
                if (this.gridview.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_12__.Orientation.HORIZONTAL) {
                    // we need to add to a vertical splitview but the current root is a horizontal splitview.
                    // insert a vertical splitview at the root level and add the existing view as a child
                    this.gridview.insertOrthogonalSplitviewAtRoot();
                }
                break;
            case 'left':
            case 'right':
                if (this.gridview.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_12__.Orientation.VERTICAL) {
                    // we need to add to a horizontal splitview but the current root is a vertical splitview.
                    // insert a horiziontal splitview at the root level and add the existing view as a child
                    this.gridview.insertOrthogonalSplitviewAtRoot();
                }
                break;
            default:
                break;
        }
        switch (position) {
            case 'top':
            case 'left':
            case 'center':
                return this.createGroupAtLocation([0], undefined, options); // insert into first position
            case 'bottom':
            case 'right':
                return this.createGroupAtLocation([this.gridview.length], undefined, options); // insert into last position
            default:
                throw new Error(`unsupported position ${position}`);
        }
    }
    updateOptions(options) {
        var _a, _b;
        super.updateOptions(options);
        if ('floatingGroupBounds' in options) {
            for (const group of this._floatingGroups) {
                switch (options.floatingGroupBounds) {
                    case 'boundedWithinViewport':
                        group.overlay.minimumInViewportHeight = undefined;
                        group.overlay.minimumInViewportWidth = undefined;
                        break;
                    case undefined:
                        group.overlay.minimumInViewportHeight =
                            _constants__WEBPACK_IMPORTED_MODULE_21__.DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE;
                        group.overlay.minimumInViewportWidth =
                            _constants__WEBPACK_IMPORTED_MODULE_21__.DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE;
                        break;
                    default:
                        group.overlay.minimumInViewportHeight =
                            (_a = options.floatingGroupBounds) === null || _a === void 0 ? void 0 : _a.minimumHeightWithinViewport;
                        group.overlay.minimumInViewportWidth =
                            (_b = options.floatingGroupBounds) === null || _b === void 0 ? void 0 : _b.minimumWidthWithinViewport;
                }
                group.overlay.setBounds();
            }
        }
        this.updateDropTargetModel(options);
        const oldDisableDnd = this.options.disableDnd;
        this._options = Object.assign(Object.assign({}, this.options), options);
        const newDisableDnd = this.options.disableDnd;
        if (oldDisableDnd !== newDisableDnd) {
            this.updateDragAndDropState();
        }
        if ('theme' in options) {
            this.updateTheme();
        }
        this.layout(this.gridview.width, this.gridview.height, true);
    }
    layout(width, height, forceResize) {
        super.layout(width, height, forceResize);
        if (this._floatingGroups) {
            for (const floating of this._floatingGroups) {
                // ensure floting groups stay within visible boundaries
                floating.overlay.setBounds();
            }
        }
    }
    updateDragAndDropState() {
        // Update draggable state for all tabs and void containers
        for (const group of this.groups) {
            group.model.updateDragAndDropState();
        }
    }
    focus() {
        var _a;
        (_a = this.activeGroup) === null || _a === void 0 ? void 0 : _a.focus();
    }
    getGroupPanel(id) {
        return this.panels.find((panel) => panel.id === id);
    }
    setActivePanel(panel) {
        panel.group.model.openPanel(panel);
        this.doSetGroupAndPanelActive(panel.group);
    }
    moveToNext(options = {}) {
        var _a;
        if (!options.group) {
            if (!this.activeGroup) {
                return;
            }
            options.group = this.activeGroup;
        }
        if (options.includePanel && options.group) {
            if (options.group.activePanel !==
                options.group.panels[options.group.panels.length - 1]) {
                options.group.model.moveToNext({ suppressRoll: true });
                return;
            }
        }
        const location = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(options.group.element);
        const next = (_a = this.gridview.next(location)) === null || _a === void 0 ? void 0 : _a.view;
        this.doSetGroupAndPanelActive(next);
    }
    moveToPrevious(options = {}) {
        var _a;
        if (!options.group) {
            if (!this.activeGroup) {
                return;
            }
            options.group = this.activeGroup;
        }
        if (options.includePanel && options.group) {
            if (options.group.activePanel !== options.group.panels[0]) {
                options.group.model.moveToPrevious({ suppressRoll: true });
                return;
            }
        }
        const location = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(options.group.element);
        const next = (_a = this.gridview.previous(location)) === null || _a === void 0 ? void 0 : _a.view;
        if (next) {
            this.doSetGroupAndPanelActive(next);
        }
    }
    /**
     * Serialize the current state of the layout
     *
     * @returns A JSON respresentation of the layout
     */
    toJSON() {
        var _a;
        const data = this.gridview.serialize();
        const panels = this.panels.reduce((collection, panel) => {
            collection[panel.id] = panel.toJSON();
            return collection;
        }, {});
        const floats = this._floatingGroups.map((group) => {
            return {
                data: group.group.toJSON(),
                position: group.overlay.toJSON(),
            };
        });
        const popoutGroups = this._popoutGroups.map((group) => {
            return {
                data: group.popoutGroup.toJSON(),
                gridReferenceGroup: group.referenceGroup,
                position: group.window.dimensions(),
                url: group.popoutGroup.api.location.type === 'popout'
                    ? group.popoutGroup.api.location.popoutUrl
                    : undefined,
            };
        });
        const result = {
            grid: data,
            panels,
            activeGroup: (_a = this.activeGroup) === null || _a === void 0 ? void 0 : _a.id,
        };
        if (floats.length > 0) {
            result.floatingGroups = floats;
        }
        if (popoutGroups.length > 0) {
            result.popoutGroups = popoutGroups;
        }
        return result;
    }
    fromJSON(data) {
        var _a, _b;
        this.clear();
        if (typeof data !== 'object' || data === null) {
            throw new Error('serialized layout must be a non-null object');
        }
        const { grid, panels, activeGroup } = data;
        if (grid.root.type !== 'branch' || !Array.isArray(grid.root.data)) {
            throw new Error('root must be of type branch');
        }
        try {
            // take note of the existing dimensions
            const width = this.width;
            const height = this.height;
            const createGroupFromSerializedState = (data) => {
                const { id, locked, hideHeader, views, activeView } = data;
                if (typeof id !== 'string') {
                    throw new Error('group id must be of type string');
                }
                const group = this.createGroup({
                    id,
                    locked: !!locked,
                    hideHeader: !!hideHeader,
                });
                this._onDidAddGroup.fire(group);
                const createdPanels = [];
                for (const child of views) {
                    /**
                     * Run the deserializer step seperately since this may fail to due corrupted external state.
                     * In running this section first we avoid firing lots of 'add' events in the event of a failure
                     * due to a corruption of input data.
                     */
                    const panel = this._deserializer.fromJSON(panels[child], group);
                    createdPanels.push(panel);
                }
                for (let i = 0; i < views.length; i++) {
                    const panel = createdPanels[i];
                    const isActive = typeof activeView === 'string' &&
                        activeView === panel.id;
                    group.model.openPanel(panel, {
                        skipSetActive: !isActive,
                        skipSetGroupActive: true,
                    });
                }
                if (!group.activePanel && group.panels.length > 0) {
                    group.model.openPanel(group.panels[group.panels.length - 1], {
                        skipSetGroupActive: true,
                    });
                }
                return group;
            };
            this.gridview.deserialize(grid, {
                fromJSON: (node) => {
                    return createGroupFromSerializedState(node.data);
                },
            });
            this.layout(width, height, true);
            const serializedFloatingGroups = (_a = data.floatingGroups) !== null && _a !== void 0 ? _a : [];
            for (const serializedFloatingGroup of serializedFloatingGroups) {
                const { data, position } = serializedFloatingGroup;
                const group = createGroupFromSerializedState(data);
                this.addFloatingGroup(group, {
                    position: position,
                    width: position.width,
                    height: position.height,
                    skipRemoveGroup: true,
                    inDragMode: false,
                });
            }
            const serializedPopoutGroups = (_b = data.popoutGroups) !== null && _b !== void 0 ? _b : [];
            // Create a promise that resolves when all popout groups are created
            const popoutPromises = [];
            // Queue popup group creation with delays to avoid browser blocking
            serializedPopoutGroups.forEach((serializedPopoutGroup, index) => {
                const { data, position, gridReferenceGroup, url } = serializedPopoutGroup;
                const group = createGroupFromSerializedState(data);
                // Add a small delay for each popup after the first to avoid browser popup blocking
                const popoutPromise = new Promise((resolve) => {
                    setTimeout(() => {
                        this.addPopoutGroup(group, {
                            position: position !== null && position !== void 0 ? position : undefined,
                            overridePopoutGroup: gridReferenceGroup ? group : undefined,
                            referenceGroup: gridReferenceGroup
                                ? this.getPanel(gridReferenceGroup)
                                : undefined,
                            popoutUrl: url,
                        });
                        resolve();
                    }, index * _constants__WEBPACK_IMPORTED_MODULE_21__.DESERIALIZATION_POPOUT_DELAY_MS); // 100ms delay between each popup
                });
                popoutPromises.push(popoutPromise);
            });
            // Store the promise for tests to wait on
            this._popoutRestorationPromise = Promise.all(popoutPromises).then(() => void 0);
            for (const floatingGroup of this._floatingGroups) {
                floatingGroup.overlay.setBounds();
            }
            if (typeof activeGroup === 'string') {
                const panel = this.getPanel(activeGroup);
                if (panel) {
                    this.doSetGroupAndPanelActive(panel);
                }
            }
        }
        catch (err) {
            console.error('dockview: failed to deserialize layout. Reverting changes', err);
            /**
             * Takes all the successfully created groups and remove all of their panels.
             */
            for (const group of this.groups) {
                for (const panel of group.panels) {
                    this.removePanel(panel, {
                        removeEmptyGroup: false,
                        skipDispose: false,
                    });
                }
            }
            /**
             * To remove a group we cannot call this.removeGroup(...) since this makes assumptions about
             * the underlying HTMLElement existing in the Gridview.
             */
            for (const group of this.groups) {
                group.dispose();
                this._groups.delete(group.id);
                this._onDidRemoveGroup.fire(group);
            }
            // iterate over a reassigned array since original array will be modified
            for (const floatingGroup of [...this._floatingGroups]) {
                floatingGroup.dispose();
            }
            // fires clean-up events and clears the underlying HTML gridview.
            this.clear();
            /**
             * even though we have cleaned-up we still want to inform the caller of their error
             * and we'll do this through re-throwing the original error since afterall you would
             * expect trying to load a corrupted layout to result in an error and not silently fail...
             */
            throw err;
        }
        this.updateWatermark();
        // Force position updates for always visible panels after DOM layout is complete
        requestAnimationFrame(() => {
            this.overlayRenderContainer.updateAllPositions();
        });
        this._onDidLayoutFromJSON.fire();
    }
    clear() {
        const groups = Array.from(this._groups.values()).map((_) => _.value);
        const hasActiveGroup = !!this.activeGroup;
        for (const group of groups) {
            // remove the group will automatically remove the panels
            this.removeGroup(group, { skipActive: true });
        }
        if (hasActiveGroup) {
            this.doSetGroupAndPanelActive(undefined);
        }
        this.gridview.clear();
    }
    closeAllGroups() {
        for (const entry of this._groups.entries()) {
            const [_, group] = entry;
            group.value.model.closeAllPanels();
        }
    }
    addPanel(options) {
        var _a, _b;
        if (this.panels.find((_) => _.id === options.id)) {
            throw new Error(`panel with id ${options.id} already exists`);
        }
        let referenceGroup;
        if (options.position && options.floating) {
            throw new Error('you can only provide one of: position, floating as arguments to .addPanel(...)');
        }
        const initial = {
            width: options.initialWidth,
            height: options.initialHeight,
        };
        let index;
        if (options.position) {
            if ((0,_options__WEBPACK_IMPORTED_MODULE_9__.isPanelOptionsWithPanel)(options.position)) {
                const referencePanel = typeof options.position.referencePanel === 'string'
                    ? this.getGroupPanel(options.position.referencePanel)
                    : options.position.referencePanel;
                index = options.position.index;
                if (!referencePanel) {
                    throw new Error(`referencePanel '${options.position.referencePanel}' does not exist`);
                }
                referenceGroup = this.findGroup(referencePanel);
            }
            else if ((0,_options__WEBPACK_IMPORTED_MODULE_9__.isPanelOptionsWithGroup)(options.position)) {
                referenceGroup =
                    typeof options.position.referenceGroup === 'string'
                        ? (_a = this._groups.get(options.position.referenceGroup)) === null || _a === void 0 ? void 0 : _a.value
                        : options.position.referenceGroup;
                index = options.position.index;
                if (!referenceGroup) {
                    throw new Error(`referenceGroup '${options.position.referenceGroup}' does not exist`);
                }
            }
            else {
                const group = this.orthogonalize((0,_dnd_droptarget__WEBPACK_IMPORTED_MODULE_1__.directionToPosition)(options.position.direction));
                const panel = this.createPanel(options, group);
                group.model.openPanel(panel, {
                    skipSetActive: options.inactive,
                    skipSetGroupActive: options.inactive,
                    index,
                });
                if (!options.inactive) {
                    this.doSetGroupAndPanelActive(group);
                }
                group.api.setSize({
                    height: initial === null || initial === void 0 ? void 0 : initial.height,
                    width: initial === null || initial === void 0 ? void 0 : initial.width,
                });
                return panel;
            }
        }
        else {
            referenceGroup = this.activeGroup;
        }
        let panel;
        if (referenceGroup) {
            const target = (0,_gridview_baseComponentGridview__WEBPACK_IMPORTED_MODULE_10__.toTarget)(((_b = options.position) === null || _b === void 0 ? void 0 : _b.direction) || 'within');
            if (options.floating) {
                const group = this.createGroup();
                this._onDidAddGroup.fire(group);
                const floatingGroupOptions = typeof options.floating === 'object' &&
                    options.floating !== null
                    ? options.floating
                    : {};
                this.addFloatingGroup(group, Object.assign(Object.assign({}, floatingGroupOptions), { inDragMode: false, skipRemoveGroup: true, skipActiveGroup: true }));
                panel = this.createPanel(options, group);
                group.model.openPanel(panel, {
                    skipSetActive: options.inactive,
                    skipSetGroupActive: options.inactive,
                    index,
                });
            }
            else if (referenceGroup.api.location.type === 'floating' ||
                target === 'center') {
                panel = this.createPanel(options, referenceGroup);
                referenceGroup.model.openPanel(panel, {
                    skipSetActive: options.inactive,
                    skipSetGroupActive: options.inactive,
                    index,
                });
                referenceGroup.api.setSize({
                    width: initial === null || initial === void 0 ? void 0 : initial.width,
                    height: initial === null || initial === void 0 ? void 0 : initial.height,
                });
                if (!options.inactive) {
                    this.doSetGroupAndPanelActive(referenceGroup);
                }
            }
            else {
                const location = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(referenceGroup.element);
                const relativeLocation = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getRelativeLocation)(this.gridview.orientation, location, target);
                const group = this.createGroupAtLocation(relativeLocation, this.orientationAtLocation(relativeLocation) ===
                    _splitview_splitview__WEBPACK_IMPORTED_MODULE_12__.Orientation.VERTICAL
                    ? initial === null || initial === void 0 ? void 0 : initial.height
                    : initial === null || initial === void 0 ? void 0 : initial.width);
                panel = this.createPanel(options, group);
                group.model.openPanel(panel, {
                    skipSetActive: options.inactive,
                    skipSetGroupActive: options.inactive,
                    index,
                });
                if (!options.inactive) {
                    this.doSetGroupAndPanelActive(group);
                }
            }
        }
        else if (options.floating) {
            const group = this.createGroup();
            this._onDidAddGroup.fire(group);
            const coordinates = typeof options.floating === 'object' &&
                options.floating !== null
                ? options.floating
                : {};
            this.addFloatingGroup(group, Object.assign(Object.assign({}, coordinates), { inDragMode: false, skipRemoveGroup: true, skipActiveGroup: true }));
            panel = this.createPanel(options, group);
            group.model.openPanel(panel, {
                skipSetActive: options.inactive,
                skipSetGroupActive: options.inactive,
                index,
            });
        }
        else {
            const group = this.createGroupAtLocation([0], this.gridview.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_12__.Orientation.VERTICAL
                ? initial === null || initial === void 0 ? void 0 : initial.height
                : initial === null || initial === void 0 ? void 0 : initial.width);
            panel = this.createPanel(options, group);
            group.model.openPanel(panel, {
                skipSetActive: options.inactive,
                skipSetGroupActive: options.inactive,
                index,
            });
            if (!options.inactive) {
                this.doSetGroupAndPanelActive(group);
            }
        }
        return panel;
    }
    removePanel(panel, options = {
        removeEmptyGroup: true,
    }) {
        const group = panel.group;
        if (!group) {
            throw new Error(`cannot remove panel ${panel.id}. it's missing a group.`);
        }
        group.model.removePanel(panel, {
            skipSetActiveGroup: options.skipSetActiveGroup,
        });
        if (!options.skipDispose) {
            panel.group.model.renderContainer.detatch(panel);
            panel.dispose();
        }
        if (group.size === 0 && options.removeEmptyGroup) {
            this.removeGroup(group, { skipActive: options.skipSetActiveGroup });
        }
    }
    createWatermarkComponent() {
        if (this.options.createWatermarkComponent) {
            return this.options.createWatermarkComponent();
        }
        return new _components_watermark_watermark__WEBPACK_IMPORTED_MODULE_6__.Watermark();
    }
    updateWatermark() {
        var _a, _b;
        if (this.groups.filter((x) => x.api.location.type === 'grid' && x.api.isVisible).length === 0) {
            if (!this._watermark) {
                this._watermark = this.createWatermarkComponent();
                this._watermark.init({
                    containerApi: new _api_component_api__WEBPACK_IMPORTED_MODULE_11__.DockviewApi(this),
                });
                const watermarkContainer = document.createElement('div');
                watermarkContainer.className = 'dv-watermark-container';
                (0,_dom__WEBPACK_IMPORTED_MODULE_19__.addTestId)(watermarkContainer, 'watermark-component');
                watermarkContainer.appendChild(this._watermark.element);
                this.gridview.element.appendChild(watermarkContainer);
            }
        }
        else if (this._watermark) {
            this._watermark.element.parentElement.remove();
            (_b = (_a = this._watermark).dispose) === null || _b === void 0 ? void 0 : _b.call(_a);
            this._watermark = null;
        }
    }
    addGroup(options) {
        var _a;
        if (options) {
            let referenceGroup;
            if ((0,_options__WEBPACK_IMPORTED_MODULE_9__.isGroupOptionsWithPanel)(options)) {
                const referencePanel = typeof options.referencePanel === 'string'
                    ? this.panels.find((panel) => panel.id === options.referencePanel)
                    : options.referencePanel;
                if (!referencePanel) {
                    throw new Error(`reference panel ${options.referencePanel} does not exist`);
                }
                referenceGroup = this.findGroup(referencePanel);
                if (!referenceGroup) {
                    throw new Error(`reference group for reference panel ${options.referencePanel} does not exist`);
                }
            }
            else if ((0,_options__WEBPACK_IMPORTED_MODULE_9__.isGroupOptionsWithGroup)(options)) {
                referenceGroup =
                    typeof options.referenceGroup === 'string'
                        ? (_a = this._groups.get(options.referenceGroup)) === null || _a === void 0 ? void 0 : _a.value
                        : options.referenceGroup;
                if (!referenceGroup) {
                    throw new Error(`reference group ${options.referenceGroup} does not exist`);
                }
            }
            else {
                const group = this.orthogonalize((0,_dnd_droptarget__WEBPACK_IMPORTED_MODULE_1__.directionToPosition)(options.direction), options);
                if (!options.skipSetActive) {
                    this.doSetGroupAndPanelActive(group);
                }
                return group;
            }
            const target = (0,_gridview_baseComponentGridview__WEBPACK_IMPORTED_MODULE_10__.toTarget)(options.direction || 'within');
            const location = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(referenceGroup.element);
            const relativeLocation = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getRelativeLocation)(this.gridview.orientation, location, target);
            const group = this.createGroup(options);
            const size = this.getLocationOrientation(relativeLocation) ===
                _splitview_splitview__WEBPACK_IMPORTED_MODULE_12__.Orientation.VERTICAL
                ? options.initialHeight
                : options.initialWidth;
            this.doAddGroup(group, relativeLocation, size);
            if (!options.skipSetActive) {
                this.doSetGroupAndPanelActive(group);
            }
            return group;
        }
        else {
            const group = this.createGroup(options);
            this.doAddGroup(group);
            this.doSetGroupAndPanelActive(group);
            return group;
        }
    }
    getLocationOrientation(location) {
        return location.length % 2 == 0 &&
            this.gridview.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_12__.Orientation.HORIZONTAL
            ? _splitview_splitview__WEBPACK_IMPORTED_MODULE_12__.Orientation.HORIZONTAL
            : _splitview_splitview__WEBPACK_IMPORTED_MODULE_12__.Orientation.VERTICAL;
    }
    removeGroup(group, options) {
        this.doRemoveGroup(group, options);
    }
    doRemoveGroup(group, options) {
        var _a;
        const panels = [...group.panels]; // reassign since group panels will mutate
        if (!(options === null || options === void 0 ? void 0 : options.skipDispose)) {
            for (const panel of panels) {
                this.removePanel(panel, {
                    removeEmptyGroup: false,
                    skipDispose: (_a = options === null || options === void 0 ? void 0 : options.skipDispose) !== null && _a !== void 0 ? _a : false,
                });
            }
        }
        const activePanel = this.activePanel;
        if (group.api.location.type === 'floating') {
            const floatingGroup = this._floatingGroups.find((_) => _.group === group);
            if (floatingGroup) {
                if (!(options === null || options === void 0 ? void 0 : options.skipDispose)) {
                    floatingGroup.group.dispose();
                    this._groups.delete(group.id);
                    this._onDidRemoveGroup.fire(group);
                }
                (0,_array__WEBPACK_IMPORTED_MODULE_2__.remove)(this._floatingGroups, floatingGroup);
                floatingGroup.dispose();
                if (!(options === null || options === void 0 ? void 0 : options.skipActive) && this._activeGroup === group) {
                    const groups = Array.from(this._groups.values());
                    this.doSetGroupAndPanelActive(groups.length > 0 ? groups[0].value : undefined);
                }
                return floatingGroup.group;
            }
            throw new Error('failed to find floating group');
        }
        if (group.api.location.type === 'popout') {
            const selectedGroup = this._popoutGroups.find((_) => _.popoutGroup === group);
            if (selectedGroup) {
                if (!(options === null || options === void 0 ? void 0 : options.skipDispose)) {
                    if (!(options === null || options === void 0 ? void 0 : options.skipPopoutAssociated)) {
                        const refGroup = selectedGroup.referenceGroup
                            ? this.getPanel(selectedGroup.referenceGroup)
                            : undefined;
                        if (refGroup && refGroup.panels.length === 0) {
                            this.removeGroup(refGroup);
                        }
                    }
                    selectedGroup.popoutGroup.dispose();
                    this._groups.delete(group.id);
                    this._onDidRemoveGroup.fire(group);
                }
                (0,_array__WEBPACK_IMPORTED_MODULE_2__.remove)(this._popoutGroups, selectedGroup);
                const removedGroup = selectedGroup.disposable.dispose();
                if (!(options === null || options === void 0 ? void 0 : options.skipPopoutReturn) && removedGroup) {
                    this.doAddGroup(removedGroup, [0]);
                    this.doSetGroupAndPanelActive(removedGroup);
                }
                if (!(options === null || options === void 0 ? void 0 : options.skipActive) && this._activeGroup === group) {
                    const groups = Array.from(this._groups.values());
                    this.doSetGroupAndPanelActive(groups.length > 0 ? groups[0].value : undefined);
                }
                this.updateWatermark();
                return selectedGroup.popoutGroup;
            }
            throw new Error('failed to find popout group');
        }
        const re = super.doRemoveGroup(group, options);
        if (!(options === null || options === void 0 ? void 0 : options.skipActive)) {
            if (this.activePanel !== activePanel) {
                this._onDidActivePanelChange.fire(this.activePanel);
            }
        }
        return re;
    }
    movingLock(func) {
        const isMoving = this._moving;
        try {
            this._moving = true;
            return func();
        }
        finally {
            this._moving = isMoving;
        }
    }
    moveGroupOrPanel(options) {
        var _a;
        const destinationGroup = options.to.group;
        const sourceGroupId = options.from.groupId;
        const sourceItemId = options.from.panelId;
        const destinationTarget = options.to.position;
        const destinationIndex = options.to.index;
        const sourceGroup = sourceGroupId
            ? (_a = this._groups.get(sourceGroupId)) === null || _a === void 0 ? void 0 : _a.value
            : undefined;
        if (!sourceGroup) {
            throw new Error(`Failed to find group id ${sourceGroupId}`);
        }
        if (sourceItemId === undefined) {
            /**
             * Moving an entire group into another group
             */
            this.moveGroup({
                from: { group: sourceGroup },
                to: {
                    group: destinationGroup,
                    position: destinationTarget,
                },
                skipSetActive: options.skipSetActive,
            });
            return;
        }
        if (!destinationTarget || destinationTarget === 'center') {
            /**
             * Dropping a panel within another group
             */
            const removedPanel = this.movingLock(() => sourceGroup.model.removePanel(sourceItemId, {
                skipSetActive: false,
                skipSetActiveGroup: true,
            }));
            if (!removedPanel) {
                throw new Error(`No panel with id ${sourceItemId}`);
            }
            if (sourceGroup.model.size === 0) {
                // remove the group and do not set a new group as active
                this.doRemoveGroup(sourceGroup, { skipActive: true });
            }
            // Check if destination group is empty - if so, force render the component
            const isDestinationGroupEmpty = destinationGroup.model.size === 0;
            this.movingLock(() => {
                var _a;
                return destinationGroup.model.openPanel(removedPanel, {
                    index: destinationIndex,
                    skipSetActive: ((_a = options.skipSetActive) !== null && _a !== void 0 ? _a : false) && !isDestinationGroupEmpty,
                    skipSetGroupActive: true,
                });
            });
            if (!options.skipSetActive) {
                this.doSetGroupAndPanelActive(destinationGroup);
            }
            this._onDidMovePanel.fire({
                panel: removedPanel,
                from: sourceGroup,
            });
        }
        else {
            /**
             * Dropping a panel to the extremities of a group which will place that panel
             * into an adjacent group
             */
            const referenceLocation = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(destinationGroup.element);
            const targetLocation = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getRelativeLocation)(this.gridview.orientation, referenceLocation, destinationTarget);
            if (sourceGroup.size < 2) {
                /**
                 * If we are moving from a group which only has one panel left we will consider
                 * moving the group itself rather than moving the panel into a newly created group
                 */
                const [targetParentLocation, to] = (0,_array__WEBPACK_IMPORTED_MODULE_2__.tail)(targetLocation);
                if (sourceGroup.api.location.type === 'grid') {
                    const sourceLocation = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(sourceGroup.element);
                    const [sourceParentLocation, from] = (0,_array__WEBPACK_IMPORTED_MODULE_2__.tail)(sourceLocation);
                    if ((0,_array__WEBPACK_IMPORTED_MODULE_2__.sequenceEquals)(sourceParentLocation, targetParentLocation)) {
                        // special case when 'swapping' two views within same grid location
                        // if a group has one tab - we are essentially moving the 'group'
                        // which is equivalent to swapping two views in this case
                        this.gridview.moveView(sourceParentLocation, from, to);
                        this._onDidMovePanel.fire({
                            panel: this.getGroupPanel(sourceItemId),
                            from: sourceGroup,
                        });
                        return;
                    }
                }
                if (sourceGroup.api.location.type === 'popout') {
                    /**
                     * the source group is a popout group with a single panel
                     *
                     * 1. remove the panel from the group without triggering any events
                     * 2. remove the popout group
                     * 3. create a new group at the requested location and add that panel
                     */
                    const popoutGroup = this._popoutGroups.find((group) => group.popoutGroup === sourceGroup);
                    const removedPanel = this.movingLock(() => popoutGroup.popoutGroup.model.removePanel(popoutGroup.popoutGroup.panels[0], {
                        skipSetActive: true,
                        skipSetActiveGroup: true,
                    }));
                    this.doRemoveGroup(sourceGroup, { skipActive: true });
                    const newGroup = this.createGroupAtLocation(targetLocation);
                    this.movingLock(() => newGroup.model.openPanel(removedPanel));
                    this.doSetGroupAndPanelActive(newGroup);
                    this._onDidMovePanel.fire({
                        panel: this.getGroupPanel(sourceItemId),
                        from: sourceGroup,
                    });
                    return;
                }
                // source group will become empty so delete the group
                const targetGroup = this.movingLock(() => this.doRemoveGroup(sourceGroup, {
                    skipActive: true,
                    skipDispose: true,
                }));
                // after deleting the group we need to re-evaulate the ref location
                const updatedReferenceLocation = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(destinationGroup.element);
                const location = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getRelativeLocation)(this.gridview.orientation, updatedReferenceLocation, destinationTarget);
                this.movingLock(() => this.doAddGroup(targetGroup, location));
                this.doSetGroupAndPanelActive(targetGroup);
                this._onDidMovePanel.fire({
                    panel: this.getGroupPanel(sourceItemId),
                    from: sourceGroup,
                });
            }
            else {
                /**
                 * The group we are removing from has many panels, we need to remove the panels we are moving,
                 * create a new group, add the panels to that new group and add the new group in an appropiate position
                 */
                const removedPanel = this.movingLock(() => sourceGroup.model.removePanel(sourceItemId, {
                    skipSetActive: false,
                    skipSetActiveGroup: true,
                }));
                if (!removedPanel) {
                    throw new Error(`No panel with id ${sourceItemId}`);
                }
                const dropLocation = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getRelativeLocation)(this.gridview.orientation, referenceLocation, destinationTarget);
                const group = this.createGroupAtLocation(dropLocation);
                this.movingLock(() => group.model.openPanel(removedPanel, {
                    skipSetGroupActive: true,
                }));
                this.doSetGroupAndPanelActive(group);
                this._onDidMovePanel.fire({
                    panel: removedPanel,
                    from: sourceGroup,
                });
            }
        }
    }
    moveGroup(options) {
        const from = options.from.group;
        const to = options.to.group;
        const target = options.to.position;
        if (target === 'center') {
            const activePanel = from.activePanel;
            const panels = this.movingLock(() => [...from.panels].map((p) => from.model.removePanel(p.id, {
                skipSetActive: true,
            })));
            if ((from === null || from === void 0 ? void 0 : from.model.size) === 0) {
                this.doRemoveGroup(from, { skipActive: true });
            }
            this.movingLock(() => {
                for (const panel of panels) {
                    to.model.openPanel(panel, {
                        skipSetActive: panel !== activePanel,
                        skipSetGroupActive: true,
                    });
                }
            });
            // Ensure group becomes active after move
            if (options.skipSetActive !== true) {
                // For center moves (merges), we need to ensure the target group is active
                // unless explicitly told not to (skipSetActive: true)
                this.doSetGroupAndPanelActive(to);
            }
            else if (!this.activePanel) {
                // Even with skipSetActive: true, ensure there's an active panel if none exists
                // This maintains basic functionality while respecting skipSetActive
                this.doSetGroupAndPanelActive(to);
            }
        }
        else {
            switch (from.api.location.type) {
                case 'grid':
                    this.gridview.removeView((0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(from.element));
                    break;
                case 'floating': {
                    const selectedFloatingGroup = this._floatingGroups.find((x) => x.group === from);
                    if (!selectedFloatingGroup) {
                        throw new Error('failed to find floating group');
                    }
                    selectedFloatingGroup.dispose();
                    break;
                }
                case 'popout': {
                    const selectedPopoutGroup = this._popoutGroups.find((x) => x.popoutGroup === from);
                    if (!selectedPopoutGroup) {
                        throw new Error('failed to find popout group');
                    }
                    // Remove from popout groups list to prevent automatic restoration
                    const index = this._popoutGroups.indexOf(selectedPopoutGroup);
                    if (index >= 0) {
                        this._popoutGroups.splice(index, 1);
                    }
                    // Clean up the reference group (ghost) if it exists and is hidden
                    if (selectedPopoutGroup.referenceGroup) {
                        const referenceGroup = this.getPanel(selectedPopoutGroup.referenceGroup);
                        if (referenceGroup && !referenceGroup.api.isVisible) {
                            this.doRemoveGroup(referenceGroup, {
                                skipActive: true,
                            });
                        }
                    }
                    // Manually dispose the window without triggering restoration
                    selectedPopoutGroup.window.dispose();
                    // Update group's location and containers for target
                    if (to.api.location.type === 'grid') {
                        from.model.renderContainer =
                            this.overlayRenderContainer;
                        from.model.dropTargetContainer =
                            this.rootDropTargetContainer;
                        from.model.location = { type: 'grid' };
                    }
                    else if (to.api.location.type === 'floating') {
                        from.model.renderContainer =
                            this.overlayRenderContainer;
                        from.model.dropTargetContainer =
                            this.rootDropTargetContainer;
                        from.model.location = { type: 'floating' };
                    }
                    break;
                }
            }
            // For moves to grid locations
            if (to.api.location.type === 'grid') {
                const referenceLocation = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(to.element);
                const dropLocation = (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.getRelativeLocation)(this.gridview.orientation, referenceLocation, target);
                // Add to grid for all moves targeting grid location
                let size;
                switch (this.gridview.orientation) {
                    case _splitview_splitview__WEBPACK_IMPORTED_MODULE_12__.Orientation.VERTICAL:
                        size =
                            referenceLocation.length % 2 == 0
                                ? from.api.width
                                : from.api.height;
                        break;
                    case _splitview_splitview__WEBPACK_IMPORTED_MODULE_12__.Orientation.HORIZONTAL:
                        size =
                            referenceLocation.length % 2 == 0
                                ? from.api.height
                                : from.api.width;
                        break;
                }
                this.gridview.addView(from, size, dropLocation);
            }
            else if (to.api.location.type === 'floating') {
                // For moves to floating locations, add as floating group
                // Get the position/size from the target floating group
                const targetFloatingGroup = this._floatingGroups.find((x) => x.group === to);
                if (targetFloatingGroup) {
                    const box = targetFloatingGroup.overlay.toJSON();
                    // Calculate position based on available properties
                    let left, top;
                    if ('left' in box) {
                        left = box.left + 50;
                    }
                    else if ('right' in box) {
                        left = Math.max(0, box.right - box.width - 50);
                    }
                    else {
                        left = 50; // Default fallback
                    }
                    if ('top' in box) {
                        top = box.top + 50;
                    }
                    else if ('bottom' in box) {
                        top = Math.max(0, box.bottom - box.height - 50);
                    }
                    else {
                        top = 50; // Default fallback
                    }
                    this.addFloatingGroup(from, {
                        height: box.height,
                        width: box.width,
                        position: {
                            left,
                            top,
                        },
                    });
                }
            }
        }
        from.panels.forEach((panel) => {
            this._onDidMovePanel.fire({ panel, from });
        });
        // Ensure group becomes active after move
        if (options.skipSetActive === false) {
            // Only activate when explicitly requested (skipSetActive: false)
            // Use 'to' group for non-center moves since 'from' may have been destroyed
            const targetGroup = to !== null && to !== void 0 ? to : from;
            this.doSetGroupAndPanelActive(targetGroup);
        }
    }
    doSetGroupActive(group) {
        super.doSetGroupActive(group);
        const activePanel = this.activePanel;
        if (!this._moving &&
            activePanel !== this._onDidActivePanelChange.value) {
            this._onDidActivePanelChange.fire(activePanel);
        }
    }
    doSetGroupAndPanelActive(group) {
        super.doSetGroupActive(group);
        const activePanel = this.activePanel;
        if (group &&
            this.hasMaximizedGroup() &&
            !this.isMaximizedGroup(group)) {
            this.exitMaximizedGroup();
        }
        if (!this._moving &&
            activePanel !== this._onDidActivePanelChange.value) {
            this._onDidActivePanelChange.fire(activePanel);
        }
    }
    getNextGroupId() {
        let id = this.nextGroupId.next();
        while (this._groups.has(id)) {
            id = this.nextGroupId.next();
        }
        return id;
    }
    createGroup(options) {
        if (!options) {
            options = {};
        }
        let id = options === null || options === void 0 ? void 0 : options.id;
        if (id && this._groups.has(options.id)) {
            console.warn(`dockview: Duplicate group id ${options === null || options === void 0 ? void 0 : options.id}. reassigning group id to avoid errors`);
            id = undefined;
        }
        if (!id) {
            id = this.nextGroupId.next();
            while (this._groups.has(id)) {
                id = this.nextGroupId.next();
            }
        }
        const view = new _dockviewGroupPanel__WEBPACK_IMPORTED_MODULE_15__.DockviewGroupPanel(this, id, options);
        view.init({ params: {}, accessor: this });
        if (!this._groups.has(view.id)) {
            const disposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_4__.CompositeDisposable(view.model.onTabDragStart((event) => {
                this._onWillDragPanel.fire(event);
            }), view.model.onGroupDragStart((event) => {
                this._onWillDragGroup.fire(event);
            }), view.model.onMove((event) => {
                const { groupId, itemId, target, index } = event;
                this.moveGroupOrPanel({
                    from: { groupId: groupId, panelId: itemId },
                    to: {
                        group: view,
                        position: target,
                        index,
                    },
                });
            }), view.model.onDidDrop((event) => {
                this._onDidDrop.fire(event);
            }), view.model.onWillDrop((event) => {
                this._onWillDrop.fire(event);
            }), view.model.onWillShowOverlay((event) => {
                if (this.options.disableDnd) {
                    event.preventDefault();
                    return;
                }
                this._onWillShowOverlay.fire(event);
            }), view.model.onUnhandledDragOverEvent((event) => {
                this._onUnhandledDragOverEvent.fire(event);
            }), view.model.onDidAddPanel((event) => {
                if (this._moving) {
                    return;
                }
                this._onDidAddPanel.fire(event.panel);
            }), view.model.onDidRemovePanel((event) => {
                if (this._moving) {
                    return;
                }
                this._onDidRemovePanel.fire(event.panel);
            }), view.model.onDidActivePanelChange((event) => {
                if (this._moving) {
                    return;
                }
                if (event.panel !== this.activePanel) {
                    return;
                }
                if (this._onDidActivePanelChange.value !== event.panel) {
                    this._onDidActivePanelChange.fire(event.panel);
                }
            }), _events__WEBPACK_IMPORTED_MODULE_5__.Event.any(view.model.onDidPanelTitleChange, view.model.onDidPanelParametersChange)(() => {
                this._bufferOnDidLayoutChange.fire();
            }));
            this._groups.set(view.id, { value: view, disposable });
        }
        // TODO: must be called after the above listeners have been setup, not an ideal pattern
        view.initialize();
        return view;
    }
    createPanel(options, group) {
        var _a, _b, _c;
        const contentComponent = options.component;
        const tabComponent = (_a = options.tabComponent) !== null && _a !== void 0 ? _a : this.options.defaultTabComponent;
        const view = new _dockviewPanelModel__WEBPACK_IMPORTED_MODULE_16__.DockviewPanelModel(this, options.id, contentComponent, tabComponent);
        const panel = new _dockviewPanel__WEBPACK_IMPORTED_MODULE_3__.DockviewPanel(options.id, contentComponent, tabComponent, this, this._api, group, view, {
            renderer: options.renderer,
            minimumWidth: options.minimumWidth,
            minimumHeight: options.minimumHeight,
            maximumWidth: options.maximumWidth,
            maximumHeight: options.maximumHeight,
        });
        panel.init({
            title: (_b = options.title) !== null && _b !== void 0 ? _b : options.id,
            params: (_c = options === null || options === void 0 ? void 0 : options.params) !== null && _c !== void 0 ? _c : {},
        });
        return panel;
    }
    createGroupAtLocation(location, size, options) {
        const group = this.createGroup(options);
        this.doAddGroup(group, location, size);
        return group;
    }
    findGroup(panel) {
        var _a;
        return (_a = Array.from(this._groups.values()).find((group) => group.value.model.containsPanel(panel))) === null || _a === void 0 ? void 0 : _a.value;
    }
    orientationAtLocation(location) {
        const rootOrientation = this.gridview.orientation;
        return location.length % 2 == 1
            ? rootOrientation
            : (0,_gridview_gridview__WEBPACK_IMPORTED_MODULE_0__.orthogonal)(rootOrientation);
    }
    updateDropTargetModel(options) {
        if ('dndEdges' in options) {
            this._rootDropTarget.disabled =
                typeof options.dndEdges === 'boolean' &&
                    options.dndEdges === false;
            if (typeof options.dndEdges === 'object' &&
                options.dndEdges !== null) {
                this._rootDropTarget.setOverlayModel(options.dndEdges);
            }
            else {
                this._rootDropTarget.setOverlayModel(DEFAULT_ROOT_OVERLAY_MODEL);
            }
        }
        if ('rootOverlayModel' in options) {
            this.updateDropTargetModel({ dndEdges: options.dndEdges });
        }
    }
    updateTheme() {
        var _a, _b;
        const theme = (_a = this._options.theme) !== null && _a !== void 0 ? _a : _theme__WEBPACK_IMPORTED_MODULE_27__.themeAbyss;
        this._themeClassnames.setClassNames(theme.className);
        this.gridview.margin = (_b = theme.gap) !== null && _b !== void 0 ? _b : 0;
        switch (theme.dndOverlayMounting) {
            case 'absolute':
                this.rootDropTargetContainer.disabled = false;
                break;
            case 'relative':
            default:
                this.rootDropTargetContainer.disabled = true;
                break;
        }
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/dockviewFloatingGroupPanel.js":
/*!************************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/dockviewFloatingGroupPanel.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DockviewFloatingGroupPanel: () => (/* binding */ DockviewFloatingGroupPanel)
/* harmony export */ });
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");

class DockviewFloatingGroupPanel extends _lifecycle__WEBPACK_IMPORTED_MODULE_0__.CompositeDisposable {
    constructor(group, overlay) {
        super();
        this.group = group;
        this.overlay = overlay;
        this.addDisposables(overlay);
    }
    position(bounds) {
        this.overlay.setBounds(bounds);
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/dockviewGroupPanel.js":
/*!****************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/dockviewGroupPanel.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DockviewGroupPanel: () => (/* binding */ DockviewGroupPanel)
/* harmony export */ });
/* harmony import */ var _dockviewGroupPanelModel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dockviewGroupPanelModel */ "./node_modules/dockview-core/dist/esm/dockview/dockviewGroupPanelModel.js");
/* harmony import */ var _gridview_gridviewPanel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../gridview/gridviewPanel */ "./node_modules/dockview-core/dist/esm/gridview/gridviewPanel.js");
/* harmony import */ var _api_dockviewGroupPanelApi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../api/dockviewGroupPanelApi */ "./node_modules/dockview-core/dist/esm/api/dockviewGroupPanelApi.js");



const MINIMUM_DOCKVIEW_GROUP_PANEL_WIDTH = 100;
const MINIMUM_DOCKVIEW_GROUP_PANEL_HEIGHT = 100;
class DockviewGroupPanel extends _gridview_gridviewPanel__WEBPACK_IMPORTED_MODULE_1__.GridviewPanel {
    get minimumWidth() {
        var _a;
        const activePanelMinimumWidth = (_a = this.activePanel) === null || _a === void 0 ? void 0 : _a.minimumWidth;
        if (typeof activePanelMinimumWidth === 'number') {
            return activePanelMinimumWidth;
        }
        return super.__minimumWidth();
    }
    get minimumHeight() {
        var _a;
        const activePanelMinimumHeight = (_a = this.activePanel) === null || _a === void 0 ? void 0 : _a.minimumHeight;
        if (typeof activePanelMinimumHeight === 'number') {
            return activePanelMinimumHeight;
        }
        return super.__minimumHeight();
    }
    get maximumWidth() {
        var _a;
        const activePanelMaximumWidth = (_a = this.activePanel) === null || _a === void 0 ? void 0 : _a.maximumWidth;
        if (typeof activePanelMaximumWidth === 'number') {
            return activePanelMaximumWidth;
        }
        return super.__maximumWidth();
    }
    get maximumHeight() {
        var _a;
        const activePanelMaximumHeight = (_a = this.activePanel) === null || _a === void 0 ? void 0 : _a.maximumHeight;
        if (typeof activePanelMaximumHeight === 'number') {
            return activePanelMaximumHeight;
        }
        return super.__maximumHeight();
    }
    get panels() {
        return this._model.panels;
    }
    get activePanel() {
        return this._model.activePanel;
    }
    get size() {
        return this._model.size;
    }
    get model() {
        return this._model;
    }
    get locked() {
        return this._model.locked;
    }
    set locked(value) {
        this._model.locked = value;
    }
    get header() {
        return this._model.header;
    }
    constructor(accessor, id, options) {
        var _a, _b, _c, _d, _e, _f;
        super(id, 'groupview_default', {
            minimumHeight: (_b = (_a = options.constraints) === null || _a === void 0 ? void 0 : _a.minimumHeight) !== null && _b !== void 0 ? _b : MINIMUM_DOCKVIEW_GROUP_PANEL_HEIGHT,
            minimumWidth: (_d = (_c = options.constraints) === null || _c === void 0 ? void 0 : _c.maximumHeight) !== null && _d !== void 0 ? _d : MINIMUM_DOCKVIEW_GROUP_PANEL_WIDTH,
            maximumHeight: (_e = options.constraints) === null || _e === void 0 ? void 0 : _e.maximumHeight,
            maximumWidth: (_f = options.constraints) === null || _f === void 0 ? void 0 : _f.maximumWidth,
        }, new _api_dockviewGroupPanelApi__WEBPACK_IMPORTED_MODULE_2__.DockviewGroupPanelApiImpl(id, accessor));
        this.api.initialize(this); // cannot use 'this' after after 'super' call
        this._model = new _dockviewGroupPanelModel__WEBPACK_IMPORTED_MODULE_0__.DockviewGroupPanelModel(this.element, accessor, id, options, this);
        this.addDisposables(this.model.onDidActivePanelChange((event) => {
            this.api._onDidActivePanelChange.fire(event);
        }));
    }
    focus() {
        if (!this.api.isActive) {
            this.api.setActive();
        }
        super.focus();
    }
    initialize() {
        this._model.initialize();
    }
    setActive(isActive) {
        super.setActive(isActive);
        this.model.setActive(isActive);
    }
    layout(width, height) {
        super.layout(width, height);
        this.model.layout(width, height);
    }
    getComponent() {
        return this._model;
    }
    toJSON() {
        return this.model.toJSON();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/dockviewGroupPanelModel.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/dockviewGroupPanelModel.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DockviewDidDropEvent: () => (/* binding */ DockviewDidDropEvent),
/* harmony export */   DockviewGroupPanelModel: () => (/* binding */ DockviewGroupPanelModel),
/* harmony export */   DockviewWillDropEvent: () => (/* binding */ DockviewWillDropEvent)
/* harmony export */ });
/* harmony import */ var _api_component_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api/component.api */ "./node_modules/dockview-core/dist/esm/api/component.api.js");
/* harmony import */ var _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dnd/dataTransfer */ "./node_modules/dockview-core/dist/esm/dnd/dataTransfer.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./events */ "./node_modules/dockview-core/dist/esm/dockview/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _components_panel_content__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./components/panel/content */ "./node_modules/dockview-core/dist/esm/dockview/components/panel/content.js");
/* harmony import */ var _components_titlebar_tabsContainer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./components/titlebar/tabsContainer */ "./node_modules/dockview-core/dist/esm/dockview/components/titlebar/tabsContainer.js");
/* harmony import */ var _options__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./options */ "./node_modules/dockview-core/dist/esm/dockview/options.js");









class DockviewDidDropEvent extends _events__WEBPACK_IMPORTED_MODULE_3__.DockviewEvent {
    get nativeEvent() {
        return this.options.nativeEvent;
    }
    get position() {
        return this.options.position;
    }
    get panel() {
        return this.options.panel;
    }
    get group() {
        return this.options.group;
    }
    get api() {
        return this.options.api;
    }
    constructor(options) {
        super();
        this.options = options;
    }
    getData() {
        return this.options.getData();
    }
}
class DockviewWillDropEvent extends DockviewDidDropEvent {
    get kind() {
        return this._kind;
    }
    constructor(options) {
        super(options);
        this._kind = options.kind;
    }
}
class DockviewGroupPanelModel extends _lifecycle__WEBPACK_IMPORTED_MODULE_5__.CompositeDisposable {
    get element() {
        throw new Error('dockview: not supported');
    }
    get activePanel() {
        return this._activePanel;
    }
    get locked() {
        return this._locked;
    }
    set locked(value) {
        this._locked = value;
        (0,_dom__WEBPACK_IMPORTED_MODULE_2__.toggleClass)(this.container, 'dv-locked-groupview', value === 'no-drop-target' || value);
    }
    get isActive() {
        return this._isGroupActive;
    }
    get panels() {
        return this._panels;
    }
    get size() {
        return this._panels.length;
    }
    get isEmpty() {
        return this._panels.length === 0;
    }
    get hasWatermark() {
        return !!(this.watermark && this.container.contains(this.watermark.element));
    }
    get header() {
        return this.tabsContainer;
    }
    get isContentFocused() {
        if (!document.activeElement) {
            return false;
        }
        return (0,_dom__WEBPACK_IMPORTED_MODULE_2__.isAncestor)(document.activeElement, this.contentContainer.element);
    }
    get location() {
        return this._location;
    }
    set location(value) {
        this._location = value;
        (0,_dom__WEBPACK_IMPORTED_MODULE_2__.toggleClass)(this.container, 'dv-groupview-floating', false);
        (0,_dom__WEBPACK_IMPORTED_MODULE_2__.toggleClass)(this.container, 'dv-groupview-popout', false);
        switch (value.type) {
            case 'grid':
                this.contentContainer.dropTarget.setTargetZones([
                    'top',
                    'bottom',
                    'left',
                    'right',
                    'center',
                ]);
                break;
            case 'floating':
                this.contentContainer.dropTarget.setTargetZones(['center']);
                this.contentContainer.dropTarget.setTargetZones(value
                    ? ['center']
                    : ['top', 'bottom', 'left', 'right', 'center']);
                (0,_dom__WEBPACK_IMPORTED_MODULE_2__.toggleClass)(this.container, 'dv-groupview-floating', true);
                break;
            case 'popout':
                this.contentContainer.dropTarget.setTargetZones(['center']);
                (0,_dom__WEBPACK_IMPORTED_MODULE_2__.toggleClass)(this.container, 'dv-groupview-popout', true);
                break;
        }
        this.groupPanel.api._onDidLocationChange.fire({
            location: this.location,
        });
    }
    constructor(container, accessor, id, options, groupPanel) {
        var _a;
        super();
        this.container = container;
        this.accessor = accessor;
        this.id = id;
        this.options = options;
        this.groupPanel = groupPanel;
        this._isGroupActive = false;
        this._locked = false;
        this._location = { type: 'grid' };
        this.mostRecentlyUsed = [];
        this._overwriteRenderContainer = null;
        this._overwriteDropTargetContainer = null;
        this._onDidChange = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onDidChange = this._onDidChange.event;
        this._width = 0;
        this._height = 0;
        this._panels = [];
        this._panelDisposables = new Map();
        this._onMove = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onMove = this._onMove.event;
        this._onDidDrop = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onDidDrop = this._onDidDrop.event;
        this._onWillDrop = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onWillDrop = this._onWillDrop.event;
        this._onWillShowOverlay = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onWillShowOverlay = this._onWillShowOverlay.event;
        this._onTabDragStart = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onTabDragStart = this._onTabDragStart.event;
        this._onGroupDragStart = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onGroupDragStart = this._onGroupDragStart.event;
        this._onDidAddPanel = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onDidAddPanel = this._onDidAddPanel.event;
        this._onDidPanelTitleChange = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onDidPanelTitleChange = this._onDidPanelTitleChange.event;
        this._onDidPanelParametersChange = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onDidPanelParametersChange = this._onDidPanelParametersChange.event;
        this._onDidRemovePanel = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onDidRemovePanel = this._onDidRemovePanel.event;
        this._onDidActivePanelChange = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onDidActivePanelChange = this._onDidActivePanelChange.event;
        this._onUnhandledDragOverEvent = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onUnhandledDragOverEvent = this._onUnhandledDragOverEvent.event;
        (0,_dom__WEBPACK_IMPORTED_MODULE_2__.toggleClass)(this.container, 'dv-groupview', true);
        this._api = new _api_component_api__WEBPACK_IMPORTED_MODULE_0__.DockviewApi(this.accessor);
        this.tabsContainer = new _components_titlebar_tabsContainer__WEBPACK_IMPORTED_MODULE_7__.TabsContainer(this.accessor, this.groupPanel);
        this.contentContainer = new _components_panel_content__WEBPACK_IMPORTED_MODULE_6__.ContentContainer(this.accessor, this);
        container.append(this.tabsContainer.element, this.contentContainer.element);
        this.header.hidden = !!options.hideHeader;
        this.locked = (_a = options.locked) !== null && _a !== void 0 ? _a : false;
        this.addDisposables(this._onTabDragStart, this._onGroupDragStart, this._onWillShowOverlay, this.tabsContainer.onTabDragStart((event) => {
            this._onTabDragStart.fire(event);
        }), this.tabsContainer.onGroupDragStart((event) => {
            this._onGroupDragStart.fire(event);
        }), this.tabsContainer.onDrop((event) => {
            this.handleDropEvent('header', event.event, 'center', event.index);
        }), this.contentContainer.onDidFocus(() => {
            this.accessor.doSetGroupActive(this.groupPanel);
        }), this.contentContainer.onDidBlur(() => {
            // noop
        }), this.contentContainer.dropTarget.onDrop((event) => {
            this.handleDropEvent('content', event.nativeEvent, event.position);
        }), this.tabsContainer.onWillShowOverlay((event) => {
            this._onWillShowOverlay.fire(event);
        }), this.contentContainer.dropTarget.onWillShowOverlay((event) => {
            this._onWillShowOverlay.fire(new _events__WEBPACK_IMPORTED_MODULE_4__.WillShowOverlayLocationEvent(event, {
                kind: 'content',
                panel: this.activePanel,
                api: this._api,
                group: this.groupPanel,
                getData: _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_1__.getPanelData,
            }));
        }), this._onMove, this._onDidChange, this._onDidDrop, this._onWillDrop, this._onDidAddPanel, this._onDidRemovePanel, this._onDidActivePanelChange, this._onUnhandledDragOverEvent, this._onDidPanelTitleChange, this._onDidPanelParametersChange);
    }
    focusContent() {
        this.contentContainer.element.focus();
    }
    set renderContainer(value) {
        this.panels.forEach((panel) => {
            this.renderContainer.detatch(panel);
        });
        this._overwriteRenderContainer = value;
        this.panels.forEach((panel) => {
            this.rerender(panel);
        });
    }
    get renderContainer() {
        var _a;
        return ((_a = this._overwriteRenderContainer) !== null && _a !== void 0 ? _a : this.accessor.overlayRenderContainer);
    }
    set dropTargetContainer(value) {
        this._overwriteDropTargetContainer = value;
    }
    get dropTargetContainer() {
        var _a;
        return ((_a = this._overwriteDropTargetContainer) !== null && _a !== void 0 ? _a : this.accessor.rootDropTargetContainer);
    }
    initialize() {
        if (this.options.panels) {
            this.options.panels.forEach((panel) => {
                this.doAddPanel(panel);
            });
        }
        if (this.options.activePanel) {
            this.openPanel(this.options.activePanel);
        }
        // must be run after the constructor otherwise this.parent may not be
        // correctly initialized
        this.setActive(this.isActive, true);
        this.updateContainer();
        if (this.accessor.options.createRightHeaderActionComponent) {
            this._rightHeaderActions =
                this.accessor.options.createRightHeaderActionComponent(this.groupPanel);
            this.addDisposables(this._rightHeaderActions);
            this._rightHeaderActions.init({
                containerApi: this._api,
                api: this.groupPanel.api,
                group: this.groupPanel,
            });
            this.tabsContainer.setRightActionsElement(this._rightHeaderActions.element);
        }
        if (this.accessor.options.createLeftHeaderActionComponent) {
            this._leftHeaderActions =
                this.accessor.options.createLeftHeaderActionComponent(this.groupPanel);
            this.addDisposables(this._leftHeaderActions);
            this._leftHeaderActions.init({
                containerApi: this._api,
                api: this.groupPanel.api,
                group: this.groupPanel,
            });
            this.tabsContainer.setLeftActionsElement(this._leftHeaderActions.element);
        }
        if (this.accessor.options.createPrefixHeaderActionComponent) {
            this._prefixHeaderActions =
                this.accessor.options.createPrefixHeaderActionComponent(this.groupPanel);
            this.addDisposables(this._prefixHeaderActions);
            this._prefixHeaderActions.init({
                containerApi: this._api,
                api: this.groupPanel.api,
                group: this.groupPanel,
            });
            this.tabsContainer.setPrefixActionsElement(this._prefixHeaderActions.element);
        }
    }
    rerender(panel) {
        this.contentContainer.renderPanel(panel, { asActive: false });
    }
    indexOf(panel) {
        return this.tabsContainer.indexOf(panel.id);
    }
    toJSON() {
        var _a;
        const result = {
            views: this.tabsContainer.panels,
            activeView: (_a = this._activePanel) === null || _a === void 0 ? void 0 : _a.id,
            id: this.id,
        };
        if (this.locked !== false) {
            result.locked = this.locked;
        }
        if (this.header.hidden) {
            result.hideHeader = true;
        }
        return result;
    }
    moveToNext(options) {
        if (!options) {
            options = {};
        }
        if (!options.panel) {
            options.panel = this.activePanel;
        }
        const index = options.panel ? this.panels.indexOf(options.panel) : -1;
        let normalizedIndex;
        if (index < this.panels.length - 1) {
            normalizedIndex = index + 1;
        }
        else if (!options.suppressRoll) {
            normalizedIndex = 0;
        }
        else {
            return;
        }
        this.openPanel(this.panels[normalizedIndex]);
    }
    moveToPrevious(options) {
        if (!options) {
            options = {};
        }
        if (!options.panel) {
            options.panel = this.activePanel;
        }
        if (!options.panel) {
            return;
        }
        const index = this.panels.indexOf(options.panel);
        let normalizedIndex;
        if (index > 0) {
            normalizedIndex = index - 1;
        }
        else if (!options.suppressRoll) {
            normalizedIndex = this.panels.length - 1;
        }
        else {
            return;
        }
        this.openPanel(this.panels[normalizedIndex]);
    }
    containsPanel(panel) {
        return this.panels.includes(panel);
    }
    init(_params) {
        //noop
    }
    update(_params) {
        //noop
    }
    focus() {
        var _a;
        (_a = this._activePanel) === null || _a === void 0 ? void 0 : _a.focus();
    }
    openPanel(panel, options = {}) {
        /**
         * set the panel group
         * add the panel
         * check if group active
         * check if panel active
         */
        if (typeof options.index !== 'number' ||
            options.index > this.panels.length) {
            options.index = this.panels.length;
        }
        const skipSetActive = !!options.skipSetActive;
        // ensure the group is updated before we fire any events
        panel.updateParentGroup(this.groupPanel, {
            skipSetActive: options.skipSetActive,
        });
        this.doAddPanel(panel, options.index, {
            skipSetActive: skipSetActive,
        });
        if (this._activePanel === panel) {
            this.contentContainer.renderPanel(panel, { asActive: true });
            return;
        }
        if (!skipSetActive) {
            this.doSetActivePanel(panel);
        }
        if (!options.skipSetGroupActive) {
            this.accessor.doSetGroupActive(this.groupPanel);
        }
        if (!options.skipSetActive) {
            this.updateContainer();
        }
    }
    removePanel(groupItemOrId, options = {
        skipSetActive: false,
    }) {
        const id = typeof groupItemOrId === 'string'
            ? groupItemOrId
            : groupItemOrId.id;
        const panelToRemove = this._panels.find((panel) => panel.id === id);
        if (!panelToRemove) {
            throw new Error('invalid operation');
        }
        return this._removePanel(panelToRemove, options);
    }
    closeAllPanels() {
        if (this.panels.length > 0) {
            // take a copy since we will be edting the array as we iterate through
            const arrPanelCpy = [...this.panels];
            for (const panel of arrPanelCpy) {
                this.doClose(panel);
            }
        }
        else {
            this.accessor.removeGroup(this.groupPanel);
        }
    }
    closePanel(panel) {
        this.doClose(panel);
    }
    doClose(panel) {
        const isLast = this.panels.length === 1 && this.accessor.groups.length === 1;
        this.accessor.removePanel(panel, isLast && this.accessor.options.noPanelsOverlay === 'emptyGroup'
            ? { removeEmptyGroup: false }
            : undefined);
    }
    isPanelActive(panel) {
        return this._activePanel === panel;
    }
    updateActions(element) {
        this.tabsContainer.setRightActionsElement(element);
    }
    setActive(isGroupActive, force = false) {
        if (!force && this.isActive === isGroupActive) {
            return;
        }
        this._isGroupActive = isGroupActive;
        (0,_dom__WEBPACK_IMPORTED_MODULE_2__.toggleClass)(this.container, 'dv-active-group', isGroupActive);
        (0,_dom__WEBPACK_IMPORTED_MODULE_2__.toggleClass)(this.container, 'dv-inactive-group', !isGroupActive);
        this.tabsContainer.setActive(this.isActive);
        if (!this._activePanel && this.panels.length > 0) {
            this.doSetActivePanel(this.panels[0]);
        }
        this.updateContainer();
    }
    layout(width, height) {
        var _a;
        this._width = width;
        this._height = height;
        this.contentContainer.layout(this._width, this._height);
        if ((_a = this._activePanel) === null || _a === void 0 ? void 0 : _a.layout) {
            this._activePanel.layout(this._width, this._height);
        }
    }
    _removePanel(panel, options) {
        const isActivePanel = this._activePanel === panel;
        this.doRemovePanel(panel);
        if (isActivePanel && this.panels.length > 0) {
            const nextPanel = this.mostRecentlyUsed[0];
            this.openPanel(nextPanel, {
                skipSetActive: options.skipSetActive,
                skipSetGroupActive: options.skipSetActiveGroup,
            });
        }
        if (this._activePanel && this.panels.length === 0) {
            this.doSetActivePanel(undefined);
        }
        if (!options.skipSetActive) {
            this.updateContainer();
        }
        return panel;
    }
    doRemovePanel(panel) {
        const index = this.panels.indexOf(panel);
        if (this._activePanel === panel) {
            this.contentContainer.closePanel();
        }
        this.tabsContainer.delete(panel.id);
        this._panels.splice(index, 1);
        if (this.mostRecentlyUsed.includes(panel)) {
            const index = this.mostRecentlyUsed.indexOf(panel);
            this.mostRecentlyUsed.splice(index, 1);
        }
        const disposable = this._panelDisposables.get(panel.id);
        if (disposable) {
            disposable.dispose();
            this._panelDisposables.delete(panel.id);
        }
        this._onDidRemovePanel.fire({ panel });
    }
    doAddPanel(panel, index = this.panels.length, options = { skipSetActive: false }) {
        const existingPanel = this._panels.indexOf(panel);
        const hasExistingPanel = existingPanel > -1;
        this.tabsContainer.show();
        this.contentContainer.show();
        this.tabsContainer.openPanel(panel, index);
        if (!options.skipSetActive) {
            this.contentContainer.openPanel(panel);
        }
        if (hasExistingPanel) {
            // TODO - need to ensure ordering hasn't changed and if it has need to re-order this.panels
            return;
        }
        this.updateMru(panel);
        this.panels.splice(index, 0, panel);
        this._panelDisposables.set(panel.id, new _lifecycle__WEBPACK_IMPORTED_MODULE_5__.CompositeDisposable(panel.api.onDidTitleChange((event) => this._onDidPanelTitleChange.fire(event)), panel.api.onDidParametersChange((event) => this._onDidPanelParametersChange.fire(event))));
        this._onDidAddPanel.fire({ panel });
    }
    doSetActivePanel(panel) {
        if (this._activePanel === panel) {
            return;
        }
        this._activePanel = panel;
        if (panel) {
            this.tabsContainer.setActivePanel(panel);
            panel.layout(this._width, this._height);
            this.updateMru(panel);
            this._onDidActivePanelChange.fire({
                panel,
            });
        }
    }
    updateMru(panel) {
        if (this.mostRecentlyUsed.includes(panel)) {
            this.mostRecentlyUsed.splice(this.mostRecentlyUsed.indexOf(panel), 1);
        }
        this.mostRecentlyUsed = [panel, ...this.mostRecentlyUsed];
    }
    updateContainer() {
        var _a, _b;
        this.panels.forEach((panel) => panel.runEvents());
        if (this.isEmpty && !this.watermark) {
            const watermark = this.accessor.createWatermarkComponent();
            watermark.init({
                containerApi: this._api,
                group: this.groupPanel,
            });
            this.watermark = watermark;
            (0,_events__WEBPACK_IMPORTED_MODULE_3__.addDisposableListener)(this.watermark.element, 'pointerdown', () => {
                if (!this.isActive) {
                    this.accessor.doSetGroupActive(this.groupPanel);
                }
            });
            this.contentContainer.element.appendChild(this.watermark.element);
        }
        if (!this.isEmpty && this.watermark) {
            this.watermark.element.remove();
            (_b = (_a = this.watermark).dispose) === null || _b === void 0 ? void 0 : _b.call(_a);
            this.watermark = undefined;
        }
    }
    canDisplayOverlay(event, position, target) {
        const firedEvent = new _options__WEBPACK_IMPORTED_MODULE_8__.DockviewUnhandledDragOverEvent(event, target, position, _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_1__.getPanelData, this.accessor.getPanel(this.id));
        this._onUnhandledDragOverEvent.fire(firedEvent);
        return firedEvent.isAccepted;
    }
    handleDropEvent(type, event, position, index) {
        if (this.locked === 'no-drop-target') {
            return;
        }
        function getKind() {
            switch (type) {
                case 'header':
                    return typeof index === 'number' ? 'tab' : 'header_space';
                case 'content':
                    return 'content';
            }
        }
        const panel = typeof index === 'number' ? this.panels[index] : undefined;
        const willDropEvent = new DockviewWillDropEvent({
            nativeEvent: event,
            position,
            panel,
            getData: () => (0,_dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_1__.getPanelData)(),
            kind: getKind(),
            group: this.groupPanel,
            api: this._api,
        });
        this._onWillDrop.fire(willDropEvent);
        if (willDropEvent.defaultPrevented) {
            return;
        }
        const data = (0,_dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_1__.getPanelData)();
        if (data && data.viewId === this.accessor.id) {
            if (type === 'content') {
                if (data.groupId === this.id) {
                    // don't allow to drop on self for center position
                    if (position === 'center') {
                        return;
                    }
                    if (data.panelId === null) {
                        // don't allow group move to drop anywhere on self
                        return;
                    }
                }
            }
            if (type === 'header') {
                if (data.groupId === this.id) {
                    if (data.panelId === null) {
                        return;
                    }
                }
            }
            if (data.panelId === null) {
                // this is a group move dnd event
                const { groupId } = data;
                this._onMove.fire({
                    target: position,
                    groupId: groupId,
                    index,
                });
                return;
            }
            const fromSameGroup = this.tabsContainer.indexOf(data.panelId) !== -1;
            if (fromSameGroup && this.tabsContainer.size === 1) {
                return;
            }
            const { groupId, panelId } = data;
            const isSameGroup = this.id === groupId;
            if (isSameGroup && !position) {
                const oldIndex = this.tabsContainer.indexOf(panelId);
                if (oldIndex === index) {
                    return;
                }
            }
            this._onMove.fire({
                target: position,
                groupId: data.groupId,
                itemId: data.panelId,
                index,
            });
        }
        else {
            this._onDidDrop.fire(new DockviewDidDropEvent({
                nativeEvent: event,
                position,
                panel,
                getData: () => (0,_dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_1__.getPanelData)(),
                group: this.groupPanel,
                api: this._api,
            }));
        }
    }
    updateDragAndDropState() {
        this.tabsContainer.updateDragAndDropState();
    }
    dispose() {
        var _a, _b, _c;
        super.dispose();
        (_a = this.watermark) === null || _a === void 0 ? void 0 : _a.element.remove();
        (_c = (_b = this.watermark) === null || _b === void 0 ? void 0 : _b.dispose) === null || _c === void 0 ? void 0 : _c.call(_b);
        this.watermark = undefined;
        for (const panel of this.panels) {
            panel.dispose();
        }
        this.tabsContainer.dispose();
        this.contentContainer.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/dockviewPanel.js":
/*!***********************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/dockviewPanel.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DockviewPanel: () => (/* binding */ DockviewPanel)
/* harmony export */ });
/* harmony import */ var _api_dockviewPanelApi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api/dockviewPanelApi */ "./node_modules/dockview-core/dist/esm/api/dockviewPanelApi.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _api_panelApi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../api/panelApi */ "./node_modules/dockview-core/dist/esm/api/panelApi.js");



class DockviewPanel extends _lifecycle__WEBPACK_IMPORTED_MODULE_1__.CompositeDisposable {
    get params() {
        return this._params;
    }
    get title() {
        return this._title;
    }
    get group() {
        return this._group;
    }
    get renderer() {
        var _a;
        return (_a = this._renderer) !== null && _a !== void 0 ? _a : this.accessor.renderer;
    }
    get minimumWidth() {
        return this._minimumWidth;
    }
    get minimumHeight() {
        return this._minimumHeight;
    }
    get maximumWidth() {
        return this._maximumWidth;
    }
    get maximumHeight() {
        return this._maximumHeight;
    }
    constructor(id, component, tabComponent, accessor, containerApi, group, view, options) {
        super();
        this.id = id;
        this.accessor = accessor;
        this.containerApi = containerApi;
        this.view = view;
        this._renderer = options.renderer;
        this._group = group;
        this._minimumWidth = options.minimumWidth;
        this._minimumHeight = options.minimumHeight;
        this._maximumWidth = options.maximumWidth;
        this._maximumHeight = options.maximumHeight;
        this.api = new _api_dockviewPanelApi__WEBPACK_IMPORTED_MODULE_0__.DockviewPanelApiImpl(this, this._group, accessor, component, tabComponent);
        this.addDisposables(this.api.onActiveChange(() => {
            accessor.setActivePanel(this);
        }), this.api.onDidSizeChange((event) => {
            // forward the resize event to the group since if you want to resize a panel
            // you are actually just resizing the panels parent which is the group
            this.group.api.setSize(event);
        }), this.api.onDidRendererChange(() => {
            this.group.model.rerender(this);
        }));
    }
    init(params) {
        this._params = params.params;
        this.view.init(Object.assign(Object.assign({}, params), { api: this.api, containerApi: this.containerApi }));
        this.setTitle(params.title);
    }
    focus() {
        const event = new _api_panelApi__WEBPACK_IMPORTED_MODULE_2__.WillFocusEvent();
        this.api._onWillFocus.fire(event);
        if (event.defaultPrevented) {
            return;
        }
        if (!this.api.isActive) {
            this.api.setActive();
        }
    }
    toJSON() {
        return {
            id: this.id,
            contentComponent: this.view.contentComponent,
            tabComponent: this.view.tabComponent,
            params: Object.keys(this._params || {}).length > 0
                ? this._params
                : undefined,
            title: this.title,
            renderer: this._renderer,
            minimumHeight: this._minimumHeight,
            maximumHeight: this._maximumHeight,
            minimumWidth: this._minimumWidth,
            maximumWidth: this._maximumWidth,
        };
    }
    setTitle(title) {
        const didTitleChange = title !== this.title;
        if (didTitleChange) {
            this._title = title;
            this.api._onDidTitleChange.fire({ title });
        }
    }
    setRenderer(renderer) {
        const didChange = renderer !== this.renderer;
        if (didChange) {
            this._renderer = renderer;
            this.api._onDidRendererChange.fire({
                renderer: renderer,
            });
        }
    }
    update(event) {
        var _a;
        // merge the new parameters with the existing parameters
        this._params = Object.assign(Object.assign({}, ((_a = this._params) !== null && _a !== void 0 ? _a : {})), event.params);
        /**
         * delete new keys that have a value of undefined,
         * allow values of null
         */
        for (const key of Object.keys(event.params)) {
            if (event.params[key] === undefined) {
                delete this._params[key];
            }
        }
        // update the view with the updated props
        this.view.update({
            params: this._params,
        });
    }
    updateParentGroup(group, options) {
        this._group = group;
        this.api.group = this._group;
        const isPanelVisible = this._group.model.isPanelActive(this);
        const isActive = this.group.api.isActive && isPanelVisible;
        if (!(options === null || options === void 0 ? void 0 : options.skipSetActive)) {
            if (this.api.isActive !== isActive) {
                this.api._onDidActiveChange.fire({
                    isActive: this.group.api.isActive && isPanelVisible,
                });
            }
        }
        if (this.api.isVisible !== isPanelVisible) {
            this.api._onDidVisibilityChange.fire({
                isVisible: isPanelVisible,
            });
        }
    }
    runEvents() {
        const isPanelVisible = this._group.model.isPanelActive(this);
        const isActive = this.group.api.isActive && isPanelVisible;
        if (this.api.isActive !== isActive) {
            this.api._onDidActiveChange.fire({
                isActive: this.group.api.isActive && isPanelVisible,
            });
        }
        if (this.api.isVisible !== isPanelVisible) {
            this.api._onDidVisibilityChange.fire({
                isVisible: isPanelVisible,
            });
        }
    }
    layout(width, height) {
        // TODO: Can we somehow do height without header height or indicate what the header height is?
        this.api._onDidDimensionChange.fire({
            width,
            height: height,
        });
        this.view.layout(width, height);
    }
    dispose() {
        this.api.dispose();
        this.view.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/dockviewPanelModel.js":
/*!****************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/dockviewPanelModel.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DockviewPanelModel: () => (/* binding */ DockviewPanelModel)
/* harmony export */ });
/* harmony import */ var _components_tab_defaultTab__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components/tab/defaultTab */ "./node_modules/dockview-core/dist/esm/dockview/components/tab/defaultTab.js");

class DockviewPanelModel {
    get content() {
        return this._content;
    }
    get tab() {
        return this._tab;
    }
    constructor(accessor, id, contentComponent, tabComponent) {
        this.accessor = accessor;
        this.id = id;
        this.contentComponent = contentComponent;
        this.tabComponent = tabComponent;
        this._content = this.createContentComponent(this.id, contentComponent);
        this._tab = this.createTabComponent(this.id, tabComponent);
    }
    createTabRenderer(tabLocation) {
        var _a;
        const cmp = this.createTabComponent(this.id, this.tabComponent);
        if (this._params) {
            cmp.init(Object.assign(Object.assign({}, this._params), { tabLocation }));
        }
        if (this._updateEvent) {
            (_a = cmp.update) === null || _a === void 0 ? void 0 : _a.call(cmp, this._updateEvent);
        }
        return cmp;
    }
    init(params) {
        this._params = params;
        this.content.init(params);
        this.tab.init(Object.assign(Object.assign({}, params), { tabLocation: 'header' }));
    }
    layout(width, height) {
        var _a, _b;
        (_b = (_a = this.content).layout) === null || _b === void 0 ? void 0 : _b.call(_a, width, height);
    }
    update(event) {
        var _a, _b, _c, _d;
        this._updateEvent = event;
        (_b = (_a = this.content).update) === null || _b === void 0 ? void 0 : _b.call(_a, event);
        (_d = (_c = this.tab).update) === null || _d === void 0 ? void 0 : _d.call(_c, event);
    }
    dispose() {
        var _a, _b, _c, _d;
        (_b = (_a = this.content).dispose) === null || _b === void 0 ? void 0 : _b.call(_a);
        (_d = (_c = this.tab).dispose) === null || _d === void 0 ? void 0 : _d.call(_c);
    }
    createContentComponent(id, componentName) {
        return this.accessor.options.createComponent({
            id,
            name: componentName,
        });
    }
    createTabComponent(id, componentName) {
        const name = componentName !== null && componentName !== void 0 ? componentName : this.accessor.options.defaultTabComponent;
        if (name) {
            if (this.accessor.options.createTabComponent) {
                const component = this.accessor.options.createTabComponent({
                    id,
                    name,
                });
                if (component) {
                    return component;
                }
                else {
                    return new _components_tab_defaultTab__WEBPACK_IMPORTED_MODULE_0__.DefaultTab();
                }
            }
            console.warn(`dockview: tabComponent '${componentName}' was not found. falling back to the default tab.`);
        }
        return new _components_tab_defaultTab__WEBPACK_IMPORTED_MODULE_0__.DefaultTab();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/events.js":
/*!****************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/events.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WillShowOverlayLocationEvent: () => (/* binding */ WillShowOverlayLocationEvent)
/* harmony export */ });
class WillShowOverlayLocationEvent {
    get kind() {
        return this.options.kind;
    }
    get nativeEvent() {
        return this.event.nativeEvent;
    }
    get position() {
        return this.event.position;
    }
    get defaultPrevented() {
        return this.event.defaultPrevented;
    }
    get panel() {
        return this.options.panel;
    }
    get api() {
        return this.options.api;
    }
    get group() {
        return this.options.group;
    }
    preventDefault() {
        this.event.preventDefault();
    }
    getData() {
        return this.options.getData();
    }
    constructor(event, options) {
        this.event = event;
        this.options = options;
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/options.js":
/*!*****************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/options.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DockviewUnhandledDragOverEvent: () => (/* binding */ DockviewUnhandledDragOverEvent),
/* harmony export */   PROPERTY_KEYS_DOCKVIEW: () => (/* binding */ PROPERTY_KEYS_DOCKVIEW),
/* harmony export */   isGroupOptionsWithGroup: () => (/* binding */ isGroupOptionsWithGroup),
/* harmony export */   isGroupOptionsWithPanel: () => (/* binding */ isGroupOptionsWithPanel),
/* harmony export */   isPanelOptionsWithGroup: () => (/* binding */ isPanelOptionsWithGroup),
/* harmony export */   isPanelOptionsWithPanel: () => (/* binding */ isPanelOptionsWithPanel)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");

class DockviewUnhandledDragOverEvent extends _events__WEBPACK_IMPORTED_MODULE_0__.AcceptableEvent {
    constructor(nativeEvent, target, position, getData, group) {
        super();
        this.nativeEvent = nativeEvent;
        this.target = target;
        this.position = position;
        this.getData = getData;
        this.group = group;
    }
}
const PROPERTY_KEYS_DOCKVIEW = (() => {
    /**
     * by readong the keys from an empty value object TypeScript will error
     * when we add or remove new properties to `DockviewOptions`
     */
    const properties = {
        disableAutoResizing: undefined,
        hideBorders: undefined,
        singleTabMode: undefined,
        disableFloatingGroups: undefined,
        floatingGroupBounds: undefined,
        popoutUrl: undefined,
        defaultRenderer: undefined,
        debug: undefined,
        rootOverlayModel: undefined,
        locked: undefined,
        disableDnd: undefined,
        className: undefined,
        noPanelsOverlay: undefined,
        dndEdges: undefined,
        theme: undefined,
        disableTabsOverflowList: undefined,
        scrollbars: undefined,
    };
    return Object.keys(properties);
})();
function isPanelOptionsWithPanel(data) {
    if (data.referencePanel) {
        return true;
    }
    return false;
}
function isPanelOptionsWithGroup(data) {
    if (data.referenceGroup) {
        return true;
    }
    return false;
}
function isGroupOptionsWithPanel(data) {
    if (data.referencePanel) {
        return true;
    }
    return false;
}
function isGroupOptionsWithGroup(data) {
    if (data.referenceGroup) {
        return true;
    }
    return false;
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/strictEventsSequencing.js":
/*!********************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/strictEventsSequencing.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StrictEventsSequencing: () => (/* binding */ StrictEventsSequencing)
/* harmony export */ });
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");

class StrictEventsSequencing extends _lifecycle__WEBPACK_IMPORTED_MODULE_0__.CompositeDisposable {
    constructor(accessor) {
        super();
        this.accessor = accessor;
        this.init();
    }
    init() {
        const panels = new Set();
        const groups = new Set();
        this.addDisposables(this.accessor.onDidAddPanel((panel) => {
            if (panels.has(panel.api.id)) {
                throw new Error(`dockview: Invalid event sequence. [onDidAddPanel] called for panel ${panel.api.id} but panel already exists`);
            }
            else {
                panels.add(panel.api.id);
            }
        }), this.accessor.onDidRemovePanel((panel) => {
            if (!panels.has(panel.api.id)) {
                throw new Error(`dockview: Invalid event sequence. [onDidRemovePanel] called for panel ${panel.api.id} but panel does not exists`);
            }
            else {
                panels.delete(panel.api.id);
            }
        }), this.accessor.onDidAddGroup((group) => {
            if (groups.has(group.api.id)) {
                throw new Error(`dockview: Invalid event sequence. [onDidAddGroup] called for group ${group.api.id} but group already exists`);
            }
            else {
                groups.add(group.api.id);
            }
        }), this.accessor.onDidRemoveGroup((group) => {
            if (!groups.has(group.api.id)) {
                throw new Error(`dockview: Invalid event sequence. [onDidRemoveGroup] called for group ${group.api.id} but group does not exists`);
            }
            else {
                groups.delete(group.api.id);
            }
        }));
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/theme.js":
/*!***************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/theme.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   themeAbyss: () => (/* binding */ themeAbyss),
/* harmony export */   themeAbyssSpaced: () => (/* binding */ themeAbyssSpaced),
/* harmony export */   themeDark: () => (/* binding */ themeDark),
/* harmony export */   themeDracula: () => (/* binding */ themeDracula),
/* harmony export */   themeLight: () => (/* binding */ themeLight),
/* harmony export */   themeLightSpaced: () => (/* binding */ themeLightSpaced),
/* harmony export */   themeReplit: () => (/* binding */ themeReplit),
/* harmony export */   themeVisualStudio: () => (/* binding */ themeVisualStudio)
/* harmony export */ });
const themeDark = {
    name: 'dark',
    className: 'dockview-theme-dark',
};
const themeLight = {
    name: 'light',
    className: 'dockview-theme-light',
};
const themeVisualStudio = {
    name: 'visualStudio',
    className: 'dockview-theme-vs',
};
const themeAbyss = {
    name: 'abyss',
    className: 'dockview-theme-abyss',
};
const themeDracula = {
    name: 'dracula',
    className: 'dockview-theme-dracula',
};
const themeReplit = {
    name: 'replit',
    className: 'dockview-theme-replit',
    gap: 10,
};
const themeAbyssSpaced = {
    name: 'abyssSpaced',
    className: 'dockview-theme-abyss-spaced',
    gap: 10,
    dndOverlayMounting: 'absolute',
    dndPanelOverlay: 'group',
};
const themeLightSpaced = {
    name: 'lightSpaced',
    className: 'dockview-theme-light-spaced',
    gap: 10,
    dndOverlayMounting: 'absolute',
    dndPanelOverlay: 'group',
};


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dockview/types.js":
/*!***************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dockview/types.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/dom.js":
/*!****************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/dom.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Classnames: () => (/* binding */ Classnames),
/* harmony export */   OverflowObserver: () => (/* binding */ OverflowObserver),
/* harmony export */   addClasses: () => (/* binding */ addClasses),
/* harmony export */   addStyles: () => (/* binding */ addStyles),
/* harmony export */   addTestId: () => (/* binding */ addTestId),
/* harmony export */   disableIframePointEvents: () => (/* binding */ disableIframePointEvents),
/* harmony export */   findRelativeZIndexParent: () => (/* binding */ findRelativeZIndexParent),
/* harmony export */   getDockviewTheme: () => (/* binding */ getDockviewTheme),
/* harmony export */   getDomNodePagePosition: () => (/* binding */ getDomNodePagePosition),
/* harmony export */   getElementsByTagName: () => (/* binding */ getElementsByTagName),
/* harmony export */   isAncestor: () => (/* binding */ isAncestor),
/* harmony export */   isChildEntirelyVisibleWithinParent: () => (/* binding */ isChildEntirelyVisibleWithinParent),
/* harmony export */   isInDocument: () => (/* binding */ isInDocument),
/* harmony export */   onDidWindowMoveEnd: () => (/* binding */ onDidWindowMoveEnd),
/* harmony export */   onDidWindowResizeEnd: () => (/* binding */ onDidWindowResizeEnd),
/* harmony export */   quasiDefaultPrevented: () => (/* binding */ quasiDefaultPrevented),
/* harmony export */   quasiPreventDefault: () => (/* binding */ quasiPreventDefault),
/* harmony export */   removeClasses: () => (/* binding */ removeClasses),
/* harmony export */   shiftAbsoluteElementIntoView: () => (/* binding */ shiftAbsoluteElementIntoView),
/* harmony export */   toggleClass: () => (/* binding */ toggleClass),
/* harmony export */   trackFocus: () => (/* binding */ trackFocus),
/* harmony export */   watchElementResize: () => (/* binding */ watchElementResize)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");


class OverflowObserver extends _lifecycle__WEBPACK_IMPORTED_MODULE_1__.CompositeDisposable {
    constructor(el) {
        super();
        this._onDidChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidChange = this._onDidChange.event;
        this._value = null;
        this.addDisposables(this._onDidChange, watchElementResize(el, (entry) => {
            const hasScrollX = entry.target.scrollWidth > entry.target.clientWidth;
            const hasScrollY = entry.target.scrollHeight > entry.target.clientHeight;
            this._value = { hasScrollX, hasScrollY };
            this._onDidChange.fire(this._value);
        }));
    }
}
function watchElementResize(element, cb) {
    const observer = new ResizeObserver((entires) => {
        /**
         * Fast browser window resize produces Error: ResizeObserver loop limit exceeded.
         * The error isn't visible in browser console, doesn't affect functionality, but degrades performance.
         * See https://stackoverflow.com/questions/49384120/resizeobserver-loop-limit-exceeded/58701523#58701523
         */
        requestAnimationFrame(() => {
            const firstEntry = entires[0];
            cb(firstEntry);
        });
    });
    observer.observe(element);
    return {
        dispose: () => {
            observer.unobserve(element);
            observer.disconnect();
        },
    };
}
const removeClasses = (element, ...classes) => {
    for (const classname of classes) {
        if (element.classList.contains(classname)) {
            element.classList.remove(classname);
        }
    }
};
const addClasses = (element, ...classes) => {
    for (const classname of classes) {
        if (!element.classList.contains(classname)) {
            element.classList.add(classname);
        }
    }
};
const toggleClass = (element, className, isToggled) => {
    const hasClass = element.classList.contains(className);
    if (isToggled && !hasClass) {
        element.classList.add(className);
    }
    if (!isToggled && hasClass) {
        element.classList.remove(className);
    }
};
function isAncestor(testChild, testAncestor) {
    while (testChild) {
        if (testChild === testAncestor) {
            return true;
        }
        testChild = testChild.parentNode;
    }
    return false;
}
function getElementsByTagName(tag, document) {
    return Array.prototype.slice.call(document.querySelectorAll(tag), 0);
}
function trackFocus(element) {
    return new FocusTracker(element);
}
/**
 * Track focus on an element. Ensure tabIndex is set when an HTMLElement is not focusable by default
 */
class FocusTracker extends _lifecycle__WEBPACK_IMPORTED_MODULE_1__.CompositeDisposable {
    constructor(element) {
        super();
        this._onDidFocus = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidFocus = this._onDidFocus.event;
        this._onDidBlur = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidBlur = this._onDidBlur.event;
        this.addDisposables(this._onDidFocus, this._onDidBlur);
        let hasFocus = isAncestor(document.activeElement, element);
        let loosingFocus = false;
        const onFocus = () => {
            loosingFocus = false;
            if (!hasFocus) {
                hasFocus = true;
                this._onDidFocus.fire();
            }
        };
        const onBlur = () => {
            if (hasFocus) {
                loosingFocus = true;
                window.setTimeout(() => {
                    if (loosingFocus) {
                        loosingFocus = false;
                        hasFocus = false;
                        this._onDidBlur.fire();
                    }
                }, 0);
            }
        };
        this._refreshStateHandler = () => {
            const currentNodeHasFocus = isAncestor(document.activeElement, element);
            if (currentNodeHasFocus !== hasFocus) {
                if (hasFocus) {
                    onBlur();
                }
                else {
                    onFocus();
                }
            }
        };
        this.addDisposables((0,_events__WEBPACK_IMPORTED_MODULE_0__.addDisposableListener)(element, 'focus', onFocus, true));
        this.addDisposables((0,_events__WEBPACK_IMPORTED_MODULE_0__.addDisposableListener)(element, 'blur', onBlur, true));
    }
    refreshState() {
        this._refreshStateHandler();
    }
}
// quasi: apparently, but not really; seemingly
const QUASI_PREVENT_DEFAULT_KEY = 'dv-quasiPreventDefault';
// mark an event directly for other listeners to check
function quasiPreventDefault(event) {
    event[QUASI_PREVENT_DEFAULT_KEY] = true;
}
// check if this event has been marked
function quasiDefaultPrevented(event) {
    return event[QUASI_PREVENT_DEFAULT_KEY];
}
function addStyles(document, styleSheetList) {
    const styleSheets = Array.from(styleSheetList);
    for (const styleSheet of styleSheets) {
        if (styleSheet.href) {
            const link = document.createElement('link');
            link.href = styleSheet.href;
            link.type = styleSheet.type;
            link.rel = 'stylesheet';
            document.head.appendChild(link);
        }
        let cssTexts = [];
        try {
            if (styleSheet.cssRules) {
                cssTexts = Array.from(styleSheet.cssRules).map((rule) => rule.cssText);
            }
        }
        catch (err) {
            // security errors (lack of permissions), ignore
        }
        for (const rule of cssTexts) {
            const style = document.createElement('style');
            style.appendChild(document.createTextNode(rule));
            document.head.appendChild(style);
        }
    }
}
function getDomNodePagePosition(domNode) {
    const { left, top, width, height } = domNode.getBoundingClientRect();
    return {
        left: left + window.scrollX,
        top: top + window.scrollY,
        width: width,
        height: height,
    };
}
/**
 * Check whether an element is in the DOM (including the Shadow DOM)
 * @see https://terodox.tech/how-to-tell-if-an-element-is-in-the-dom-including-the-shadow-dom/
 */
function isInDocument(element) {
    let currentElement = element;
    while (currentElement === null || currentElement === void 0 ? void 0 : currentElement.parentNode) {
        if (currentElement.parentNode === document) {
            return true;
        }
        else if (currentElement.parentNode instanceof DocumentFragment) {
            // handle shadow DOMs
            currentElement = currentElement.parentNode.host;
        }
        else {
            currentElement = currentElement.parentNode;
        }
    }
    return false;
}
function addTestId(element, id) {
    element.setAttribute('data-testid', id);
}
/**
 * Should be more efficient than element.querySelectorAll("*") since there
 * is no need to store every element in-memory using this approach
 */
function allTagsNamesInclusiveOfShadowDoms(tagNames) {
    const iframes = [];
    function findIframesInNode(node) {
        if (node.nodeType === Node.ELEMENT_NODE) {
            if (tagNames.includes(node.tagName)) {
                iframes.push(node);
            }
            if (node.shadowRoot) {
                findIframesInNode(node.shadowRoot);
            }
            for (const child of node.children) {
                findIframesInNode(child);
            }
        }
    }
    findIframesInNode(document.documentElement);
    return iframes;
}
function disableIframePointEvents(rootNode = document) {
    const iframes = allTagsNamesInclusiveOfShadowDoms(['IFRAME', 'WEBVIEW']);
    const original = new WeakMap(); // don't hold onto HTMLElement references longer than required
    for (const iframe of iframes) {
        original.set(iframe, iframe.style.pointerEvents);
        iframe.style.pointerEvents = 'none';
    }
    return {
        release: () => {
            var _a;
            for (const iframe of iframes) {
                iframe.style.pointerEvents = (_a = original.get(iframe)) !== null && _a !== void 0 ? _a : 'auto';
            }
            iframes.splice(0, iframes.length); // don't hold onto HTMLElement references longer than required
        },
    };
}
function getDockviewTheme(element) {
    function toClassList(element) {
        const list = [];
        for (let i = 0; i < element.classList.length; i++) {
            list.push(element.classList.item(i));
        }
        return list;
    }
    let theme = undefined;
    let parent = element;
    while (parent !== null) {
        theme = toClassList(parent).find((cls) => cls.startsWith('dockview-theme-'));
        if (typeof theme === 'string') {
            break;
        }
        parent = parent.parentElement;
    }
    return theme;
}
class Classnames {
    constructor(element) {
        this.element = element;
        this._classNames = [];
    }
    setClassNames(classNames) {
        for (const className of this._classNames) {
            toggleClass(this.element, className, false);
        }
        this._classNames = classNames
            .split(' ')
            .filter((v) => v.trim().length > 0);
        for (const className of this._classNames) {
            toggleClass(this.element, className, true);
        }
    }
}
const DEBOUCE_DELAY = 100;
function isChildEntirelyVisibleWithinParent(child, parent) {
    //
    const childPosition = getDomNodePagePosition(child);
    const parentPosition = getDomNodePagePosition(parent);
    if (childPosition.left < parentPosition.left) {
        return false;
    }
    if (childPosition.left + childPosition.width >
        parentPosition.left + parentPosition.width) {
        return false;
    }
    return true;
}
function onDidWindowMoveEnd(window) {
    const emitter = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
    let previousScreenX = window.screenX;
    let previousScreenY = window.screenY;
    let timeout;
    const checkMovement = () => {
        if (window.closed) {
            return;
        }
        const currentScreenX = window.screenX;
        const currentScreenY = window.screenY;
        if (currentScreenX !== previousScreenX ||
            currentScreenY !== previousScreenY) {
            clearTimeout(timeout);
            timeout = setTimeout(() => {
                emitter.fire();
            }, DEBOUCE_DELAY);
            previousScreenX = currentScreenX;
            previousScreenY = currentScreenY;
        }
        requestAnimationFrame(checkMovement);
    };
    checkMovement();
    return emitter;
}
function onDidWindowResizeEnd(element, cb) {
    let resizeTimeout;
    const disposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_1__.CompositeDisposable((0,_events__WEBPACK_IMPORTED_MODULE_0__.addDisposableListener)(element, 'resize', () => {
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(() => {
            cb();
        }, DEBOUCE_DELAY);
    }));
    return disposable;
}
function shiftAbsoluteElementIntoView(element, root, options = { buffer: 10 }) {
    const buffer = options.buffer;
    const rect = element.getBoundingClientRect();
    const rootRect = root.getBoundingClientRect();
    let translateX = 0;
    let translateY = 0;
    const left = rect.left - rootRect.left;
    const top = rect.top - rootRect.top;
    const bottom = rect.bottom - rootRect.bottom;
    const right = rect.right - rootRect.right;
    // Check horizontal overflow
    if (left < buffer) {
        translateX = buffer - left;
    }
    else if (right > buffer) {
        translateX = -buffer - right;
    }
    // Check vertical overflow
    if (top < buffer) {
        translateY = buffer - top;
    }
    else if (bottom > buffer) {
        translateY = -bottom - buffer;
    }
    // Apply the translation if needed
    if (translateX !== 0 || translateY !== 0) {
        element.style.transform = `translate(${translateX}px, ${translateY}px)`;
    }
}
function findRelativeZIndexParent(el) {
    let tmp = el;
    while (tmp && (tmp.style.zIndex === 'auto' || tmp.style.zIndex === '')) {
        tmp = tmp.parentElement;
    }
    return tmp;
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/events.js":
/*!*******************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/events.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AcceptableEvent: () => (/* binding */ AcceptableEvent),
/* harmony export */   AsapEvent: () => (/* binding */ AsapEvent),
/* harmony export */   DockviewEvent: () => (/* binding */ DockviewEvent),
/* harmony export */   Emitter: () => (/* binding */ Emitter),
/* harmony export */   Event: () => (/* binding */ Event),
/* harmony export */   addDisposableListener: () => (/* binding */ addDisposableListener)
/* harmony export */ });
var Event;
(function (Event) {
    Event.any = (...children) => {
        return (listener) => {
            const disposables = children.map((child) => child(listener));
            return {
                dispose: () => {
                    disposables.forEach((d) => {
                        d.dispose();
                    });
                },
            };
        };
    };
})(Event || (Event = {}));
class DockviewEvent {
    constructor() {
        this._defaultPrevented = false;
    }
    get defaultPrevented() {
        return this._defaultPrevented;
    }
    preventDefault() {
        this._defaultPrevented = true;
    }
}
class AcceptableEvent {
    constructor() {
        this._isAccepted = false;
    }
    get isAccepted() {
        return this._isAccepted;
    }
    accept() {
        this._isAccepted = true;
    }
}
class LeakageMonitor {
    constructor() {
        this.events = new Map();
    }
    get size() {
        return this.events.size;
    }
    add(event, stacktrace) {
        this.events.set(event, stacktrace);
    }
    delete(event) {
        this.events.delete(event);
    }
    clear() {
        this.events.clear();
    }
}
class Stacktrace {
    static create() {
        var _a;
        return new Stacktrace((_a = new Error().stack) !== null && _a !== void 0 ? _a : '');
    }
    constructor(value) {
        this.value = value;
    }
    print() {
        console.warn('dockview: stacktrace', this.value);
    }
}
class Listener {
    constructor(callback, stacktrace) {
        this.callback = callback;
        this.stacktrace = stacktrace;
    }
}
// relatively simple event emitter taken from https://github.com/microsoft/vscode/blob/master/src/vs/base/common/event.ts
class Emitter {
    static setLeakageMonitorEnabled(isEnabled) {
        if (isEnabled !== Emitter.ENABLE_TRACKING) {
            Emitter.MEMORY_LEAK_WATCHER.clear();
        }
        Emitter.ENABLE_TRACKING = isEnabled;
    }
    get value() {
        return this._last;
    }
    constructor(options) {
        this.options = options;
        this._listeners = [];
        this._disposed = false;
    }
    get event() {
        if (!this._event) {
            this._event = (callback) => {
                var _a;
                if (((_a = this.options) === null || _a === void 0 ? void 0 : _a.replay) && this._last !== undefined) {
                    callback(this._last);
                }
                const listener = new Listener(callback, Emitter.ENABLE_TRACKING ? Stacktrace.create() : undefined);
                this._listeners.push(listener);
                return {
                    dispose: () => {
                        const index = this._listeners.indexOf(listener);
                        if (index > -1) {
                            this._listeners.splice(index, 1);
                        }
                        else if (Emitter.ENABLE_TRACKING) {
                            // console.warn(
                            //     `dockview: listener already disposed`,
                            //     Stacktrace.create().print()
                            // );
                        }
                    },
                };
            };
            if (Emitter.ENABLE_TRACKING) {
                Emitter.MEMORY_LEAK_WATCHER.add(this._event, Stacktrace.create());
            }
        }
        return this._event;
    }
    fire(e) {
        var _a;
        if ((_a = this.options) === null || _a === void 0 ? void 0 : _a.replay) {
            this._last = e;
        }
        for (const listener of this._listeners) {
            listener.callback(e);
        }
    }
    dispose() {
        if (!this._disposed) {
            this._disposed = true;
            if (this._listeners.length > 0) {
                if (Emitter.ENABLE_TRACKING) {
                    queueMicrotask(() => {
                        var _a;
                        // don't check until stack of execution is completed to allow for out-of-order disposals within the same execution block
                        for (const listener of this._listeners) {
                            console.warn('dockview: stacktrace', (_a = listener.stacktrace) === null || _a === void 0 ? void 0 : _a.print());
                        }
                    });
                }
                this._listeners = [];
            }
            if (Emitter.ENABLE_TRACKING && this._event) {
                Emitter.MEMORY_LEAK_WATCHER.delete(this._event);
            }
        }
    }
}
Emitter.ENABLE_TRACKING = false;
Emitter.MEMORY_LEAK_WATCHER = new LeakageMonitor();
function addDisposableListener(element, type, listener, options) {
    element.addEventListener(type, listener, options);
    return {
        dispose: () => {
            element.removeEventListener(type, listener, options);
        },
    };
}
/**
 *
 * Event Emitter that fires events from a Microtask callback, only one event will fire per event-loop cycle.
 *
 * It's kind of like using an `asapScheduler` in RxJs with additional logic to only fire once per event-loop cycle.
 * This implementation exists to avoid external dependencies.
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/queueMicrotask
 * @see https://rxjs.dev/api/index/const/asapScheduler
 */
class AsapEvent {
    constructor() {
        this._onFired = new Emitter();
        this._currentFireCount = 0;
        this._queued = false;
        this.onEvent = (e) => {
            /**
             * when the event is first subscribed to take note of the current fire count
             */
            const fireCountAtTimeOfEventSubscription = this._currentFireCount;
            return this._onFired.event(() => {
                /**
                 * if the current fire count is greater than the fire count at event subscription
                 * then the event has been fired since we subscribed and it's ok to "on_next" the event.
                 *
                 * if the count is not greater then what we are recieving is an event from the microtask
                 * queue that was triggered before we actually subscribed and therfore we should ignore it.
                 */
                if (this._currentFireCount > fireCountAtTimeOfEventSubscription) {
                    e();
                }
            });
        };
    }
    fire() {
        this._currentFireCount++;
        if (this._queued) {
            return;
        }
        this._queued = true;
        queueMicrotask(() => {
            this._queued = false;
            this._onFired.fire();
        });
    }
    dispose() {
        this._onFired.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/gridview/baseComponentGridview.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/gridview/baseComponentGridview.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseGrid: () => (/* binding */ BaseGrid),
/* harmony export */   toTarget: () => (/* binding */ toTarget)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _gridview__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gridview */ "./node_modules/dockview-core/dist/esm/gridview/gridview.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math */ "./node_modules/dockview-core/dist/esm/math.js");
/* harmony import */ var _splitview_splitview__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../splitview/splitview */ "./node_modules/dockview-core/dist/esm/splitview/splitview.js");
/* harmony import */ var _resizable__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../resizable */ "./node_modules/dockview-core/dist/esm/resizable.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");







const nextLayoutId = (0,_math__WEBPACK_IMPORTED_MODULE_3__.sequentialNumberGenerator)();
function toTarget(direction) {
    switch (direction) {
        case 'left':
            return 'left';
        case 'right':
            return 'right';
        case 'above':
            return 'top';
        case 'below':
            return 'bottom';
        case 'within':
        default:
            return 'center';
    }
}
class BaseGrid extends _resizable__WEBPACK_IMPORTED_MODULE_5__.Resizable {
    get id() {
        return this._id;
    }
    get size() {
        return this._groups.size;
    }
    get groups() {
        return Array.from(this._groups.values()).map((_) => _.value);
    }
    get width() {
        return this.gridview.width;
    }
    get height() {
        return this.gridview.height;
    }
    get minimumHeight() {
        return this.gridview.minimumHeight;
    }
    get maximumHeight() {
        return this.gridview.maximumHeight;
    }
    get minimumWidth() {
        return this.gridview.minimumWidth;
    }
    get maximumWidth() {
        return this.gridview.maximumWidth;
    }
    get activeGroup() {
        return this._activeGroup;
    }
    get locked() {
        return this.gridview.locked;
    }
    set locked(value) {
        this.gridview.locked = value;
    }
    constructor(container, options) {
        var _a;
        super(document.createElement('div'), options.disableAutoResizing);
        this._id = nextLayoutId.next();
        this._groups = new Map();
        this._onDidRemove = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidRemove = this._onDidRemove.event;
        this._onDidAdd = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidAdd = this._onDidAdd.event;
        this._onDidMaximizedChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidMaximizedChange = this._onDidMaximizedChange.event;
        this._onDidActiveChange = new _events__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidActiveChange = this._onDidActiveChange.event;
        this._bufferOnDidLayoutChange = new _events__WEBPACK_IMPORTED_MODULE_0__.AsapEvent();
        this.onDidLayoutChange = this._bufferOnDidLayoutChange.onEvent;
        this._onDidViewVisibilityChangeMicroTaskQueue = new _events__WEBPACK_IMPORTED_MODULE_0__.AsapEvent();
        this.onDidViewVisibilityChangeMicroTaskQueue = this._onDidViewVisibilityChangeMicroTaskQueue.onEvent;
        this.element.style.height = '100%';
        this.element.style.width = '100%';
        this._classNames = new _dom__WEBPACK_IMPORTED_MODULE_6__.Classnames(this.element);
        this._classNames.setClassNames((_a = options.className) !== null && _a !== void 0 ? _a : '');
        // the container is owned by the third-party, do not modify/delete it
        container.appendChild(this.element);
        this.gridview = new _gridview__WEBPACK_IMPORTED_MODULE_1__.Gridview(!!options.proportionalLayout, options.styles, options.orientation, options.locked, options.margin);
        this.gridview.locked = !!options.locked;
        this.element.appendChild(this.gridview.element);
        this.layout(0, 0, true); // set some elements height/widths
        this.addDisposables(this.gridview.onDidMaximizedNodeChange((event) => {
            this._onDidMaximizedChange.fire({
                panel: event.view,
                isMaximized: event.isMaximized,
            });
        }), this.gridview.onDidViewVisibilityChange(() => this._onDidViewVisibilityChangeMicroTaskQueue.fire()), this.onDidViewVisibilityChangeMicroTaskQueue(() => {
            this.layout(this.width, this.height, true);
        }), _lifecycle__WEBPACK_IMPORTED_MODULE_2__.Disposable.from(() => {
            var _a;
            (_a = this.element.parentElement) === null || _a === void 0 ? void 0 : _a.removeChild(this.element);
        }), this.gridview.onDidChange(() => {
            this._bufferOnDidLayoutChange.fire();
        }), _events__WEBPACK_IMPORTED_MODULE_0__.Event.any(this.onDidAdd, this.onDidRemove, this.onDidActiveChange)(() => {
            this._bufferOnDidLayoutChange.fire();
        }), this._onDidMaximizedChange, this._onDidViewVisibilityChangeMicroTaskQueue, this._bufferOnDidLayoutChange);
    }
    setVisible(panel, visible) {
        this.gridview.setViewVisible((0,_gridview__WEBPACK_IMPORTED_MODULE_1__.getGridLocation)(panel.element), visible);
        this._bufferOnDidLayoutChange.fire();
    }
    isVisible(panel) {
        return this.gridview.isViewVisible((0,_gridview__WEBPACK_IMPORTED_MODULE_1__.getGridLocation)(panel.element));
    }
    updateOptions(options) {
        var _a, _b, _c, _d;
        if (typeof options.proportionalLayout === 'boolean') {
            // this.gridview.proportionalLayout = options.proportionalLayout; // not supported
        }
        if (options.orientation) {
            this.gridview.orientation = options.orientation;
        }
        if ('styles' in options) {
            // this.gridview.styles = options.styles; // not supported
        }
        if ('disableResizing' in options) {
            this.disableResizing = (_a = options.disableAutoResizing) !== null && _a !== void 0 ? _a : false;
        }
        if ('locked' in options) {
            this.locked = (_b = options.locked) !== null && _b !== void 0 ? _b : false;
        }
        if ('margin' in options) {
            this.gridview.margin = (_c = options.margin) !== null && _c !== void 0 ? _c : 0;
        }
        if ('className' in options) {
            this._classNames.setClassNames((_d = options.className) !== null && _d !== void 0 ? _d : '');
        }
    }
    maximizeGroup(panel) {
        this.gridview.maximizeView(panel);
        this.doSetGroupActive(panel);
    }
    isMaximizedGroup(panel) {
        return this.gridview.maximizedView() === panel;
    }
    exitMaximizedGroup() {
        this.gridview.exitMaximizedView();
    }
    hasMaximizedGroup() {
        return this.gridview.hasMaximizedView();
    }
    doAddGroup(group, location = [0], size) {
        this.gridview.addView(group, size !== null && size !== void 0 ? size : _splitview_splitview__WEBPACK_IMPORTED_MODULE_4__.Sizing.Distribute, location);
        this._onDidAdd.fire(group);
    }
    doRemoveGroup(group, options) {
        if (!this._groups.has(group.id)) {
            throw new Error('invalid operation');
        }
        const item = this._groups.get(group.id);
        const view = this.gridview.remove(group, _splitview_splitview__WEBPACK_IMPORTED_MODULE_4__.Sizing.Distribute);
        if (item && !(options === null || options === void 0 ? void 0 : options.skipDispose)) {
            item.disposable.dispose();
            item.value.dispose();
            this._groups.delete(group.id);
            this._onDidRemove.fire(group);
        }
        if (!(options === null || options === void 0 ? void 0 : options.skipActive) && this._activeGroup === group) {
            const groups = Array.from(this._groups.values());
            this.doSetGroupActive(groups.length > 0 ? groups[0].value : undefined);
        }
        return view;
    }
    getPanel(id) {
        var _a;
        return (_a = this._groups.get(id)) === null || _a === void 0 ? void 0 : _a.value;
    }
    doSetGroupActive(group) {
        if (this._activeGroup === group) {
            return;
        }
        if (this._activeGroup) {
            this._activeGroup.setActive(false);
        }
        if (group) {
            group.setActive(true);
        }
        this._activeGroup = group;
        this._onDidActiveChange.fire(group);
    }
    removeGroup(group) {
        this.doRemoveGroup(group);
    }
    moveToNext(options) {
        var _a;
        if (!options) {
            options = {};
        }
        if (!options.group) {
            if (!this.activeGroup) {
                return;
            }
            options.group = this.activeGroup;
        }
        const location = (0,_gridview__WEBPACK_IMPORTED_MODULE_1__.getGridLocation)(options.group.element);
        const next = (_a = this.gridview.next(location)) === null || _a === void 0 ? void 0 : _a.view;
        this.doSetGroupActive(next);
    }
    moveToPrevious(options) {
        var _a;
        if (!options) {
            options = {};
        }
        if (!options.group) {
            if (!this.activeGroup) {
                return;
            }
            options.group = this.activeGroup;
        }
        const location = (0,_gridview__WEBPACK_IMPORTED_MODULE_1__.getGridLocation)(options.group.element);
        const next = (_a = this.gridview.previous(location)) === null || _a === void 0 ? void 0 : _a.view;
        this.doSetGroupActive(next);
    }
    layout(width, height, forceResize) {
        const different = forceResize || width !== this.width || height !== this.height;
        if (!different) {
            return;
        }
        this.gridview.element.style.height = `${height}px`;
        this.gridview.element.style.width = `${width}px`;
        this.gridview.layout(width, height);
    }
    dispose() {
        this._onDidActiveChange.dispose();
        this._onDidAdd.dispose();
        this._onDidRemove.dispose();
        for (const group of this.groups) {
            group.dispose();
        }
        this.gridview.dispose();
        super.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/gridview/basePanelView.js":
/*!***********************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/gridview/basePanelView.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BasePanelView: () => (/* binding */ BasePanelView)
/* harmony export */ });
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _api_panelApi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../api/panelApi */ "./node_modules/dockview-core/dist/esm/api/panelApi.js");



class BasePanelView extends _lifecycle__WEBPACK_IMPORTED_MODULE_1__.CompositeDisposable {
    get element() {
        return this._element;
    }
    get width() {
        return this._width;
    }
    get height() {
        return this._height;
    }
    get params() {
        var _a;
        return (_a = this._params) === null || _a === void 0 ? void 0 : _a.params;
    }
    constructor(id, component, api) {
        super();
        this.id = id;
        this.component = component;
        this.api = api;
        this._height = 0;
        this._width = 0;
        this._element = document.createElement('div');
        this._element.tabIndex = -1;
        this._element.style.outline = 'none';
        this._element.style.height = '100%';
        this._element.style.width = '100%';
        this._element.style.overflow = 'hidden';
        const focusTracker = (0,_dom__WEBPACK_IMPORTED_MODULE_0__.trackFocus)(this._element);
        this.addDisposables(this.api, focusTracker.onDidFocus(() => {
            this.api._onDidChangeFocus.fire({ isFocused: true });
        }), focusTracker.onDidBlur(() => {
            this.api._onDidChangeFocus.fire({ isFocused: false });
        }), focusTracker);
    }
    focus() {
        const event = new _api_panelApi__WEBPACK_IMPORTED_MODULE_2__.WillFocusEvent();
        this.api._onWillFocus.fire(event);
        if (event.defaultPrevented) {
            return;
        }
        this._element.focus();
    }
    layout(width, height) {
        this._width = width;
        this._height = height;
        this.api._onDidDimensionChange.fire({ width, height });
        if (this.part) {
            if (this._params) {
                this.part.update(this._params.params);
            }
        }
    }
    init(parameters) {
        this._params = parameters;
        this.part = this.getComponent();
    }
    update(event) {
        var _a, _b;
        // merge the new parameters with the existing parameters
        this._params = Object.assign(Object.assign({}, this._params), { params: Object.assign(Object.assign({}, (_a = this._params) === null || _a === void 0 ? void 0 : _a.params), event.params) });
        /**
         * delete new keys that have a value of undefined,
         * allow values of null
         */
        for (const key of Object.keys(event.params)) {
            if (event.params[key] === undefined) {
                delete this._params.params[key];
            }
        }
        // update the view with the updated props
        (_b = this.part) === null || _b === void 0 ? void 0 : _b.update({ params: this._params.params });
    }
    toJSON() {
        var _a, _b;
        const params = (_b = (_a = this._params) === null || _a === void 0 ? void 0 : _a.params) !== null && _b !== void 0 ? _b : {};
        return {
            id: this.id,
            component: this.component,
            params: Object.keys(params).length > 0 ? params : undefined,
        };
    }
    dispose() {
        var _a;
        this.api.dispose();
        (_a = this.part) === null || _a === void 0 ? void 0 : _a.dispose();
        super.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/gridview/branchNode.js":
/*!********************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/gridview/branchNode.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BranchNode: () => (/* binding */ BranchNode)
/* harmony export */ });
/* harmony import */ var _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../splitview/splitview */ "./node_modules/dockview-core/dist/esm/splitview/splitview.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _leafNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./leafNode */ "./node_modules/dockview-core/dist/esm/gridview/leafNode.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/*---------------------------------------------------------------------------------------------
 * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:
 * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid
 *--------------------------------------------------------------------------------------------*/




class BranchNode extends _lifecycle__WEBPACK_IMPORTED_MODULE_3__.CompositeDisposable {
    get width() {
        return this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
            ? this.size
            : this.orthogonalSize;
    }
    get height() {
        return this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
            ? this.orthogonalSize
            : this.size;
    }
    get minimumSize() {
        return this.children.length === 0
            ? 0
            : Math.max(...this.children.map((c, index) => this.splitview.isViewVisible(index)
                ? c.minimumOrthogonalSize
                : 0));
    }
    get maximumSize() {
        return Math.min(...this.children.map((c, index) => this.splitview.isViewVisible(index)
            ? c.maximumOrthogonalSize
            : Number.POSITIVE_INFINITY));
    }
    get minimumOrthogonalSize() {
        return this.splitview.minimumSize;
    }
    get maximumOrthogonalSize() {
        return this.splitview.maximumSize;
    }
    get orthogonalSize() {
        return this._orthogonalSize;
    }
    get size() {
        return this._size;
    }
    get minimumWidth() {
        return this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
            ? this.minimumOrthogonalSize
            : this.minimumSize;
    }
    get minimumHeight() {
        return this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
            ? this.minimumSize
            : this.minimumOrthogonalSize;
    }
    get maximumWidth() {
        return this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
            ? this.maximumOrthogonalSize
            : this.maximumSize;
    }
    get maximumHeight() {
        return this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
            ? this.maximumSize
            : this.maximumOrthogonalSize;
    }
    get priority() {
        if (this.children.length === 0) {
            return _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.LayoutPriority.Normal;
        }
        const priorities = this.children.map((c) => typeof c.priority === 'undefined'
            ? _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.LayoutPriority.Normal
            : c.priority);
        if (priorities.some((p) => p === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.LayoutPriority.High)) {
            return _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.LayoutPriority.High;
        }
        else if (priorities.some((p) => p === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.LayoutPriority.Low)) {
            return _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.LayoutPriority.Low;
        }
        return _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.LayoutPriority.Normal;
    }
    get disabled() {
        return this.splitview.disabled;
    }
    set disabled(value) {
        this.splitview.disabled = value;
    }
    get margin() {
        return this.splitview.margin;
    }
    set margin(value) {
        this.splitview.margin = value;
        this.children.forEach((child) => {
            if (child instanceof BranchNode) {
                child.margin = value;
            }
        });
    }
    constructor(orientation, proportionalLayout, styles, size, orthogonalSize, disabled, margin, childDescriptors) {
        super();
        this.orientation = orientation;
        this.proportionalLayout = proportionalLayout;
        this.styles = styles;
        this._childrenDisposable = _lifecycle__WEBPACK_IMPORTED_MODULE_3__.Disposable.NONE;
        this.children = [];
        this._onDidChange = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidChange = this._onDidChange.event;
        this._onDidVisibilityChange = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidVisibilityChange = this._onDidVisibilityChange.event;
        this._orthogonalSize = orthogonalSize;
        this._size = size;
        this.element = document.createElement('div');
        this.element.className = 'dv-branch-node';
        if (!childDescriptors) {
            this.splitview = new _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Splitview(this.element, {
                orientation: this.orientation,
                proportionalLayout,
                styles,
                margin,
            });
            this.splitview.layout(this.size, this.orthogonalSize);
        }
        else {
            const descriptor = {
                views: childDescriptors.map((childDescriptor) => {
                    return {
                        view: childDescriptor.node,
                        size: childDescriptor.node.size,
                        visible: childDescriptor.node instanceof _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode &&
                            childDescriptor.visible !== undefined
                            ? childDescriptor.visible
                            : true,
                    };
                }),
                size: this.orthogonalSize,
            };
            this.children = childDescriptors.map((c) => c.node);
            this.splitview = new _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Splitview(this.element, {
                orientation: this.orientation,
                descriptor,
                proportionalLayout,
                styles,
                margin,
            });
        }
        this.disabled = disabled;
        this.addDisposables(this._onDidChange, this._onDidVisibilityChange, this.splitview.onDidSashEnd(() => {
            this._onDidChange.fire({});
        }));
        this.setupChildrenEvents();
    }
    setVisible(_visible) {
        // noop
    }
    isChildVisible(index) {
        if (index < 0 || index >= this.children.length) {
            throw new Error('Invalid index');
        }
        return this.splitview.isViewVisible(index);
    }
    setChildVisible(index, visible) {
        if (index < 0 || index >= this.children.length) {
            throw new Error('Invalid index');
        }
        if (this.splitview.isViewVisible(index) === visible) {
            return;
        }
        const wereAllChildrenHidden = this.splitview.contentSize === 0;
        this.splitview.setViewVisible(index, visible);
        // }
        const areAllChildrenHidden = this.splitview.contentSize === 0;
        // If all children are hidden then the parent should hide the entire splitview
        // If the entire splitview is hidden then the parent should show the splitview when a child is shown
        if ((visible && wereAllChildrenHidden) ||
            (!visible && areAllChildrenHidden)) {
            this._onDidVisibilityChange.fire({ visible });
        }
    }
    moveChild(from, to) {
        if (from === to) {
            return;
        }
        if (from < 0 || from >= this.children.length) {
            throw new Error('Invalid from index');
        }
        if (from < to) {
            to--;
        }
        this.splitview.moveView(from, to);
        const child = this._removeChild(from);
        this._addChild(child, to);
    }
    getChildSize(index) {
        if (index < 0 || index >= this.children.length) {
            throw new Error('Invalid index');
        }
        return this.splitview.getViewSize(index);
    }
    resizeChild(index, size) {
        if (index < 0 || index >= this.children.length) {
            throw new Error('Invalid index');
        }
        this.splitview.resizeView(index, size);
    }
    layout(size, orthogonalSize) {
        this._size = orthogonalSize;
        this._orthogonalSize = size;
        this.splitview.layout(orthogonalSize, size);
    }
    addChild(node, size, index, skipLayout) {
        if (index < 0 || index > this.children.length) {
            throw new Error('Invalid index');
        }
        this.splitview.addView(node, size, index, skipLayout);
        this._addChild(node, index);
    }
    getChildCachedVisibleSize(index) {
        if (index < 0 || index >= this.children.length) {
            throw new Error('Invalid index');
        }
        return this.splitview.getViewCachedVisibleSize(index);
    }
    removeChild(index, sizing) {
        if (index < 0 || index >= this.children.length) {
            throw new Error('Invalid index');
        }
        this.splitview.removeView(index, sizing);
        return this._removeChild(index);
    }
    _addChild(node, index) {
        this.children.splice(index, 0, node);
        this.setupChildrenEvents();
    }
    _removeChild(index) {
        const [child] = this.children.splice(index, 1);
        this.setupChildrenEvents();
        return child;
    }
    setupChildrenEvents() {
        this._childrenDisposable.dispose();
        this._childrenDisposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_3__.CompositeDisposable(_events__WEBPACK_IMPORTED_MODULE_1__.Event.any(...this.children.map((c) => c.onDidChange))((e) => {
            /**
             * indicate a change has occured to allows any re-rendering but don't bubble
             * event because that was specific to this branch
             */
            this._onDidChange.fire({ size: e.orthogonalSize });
        }), ...this.children.map((c, i) => {
            if (c instanceof BranchNode) {
                return c.onDidVisibilityChange(({ visible }) => {
                    this.setChildVisible(i, visible);
                });
            }
            return _lifecycle__WEBPACK_IMPORTED_MODULE_3__.Disposable.NONE;
        }));
    }
    dispose() {
        this._childrenDisposable.dispose();
        this.splitview.dispose();
        this.children.forEach((child) => child.dispose());
        super.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/gridview/gridview.js":
/*!******************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/gridview/gridview.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Gridview: () => (/* binding */ Gridview),
/* harmony export */   getDirectionOrientation: () => (/* binding */ getDirectionOrientation),
/* harmony export */   getGridLocation: () => (/* binding */ getGridLocation),
/* harmony export */   getLocationOrientation: () => (/* binding */ getLocationOrientation),
/* harmony export */   getRelativeLocation: () => (/* binding */ getRelativeLocation),
/* harmony export */   indexInParent: () => (/* binding */ indexInParent),
/* harmony export */   isGridBranchNode: () => (/* binding */ isGridBranchNode),
/* harmony export */   orthogonal: () => (/* binding */ orthogonal)
/* harmony export */ });
/* harmony import */ var _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../splitview/splitview */ "./node_modules/dockview-core/dist/esm/splitview/splitview.js");
/* harmony import */ var _array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../array */ "./node_modules/dockview-core/dist/esm/array.js");
/* harmony import */ var _leafNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./leafNode */ "./node_modules/dockview-core/dist/esm/gridview/leafNode.js");
/* harmony import */ var _branchNode__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./branchNode */ "./node_modules/dockview-core/dist/esm/gridview/branchNode.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/*---------------------------------------------------------------------------------------------
 * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:
 * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid
 *--------------------------------------------------------------------------------------------*/






function findLeaf(candiateNode, last) {
    if (candiateNode instanceof _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode) {
        return candiateNode;
    }
    if (candiateNode instanceof _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode) {
        return findLeaf(candiateNode.children[last ? candiateNode.children.length - 1 : 0], last);
    }
    throw new Error('invalid node');
}
function cloneNode(node, size, orthogonalSize) {
    if (node instanceof _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode) {
        const result = new _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode(node.orientation, node.proportionalLayout, node.styles, size, orthogonalSize, node.disabled, node.margin);
        for (let i = node.children.length - 1; i >= 0; i--) {
            const child = node.children[i];
            result.addChild(cloneNode(child, child.size, child.orthogonalSize), child.size, 0, true);
        }
        return result;
    }
    else {
        return new _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode(node.view, node.orientation, orthogonalSize);
    }
}
function flipNode(node, size, orthogonalSize) {
    if (node instanceof _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode) {
        const result = new _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode(orthogonal(node.orientation), node.proportionalLayout, node.styles, size, orthogonalSize, node.disabled, node.margin);
        let totalSize = 0;
        for (let i = node.children.length - 1; i >= 0; i--) {
            const child = node.children[i];
            const childSize = child instanceof _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode ? child.orthogonalSize : child.size;
            let newSize = node.size === 0
                ? 0
                : Math.round((size * childSize) / node.size);
            totalSize += newSize;
            // The last view to add should adjust to rounding errors
            if (i === 0) {
                newSize += size - totalSize;
            }
            result.addChild(flipNode(child, orthogonalSize, newSize), newSize, 0, true);
        }
        return result;
    }
    else {
        return new _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode(node.view, orthogonal(node.orientation), orthogonalSize);
    }
}
function indexInParent(element) {
    const parentElement = element.parentElement;
    if (!parentElement) {
        throw new Error('Invalid grid element');
    }
    let el = parentElement.firstElementChild;
    let index = 0;
    while (el !== element && el !== parentElement.lastElementChild && el) {
        el = el.nextElementSibling;
        index++;
    }
    return index;
}
/**
 * Find the grid location of a specific DOM element by traversing the parent
 * chain and finding each child index on the way.
 *
 * This will break as soon as DOM structures of the Splitview or Gridview change.
 */
function getGridLocation(element) {
    const parentElement = element.parentElement;
    if (!parentElement) {
        throw new Error('Invalid grid element');
    }
    if (/\bdv-grid-view\b/.test(parentElement.className)) {
        return [];
    }
    const index = indexInParent(parentElement);
    const ancestor = parentElement.parentElement.parentElement.parentElement;
    return [...getGridLocation(ancestor), index];
}
function getRelativeLocation(rootOrientation, location, direction) {
    const orientation = getLocationOrientation(rootOrientation, location);
    const directionOrientation = getDirectionOrientation(direction);
    if (orientation === directionOrientation) {
        const [rest, _index] = (0,_array__WEBPACK_IMPORTED_MODULE_1__.tail)(location);
        let index = _index;
        if (direction === 'right' || direction === 'bottom') {
            index += 1;
        }
        return [...rest, index];
    }
    else {
        const index = direction === 'right' || direction === 'bottom' ? 1 : 0;
        return [...location, index];
    }
}
function getDirectionOrientation(direction) {
    return direction === 'top' || direction === 'bottom'
        ? _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.VERTICAL
        : _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL;
}
function getLocationOrientation(rootOrientation, location) {
    return location.length % 2 === 0
        ? orthogonal(rootOrientation)
        : rootOrientation;
}
const orthogonal = (orientation) => orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
    ? _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.VERTICAL
    : _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL;
function isGridBranchNode(node) {
    return !!node.children;
}
const serializeBranchNode = (node, orientation) => {
    const size = orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.VERTICAL ? node.box.width : node.box.height;
    if (!isGridBranchNode(node)) {
        if (typeof node.cachedVisibleSize === 'number') {
            return {
                type: 'leaf',
                data: node.view.toJSON(),
                size: node.cachedVisibleSize,
                visible: false,
            };
        }
        return { type: 'leaf', data: node.view.toJSON(), size };
    }
    return {
        type: 'branch',
        data: node.children.map((c) => serializeBranchNode(c, orthogonal(orientation))),
        size,
    };
};
class Gridview {
    get length() {
        return this._root ? this._root.children.length : 0;
    }
    get orientation() {
        return this.root.orientation;
    }
    set orientation(orientation) {
        if (this.root.orientation === orientation) {
            return;
        }
        const { size, orthogonalSize } = this.root;
        this.root = flipNode(this.root, orthogonalSize, size);
        this.root.layout(size, orthogonalSize);
    }
    get width() {
        return this.root.width;
    }
    get height() {
        return this.root.height;
    }
    get minimumWidth() {
        return this.root.minimumWidth;
    }
    get minimumHeight() {
        return this.root.minimumHeight;
    }
    get maximumWidth() {
        return this.root.maximumHeight;
    }
    get maximumHeight() {
        return this.root.maximumHeight;
    }
    get locked() {
        return this._locked;
    }
    set locked(value) {
        this._locked = value;
        const branch = [this.root];
        /**
         * simple depth-first-search to cover all nodes
         *
         * @see https://en.wikipedia.org/wiki/Depth-first_search
         */
        while (branch.length > 0) {
            const node = branch.pop();
            if (node instanceof _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode) {
                node.disabled = value;
                branch.push(...node.children);
            }
        }
    }
    get margin() {
        return this._margin;
    }
    set margin(value) {
        this._margin = value;
        this.root.margin = value;
    }
    maximizedView() {
        var _a;
        return (_a = this._maximizedNode) === null || _a === void 0 ? void 0 : _a.leaf.view;
    }
    hasMaximizedView() {
        return this._maximizedNode !== undefined;
    }
    maximizeView(view) {
        var _a;
        const location = getGridLocation(view.element);
        const [_, node] = this.getNode(location);
        if (!(node instanceof _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode)) {
            return;
        }
        if (((_a = this._maximizedNode) === null || _a === void 0 ? void 0 : _a.leaf) === node) {
            return;
        }
        if (this.hasMaximizedView()) {
            this.exitMaximizedView();
        }
        serializeBranchNode(this.getView(), this.orientation);
        const hiddenOnMaximize = [];
        function hideAllViewsBut(parent, exclude) {
            for (let i = 0; i < parent.children.length; i++) {
                const child = parent.children[i];
                if (child instanceof _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode) {
                    if (child !== exclude) {
                        if (parent.isChildVisible(i)) {
                            parent.setChildVisible(i, false);
                        }
                        else {
                            hiddenOnMaximize.push(child);
                        }
                    }
                }
                else {
                    hideAllViewsBut(child, exclude);
                }
            }
        }
        hideAllViewsBut(this.root, node);
        this._maximizedNode = { leaf: node, hiddenOnMaximize };
        this._onDidMaximizedNodeChange.fire({
            view: node.view,
            isMaximized: true,
        });
    }
    exitMaximizedView() {
        if (!this._maximizedNode) {
            return;
        }
        const hiddenOnMaximize = this._maximizedNode.hiddenOnMaximize;
        function showViewsInReverseOrder(parent) {
            for (let index = parent.children.length - 1; index >= 0; index--) {
                const child = parent.children[index];
                if (child instanceof _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode) {
                    if (!hiddenOnMaximize.includes(child)) {
                        parent.setChildVisible(index, true);
                    }
                }
                else {
                    showViewsInReverseOrder(child);
                }
            }
        }
        showViewsInReverseOrder(this.root);
        const tmp = this._maximizedNode.leaf;
        this._maximizedNode = undefined;
        this._onDidMaximizedNodeChange.fire({
            view: tmp.view,
            isMaximized: false,
        });
    }
    serialize() {
        const maximizedView = this.maximizedView();
        let maxmizedViewLocation;
        if (maximizedView) {
            /**
             * The minimum information we can get away with in order to serialize a maxmized view is it's location within the grid
             * which is represented as a branch of indices
             */
            maxmizedViewLocation = getGridLocation(maximizedView.element);
        }
        if (this.hasMaximizedView()) {
            /**
             * the saved layout cannot be in its maxmized state otherwise all of the underlying
             * view dimensions will be wrong
             *
             * To counteract this we temporaily remove the maximized view to compute the serialized output
             * of the grid before adding back the maxmized view as to not alter the layout from the users
             * perspective when `.toJSON()` is called
             */
            this.exitMaximizedView();
        }
        const root = serializeBranchNode(this.getView(), this.orientation);
        const resullt = {
            root,
            width: this.width,
            height: this.height,
            orientation: this.orientation,
        };
        if (maxmizedViewLocation) {
            resullt.maximizedNode = {
                location: maxmizedViewLocation,
            };
        }
        if (maximizedView) {
            // replace any maximzied view that was removed for serialization purposes
            this.maximizeView(maximizedView);
        }
        return resullt;
    }
    dispose() {
        this.disposable.dispose();
        this._onDidChange.dispose();
        this._onDidMaximizedNodeChange.dispose();
        this._onDidViewVisibilityChange.dispose();
        this.root.dispose();
        this._maximizedNode = undefined;
        this.element.remove();
    }
    clear() {
        const orientation = this.root.orientation;
        this.root = new _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode(orientation, this.proportionalLayout, this.styles, this.root.size, this.root.orthogonalSize, this.locked, this.margin);
    }
    deserialize(json, deserializer) {
        const orientation = json.orientation;
        const height = orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.VERTICAL ? json.height : json.width;
        this._deserialize(json.root, orientation, deserializer, height);
        /**
         * The deserialied layout must be positioned through this.layout(...)
         * before any maximizedNode can be positioned
         */
        this.layout(json.width, json.height);
        if (json.maximizedNode) {
            const location = json.maximizedNode.location;
            const [_, node] = this.getNode(location);
            if (!(node instanceof _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode)) {
                return;
            }
            this.maximizeView(node.view);
        }
    }
    _deserialize(root, orientation, deserializer, orthogonalSize) {
        this.root = this._deserializeNode(root, orientation, deserializer, orthogonalSize);
    }
    _deserializeNode(node, orientation, deserializer, orthogonalSize) {
        var _a;
        let result;
        if (node.type === 'branch') {
            const serializedChildren = node.data;
            const children = serializedChildren.map((serializedChild) => {
                return {
                    node: this._deserializeNode(serializedChild, orthogonal(orientation), deserializer, node.size),
                    visible: serializedChild.visible,
                };
            });
            result = new _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode(orientation, this.proportionalLayout, this.styles, node.size, // <- orthogonal size - flips at each depth
            orthogonalSize, // <- size - flips at each depth,
            this.locked, this.margin, children);
        }
        else {
            const view = deserializer.fromJSON(node);
            if (typeof node.visible === 'boolean') {
                (_a = view.setVisible) === null || _a === void 0 ? void 0 : _a.call(view, node.visible);
            }
            result = new _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode(view, orientation, orthogonalSize, node.size);
        }
        return result;
    }
    get root() {
        return this._root;
    }
    set root(root) {
        const oldRoot = this._root;
        if (oldRoot) {
            oldRoot.dispose();
            this._maximizedNode = undefined;
            this.element.removeChild(oldRoot.element);
        }
        this._root = root;
        this.element.appendChild(this._root.element);
        this.disposable.value = this._root.onDidChange((e) => {
            this._onDidChange.fire(e);
        });
    }
    normalize() {
        if (!this._root) {
            return;
        }
        if (this._root.children.length !== 1) {
            return;
        }
        const oldRoot = this.root;
        // can remove one level of redundant branching if there is only a single child
        const childReference = oldRoot.children[0];
        if (childReference instanceof _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode) {
            return;
        }
        oldRoot.element.remove();
        const child = oldRoot.removeChild(0); // Remove child to prevent double disposal
        oldRoot.dispose(); // Dispose old root (won't dispose removed child)
        child.dispose(); // Dispose the removed child
        this._root = cloneNode(childReference, childReference.size, childReference.orthogonalSize);
        this.element.appendChild(this._root.element);
        this.disposable.value = this._root.onDidChange((e) => {
            this._onDidChange.fire(e);
        });
    }
    /**
     * If the root is orientated as a VERTICAL node then nest the existing root within a new HORIZIONTAL root node
     * If the root is orientated as a HORIZONTAL node then nest the existing root within a new VERITCAL root node
     */
    insertOrthogonalSplitviewAtRoot() {
        if (!this._root) {
            return;
        }
        const oldRoot = this.root;
        oldRoot.element.remove();
        this._root = new _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode(orthogonal(oldRoot.orientation), this.proportionalLayout, this.styles, this.root.orthogonalSize, this.root.size, this.locked, this.margin);
        if (oldRoot.children.length === 0) {
            // no data so no need to add anything back in
        }
        else if (oldRoot.children.length === 1) {
            // can remove one level of redundant branching if there is only a single child
            const childReference = oldRoot.children[0];
            const child = oldRoot.removeChild(0); // remove to prevent disposal when disposing of unwanted root
            child.dispose();
            oldRoot.dispose();
            this._root.addChild(
            /**
             * the child node will have the same orientation as the new root since
             * we are removing the inbetween node.
             * the entire 'tree' must be flipped recursively to ensure that the orientation
             * flips at each level
             */
            flipNode(childReference, childReference.orthogonalSize, childReference.size), _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Sizing.Distribute, 0);
        }
        else {
            this._root.addChild(oldRoot, _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Sizing.Distribute, 0);
        }
        this.element.appendChild(this._root.element);
        this.disposable.value = this._root.onDidChange((e) => {
            this._onDidChange.fire(e);
        });
    }
    next(location) {
        return this.progmaticSelect(location);
    }
    previous(location) {
        return this.progmaticSelect(location, true);
    }
    getView(location) {
        const node = location ? this.getNode(location)[1] : this.root;
        return this._getViews(node, this.orientation);
    }
    _getViews(node, orientation, cachedVisibleSize) {
        const box = { height: node.height, width: node.width };
        if (node instanceof _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode) {
            return { box, view: node.view, cachedVisibleSize };
        }
        const children = [];
        for (let i = 0; i < node.children.length; i++) {
            const child = node.children[i];
            const nodeCachedVisibleSize = node.getChildCachedVisibleSize(i);
            children.push(this._getViews(child, orthogonal(orientation), nodeCachedVisibleSize));
        }
        return { box, children };
    }
    progmaticSelect(location, reverse = false) {
        const [path, node] = this.getNode(location);
        if (!(node instanceof _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode)) {
            throw new Error('invalid location');
        }
        for (let i = path.length - 1; i > -1; i--) {
            const n = path[i];
            const l = location[i] || 0;
            const canProgressInCurrentLevel = reverse
                ? l - 1 > -1
                : l + 1 < n.children.length;
            if (canProgressInCurrentLevel) {
                return findLeaf(n.children[reverse ? l - 1 : l + 1], reverse);
            }
        }
        return findLeaf(this.root, reverse);
    }
    constructor(proportionalLayout, styles, orientation, locked, margin) {
        this.proportionalLayout = proportionalLayout;
        this.styles = styles;
        this._locked = false;
        this._margin = 0;
        this._maximizedNode = undefined;
        this.disposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_5__.MutableDisposable();
        this._onDidChange = new _events__WEBPACK_IMPORTED_MODULE_4__.Emitter();
        this.onDidChange = this._onDidChange.event;
        this._onDidViewVisibilityChange = new _events__WEBPACK_IMPORTED_MODULE_4__.Emitter();
        this.onDidViewVisibilityChange = this._onDidViewVisibilityChange.event;
        this._onDidMaximizedNodeChange = new _events__WEBPACK_IMPORTED_MODULE_4__.Emitter();
        this.onDidMaximizedNodeChange = this._onDidMaximizedNodeChange.event;
        this.element = document.createElement('div');
        this.element.className = 'dv-grid-view';
        this._locked = locked !== null && locked !== void 0 ? locked : false;
        this._margin = margin !== null && margin !== void 0 ? margin : 0;
        this.root = new _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode(orientation, proportionalLayout, styles, 0, 0, this.locked, this.margin);
    }
    isViewVisible(location) {
        const [rest, index] = (0,_array__WEBPACK_IMPORTED_MODULE_1__.tail)(location);
        const [, parent] = this.getNode(rest);
        if (!(parent instanceof _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode)) {
            throw new Error('Invalid from location');
        }
        return parent.isChildVisible(index);
    }
    setViewVisible(location, visible) {
        if (this.hasMaximizedView()) {
            this.exitMaximizedView();
        }
        const [rest, index] = (0,_array__WEBPACK_IMPORTED_MODULE_1__.tail)(location);
        const [, parent] = this.getNode(rest);
        if (!(parent instanceof _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode)) {
            throw new Error('Invalid from location');
        }
        this._onDidViewVisibilityChange.fire();
        parent.setChildVisible(index, visible);
    }
    moveView(parentLocation, from, to) {
        if (this.hasMaximizedView()) {
            this.exitMaximizedView();
        }
        const [, parent] = this.getNode(parentLocation);
        if (!(parent instanceof _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode)) {
            throw new Error('Invalid location');
        }
        parent.moveChild(from, to);
    }
    addView(view, size, location) {
        if (this.hasMaximizedView()) {
            this.exitMaximizedView();
        }
        const [rest, index] = (0,_array__WEBPACK_IMPORTED_MODULE_1__.tail)(location);
        const [pathToParent, parent] = this.getNode(rest);
        if (parent instanceof _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode) {
            const node = new _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode(view, orthogonal(parent.orientation), parent.orthogonalSize);
            parent.addChild(node, size, index);
        }
        else {
            const [grandParent, ..._] = [...pathToParent].reverse();
            const [parentIndex, ...__] = [...rest].reverse();
            let newSiblingSize = 0;
            const newSiblingCachedVisibleSize = grandParent.getChildCachedVisibleSize(parentIndex);
            if (typeof newSiblingCachedVisibleSize === 'number') {
                newSiblingSize = _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Sizing.Invisible(newSiblingCachedVisibleSize);
            }
            const child = grandParent.removeChild(parentIndex);
            child.dispose();
            const newParent = new _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode(parent.orientation, this.proportionalLayout, this.styles, parent.size, parent.orthogonalSize, this.locked, this.margin);
            grandParent.addChild(newParent, parent.size, parentIndex);
            const newSibling = new _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode(parent.view, grandParent.orientation, parent.size);
            newParent.addChild(newSibling, newSiblingSize, 0);
            if (typeof size !== 'number' && size.type === 'split') {
                size = { type: 'split', index: 0 };
            }
            const node = new _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode(view, grandParent.orientation, parent.size);
            newParent.addChild(node, size, index);
        }
    }
    remove(view, sizing) {
        const location = getGridLocation(view.element);
        return this.removeView(location, sizing);
    }
    removeView(location, sizing) {
        if (this.hasMaximizedView()) {
            this.exitMaximizedView();
        }
        const [rest, index] = (0,_array__WEBPACK_IMPORTED_MODULE_1__.tail)(location);
        const [pathToParent, parent] = this.getNode(rest);
        if (!(parent instanceof _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode)) {
            throw new Error('Invalid location');
        }
        const nodeToRemove = parent.children[index];
        if (!(nodeToRemove instanceof _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode)) {
            throw new Error('Invalid location');
        }
        parent.removeChild(index, sizing);
        nodeToRemove.dispose();
        if (parent.children.length !== 1) {
            return nodeToRemove.view;
        }
        // if the parent has only one child and we know the parent is a BranchNode we can make the tree
        // more efficiently spaced by replacing the parent BranchNode with the child.
        // if that child is a LeafNode then we simply replace the BranchNode with the child otherwise if the child
        // is a BranchNode too we should spread it's children into the grandparent.
        // refer to the remaining child as the sibling
        const sibling = parent.children[0];
        if (pathToParent.length === 0) {
            // if the parent is root
            if (sibling instanceof _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode) {
                // if the sibling is a leaf node no action is required
                return nodeToRemove.view;
            }
            // otherwise the sibling is a branch node. since the parent is the root and the root has only one child
            // which is a branch node we can just set this branch node to be the new root node
            // for good housekeeping we'll removing the sibling from it's existing tree
            parent.removeChild(0, sizing);
            // and set that sibling node to be root
            this.root = sibling;
            return nodeToRemove.view;
        }
        // otherwise the parent is apart of a large sub-tree
        const [grandParent, ..._] = [...pathToParent].reverse();
        const [parentIndex, ...__] = [...rest].reverse();
        const isSiblingVisible = parent.isChildVisible(0);
        // either way we need to remove the sibling from it's existing tree
        parent.removeChild(0, sizing);
        // note the sizes of all of the grandparents children
        const sizes = grandParent.children.map((_size, i) => grandParent.getChildSize(i));
        // remove the parent from the grandparent since we are moving the sibling to take the parents place
        // this parent is no longer used and can be disposed of
        grandParent.removeChild(parentIndex, sizing).dispose();
        if (sibling instanceof _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode) {
            // replace the parent with the siblings children
            sizes.splice(parentIndex, 1, ...sibling.children.map((c) => c.size));
            // and add those siblings to the grandparent
            for (let i = 0; i < sibling.children.length; i++) {
                const child = sibling.children[i];
                grandParent.addChild(child, child.size, parentIndex + i);
            }
            /**
             * clean down the branch node since we need to dipose of it and
             * when .dispose() it called on a branch it will dispose of any
             * views it is holding onto.
             */
            while (sibling.children.length > 0) {
                sibling.removeChild(0);
            }
        }
        else {
            // otherwise create a new leaf node and add that to the grandparent
            const newSibling = new _leafNode__WEBPACK_IMPORTED_MODULE_2__.LeafNode(sibling.view, orthogonal(sibling.orientation), sibling.size);
            const siblingSizing = isSiblingVisible
                ? sibling.orthogonalSize
                : _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Sizing.Invisible(sibling.orthogonalSize);
            grandParent.addChild(newSibling, siblingSizing, parentIndex);
        }
        // the containing node of the sibling is no longer required and can be disposed of
        sibling.dispose();
        // resize everything
        for (let i = 0; i < sizes.length; i++) {
            grandParent.resizeChild(i, sizes[i]);
        }
        return nodeToRemove.view;
    }
    layout(width, height) {
        const [size, orthogonalSize] = this.root.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
            ? [height, width]
            : [width, height];
        this.root.layout(size, orthogonalSize);
    }
    getNode(location, node = this.root, path = []) {
        if (location.length === 0) {
            return [path, node];
        }
        if (!(node instanceof _branchNode__WEBPACK_IMPORTED_MODULE_3__.BranchNode)) {
            throw new Error('Invalid location');
        }
        const [index, ...rest] = location;
        if (index < 0 || index >= node.children.length) {
            throw new Error('Invalid location');
        }
        const child = node.children[index];
        path.push(node);
        return this.getNode(rest, child, path);
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/gridview/gridviewComponent.js":
/*!***************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/gridview/gridviewComponent.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GridviewComponent: () => (/* binding */ GridviewComponent)
/* harmony export */ });
/* harmony import */ var _gridview__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gridview */ "./node_modules/dockview-core/dist/esm/gridview/gridview.js");
/* harmony import */ var _array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../array */ "./node_modules/dockview-core/dist/esm/array.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _baseComponentGridview__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./baseComponentGridview */ "./node_modules/dockview-core/dist/esm/gridview/baseComponentGridview.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");





class GridviewComponent extends _baseComponentGridview__WEBPACK_IMPORTED_MODULE_3__.BaseGrid {
    get orientation() {
        return this.gridview.orientation;
    }
    set orientation(value) {
        this.gridview.orientation = value;
    }
    get options() {
        return this._options;
    }
    get deserializer() {
        return this._deserializer;
    }
    set deserializer(value) {
        this._deserializer = value;
    }
    constructor(container, options) {
        var _a;
        super(container, {
            proportionalLayout: (_a = options.proportionalLayout) !== null && _a !== void 0 ? _a : true,
            orientation: options.orientation,
            styles: options.hideBorders
                ? { separatorBorder: 'transparent' }
                : undefined,
            disableAutoResizing: options.disableAutoResizing,
            className: options.className,
        });
        this._onDidLayoutfromJSON = new _events__WEBPACK_IMPORTED_MODULE_4__.Emitter();
        this.onDidLayoutFromJSON = this._onDidLayoutfromJSON.event;
        this._onDidRemoveGroup = new _events__WEBPACK_IMPORTED_MODULE_4__.Emitter();
        this.onDidRemoveGroup = this._onDidRemoveGroup.event;
        this._onDidAddGroup = new _events__WEBPACK_IMPORTED_MODULE_4__.Emitter();
        this.onDidAddGroup = this._onDidAddGroup.event;
        this._onDidActiveGroupChange = new _events__WEBPACK_IMPORTED_MODULE_4__.Emitter();
        this.onDidActiveGroupChange = this._onDidActiveGroupChange.event;
        this._options = options;
        this.addDisposables(this._onDidAddGroup, this._onDidRemoveGroup, this._onDidActiveGroupChange, this.onDidAdd((event) => {
            this._onDidAddGroup.fire(event);
        }), this.onDidRemove((event) => {
            this._onDidRemoveGroup.fire(event);
        }), this.onDidActiveChange((event) => {
            this._onDidActiveGroupChange.fire(event);
        }));
    }
    updateOptions(options) {
        super.updateOptions(options);
        const hasOrientationChanged = typeof options.orientation === 'string' &&
            this.gridview.orientation !== options.orientation;
        this._options = Object.assign(Object.assign({}, this.options), options);
        if (hasOrientationChanged) {
            this.gridview.orientation = options.orientation;
        }
        this.layout(this.gridview.width, this.gridview.height, true);
    }
    removePanel(panel) {
        this.removeGroup(panel);
    }
    /**
     * Serialize the current state of the layout
     *
     * @returns A JSON respresentation of the layout
     */
    toJSON() {
        var _a;
        const data = this.gridview.serialize();
        return {
            grid: data,
            activePanel: (_a = this.activeGroup) === null || _a === void 0 ? void 0 : _a.id,
        };
    }
    setVisible(panel, visible) {
        this.gridview.setViewVisible((0,_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(panel.element), visible);
    }
    setActive(panel) {
        this._groups.forEach((value, _key) => {
            value.value.setActive(panel === value.value);
        });
    }
    focus() {
        var _a;
        (_a = this.activeGroup) === null || _a === void 0 ? void 0 : _a.focus();
    }
    fromJSON(serializedGridview) {
        this.clear();
        const { grid, activePanel } = serializedGridview;
        try {
            const queue = [];
            // take note of the existing dimensions
            const width = this.width;
            const height = this.height;
            this.gridview.deserialize(grid, {
                fromJSON: (node) => {
                    const { data } = node;
                    const view = this.options.createComponent({
                        id: data.id,
                        name: data.component,
                    });
                    queue.push(() => view.init({
                        params: data.params,
                        minimumWidth: data.minimumWidth,
                        maximumWidth: data.maximumWidth,
                        minimumHeight: data.minimumHeight,
                        maximumHeight: data.maximumHeight,
                        priority: data.priority,
                        snap: !!data.snap,
                        accessor: this,
                        isVisible: node.visible,
                    }));
                    this._onDidAddGroup.fire(view);
                    this.registerPanel(view);
                    return view;
                },
            });
            this.layout(width, height, true);
            queue.forEach((f) => f());
            if (typeof activePanel === 'string') {
                const panel = this.getPanel(activePanel);
                if (panel) {
                    this.doSetGroupActive(panel);
                }
            }
        }
        catch (err) {
            /**
             * To remove a group we cannot call this.removeGroup(...) since this makes assumptions about
             * the underlying HTMLElement existing in the Gridview.
             */
            for (const group of this.groups) {
                group.dispose();
                this._groups.delete(group.id);
                this._onDidRemoveGroup.fire(group);
            }
            // fires clean-up events and clears the underlying HTML gridview.
            this.clear();
            /**
             * even though we have cleaned-up we still want to inform the caller of their error
             * and we'll do this through re-throwing the original error since afterall you would
             * expect trying to load a corrupted layout to result in an error and not silently fail...
             */
            throw err;
        }
        this._onDidLayoutfromJSON.fire();
    }
    clear() {
        const hasActiveGroup = this.activeGroup;
        const groups = Array.from(this._groups.values()); // reassign since group panels will mutate
        for (const group of groups) {
            group.disposable.dispose();
            this.doRemoveGroup(group.value, { skipActive: true });
        }
        if (hasActiveGroup) {
            this.doSetGroupActive(undefined);
        }
        this.gridview.clear();
    }
    movePanel(panel, options) {
        var _a;
        let relativeLocation;
        const removedPanel = this.gridview.remove(panel);
        const referenceGroup = (_a = this._groups.get(options.reference)) === null || _a === void 0 ? void 0 : _a.value;
        if (!referenceGroup) {
            throw new Error(`reference group ${options.reference} does not exist`);
        }
        const target = (0,_baseComponentGridview__WEBPACK_IMPORTED_MODULE_3__.toTarget)(options.direction);
        if (target === 'center') {
            throw new Error(`${target} not supported as an option`);
        }
        else {
            const location = (0,_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(referenceGroup.element);
            relativeLocation = (0,_gridview__WEBPACK_IMPORTED_MODULE_0__.getRelativeLocation)(this.gridview.orientation, location, target);
        }
        this.doAddGroup(removedPanel, relativeLocation, options.size);
    }
    addPanel(options) {
        var _a, _b, _c, _d;
        let relativeLocation = (_a = options.location) !== null && _a !== void 0 ? _a : [0];
        if ((_b = options.position) === null || _b === void 0 ? void 0 : _b.referencePanel) {
            const referenceGroup = (_c = this._groups.get(options.position.referencePanel)) === null || _c === void 0 ? void 0 : _c.value;
            if (!referenceGroup) {
                throw new Error(`reference group ${options.position.referencePanel} does not exist`);
            }
            const target = (0,_baseComponentGridview__WEBPACK_IMPORTED_MODULE_3__.toTarget)(options.position.direction);
            if (target === 'center') {
                throw new Error(`${target} not supported as an option`);
            }
            else {
                const location = (0,_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(referenceGroup.element);
                relativeLocation = (0,_gridview__WEBPACK_IMPORTED_MODULE_0__.getRelativeLocation)(this.gridview.orientation, location, target);
            }
        }
        const view = this.options.createComponent({
            id: options.id,
            name: options.component,
        });
        view.init({
            params: (_d = options.params) !== null && _d !== void 0 ? _d : {},
            minimumWidth: options.minimumWidth,
            maximumWidth: options.maximumWidth,
            minimumHeight: options.minimumHeight,
            maximumHeight: options.maximumHeight,
            priority: options.priority,
            snap: !!options.snap,
            accessor: this,
            isVisible: true,
        });
        this.registerPanel(view);
        this.doAddGroup(view, relativeLocation, options.size);
        this.doSetGroupActive(view);
        return view;
    }
    registerPanel(panel) {
        const disposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable(panel.api.onDidFocusChange((event) => {
            if (!event.isFocused) {
                return;
            }
            this._groups.forEach((groupItem) => {
                const group = groupItem.value;
                if (group !== panel) {
                    group.setActive(false);
                }
                else {
                    group.setActive(true);
                }
            });
        }));
        this._groups.set(panel.id, {
            value: panel,
            disposable,
        });
    }
    moveGroup(referenceGroup, groupId, target) {
        const sourceGroup = this.getPanel(groupId);
        if (!sourceGroup) {
            throw new Error('invalid operation');
        }
        const referenceLocation = (0,_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(referenceGroup.element);
        const targetLocation = (0,_gridview__WEBPACK_IMPORTED_MODULE_0__.getRelativeLocation)(this.gridview.orientation, referenceLocation, target);
        const [targetParentLocation, to] = (0,_array__WEBPACK_IMPORTED_MODULE_1__.tail)(targetLocation);
        const sourceLocation = (0,_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(sourceGroup.element);
        const [sourceParentLocation, from] = (0,_array__WEBPACK_IMPORTED_MODULE_1__.tail)(sourceLocation);
        if ((0,_array__WEBPACK_IMPORTED_MODULE_1__.sequenceEquals)(sourceParentLocation, targetParentLocation)) {
            // special case when 'swapping' two views within same grid location
            // if a group has one tab - we are essentially moving the 'group'
            // which is equivalent to swapping two views in this case
            this.gridview.moveView(sourceParentLocation, from, to);
            return;
        }
        // source group will become empty so delete the group
        const targetGroup = this.doRemoveGroup(sourceGroup, {
            skipActive: true,
            skipDispose: true,
        });
        // after deleting the group we need to re-evaulate the ref location
        const updatedReferenceLocation = (0,_gridview__WEBPACK_IMPORTED_MODULE_0__.getGridLocation)(referenceGroup.element);
        const location = (0,_gridview__WEBPACK_IMPORTED_MODULE_0__.getRelativeLocation)(this.gridview.orientation, updatedReferenceLocation, target);
        this.doAddGroup(targetGroup, location);
    }
    removeGroup(group) {
        super.removeGroup(group);
    }
    dispose() {
        super.dispose();
        this._onDidLayoutfromJSON.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/gridview/gridviewPanel.js":
/*!***********************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/gridview/gridviewPanel.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GridviewPanel: () => (/* binding */ GridviewPanel)
/* harmony export */ });
/* harmony import */ var _basePanelView__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./basePanelView */ "./node_modules/dockview-core/dist/esm/gridview/basePanelView.js");
/* harmony import */ var _api_gridviewPanelApi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../api/gridviewPanelApi */ "./node_modules/dockview-core/dist/esm/api/gridviewPanelApi.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");



class GridviewPanel extends _basePanelView__WEBPACK_IMPORTED_MODULE_0__.BasePanelView {
    get priority() {
        return this._priority;
    }
    get snap() {
        return this._snap;
    }
    get minimumWidth() {
        /**
         * defer to protected function to allow subclasses to override easily.
         * see https://github.com/microsoft/TypeScript/issues/338
         */
        return this.__minimumWidth();
    }
    get minimumHeight() {
        /**
         * defer to protected function to allow subclasses to override easily.
         * see https://github.com/microsoft/TypeScript/issues/338
         */
        return this.__minimumHeight();
    }
    get maximumHeight() {
        /**
         * defer to protected function to allow subclasses to override easily.
         * see https://github.com/microsoft/TypeScript/issues/338
         */
        return this.__maximumHeight();
    }
    get maximumWidth() {
        /**
         * defer to protected function to allow subclasses to override easily.
         * see https://github.com/microsoft/TypeScript/issues/338
         */
        return this.__maximumWidth();
    }
    __minimumWidth() {
        const width = typeof this._minimumWidth === 'function'
            ? this._minimumWidth()
            : this._minimumWidth;
        if (width !== this._evaluatedMinimumWidth) {
            this._evaluatedMinimumWidth = width;
            this.updateConstraints();
        }
        return width;
    }
    __maximumWidth() {
        const width = typeof this._maximumWidth === 'function'
            ? this._maximumWidth()
            : this._maximumWidth;
        if (width !== this._evaluatedMaximumWidth) {
            this._evaluatedMaximumWidth = width;
            this.updateConstraints();
        }
        return width;
    }
    __minimumHeight() {
        const height = typeof this._minimumHeight === 'function'
            ? this._minimumHeight()
            : this._minimumHeight;
        if (height !== this._evaluatedMinimumHeight) {
            this._evaluatedMinimumHeight = height;
            this.updateConstraints();
        }
        return height;
    }
    __maximumHeight() {
        const height = typeof this._maximumHeight === 'function'
            ? this._maximumHeight()
            : this._maximumHeight;
        if (height !== this._evaluatedMaximumHeight) {
            this._evaluatedMaximumHeight = height;
            this.updateConstraints();
        }
        return height;
    }
    get isActive() {
        return this.api.isActive;
    }
    get isVisible() {
        return this.api.isVisible;
    }
    constructor(id, component, options, api) {
        super(id, component, api !== null && api !== void 0 ? api : new _api_gridviewPanelApi__WEBPACK_IMPORTED_MODULE_1__.GridviewPanelApiImpl(id, component));
        this._evaluatedMinimumWidth = 0;
        this._evaluatedMaximumWidth = Number.MAX_SAFE_INTEGER;
        this._evaluatedMinimumHeight = 0;
        this._evaluatedMaximumHeight = Number.MAX_SAFE_INTEGER;
        this._minimumWidth = 0;
        this._minimumHeight = 0;
        this._maximumWidth = Number.MAX_SAFE_INTEGER;
        this._maximumHeight = Number.MAX_SAFE_INTEGER;
        this._snap = false;
        this._onDidChange = new _events__WEBPACK_IMPORTED_MODULE_2__.Emitter();
        this.onDidChange = this._onDidChange.event;
        if (typeof (options === null || options === void 0 ? void 0 : options.minimumWidth) === 'number') {
            this._minimumWidth = options.minimumWidth;
        }
        if (typeof (options === null || options === void 0 ? void 0 : options.maximumWidth) === 'number') {
            this._maximumWidth = options.maximumWidth;
        }
        if (typeof (options === null || options === void 0 ? void 0 : options.minimumHeight) === 'number') {
            this._minimumHeight = options.minimumHeight;
        }
        if (typeof (options === null || options === void 0 ? void 0 : options.maximumHeight) === 'number') {
            this._maximumHeight = options.maximumHeight;
        }
        this.api.initialize(this); // TODO: required to by-pass 'super before this' requirement
        this.addDisposables(this.api.onWillVisibilityChange((event) => {
            const { isVisible } = event;
            const { accessor } = this._params;
            accessor.setVisible(this, isVisible);
        }), this.api.onActiveChange(() => {
            const { accessor } = this._params;
            accessor.doSetGroupActive(this);
        }), this.api.onDidConstraintsChangeInternal((event) => {
            if (typeof event.minimumWidth === 'number' ||
                typeof event.minimumWidth === 'function') {
                this._minimumWidth = event.minimumWidth;
            }
            if (typeof event.minimumHeight === 'number' ||
                typeof event.minimumHeight === 'function') {
                this._minimumHeight = event.minimumHeight;
            }
            if (typeof event.maximumWidth === 'number' ||
                typeof event.maximumWidth === 'function') {
                this._maximumWidth = event.maximumWidth;
            }
            if (typeof event.maximumHeight === 'number' ||
                typeof event.maximumHeight === 'function') {
                this._maximumHeight = event.maximumHeight;
            }
        }), this.api.onDidSizeChange((event) => {
            this._onDidChange.fire({
                height: event.height,
                width: event.width,
            });
        }), this._onDidChange);
    }
    setVisible(isVisible) {
        this.api._onDidVisibilityChange.fire({ isVisible });
    }
    setActive(isActive) {
        this.api._onDidActiveChange.fire({ isActive });
    }
    init(parameters) {
        if (parameters.maximumHeight) {
            this._maximumHeight = parameters.maximumHeight;
        }
        if (parameters.minimumHeight) {
            this._minimumHeight = parameters.minimumHeight;
        }
        if (parameters.maximumWidth) {
            this._maximumWidth = parameters.maximumWidth;
        }
        if (parameters.minimumWidth) {
            this._minimumWidth = parameters.minimumWidth;
        }
        this._priority = parameters.priority;
        this._snap = !!parameters.snap;
        super.init(parameters);
        if (typeof parameters.isVisible === 'boolean') {
            this.setVisible(parameters.isVisible);
        }
    }
    updateConstraints() {
        this.api._onDidConstraintsChange.fire({
            minimumWidth: this._evaluatedMinimumWidth,
            maximumWidth: this._evaluatedMaximumWidth,
            minimumHeight: this._evaluatedMinimumHeight,
            maximumHeight: this._evaluatedMaximumHeight,
        });
    }
    toJSON() {
        const state = super.toJSON();
        const maximum = (value) => value === Number.MAX_SAFE_INTEGER ? undefined : value;
        const minimum = (value) => (value <= 0 ? undefined : value);
        return Object.assign(Object.assign({}, state), { minimumHeight: minimum(this.minimumHeight), maximumHeight: maximum(this.maximumHeight), minimumWidth: minimum(this.minimumWidth), maximumWidth: maximum(this.maximumWidth), snap: this.snap, priority: this.priority });
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/gridview/leafNode.js":
/*!******************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/gridview/leafNode.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LeafNode: () => (/* binding */ LeafNode)
/* harmony export */ });
/* harmony import */ var _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../splitview/splitview */ "./node_modules/dockview-core/dist/esm/splitview/splitview.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/*---------------------------------------------------------------------------------------------
 * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:
 * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid
 *--------------------------------------------------------------------------------------------*/


class LeafNode {
    get minimumWidth() {
        return this.view.minimumWidth;
    }
    get maximumWidth() {
        return this.view.maximumWidth;
    }
    get minimumHeight() {
        return this.view.minimumHeight;
    }
    get maximumHeight() {
        return this.view.maximumHeight;
    }
    get priority() {
        return this.view.priority;
    }
    get snap() {
        return this.view.snap;
    }
    get minimumSize() {
        return this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
            ? this.minimumHeight
            : this.minimumWidth;
    }
    get maximumSize() {
        return this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
            ? this.maximumHeight
            : this.maximumWidth;
    }
    get minimumOrthogonalSize() {
        return this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
            ? this.minimumWidth
            : this.minimumHeight;
    }
    get maximumOrthogonalSize() {
        return this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
            ? this.maximumWidth
            : this.maximumHeight;
    }
    get orthogonalSize() {
        return this._orthogonalSize;
    }
    get size() {
        return this._size;
    }
    get element() {
        return this.view.element;
    }
    get width() {
        return this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
            ? this.orthogonalSize
            : this.size;
    }
    get height() {
        return this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.HORIZONTAL
            ? this.size
            : this.orthogonalSize;
    }
    constructor(view, orientation, orthogonalSize, size = 0) {
        this.view = view;
        this.orientation = orientation;
        this._onDidChange = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidChange = this._onDidChange.event;
        this._orthogonalSize = orthogonalSize;
        this._size = size;
        this._disposable = this.view.onDidChange((event) => {
            if (event) {
                this._onDidChange.fire({
                    size: this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.VERTICAL
                        ? event.width
                        : event.height,
                    orthogonalSize: this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.VERTICAL
                        ? event.height
                        : event.width,
                });
            }
            else {
                this._onDidChange.fire({});
            }
        });
    }
    setVisible(visible) {
        if (this.view.setVisible) {
            this.view.setVisible(visible);
        }
    }
    layout(size, orthogonalSize) {
        this._size = size;
        this._orthogonalSize = orthogonalSize;
        this.view.layout(this.width, this.height);
    }
    dispose() {
        this._onDidChange.dispose();
        this._disposable.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/gridview/options.js":
/*!*****************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/gridview/options.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PROPERTY_KEYS_GRIDVIEW: () => (/* binding */ PROPERTY_KEYS_GRIDVIEW)
/* harmony export */ });
const PROPERTY_KEYS_GRIDVIEW = (() => {
    /**
     * by readong the keys from an empty value object TypeScript will error
     * when we add or remove new properties to `DockviewOptions`
     */
    const properties = {
        disableAutoResizing: undefined,
        proportionalLayout: undefined,
        orientation: undefined,
        hideBorders: undefined,
        className: undefined,
    };
    return Object.keys(properties);
})();


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/index.js":
/*!******************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseGrid: () => (/* reexport safe */ _gridview_baseComponentGridview__WEBPACK_IMPORTED_MODULE_9__.BaseGrid),
/* harmony export */   ContentContainer: () => (/* reexport safe */ _dockview_components_panel_content__WEBPACK_IMPORTED_MODULE_11__.ContentContainer),
/* harmony export */   DefaultDockviewDeserialzier: () => (/* reexport safe */ _dockview_deserializer__WEBPACK_IMPORTED_MODULE_20__.DefaultDockviewDeserialzier),
/* harmony export */   DefaultTab: () => (/* reexport safe */ _dockview_components_tab_defaultTab__WEBPACK_IMPORTED_MODULE_19__.DefaultTab),
/* harmony export */   DockviewApi: () => (/* reexport safe */ _api_component_api__WEBPACK_IMPORTED_MODULE_30__.DockviewApi),
/* harmony export */   DockviewComponent: () => (/* reexport safe */ _dockview_dockviewComponent__WEBPACK_IMPORTED_MODULE_21__.DockviewComponent),
/* harmony export */   DockviewCompositeDisposable: () => (/* reexport safe */ _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable),
/* harmony export */   DockviewDidDropEvent: () => (/* reexport safe */ _dockview_dockviewGroupPanelModel__WEBPACK_IMPORTED_MODULE_13__.DockviewDidDropEvent),
/* harmony export */   DockviewDisposable: () => (/* reexport safe */ _lifecycle__WEBPACK_IMPORTED_MODULE_2__.Disposable),
/* harmony export */   DockviewEmitter: () => (/* reexport safe */ _events__WEBPACK_IMPORTED_MODULE_1__.Emitter),
/* harmony export */   DockviewEvent: () => (/* reexport safe */ _events__WEBPACK_IMPORTED_MODULE_1__.Event),
/* harmony export */   DockviewGroupPanel: () => (/* reexport safe */ _dockview_dockviewGroupPanel__WEBPACK_IMPORTED_MODULE_15__.DockviewGroupPanel),
/* harmony export */   DockviewGroupPanelModel: () => (/* reexport safe */ _dockview_dockviewGroupPanelModel__WEBPACK_IMPORTED_MODULE_13__.DockviewGroupPanelModel),
/* harmony export */   DockviewMutableDisposable: () => (/* reexport safe */ _lifecycle__WEBPACK_IMPORTED_MODULE_2__.MutableDisposable),
/* harmony export */   DockviewPanel: () => (/* reexport safe */ _dockview_dockviewPanel__WEBPACK_IMPORTED_MODULE_18__.DockviewPanel),
/* harmony export */   DockviewUnhandledDragOverEvent: () => (/* reexport safe */ _dockview_options__WEBPACK_IMPORTED_MODULE_16__.DockviewUnhandledDragOverEvent),
/* harmony export */   DockviewWillDropEvent: () => (/* reexport safe */ _dockview_dockviewGroupPanelModel__WEBPACK_IMPORTED_MODULE_13__.DockviewWillDropEvent),
/* harmony export */   DraggablePaneviewPanel: () => (/* reexport safe */ _paneview_draggablePaneviewPanel__WEBPACK_IMPORTED_MODULE_10__.DraggablePaneviewPanel),
/* harmony export */   Gridview: () => (/* reexport safe */ _gridview_gridview__WEBPACK_IMPORTED_MODULE_7__.Gridview),
/* harmony export */   GridviewApi: () => (/* reexport safe */ _api_component_api__WEBPACK_IMPORTED_MODULE_30__.GridviewApi),
/* harmony export */   GridviewComponent: () => (/* reexport safe */ _gridview_gridviewComponent__WEBPACK_IMPORTED_MODULE_22__.GridviewComponent),
/* harmony export */   GridviewPanel: () => (/* reexport safe */ _gridview_gridviewPanel__WEBPACK_IMPORTED_MODULE_26__.GridviewPanel),
/* harmony export */   LayoutPriority: () => (/* reexport safe */ _splitview_splitview__WEBPACK_IMPORTED_MODULE_4__.LayoutPriority),
/* harmony export */   Orientation: () => (/* reexport safe */ _splitview_splitview__WEBPACK_IMPORTED_MODULE_4__.Orientation),
/* harmony export */   PROPERTY_KEYS_DOCKVIEW: () => (/* reexport safe */ _dockview_options__WEBPACK_IMPORTED_MODULE_16__.PROPERTY_KEYS_DOCKVIEW),
/* harmony export */   PROPERTY_KEYS_GRIDVIEW: () => (/* reexport safe */ _gridview_options__WEBPACK_IMPORTED_MODULE_8__.PROPERTY_KEYS_GRIDVIEW),
/* harmony export */   PROPERTY_KEYS_PANEVIEW: () => (/* reexport safe */ _paneview_options__WEBPACK_IMPORTED_MODULE_25__.PROPERTY_KEYS_PANEVIEW),
/* harmony export */   PROPERTY_KEYS_SPLITVIEW: () => (/* reexport safe */ _splitview_options__WEBPACK_IMPORTED_MODULE_5__.PROPERTY_KEYS_SPLITVIEW),
/* harmony export */   PaneFramework: () => (/* reexport safe */ _paneview_paneviewComponent__WEBPACK_IMPORTED_MODULE_24__.PaneFramework),
/* harmony export */   PaneTransfer: () => (/* reexport safe */ _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_0__.PaneTransfer),
/* harmony export */   PanelTransfer: () => (/* reexport safe */ _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_0__.PanelTransfer),
/* harmony export */   Paneview: () => (/* reexport safe */ _paneview_paneview__WEBPACK_IMPORTED_MODULE_6__.Paneview),
/* harmony export */   PaneviewApi: () => (/* reexport safe */ _api_component_api__WEBPACK_IMPORTED_MODULE_30__.PaneviewApi),
/* harmony export */   PaneviewComponent: () => (/* reexport safe */ _paneview_paneviewComponent__WEBPACK_IMPORTED_MODULE_24__.PaneviewComponent),
/* harmony export */   PaneviewPanel: () => (/* reexport safe */ _paneview_paneviewPanel__WEBPACK_IMPORTED_MODULE_28__.PaneviewPanel),
/* harmony export */   PaneviewUnhandledDragOverEvent: () => (/* reexport safe */ _paneview_options__WEBPACK_IMPORTED_MODULE_25__.PaneviewUnhandledDragOverEvent),
/* harmony export */   SashState: () => (/* reexport safe */ _splitview_splitview__WEBPACK_IMPORTED_MODULE_4__.SashState),
/* harmony export */   Sizing: () => (/* reexport safe */ _splitview_splitview__WEBPACK_IMPORTED_MODULE_4__.Sizing),
/* harmony export */   Splitview: () => (/* reexport safe */ _splitview_splitview__WEBPACK_IMPORTED_MODULE_4__.Splitview),
/* harmony export */   SplitviewApi: () => (/* reexport safe */ _api_component_api__WEBPACK_IMPORTED_MODULE_30__.SplitviewApi),
/* harmony export */   SplitviewComponent: () => (/* reexport safe */ _splitview_splitviewComponent__WEBPACK_IMPORTED_MODULE_23__.SplitviewComponent),
/* harmony export */   SplitviewPanel: () => (/* reexport safe */ _splitview_splitviewPanel__WEBPACK_IMPORTED_MODULE_27__.SplitviewPanel),
/* harmony export */   Tab: () => (/* reexport safe */ _dockview_components_tab_tab__WEBPACK_IMPORTED_MODULE_12__.Tab),
/* harmony export */   createDockview: () => (/* reexport safe */ _api_entryPoints__WEBPACK_IMPORTED_MODULE_31__.createDockview),
/* harmony export */   createGridview: () => (/* reexport safe */ _api_entryPoints__WEBPACK_IMPORTED_MODULE_31__.createGridview),
/* harmony export */   createPaneview: () => (/* reexport safe */ _api_entryPoints__WEBPACK_IMPORTED_MODULE_31__.createPaneview),
/* harmony export */   createSplitview: () => (/* reexport safe */ _api_entryPoints__WEBPACK_IMPORTED_MODULE_31__.createSplitview),
/* harmony export */   directionToPosition: () => (/* reexport safe */ _dnd_droptarget__WEBPACK_IMPORTED_MODULE_29__.directionToPosition),
/* harmony export */   getDirectionOrientation: () => (/* reexport safe */ _gridview_gridview__WEBPACK_IMPORTED_MODULE_7__.getDirectionOrientation),
/* harmony export */   getGridLocation: () => (/* reexport safe */ _gridview_gridview__WEBPACK_IMPORTED_MODULE_7__.getGridLocation),
/* harmony export */   getLocationOrientation: () => (/* reexport safe */ _gridview_gridview__WEBPACK_IMPORTED_MODULE_7__.getLocationOrientation),
/* harmony export */   getPaneData: () => (/* reexport safe */ _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_0__.getPaneData),
/* harmony export */   getPanelData: () => (/* reexport safe */ _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_0__.getPanelData),
/* harmony export */   getRelativeLocation: () => (/* reexport safe */ _gridview_gridview__WEBPACK_IMPORTED_MODULE_7__.getRelativeLocation),
/* harmony export */   indexInParent: () => (/* reexport safe */ _gridview_gridview__WEBPACK_IMPORTED_MODULE_7__.indexInParent),
/* harmony export */   isGridBranchNode: () => (/* reexport safe */ _gridview_gridview__WEBPACK_IMPORTED_MODULE_7__.isGridBranchNode),
/* harmony export */   isGroupOptionsWithGroup: () => (/* reexport safe */ _dockview_options__WEBPACK_IMPORTED_MODULE_16__.isGroupOptionsWithGroup),
/* harmony export */   isGroupOptionsWithPanel: () => (/* reexport safe */ _dockview_options__WEBPACK_IMPORTED_MODULE_16__.isGroupOptionsWithPanel),
/* harmony export */   isPanelOptionsWithGroup: () => (/* reexport safe */ _dockview_options__WEBPACK_IMPORTED_MODULE_16__.isPanelOptionsWithGroup),
/* harmony export */   isPanelOptionsWithPanel: () => (/* reexport safe */ _dockview_options__WEBPACK_IMPORTED_MODULE_16__.isPanelOptionsWithPanel),
/* harmony export */   orthogonal: () => (/* reexport safe */ _gridview_gridview__WEBPACK_IMPORTED_MODULE_7__.orthogonal),
/* harmony export */   positionToDirection: () => (/* reexport safe */ _dnd_droptarget__WEBPACK_IMPORTED_MODULE_29__.positionToDirection),
/* harmony export */   themeAbyss: () => (/* reexport safe */ _dockview_theme__WEBPACK_IMPORTED_MODULE_17__.themeAbyss),
/* harmony export */   themeAbyssSpaced: () => (/* reexport safe */ _dockview_theme__WEBPACK_IMPORTED_MODULE_17__.themeAbyssSpaced),
/* harmony export */   themeDark: () => (/* reexport safe */ _dockview_theme__WEBPACK_IMPORTED_MODULE_17__.themeDark),
/* harmony export */   themeDracula: () => (/* reexport safe */ _dockview_theme__WEBPACK_IMPORTED_MODULE_17__.themeDracula),
/* harmony export */   themeLight: () => (/* reexport safe */ _dockview_theme__WEBPACK_IMPORTED_MODULE_17__.themeLight),
/* harmony export */   themeLightSpaced: () => (/* reexport safe */ _dockview_theme__WEBPACK_IMPORTED_MODULE_17__.themeLightSpaced),
/* harmony export */   themeReplit: () => (/* reexport safe */ _dockview_theme__WEBPACK_IMPORTED_MODULE_17__.themeReplit),
/* harmony export */   themeVisualStudio: () => (/* reexport safe */ _dockview_theme__WEBPACK_IMPORTED_MODULE_17__.themeVisualStudio),
/* harmony export */   toTarget: () => (/* reexport safe */ _gridview_baseComponentGridview__WEBPACK_IMPORTED_MODULE_9__.toTarget)
/* harmony export */ });
/* harmony import */ var _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dnd/dataTransfer */ "./node_modules/dockview-core/dist/esm/dnd/dataTransfer.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _panel_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./panel/types */ "./node_modules/dockview-core/dist/esm/panel/types.js");
/* harmony import */ var _splitview_splitview__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./splitview/splitview */ "./node_modules/dockview-core/dist/esm/splitview/splitview.js");
/* harmony import */ var _splitview_options__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./splitview/options */ "./node_modules/dockview-core/dist/esm/splitview/options.js");
/* harmony import */ var _paneview_paneview__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./paneview/paneview */ "./node_modules/dockview-core/dist/esm/paneview/paneview.js");
/* harmony import */ var _gridview_gridview__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./gridview/gridview */ "./node_modules/dockview-core/dist/esm/gridview/gridview.js");
/* harmony import */ var _gridview_options__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./gridview/options */ "./node_modules/dockview-core/dist/esm/gridview/options.js");
/* harmony import */ var _gridview_baseComponentGridview__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./gridview/baseComponentGridview */ "./node_modules/dockview-core/dist/esm/gridview/baseComponentGridview.js");
/* harmony import */ var _paneview_draggablePaneviewPanel__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./paneview/draggablePaneviewPanel */ "./node_modules/dockview-core/dist/esm/paneview/draggablePaneviewPanel.js");
/* harmony import */ var _dockview_components_panel_content__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./dockview/components/panel/content */ "./node_modules/dockview-core/dist/esm/dockview/components/panel/content.js");
/* harmony import */ var _dockview_components_tab_tab__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./dockview/components/tab/tab */ "./node_modules/dockview-core/dist/esm/dockview/components/tab/tab.js");
/* harmony import */ var _dockview_dockviewGroupPanelModel__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./dockview/dockviewGroupPanelModel */ "./node_modules/dockview-core/dist/esm/dockview/dockviewGroupPanelModel.js");
/* harmony import */ var _dockview_types__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./dockview/types */ "./node_modules/dockview-core/dist/esm/dockview/types.js");
/* harmony import */ var _dockview_dockviewGroupPanel__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./dockview/dockviewGroupPanel */ "./node_modules/dockview-core/dist/esm/dockview/dockviewGroupPanel.js");
/* harmony import */ var _dockview_options__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./dockview/options */ "./node_modules/dockview-core/dist/esm/dockview/options.js");
/* harmony import */ var _dockview_theme__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./dockview/theme */ "./node_modules/dockview-core/dist/esm/dockview/theme.js");
/* harmony import */ var _dockview_dockviewPanel__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./dockview/dockviewPanel */ "./node_modules/dockview-core/dist/esm/dockview/dockviewPanel.js");
/* harmony import */ var _dockview_components_tab_defaultTab__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./dockview/components/tab/defaultTab */ "./node_modules/dockview-core/dist/esm/dockview/components/tab/defaultTab.js");
/* harmony import */ var _dockview_deserializer__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./dockview/deserializer */ "./node_modules/dockview-core/dist/esm/dockview/deserializer.js");
/* harmony import */ var _dockview_dockviewComponent__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./dockview/dockviewComponent */ "./node_modules/dockview-core/dist/esm/dockview/dockviewComponent.js");
/* harmony import */ var _gridview_gridviewComponent__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./gridview/gridviewComponent */ "./node_modules/dockview-core/dist/esm/gridview/gridviewComponent.js");
/* harmony import */ var _splitview_splitviewComponent__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./splitview/splitviewComponent */ "./node_modules/dockview-core/dist/esm/splitview/splitviewComponent.js");
/* harmony import */ var _paneview_paneviewComponent__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./paneview/paneviewComponent */ "./node_modules/dockview-core/dist/esm/paneview/paneviewComponent.js");
/* harmony import */ var _paneview_options__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./paneview/options */ "./node_modules/dockview-core/dist/esm/paneview/options.js");
/* harmony import */ var _gridview_gridviewPanel__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./gridview/gridviewPanel */ "./node_modules/dockview-core/dist/esm/gridview/gridviewPanel.js");
/* harmony import */ var _splitview_splitviewPanel__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./splitview/splitviewPanel */ "./node_modules/dockview-core/dist/esm/splitview/splitviewPanel.js");
/* harmony import */ var _paneview_paneviewPanel__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./paneview/paneviewPanel */ "./node_modules/dockview-core/dist/esm/paneview/paneviewPanel.js");
/* harmony import */ var _dnd_droptarget__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./dnd/droptarget */ "./node_modules/dockview-core/dist/esm/dnd/droptarget.js");
/* harmony import */ var _api_component_api__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./api/component.api */ "./node_modules/dockview-core/dist/esm/api/component.api.js");
/* harmony import */ var _api_entryPoints__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./api/entryPoints */ "./node_modules/dockview-core/dist/esm/api/entryPoints.js");

/**
 * Events, Emitters and Disposables are very common concepts that many codebases will contain, however we need
 * to export them for dockview framework packages to use.
 * To be a good citizen these are exported with a `Dockview` prefix to prevent accidental use by others.
 */


































/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/lifecycle.js":
/*!**********************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/lifecycle.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CompositeDisposable: () => (/* binding */ CompositeDisposable),
/* harmony export */   Disposable: () => (/* binding */ Disposable),
/* harmony export */   MutableDisposable: () => (/* binding */ MutableDisposable)
/* harmony export */ });
var Disposable;
(function (Disposable) {
    Disposable.NONE = {
        dispose: () => {
            // noop
        },
    };
    function from(func) {
        return {
            dispose: () => {
                func();
            },
        };
    }
    Disposable.from = from;
})(Disposable || (Disposable = {}));
class CompositeDisposable {
    get isDisposed() {
        return this._isDisposed;
    }
    constructor(...args) {
        this._isDisposed = false;
        this._disposables = args;
    }
    addDisposables(...args) {
        args.forEach((arg) => this._disposables.push(arg));
    }
    dispose() {
        if (this._isDisposed) {
            return;
        }
        this._isDisposed = true;
        this._disposables.forEach((arg) => arg.dispose());
        this._disposables = [];
    }
}
class MutableDisposable {
    constructor() {
        this._disposable = Disposable.NONE;
    }
    set value(disposable) {
        if (this._disposable) {
            this._disposable.dispose();
        }
        this._disposable = disposable;
    }
    dispose() {
        if (this._disposable) {
            this._disposable.dispose();
            this._disposable = Disposable.NONE;
        }
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/math.js":
/*!*****************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/math.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   clamp: () => (/* binding */ clamp),
/* harmony export */   range: () => (/* binding */ range),
/* harmony export */   sequentialNumberGenerator: () => (/* binding */ sequentialNumberGenerator)
/* harmony export */ });
const clamp = (value, min, max) => {
    if (min > max) {
        /**
         * caveat: an error should be thrown here if this was a proper `clamp` function but we need to handle
         * cases where `min` > `max` and in those cases return `min`.
         */
        return min;
    }
    return Math.min(max, Math.max(value, min));
};
const sequentialNumberGenerator = () => {
    let value = 1;
    return { next: () => (value++).toString() };
};
const range = (from, to) => {
    const result = [];
    if (typeof to !== 'number') {
        to = from;
        from = 0;
    }
    if (from <= to) {
        for (let i = from; i < to; i++) {
            result.push(i);
        }
    }
    else {
        for (let i = from; i > to; i--) {
            result.push(i);
        }
    }
    return result;
};


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/overlay/overlay.js":
/*!****************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/overlay/overlay.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Overlay: () => (/* binding */ Overlay)
/* harmony export */ });
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math */ "./node_modules/dockview-core/dist/esm/math.js");




class AriaLevelTracker {
    constructor() {
        this._orderedList = [];
    }
    push(element) {
        this._orderedList = [
            ...this._orderedList.filter((item) => item !== element),
            element,
        ];
        this.update();
    }
    destroy(element) {
        this._orderedList = this._orderedList.filter((item) => item !== element);
        this.update();
    }
    update() {
        for (let i = 0; i < this._orderedList.length; i++) {
            this._orderedList[i].setAttribute('aria-level', `${i}`);
            this._orderedList[i].style.zIndex = `calc(var(--dv-overlay-z-index, 999) + ${i * 2})`;
        }
    }
}
const arialLevelTracker = new AriaLevelTracker();
class Overlay extends _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable {
    set minimumInViewportWidth(value) {
        this.options.minimumInViewportWidth = value;
    }
    set minimumInViewportHeight(value) {
        this.options.minimumInViewportHeight = value;
    }
    get element() {
        return this._element;
    }
    get isVisible() {
        return this._isVisible;
    }
    constructor(options) {
        super();
        this.options = options;
        this._element = document.createElement('div');
        this._onDidChange = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidChange = this._onDidChange.event;
        this._onDidChangeEnd = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidChangeEnd = this._onDidChangeEnd.event;
        this.addDisposables(this._onDidChange, this._onDidChangeEnd);
        this._element.className = 'dv-resize-container';
        this._isVisible = true;
        this.setupResize('top');
        this.setupResize('bottom');
        this.setupResize('left');
        this.setupResize('right');
        this.setupResize('topleft');
        this.setupResize('topright');
        this.setupResize('bottomleft');
        this.setupResize('bottomright');
        this._element.appendChild(this.options.content);
        this.options.container.appendChild(this._element);
        // if input bad resize within acceptable boundaries
        this.setBounds(Object.assign(Object.assign(Object.assign(Object.assign({ height: this.options.height, width: this.options.width }, ('top' in this.options && { top: this.options.top })), ('bottom' in this.options && { bottom: this.options.bottom })), ('left' in this.options && { left: this.options.left })), ('right' in this.options && { right: this.options.right })));
        arialLevelTracker.push(this._element);
    }
    setVisible(isVisible) {
        if (isVisible === this.isVisible) {
            return;
        }
        this._isVisible = isVisible;
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(this.element, 'dv-hidden', !this.isVisible);
    }
    bringToFront() {
        arialLevelTracker.push(this._element);
    }
    setBounds(bounds = {}) {
        if (typeof bounds.height === 'number') {
            this._element.style.height = `${bounds.height}px`;
        }
        if (typeof bounds.width === 'number') {
            this._element.style.width = `${bounds.width}px`;
        }
        if ('top' in bounds && typeof bounds.top === 'number') {
            this._element.style.top = `${bounds.top}px`;
            this._element.style.bottom = 'auto';
            this.verticalAlignment = 'top';
        }
        if ('bottom' in bounds && typeof bounds.bottom === 'number') {
            this._element.style.bottom = `${bounds.bottom}px`;
            this._element.style.top = 'auto';
            this.verticalAlignment = 'bottom';
        }
        if ('left' in bounds && typeof bounds.left === 'number') {
            this._element.style.left = `${bounds.left}px`;
            this._element.style.right = 'auto';
            this.horiziontalAlignment = 'left';
        }
        if ('right' in bounds && typeof bounds.right === 'number') {
            this._element.style.right = `${bounds.right}px`;
            this._element.style.left = 'auto';
            this.horiziontalAlignment = 'right';
        }
        const containerRect = this.options.container.getBoundingClientRect();
        const overlayRect = this._element.getBoundingClientRect();
        // region: ensure bounds within allowable limits
        // a minimum width of minimumViewportWidth must be inside the viewport
        const xOffset = Math.max(0, this.getMinimumWidth(overlayRect.width));
        // a minimum height of minimumViewportHeight must be inside the viewport
        const yOffset = Math.max(0, this.getMinimumHeight(overlayRect.height));
        if (this.verticalAlignment === 'top') {
            const top = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(overlayRect.top - containerRect.top, -yOffset, Math.max(0, containerRect.height - overlayRect.height + yOffset));
            this._element.style.top = `${top}px`;
            this._element.style.bottom = 'auto';
        }
        if (this.verticalAlignment === 'bottom') {
            const bottom = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(containerRect.bottom - overlayRect.bottom, -yOffset, Math.max(0, containerRect.height - overlayRect.height + yOffset));
            this._element.style.bottom = `${bottom}px`;
            this._element.style.top = 'auto';
        }
        if (this.horiziontalAlignment === 'left') {
            const left = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(overlayRect.left - containerRect.left, -xOffset, Math.max(0, containerRect.width - overlayRect.width + xOffset));
            this._element.style.left = `${left}px`;
            this._element.style.right = 'auto';
        }
        if (this.horiziontalAlignment === 'right') {
            const right = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(containerRect.right - overlayRect.right, -xOffset, Math.max(0, containerRect.width - overlayRect.width + xOffset));
            this._element.style.right = `${right}px`;
            this._element.style.left = 'auto';
        }
        this._onDidChange.fire();
    }
    toJSON() {
        const container = this.options.container.getBoundingClientRect();
        const element = this._element.getBoundingClientRect();
        const result = {};
        if (this.verticalAlignment === 'top') {
            result.top = parseFloat(this._element.style.top);
        }
        else if (this.verticalAlignment === 'bottom') {
            result.bottom = parseFloat(this._element.style.bottom);
        }
        else {
            result.top = element.top - container.top;
        }
        if (this.horiziontalAlignment === 'left') {
            result.left = parseFloat(this._element.style.left);
        }
        else if (this.horiziontalAlignment === 'right') {
            result.right = parseFloat(this._element.style.right);
        }
        else {
            result.left = element.left - container.left;
        }
        result.width = element.width;
        result.height = element.height;
        return result;
    }
    setupDrag(dragTarget, options = { inDragMode: false }) {
        const move = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.MutableDisposable();
        const track = () => {
            let offset = null;
            const iframes = (0,_dom__WEBPACK_IMPORTED_MODULE_0__.disableIframePointEvents)();
            move.value = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable({
                dispose: () => {
                    iframes.release();
                },
            }, (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(window, 'pointermove', (e) => {
                const containerRect = this.options.container.getBoundingClientRect();
                const x = e.clientX - containerRect.left;
                const y = e.clientY - containerRect.top;
                (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(this._element, 'dv-resize-container-dragging', true);
                const overlayRect = this._element.getBoundingClientRect();
                if (offset === null) {
                    offset = {
                        x: e.clientX - overlayRect.left,
                        y: e.clientY - overlayRect.top,
                    };
                }
                const xOffset = Math.max(0, this.getMinimumWidth(overlayRect.width));
                const yOffset = Math.max(0, this.getMinimumHeight(overlayRect.height));
                const top = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(y - offset.y, -yOffset, Math.max(0, containerRect.height - overlayRect.height + yOffset));
                const bottom = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(offset.y -
                    y +
                    containerRect.height -
                    overlayRect.height, -yOffset, Math.max(0, containerRect.height - overlayRect.height + yOffset));
                const left = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(x - offset.x, -xOffset, Math.max(0, containerRect.width - overlayRect.width + xOffset));
                const right = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(offset.x - x + containerRect.width - overlayRect.width, -xOffset, Math.max(0, containerRect.width - overlayRect.width + xOffset));
                const bounds = {};
                // Anchor to top or to bottom depending on which one is closer
                if (top <= bottom) {
                    bounds.top = top;
                }
                else {
                    bounds.bottom = bottom;
                }
                // Anchor to left or to right depending on which one is closer
                if (left <= right) {
                    bounds.left = left;
                }
                else {
                    bounds.right = right;
                }
                this.setBounds(bounds);
            }), (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(window, 'pointerup', () => {
                (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(this._element, 'dv-resize-container-dragging', false);
                move.dispose();
                this._onDidChangeEnd.fire();
            }));
        };
        this.addDisposables(move, (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(dragTarget, 'pointerdown', (event) => {
            if (event.defaultPrevented) {
                event.preventDefault();
                return;
            }
            // if somebody has marked this event then treat as a defaultPrevented
            // without actually calling event.preventDefault()
            if ((0,_dom__WEBPACK_IMPORTED_MODULE_0__.quasiDefaultPrevented)(event)) {
                return;
            }
            track();
        }), (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(this.options.content, 'pointerdown', (event) => {
            if (event.defaultPrevented) {
                return;
            }
            // if somebody has marked this event then treat as a defaultPrevented
            // without actually calling event.preventDefault()
            if ((0,_dom__WEBPACK_IMPORTED_MODULE_0__.quasiDefaultPrevented)(event)) {
                return;
            }
            if (event.shiftKey) {
                track();
            }
        }), (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(this.options.content, 'pointerdown', () => {
            arialLevelTracker.push(this._element);
        }, true));
        if (options.inDragMode) {
            track();
        }
    }
    setupResize(direction) {
        const resizeHandleElement = document.createElement('div');
        resizeHandleElement.className = `dv-resize-handle-${direction}`;
        this._element.appendChild(resizeHandleElement);
        const move = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.MutableDisposable();
        this.addDisposables(move, (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(resizeHandleElement, 'pointerdown', (e) => {
            e.preventDefault();
            let startPosition = null;
            const iframes = (0,_dom__WEBPACK_IMPORTED_MODULE_0__.disableIframePointEvents)();
            move.value = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable((0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(window, 'pointermove', (e) => {
                const containerRect = this.options.container.getBoundingClientRect();
                const overlayRect = this._element.getBoundingClientRect();
                const y = e.clientY - containerRect.top;
                const x = e.clientX - containerRect.left;
                if (startPosition === null) {
                    // record the initial dimensions since as all subsequence moves are relative to this
                    startPosition = {
                        originalY: y,
                        originalHeight: overlayRect.height,
                        originalX: x,
                        originalWidth: overlayRect.width,
                    };
                }
                let top = undefined;
                let bottom = undefined;
                let height = undefined;
                let left = undefined;
                let right = undefined;
                let width = undefined;
                const moveTop = () => {
                    top = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(y, -Number.MAX_VALUE, startPosition.originalY +
                        startPosition.originalHeight >
                        containerRect.height
                        ? this.getMinimumHeight(containerRect.height)
                        : Math.max(0, startPosition.originalY +
                            startPosition.originalHeight -
                            Overlay.MINIMUM_HEIGHT));
                    height =
                        startPosition.originalY +
                            startPosition.originalHeight -
                            top;
                    bottom = containerRect.height - top - height;
                };
                const moveBottom = () => {
                    top =
                        startPosition.originalY -
                            startPosition.originalHeight;
                    height = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(y - top, top < 0 &&
                        typeof this.options
                            .minimumInViewportHeight === 'number'
                        ? -top +
                            this.options.minimumInViewportHeight
                        : Overlay.MINIMUM_HEIGHT, Number.MAX_VALUE);
                    bottom = containerRect.height - top - height;
                };
                const moveLeft = () => {
                    left = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(x, -Number.MAX_VALUE, startPosition.originalX +
                        startPosition.originalWidth >
                        containerRect.width
                        ? this.getMinimumWidth(containerRect.width)
                        : Math.max(0, startPosition.originalX +
                            startPosition.originalWidth -
                            Overlay.MINIMUM_WIDTH));
                    width =
                        startPosition.originalX +
                            startPosition.originalWidth -
                            left;
                    right = containerRect.width - left - width;
                };
                const moveRight = () => {
                    left =
                        startPosition.originalX -
                            startPosition.originalWidth;
                    width = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(x - left, left < 0 &&
                        typeof this.options
                            .minimumInViewportWidth === 'number'
                        ? -left +
                            this.options.minimumInViewportWidth
                        : Overlay.MINIMUM_WIDTH, Number.MAX_VALUE);
                    right = containerRect.width - left - width;
                };
                switch (direction) {
                    case 'top':
                        moveTop();
                        break;
                    case 'bottom':
                        moveBottom();
                        break;
                    case 'left':
                        moveLeft();
                        break;
                    case 'right':
                        moveRight();
                        break;
                    case 'topleft':
                        moveTop();
                        moveLeft();
                        break;
                    case 'topright':
                        moveTop();
                        moveRight();
                        break;
                    case 'bottomleft':
                        moveBottom();
                        moveLeft();
                        break;
                    case 'bottomright':
                        moveBottom();
                        moveRight();
                        break;
                }
                const bounds = {};
                // Anchor to top or to bottom depending on which one is closer
                if (top <= bottom) {
                    bounds.top = top;
                }
                else {
                    bounds.bottom = bottom;
                }
                // Anchor to left or to right depending on which one is closer
                if (left <= right) {
                    bounds.left = left;
                }
                else {
                    bounds.right = right;
                }
                bounds.height = height;
                bounds.width = width;
                this.setBounds(bounds);
            }), {
                dispose: () => {
                    iframes.release();
                },
            }, (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(window, 'pointerup', () => {
                move.dispose();
                this._onDidChangeEnd.fire();
            }));
        }));
    }
    getMinimumWidth(width) {
        if (typeof this.options.minimumInViewportWidth === 'number') {
            return width - this.options.minimumInViewportWidth;
        }
        return 0;
    }
    getMinimumHeight(height) {
        if (typeof this.options.minimumInViewportHeight === 'number') {
            return height - this.options.minimumInViewportHeight;
        }
        return 0;
    }
    dispose() {
        arialLevelTracker.destroy(this._element);
        this._element.remove();
        super.dispose();
    }
}
Overlay.MINIMUM_HEIGHT = 20;
Overlay.MINIMUM_WIDTH = 20;


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/overlay/overlayRenderContainer.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/overlay/overlayRenderContainer.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   OverlayRenderContainer: () => (/* binding */ OverlayRenderContainer)
/* harmony export */ });
/* harmony import */ var _dnd_dnd__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dnd/dnd */ "./node_modules/dockview-core/dist/esm/dnd/dnd.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");



class PositionCache {
    constructor() {
        this.cache = new Map();
        this.currentFrameId = 0;
        this.rafId = null;
    }
    getPosition(element) {
        const cached = this.cache.get(element);
        if (cached && cached.frameId === this.currentFrameId) {
            return cached.rect;
        }
        this.scheduleFrameUpdate();
        const rect = (0,_dom__WEBPACK_IMPORTED_MODULE_1__.getDomNodePagePosition)(element);
        this.cache.set(element, { rect, frameId: this.currentFrameId });
        return rect;
    }
    invalidate() {
        this.currentFrameId++;
    }
    scheduleFrameUpdate() {
        if (this.rafId)
            return;
        this.rafId = requestAnimationFrame(() => {
            this.currentFrameId++;
            this.rafId = null;
        });
    }
}
function createFocusableElement() {
    const element = document.createElement('div');
    element.tabIndex = -1;
    return element;
}
class OverlayRenderContainer extends _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable {
    constructor(element, accessor) {
        super();
        this.element = element;
        this.accessor = accessor;
        this.map = {};
        this._disposed = false;
        this.positionCache = new PositionCache();
        this.pendingUpdates = new Set();
        this.addDisposables(_lifecycle__WEBPACK_IMPORTED_MODULE_2__.Disposable.from(() => {
            for (const value of Object.values(this.map)) {
                value.disposable.dispose();
                value.destroy.dispose();
            }
            this._disposed = true;
        }));
    }
    updateAllPositions() {
        if (this._disposed) {
            return;
        }
        // Invalidate position cache to force recalculation
        this.positionCache.invalidate();
        // Call resize function directly for all visible panels
        for (const entry of Object.values(this.map)) {
            if (entry.panel.api.isVisible && entry.resize) {
                entry.resize();
            }
        }
    }
    detatch(panel) {
        if (this.map[panel.api.id]) {
            const { disposable, destroy } = this.map[panel.api.id];
            disposable.dispose();
            destroy.dispose();
            delete this.map[panel.api.id];
            return true;
        }
        return false;
    }
    attach(options) {
        const { panel, referenceContainer } = options;
        if (!this.map[panel.api.id]) {
            const element = createFocusableElement();
            element.className = 'dv-render-overlay';
            this.map[panel.api.id] = {
                panel,
                disposable: _lifecycle__WEBPACK_IMPORTED_MODULE_2__.Disposable.NONE,
                destroy: _lifecycle__WEBPACK_IMPORTED_MODULE_2__.Disposable.NONE,
                element,
            };
        }
        const focusContainer = this.map[panel.api.id].element;
        if (panel.view.content.element.parentElement !== focusContainer) {
            focusContainer.appendChild(panel.view.content.element);
        }
        if (focusContainer.parentElement !== this.element) {
            this.element.appendChild(focusContainer);
        }
        const resize = () => {
            const panelId = panel.api.id;
            if (this.pendingUpdates.has(panelId)) {
                return; // Update already scheduled
            }
            this.pendingUpdates.add(panelId);
            requestAnimationFrame(() => {
                this.pendingUpdates.delete(panelId);
                if (this.isDisposed || !this.map[panelId]) {
                    return;
                }
                const box = this.positionCache.getPosition(referenceContainer.element);
                const box2 = this.positionCache.getPosition(this.element);
                // Use traditional positioning for overlay containers
                const left = box.left - box2.left;
                const top = box.top - box2.top;
                const width = box.width;
                const height = box.height;
                focusContainer.style.left = `${left}px`;
                focusContainer.style.top = `${top}px`;
                focusContainer.style.width = `${width}px`;
                focusContainer.style.height = `${height}px`;
                (0,_dom__WEBPACK_IMPORTED_MODULE_1__.toggleClass)(focusContainer, 'dv-render-overlay-float', panel.group.api.location.type === 'floating');
            });
        };
        const visibilityChanged = () => {
            if (panel.api.isVisible) {
                this.positionCache.invalidate();
                resize();
            }
            focusContainer.style.display = panel.api.isVisible ? '' : 'none';
        };
        const observerDisposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.MutableDisposable();
        const correctLayerPosition = () => {
            if (panel.api.location.type === 'floating') {
                queueMicrotask(() => {
                    const floatingGroup = this.accessor.floatingGroups.find((group) => group.group === panel.api.group);
                    if (!floatingGroup) {
                        return;
                    }
                    const element = floatingGroup.overlay.element;
                    const update = () => {
                        const level = Number(element.getAttribute('aria-level'));
                        focusContainer.style.zIndex = `calc(var(--dv-overlay-z-index, 999) + ${level * 2 + 1})`;
                    };
                    const observer = new MutationObserver(() => {
                        update();
                    });
                    observerDisposable.value = _lifecycle__WEBPACK_IMPORTED_MODULE_2__.Disposable.from(() => observer.disconnect());
                    observer.observe(element, {
                        attributeFilter: ['aria-level'],
                        attributes: true,
                    });
                    update();
                });
            }
            else {
                focusContainer.style.zIndex = ''; // reset the z-index, perhaps CSS will take over here
            }
        };
        const disposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable(observerDisposable, 
        /**
         * since container is positioned absoutely we must explicitly forward
         * the dnd events for the expect behaviours to continue to occur in terms of dnd
         *
         * the dnd observer does not need to be conditional on whether the panel is visible since
         * non-visible panels are 'display: none' and in such case the dnd observer will not fire.
         */
        new _dnd_dnd__WEBPACK_IMPORTED_MODULE_0__.DragAndDropObserver(focusContainer, {
            onDragEnd: (e) => {
                referenceContainer.dropTarget.dnd.onDragEnd(e);
            },
            onDragEnter: (e) => {
                referenceContainer.dropTarget.dnd.onDragEnter(e);
            },
            onDragLeave: (e) => {
                referenceContainer.dropTarget.dnd.onDragLeave(e);
            },
            onDrop: (e) => {
                referenceContainer.dropTarget.dnd.onDrop(e);
            },
            onDragOver: (e) => {
                referenceContainer.dropTarget.dnd.onDragOver(e);
            },
        }), panel.api.onDidVisibilityChange(() => {
            /**
             * Control the visibility of the content, however even when not visible (display: none)
             * the content is still maintained within the DOM hence DOM specific attributes
             * such as scroll position are maintained when next made visible.
             */
            visibilityChanged();
        }), panel.api.onDidDimensionsChange(() => {
            if (!panel.api.isVisible) {
                return;
            }
            resize();
        }), panel.api.onDidLocationChange(() => {
            correctLayerPosition();
        }));
        this.map[panel.api.id].destroy = _lifecycle__WEBPACK_IMPORTED_MODULE_2__.Disposable.from(() => {
            var _a;
            if (panel.view.content.element.parentElement === focusContainer) {
                focusContainer.removeChild(panel.view.content.element);
            }
            (_a = focusContainer.parentElement) === null || _a === void 0 ? void 0 : _a.removeChild(focusContainer);
        });
        correctLayerPosition();
        queueMicrotask(() => {
            if (this.isDisposed) {
                return;
            }
            /**
             * wait until everything has finished in the current stack-frame call before
             * calling the first resize as other size-altering events may still occur before
             * the end of the stack-frame.
             */
            visibilityChanged();
        });
        // dispose of logic asoccciated with previous reference-container
        this.map[panel.api.id].disposable.dispose();
        // and reset the disposable to the active reference-container
        this.map[panel.api.id].disposable = disposable;
        // store the resize function for direct access
        this.map[panel.api.id].resize = resize;
        return focusContainer;
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/panel/types.js":
/*!************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/panel/types.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/paneview/defaultPaneviewHeader.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/paneview/defaultPaneviewHeader.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DefaultHeader: () => (/* binding */ DefaultHeader)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _svg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../svg */ "./node_modules/dockview-core/dist/esm/svg.js");




class DefaultHeader extends _lifecycle__WEBPACK_IMPORTED_MODULE_1__.CompositeDisposable {
    get element() {
        return this._element;
    }
    constructor() {
        super();
        this._expandedIcon = (0,_svg__WEBPACK_IMPORTED_MODULE_3__.createExpandMoreButton)();
        this._collapsedIcon = (0,_svg__WEBPACK_IMPORTED_MODULE_3__.createChevronRightButton)();
        this.disposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_1__.MutableDisposable();
        this.apiRef = {
            api: null,
        };
        this._element = document.createElement('div');
        this.element.className = 'dv-default-header';
        this._content = document.createElement('span');
        this._expander = document.createElement('div');
        this._expander.className = 'dv-pane-header-icon';
        this.element.appendChild(this._expander);
        this.element.appendChild(this._content);
        this.addDisposables((0,_events__WEBPACK_IMPORTED_MODULE_0__.addDisposableListener)(this._element, 'click', () => {
            var _a;
            (_a = this.apiRef.api) === null || _a === void 0 ? void 0 : _a.setExpanded(!this.apiRef.api.isExpanded);
        }));
    }
    init(params) {
        this.apiRef.api = params.api;
        this._content.textContent = params.title;
        this.updateIcon();
        this.disposable.value = params.api.onDidExpansionChange(() => {
            this.updateIcon();
        });
    }
    updateIcon() {
        var _a;
        const isExpanded = !!((_a = this.apiRef.api) === null || _a === void 0 ? void 0 : _a.isExpanded);
        (0,_dom__WEBPACK_IMPORTED_MODULE_2__.toggleClass)(this._expander, 'collapsed', !isExpanded);
        if (isExpanded) {
            if (this._expander.contains(this._collapsedIcon)) {
                this._collapsedIcon.remove();
            }
            if (!this._expander.contains(this._expandedIcon)) {
                this._expander.appendChild(this._expandedIcon);
            }
        }
        else {
            if (this._expander.contains(this._expandedIcon)) {
                this._expandedIcon.remove();
            }
            if (!this._expander.contains(this._collapsedIcon)) {
                this._expander.appendChild(this._collapsedIcon);
            }
        }
    }
    update(_params) {
        //
    }
    dispose() {
        this.disposable.dispose();
        super.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/paneview/draggablePaneviewPanel.js":
/*!********************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/paneview/draggablePaneviewPanel.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DraggablePaneviewPanel: () => (/* binding */ DraggablePaneviewPanel)
/* harmony export */ });
/* harmony import */ var _api_component_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api/component.api */ "./node_modules/dockview-core/dist/esm/api/component.api.js");
/* harmony import */ var _dnd_abstractDragHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dnd/abstractDragHandler */ "./node_modules/dockview-core/dist/esm/dnd/abstractDragHandler.js");
/* harmony import */ var _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dnd/dataTransfer */ "./node_modules/dockview-core/dist/esm/dnd/dataTransfer.js");
/* harmony import */ var _dnd_droptarget__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../dnd/droptarget */ "./node_modules/dockview-core/dist/esm/dnd/droptarget.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _options__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./options */ "./node_modules/dockview-core/dist/esm/paneview/options.js");
/* harmony import */ var _paneviewPanel__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./paneviewPanel */ "./node_modules/dockview-core/dist/esm/paneview/paneviewPanel.js");







class DraggablePaneviewPanel extends _paneviewPanel__WEBPACK_IMPORTED_MODULE_6__.PaneviewPanel {
    constructor(options) {
        super({
            id: options.id,
            component: options.component,
            headerComponent: options.headerComponent,
            orientation: options.orientation,
            isExpanded: options.isExpanded,
            isHeaderVisible: true,
            headerSize: options.headerSize,
            minimumBodySize: options.minimumBodySize,
            maximumBodySize: options.maximumBodySize,
        });
        this._onDidDrop = new _events__WEBPACK_IMPORTED_MODULE_4__.Emitter();
        this.onDidDrop = this._onDidDrop.event;
        this._onUnhandledDragOverEvent = new _events__WEBPACK_IMPORTED_MODULE_4__.Emitter();
        this.onUnhandledDragOverEvent = this._onUnhandledDragOverEvent.event;
        this.accessor = options.accessor;
        this.addDisposables(this._onDidDrop, this._onUnhandledDragOverEvent);
        if (!options.disableDnd) {
            this.initDragFeatures();
        }
    }
    initDragFeatures() {
        if (!this.header) {
            return;
        }
        const id = this.id;
        const accessorId = this.accessor.id;
        this.header.draggable = true;
        this.handler = new (class PaneDragHandler extends _dnd_abstractDragHandler__WEBPACK_IMPORTED_MODULE_1__.DragHandler {
            getData() {
                _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.LocalSelectionTransfer.getInstance().setData([new _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.PaneTransfer(accessorId, id)], _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.PaneTransfer.prototype);
                return {
                    dispose: () => {
                        _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.LocalSelectionTransfer.getInstance().clearData(_dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.PaneTransfer.prototype);
                    },
                };
            }
        })(this.header);
        this.target = new _dnd_droptarget__WEBPACK_IMPORTED_MODULE_3__.Droptarget(this.element, {
            acceptedTargetZones: ['top', 'bottom'],
            overlayModel: {
                activationSize: { type: 'percentage', value: 50 },
            },
            canDisplayOverlay: (event, position) => {
                const data = (0,_dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.getPaneData)();
                if (data) {
                    if (data.paneId !== this.id &&
                        data.viewId === this.accessor.id) {
                        return true;
                    }
                }
                const firedEvent = new _options__WEBPACK_IMPORTED_MODULE_5__.PaneviewUnhandledDragOverEvent(event, position, _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.getPaneData, this);
                this._onUnhandledDragOverEvent.fire(firedEvent);
                return firedEvent.isAccepted;
            },
        });
        this.addDisposables(this._onDidDrop, this.handler, this.target, this.target.onDrop((event) => {
            this.onDrop(event);
        }));
    }
    onDrop(event) {
        const data = (0,_dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.getPaneData)();
        if (!data || data.viewId !== this.accessor.id) {
            // if there is no local drag event for this panel
            // or if the drag event was creating by another Paneview instance
            this._onDidDrop.fire(Object.assign(Object.assign({}, event), { panel: this, api: new _api_component_api__WEBPACK_IMPORTED_MODULE_0__.PaneviewApi(this.accessor), getData: _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.getPaneData }));
            return;
        }
        const containerApi = this._params
            .containerApi;
        const panelId = data.paneId;
        const existingPanel = containerApi.getPanel(panelId);
        if (!existingPanel) {
            // if the panel doesn't exist
            this._onDidDrop.fire(Object.assign(Object.assign({}, event), { panel: this, getData: _dnd_dataTransfer__WEBPACK_IMPORTED_MODULE_2__.getPaneData, api: new _api_component_api__WEBPACK_IMPORTED_MODULE_0__.PaneviewApi(this.accessor) }));
            return;
        }
        const allPanels = containerApi.panels;
        const fromIndex = allPanels.indexOf(existingPanel);
        let toIndex = containerApi.panels.indexOf(this);
        if (event.position === 'left' || event.position === 'top') {
            toIndex = Math.max(0, toIndex - 1);
        }
        if (event.position === 'right' || event.position === 'bottom') {
            if (fromIndex > toIndex) {
                toIndex++;
            }
            toIndex = Math.min(allPanels.length - 1, toIndex);
        }
        containerApi.movePanel(fromIndex, toIndex);
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/paneview/options.js":
/*!*****************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/paneview/options.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PROPERTY_KEYS_PANEVIEW: () => (/* binding */ PROPERTY_KEYS_PANEVIEW),
/* harmony export */   PaneviewUnhandledDragOverEvent: () => (/* binding */ PaneviewUnhandledDragOverEvent)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");

const PROPERTY_KEYS_PANEVIEW = (() => {
    /**
     * by readong the keys from an empty value object TypeScript will error
     * when we add or remove new properties to `DockviewOptions`
     */
    const properties = {
        disableAutoResizing: undefined,
        disableDnd: undefined,
        className: undefined,
    };
    return Object.keys(properties);
})();
class PaneviewUnhandledDragOverEvent extends _events__WEBPACK_IMPORTED_MODULE_0__.AcceptableEvent {
    constructor(nativeEvent, position, getData, panel) {
        super();
        this.nativeEvent = nativeEvent;
        this.position = position;
        this.getData = getData;
        this.panel = panel;
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/paneview/paneview.js":
/*!******************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/paneview/paneview.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Paneview: () => (/* binding */ Paneview)
/* harmony export */ });
/* harmony import */ var _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../splitview/splitview */ "./node_modules/dockview-core/dist/esm/splitview/splitview.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");




class Paneview extends _lifecycle__WEBPACK_IMPORTED_MODULE_1__.CompositeDisposable {
    get onDidAddView() {
        return this.splitview.onDidAddView;
    }
    get onDidRemoveView() {
        return this.splitview.onDidRemoveView;
    }
    get minimumSize() {
        return this.splitview.minimumSize;
    }
    get maximumSize() {
        return this.splitview.maximumSize;
    }
    get orientation() {
        return this.splitview.orientation;
    }
    get size() {
        return this.splitview.size;
    }
    get orthogonalSize() {
        return this.splitview.orthogonalSize;
    }
    constructor(container, options) {
        var _a;
        super();
        this.paneItems = [];
        this.skipAnimation = false;
        this._onDidChange = new _events__WEBPACK_IMPORTED_MODULE_2__.Emitter();
        this.onDidChange = this._onDidChange.event;
        this._orientation = (_a = options.orientation) !== null && _a !== void 0 ? _a : _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Orientation.VERTICAL;
        this.element = document.createElement('div');
        this.element.className = 'dv-pane-container';
        container.appendChild(this.element);
        this.splitview = new _splitview_splitview__WEBPACK_IMPORTED_MODULE_0__.Splitview(this.element, {
            orientation: this._orientation,
            proportionalLayout: false,
            descriptor: options.descriptor,
        });
        // if we've added views from the descriptor we need to
        // add the panes to our Pane array and setup animation
        this.getPanes().forEach((pane) => {
            const disposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_1__.CompositeDisposable(pane.onDidChangeExpansionState(() => {
                this.setupAnimation();
                this._onDidChange.fire(undefined);
            }));
            const paneItem = {
                pane,
                disposable: {
                    dispose: () => {
                        disposable.dispose();
                    },
                },
            };
            this.paneItems.push(paneItem);
            pane.orthogonalSize = this.splitview.orthogonalSize;
        });
        this.addDisposables(this._onDidChange, this.splitview.onDidSashEnd(() => {
            this._onDidChange.fire(undefined);
        }), this.splitview.onDidAddView(() => {
            this._onDidChange.fire();
        }), this.splitview.onDidRemoveView(() => {
            this._onDidChange.fire();
        }));
    }
    setViewVisible(index, visible) {
        this.splitview.setViewVisible(index, visible);
    }
    addPane(pane, size, index = this.splitview.length, skipLayout = false) {
        const disposable = pane.onDidChangeExpansionState(() => {
            this.setupAnimation();
            this._onDidChange.fire(undefined);
        });
        const paneItem = {
            pane,
            disposable: {
                dispose: () => {
                    disposable.dispose();
                },
            },
        };
        this.paneItems.splice(index, 0, paneItem);
        pane.orthogonalSize = this.splitview.orthogonalSize;
        this.splitview.addView(pane, size, index, skipLayout);
    }
    getViewSize(index) {
        return this.splitview.getViewSize(index);
    }
    getPanes() {
        return this.splitview.getViews();
    }
    removePane(index, options = { skipDispose: false }) {
        const paneItem = this.paneItems.splice(index, 1)[0];
        this.splitview.removeView(index);
        if (!options.skipDispose) {
            paneItem.disposable.dispose();
            paneItem.pane.dispose();
        }
        return paneItem;
    }
    moveView(from, to) {
        if (from === to) {
            return;
        }
        const view = this.removePane(from, { skipDispose: true });
        this.skipAnimation = true;
        try {
            this.addPane(view.pane, view.pane.size, to, false);
        }
        finally {
            this.skipAnimation = false;
        }
    }
    layout(size, orthogonalSize) {
        this.splitview.layout(size, orthogonalSize);
    }
    setupAnimation() {
        if (this.skipAnimation) {
            return;
        }
        if (this.animationTimer) {
            clearTimeout(this.animationTimer);
            this.animationTimer = undefined;
        }
        (0,_dom__WEBPACK_IMPORTED_MODULE_3__.addClasses)(this.element, 'dv-animated');
        this.animationTimer = setTimeout(() => {
            this.animationTimer = undefined;
            (0,_dom__WEBPACK_IMPORTED_MODULE_3__.removeClasses)(this.element, 'dv-animated');
        }, 200);
    }
    dispose() {
        super.dispose();
        if (this.animationTimer) {
            clearTimeout(this.animationTimer);
            this.animationTimer = undefined;
        }
        this.paneItems.forEach((paneItem) => {
            paneItem.disposable.dispose();
            paneItem.pane.dispose();
        });
        this.paneItems = [];
        this.splitview.dispose();
        this.element.remove();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/paneview/paneviewComponent.js":
/*!***************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/paneview/paneviewComponent.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PaneFramework: () => (/* binding */ PaneFramework),
/* harmony export */   PaneviewComponent: () => (/* binding */ PaneviewComponent)
/* harmony export */ });
/* harmony import */ var _api_component_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api/component.api */ "./node_modules/dockview-core/dist/esm/api/component.api.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _splitview_splitview__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../splitview/splitview */ "./node_modules/dockview-core/dist/esm/splitview/splitview.js");
/* harmony import */ var _paneview__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./paneview */ "./node_modules/dockview-core/dist/esm/paneview/paneview.js");
/* harmony import */ var _draggablePaneviewPanel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./draggablePaneviewPanel */ "./node_modules/dockview-core/dist/esm/paneview/draggablePaneviewPanel.js");
/* harmony import */ var _defaultPaneviewHeader__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./defaultPaneviewHeader */ "./node_modules/dockview-core/dist/esm/paneview/defaultPaneviewHeader.js");
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../math */ "./node_modules/dockview-core/dist/esm/math.js");
/* harmony import */ var _resizable__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../resizable */ "./node_modules/dockview-core/dist/esm/resizable.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");










const nextLayoutId = (0,_math__WEBPACK_IMPORTED_MODULE_7__.sequentialNumberGenerator)();
const HEADER_SIZE = 22;
const MINIMUM_BODY_SIZE = 0;
const MAXIMUM_BODY_SIZE = Number.MAX_SAFE_INTEGER;
class PaneFramework extends _draggablePaneviewPanel__WEBPACK_IMPORTED_MODULE_5__.DraggablePaneviewPanel {
    constructor(options) {
        super({
            accessor: options.accessor,
            id: options.id,
            component: options.component,
            headerComponent: options.headerComponent,
            orientation: options.orientation,
            isExpanded: options.isExpanded,
            disableDnd: options.disableDnd,
            headerSize: options.headerSize,
            minimumBodySize: options.minimumBodySize,
            maximumBodySize: options.maximumBodySize,
        });
        this.options = options;
    }
    getBodyComponent() {
        return this.options.body;
    }
    getHeaderComponent() {
        return this.options.header;
    }
}
class PaneviewComponent extends _resizable__WEBPACK_IMPORTED_MODULE_8__.Resizable {
    get id() {
        return this._id;
    }
    get panels() {
        return this.paneview.getPanes();
    }
    set paneview(value) {
        this._paneview = value;
        this._disposable.value = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable(this._paneview.onDidChange(() => {
            this._onDidLayoutChange.fire(undefined);
        }), this._paneview.onDidAddView((e) => this._onDidAddView.fire(e)), this._paneview.onDidRemoveView((e) => this._onDidRemoveView.fire(e)));
    }
    get paneview() {
        return this._paneview;
    }
    get minimumSize() {
        return this.paneview.minimumSize;
    }
    get maximumSize() {
        return this.paneview.maximumSize;
    }
    get height() {
        return this.paneview.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_3__.Orientation.HORIZONTAL
            ? this.paneview.orthogonalSize
            : this.paneview.size;
    }
    get width() {
        return this.paneview.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_3__.Orientation.HORIZONTAL
            ? this.paneview.size
            : this.paneview.orthogonalSize;
    }
    get options() {
        return this._options;
    }
    constructor(container, options) {
        var _a;
        super(document.createElement('div'), options.disableAutoResizing);
        this._id = nextLayoutId.next();
        this._disposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.MutableDisposable();
        this._viewDisposables = new Map();
        this._onDidLayoutfromJSON = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidLayoutFromJSON = this._onDidLayoutfromJSON.event;
        this._onDidLayoutChange = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidLayoutChange = this._onDidLayoutChange.event;
        this._onDidDrop = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidDrop = this._onDidDrop.event;
        this._onDidAddView = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidAddView = this._onDidAddView.event;
        this._onDidRemoveView = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidRemoveView = this._onDidRemoveView.event;
        this._onUnhandledDragOverEvent = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onUnhandledDragOverEvent = this._onUnhandledDragOverEvent.event;
        this.element.style.height = '100%';
        this.element.style.width = '100%';
        this.addDisposables(this._onDidLayoutChange, this._onDidLayoutfromJSON, this._onDidDrop, this._onDidAddView, this._onDidRemoveView, this._onUnhandledDragOverEvent);
        this._classNames = new _dom__WEBPACK_IMPORTED_MODULE_9__.Classnames(this.element);
        this._classNames.setClassNames((_a = options.className) !== null && _a !== void 0 ? _a : '');
        // the container is owned by the third-party, do not modify/delete it
        container.appendChild(this.element);
        this._options = options;
        this.paneview = new _paneview__WEBPACK_IMPORTED_MODULE_4__.Paneview(this.element, {
            // only allow paneview in the vertical orientation for now
            orientation: _splitview_splitview__WEBPACK_IMPORTED_MODULE_3__.Orientation.VERTICAL,
        });
        this.addDisposables(this._disposable);
    }
    setVisible(panel, visible) {
        const index = this.panels.indexOf(panel);
        this.paneview.setViewVisible(index, visible);
    }
    focus() {
        //noop
    }
    updateOptions(options) {
        var _a, _b;
        if ('className' in options) {
            this._classNames.setClassNames((_a = options.className) !== null && _a !== void 0 ? _a : '');
        }
        if ('disableResizing' in options) {
            this.disableResizing = (_b = options.disableAutoResizing) !== null && _b !== void 0 ? _b : false;
        }
        this._options = Object.assign(Object.assign({}, this.options), options);
    }
    addPanel(options) {
        var _a, _b;
        const body = this.options.createComponent({
            id: options.id,
            name: options.component,
        });
        let header;
        if (options.headerComponent && this.options.createHeaderComponent) {
            header = this.options.createHeaderComponent({
                id: options.id,
                name: options.headerComponent,
            });
        }
        if (!header) {
            header = new _defaultPaneviewHeader__WEBPACK_IMPORTED_MODULE_6__.DefaultHeader();
        }
        const view = new PaneFramework({
            id: options.id,
            component: options.component,
            headerComponent: options.headerComponent,
            header,
            body,
            orientation: _splitview_splitview__WEBPACK_IMPORTED_MODULE_3__.Orientation.VERTICAL,
            isExpanded: !!options.isExpanded,
            disableDnd: !!this.options.disableDnd,
            accessor: this,
            headerSize: (_a = options.headerSize) !== null && _a !== void 0 ? _a : HEADER_SIZE,
            minimumBodySize: MINIMUM_BODY_SIZE,
            maximumBodySize: MAXIMUM_BODY_SIZE,
        });
        this.doAddPanel(view);
        const size = typeof options.size === 'number' ? options.size : _splitview_splitview__WEBPACK_IMPORTED_MODULE_3__.Sizing.Distribute;
        const index = typeof options.index === 'number' ? options.index : undefined;
        view.init({
            params: (_b = options.params) !== null && _b !== void 0 ? _b : {},
            minimumBodySize: options.minimumBodySize,
            maximumBodySize: options.maximumBodySize,
            isExpanded: options.isExpanded,
            title: options.title,
            containerApi: new _api_component_api__WEBPACK_IMPORTED_MODULE_0__.PaneviewApi(this),
            accessor: this,
        });
        this.paneview.addPane(view, size, index);
        view.orientation = this.paneview.orientation;
        return view;
    }
    removePanel(panel) {
        const views = this.panels;
        const index = views.findIndex((_) => _ === panel);
        this.paneview.removePane(index);
        this.doRemovePanel(panel);
    }
    movePanel(from, to) {
        this.paneview.moveView(from, to);
    }
    getPanel(id) {
        return this.panels.find((view) => view.id === id);
    }
    layout(width, height) {
        const [size, orthogonalSize] = this.paneview.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_3__.Orientation.HORIZONTAL
            ? [width, height]
            : [height, width];
        this.paneview.layout(size, orthogonalSize);
    }
    toJSON() {
        const maximum = (value) => value === Number.MAX_SAFE_INTEGER ||
            value === Number.POSITIVE_INFINITY
            ? undefined
            : value;
        const minimum = (value) => (value <= 0 ? undefined : value);
        const views = this.paneview
            .getPanes()
            .map((view, i) => {
            const size = this.paneview.getViewSize(i);
            return {
                size,
                data: view.toJSON(),
                minimumSize: minimum(view.minimumBodySize),
                maximumSize: maximum(view.maximumBodySize),
                headerSize: view.headerSize,
                expanded: view.isExpanded(),
            };
        });
        return {
            views,
            size: this.paneview.size,
        };
    }
    fromJSON(serializedPaneview) {
        this.clear();
        const { views, size } = serializedPaneview;
        const queue = [];
        // take note of the existing dimensions
        const width = this.width;
        const height = this.height;
        this.paneview = new _paneview__WEBPACK_IMPORTED_MODULE_4__.Paneview(this.element, {
            orientation: _splitview_splitview__WEBPACK_IMPORTED_MODULE_3__.Orientation.VERTICAL,
            descriptor: {
                size,
                views: views.map((view) => {
                    var _a, _b, _c;
                    const data = view.data;
                    const body = this.options.createComponent({
                        id: data.id,
                        name: data.component,
                    });
                    let header;
                    if (data.headerComponent &&
                        this.options.createHeaderComponent) {
                        header = this.options.createHeaderComponent({
                            id: data.id,
                            name: data.headerComponent,
                        });
                    }
                    if (!header) {
                        header = new _defaultPaneviewHeader__WEBPACK_IMPORTED_MODULE_6__.DefaultHeader();
                    }
                    const panel = new PaneFramework({
                        id: data.id,
                        component: data.component,
                        headerComponent: data.headerComponent,
                        header,
                        body,
                        orientation: _splitview_splitview__WEBPACK_IMPORTED_MODULE_3__.Orientation.VERTICAL,
                        isExpanded: !!view.expanded,
                        disableDnd: !!this.options.disableDnd,
                        accessor: this,
                        headerSize: (_a = view.headerSize) !== null && _a !== void 0 ? _a : HEADER_SIZE,
                        minimumBodySize: (_b = view.minimumSize) !== null && _b !== void 0 ? _b : MINIMUM_BODY_SIZE,
                        maximumBodySize: (_c = view.maximumSize) !== null && _c !== void 0 ? _c : MAXIMUM_BODY_SIZE,
                    });
                    this.doAddPanel(panel);
                    queue.push(() => {
                        var _a;
                        panel.init({
                            params: (_a = data.params) !== null && _a !== void 0 ? _a : {},
                            minimumBodySize: view.minimumSize,
                            maximumBodySize: view.maximumSize,
                            title: data.title,
                            isExpanded: !!view.expanded,
                            containerApi: new _api_component_api__WEBPACK_IMPORTED_MODULE_0__.PaneviewApi(this),
                            accessor: this,
                        });
                        panel.orientation = this.paneview.orientation;
                    });
                    setTimeout(() => {
                        // the original onDidAddView events are missed since they are fired before we can subcribe to them
                        this._onDidAddView.fire(panel);
                    }, 0);
                    return { size: view.size, view: panel };
                }),
            },
        });
        this.layout(width, height);
        queue.forEach((f) => f());
        this._onDidLayoutfromJSON.fire();
    }
    clear() {
        for (const [_, value] of this._viewDisposables.entries()) {
            value.dispose();
        }
        this._viewDisposables.clear();
        this.paneview.dispose();
    }
    doAddPanel(panel) {
        const disposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable(panel.onDidDrop((event) => {
            this._onDidDrop.fire(event);
        }), panel.onUnhandledDragOverEvent((event) => {
            this._onUnhandledDragOverEvent.fire(event);
        }));
        this._viewDisposables.set(panel.id, disposable);
    }
    doRemovePanel(panel) {
        const disposable = this._viewDisposables.get(panel.id);
        if (disposable) {
            disposable.dispose();
            this._viewDisposables.delete(panel.id);
        }
    }
    dispose() {
        super.dispose();
        for (const [_, value] of this._viewDisposables.entries()) {
            value.dispose();
        }
        this._viewDisposables.clear();
        this.element.remove();
        this.paneview.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/paneview/paneviewPanel.js":
/*!***********************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/paneview/paneviewPanel.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PaneviewPanel: () => (/* binding */ PaneviewPanel)
/* harmony export */ });
/* harmony import */ var _api_paneviewPanelApi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api/paneviewPanelApi */ "./node_modules/dockview-core/dist/esm/api/paneviewPanelApi.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _gridview_basePanelView__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../gridview/basePanelView */ "./node_modules/dockview-core/dist/esm/gridview/basePanelView.js");
/* harmony import */ var _splitview_splitview__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../splitview/splitview */ "./node_modules/dockview-core/dist/esm/splitview/splitview.js");





class PaneviewPanel extends _gridview_basePanelView__WEBPACK_IMPORTED_MODULE_3__.BasePanelView {
    set orientation(value) {
        this._orientation = value;
    }
    get orientation() {
        return this._orientation;
    }
    get minimumSize() {
        const headerSize = this.headerSize;
        const expanded = this.isExpanded();
        const minimumBodySize = expanded ? this._minimumBodySize : 0;
        return headerSize + minimumBodySize;
    }
    get maximumSize() {
        const headerSize = this.headerSize;
        const expanded = this.isExpanded();
        const maximumBodySize = expanded ? this._maximumBodySize : 0;
        return headerSize + maximumBodySize;
    }
    get size() {
        return this._size;
    }
    get orthogonalSize() {
        return this._orthogonalSize;
    }
    set orthogonalSize(size) {
        this._orthogonalSize = size;
    }
    get minimumBodySize() {
        return this._minimumBodySize;
    }
    set minimumBodySize(value) {
        this._minimumBodySize = typeof value === 'number' ? value : 0;
    }
    get maximumBodySize() {
        return this._maximumBodySize;
    }
    set maximumBodySize(value) {
        this._maximumBodySize =
            typeof value === 'number' ? value : Number.POSITIVE_INFINITY;
    }
    get headerVisible() {
        return this._headerVisible;
    }
    set headerVisible(value) {
        this._headerVisible = value;
        this.header.style.display = value ? '' : 'none';
    }
    constructor(options) {
        super(options.id, options.component, new _api_paneviewPanelApi__WEBPACK_IMPORTED_MODULE_0__.PaneviewPanelApiImpl(options.id, options.component));
        this._onDidChangeExpansionState = new _events__WEBPACK_IMPORTED_MODULE_2__.Emitter({ replay: true });
        this.onDidChangeExpansionState = this._onDidChangeExpansionState.event;
        this._onDidChange = new _events__WEBPACK_IMPORTED_MODULE_2__.Emitter();
        this.onDidChange = this._onDidChange.event;
        this._orthogonalSize = 0;
        this._size = 0;
        this._isExpanded = false;
        this.api.pane = this; // TODO cannot use 'this' before 'super'
        this.api.initialize(this);
        this.headerSize = options.headerSize;
        this.headerComponent = options.headerComponent;
        this._minimumBodySize = options.minimumBodySize;
        this._maximumBodySize = options.maximumBodySize;
        this._isExpanded = options.isExpanded;
        this._headerVisible = options.isHeaderVisible;
        this._onDidChangeExpansionState.fire(this.isExpanded()); // initialize value
        this._orientation = options.orientation;
        this.element.classList.add('dv-pane');
        this.addDisposables(this.api.onWillVisibilityChange((event) => {
            const { isVisible } = event;
            const { accessor } = this._params;
            accessor.setVisible(this, isVisible);
        }), this.api.onDidSizeChange((event) => {
            this._onDidChange.fire({ size: event.size });
        }), (0,_events__WEBPACK_IMPORTED_MODULE_2__.addDisposableListener)(this.element, 'mouseenter', (ev) => {
            this.api._onMouseEnter.fire(ev);
        }), (0,_events__WEBPACK_IMPORTED_MODULE_2__.addDisposableListener)(this.element, 'mouseleave', (ev) => {
            this.api._onMouseLeave.fire(ev);
        }));
        this.addDisposables(this._onDidChangeExpansionState, this.onDidChangeExpansionState((isPanelExpanded) => {
            this.api._onDidExpansionChange.fire({
                isExpanded: isPanelExpanded,
            });
        }), this.api.onDidFocusChange((e) => {
            if (!this.header) {
                return;
            }
            if (e.isFocused) {
                (0,_dom__WEBPACK_IMPORTED_MODULE_1__.addClasses)(this.header, 'focused');
            }
            else {
                (0,_dom__WEBPACK_IMPORTED_MODULE_1__.removeClasses)(this.header, 'focused');
            }
        }));
        this.renderOnce();
    }
    setVisible(isVisible) {
        this.api._onDidVisibilityChange.fire({ isVisible });
    }
    setActive(isActive) {
        this.api._onDidActiveChange.fire({ isActive });
    }
    isExpanded() {
        return this._isExpanded;
    }
    setExpanded(expanded) {
        if (this._isExpanded === expanded) {
            return;
        }
        this._isExpanded = expanded;
        if (expanded) {
            if (this.animationTimer) {
                clearTimeout(this.animationTimer);
            }
            if (this.body) {
                this.element.appendChild(this.body);
            }
        }
        else {
            this.animationTimer = setTimeout(() => {
                var _a;
                (_a = this.body) === null || _a === void 0 ? void 0 : _a.remove();
            }, 200);
        }
        this._onDidChange.fire(expanded ? { size: this.width } : {});
        this._onDidChangeExpansionState.fire(expanded);
    }
    layout(size, orthogonalSize) {
        this._size = size;
        this._orthogonalSize = orthogonalSize;
        const [width, height] = this.orientation === _splitview_splitview__WEBPACK_IMPORTED_MODULE_4__.Orientation.HORIZONTAL
            ? [size, orthogonalSize]
            : [orthogonalSize, size];
        super.layout(width, height);
    }
    init(parameters) {
        var _a, _b;
        super.init(parameters);
        if (typeof parameters.minimumBodySize === 'number') {
            this.minimumBodySize = parameters.minimumBodySize;
        }
        if (typeof parameters.maximumBodySize === 'number') {
            this.maximumBodySize = parameters.maximumBodySize;
        }
        this.bodyPart = this.getBodyComponent();
        this.headerPart = this.getHeaderComponent();
        this.bodyPart.init(Object.assign(Object.assign({}, parameters), { api: this.api }));
        this.headerPart.init(Object.assign(Object.assign({}, parameters), { api: this.api }));
        (_a = this.body) === null || _a === void 0 ? void 0 : _a.append(this.bodyPart.element);
        (_b = this.header) === null || _b === void 0 ? void 0 : _b.append(this.headerPart.element);
        if (typeof parameters.isExpanded === 'boolean') {
            this.setExpanded(parameters.isExpanded);
        }
    }
    toJSON() {
        const params = this._params;
        return Object.assign(Object.assign({}, super.toJSON()), { headerComponent: this.headerComponent, title: params.title });
    }
    renderOnce() {
        this.header = document.createElement('div');
        this.header.tabIndex = 0;
        this.header.className = 'dv-pane-header';
        this.header.style.height = `${this.headerSize}px`;
        this.header.style.lineHeight = `${this.headerSize}px`;
        this.header.style.minHeight = `${this.headerSize}px`;
        this.header.style.maxHeight = `${this.headerSize}px`;
        this.element.appendChild(this.header);
        this.body = document.createElement('div');
        this.body.className = 'dv-pane-body';
        this.element.appendChild(this.body);
    }
    // TODO slightly hacky by-pass of the component to create a body and header component
    getComponent() {
        return {
            update: (params) => {
                var _a, _b;
                (_a = this.bodyPart) === null || _a === void 0 ? void 0 : _a.update({ params });
                (_b = this.headerPart) === null || _b === void 0 ? void 0 : _b.update({ params });
            },
            dispose: () => {
                var _a, _b;
                (_a = this.bodyPart) === null || _a === void 0 ? void 0 : _a.dispose();
                (_b = this.headerPart) === null || _b === void 0 ? void 0 : _b.dispose();
            },
        };
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/popoutWindow.js":
/*!*************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/popoutWindow.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PopoutWindow: () => (/* binding */ PopoutWindow)
/* harmony export */ });
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class PopoutWindow extends _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable {
    get window() {
        var _a, _b;
        return (_b = (_a = this._window) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : null;
    }
    constructor(target, className, options) {
        super();
        this.target = target;
        this.className = className;
        this.options = options;
        this._onWillClose = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onWillClose = this._onWillClose.event;
        this._onDidClose = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidClose = this._onDidClose.event;
        this._window = null;
        this.addDisposables(this._onWillClose, this._onDidClose, {
            dispose: () => {
                this.close();
            },
        });
    }
    dimensions() {
        if (!this._window) {
            return null;
        }
        const left = this._window.value.screenX;
        const top = this._window.value.screenY;
        const width = this._window.value.innerWidth;
        const height = this._window.value.innerHeight;
        return { top, left, width, height };
    }
    close() {
        var _a, _b;
        if (this._window) {
            this._onWillClose.fire();
            (_b = (_a = this.options).onWillClose) === null || _b === void 0 ? void 0 : _b.call(_a, {
                id: this.target,
                window: this._window.value,
            });
            this._window.disposable.dispose();
            this._window = null;
            this._onDidClose.fire();
        }
    }
    open() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            if (this._window) {
                throw new Error('instance of popout window is already open');
            }
            const url = `${this.options.url}`;
            const features = Object.entries({
                top: this.options.top,
                left: this.options.left,
                width: this.options.width,
                height: this.options.height,
            })
                .map(([key, value]) => `${key}=${value}`)
                .join(',');
            /**
             * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/open
             */
            const externalWindow = window.open(url, this.target, features);
            if (!externalWindow) {
                /**
                 * Popup blocked
                 */
                return null;
            }
            const disposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable();
            this._window = { value: externalWindow, disposable };
            disposable.addDisposables(_lifecycle__WEBPACK_IMPORTED_MODULE_2__.Disposable.from(() => {
                externalWindow.close();
            }), (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(window, 'beforeunload', () => {
                /**
                 * before the main window closes we should close this popup too
                 * to be good citizens
                 *
                 * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event
                 */
                this.close();
            }));
            const container = this.createPopoutWindowContainer();
            if (this.className) {
                container.classList.add(this.className);
            }
            (_b = (_a = this.options).onDidOpen) === null || _b === void 0 ? void 0 : _b.call(_a, {
                id: this.target,
                window: externalWindow,
            });
            return new Promise((resolve, reject) => {
                externalWindow.addEventListener('unload', (e) => {
                    // if page fails to load before unloading
                    // this.close();
                });
                externalWindow.addEventListener('load', () => {
                    /**
                     * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event
                     */
                    try {
                        const externalDocument = externalWindow.document;
                        externalDocument.title = document.title;
                        externalDocument.body.appendChild(container);
                        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.addStyles)(externalDocument, window.document.styleSheets);
                        /**
                         * beforeunload must be registered after load for reasons I could not determine
                         * otherwise the beforeunload event will not fire when the window is closed
                         */
                        (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(externalWindow, 'beforeunload', () => {
                            /**
                             * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event
                             */
                            this.close();
                        });
                        resolve(container);
                    }
                    catch (err) {
                        // only except this is the DOM isn't setup. e.g. in a in correctly configured test
                        reject(err);
                    }
                });
            });
        });
    }
    createPopoutWindowContainer() {
        const el = document.createElement('div');
        el.classList.add('dv-popout-window');
        el.id = 'dv-popout-window';
        el.style.position = 'absolute';
        el.style.width = '100%';
        el.style.height = '100%';
        el.style.top = '0px';
        el.style.left = '0px';
        return el;
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/resizable.js":
/*!**********************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/resizable.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Resizable: () => (/* binding */ Resizable)
/* harmony export */ });
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");


class Resizable extends _lifecycle__WEBPACK_IMPORTED_MODULE_1__.CompositeDisposable {
    get element() {
        return this._element;
    }
    get disableResizing() {
        return this._disableResizing;
    }
    set disableResizing(value) {
        this._disableResizing = value;
    }
    constructor(parentElement, disableResizing = false) {
        super();
        this._disableResizing = disableResizing;
        this._element = parentElement;
        this.addDisposables((0,_dom__WEBPACK_IMPORTED_MODULE_0__.watchElementResize)(this._element, (entry) => {
            if (this.isDisposed) {
                /**
                 * resize is delayed through requestAnimationFrame so there is a small chance
                 * the component has already been disposed of
                 */
                return;
            }
            if (this.disableResizing) {
                return;
            }
            if (!this._element.offsetParent) {
                /**
                 * offsetParent === null is equivalent to display: none being set on the element or one
                 * of it's parents. In the display: none case the size will become (0, 0) which we do
                 * not want to propagate.
                 *
                 * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent
                 *
                 * You could use checkVisibility() but at the time of writing it's not supported across
                 * all Browsers
                 *
                 * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/checkVisibility
                 */
                return;
            }
            if (!(0,_dom__WEBPACK_IMPORTED_MODULE_0__.isInDocument)(this._element)) {
                /**
                 * since the event is dispatched through requestAnimationFrame there is a small chance
                 * the component is no longer attached to the DOM, if that is the case the dimensions
                 * are mostly likely all zero and meaningless. we should skip this case.
                 */
                return;
            }
            const { width, height } = entry.contentRect;
            this.layout(width, height);
        }));
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/scrollbar.js":
/*!**********************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/scrollbar.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Scrollbar: () => (/* binding */ Scrollbar)
/* harmony export */ });
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./math */ "./node_modules/dockview-core/dist/esm/math.js");




class Scrollbar extends _lifecycle__WEBPACK_IMPORTED_MODULE_2__.CompositeDisposable {
    get element() {
        return this._element;
    }
    constructor(scrollableElement) {
        super();
        this.scrollableElement = scrollableElement;
        this._scrollLeft = 0;
        this._element = document.createElement('div');
        this._element.className = 'dv-scrollable';
        this._horizontalScrollbar = document.createElement('div');
        this._horizontalScrollbar.className = 'dv-scrollbar-horizontal';
        this.element.appendChild(scrollableElement);
        this.element.appendChild(this._horizontalScrollbar);
        this.addDisposables((0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(this.element, 'wheel', (event) => {
            this._scrollLeft += event.deltaY * Scrollbar.MouseWheelSpeed;
            this.calculateScrollbarStyles();
        }), (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(this._horizontalScrollbar, 'pointerdown', (event) => {
            event.preventDefault();
            (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(this.element, 'dv-scrollable-scrolling', true);
            const originalClientX = event.clientX;
            const originalScrollLeft = this._scrollLeft;
            const onPointerMove = (event) => {
                const deltaX = event.clientX - originalClientX;
                const { clientWidth } = this.element;
                const { scrollWidth } = this.scrollableElement;
                const p = clientWidth / scrollWidth;
                this._scrollLeft = originalScrollLeft + deltaX / p;
                this.calculateScrollbarStyles();
            };
            const onEnd = () => {
                (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(this.element, 'dv-scrollable-scrolling', false);
                document.removeEventListener('pointermove', onPointerMove);
                document.removeEventListener('pointerup', onEnd);
                document.removeEventListener('pointercancel', onEnd);
            };
            document.addEventListener('pointermove', onPointerMove);
            document.addEventListener('pointerup', onEnd);
            document.addEventListener('pointercancel', onEnd);
        }), (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(this.element, 'scroll', () => {
            this.calculateScrollbarStyles();
        }), (0,_events__WEBPACK_IMPORTED_MODULE_1__.addDisposableListener)(this.scrollableElement, 'scroll', () => {
            this._scrollLeft = this.scrollableElement.scrollLeft;
            this.calculateScrollbarStyles();
        }), (0,_dom__WEBPACK_IMPORTED_MODULE_0__.watchElementResize)(this.element, () => {
            (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(this.element, 'dv-scrollable-resizing', true);
            if (this._animationTimer) {
                clearTimeout(this._animationTimer);
            }
            this._animationTimer = setTimeout(() => {
                clearTimeout(this._animationTimer);
                (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(this.element, 'dv-scrollable-resizing', false);
            }, 500);
            this.calculateScrollbarStyles();
        }));
    }
    calculateScrollbarStyles() {
        const { clientWidth } = this.element;
        const { scrollWidth } = this.scrollableElement;
        const hasScrollbar = scrollWidth > clientWidth;
        if (hasScrollbar) {
            const px = clientWidth * (clientWidth / scrollWidth);
            this._horizontalScrollbar.style.width = `${px}px`;
            this._scrollLeft = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(this._scrollLeft, 0, this.scrollableElement.scrollWidth - clientWidth);
            this.scrollableElement.scrollLeft = this._scrollLeft;
            const percentageComplete = this._scrollLeft / (scrollWidth - clientWidth);
            this._horizontalScrollbar.style.left = `${(clientWidth - px) * percentageComplete}px`;
        }
        else {
            this._horizontalScrollbar.style.width = `0px`;
            this._horizontalScrollbar.style.left = `0px`;
            this._scrollLeft = 0;
        }
    }
}
Scrollbar.MouseWheelSpeed = 1;


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/splitview/options.js":
/*!******************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/splitview/options.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PROPERTY_KEYS_SPLITVIEW: () => (/* binding */ PROPERTY_KEYS_SPLITVIEW)
/* harmony export */ });
const PROPERTY_KEYS_SPLITVIEW = (() => {
    /**
     * by readong the keys from an empty value object TypeScript will error
     * when we add or remove new properties to `DockviewOptions`
     */
    const properties = {
        orientation: undefined,
        descriptor: undefined,
        proportionalLayout: undefined,
        styles: undefined,
        margin: undefined,
        disableAutoResizing: undefined,
        className: undefined,
    };
    return Object.keys(properties);
})();


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/splitview/splitview.js":
/*!********************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/splitview/splitview.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LayoutPriority: () => (/* binding */ LayoutPriority),
/* harmony export */   Orientation: () => (/* binding */ Orientation),
/* harmony export */   SashState: () => (/* binding */ SashState),
/* harmony export */   Sizing: () => (/* binding */ Sizing),
/* harmony export */   Splitview: () => (/* binding */ Splitview)
/* harmony export */ });
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _array__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../array */ "./node_modules/dockview-core/dist/esm/array.js");
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math */ "./node_modules/dockview-core/dist/esm/math.js");
/* harmony import */ var _viewItem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./viewItem */ "./node_modules/dockview-core/dist/esm/splitview/viewItem.js");
/*---------------------------------------------------------------------------------------------
 * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:
 * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/splitview
 *--------------------------------------------------------------------------------------------*/





var Orientation;
(function (Orientation) {
    Orientation["HORIZONTAL"] = "HORIZONTAL";
    Orientation["VERTICAL"] = "VERTICAL";
})(Orientation || (Orientation = {}));
var SashState;
(function (SashState) {
    SashState[SashState["MAXIMUM"] = 0] = "MAXIMUM";
    SashState[SashState["MINIMUM"] = 1] = "MINIMUM";
    SashState[SashState["DISABLED"] = 2] = "DISABLED";
    SashState[SashState["ENABLED"] = 3] = "ENABLED";
})(SashState || (SashState = {}));
var LayoutPriority;
(function (LayoutPriority) {
    LayoutPriority["Low"] = "low";
    LayoutPriority["High"] = "high";
    LayoutPriority["Normal"] = "normal";
})(LayoutPriority || (LayoutPriority = {}));
var Sizing;
(function (Sizing) {
    Sizing.Distribute = { type: 'distribute' };
    function Split(index) {
        return { type: 'split', index };
    }
    Sizing.Split = Split;
    function Invisible(cachedVisibleSize) {
        return { type: 'invisible', cachedVisibleSize };
    }
    Sizing.Invisible = Invisible;
})(Sizing || (Sizing = {}));
class Splitview {
    get contentSize() {
        return this._contentSize;
    }
    get size() {
        return this._size;
    }
    set size(value) {
        this._size = value;
    }
    get orthogonalSize() {
        return this._orthogonalSize;
    }
    set orthogonalSize(value) {
        this._orthogonalSize = value;
    }
    get length() {
        return this.viewItems.length;
    }
    get proportions() {
        return this._proportions ? [...this._proportions] : undefined;
    }
    get orientation() {
        return this._orientation;
    }
    set orientation(value) {
        this._orientation = value;
        const tmp = this.size;
        this.size = this.orthogonalSize;
        this.orthogonalSize = tmp;
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.removeClasses)(this.element, 'dv-horizontal', 'dv-vertical');
        this.element.classList.add(this.orientation == Orientation.HORIZONTAL
            ? 'dv-horizontal'
            : 'dv-vertical');
    }
    get minimumSize() {
        return this.viewItems.reduce((r, item) => r + item.minimumSize, 0);
    }
    get maximumSize() {
        return this.length === 0
            ? Number.POSITIVE_INFINITY
            : this.viewItems.reduce((r, item) => r + item.maximumSize, 0);
    }
    get startSnappingEnabled() {
        return this._startSnappingEnabled;
    }
    set startSnappingEnabled(startSnappingEnabled) {
        if (this._startSnappingEnabled === startSnappingEnabled) {
            return;
        }
        this._startSnappingEnabled = startSnappingEnabled;
        this.updateSashEnablement();
    }
    get endSnappingEnabled() {
        return this._endSnappingEnabled;
    }
    set endSnappingEnabled(endSnappingEnabled) {
        if (this._endSnappingEnabled === endSnappingEnabled) {
            return;
        }
        this._endSnappingEnabled = endSnappingEnabled;
        this.updateSashEnablement();
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = value;
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(this.element, 'dv-splitview-disabled', value);
    }
    get margin() {
        return this._margin;
    }
    set margin(value) {
        this._margin = value;
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(this.element, 'dv-splitview-has-margin', value !== 0);
    }
    constructor(container, options) {
        var _a, _b;
        this.container = container;
        this.viewItems = [];
        this.sashes = [];
        this._size = 0;
        this._orthogonalSize = 0;
        this._contentSize = 0;
        this._proportions = undefined;
        this._startSnappingEnabled = true;
        this._endSnappingEnabled = true;
        this._disabled = false;
        this._margin = 0;
        this._onDidSashEnd = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidSashEnd = this._onDidSashEnd.event;
        this._onDidAddView = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidAddView = this._onDidAddView.event;
        this._onDidRemoveView = new _events__WEBPACK_IMPORTED_MODULE_1__.Emitter();
        this.onDidRemoveView = this._onDidRemoveView.event;
        this.resize = (index, delta, sizes = this.viewItems.map((x) => x.size), lowPriorityIndexes, highPriorityIndexes, overloadMinDelta = Number.NEGATIVE_INFINITY, overloadMaxDelta = Number.POSITIVE_INFINITY, snapBefore, snapAfter) => {
            if (index < 0 || index > this.viewItems.length) {
                return 0;
            }
            const upIndexes = (0,_math__WEBPACK_IMPORTED_MODULE_3__.range)(index, -1);
            const downIndexes = (0,_math__WEBPACK_IMPORTED_MODULE_3__.range)(index + 1, this.viewItems.length);
            //
            if (highPriorityIndexes) {
                for (const i of highPriorityIndexes) {
                    (0,_array__WEBPACK_IMPORTED_MODULE_2__.pushToStart)(upIndexes, i);
                    (0,_array__WEBPACK_IMPORTED_MODULE_2__.pushToStart)(downIndexes, i);
                }
            }
            if (lowPriorityIndexes) {
                for (const i of lowPriorityIndexes) {
                    (0,_array__WEBPACK_IMPORTED_MODULE_2__.pushToEnd)(upIndexes, i);
                    (0,_array__WEBPACK_IMPORTED_MODULE_2__.pushToEnd)(downIndexes, i);
                }
            }
            //
            const upItems = upIndexes.map((i) => this.viewItems[i]);
            const upSizes = upIndexes.map((i) => sizes[i]);
            //
            const downItems = downIndexes.map((i) => this.viewItems[i]);
            const downSizes = downIndexes.map((i) => sizes[i]);
            //
            const minDeltaUp = upIndexes.reduce((_, i) => _ + this.viewItems[i].minimumSize - sizes[i], 0);
            const maxDeltaUp = upIndexes.reduce((_, i) => _ + this.viewItems[i].maximumSize - sizes[i], 0);
            //
            const maxDeltaDown = downIndexes.length === 0
                ? Number.POSITIVE_INFINITY
                : downIndexes.reduce((_, i) => _ + sizes[i] - this.viewItems[i].minimumSize, 0);
            const minDeltaDown = downIndexes.length === 0
                ? Number.NEGATIVE_INFINITY
                : downIndexes.reduce((_, i) => _ + sizes[i] - this.viewItems[i].maximumSize, 0);
            //
            const minDelta = Math.max(minDeltaUp, minDeltaDown);
            const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);
            //
            let snapped = false;
            if (snapBefore) {
                const snapView = this.viewItems[snapBefore.index];
                const visible = delta >= snapBefore.limitDelta;
                snapped = visible !== snapView.visible;
                snapView.setVisible(visible, snapBefore.size);
            }
            if (!snapped && snapAfter) {
                const snapView = this.viewItems[snapAfter.index];
                const visible = delta < snapAfter.limitDelta;
                snapped = visible !== snapView.visible;
                snapView.setVisible(visible, snapAfter.size);
            }
            if (snapped) {
                return this.resize(index, delta, sizes, lowPriorityIndexes, highPriorityIndexes, overloadMinDelta, overloadMaxDelta);
            }
            //
            const tentativeDelta = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(delta, minDelta, maxDelta);
            let actualDelta = 0;
            //
            let deltaUp = tentativeDelta;
            for (let i = 0; i < upItems.length; i++) {
                const item = upItems[i];
                const size = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(upSizes[i] + deltaUp, item.minimumSize, item.maximumSize);
                const viewDelta = size - upSizes[i];
                actualDelta += viewDelta;
                deltaUp -= viewDelta;
                item.size = size;
            }
            //
            let deltaDown = actualDelta;
            for (let i = 0; i < downItems.length; i++) {
                const item = downItems[i];
                const size = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(downSizes[i] - deltaDown, item.minimumSize, item.maximumSize);
                const viewDelta = size - downSizes[i];
                deltaDown += viewDelta;
                item.size = size;
            }
            //
            return delta;
        };
        this._orientation = (_a = options.orientation) !== null && _a !== void 0 ? _a : Orientation.VERTICAL;
        this.element = this.createContainer();
        this.margin = (_b = options.margin) !== null && _b !== void 0 ? _b : 0;
        this.proportionalLayout =
            options.proportionalLayout === undefined
                ? true
                : !!options.proportionalLayout;
        this.viewContainer = this.createViewContainer();
        this.sashContainer = this.createSashContainer();
        this.element.appendChild(this.sashContainer);
        this.element.appendChild(this.viewContainer);
        this.container.appendChild(this.element);
        this.style(options.styles);
        // We have an existing set of view, add them now
        if (options.descriptor) {
            this._size = options.descriptor.size;
            options.descriptor.views.forEach((viewDescriptor, index) => {
                const sizing = viewDescriptor.visible === undefined ||
                    viewDescriptor.visible
                    ? viewDescriptor.size
                    : {
                        type: 'invisible',
                        cachedVisibleSize: viewDescriptor.size,
                    };
                const view = viewDescriptor.view;
                this.addView(view, sizing, index, true
                // true skip layout
                );
            });
            // Initialize content size and proportions for first layout
            this._contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);
            this.saveProportions();
        }
    }
    style(styles) {
        if ((styles === null || styles === void 0 ? void 0 : styles.separatorBorder) === 'transparent') {
            (0,_dom__WEBPACK_IMPORTED_MODULE_0__.removeClasses)(this.element, 'dv-separator-border');
            this.element.style.removeProperty('--dv-separator-border');
        }
        else {
            (0,_dom__WEBPACK_IMPORTED_MODULE_0__.addClasses)(this.element, 'dv-separator-border');
            if (styles === null || styles === void 0 ? void 0 : styles.separatorBorder) {
                this.element.style.setProperty('--dv-separator-border', styles.separatorBorder);
            }
        }
    }
    isViewVisible(index) {
        if (index < 0 || index >= this.viewItems.length) {
            throw new Error('Index out of bounds');
        }
        const viewItem = this.viewItems[index];
        return viewItem.visible;
    }
    setViewVisible(index, visible) {
        if (index < 0 || index >= this.viewItems.length) {
            throw new Error('Index out of bounds');
        }
        const viewItem = this.viewItems[index];
        viewItem.setVisible(visible, viewItem.size);
        this.distributeEmptySpace(index);
        this.layoutViews();
        this.saveProportions();
    }
    getViewSize(index) {
        if (index < 0 || index >= this.viewItems.length) {
            return -1;
        }
        return this.viewItems[index].size;
    }
    resizeView(index, size) {
        if (index < 0 || index >= this.viewItems.length) {
            return;
        }
        const indexes = (0,_math__WEBPACK_IMPORTED_MODULE_3__.range)(this.viewItems.length).filter((i) => i !== index);
        const lowPriorityIndexes = [
            ...indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.Low),
            index,
        ];
        const highPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.High);
        const item = this.viewItems[index];
        size = Math.round(size);
        size = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(size, item.minimumSize, Math.min(item.maximumSize, this._size));
        item.size = size;
        this.relayout(lowPriorityIndexes, highPriorityIndexes);
    }
    getViews() {
        return this.viewItems.map((x) => x.view);
    }
    onDidChange(item, size) {
        const index = this.viewItems.indexOf(item);
        if (index < 0 || index >= this.viewItems.length) {
            return;
        }
        size = typeof size === 'number' ? size : item.size;
        size = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(size, item.minimumSize, item.maximumSize);
        item.size = size;
        const indexes = (0,_math__WEBPACK_IMPORTED_MODULE_3__.range)(this.viewItems.length).filter((i) => i !== index);
        const lowPriorityIndexes = [
            ...indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.Low),
            index,
        ];
        const highPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.High);
        /**
         * add this view we are changing to the low-index list since we have determined the size
         * here and don't want it changed
         */
        this.relayout([...lowPriorityIndexes, index], highPriorityIndexes);
    }
    addView(view, size = { type: 'distribute' }, index = this.viewItems.length, skipLayout) {
        const container = document.createElement('div');
        container.className = 'dv-view';
        container.appendChild(view.element);
        let viewSize;
        if (typeof size === 'number') {
            viewSize = size;
        }
        else if (size.type === 'split') {
            viewSize = this.getViewSize(size.index) / 2;
        }
        else if (size.type === 'invisible') {
            viewSize = { cachedVisibleSize: size.cachedVisibleSize };
        }
        else {
            viewSize = view.minimumSize;
        }
        const disposable = view.onDidChange((newSize) => this.onDidChange(viewItem, newSize.size));
        const viewItem = new _viewItem__WEBPACK_IMPORTED_MODULE_4__.ViewItem(container, view, viewSize, {
            dispose: () => {
                disposable.dispose();
                this.viewContainer.removeChild(container);
            },
        });
        if (index === this.viewItems.length) {
            this.viewContainer.appendChild(container);
        }
        else {
            this.viewContainer.insertBefore(container, this.viewContainer.children.item(index));
        }
        this.viewItems.splice(index, 0, viewItem);
        if (this.viewItems.length > 1) {
            //add sash
            const sash = document.createElement('div');
            sash.className = 'dv-sash';
            const onPointerStart = (event) => {
                for (const item of this.viewItems) {
                    item.enabled = false;
                }
                const iframes = (0,_dom__WEBPACK_IMPORTED_MODULE_0__.disableIframePointEvents)();
                const start = this._orientation === Orientation.HORIZONTAL
                    ? event.clientX
                    : event.clientY;
                const sashIndex = (0,_array__WEBPACK_IMPORTED_MODULE_2__.firstIndex)(this.sashes, (s) => s.container === sash);
                //
                const sizes = this.viewItems.map((x) => x.size);
                //
                let snapBefore;
                let snapAfter;
                const upIndexes = (0,_math__WEBPACK_IMPORTED_MODULE_3__.range)(sashIndex, -1);
                const downIndexes = (0,_math__WEBPACK_IMPORTED_MODULE_3__.range)(sashIndex + 1, this.viewItems.length);
                const minDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].minimumSize - sizes[i]), 0);
                const maxDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].viewMaximumSize - sizes[i]), 0);
                const maxDeltaDown = downIndexes.length === 0
                    ? Number.POSITIVE_INFINITY
                    : downIndexes.reduce((r, i) => r +
                        (sizes[i] - this.viewItems[i].minimumSize), 0);
                const minDeltaDown = downIndexes.length === 0
                    ? Number.NEGATIVE_INFINITY
                    : downIndexes.reduce((r, i) => r +
                        (sizes[i] -
                            this.viewItems[i].viewMaximumSize), 0);
                const minDelta = Math.max(minDeltaUp, minDeltaDown);
                const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);
                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);
                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);
                if (typeof snapBeforeIndex === 'number') {
                    const snappedViewItem = this.viewItems[snapBeforeIndex];
                    const halfSize = Math.floor(snappedViewItem.viewMinimumSize / 2);
                    snapBefore = {
                        index: snapBeforeIndex,
                        limitDelta: snappedViewItem.visible
                            ? minDelta - halfSize
                            : minDelta + halfSize,
                        size: snappedViewItem.size,
                    };
                }
                if (typeof snapAfterIndex === 'number') {
                    const snappedViewItem = this.viewItems[snapAfterIndex];
                    const halfSize = Math.floor(snappedViewItem.viewMinimumSize / 2);
                    snapAfter = {
                        index: snapAfterIndex,
                        limitDelta: snappedViewItem.visible
                            ? maxDelta + halfSize
                            : maxDelta - halfSize,
                        size: snappedViewItem.size,
                    };
                }
                const onPointerMove = (event) => {
                    const current = this._orientation === Orientation.HORIZONTAL
                        ? event.clientX
                        : event.clientY;
                    const delta = current - start;
                    this.resize(sashIndex, delta, sizes, undefined, undefined, minDelta, maxDelta, snapBefore, snapAfter);
                    this.distributeEmptySpace();
                    this.layoutViews();
                };
                const end = () => {
                    for (const item of this.viewItems) {
                        item.enabled = true;
                    }
                    iframes.release();
                    this.saveProportions();
                    document.removeEventListener('pointermove', onPointerMove);
                    document.removeEventListener('pointerup', end);
                    document.removeEventListener('pointercancel', end);
                    this._onDidSashEnd.fire(undefined);
                };
                document.addEventListener('pointermove', onPointerMove);
                document.addEventListener('pointerup', end);
                document.addEventListener('pointercancel', end);
            };
            sash.addEventListener('pointerdown', onPointerStart);
            const sashItem = {
                container: sash,
                disposable: () => {
                    sash.removeEventListener('pointerdown', onPointerStart);
                    this.sashContainer.removeChild(sash);
                },
            };
            this.sashContainer.appendChild(sash);
            this.sashes.push(sashItem);
        }
        if (!skipLayout) {
            this.relayout([index]);
        }
        if (!skipLayout &&
            typeof size !== 'number' &&
            size.type === 'distribute') {
            this.distributeViewSizes();
        }
        this._onDidAddView.fire(view);
    }
    distributeViewSizes() {
        const flexibleViewItems = [];
        let flexibleSize = 0;
        for (const item of this.viewItems) {
            if (item.maximumSize - item.minimumSize > 0) {
                flexibleViewItems.push(item);
                flexibleSize += item.size;
            }
        }
        const size = Math.floor(flexibleSize / flexibleViewItems.length);
        for (const item of flexibleViewItems) {
            item.size = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(size, item.minimumSize, item.maximumSize);
        }
        const indexes = (0,_math__WEBPACK_IMPORTED_MODULE_3__.range)(this.viewItems.length);
        const lowPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.Low);
        const highPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.High);
        this.relayout(lowPriorityIndexes, highPriorityIndexes);
    }
    removeView(index, sizing, skipLayout = false) {
        // Remove view
        const viewItem = this.viewItems.splice(index, 1)[0];
        viewItem.dispose();
        // Remove sash
        if (this.viewItems.length >= 1) {
            const sashIndex = Math.max(index - 1, 0);
            const sashItem = this.sashes.splice(sashIndex, 1)[0];
            sashItem.disposable();
        }
        if (!skipLayout) {
            this.relayout();
        }
        if (sizing && sizing.type === 'distribute') {
            this.distributeViewSizes();
        }
        this._onDidRemoveView.fire(viewItem.view);
        return viewItem.view;
    }
    getViewCachedVisibleSize(index) {
        if (index < 0 || index >= this.viewItems.length) {
            throw new Error('Index out of bounds');
        }
        const viewItem = this.viewItems[index];
        return viewItem.cachedVisibleSize;
    }
    moveView(from, to) {
        const cachedVisibleSize = this.getViewCachedVisibleSize(from);
        const sizing = typeof cachedVisibleSize === 'undefined'
            ? this.getViewSize(from)
            : Sizing.Invisible(cachedVisibleSize);
        const view = this.removeView(from, undefined, true);
        this.addView(view, sizing, to);
    }
    layout(size, orthogonalSize) {
        const previousSize = Math.max(this.size, this._contentSize);
        this.size = size;
        this.orthogonalSize = orthogonalSize;
        if (!this.proportions) {
            const indexes = (0,_math__WEBPACK_IMPORTED_MODULE_3__.range)(this.viewItems.length);
            const lowPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.Low);
            const highPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.High);
            this.resize(this.viewItems.length - 1, size - previousSize, undefined, lowPriorityIndexes, highPriorityIndexes);
        }
        else {
            let total = 0;
            for (let i = 0; i < this.viewItems.length; i++) {
                const item = this.viewItems[i];
                const proportion = this.proportions[i];
                if (typeof proportion === 'number') {
                    total += proportion;
                }
                else {
                    size -= item.size;
                }
            }
            for (let i = 0; i < this.viewItems.length; i++) {
                const item = this.viewItems[i];
                const proportion = this.proportions[i];
                if (typeof proportion === 'number' && total > 0) {
                    item.size = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(Math.round((proportion * size) / total), item.minimumSize, item.maximumSize);
                }
            }
        }
        this.distributeEmptySpace();
        this.layoutViews();
    }
    relayout(lowPriorityIndexes, highPriorityIndexes) {
        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);
        this.resize(this.viewItems.length - 1, this._size - contentSize, undefined, lowPriorityIndexes, highPriorityIndexes);
        this.distributeEmptySpace();
        this.layoutViews();
        this.saveProportions();
    }
    distributeEmptySpace(lowPriorityIndex) {
        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);
        let emptyDelta = this.size - contentSize;
        const indexes = (0,_math__WEBPACK_IMPORTED_MODULE_3__.range)(this.viewItems.length - 1, -1);
        const lowPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.Low);
        const highPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.High);
        for (const index of highPriorityIndexes) {
            (0,_array__WEBPACK_IMPORTED_MODULE_2__.pushToStart)(indexes, index);
        }
        for (const index of lowPriorityIndexes) {
            (0,_array__WEBPACK_IMPORTED_MODULE_2__.pushToEnd)(indexes, index);
        }
        if (typeof lowPriorityIndex === 'number') {
            (0,_array__WEBPACK_IMPORTED_MODULE_2__.pushToEnd)(indexes, lowPriorityIndex);
        }
        for (let i = 0; emptyDelta !== 0 && i < indexes.length; i++) {
            const item = this.viewItems[indexes[i]];
            const size = (0,_math__WEBPACK_IMPORTED_MODULE_3__.clamp)(item.size + emptyDelta, item.minimumSize, item.maximumSize);
            const viewDelta = size - item.size;
            emptyDelta -= viewDelta;
            item.size = size;
        }
    }
    saveProportions() {
        if (this.proportionalLayout && this._contentSize > 0) {
            this._proportions = this.viewItems.map((i) => i.visible ? i.size / this._contentSize : undefined);
        }
    }
    /**
     * Margin explain:
     *
     * For `n` views in a splitview there will be `n-1` margins `m`.
     *
     * To fit the margins each view must reduce in size by `(m * (n - 1)) / n`.
     *
     * For each view `i` the offet must be adjusted by `m * i/(n - 1)`.
     */
    layoutViews() {
        this._contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);
        this.updateSashEnablement();
        if (this.viewItems.length === 0) {
            return;
        }
        const visibleViewItems = this.viewItems.filter((i) => i.visible);
        const sashCount = Math.max(0, visibleViewItems.length - 1);
        const marginReducedSize = (this.margin * sashCount) / Math.max(1, visibleViewItems.length);
        let totalLeftOffset = 0;
        const viewLeftOffsets = [];
        const sashWidth = 4; // hardcoded in css
        const runningVisiblePanelCount = this.viewItems.reduce((arr, viewItem, i) => {
            const flag = viewItem.visible ? 1 : 0;
            if (i === 0) {
                arr.push(flag);
            }
            else {
                arr.push(arr[i - 1] + flag);
            }
            return arr;
        }, []);
        // calculate both view and cash positions
        this.viewItems.forEach((view, i) => {
            totalLeftOffset += this.viewItems[i].size;
            viewLeftOffsets.push(totalLeftOffset);
            const size = view.visible ? view.size - marginReducedSize : 0;
            const visiblePanelsBeforeThisView = Math.max(0, runningVisiblePanelCount[i] - 1);
            const offset = i === 0 || visiblePanelsBeforeThisView === 0
                ? 0
                : viewLeftOffsets[i - 1] +
                    (visiblePanelsBeforeThisView / sashCount) *
                        marginReducedSize;
            if (i < this.viewItems.length - 1) {
                // calculate sash position
                const newSize = view.visible
                    ? offset + size - sashWidth / 2 + this.margin / 2
                    : offset;
                if (this._orientation === Orientation.HORIZONTAL) {
                    this.sashes[i].container.style.left = `${newSize}px`;
                    this.sashes[i].container.style.top = `0px`;
                }
                if (this._orientation === Orientation.VERTICAL) {
                    this.sashes[i].container.style.left = `0px`;
                    this.sashes[i].container.style.top = `${newSize}px`;
                }
            }
            // calculate view position
            if (this._orientation === Orientation.HORIZONTAL) {
                view.container.style.width = `${size}px`;
                view.container.style.left = `${offset}px`;
                view.container.style.top = '';
                view.container.style.height = '';
            }
            if (this._orientation === Orientation.VERTICAL) {
                view.container.style.height = `${size}px`;
                view.container.style.top = `${offset}px`;
                view.container.style.width = '';
                view.container.style.left = '';
            }
            view.view.layout(view.size - marginReducedSize, this._orthogonalSize);
        });
    }
    findFirstSnapIndex(indexes) {
        // visible views first
        for (const index of indexes) {
            const viewItem = this.viewItems[index];
            if (!viewItem.visible) {
                continue;
            }
            if (viewItem.snap) {
                return index;
            }
        }
        // then, hidden views
        for (const index of indexes) {
            const viewItem = this.viewItems[index];
            if (viewItem.visible &&
                viewItem.maximumSize - viewItem.minimumSize > 0) {
                return undefined;
            }
            if (!viewItem.visible && viewItem.snap) {
                return index;
            }
        }
        return undefined;
    }
    updateSashEnablement() {
        let previous = false;
        const collapsesDown = this.viewItems.map((i) => (previous = i.size - i.minimumSize > 0 || previous));
        previous = false;
        const expandsDown = this.viewItems.map((i) => (previous = i.maximumSize - i.size > 0 || previous));
        const reverseViews = [...this.viewItems].reverse();
        previous = false;
        const collapsesUp = reverseViews
            .map((i) => (previous = i.size - i.minimumSize > 0 || previous))
            .reverse();
        previous = false;
        const expandsUp = reverseViews
            .map((i) => (previous = i.maximumSize - i.size > 0 || previous))
            .reverse();
        let position = 0;
        for (let index = 0; index < this.sashes.length; index++) {
            const sash = this.sashes[index];
            const viewItem = this.viewItems[index];
            position += viewItem.size;
            const min = !(collapsesDown[index] && expandsUp[index + 1]);
            const max = !(expandsDown[index] && collapsesUp[index + 1]);
            if (min && max) {
                const upIndexes = (0,_math__WEBPACK_IMPORTED_MODULE_3__.range)(index, -1);
                const downIndexes = (0,_math__WEBPACK_IMPORTED_MODULE_3__.range)(index + 1, this.viewItems.length);
                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);
                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);
                const snappedBefore = typeof snapBeforeIndex === 'number' &&
                    !this.viewItems[snapBeforeIndex].visible;
                const snappedAfter = typeof snapAfterIndex === 'number' &&
                    !this.viewItems[snapAfterIndex].visible;
                if (snappedBefore &&
                    collapsesUp[index] &&
                    (position > 0 || this.startSnappingEnabled)) {
                    this.updateSash(sash, SashState.MINIMUM);
                }
                else if (snappedAfter &&
                    collapsesDown[index] &&
                    (position < this._contentSize || this.endSnappingEnabled)) {
                    this.updateSash(sash, SashState.MAXIMUM);
                }
                else {
                    this.updateSash(sash, SashState.DISABLED);
                }
            }
            else if (min && !max) {
                this.updateSash(sash, SashState.MINIMUM);
            }
            else if (!min && max) {
                this.updateSash(sash, SashState.MAXIMUM);
            }
            else {
                this.updateSash(sash, SashState.ENABLED);
            }
        }
    }
    updateSash(sash, state) {
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(sash.container, 'dv-disabled', state === SashState.DISABLED);
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(sash.container, 'dv-enabled', state === SashState.ENABLED);
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(sash.container, 'dv-maximum', state === SashState.MAXIMUM);
        (0,_dom__WEBPACK_IMPORTED_MODULE_0__.toggleClass)(sash.container, 'dv-minimum', state === SashState.MINIMUM);
    }
    createViewContainer() {
        const element = document.createElement('div');
        element.className = 'dv-view-container';
        return element;
    }
    createSashContainer() {
        const element = document.createElement('div');
        element.className = 'dv-sash-container';
        return element;
    }
    createContainer() {
        const element = document.createElement('div');
        const orientationClassname = this._orientation === Orientation.HORIZONTAL
            ? 'dv-horizontal'
            : 'dv-vertical';
        element.className = `dv-split-view-container ${orientationClassname}`;
        return element;
    }
    dispose() {
        this._onDidSashEnd.dispose();
        this._onDidAddView.dispose();
        this._onDidRemoveView.dispose();
        for (let i = 0; i < this.element.children.length; i++) {
            if (this.element.children.item(i) === this.element) {
                this.element.removeChild(this.element);
                break;
            }
        }
        for (const viewItem of this.viewItems) {
            viewItem.dispose();
        }
        this.element.remove();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/splitview/splitviewComponent.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/splitview/splitviewComponent.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SplitviewComponent: () => (/* binding */ SplitviewComponent)
/* harmony export */ });
/* harmony import */ var _lifecycle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lifecycle */ "./node_modules/dockview-core/dist/esm/lifecycle.js");
/* harmony import */ var _splitview__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./splitview */ "./node_modules/dockview-core/dist/esm/splitview/splitview.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");
/* harmony import */ var _resizable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../resizable */ "./node_modules/dockview-core/dist/esm/resizable.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../dom */ "./node_modules/dockview-core/dist/esm/dom.js");





/**
 * A high-level implementation of splitview that works using 'panels'
 */
class SplitviewComponent extends _resizable__WEBPACK_IMPORTED_MODULE_3__.Resizable {
    get panels() {
        return this.splitview.getViews();
    }
    get options() {
        return this._options;
    }
    get length() {
        return this._panels.size;
    }
    get orientation() {
        return this.splitview.orientation;
    }
    get splitview() {
        return this._splitview;
    }
    set splitview(value) {
        if (this._splitview) {
            this._splitview.dispose();
        }
        this._splitview = value;
        this._splitviewChangeDisposable.value = new _lifecycle__WEBPACK_IMPORTED_MODULE_0__.CompositeDisposable(this._splitview.onDidSashEnd(() => {
            this._onDidLayoutChange.fire(undefined);
        }), this._splitview.onDidAddView((e) => this._onDidAddView.fire(e)), this._splitview.onDidRemoveView((e) => this._onDidRemoveView.fire(e)));
    }
    get minimumSize() {
        return this.splitview.minimumSize;
    }
    get maximumSize() {
        return this.splitview.maximumSize;
    }
    get height() {
        return this.splitview.orientation === _splitview__WEBPACK_IMPORTED_MODULE_1__.Orientation.HORIZONTAL
            ? this.splitview.orthogonalSize
            : this.splitview.size;
    }
    get width() {
        return this.splitview.orientation === _splitview__WEBPACK_IMPORTED_MODULE_1__.Orientation.HORIZONTAL
            ? this.splitview.size
            : this.splitview.orthogonalSize;
    }
    constructor(container, options) {
        var _a;
        super(document.createElement('div'), options.disableAutoResizing);
        this._splitviewChangeDisposable = new _lifecycle__WEBPACK_IMPORTED_MODULE_0__.MutableDisposable();
        this._panels = new Map();
        this._onDidLayoutfromJSON = new _events__WEBPACK_IMPORTED_MODULE_2__.Emitter();
        this.onDidLayoutFromJSON = this._onDidLayoutfromJSON.event;
        this._onDidAddView = new _events__WEBPACK_IMPORTED_MODULE_2__.Emitter();
        this.onDidAddView = this._onDidAddView.event;
        this._onDidRemoveView = new _events__WEBPACK_IMPORTED_MODULE_2__.Emitter();
        this.onDidRemoveView = this._onDidRemoveView.event;
        this._onDidLayoutChange = new _events__WEBPACK_IMPORTED_MODULE_2__.Emitter();
        this.onDidLayoutChange = this._onDidLayoutChange.event;
        this.element.style.height = '100%';
        this.element.style.width = '100%';
        this._classNames = new _dom__WEBPACK_IMPORTED_MODULE_4__.Classnames(this.element);
        this._classNames.setClassNames((_a = options.className) !== null && _a !== void 0 ? _a : '');
        // the container is owned by the third-party, do not modify/delete it
        container.appendChild(this.element);
        this._options = options;
        this.splitview = new _splitview__WEBPACK_IMPORTED_MODULE_1__.Splitview(this.element, options);
        this.addDisposables(this._onDidAddView, this._onDidLayoutfromJSON, this._onDidRemoveView, this._onDidLayoutChange);
    }
    updateOptions(options) {
        var _a, _b;
        if ('className' in options) {
            this._classNames.setClassNames((_a = options.className) !== null && _a !== void 0 ? _a : '');
        }
        if ('disableResizing' in options) {
            this.disableResizing = (_b = options.disableAutoResizing) !== null && _b !== void 0 ? _b : false;
        }
        if (typeof options.orientation === 'string') {
            this.splitview.orientation = options.orientation;
        }
        this._options = Object.assign(Object.assign({}, this.options), options);
        this.splitview.layout(this.splitview.size, this.splitview.orthogonalSize);
    }
    focus() {
        var _a;
        (_a = this._activePanel) === null || _a === void 0 ? void 0 : _a.focus();
    }
    movePanel(from, to) {
        this.splitview.moveView(from, to);
    }
    setVisible(panel, visible) {
        const index = this.panels.indexOf(panel);
        this.splitview.setViewVisible(index, visible);
    }
    setActive(panel, skipFocus) {
        this._activePanel = panel;
        this.panels
            .filter((v) => v !== panel)
            .forEach((v) => {
            v.api._onDidActiveChange.fire({ isActive: false });
            if (!skipFocus) {
                v.focus();
            }
        });
        panel.api._onDidActiveChange.fire({ isActive: true });
        if (!skipFocus) {
            panel.focus();
        }
    }
    removePanel(panel, sizing) {
        const item = this._panels.get(panel.id);
        if (!item) {
            throw new Error(`unknown splitview panel ${panel.id}`);
        }
        item.dispose();
        this._panels.delete(panel.id);
        const index = this.panels.findIndex((_) => _ === panel);
        const removedView = this.splitview.removeView(index, sizing);
        removedView.dispose();
        const panels = this.panels;
        if (panels.length > 0) {
            this.setActive(panels[panels.length - 1]);
        }
    }
    getPanel(id) {
        return this.panels.find((view) => view.id === id);
    }
    addPanel(options) {
        var _a;
        if (this._panels.has(options.id)) {
            throw new Error(`panel ${options.id} already exists`);
        }
        const view = this.options.createComponent({
            id: options.id,
            name: options.component,
        });
        view.orientation = this.splitview.orientation;
        view.init({
            params: (_a = options.params) !== null && _a !== void 0 ? _a : {},
            minimumSize: options.minimumSize,
            maximumSize: options.maximumSize,
            snap: options.snap,
            priority: options.priority,
            accessor: this,
        });
        const size = typeof options.size === 'number' ? options.size : _splitview__WEBPACK_IMPORTED_MODULE_1__.Sizing.Distribute;
        const index = typeof options.index === 'number' ? options.index : undefined;
        this.splitview.addView(view, size, index);
        this.doAddView(view);
        this.setActive(view);
        return view;
    }
    layout(width, height) {
        const [size, orthogonalSize] = this.splitview.orientation === _splitview__WEBPACK_IMPORTED_MODULE_1__.Orientation.HORIZONTAL
            ? [width, height]
            : [height, width];
        this.splitview.layout(size, orthogonalSize);
    }
    doAddView(view) {
        const disposable = view.api.onDidFocusChange((event) => {
            if (!event.isFocused) {
                return;
            }
            this.setActive(view, true);
        });
        this._panels.set(view.id, disposable);
    }
    toJSON() {
        var _a;
        const views = this.splitview
            .getViews()
            .map((view, i) => {
            const size = this.splitview.getViewSize(i);
            return {
                size,
                data: view.toJSON(),
                snap: !!view.snap,
                priority: view.priority,
            };
        });
        return {
            views,
            activeView: (_a = this._activePanel) === null || _a === void 0 ? void 0 : _a.id,
            size: this.splitview.size,
            orientation: this.splitview.orientation,
        };
    }
    fromJSON(serializedSplitview) {
        this.clear();
        const { views, orientation, size, activeView } = serializedSplitview;
        const queue = [];
        // take note of the existing dimensions
        const width = this.width;
        const height = this.height;
        this.splitview = new _splitview__WEBPACK_IMPORTED_MODULE_1__.Splitview(this.element, {
            orientation,
            proportionalLayout: this.options.proportionalLayout,
            descriptor: {
                size,
                views: views.map((view) => {
                    const data = view.data;
                    if (this._panels.has(data.id)) {
                        throw new Error(`panel ${data.id} already exists`);
                    }
                    const panel = this.options.createComponent({
                        id: data.id,
                        name: data.component,
                    });
                    queue.push(() => {
                        var _a;
                        panel.init({
                            params: (_a = data.params) !== null && _a !== void 0 ? _a : {},
                            minimumSize: data.minimumSize,
                            maximumSize: data.maximumSize,
                            snap: view.snap,
                            priority: view.priority,
                            accessor: this,
                        });
                    });
                    panel.orientation = orientation;
                    this.doAddView(panel);
                    setTimeout(() => {
                        // the original onDidAddView events are missed since they are fired before we can subcribe to them
                        this._onDidAddView.fire(panel);
                    }, 0);
                    return { size: view.size, view: panel };
                }),
            },
        });
        this.layout(width, height);
        queue.forEach((f) => f());
        if (typeof activeView === 'string') {
            const panel = this.getPanel(activeView);
            if (panel) {
                this.setActive(panel);
            }
        }
        this._onDidLayoutfromJSON.fire();
    }
    clear() {
        for (const disposable of this._panels.values()) {
            disposable.dispose();
        }
        this._panels.clear();
        while (this.splitview.length > 0) {
            const view = this.splitview.removeView(0, _splitview__WEBPACK_IMPORTED_MODULE_1__.Sizing.Distribute, true);
            view.dispose();
        }
    }
    dispose() {
        for (const disposable of this._panels.values()) {
            disposable.dispose();
        }
        this._panels.clear();
        const views = this.splitview.getViews();
        this._splitviewChangeDisposable.dispose();
        this.splitview.dispose();
        for (const view of views) {
            view.dispose();
        }
        this.element.remove();
        super.dispose();
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/splitview/splitviewPanel.js":
/*!*************************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/splitview/splitviewPanel.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SplitviewPanel: () => (/* binding */ SplitviewPanel)
/* harmony export */ });
/* harmony import */ var _gridview_basePanelView__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../gridview/basePanelView */ "./node_modules/dockview-core/dist/esm/gridview/basePanelView.js");
/* harmony import */ var _api_splitviewPanelApi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../api/splitviewPanelApi */ "./node_modules/dockview-core/dist/esm/api/splitviewPanelApi.js");
/* harmony import */ var _splitview__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./splitview */ "./node_modules/dockview-core/dist/esm/splitview/splitview.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../events */ "./node_modules/dockview-core/dist/esm/events.js");




class SplitviewPanel extends _gridview_basePanelView__WEBPACK_IMPORTED_MODULE_0__.BasePanelView {
    get priority() {
        return this._priority;
    }
    set orientation(value) {
        this._orientation = value;
    }
    get orientation() {
        return this._orientation;
    }
    get minimumSize() {
        const size = typeof this._minimumSize === 'function'
            ? this._minimumSize()
            : this._minimumSize;
        if (size !== this._evaluatedMinimumSize) {
            this._evaluatedMinimumSize = size;
            this.updateConstraints();
        }
        return size;
    }
    get maximumSize() {
        const size = typeof this._maximumSize === 'function'
            ? this._maximumSize()
            : this._maximumSize;
        if (size !== this._evaluatedMaximumSize) {
            this._evaluatedMaximumSize = size;
            this.updateConstraints();
        }
        return size;
    }
    get snap() {
        return this._snap;
    }
    constructor(id, componentName) {
        super(id, componentName, new _api_splitviewPanelApi__WEBPACK_IMPORTED_MODULE_1__.SplitviewPanelApiImpl(id, componentName));
        this._evaluatedMinimumSize = 0;
        this._evaluatedMaximumSize = Number.POSITIVE_INFINITY;
        this._minimumSize = 0;
        this._maximumSize = Number.POSITIVE_INFINITY;
        this._snap = false;
        this._onDidChange = new _events__WEBPACK_IMPORTED_MODULE_3__.Emitter();
        this.onDidChange = this._onDidChange.event;
        this.api.initialize(this);
        this.addDisposables(this._onDidChange, this.api.onWillVisibilityChange((event) => {
            const { isVisible } = event;
            const { accessor } = this._params;
            accessor.setVisible(this, isVisible);
        }), this.api.onActiveChange(() => {
            const { accessor } = this._params;
            accessor.setActive(this);
        }), this.api.onDidConstraintsChangeInternal((event) => {
            if (typeof event.minimumSize === 'number' ||
                typeof event.minimumSize === 'function') {
                this._minimumSize = event.minimumSize;
            }
            if (typeof event.maximumSize === 'number' ||
                typeof event.maximumSize === 'function') {
                this._maximumSize = event.maximumSize;
            }
            this.updateConstraints();
        }), this.api.onDidSizeChange((event) => {
            this._onDidChange.fire({ size: event.size });
        }));
    }
    setVisible(isVisible) {
        this.api._onDidVisibilityChange.fire({ isVisible });
    }
    setActive(isActive) {
        this.api._onDidActiveChange.fire({ isActive });
    }
    layout(size, orthogonalSize) {
        const [width, height] = this.orientation === _splitview__WEBPACK_IMPORTED_MODULE_2__.Orientation.HORIZONTAL
            ? [size, orthogonalSize]
            : [orthogonalSize, size];
        super.layout(width, height);
    }
    init(parameters) {
        super.init(parameters);
        this._priority = parameters.priority;
        if (parameters.minimumSize) {
            this._minimumSize = parameters.minimumSize;
        }
        if (parameters.maximumSize) {
            this._maximumSize = parameters.maximumSize;
        }
        if (parameters.snap) {
            this._snap = parameters.snap;
        }
    }
    toJSON() {
        const maximum = (value) => value === Number.MAX_SAFE_INTEGER ||
            value === Number.POSITIVE_INFINITY
            ? undefined
            : value;
        const minimum = (value) => (value <= 0 ? undefined : value);
        return Object.assign(Object.assign({}, super.toJSON()), { minimumSize: minimum(this.minimumSize), maximumSize: maximum(this.maximumSize) });
    }
    updateConstraints() {
        this.api._onDidConstraintsChange.fire({
            maximumSize: this._evaluatedMaximumSize,
            minimumSize: this._evaluatedMinimumSize,
        });
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/splitview/viewItem.js":
/*!*******************************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/splitview/viewItem.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ViewItem: () => (/* binding */ ViewItem)
/* harmony export */ });
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math */ "./node_modules/dockview-core/dist/esm/math.js");

class ViewItem {
    set size(size) {
        this._size = size;
    }
    get size() {
        return this._size;
    }
    get cachedVisibleSize() {
        return this._cachedVisibleSize;
    }
    get visible() {
        return typeof this._cachedVisibleSize === 'undefined';
    }
    get minimumSize() {
        return this.visible ? this.view.minimumSize : 0;
    }
    get viewMinimumSize() {
        return this.view.minimumSize;
    }
    get maximumSize() {
        return this.visible ? this.view.maximumSize : 0;
    }
    get viewMaximumSize() {
        return this.view.maximumSize;
    }
    get priority() {
        return this.view.priority;
    }
    get snap() {
        return !!this.view.snap;
    }
    set enabled(enabled) {
        this.container.style.pointerEvents = enabled ? '' : 'none';
    }
    constructor(container, view, size, disposable) {
        this.container = container;
        this.view = view;
        this.disposable = disposable;
        this._cachedVisibleSize = undefined;
        if (typeof size === 'number') {
            this._size = size;
            this._cachedVisibleSize = undefined;
            container.classList.add('visible');
        }
        else {
            this._size = 0;
            this._cachedVisibleSize = size.cachedVisibleSize;
        }
    }
    setVisible(visible, size) {
        var _a;
        if (visible === this.visible) {
            return;
        }
        if (visible) {
            this.size = (0,_math__WEBPACK_IMPORTED_MODULE_0__.clamp)((_a = this._cachedVisibleSize) !== null && _a !== void 0 ? _a : 0, this.viewMinimumSize, this.viewMaximumSize);
            this._cachedVisibleSize = undefined;
        }
        else {
            this._cachedVisibleSize =
                typeof size === 'number' ? size : this.size;
            this.size = 0;
        }
        this.container.classList.toggle('visible', visible);
        if (this.view.setVisible) {
            this.view.setVisible(visible);
        }
    }
    dispose() {
        this.disposable.dispose();
        return this.view;
    }
}


/***/ }),

/***/ "./node_modules/dockview-core/dist/esm/svg.js":
/*!****************************************************!*\
  !*** ./node_modules/dockview-core/dist/esm/svg.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createChevronRightButton: () => (/* binding */ createChevronRightButton),
/* harmony export */   createCloseButton: () => (/* binding */ createCloseButton),
/* harmony export */   createExpandMoreButton: () => (/* binding */ createExpandMoreButton)
/* harmony export */ });
const createSvgElementFromPath = (params) => {
    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    svg.setAttributeNS(null, 'height', params.height);
    svg.setAttributeNS(null, 'width', params.width);
    svg.setAttributeNS(null, 'viewBox', params.viewbox);
    svg.setAttributeNS(null, 'aria-hidden', 'false');
    svg.setAttributeNS(null, 'focusable', 'false');
    svg.classList.add('dv-svg');
    const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
    path.setAttributeNS(null, 'd', params.path);
    svg.appendChild(path);
    return svg;
};
const createCloseButton = () => createSvgElementFromPath({
    width: '11',
    height: '11',
    viewbox: '0 0 28 28',
    path: 'M2.1 27.3L0 25.2L11.55 13.65L0 2.1L2.1 0L13.65 11.55L25.2 0L27.3 2.1L15.75 13.65L27.3 25.2L25.2 27.3L13.65 15.75L2.1 27.3Z',
});
const createExpandMoreButton = () => createSvgElementFromPath({
    width: '11',
    height: '11',
    viewbox: '0 0 24 15',
    path: 'M12 14.15L0 2.15L2.15 0L12 9.9L21.85 0.0499992L24 2.2L12 14.15Z',
});
const createChevronRightButton = () => createSvgElementFromPath({
    width: '11',
    height: '11',
    viewbox: '0 0 15 25',
    path: 'M2.15 24.1L0 21.95L9.9 12.05L0 2.15L2.15 0L14.2 12.05L2.15 24.1Z',
});


/***/ }),

/***/ "./node_modules/dockview-core/dist/styles/dockview.css":
/*!*************************************************************!*\
  !*** ./node_modules/dockview-core/dist/styles/dockview.css ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _css_loader_dist_cjs_js_ruleSet_1_rules_0_use_1_dockview_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./dockview.css */ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/dockview-core/dist/styles/dockview.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_ruleSet_1_rules_0_use_1_dockview_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_ruleSet_1_rules_0_use_1_dockview_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _css_loader_dist_cjs_js_ruleSet_1_rules_0_use_1_dockview_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _css_loader_dist_cjs_js_ruleSet_1_rules_0_use_1_dockview_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {



var stylesInDOM = [];
function getIndexByIdentifier(identifier) {
  var result = -1;
  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }
  return result;
}
function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];
  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };
    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }
    identifiers.push(identifier);
  }
  return identifiers;
}
function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);
  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }
      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };
  return updater;
}
module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];
    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }
    var newLastIdentifiers = modulesToDom(newList, options);
    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];
      var _index = getIndexByIdentifier(_identifier);
      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();
        stylesInDOM.splice(_index, 1);
      }
    }
    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {



var memo = {};

/* istanbul ignore next  */
function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target);

    // Special case to return head of iframe instead of iframe itself
    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }
    memo[target] = styleTarget;
  }
  return memo[target];
}

/* istanbul ignore next  */
function insertBySelector(insert, style) {
  var target = getTarget(insert);
  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }
  target.appendChild(style);
}
module.exports = insertBySelector;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {



/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}
module.exports = insertStyleElement;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;
  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}
module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {



/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";
  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }
  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }
  var needLayer = typeof obj.layer !== "undefined";
  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }
  css += obj.css;
  if (needLayer) {
    css += "}";
  }
  if (obj.media) {
    css += "}";
  }
  if (obj.supports) {
    css += "}";
  }
  var sourceMap = obj.sourceMap;
  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  }

  // For old IE
  /* istanbul ignore if  */
  options.styleTagTransform(css, styleElement, options.options);
}
function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }
  styleElement.parentNode.removeChild(styleElement);
}

/* istanbul ignore next  */
function domAPI(options) {
  if (typeof document === "undefined") {
    return {
      update: function update() {},
      remove: function remove() {}
    };
  }
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}
module.exports = domAPI;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {



/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }
    styleElement.appendChild(document.createTextNode(css));
  }
}
module.exports = styleTagTransform;

/***/ }),

/***/ "./srcjs/modules/components.js":
/*!*************************************!*\
  !*** ./srcjs/modules/components.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CustomTab: () => (/* binding */ CustomTab),
/* harmony export */   DefaultTab: () => (/* binding */ DefaultTab),
/* harmony export */   LeftHeader: () => (/* binding */ LeftHeader),
/* harmony export */   Panel: () => (/* binding */ Panel),
/* harmony export */   RightHeader: () => (/* binding */ RightHeader)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./srcjs/modules/utils.js");

class Panel {
  get element() {
    return this._element
  }

  constructor() {
    this._element = document.createElement('div')
  }

  init(config) {
    let dockId = config.containerApi.component.gridview.element.closest('.dockview').attributes.id.textContent;
    this._element.id = dockId + '-' + config.api.id;
    this._element.innerHTML = config.params.content.html
    this._element.className = 'dockview-panel'
    this._element.style = config.params.style
  }
}

// Tab with custom remove button
class DefaultTab {
  constructor() {
    this._element = document.createElement('div');
    this._element.className = 'dv-default-tab';

    this._content = document.createElement('div');
    this._content.className = 'dv-default-tab-content';

    this.action = document.createElement('div');
    this.action.className = 'dv-default-tab-action';
    this.action.innerHTML = '<i class="fas fa-xmark" role="presentation" aria-label="close icon"></i>';

    this._element.appendChild(this._content);
    this._element.appendChild(this.action);
  }

  get element() {
    return this._element;
  }

  init(config) {
    let dockId = config.containerApi.component.gridview.element.closest('.dockview').attributes.id.textContent;
    this._element.id = dockId + '-tab-' + config.api.id;
    this._content.textContent = config.title;
    this.action.addEventListener('click', (e) => {
      // Send callback to Shiny for control from the server side
      Shiny.setInputValue(`${dockId}_panel-to-remove`, config.api.id, { priority: 'event' });
    })
  }
}

// Tab without remove button
class CustomTab {
  constructor() {
    this._element = document.createElement('div');
  }

  get element() {
    return this._element;
  }

  init(config) {
    let dockId = config.containerApi.component.gridview.element.closest('.dockview').attributes.id.textContent;
    this._element.id = dockId + '-tab-' + config.api.id;
    this.e1 = document.createElement('div');
    this.e1.textContent = config.title;
    this.e2 = document.createElement('span');

    this._element.append(this.e1, this.e2);
  }
}

class RightHeader {
  get element() {
    return this._element
  }

  constructor() {
    this._element = document.createElement('div')
  }

  init(config) {
    this._element.style = 'height: 100%; padding: 8px'
    this._element.innerHTML = '<i class="fas fa-expand" role="presentation" aria-label="expand icon"></i>'
    this._element.addEventListener('click', (e) => {
      if (!config.api.isMaximized()) {
        e.target.classList.remove('fa-expand');
        e.target.classList.add('fa-compress');
        config.api.maximize();
      } else {
        config.api.exitMaximized();
        e.target.classList.remove('fa-compress');
        e.target.classList.add('fa-expand');
      }
    });
  }
  dispose() {
    // Necessary to avoid a JS error when moving a panel
    // inside another one to get nested tabs
  }
}

class LeftHeader {
  get element() {
    return this._element
  }

  constructor() {
    this._element = document.createElement('div')
  }

  init(config) {
    // If addTab is false, we do not need to render this component
    if (!config.group._params.params.addTab.enable) return null;
    this._element.style = 'height: 100%; padding: 8px'
    this._element.innerHTML = '<i class="fas fa-plus" role="presentation" aria-label="plus icon"></i>'
    this._element.addEventListener('click', (e) => {
      config.group._params.addTab.callback(config);
    });
  }
  dispose() {
    // Necessary to avoid a JS error when moving a panel
    // inside another one to get nested tabs
  }
}



/***/ }),

/***/ "./srcjs/modules/utils.js":
/*!********************************!*\
  !*** ./srcjs/modules/utils.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addPanel: () => (/* binding */ addPanel),
/* harmony export */   defaultPanel: () => (/* binding */ defaultPanel),
/* harmony export */   matchTheme: () => (/* binding */ matchTheme),
/* harmony export */   moveGroup: () => (/* binding */ moveGroup),
/* harmony export */   moveGroup2: () => (/* binding */ moveGroup2),
/* harmony export */   movePanel: () => (/* binding */ movePanel),
/* harmony export */   saveDock: () => (/* binding */ saveDock)
/* harmony export */ });
/* harmony import */ var dockview_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dockview-core */ "./node_modules/dockview-core/dist/esm/index.js");


const matchTheme = (theme) => {
  let res;
  switch (theme) {
    case 'light':
      res = dockview_core__WEBPACK_IMPORTED_MODULE_0__.themeLight
      break
    case 'light-spaced':
      res = dockview_core__WEBPACK_IMPORTED_MODULE_0__.themeLightSpaced
      break
    case 'abyss':
      res = dockview_core__WEBPACK_IMPORTED_MODULE_0__.themeAbyss
      break
    case 'abyss/spaced':
      res = dockview_core__WEBPACK_IMPORTED_MODULE_0__.themeAbyssSpaced
      break
    case 'vs':
      res = dockview_core__WEBPACK_IMPORTED_MODULE_0__.themeVisualStudio
      break
    case 'dark':
      res = dockview_core__WEBPACK_IMPORTED_MODULE_0__.themeDark
      break
    case 'dracula':
      res = dockview_core__WEBPACK_IMPORTED_MODULE_0__.themeDracula
      break
    case 'replit':
      res = dockview_core__WEBPACK_IMPORTED_MODULE_0__.themeReplit
      break
    default:
      res = dockview_core__WEBPACK_IMPORTED_MODULE_0__.themeLightSpaced
  }
  return (res)
}

const addPanel = (panel, api) => {
  let internals = {
    component: 'default',
    params: {
      content: panel.content,
      style: panel.style
    }
  }

  // Handle removable option. If no,
  // use the default tab component without the close panel button.
  if (!panel.remove.enable) {
    internals.tabComponent = 'custom';
  } else {
    if (panel.remove.mode === 'manual') {
      internals.tabComponent = 'manual';
    }
  }
  let props = { ...panel, ...internals }
  return (api.addPanel(props))
}

const movePanel = (m, api) => {
  let panel = api.getPanel(`${m.id}`);
  // Move relative to another group
  if (m.options.group !== undefined) {
    let groupTarget = api.getPanel(`${m.options.group}`)
    panel.api.moveTo({
      group: groupTarget.api.group,
      position: m.options.position,
    })
    return null;
  }
  // Moce panel inside the same group using 'index' only
  panel.api.moveTo(m.options);
}

const moveGroup = (m, api) => {
  let from = api.getGroup(`${m.id}`);
  // Move relative to another group
  let target = api.getGroup(`${m.options.to}`);
  from.api.moveTo({
    group: target,
    position: m.options.position
  });
  return null;
}

const moveGroup2 = (m, api) => {
  let panel = api.getPanel(`${m.id}`);
  // Move relative to another group
  let groupTarget = api.getPanel(`${m.options.to}`);
  panel.group.api.moveTo({
    group: groupTarget.api.group,
    position: m.options.position
  });
  return null;
}

const defaultPanel = (pnId) => {
  return (`
    <p>Exchange me by running:</p>
    <p>removeUI(<br>
      &nbsp;&nbsp;selector = "#${pnId} > *",<br>
      &nbsp;&nbsp;multiple = TRUE<br>
    )</p>
    <p>shiny::insertUI(<br>
          &nbsp;&nbsp;selector = "#${pnId}",<br>
          &nbsp;&nbsp;where = "beforeEnd",<br>
          &nbsp;&nbsp;ui = "your ui code here"<br>
    )</p>
  `)
}

const clean_dock_state = (state) => {
  // Strip out unecessary information (deps, head, singletons as they should be already inserted
  // in the DOM when the widget is created, so no need to keep them forever)
  state.panels = Object.fromEntries(
    Object.entries(state.panels).map(([key, value]) => [
      key,
      {
        ...value,
        params: {
          ...value.params,
          content: {
            html: value.params.content.html // only need the HTML content
          }
        }
      }
    ])
  );
  return (state)
}

const saveDock = (id, api) => {
  const state = clean_dock_state(api.toJSON())
  Shiny.setInputValue(id + "_state", state, { priority: 'event' });
}



/***/ }),

/***/ "widgets":
/*!******************************!*\
  !*** external "HTMLWidgets" ***!
  \******************************/
/***/ ((module) => {

module.exports = HTMLWidgets;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry needs to be wrapped in an IIFE because it needs to be isolated against other modules in the chunk.
(() => {
/*!***********************************!*\
  !*** ./srcjs/widgets/dockview.js ***!
  \***********************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var widgets__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! widgets */ "widgets");
/* harmony import */ var widgets__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(widgets__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var dockview_core_dist_styles_dockview_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! dockview-core/dist/styles/dockview.css */ "./node_modules/dockview-core/dist/styles/dockview.css");
/* harmony import */ var dockview_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dockview-core */ "./node_modules/dockview-core/dist/esm/index.js");
/* harmony import */ var _modules_components__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../modules/components */ "./srcjs/modules/components.js");
/* harmony import */ var _modules_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../modules/utils */ "./srcjs/modules/utils.js");







HTMLWidgets.widget({

  name: 'dockview',

  type: 'output',

  factory: function (el, width, height) {

    let api;

    return {

      renderValue: function (x, id = el.id) {

        // Instantiate dockView
        api = (0,dockview_core__WEBPACK_IMPORTED_MODULE_2__.createDockview)(document.getElementById(id), {
          theme: (0,_modules_utils__WEBPACK_IMPORTED_MODULE_4__.matchTheme)(x.theme),
          createRightHeaderActionComponent: (options) => {
            return new _modules_components__WEBPACK_IMPORTED_MODULE_3__.RightHeader(options)
          },
          createLeftHeaderActionComponent: (options) => {
            options._params.params.addTab = x.addTab;
            return new _modules_components__WEBPACK_IMPORTED_MODULE_3__.LeftHeader(options)
          },
          createComponent: (options) => {
            switch (options.name) {
              case 'default':
                return new _modules_components__WEBPACK_IMPORTED_MODULE_3__.Panel(options)
            }
          },
          createTabComponent: (options) => {
            switch (options.name) {
              case 'manual':
                return new _modules_components__WEBPACK_IMPORTED_MODULE_3__.DefaultTab();
              case 'custom':
                return new _modules_components__WEBPACK_IMPORTED_MODULE_3__.CustomTab();
            }
          },
          // Spread operator to include all other options from x
          ...Object.keys(x).reduce((acc, key) => {
            if (!['theme', 'addTab'].includes(key)) {
              acc[key] = x[key];
            }
            return acc;
          }, {})
        })

        // Resize panel content on layout change
        // (useful so that plots or widgets resize correctly)
        // Also update the dock state.
        api.onDidLayoutChange(() => {
          window.dispatchEvent(new Event('resize'));
          if (HTMLWidgets.shinyMode) {
            (0,_modules_utils__WEBPACK_IMPORTED_MODULE_4__.saveDock)(id, api)
            api.panels.map((panel) => {
              let pane = `#${id}-${panel.id}`;
              Shiny.initializeInputs($(pane));
              Shiny.bindAll($(pane));
            })
          }
        })

        // When restored, we need to sync the new state for Shiny
        api.onDidLayoutFromJSON(() => {
          ;(0,_modules_utils__WEBPACK_IMPORTED_MODULE_4__.saveDock)(id, api)
        })

        api.onDidMaximizedGroupChange((e) => {
          window.dispatchEvent(new Event('resize'));
        })

        api.onDidAddPanel((e) => {
          if (HTMLWidgets.shinyMode) {
            Shiny.setInputValue(id + '_added-panel', e.id, { priority: 'event' });
          }
        })

        api.onDidRemovePanel((e) => {
          if (HTMLWidgets.shinyMode) {
            Shiny.setInputValue(id + '_removed-panel', e.id, { priority: 'event' });
          }
        })

        // Init panels
        x.panels.map((panel) => {
          ;(0,_modules_utils__WEBPACK_IMPORTED_MODULE_4__.addPanel)(panel, api);
        });

        if (HTMLWidgets.shinyMode) {
          Shiny.addCustomMessageHandler(el.id + '_add-panel', (panel) => {
            (0,_modules_utils__WEBPACK_IMPORTED_MODULE_4__.addPanel)(panel, api);
          });

          Shiny.addCustomMessageHandler(el.id + '_rm-panel', (id) => {
            api.removePanel(api.getPanel(id));
          })

          Shiny.addCustomMessageHandler(el.id + '_move-panel', (m) => {
            ;(0,_modules_utils__WEBPACK_IMPORTED_MODULE_4__.movePanel)(m, api)
          })

          Shiny.addCustomMessageHandler(el.id + '_select-panel', (m) => {
            api.getPanel(m.id).api.setActive();
          })

          // Force save dock
          Shiny.addCustomMessageHandler(el.id + '_save-state', (m) => {
            ;(0,_modules_utils__WEBPACK_IMPORTED_MODULE_4__.saveDock)(id, api)
          })

          // Restore layout
          Shiny.addCustomMessageHandler(el.id + '_restore-state', (m) => {
            // Avoid duplicate input/output warning when rebinding
            Shiny.unbindAll($(`#${id} .dockview-panel`))
            api.fromJSON(m)
          })
          Shiny.addCustomMessageHandler(el.id + '_move-group2', (m) => {
            ;(0,_modules_utils__WEBPACK_IMPORTED_MODULE_4__.moveGroup2)(m, api)
          })

          Shiny.addCustomMessageHandler(el.id + '_move-group', (m) => {
            ;(0,_modules_utils__WEBPACK_IMPORTED_MODULE_4__.moveGroup)(m, api)
          })

          Shiny.addCustomMessageHandler(el.id + '_update-options', (m) => {
            if (m.hasOwnProperty('theme')) {
              m.theme = (0,_modules_utils__WEBPACK_IMPORTED_MODULE_4__.matchTheme)(m.theme);
            }
            api.updateOptions(m);
          })
        }

      },
      getWidget: function () {
        return api;
      },
      resize: function (width, height) {

        // TODO: code to re-render the widget with a new size

      }

    };
  }
});

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9ja3ZpZXcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDbUc7QUFDakI7QUFDbEYsOEJBQThCLHNFQUEyQixDQUFDLCtFQUFxQztBQUMvRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUM7QUFDekM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsT0FBTyxzSEFBc0gsWUFBWSxhQUFhLE1BQU0sS0FBSyxZQUFZLFdBQVcsVUFBVSxVQUFVLFlBQVksYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsTUFBTSxLQUFLLFlBQVksTUFBTSxLQUFLLFlBQVksYUFBYSxXQUFXLFlBQVksV0FBVyxNQUFNLEtBQUssWUFBWSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLE1BQU0sS0FBSyxVQUFVLFlBQVksT0FBTyxLQUFLLFlBQVksYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLE1BQU0sS0FBSyxVQUFVLFlBQVksT0FBTyxLQUFLLFlBQVksYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxNQUFNLEtBQUssVUFBVSxZQUFZLE1BQU0sS0FBSyxZQUFZLGFBQWEsTUFBTSxLQUFLLFlBQVksTUFBTSxLQUFLLFlBQVksTUFBTSxLQUFLLFlBQVksYUFBYSxNQUFNLEtBQUssWUFBWSxNQUFNLEtBQUssWUFBWSxPQUFPLEtBQUssWUFBWSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsT0FBTyxLQUFLLE1BQU0sS0FBSyxZQUFZLE9BQU8sS0FBSyxZQUFZLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxNQUFNLEtBQUssVUFBVSxZQUFZLE9BQU8sS0FBSyxZQUFZLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxNQUFNLEtBQUssVUFBVSxZQUFZLE1BQU0sS0FBSyxZQUFZLE1BQU0sS0FBSyxZQUFZLFdBQVcsVUFBVSxVQUFVLFVBQVUsVUFBVSxZQUFZLFdBQVcsS0FBSyxLQUFLLFlBQVksTUFBTSxLQUFLLFlBQVksV0FBVyxVQUFVLFVBQVUsVUFBVSxVQUFVLFlBQVksV0FBVyxNQUFNLEtBQUssWUFBWSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLFdBQVcsWUFBWSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxNQUFNLEtBQUssVUFBVSxZQUFZLE1BQU0sS0FBSyxZQUFZLE1BQU0sS0FBSyxZQUFZLFdBQVcsS0FBSyxLQUFLLFlBQVksYUFBYSxNQUFNLEtBQUssWUFBWSxNQUFNLEtBQUssVUFBVSxZQUFZLE1BQU0sS0FBSyxVQUFVLFVBQVUsS0FBSyxLQUFLLFlBQVksTUFBTSxLQUFLLFlBQVksTUFBTSxLQUFLLFlBQVksTUFBTSxLQUFLLFlBQVksTUFBTSxLQUFLLFlBQVksTUFBTSxLQUFLLFVBQVUsVUFBVSxVQUFVLFlBQVksV0FBVyxVQUFVLFlBQVksYUFBYSxhQUFhLE1BQU0sS0FBSyxZQUFZLE1BQU0sS0FBSyxZQUFZLE1BQU0sS0FBSyxZQUFZLE1BQU0sS0FBSyxVQUFVLFVBQVUsVUFBVSxZQUFZLFdBQVcsVUFBVSxZQUFZLGFBQWEsYUFBYSxNQUFNLEtBQUssWUFBWSxNQUFNLEtBQUssWUFBWSxPQUFPLEtBQUssWUFBWSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsT0FBTyxLQUFLLE1BQU0sS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLLFlBQVksYUFBYSxPQUFPLEtBQUssTUFBTSxLQUFLLE1BQU0sS0FBSyxZQUFZLGFBQWEsYUFBYSxhQUFhLFdBQVcsWUFBWSxNQUFNLEtBQUssWUFBWSxNQUFNLEtBQUssWUFBWSxNQUFNLEtBQUssWUFBWSxNQUFNLEtBQUssWUFBWSxNQUFNLEtBQUssWUFBWSxXQUFXLEtBQUssTUFBTSxZQUFZLGFBQWEsTUFBTSxLQUFLLFlBQVksTUFBTSxLQUFLLFVBQVUsVUFBVSxLQUFLLEtBQUssWUFBWSxNQUFNLEtBQUssWUFBWSxNQUFNLEtBQUssWUFBWSxNQUFNLEtBQUssWUFBWSxPQUFPLEtBQUssWUFBWSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsV0FBVyxZQUFZLGFBQWEsTUFBTSxLQUFLLFlBQVksTUFBTSxLQUFLLFlBQVksTUFBTSxLQUFLLFlBQVksTUFBTSxLQUFLLFlBQVksTUFBTSxLQUFLLFlBQVksV0FBVyxLQUFLLE1BQU0sWUFBWSxhQUFhLE1BQU0sS0FBSyxZQUFZLE1BQU0sS0FBSyxVQUFVLFVBQVUsS0FBSyxLQUFLLFlBQVksTUFBTSxLQUFLLFlBQVksTUFBTSxLQUFLLFlBQVksTUFBTSxLQUFLLFlBQVksTUFBTSxLQUFLLFlBQVksV0FBVyxVQUFVLFVBQVUsVUFBVSxVQUFVLFlBQVksYUFBYSxhQUFhLE1BQU0sS0FBSyxZQUFZLGFBQWEsYUFBYSxXQUFXLFlBQVksYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLE1BQU0sS0FBSyxZQUFZLGFBQWEsTUFBTSxLQUFLLFlBQVksV0FBVyxVQUFVLFVBQVUsVUFBVSxVQUFVLFlBQVksTUFBTSxLQUFLLFlBQVksYUFBYSxXQUFXLFVBQVUsWUFBWSxhQUFhLGFBQWEsYUFBYSxhQUFhLE1BQU0sS0FBSyxZQUFZLE1BQU0sS0FBSyxZQUFZLE1BQU0sS0FBSyxZQUFZLE1BQU0sS0FBSyxZQUFZLE1BQU0sS0FBSyxZQUFZLGFBQWEsV0FBVyxNQUFNLEtBQUssWUFBWSxXQUFXLFVBQVUsVUFBVSxVQUFVLFVBQVUsS0FBSyxLQUFLLFlBQVksT0FBTyxLQUFLLFlBQVksYUFBYSxNQUFNLEtBQUssWUFBWSxhQUFhLE1BQU0sS0FBSyxZQUFZLGFBQWEsTUFBTSxLQUFLLFlBQVksYUFBYSxPQUFPLE9BQU8sS0FBSyxLQUFLLFlBQVksYUFBYSxNQUFNLEtBQUssVUFBVSxZQUFZLFdBQVcsWUFBWSxhQUFhLE1BQU0sS0FBSyxVQUFVLEtBQUssS0FBSyxVQUFVLFVBQVUsVUFBVSxLQUFLLEtBQUssVUFBVSxVQUFVLEtBQUssTUFBTSxVQUFVLFVBQVUsS0FBSyxLQUFLLFlBQVksTUFBTSxLQUFLLFlBQVksTUFBTSxLQUFLLFlBQVksTUFBTSxLQUFLLFlBQVksTUFBTSxRQUFRLFlBQVksT0FBTyxLQUFLLFlBQVksYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLE1BQU0sS0FBSyxVQUFVLEtBQUssS0FBSyxVQUFVLFlBQVksYUFBYSxNQUFNLEtBQUssVUFBVSxZQUFZLFdBQVcsVUFBVSxZQUFZLGFBQWEsYUFBYSxNQUFNLEtBQUssVUFBVSxZQUFZLFdBQVcsVUFBVSxZQUFZLGFBQWEsYUFBYSxNQUFNLEtBQUssWUFBWSxXQUFXLFVBQVUsVUFBVSxZQUFZLGFBQWEsYUFBYSxNQUFNLEtBQUssWUFBWSxXQUFXLFVBQVUsVUFBVSxZQUFZLGFBQWEsYUFBYSxNQUFNLEtBQUssVUFBVSxVQUFVLFVBQVUsVUFBVSxZQUFZLGFBQWEsYUFBYSxNQUFNLEtBQUssVUFBVSxVQUFVLFVBQVUsVUFBVSxZQUFZLGFBQWEsYUFBYSxNQUFNLEtBQUssVUFBVSxVQUFVLFVBQVUsVUFBVSxZQUFZLGFBQWEsYUFBYSxNQUFNLEtBQUssVUFBVSxVQUFVLFVBQVUsVUFBVSxZQUFZLGFBQWEsYUFBYSxNQUFNLEtBQUssWUFBWSxhQUFhLFdBQVcsVUFBVSxVQUFVLFlBQVksYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLE1BQU0sS0FBSyxZQUFZLE9BQU8sS0FBSyxZQUFZLGFBQWEsTUFBTSxLQUFLLFVBQVUsVUFBVSxLQUFLLEtBQUssWUFBWSxhQUFhLGFBQWEsYUFBYSxhQUFhLE1BQU0sS0FBSyxZQUFZLFdBQVcsWUFBWSxhQUFhLE1BQU0sS0FBSyxZQUFZLE1BQU0sS0FBSyxZQUFZLE1BQU0sS0FBSyxZQUFZLGFBQWEsV0FBVyxZQUFZLFdBQVcsTUFBTSxLQUFLLFVBQVUsWUFBWSxhQUFhLE1BQU0sS0FBSyxZQUFZLFdBQVcsS0FBSyxLQUFLLFlBQVksTUFBTSxLQUFLLFVBQVUsWUFBWSxhQUFhLFdBQVcsS0FBSyxLQUFLLFlBQVksYUFBYSxhQUFhLFdBQVcsS0FBSyxLQUFLLFVBQVUsTUFBTSxLQUFLLFlBQVksV0FBVyxVQUFVLFVBQVUsVUFBVSxVQUFVLFVBQVUsWUFBWSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsTUFBTSxLQUFLLFlBQVksYUFBYSxXQUFXLFlBQVksV0FBVyxLQUFLLEtBQUssWUFBWSxXQUFXLFVBQVUsVUFBVSxVQUFVLFVBQVUsVUFBVSxZQUFZLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxNQUFNLEtBQUssWUFBWSxNQUFNLEtBQUssWUFBWSxNQUFNLEtBQUssWUFBWSxNQUFNLEtBQUssWUFBWSxPQUFPLEtBQUssWUFBWSxhQUFhLFdBQVcsVUFBVSxLQUFLLEtBQUssWUFBWSxNQUFNLE1BQU0sWUFBWSxhQUFhLGFBQWEsYUFBYSxhQUFhLE1BQU0sS0FBSyxVQUFVLEtBQUssS0FBSyxVQUFVLFVBQVUsS0FBSyxLQUFLLFlBQVksTUFBTSxLQUFLLFVBQVUsTUFBTSxLQUFLLFlBQVksTUFBTSxLQUFLLFlBQVksTUFBTSxLQUFLLFVBQVUsVUFBVSxLQUFLLEtBQUssVUFBVSxLQUFLLEtBQUssVUFBVSxVQUFVLEtBQUssS0FBSyxZQUFZLE1BQU0sS0FBSyxVQUFVLE1BQU0sS0FBSyxZQUFZLE1BQU0sS0FBSyxZQUFZLE1BQU0sS0FBSyxVQUFVLEtBQUssS0FBSyxVQUFVLFVBQVUsS0FBSyxLQUFLLFVBQVUsVUFBVSxZQUFZLE1BQU0sS0FBSyxZQUFZLFdBQVcsVUFBVSxZQUFZLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxNQUFNLEtBQUssWUFBWSxhQUFhLGFBQWEsYUFBYSxhQUFhLE1BQU0sS0FBSyxZQUFZLFdBQVcsVUFBVSxLQUFLLEtBQUssVUFBVSxZQUFZLFdBQVcsWUFBWSxNQUFNLEtBQUssVUFBVSxZQUFZLFdBQVcsVUFBVSxVQUFVLFlBQVksYUFBYSxNQUFNLEtBQUssd0JBQXdCLE9BQU8sS0FBSyxVQUFVLE1BQU0sS0FBSyxZQUFZLE1BQU0sS0FBSyxZQUFZLFdBQVcsVUFBVSxVQUFVLFVBQVUsVUFBVSxZQUFZLGFBQWEsYUFBYSxXQUFXLEtBQUssS0FBSyxZQUFZLE1BQU0sS0FBSyxZQUFZLE1BQU0sS0FBSyxZQUFZLE1BQU0sS0FBSyxZQUFZLE1BQU0sS0FBSyxZQUFZLFdBQVcsVUFBVSxZQUFZLGFBQWEsYUFBYSxNQUFNLEtBQUssVUFBVSxZQUFZLE1BQU0sS0FBSyxVQUFVLFVBQVUsWUFBWSxhQUFhLGFBQWEsTUFBTSxLQUFLLFlBQVksYUFBYSxNQUFNLEtBQUssVUFBVSxZQUFZLGFBQWEsV0FBVyxZQUFZLFdBQVcsWUFBWSxXQUFXLE1BQU0sS0FBSyxZQUFZLE1BQU0sS0FB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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxvQkFBb0I7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNudEJ3RDtBQUNwQjtBQUNzQjtBQUMxRDtBQUNPLHdDQUF3Qyxt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QUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxpQkFBaUI7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLHVEQUF1RCxnQkFBZ0I7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDOU1zRDtBQUNDO0FBQ2I7QUFDVTtBQUNKO0FBQ1A7QUFDTDtBQUNwQyxxQkFBcUIsZ0VBQXlCO0FBQ3ZDO0FBQ1A7QUFD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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsNENBQUs7QUFDN0I7QUFDQSx3QkFBd0IsNENBQUs7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsNENBQUs7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDJCQUEyQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsMkJBQTJCO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyw0Q0FBSztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qiw0Q0FBSztBQUM3QjtBQUNBO0FBQ0E7QUFDQSxZQUFZLG1EQUFXO0FBQ3ZCO0FBQ0E7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Q0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3Qvc3R5bGVzL2RvY2t2aWV3LmNzcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL2FwaS9jb21wb25lbnQuYXBpLmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL2FwaS9kb2Nrdmlld0dyb3VwUGFuZWxBcGkuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vYXBpL2RvY2t2aWV3UGFuZWxBcGkuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vYXBpL2VudHJ5UG9pbnRzLmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL2FwaS9ncmlkdmlld1BhbmVsQXBpLmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL2FwaS9wYW5lbEFwaS5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L2VzbS9hcGkvcGFuZXZpZXdQYW5lbEFwaS5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L2VzbS9hcGkvc3BsaXR2aWV3UGFuZWxBcGkuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vYXJyYXkuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vY29uc3RhbnRzLmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL2RuZC9hYnN0cmFjdERyYWdIYW5kbGVyLmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL2RuZC9kYXRhVHJhbnNmZXIuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vZG5kL2RuZC5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L2VzbS9kbmQvZHJvcFRhcmdldEFuY2hvckNvbnRhaW5lci5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L2VzbS9kbmQvZHJvcHRhcmdldC5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L2VzbS9kbmQvZ2hvc3QuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vZG5kL2dyb3VwRHJhZ0hhbmRsZXIuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vZG9ja3ZpZXcvY29tcG9uZW50cy9wYW5lbC9jb250ZW50LmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL2RvY2t2aWV3L2NvbXBvbmVudHMvcG9wdXBTZXJ2aWNlLmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL2RvY2t2aWV3L2NvbXBvbmVudHMvdGFiL2RlZmF1bHRUYWIuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vZG9ja3ZpZXcvY29tcG9uZW50cy90YWIvdGFiLmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL2RvY2t2aWV3L2NvbXBvbmVudHMvdGl0bGViYXIvdGFiT3ZlcmZsb3dDb250cm9sLmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL2RvY2t2aWV3L2NvbXBvbmVudHMvdGl0bGViYXIvdGFicy5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L2VzbS9kb2Nrdmlldy9jb21wb25lbnRzL3RpdGxlYmFyL3RhYnNDb250YWluZXIuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vZG9ja3ZpZXcvY29tcG9uZW50cy90aXRsZWJhci92b2lkQ29udGFpbmVyLmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL2RvY2t2aWV3L2NvbXBvbmVudHMvd2F0ZXJtYXJrL3dhdGVybWFyay5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L2VzbS9kb2Nrdmlldy9kZXNlcmlhbGl6ZXIuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vZG9ja3ZpZXcvZG9ja3ZpZXdDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vZG9ja3ZpZXcvZG9ja3ZpZXdGbG9hdGluZ0dyb3VwUGFuZWwuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vZG9ja3ZpZXcvZG9ja3ZpZXdHcm91cFBhbmVsLmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL2RvY2t2aWV3L2RvY2t2aWV3R3JvdXBQYW5lbE1vZGVsLmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL2RvY2t2aWV3L2RvY2t2aWV3UGFuZWwuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vZG9ja3ZpZXcvZG9ja3ZpZXdQYW5lbE1vZGVsLmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL2RvY2t2aWV3L2V2ZW50cy5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L2VzbS9kb2Nrdmlldy9vcHRpb25zLmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL2RvY2t2aWV3L3N0cmljdEV2ZW50c1NlcXVlbmNpbmcuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vZG9ja3ZpZXcvdGhlbWUuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vZG9ja3ZpZXcvdHlwZXMuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vZG9tLmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL2V2ZW50cy5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L2VzbS9ncmlkdmlldy9iYXNlQ29tcG9uZW50R3JpZHZpZXcuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vZ3JpZHZpZXcvYmFzZVBhbmVsVmlldy5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L2VzbS9ncmlkdmlldy9icmFuY2hOb2RlLmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL2dyaWR2aWV3L2dyaWR2aWV3LmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL2dyaWR2aWV3L2dyaWR2aWV3Q29tcG9uZW50LmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL2dyaWR2aWV3L2dyaWR2aWV3UGFuZWwuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vZ3JpZHZpZXcvbGVhZk5vZGUuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vZ3JpZHZpZXcvb3B0aW9ucy5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L2VzbS9saWZlY3ljbGUuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vbWF0aC5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L2VzbS9vdmVybGF5L292ZXJsYXkuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vb3ZlcmxheS9vdmVybGF5UmVuZGVyQ29udGFpbmVyLmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL3BhbmVsL3R5cGVzLmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL3BhbmV2aWV3L2RlZmF1bHRQYW5ldmlld0hlYWRlci5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L2VzbS9wYW5ldmlldy9kcmFnZ2FibGVQYW5ldmlld1BhbmVsLmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL3BhbmV2aWV3L29wdGlvbnMuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vcGFuZXZpZXcvcGFuZXZpZXcuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vcGFuZXZpZXcvcGFuZXZpZXdDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vcGFuZXZpZXcvcGFuZXZpZXdQYW5lbC5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L2VzbS9wb3BvdXRXaW5kb3cuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vcmVzaXphYmxlLmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL3Njcm9sbGJhci5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L2VzbS9zcGxpdHZpZXcvb3B0aW9ucy5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L2VzbS9zcGxpdHZpZXcvc3BsaXR2aWV3LmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL3NwbGl0dmlldy9zcGxpdHZpZXdDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9lc20vc3BsaXR2aWV3L3NwbGl0dmlld1BhbmVsLmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3QvZXNtL3NwbGl0dmlldy92aWV3SXRlbS5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvZG9ja3ZpZXctY29yZS9kaXN0L2VzbS9zdmcuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL2RvY2t2aWV3LWNvcmUvZGlzdC9zdHlsZXMvZG9ja3ZpZXcuY3NzP2ViYzIiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL2RvY2t2aWV3ci8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9zcmNqcy9tb2R1bGVzL2NvbXBvbmVudHMuanMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyLy4vc3JjanMvbW9kdWxlcy91dGlscy5qcyIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvZXh0ZXJuYWwgdmFyIFwiSFRNTFdpZGdldHNcIiIsIndlYnBhY2s6Ly9kb2Nrdmlld3Ivd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2RvY2t2aWV3ci93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vZG9ja3ZpZXdyL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly9kb2Nrdmlld3IvLi9zcmNqcy93aWRnZXRzL2RvY2t2aWV3LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLmR2LXNjcm9sbGFibGUge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIG92ZXJmbG93OiBoaWRkZW47XG59XG4uZHYtc2Nyb2xsYWJsZSAuZHYtc2Nyb2xsYmFyLWhvcml6b250YWwge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGJvdHRvbTogMHB4O1xuICBsZWZ0OiAwcHg7XG4gIGhlaWdodDogNHB4O1xuICBib3JkZXItcmFkaXVzOiAycHg7XG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAvKiBHUFUgb3B0aW1pemF0aW9ucyAqL1xuICB3aWxsLWNoYW5nZTogYmFja2dyb3VuZC1jb2xvciwgdHJhbnNmb3JtO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xuICBiYWNrZmFjZS12aXNpYmlsaXR5OiBoaWRkZW47XG4gIHRyYW5zaXRpb24tcHJvcGVydHk6IGJhY2tncm91bmQtY29sb3I7XG4gIHRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLWluLW91dDtcbiAgdHJhbnNpdGlvbi1kdXJhdGlvbjogMXM7XG4gIHRyYW5zaXRpb24tZGVsYXk6IDBzO1xufVxuLmR2LXNjcm9sbGFibGU6aG92ZXIgLmR2LXNjcm9sbGJhci1ob3Jpem9udGFsLCAuZHYtc2Nyb2xsYWJsZS5kdi1zY3JvbGxhYmxlLXJlc2l6aW5nIC5kdi1zY3JvbGxiYXItaG9yaXpvbnRhbCwgLmR2LXNjcm9sbGFibGUuZHYtc2Nyb2xsYWJsZS1zY3JvbGxpbmcgLmR2LXNjcm9sbGJhci1ob3Jpem9udGFsIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZHYtc2Nyb2xsYmFyLWJhY2tncm91bmQtY29sb3IsIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yNSkpO1xufVxuLmR2LXN2ZyB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgZmlsbDogY3VycmVudGNvbG9yO1xuICBsaW5lLWhlaWdodDogMTtcbiAgc3Ryb2tlOiBjdXJyZW50Y29sb3I7XG4gIHN0cm9rZS13aWR0aDogMDtcbn1cbi5kb2Nrdmlldy10aGVtZS1kYXJrIHtcbiAgLS1kdi1wYW5ldmlldy1hY3RpdmUtb3V0bGluZS1jb2xvcjogZG9kZ2VyYmx1ZTtcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1mb250LXNpemU6IDEzcHg7XG4gIC0tZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXItaGVpZ2h0OiAzNXB4O1xuICAtLWR2LWRyYWctb3Zlci1iYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDgzLCA4OSwgOTMsIDAuNSk7XG4gIC0tZHYtZHJhZy1vdmVyLWJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIC0tZHYtdGFicy1jb250YWluZXItc2Nyb2xsYmFyLWNvbG9yOiAjODg4O1xuICAtLWR2LWljb24taG92ZXItYmFja2dyb3VuZC1jb2xvcjogcmdiYSg5MCwgOTMsIDk0LCAwLjMxKTtcbiAgLS1kdi1mbG9hdGluZy1ib3gtc2hhZG93OiA4cHggOHB4IDhweCAwcHggcmdiYSg4MywgODksIDkzLCAwLjUpO1xuICAtLWR2LW92ZXJsYXktei1pbmRleDogOTk5O1xuICAtLWR2LXRhYi1mb250LXNpemU6IGluaGVyaXQ7XG4gIC0tZHYtYm9yZGVyLXJhZGl1czogMHB4O1xuICAtLWR2LXRhYi1tYXJnaW46IDA7XG4gIC0tZHYtc2FzaC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIC0tZHYtYWN0aXZlLXNhc2gtY29sb3I6IHRyYW5zcGFyZW50O1xuICAtLWR2LWFjdGl2ZS1zYXNoLXRyYW5zaXRpb24tZHVyYXRpb246IDAuMXM7XG4gIC0tZHYtYWN0aXZlLXNhc2gtdHJhbnNpdGlvbi1kZWxheTogMC41cztcbiAgLS1kdi1ncm91cC12aWV3LWJhY2tncm91bmQtY29sb3I6ICMxZTFlMWU7XG4gIC0tZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXItYmFja2dyb3VuZC1jb2xvcjogIzI1MjUyNjtcbiAgLS1kdi1hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3I6ICMxZTFlMWU7XG4gIC0tZHYtYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3I6ICMyZDJkMmQ7XG4gIC0tZHYtaW5hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3I6ICMxZTFlMWU7XG4gIC0tZHYtaW5hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogIzJkMmQyZDtcbiAgLS1kdi10YWItZGl2aWRlci1jb2xvcjogIzFlMWUxZTtcbiAgLS1kdi1hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWNvbG9yOiB3aGl0ZTtcbiAgLS1kdi1hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItY29sb3I6ICM5Njk2OTY7XG4gIC0tZHYtaW5hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWNvbG9yOiAjOGY4ZjhmO1xuICAtLWR2LWluYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWNvbG9yOiAjNjI2MjYyO1xuICAtLWR2LXNlcGFyYXRvci1ib3JkZXI6IHJnYig2OCwgNjgsIDY4KTtcbiAgLS1kdi1wYW5ldmlldy1oZWFkZXItYm9yZGVyLWNvbG9yOiByZ2JhKDIwNCwgMjA0LCAyMDQsIDAuMik7XG59XG4uZG9ja3ZpZXctdGhlbWUtZGFyayAuZHYtZHJvcC10YXJnZXQtY29udGFpbmVyIC5kdi1kcm9wLXRhcmdldC1hbmNob3IuZHYtZHJvcC10YXJnZXQtYW5jaG9yLWNvbnRhaW5lci1jaGFuZ2VkIHtcbiAgb3BhY2l0eTogMDtcbiAgdHJhbnNpdGlvbjogbm9uZTtcbn1cblxuLmRvY2t2aWV3LXRoZW1lLWxpZ2h0IHtcbiAgLS1kdi1wYW5ldmlldy1hY3RpdmUtb3V0bGluZS1jb2xvcjogZG9kZ2VyYmx1ZTtcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1mb250LXNpemU6IDEzcHg7XG4gIC0tZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXItaGVpZ2h0OiAzNXB4O1xuICAtLWR2LWRyYWctb3Zlci1iYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDgzLCA4OSwgOTMsIDAuNSk7XG4gIC0tZHYtZHJhZy1vdmVyLWJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIC0tZHYtdGFicy1jb250YWluZXItc2Nyb2xsYmFyLWNvbG9yOiAjODg4O1xuICAtLWR2LWljb24taG92ZXItYmFja2dyb3VuZC1jb2xvcjogcmdiYSg5MCwgOTMsIDk0LCAwLjMxKTtcbiAgLS1kdi1mbG9hdGluZy1ib3gtc2hhZG93OiA4cHggOHB4IDhweCAwcHggcmdiYSg4MywgODksIDkzLCAwLjUpO1xuICAtLWR2LW92ZXJsYXktei1pbmRleDogOTk5O1xuICAtLWR2LXRhYi1mb250LXNpemU6IGluaGVyaXQ7XG4gIC0tZHYtYm9yZGVyLXJhZGl1czogMHB4O1xuICAtLWR2LXRhYi1tYXJnaW46IDA7XG4gIC0tZHYtc2FzaC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIC0tZHYtYWN0aXZlLXNhc2gtY29sb3I6IHRyYW5zcGFyZW50O1xuICAtLWR2LWFjdGl2ZS1zYXNoLXRyYW5zaXRpb24tZHVyYXRpb246IDAuMXM7XG4gIC0tZHYtYWN0aXZlLXNhc2gtdHJhbnNpdGlvbi1kZWxheTogMC41cztcbiAgLS1kdi1ncm91cC12aWV3LWJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAtLWR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLWJhY2tncm91bmQtY29sb3I6ICNmM2YzZjM7XG4gIC0tZHYtYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgLS1kdi1hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogI2VjZWNlYztcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gIC0tZHYtaW5hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogI2VjZWNlYztcbiAgLS1kdi10YWItZGl2aWRlci1jb2xvcjogd2hpdGU7XG4gIC0tZHYtYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1jb2xvcjogcmdiKDUxLCA1MSwgNTEpO1xuICAtLWR2LWFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1jb2xvcjogcmdiYSg1MSwgNTEsIDUxLCAwLjcpO1xuICAtLWR2LWluYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1jb2xvcjogcmdiYSg1MSwgNTEsIDUxLCAwLjcpO1xuICAtLWR2LWluYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWNvbG9yOiByZ2JhKDUxLCA1MSwgNTEsIDAuMzUpO1xuICAtLWR2LXNlcGFyYXRvci1ib3JkZXI6IHJnYmEoMTI4LCAxMjgsIDEyOCwgMC4zNSk7XG4gIC0tZHYtcGFuZXZpZXctaGVhZGVyLWJvcmRlci1jb2xvcjogcmdiKDUxLCA1MSwgNTEpO1xuICAtLWR2LXNjcm9sbGJhci1iYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMjUpO1xufVxuLmRvY2t2aWV3LXRoZW1lLWxpZ2h0IC5kdi1kcm9wLXRhcmdldC1jb250YWluZXIgLmR2LWRyb3AtdGFyZ2V0LWFuY2hvci5kdi1kcm9wLXRhcmdldC1hbmNob3ItY29udGFpbmVyLWNoYW5nZWQge1xuICBvcGFjaXR5OiAwO1xuICB0cmFuc2l0aW9uOiBub25lO1xufVxuXG4uZG9ja3ZpZXctdGhlbWUtdnMge1xuICAtLWR2LXBhbmV2aWV3LWFjdGl2ZS1vdXRsaW5lLWNvbG9yOiBkb2RnZXJibHVlO1xuICAtLWR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLWZvbnQtc2l6ZTogMTNweDtcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1oZWlnaHQ6IDM1cHg7XG4gIC0tZHYtZHJhZy1vdmVyLWJhY2tncm91bmQtY29sb3I6IHJnYmEoODMsIDg5LCA5MywgMC41KTtcbiAgLS1kdi1kcmFnLW92ZXItYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgLS1kdi10YWJzLWNvbnRhaW5lci1zY3JvbGxiYXItY29sb3I6ICM4ODg7XG4gIC0tZHYtaWNvbi1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDkwLCA5MywgOTQsIDAuMzEpO1xuICAtLWR2LWZsb2F0aW5nLWJveC1zaGFkb3c6IDhweCA4cHggOHB4IDBweCByZ2JhKDgzLCA4OSwgOTMsIDAuNSk7XG4gIC0tZHYtb3ZlcmxheS16LWluZGV4OiA5OTk7XG4gIC0tZHYtdGFiLWZvbnQtc2l6ZTogaW5oZXJpdDtcbiAgLS1kdi1ib3JkZXItcmFkaXVzOiAwcHg7XG4gIC0tZHYtdGFiLW1hcmdpbjogMDtcbiAgLS1kdi1zYXNoLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgLS1kdi1hY3RpdmUtc2FzaC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIC0tZHYtYWN0aXZlLXNhc2gtdHJhbnNpdGlvbi1kdXJhdGlvbjogMC4xcztcbiAgLS1kdi1hY3RpdmUtc2FzaC10cmFuc2l0aW9uLWRlbGF5OiAwLjVzO1xuICAtLWR2LWdyb3VwLXZpZXctYmFja2dyb3VuZC1jb2xvcjogIzFlMWUxZTtcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1iYWNrZ3JvdW5kLWNvbG9yOiAjMjUyNTI2O1xuICAtLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogIzFlMWUxZTtcbiAgLS1kdi1hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogIzJkMmQyZDtcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogIzFlMWUxZTtcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yOiAjMmQyZDJkO1xuICAtLWR2LXRhYi1kaXZpZGVyLWNvbG9yOiAjMWUxZTFlO1xuICAtLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItY29sb3I6IHdoaXRlO1xuICAtLWR2LWFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1jb2xvcjogIzk2OTY5NjtcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItY29sb3I6ICM4ZjhmOGY7XG4gIC0tZHYtaW5hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItY29sb3I6ICM2MjYyNjI7XG4gIC0tZHYtc2VwYXJhdG9yLWJvcmRlcjogcmdiKDY4LCA2OCwgNjgpO1xuICAtLWR2LXBhbmV2aWV3LWhlYWRlci1ib3JkZXItY29sb3I6IHJnYmEoMjA0LCAyMDQsIDIwNCwgMC4yKTtcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1iYWNrZ3JvdW5kLWNvbG9yOiAjMmQyZDMwO1xuICAtLWR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLWhlaWdodDogMjBweDtcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1mb250LXNpemU6IDExcHg7XG4gIC0tZHYtYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yOiAjMDA3YWNjO1xuICAtLWR2LWluYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yOiAjM2YzZjQ2O1xuICAtLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItY29sb3I6IHdoaXRlO1xuICAtLWR2LWFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1jb2xvcjogd2hpdGU7XG4gIC0tZHYtaW5hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWNvbG9yOiB3aGl0ZTtcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1jb2xvcjogd2hpdGU7XG59XG4uZG9ja3ZpZXctdGhlbWUtdnMgLmR2LWRyb3AtdGFyZ2V0LWNvbnRhaW5lciAuZHYtZHJvcC10YXJnZXQtYW5jaG9yLmR2LWRyb3AtdGFyZ2V0LWFuY2hvci1jb250YWluZXItY2hhbmdlZCB7XG4gIG9wYWNpdHk6IDA7XG4gIHRyYW5zaXRpb246IG5vbmU7XG59XG4uZG9ja3ZpZXctdGhlbWUtdnMgLmR2LWdyb3Vwdmlldy5kdi1hY3RpdmUtZ3JvdXAgPiAuZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXIge1xuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbiAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkIHZhcigtLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcik7XG59XG4uZG9ja3ZpZXctdGhlbWUtdnMgLmR2LWdyb3Vwdmlldy5kdi1hY3RpdmUtZ3JvdXAgPiAuZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXIgLmR2LXRhYi5kdi1hY3RpdmUtdGFiIHtcbiAgYm9yZGVyLXRvcDogMnB4IHNvbGlkIHZhcigtLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcik7XG59XG4uZG9ja3ZpZXctdGhlbWUtdnMgLmR2LWdyb3Vwdmlldy5kdi1hY3RpdmUtZ3JvdXAgPiAuZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXIgLmR2LXRhYi5kdi1pbmFjdGl2ZS10YWIge1xuICBib3JkZXItdG9wOiAycHggc29saWQgdmFyKC0tZHYtYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3IpO1xufVxuLmRvY2t2aWV3LXRoZW1lLXZzIC5kdi1ncm91cHZpZXcuZHYtaW5hY3RpdmUtZ3JvdXAgPiAuZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXIge1xuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbiAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkIHZhcigtLWR2LWluYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yKTtcbn1cbi5kb2Nrdmlldy10aGVtZS12cyAuZHYtZ3JvdXB2aWV3LmR2LWluYWN0aXZlLWdyb3VwID4gLmR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyIC5kdi10YWIuZHYtYWN0aXZlLXRhYiB7XG4gIGJvcmRlci10b3A6IDJweCBzb2xpZCB2YXIoLS1kdi1pbmFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcik7XG59XG4uZG9ja3ZpZXctdGhlbWUtdnMgLmR2LWdyb3Vwdmlldy5kdi1pbmFjdGl2ZS1ncm91cCA+IC5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lciAuZHYtdGFiLmR2LWluYWN0aXZlLXRhYiB7XG4gIGJvcmRlci10b3A6IDJweCBzb2xpZCB2YXIoLS1kdi1pbmFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yKTtcbn1cblxuLmRvY2t2aWV3LXRoZW1lLWFieXNzIHtcbiAgLS1kdi1wYW5ldmlldy1hY3RpdmUtb3V0bGluZS1jb2xvcjogZG9kZ2VyYmx1ZTtcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1mb250LXNpemU6IDEzcHg7XG4gIC0tZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXItaGVpZ2h0OiAzNXB4O1xuICAtLWR2LWRyYWctb3Zlci1iYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDgzLCA4OSwgOTMsIDAuNSk7XG4gIC0tZHYtZHJhZy1vdmVyLWJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIC0tZHYtdGFicy1jb250YWluZXItc2Nyb2xsYmFyLWNvbG9yOiAjODg4O1xuICAtLWR2LWljb24taG92ZXItYmFja2dyb3VuZC1jb2xvcjogcmdiYSg5MCwgOTMsIDk0LCAwLjMxKTtcbiAgLS1kdi1mbG9hdGluZy1ib3gtc2hhZG93OiA4cHggOHB4IDhweCAwcHggcmdiYSg4MywgODksIDkzLCAwLjUpO1xuICAtLWR2LW92ZXJsYXktei1pbmRleDogOTk5O1xuICAtLWR2LXRhYi1mb250LXNpemU6IGluaGVyaXQ7XG4gIC0tZHYtYm9yZGVyLXJhZGl1czogMHB4O1xuICAtLWR2LXRhYi1tYXJnaW46IDA7XG4gIC0tZHYtc2FzaC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIC0tZHYtYWN0aXZlLXNhc2gtY29sb3I6IHRyYW5zcGFyZW50O1xuICAtLWR2LWFjdGl2ZS1zYXNoLXRyYW5zaXRpb24tZHVyYXRpb246IDAuMXM7XG4gIC0tZHYtYWN0aXZlLXNhc2gtdHJhbnNpdGlvbi1kZWxheTogMC41cztcbiAgLS1kdi1jb2xvci1hYnlzcy1kYXJrOiAjMDAwYzE4O1xuICAtLWR2LWNvbG9yLWFieXNzOiAjMTAxOTJjO1xuICAtLWR2LWNvbG9yLWFieXNzLWxpZ2h0OiAjMWMxYzJhO1xuICAtLWR2LWNvbG9yLWFieXNzLWxpZ2h0ZXI6ICMyYjJiNGE7XG4gIC0tZHYtY29sb3ItYWJ5c3MtYWNjZW50OiByZ2IoOTEsIDMwLCAyMDcpO1xuICAtLWR2LWNvbG9yLWFieXNzLXByaW1hcnktdGV4dDogd2hpdGU7XG4gIC0tZHYtY29sb3ItYWJ5c3Mtc2Vjb25kYXJ5LXRleHQ6IHJnYigxNDgsIDE1MSwgMTY5KTtcbiAgLS1kdi1ncm91cC12aWV3LWJhY2tncm91bmQtY29sb3I6IHZhcigtLWR2LWNvbG9yLWFieXNzLWRhcmspO1xuICAtLWR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLWJhY2tncm91bmQtY29sb3I6IHZhcihcbiAgICAgIC0tZHYtY29sb3ItYWJ5c3MtbGlnaHRcbiAgKTtcbiAgLS1kdi1hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3I6IHZhcihcbiAgICAgIC0tZHYtY29sb3ItYWJ5c3MtZGFya1xuICApO1xuICAtLWR2LWFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kdi1jb2xvci1hYnlzcyk7XG4gIC0tZHYtaW5hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3I6IHZhcihcbiAgICAgIC0tZHYtY29sb3ItYWJ5c3MtZGFya1xuICApO1xuICAtLWR2LWluYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3I6IHZhcigtLWR2LWNvbG9yLWFieXNzKTtcbiAgLS1kdi10YWItZGl2aWRlci1jb2xvcjogdmFyKC0tZHYtY29sb3ItYWJ5c3MtbGlnaHRlcik7XG4gIC0tZHYtYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1jb2xvcjogd2hpdGU7XG4gIC0tZHYtYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSk7XG4gIC0tZHYtaW5hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSk7XG4gIC0tZHYtaW5hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yNSk7XG4gIC0tZHYtc2VwYXJhdG9yLWJvcmRlcjogdmFyKC0tZHYtY29sb3ItYWJ5c3MtbGlnaHRlcik7XG4gIC0tZHYtcGFuZXZpZXctaGVhZGVyLWJvcmRlci1jb2xvcjogdmFyKC0tZHYtY29sb3ItYWJ5c3MtbGlnaHRlcik7XG4gIC0tZHYtcGFuZXZpZXctYWN0aXZlLW91dGxpbmUtY29sb3I6ICM1OTZmOTk7XG59XG4uZG9ja3ZpZXctdGhlbWUtYWJ5c3MgLmR2LWRyb3AtdGFyZ2V0LWNvbnRhaW5lciAuZHYtZHJvcC10YXJnZXQtYW5jaG9yLmR2LWRyb3AtdGFyZ2V0LWFuY2hvci1jb250YWluZXItY2hhbmdlZCB7XG4gIG9wYWNpdHk6IDA7XG4gIHRyYW5zaXRpb246IG5vbmU7XG59XG5cbi5kb2Nrdmlldy10aGVtZS1kcmFjdWxhIHtcbiAgLS1kdi1wYW5ldmlldy1hY3RpdmUtb3V0bGluZS1jb2xvcjogZG9kZ2VyYmx1ZTtcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1mb250LXNpemU6IDEzcHg7XG4gIC0tZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXItaGVpZ2h0OiAzNXB4O1xuICAtLWR2LWRyYWctb3Zlci1iYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDgzLCA4OSwgOTMsIDAuNSk7XG4gIC0tZHYtZHJhZy1vdmVyLWJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIC0tZHYtdGFicy1jb250YWluZXItc2Nyb2xsYmFyLWNvbG9yOiAjODg4O1xuICAtLWR2LWljb24taG92ZXItYmFja2dyb3VuZC1jb2xvcjogcmdiYSg5MCwgOTMsIDk0LCAwLjMxKTtcbiAgLS1kdi1mbG9hdGluZy1ib3gtc2hhZG93OiA4cHggOHB4IDhweCAwcHggcmdiYSg4MywgODksIDkzLCAwLjUpO1xuICAtLWR2LW92ZXJsYXktei1pbmRleDogOTk5O1xuICAtLWR2LXRhYi1mb250LXNpemU6IGluaGVyaXQ7XG4gIC0tZHYtYm9yZGVyLXJhZGl1czogMHB4O1xuICAtLWR2LXRhYi1tYXJnaW46IDA7XG4gIC0tZHYtc2FzaC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIC0tZHYtYWN0aXZlLXNhc2gtY29sb3I6IHRyYW5zcGFyZW50O1xuICAtLWR2LWFjdGl2ZS1zYXNoLXRyYW5zaXRpb24tZHVyYXRpb246IDAuMXM7XG4gIC0tZHYtYWN0aXZlLXNhc2gtdHJhbnNpdGlvbi1kZWxheTogMC41cztcbiAgLS1kdi1ncm91cC12aWV3LWJhY2tncm91bmQtY29sb3I6ICMyODJhMzY7XG4gIC0tZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXItYmFja2dyb3VuZC1jb2xvcjogIzE5MWEyMTtcbiAgLS1kdi1hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3I6ICMyODJhMzY7XG4gIC0tZHYtYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3I6ICMyMTIyMmM7XG4gIC0tZHYtaW5hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3I6ICMyODJhMzY7XG4gIC0tZHYtaW5hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogIzIxMjIyYztcbiAgLS1kdi10YWItZGl2aWRlci1jb2xvcjogIzE5MWEyMTtcbiAgLS1kdi1hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWNvbG9yOiByZ2IoMjQ4LCAyNDgsIDI0Mik7XG4gIC0tZHYtYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWNvbG9yOiByZ2IoOTgsIDExNCwgMTY0KTtcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItY29sb3I6IHJnYmEoMjQ4LCAyNDgsIDI0MiwgMC41KTtcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1jb2xvcjogcmdiYSg5OCwgMTE0LCAxNjQsIDAuNSk7XG4gIC0tZHYtc2VwYXJhdG9yLWJvcmRlcjogI2JkOTNmOTtcbiAgLS1kdi1wYW5ldmlldy1oZWFkZXItYm9yZGVyLWNvbG9yOiAjYmQ5M2Y5O1xuICAtLWR2LXBhbmV2aWV3LWFjdGl2ZS1vdXRsaW5lLWNvbG9yOiAjNjI3MmE0O1xufVxuLmRvY2t2aWV3LXRoZW1lLWRyYWN1bGEgLmR2LWRyb3AtdGFyZ2V0LWNvbnRhaW5lciAuZHYtZHJvcC10YXJnZXQtYW5jaG9yLmR2LWRyb3AtdGFyZ2V0LWFuY2hvci1jb250YWluZXItY2hhbmdlZCB7XG4gIG9wYWNpdHk6IDA7XG4gIHRyYW5zaXRpb246IG5vbmU7XG59XG4uZG9ja3ZpZXctdGhlbWUtZHJhY3VsYSAuZHYtZ3JvdXB2aWV3LmR2LWFjdGl2ZS1ncm91cCA+IC5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lciAuZHYtdGFicy1jb250YWluZXIgPiAuZHYtdGFiLmR2LWFjdGl2ZS10YWIge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG4uZG9ja3ZpZXctdGhlbWUtZHJhY3VsYSAuZHYtZ3JvdXB2aWV3LmR2LWFjdGl2ZS1ncm91cCA+IC5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lciAuZHYtdGFicy1jb250YWluZXIgPiAuZHYtdGFiLmR2LWFjdGl2ZS10YWI6OmFmdGVyIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBsZWZ0OiAwcHg7XG4gIHRvcDogMHB4O1xuICBjb250ZW50OiBcIlwiO1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxcHg7XG4gIGJhY2tncm91bmQtY29sb3I6ICM5NDUyN2U7XG4gIHotaW5kZXg6IDk5OTtcbn1cbi5kb2Nrdmlldy10aGVtZS1kcmFjdWxhIC5kdi1ncm91cHZpZXcuZHYtaW5hY3RpdmUtZ3JvdXAgPiAuZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXIgLmR2LXRhYnMtY29udGFpbmVyID4gLmR2LXRhYi5kdi1hY3RpdmUtdGFiIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuLmRvY2t2aWV3LXRoZW1lLWRyYWN1bGEgLmR2LWdyb3Vwdmlldy5kdi1pbmFjdGl2ZS1ncm91cCA+IC5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lciAuZHYtdGFicy1jb250YWluZXIgPiAuZHYtdGFiLmR2LWFjdGl2ZS10YWI6OmFmdGVyIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBsZWZ0OiAwcHg7XG4gIGJvdHRvbTogMHB4O1xuICBjb250ZW50OiBcIlwiO1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxcHg7XG4gIGJhY2tncm91bmQtY29sb3I6ICM1ZTNkNWE7XG4gIHotaW5kZXg6IDk5OTtcbn1cblxuLmRvY2t2aWV3LXRoZW1lLXJlcGxpdCB7XG4gIC0tZHYtcGFuZXZpZXctYWN0aXZlLW91dGxpbmUtY29sb3I6IGRvZGdlcmJsdWU7XG4gIC0tZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXItZm9udC1zaXplOiAxM3B4O1xuICAtLWR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLWhlaWdodDogMzVweDtcbiAgLS1kdi1kcmFnLW92ZXItYmFja2dyb3VuZC1jb2xvcjogcmdiYSg4MywgODksIDkzLCAwLjUpO1xuICAtLWR2LWRyYWctb3Zlci1ib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xuICAtLWR2LXRhYnMtY29udGFpbmVyLXNjcm9sbGJhci1jb2xvcjogIzg4ODtcbiAgLS1kdi1pY29uLWhvdmVyLWJhY2tncm91bmQtY29sb3I6IHJnYmEoOTAsIDkzLCA5NCwgMC4zMSk7XG4gIC0tZHYtZmxvYXRpbmctYm94LXNoYWRvdzogOHB4IDhweCA4cHggMHB4IHJnYmEoODMsIDg5LCA5MywgMC41KTtcbiAgLS1kdi1vdmVybGF5LXotaW5kZXg6IDk5OTtcbiAgLS1kdi10YWItZm9udC1zaXplOiBpbmhlcml0O1xuICAtLWR2LWJvcmRlci1yYWRpdXM6IDBweDtcbiAgLS1kdi10YWItbWFyZ2luOiAwO1xuICAtLWR2LXNhc2gtY29sb3I6IHRyYW5zcGFyZW50O1xuICAtLWR2LWFjdGl2ZS1zYXNoLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgLS1kdi1hY3RpdmUtc2FzaC10cmFuc2l0aW9uLWR1cmF0aW9uOiAwLjFzO1xuICAtLWR2LWFjdGl2ZS1zYXNoLXRyYW5zaXRpb24tZGVsYXk6IDAuNXM7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIHBhZGRpbmc6IDEwcHg7XG4gIGJhY2tncm91bmQtY29sb3I6ICNlYmVjZWQ7XG4gIC0tZHYtZ3JvdXAtdmlldy1iYWNrZ3JvdW5kLWNvbG9yOiAjZWJlY2VkO1xuICAtLWR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLWJhY2tncm91bmQtY29sb3I6ICNmY2ZjZmM7XG4gIC0tZHYtYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yOiAjZjBmMWYyO1xuICAtLWR2LWFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yOiAjZmNmY2ZjO1xuICAtLWR2LWluYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yOiAjZjBmMWYyO1xuICAtLWR2LWluYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3I6ICNmY2ZjZmM7XG4gIC0tZHYtdGFiLWRpdmlkZXItY29sb3I6IHRyYW5zcGFyZW50O1xuICAtLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItY29sb3I6IHJnYig1MSwgNTEsIDUxKTtcbiAgLS1kdi1hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItY29sb3I6IHJnYig1MSwgNTEsIDUxKTtcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItY29sb3I6IHJnYig1MSwgNTEsIDUxKTtcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1jb2xvcjogcmdiKDUxLCA1MSwgNTEpO1xuICAtLWR2LXNlcGFyYXRvci1ib3JkZXI6IHRyYW5zcGFyZW50O1xuICAtLWR2LXBhbmV2aWV3LWhlYWRlci1ib3JkZXItY29sb3I6IHJnYig1MSwgNTEsIDUxKTtcbiAgLS1kdi1zYXNoLWNvbG9yOiAjY2ZkMWQzO1xuICAtLWR2LWFjdGl2ZS1zYXNoLWNvbG9yOiAjYmFiYmJiO1xufVxuLmRvY2t2aWV3LXRoZW1lLXJlcGxpdCAuZHYtZHJvcC10YXJnZXQtY29udGFpbmVyIC5kdi1kcm9wLXRhcmdldC1hbmNob3IuZHYtZHJvcC10YXJnZXQtYW5jaG9yLWNvbnRhaW5lci1jaGFuZ2VkIHtcbiAgb3BhY2l0eTogMDtcbiAgdHJhbnNpdGlvbjogbm9uZTtcbn1cbi5kb2Nrdmlldy10aGVtZS1yZXBsaXQgLmR2LXJlc2l6ZS1jb250YWluZXI6aGFzKD4gLmR2LWdyb3Vwdmlldykge1xuICBib3JkZXItcmFkaXVzOiA4cHg7XG59XG4uZG9ja3ZpZXctdGhlbWUtcmVwbGl0IC5kdi1yZXNpemUtY29udGFpbmVyIHtcbiAgYm9yZGVyLXJhZGl1czogMTBweCAhaW1wb3J0YW50O1xuICBib3JkZXI6IG5vbmU7XG59XG4uZG9ja3ZpZXctdGhlbWUtcmVwbGl0IC5kdi1ncm91cHZpZXcge1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBib3JkZXItcmFkaXVzOiAxMHB4O1xufVxuLmRvY2t2aWV3LXRoZW1lLXJlcGxpdCAuZHYtZ3JvdXB2aWV3IC5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lciB7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCByZ2JhKDEyOCwgMTI4LCAxMjgsIDAuMzUpO1xufVxuLmRvY2t2aWV3LXRoZW1lLXJlcGxpdCAuZHYtZ3JvdXB2aWV3IC5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lciAuZHYtdGFiIHtcbiAgbWFyZ2luOiA0cHg7XG4gIGJvcmRlci1yYWRpdXM6IDhweDtcbn1cbi5kb2Nrdmlldy10aGVtZS1yZXBsaXQgLmR2LWdyb3VwdmlldyAuZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXIgLmR2LXRhYiAuZHYtc3ZnIHtcbiAgaGVpZ2h0OiA4cHg7XG4gIHdpZHRoOiA4cHg7XG59XG4uZG9ja3ZpZXctdGhlbWUtcmVwbGl0IC5kdi1ncm91cHZpZXcgLmR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyIC5kdi10YWI6aG92ZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTRlNWU2ICFpbXBvcnRhbnQ7XG59XG4uZG9ja3ZpZXctdGhlbWUtcmVwbGl0IC5kdi1ncm91cHZpZXcgLmR2LWNvbnRlbnQtY29udGFpbmVyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZjZmNmYztcbn1cbi5kb2Nrdmlldy10aGVtZS1yZXBsaXQgLmR2LWdyb3Vwdmlldy5kdi1hY3RpdmUtZ3JvdXAge1xuICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDEyOCwgMTI4LCAxMjgsIDAuMzUpO1xufVxuLmRvY2t2aWV3LXRoZW1lLXJlcGxpdCAuZHYtZ3JvdXB2aWV3LmR2LWluYWN0aXZlLWdyb3VwIHtcbiAgYm9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7XG59XG4uZG9ja3ZpZXctdGhlbWUtcmVwbGl0IC5kdi12ZXJ0aWNhbCA+IC5kdi1zYXNoLWNvbnRhaW5lciA+IC5kdi1zYXNoIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG59XG4uZG9ja3ZpZXctdGhlbWUtcmVwbGl0IC5kdi12ZXJ0aWNhbCA+IC5kdi1zYXNoLWNvbnRhaW5lciA+IC5kdi1zYXNoOm5vdCguZGlzYWJsZWQpOjphZnRlciB7XG4gIGNvbnRlbnQ6IFwiXCI7XG4gIGhlaWdodDogNHB4O1xuICB3aWR0aDogNDBweDtcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xuICB0b3A6IDUwJTtcbiAgbGVmdDogNTAlO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZHYtc2FzaC1jb2xvcik7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbn1cbi5kb2Nrdmlldy10aGVtZS1yZXBsaXQgLmR2LXZlcnRpY2FsID4gLmR2LXNhc2gtY29udGFpbmVyID4gLmR2LXNhc2g6bm90KC5kaXNhYmxlZCk6aG92ZXIsIC5kb2Nrdmlldy10aGVtZS1yZXBsaXQgLmR2LXZlcnRpY2FsID4gLmR2LXNhc2gtY29udGFpbmVyID4gLmR2LXNhc2g6bm90KC5kaXNhYmxlZCk6YWN0aXZlIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG59XG4uZG9ja3ZpZXctdGhlbWUtcmVwbGl0IC5kdi12ZXJ0aWNhbCA+IC5kdi1zYXNoLWNvbnRhaW5lciA+IC5kdi1zYXNoOm5vdCguZGlzYWJsZWQpOmhvdmVyOjphZnRlciwgLmRvY2t2aWV3LXRoZW1lLXJlcGxpdCAuZHYtdmVydGljYWwgPiAuZHYtc2FzaC1jb250YWluZXIgPiAuZHYtc2FzaDpub3QoLmRpc2FibGVkKTphY3RpdmU6OmFmdGVyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZHYtYWN0aXZlLXNhc2gtY29sb3IpO1xufVxuLmRvY2t2aWV3LXRoZW1lLXJlcGxpdCAuZHYtaG9yaXpvbnRhbCA+IC5kdi1zYXNoLWNvbnRhaW5lciA+IC5kdi1zYXNoIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG59XG4uZG9ja3ZpZXctdGhlbWUtcmVwbGl0IC5kdi1ob3Jpem9udGFsID4gLmR2LXNhc2gtY29udGFpbmVyID4gLmR2LXNhc2g6bm90KC5kaXNhYmxlZCk6OmFmdGVyIHtcbiAgY29udGVudDogXCJcIjtcbiAgaGVpZ2h0OiA0MHB4O1xuICB3aWR0aDogNHB4O1xuICBib3JkZXItcmFkaXVzOiAycHg7XG4gIHRvcDogNTAlO1xuICBsZWZ0OiA1MCU7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kdi1zYXNoLWNvbG9yKTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xufVxuLmRvY2t2aWV3LXRoZW1lLXJlcGxpdCAuZHYtaG9yaXpvbnRhbCA+IC5kdi1zYXNoLWNvbnRhaW5lciA+IC5kdi1zYXNoOm5vdCguZGlzYWJsZWQpOmhvdmVyLCAuZG9ja3ZpZXctdGhlbWUtcmVwbGl0IC5kdi1ob3Jpem9udGFsID4gLmR2LXNhc2gtY29udGFpbmVyID4gLmR2LXNhc2g6bm90KC5kaXNhYmxlZCk6YWN0aXZlIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG59XG4uZG9ja3ZpZXctdGhlbWUtcmVwbGl0IC5kdi1ob3Jpem9udGFsID4gLmR2LXNhc2gtY29udGFpbmVyID4gLmR2LXNhc2g6bm90KC5kaXNhYmxlZCk6aG92ZXI6OmFmdGVyLCAuZG9ja3ZpZXctdGhlbWUtcmVwbGl0IC5kdi1ob3Jpem9udGFsID4gLmR2LXNhc2gtY29udGFpbmVyID4gLmR2LXNhc2g6bm90KC5kaXNhYmxlZCk6YWN0aXZlOjphZnRlciB7XG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWR2LWFjdGl2ZS1zYXNoLWNvbG9yKTtcbn1cblxuLmRvY2t2aWV3LXRoZW1lLWFieXNzLXNwYWNlZCB7XG4gIC0tZHYtcGFuZXZpZXctYWN0aXZlLW91dGxpbmUtY29sb3I6IGRvZGdlcmJsdWU7XG4gIC0tZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXItZm9udC1zaXplOiAxM3B4O1xuICAtLWR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLWhlaWdodDogMzVweDtcbiAgLS1kdi1kcmFnLW92ZXItYmFja2dyb3VuZC1jb2xvcjogcmdiYSg4MywgODksIDkzLCAwLjUpO1xuICAtLWR2LWRyYWctb3Zlci1ib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xuICAtLWR2LXRhYnMtY29udGFpbmVyLXNjcm9sbGJhci1jb2xvcjogIzg4ODtcbiAgLS1kdi1pY29uLWhvdmVyLWJhY2tncm91bmQtY29sb3I6IHJnYmEoOTAsIDkzLCA5NCwgMC4zMSk7XG4gIC0tZHYtZmxvYXRpbmctYm94LXNoYWRvdzogOHB4IDhweCA4cHggMHB4IHJnYmEoODMsIDg5LCA5MywgMC41KTtcbiAgLS1kdi1vdmVybGF5LXotaW5kZXg6IDk5OTtcbiAgLS1kdi10YWItZm9udC1zaXplOiBpbmhlcml0O1xuICAtLWR2LWJvcmRlci1yYWRpdXM6IDBweDtcbiAgLS1kdi10YWItbWFyZ2luOiAwO1xuICAtLWR2LXNhc2gtY29sb3I6IHRyYW5zcGFyZW50O1xuICAtLWR2LWFjdGl2ZS1zYXNoLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgLS1kdi1hY3RpdmUtc2FzaC10cmFuc2l0aW9uLWR1cmF0aW9uOiAwLjFzO1xuICAtLWR2LWFjdGl2ZS1zYXNoLXRyYW5zaXRpb24tZGVsYXk6IDAuNXM7XG4gIC0tZHYtdGFiLWZvbnQtc2l6ZTogMTJweDtcbiAgLS1kdi1ib3JkZXItcmFkaXVzOiAyMHB4O1xuICAtLWR2LXRhYi1tYXJnaW46IDAuNXJlbSAwLjI1cmVtO1xuICAtLWR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLWhlaWdodDogNDRweDtcbiAgLS1kdi1ib3JkZXItcmFkaXVzOiAyMHB4O1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAtLWR2LWNvbG9yLWFieXNzLWRhcms6IHJnYigxMSwgNiwgMTcpO1xuICAtLWR2LWNvbG9yLWFieXNzOiAjMTYxMjFmO1xuICAtLWR2LWNvbG9yLWFieXNzLWxpZ2h0OiAjMjAxZDJiO1xuICAtLWR2LWNvbG9yLWFieXNzLWxpZ2h0ZXI6ICMyYTI4Mzc7XG4gIC0tZHYtY29sb3ItYWJ5c3MtYWNjZW50OiByZ2IoOTEsIDMwLCAyMDcpO1xuICAtLWR2LWNvbG9yLWFieXNzLXByaW1hcnktdGV4dDogd2hpdGU7XG4gIC0tZHYtY29sb3ItYWJ5c3Mtc2Vjb25kYXJ5LXRleHQ6IHJnYigxNDgsIDE1MSwgMTY5KTtcbiAgLS1kdi1kcmFnLW92ZXItYm9yZGVyOiAycHggc29saWQgdmFyKC0tZHYtY29sb3ItYWJ5c3MtYWNjZW50KTtcbiAgLS1kdi1kcmFnLW92ZXItYmFja2dyb3VuZC1jb2xvcjogXCJcIjtcbiAgLS1kdi1ncm91cC12aWV3LWJhY2tncm91bmQtY29sb3I6IHZhcigtLWR2LWNvbG9yLWFieXNzLWRhcmspO1xuICAtLWR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLWJhY2tncm91bmQtY29sb3I6IHZhcigtLWR2LWNvbG9yLWFieXNzKTtcbiAgLS1kdi1hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3I6IHZhcihcbiAgICAgIC0tZHYtY29sb3ItYWJ5c3MtbGlnaHRlclxuICApO1xuICAtLWR2LWFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yOiB2YXIoXG4gICAgICAtLWR2LWNvbG9yLWFieXNzLWxpZ2h0XG4gICk7XG4gIC0tZHYtaW5hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3I6IHZhcihcbiAgICAgIC0tZHYtY29sb3ItYWJ5c3MtbGlnaHRlclxuICApO1xuICAtLWR2LWluYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3I6IHZhcihcbiAgICAgIC0tZHYtY29sb3ItYWJ5c3MtbGlnaHRcbiAgKTtcbiAgLS1kdi10YWItZGl2aWRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIC0tZHYtYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1jb2xvcjogdmFyKC0tZHYtY29sb3ItYWJ5c3MtcHJpbWFyeS10ZXh0KTtcbiAgLS1kdi1hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItY29sb3I6IHZhcihcbiAgICAgIC0tZHYtY29sb3ItYWJ5c3Mtc2Vjb25kYXJ5LXRleHRcbiAgKTtcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItY29sb3I6IHZhcihcbiAgICAgIC0tZHYtY29sb3ItYWJ5c3MtcHJpbWFyeS10ZXh0XG4gICk7XG4gIC0tZHYtaW5hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItY29sb3I6IHZhcihcbiAgICAgIC0tZHYtY29sb3ItYWJ5c3Mtc2Vjb25kYXJ5LXRleHRcbiAgKTtcbiAgLS1kdi1zZXBhcmF0b3ItYm9yZGVyOiB0cmFuc3BhcmVudDtcbiAgLS1kdi1wYW5ldmlldy1oZWFkZXItYm9yZGVyLWNvbG9yOiByZ2IoNTEsIDUxLCA1MSk7XG4gIC0tZHYtYWN0aXZlLXNhc2gtY29sb3I6IHZhcigtLWR2LWNvbG9yLWFieXNzLWFjY2VudCk7XG4gIC0tZHYtZmxvYXRpbmctYm94LXNoYWRvdzogOHB4IDhweCA4cHggMHB4IHJnYmEoMCwgMCwgMCwgMC41KTtcbiAgcGFkZGluZzogMTBweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZHYtY29sb3ItYWJ5c3MtZGFyayk7XG59XG4uZG9ja3ZpZXctdGhlbWUtYWJ5c3Mtc3BhY2VkIC5kdi1yZXNpemUtY29udGFpbmVyOmhhcyg+IC5kdi1ncm91cHZpZXcpIHtcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xufVxuLmRvY2t2aWV3LXRoZW1lLWFieXNzLXNwYWNlZCAuZHYtc2FzaCB7XG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbn1cbi5kb2Nrdmlldy10aGVtZS1hYnlzcy1zcGFjZWQgLmR2LWRyb3AtdGFyZ2V0LWFuY2hvciB7XG4gIGJvcmRlci1yYWRpdXM6IGNhbGModmFyKC0tZHYtYm9yZGVyLXJhZGl1cykgLyA0KTtcbn1cbi5kb2Nrdmlldy10aGVtZS1hYnlzcy1zcGFjZWQgLmR2LWRyb3AtdGFyZ2V0LWFuY2hvci5kdi1kcm9wLXRhcmdldC1jb250ZW50IHtcbiAgYm9yZGVyLXJhZGl1czogdmFyKC0tZHYtYm9yZGVyLXJhZGl1cyk7XG59XG4uZG9ja3ZpZXctdGhlbWUtYWJ5c3Mtc3BhY2VkIC5kdi1yZXNpemUtY29udGFpbmVyIHtcbiAgYm9yZGVyLXJhZGl1czogdmFyKC0tZHYtYm9yZGVyLXJhZGl1cykgIWltcG9ydGFudDtcbiAgYm9yZGVyOiBub25lO1xufVxuLmRvY2t2aWV3LXRoZW1lLWFieXNzLXNwYWNlZCAuZHYtdGFicy1vdmVyZmxvdy1jb250YWluZXIsXG4uZG9ja3ZpZXctdGhlbWUtYWJ5c3Mtc3BhY2VkIC5kdi10YWJzLW92ZXJmbG93LWRyb3Bkb3duLWRlZmF1bHQge1xuICBib3JkZXItcmFkaXVzOiA4cHg7XG4gIGhlaWdodDogdW5zZXQgIWltcG9ydGFudDtcbn1cbi5kb2Nrdmlldy10aGVtZS1hYnlzcy1zcGFjZWQgLmR2LXRhYiB7XG4gIGJvcmRlci1yYWRpdXM6IDhweDtcbn1cbi5kb2Nrdmlldy10aGVtZS1hYnlzcy1zcGFjZWQgLmR2LXRhYiAuZHYtc3ZnIHtcbiAgaGVpZ2h0OiA4cHg7XG4gIHdpZHRoOiA4cHg7XG59XG4uZG9ja3ZpZXctdGhlbWUtYWJ5c3Mtc3BhY2VkIC5kdi1ncm91cHZpZXcge1xuICBib3JkZXItcmFkaXVzOiB2YXIoLS1kdi1ib3JkZXItcmFkaXVzKTtcbn1cbi5kb2Nrdmlldy10aGVtZS1hYnlzcy1zcGFjZWQgLmR2LWdyb3VwdmlldyAuZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXIge1xuICBwYWRkaW5nOiAwcHggY2FsYyh2YXIoLS1kdi1ib3JkZXItcmFkaXVzKSAvIDIpO1xufVxuLmRvY2t2aWV3LXRoZW1lLWFieXNzLXNwYWNlZCAuZHYtZ3JvdXB2aWV3IC5kdi1jb250ZW50LWNvbnRhaW5lciB7XG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLWJhY2tncm91bmQtY29sb3IpO1xufVxuLmRvY2t2aWV3LXRoZW1lLWFieXNzLXNwYWNlZCAuZHYtcmVzaXplLWNvbnRhaW5lciAuZHYtZ3JvdXB2aWV3IHtcbiAgYm9yZGVyOiAycHggc29saWQgdmFyKC0tZHYtY29sb3ItYWJ5c3MtZGFyayk7XG59XG5cbi5kb2Nrdmlldy10aGVtZS1saWdodC1zcGFjZWQge1xuICAtLWR2LXBhbmV2aWV3LWFjdGl2ZS1vdXRsaW5lLWNvbG9yOiBkb2RnZXJibHVlO1xuICAtLWR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLWZvbnQtc2l6ZTogMTNweDtcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1oZWlnaHQ6IDM1cHg7XG4gIC0tZHYtZHJhZy1vdmVyLWJhY2tncm91bmQtY29sb3I6IHJnYmEoODMsIDg5LCA5MywgMC41KTtcbiAgLS1kdi1kcmFnLW92ZXItYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgLS1kdi10YWJzLWNvbnRhaW5lci1zY3JvbGxiYXItY29sb3I6ICM4ODg7XG4gIC0tZHYtaWNvbi1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDkwLCA5MywgOTQsIDAuMzEpO1xuICAtLWR2LWZsb2F0aW5nLWJveC1zaGFkb3c6IDhweCA4cHggOHB4IDBweCByZ2JhKDgzLCA4OSwgOTMsIDAuNSk7XG4gIC0tZHYtb3ZlcmxheS16LWluZGV4OiA5OTk7XG4gIC0tZHYtdGFiLWZvbnQtc2l6ZTogaW5oZXJpdDtcbiAgLS1kdi1ib3JkZXItcmFkaXVzOiAwcHg7XG4gIC0tZHYtdGFiLW1hcmdpbjogMDtcbiAgLS1kdi1zYXNoLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgLS1kdi1hY3RpdmUtc2FzaC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIC0tZHYtYWN0aXZlLXNhc2gtdHJhbnNpdGlvbi1kdXJhdGlvbjogMC4xcztcbiAgLS1kdi1hY3RpdmUtc2FzaC10cmFuc2l0aW9uLWRlbGF5OiAwLjVzO1xuICAtLWR2LXRhYi1mb250LXNpemU6IDEycHg7XG4gIC0tZHYtYm9yZGVyLXJhZGl1czogMjBweDtcbiAgLS1kdi10YWItbWFyZ2luOiAwLjVyZW0gMC4yNXJlbTtcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1oZWlnaHQ6IDQ0cHg7XG4gIC0tZHYtYm9yZGVyLXJhZGl1czogMjBweDtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgLS1kdi1kcmFnLW92ZXItYm9yZGVyOiAycHggc29saWQgcmdiKDkxLCAzMCwgMjA3KTtcbiAgLS1kdi1kcmFnLW92ZXItYmFja2dyb3VuZC1jb2xvcjogXCJcIjtcbiAgLS1kdi1ncm91cC12aWV3LWJhY2tncm91bmQtY29sb3I6ICNmNmY1Zjk7XG4gIC0tZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXItYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gIC0tZHYtYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yOiAjZWRlZGYwO1xuICAtLWR2LWFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yOiAjZjlmOWZhO1xuICAtLWR2LWluYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yOiAjZWRlZGYwO1xuICAtLWR2LWluYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3I6ICNmOWY5ZmE7XG4gIC0tZHYtdGFiLWRpdmlkZXItY29sb3I6IHRyYW5zcGFyZW50O1xuICAtLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItY29sb3I6IHJnYigxMDQsIDEwNywgMTMwKTtcbiAgLS1kdi1hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItY29sb3I6IHJnYigxNDgsIDE1MSwgMTY5KTtcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItY29sb3I6IHJnYigxMDQsIDEwNywgMTMwKTtcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1jb2xvcjogcmdiKDE0OCwgMTUxLCAxNjkpO1xuICAtLWR2LXNlcGFyYXRvci1ib3JkZXI6IHRyYW5zcGFyZW50O1xuICAtLWR2LXBhbmV2aWV3LWhlYWRlci1ib3JkZXItY29sb3I6IHJnYig1MSwgNTEsIDUxKTtcbiAgLS1kdi1hY3RpdmUtc2FzaC1jb2xvcjogcmdiKDkxLCAzMCwgMjA3KTtcbiAgLS1kdi1mbG9hdGluZy1ib3gtc2hhZG93OiA4cHggOHB4IDhweCAwcHggcmdiYSgwLCAwLCAwLCAwLjEpO1xuICBwYWRkaW5nOiAxMHB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjZmNWY5O1xuICAtLWR2LXNjcm9sbGJhci1iYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMjUpO1xufVxuLmRvY2t2aWV3LXRoZW1lLWxpZ2h0LXNwYWNlZCAuZHYtcmVzaXplLWNvbnRhaW5lcjpoYXMoPiAuZHYtZ3JvdXB2aWV3KSB7XG4gIGJvcmRlci1yYWRpdXM6IDhweDtcbn1cbi5kb2Nrdmlldy10aGVtZS1saWdodC1zcGFjZWQgLmR2LXNhc2gge1xuICBib3JkZXItcmFkaXVzOiA0cHg7XG59XG4uZG9ja3ZpZXctdGhlbWUtbGlnaHQtc3BhY2VkIC5kdi1kcm9wLXRhcmdldC1hbmNob3Ige1xuICBib3JkZXItcmFkaXVzOiBjYWxjKHZhcigtLWR2LWJvcmRlci1yYWRpdXMpIC8gNCk7XG59XG4uZG9ja3ZpZXctdGhlbWUtbGlnaHQtc3BhY2VkIC5kdi1kcm9wLXRhcmdldC1hbmNob3IuZHYtZHJvcC10YXJnZXQtY29udGVudCB7XG4gIGJvcmRlci1yYWRpdXM6IHZhcigtLWR2LWJvcmRlci1yYWRpdXMpO1xufVxuLmRvY2t2aWV3LXRoZW1lLWxpZ2h0LXNwYWNlZCAuZHYtcmVzaXplLWNvbnRhaW5lciB7XG4gIGJvcmRlci1yYWRpdXM6IHZhcigtLWR2LWJvcmRlci1yYWRpdXMpICFpbXBvcnRhbnQ7XG4gIGJvcmRlcjogbm9uZTtcbn1cbi5kb2Nrdmlldy10aGVtZS1saWdodC1zcGFjZWQgLmR2LXRhYnMtb3ZlcmZsb3ctY29udGFpbmVyLFxuLmRvY2t2aWV3LXRoZW1lLWxpZ2h0LXNwYWNlZCAuZHYtdGFicy1vdmVyZmxvdy1kcm9wZG93bi1kZWZhdWx0IHtcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xuICBoZWlnaHQ6IHVuc2V0ICFpbXBvcnRhbnQ7XG59XG4uZG9ja3ZpZXctdGhlbWUtbGlnaHQtc3BhY2VkIC5kdi10YWIge1xuICBib3JkZXItcmFkaXVzOiA4cHg7XG59XG4uZG9ja3ZpZXctdGhlbWUtbGlnaHQtc3BhY2VkIC5kdi10YWIgLmR2LXN2ZyB7XG4gIGhlaWdodDogOHB4O1xuICB3aWR0aDogOHB4O1xufVxuLmRvY2t2aWV3LXRoZW1lLWxpZ2h0LXNwYWNlZCAuZHYtZ3JvdXB2aWV3IHtcbiAgYm9yZGVyLXJhZGl1czogdmFyKC0tZHYtYm9yZGVyLXJhZGl1cyk7XG59XG4uZG9ja3ZpZXctdGhlbWUtbGlnaHQtc3BhY2VkIC5kdi1ncm91cHZpZXcgLmR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyIHtcbiAgcGFkZGluZzogMHB4IGNhbGModmFyKC0tZHYtYm9yZGVyLXJhZGl1cykgLyAyKTtcbn1cbi5kb2Nrdmlldy10aGVtZS1saWdodC1zcGFjZWQgLmR2LWdyb3VwdmlldyAuZHYtY29udGVudC1jb250YWluZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1iYWNrZ3JvdW5kLWNvbG9yKTtcbn1cbi5kb2Nrdmlldy10aGVtZS1saWdodC1zcGFjZWQgLmR2LXJlc2l6ZS1jb250YWluZXIgLmR2LWdyb3VwdmlldyB7XG4gIGJvcmRlcjogMnB4IHNvbGlkIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4xKTtcbn1cbi5kdi1kcm9wLXRhcmdldC1jb250YWluZXIge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHotaW5kZXg6IDk5OTk7XG4gIHRvcDogMHB4O1xuICBsZWZ0OiAwcHg7XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICAtLWR2LXRyYW5zaXRpb24tZHVyYXRpb246IDMwMG1zO1xufVxuLmR2LWRyb3AtdGFyZ2V0LWNvbnRhaW5lciAuZHYtZHJvcC10YXJnZXQtYW5jaG9yIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBib3JkZXI6IHZhcigtLWR2LWRyYWctb3Zlci1ib3JkZXIpO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kdi1kcmFnLW92ZXItYmFja2dyb3VuZC1jb2xvcik7XG4gIG9wYWNpdHk6IDE7XG4gIC8qIEdQVSBvcHRpbWl6YXRpb25zICovXG4gIHdpbGwtY2hhbmdlOiB0cmFuc2Zvcm0sIG9wYWNpdHk7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XG4gIGJhY2tmYWNlLXZpc2liaWxpdHk6IGhpZGRlbjtcbiAgY29udGFpbjogbGF5b3V0IHBhaW50O1xuICB0cmFuc2l0aW9uOiBvcGFjaXR5IHZhcigtLWR2LXRyYW5zaXRpb24tZHVyYXRpb24pIGVhc2UtaW4sIHRyYW5zZm9ybSB2YXIoLS1kdi10cmFuc2l0aW9uLWR1cmF0aW9uKSBlYXNlLW91dDtcbn1cbi5kdi1kcm9wLXRhcmdldCB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgLS1kdi10cmFuc2l0aW9uLWR1cmF0aW9uOiA3MG1zO1xufVxuLmR2LWRyb3AtdGFyZ2V0ID4gLmR2LWRyb3AtdGFyZ2V0LWRyb3B6b25lIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBsZWZ0OiAwcHg7XG4gIHRvcDogMHB4O1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMDAlO1xuICB6LWluZGV4OiAxMDAwO1xuICBwb2ludGVyLWV2ZW50czogbm9uZTtcbn1cbi5kdi1kcm9wLXRhcmdldCA+IC5kdi1kcm9wLXRhcmdldC1kcm9wem9uZSA+IC5kdi1kcm9wLXRhcmdldC1zZWxlY3Rpb24ge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG4gIGJvcmRlcjogdmFyKC0tZHYtZHJhZy1vdmVyLWJvcmRlcik7XG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWR2LWRyYWctb3Zlci1iYWNrZ3JvdW5kLWNvbG9yKTtcbiAgdHJhbnNpdGlvbjogdG9wIHZhcigtLWR2LXRyYW5zaXRpb24tZHVyYXRpb24pIGVhc2Utb3V0LCBsZWZ0IHZhcigtLWR2LXRyYW5zaXRpb24tZHVyYXRpb24pIGVhc2Utb3V0LCB3aWR0aCB2YXIoLS1kdi10cmFuc2l0aW9uLWR1cmF0aW9uKSBlYXNlLW91dCwgaGVpZ2h0IHZhcigtLWR2LXRyYW5zaXRpb24tZHVyYXRpb24pIGVhc2Utb3V0LCBvcGFjaXR5IHZhcigtLWR2LXRyYW5zaXRpb24tZHVyYXRpb24pIGVhc2Utb3V0O1xuICB3aWxsLWNoYW5nZTogdHJhbnNmb3JtO1xuICBwb2ludGVyLWV2ZW50czogbm9uZTtcbn1cbi5kdi1kcm9wLXRhcmdldCA+IC5kdi1kcm9wLXRhcmdldC1kcm9wem9uZSA+IC5kdi1kcm9wLXRhcmdldC1zZWxlY3Rpb24uZHYtZHJvcC10YXJnZXQtdG9wLmR2LWRyb3AtdGFyZ2V0LXNtYWxsLXZlcnRpY2FsIHtcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkIHZhcigtLWR2LWRyYWctb3Zlci1ib3JkZXItY29sb3IpO1xufVxuLmR2LWRyb3AtdGFyZ2V0ID4gLmR2LWRyb3AtdGFyZ2V0LWRyb3B6b25lID4gLmR2LWRyb3AtdGFyZ2V0LXNlbGVjdGlvbi5kdi1kcm9wLXRhcmdldC1ib3R0b20uZHYtZHJvcC10YXJnZXQtc21hbGwtdmVydGljYWwge1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgdmFyKC0tZHYtZHJhZy1vdmVyLWJvcmRlci1jb2xvcik7XG59XG4uZHYtZHJvcC10YXJnZXQgPiAuZHYtZHJvcC10YXJnZXQtZHJvcHpvbmUgPiAuZHYtZHJvcC10YXJnZXQtc2VsZWN0aW9uLmR2LWRyb3AtdGFyZ2V0LWxlZnQuZHYtZHJvcC10YXJnZXQtc21hbGwtaG9yaXpvbnRhbCB7XG4gIGJvcmRlci1sZWZ0OiAxcHggc29saWQgdmFyKC0tZHYtZHJhZy1vdmVyLWJvcmRlci1jb2xvcik7XG59XG4uZHYtZHJvcC10YXJnZXQgPiAuZHYtZHJvcC10YXJnZXQtZHJvcHpvbmUgPiAuZHYtZHJvcC10YXJnZXQtc2VsZWN0aW9uLmR2LWRyb3AtdGFyZ2V0LXJpZ2h0LmR2LWRyb3AtdGFyZ2V0LXNtYWxsLWhvcml6b250YWwge1xuICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCB2YXIoLS1kdi1kcmFnLW92ZXItYm9yZGVyLWNvbG9yKTtcbn1cbi5kdi1kb2NrdmlldyB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZHYtZ3JvdXAtdmlldy1iYWNrZ3JvdW5kLWNvbG9yKTtcbiAgY29udGFpbjogbGF5b3V0O1xufVxuLmR2LWRvY2t2aWV3IC5kdi13YXRlcm1hcmstY29udGFpbmVyIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDBweDtcbiAgbGVmdDogMHB4O1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMDAlO1xuICB6LWluZGV4OiAxO1xufVxuLmR2LWRvY2t2aWV3IC5kdi1vdmVybGF5LXJlbmRlci1jb250YWluZXIge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG5cbi5kdi1ncm91cHZpZXcuZHYtYWN0aXZlLWdyb3VwID4gLmR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyIC5kdi10YWJzLWNvbnRhaW5lciA+IC5kdi10YWIuZHYtYWN0aXZlLXRhYiB7XG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcik7XG4gIGNvbG9yOiB2YXIoLS1kdi1hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWNvbG9yKTtcbn1cbi5kdi1ncm91cHZpZXcuZHYtYWN0aXZlLWdyb3VwID4gLmR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyIC5kdi10YWJzLWNvbnRhaW5lciA+IC5kdi10YWIuZHYtaW5hY3RpdmUtdGFiIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZHYtYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3IpO1xuICBjb2xvcjogdmFyKC0tZHYtYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWNvbG9yKTtcbn1cbi5kdi1ncm91cHZpZXcuZHYtaW5hY3RpdmUtZ3JvdXAgPiAuZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXIgLmR2LXRhYnMtY29udGFpbmVyID4gLmR2LXRhYi5kdi1hY3RpdmUtdGFiIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZHYtaW5hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3IpO1xuICBjb2xvcjogdmFyKC0tZHYtaW5hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWNvbG9yKTtcbn1cbi5kdi1ncm91cHZpZXcuZHYtaW5hY3RpdmUtZ3JvdXAgPiAuZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXIgLmR2LXRhYnMtY29udGFpbmVyID4gLmR2LXRhYi5kdi1pbmFjdGl2ZS10YWIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kdi1pbmFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yKTtcbiAgY29sb3I6IHZhcigtLWR2LWluYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWNvbG9yKTtcbn1cblxuLyoqXG4gKiB3aGVuIGEgdGFiIGlzIGRyYWdnZWQgd2UgbG9zZSB0aGUgYWJvdmUgc3R5bGluZ3MgYmVjYXVzZSB0aGV5IGFyZSBjb25kaXRpb25hbCBvbiBwYXJlbnQgZWxlbWVudHNcbiAqIHRoZXJlZm9yZSB3ZSBhbHNvIHNldCBzb21lIHN0eWxpbmdzIGZvciB0aGUgZHJhZ2dpbmcgZXZlbnRcbiAqKi9cbi5kdi10YWIuZHYtdGFiLWRyYWdnaW5nIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZHYtYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yKTtcbiAgY29sb3I6IHZhcigtLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItY29sb3IpO1xufVxuLmR2LWdyb3VwdmlldyB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGhlaWdodDogMTAwJTtcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZHYtZ3JvdXAtdmlldy1iYWNrZ3JvdW5kLWNvbG9yKTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cbi5kdi1ncm91cHZpZXc6Zm9jdXMge1xuICBvdXRsaW5lOiBub25lO1xufVxuLmR2LWdyb3VwdmlldyA+IC5kdi1jb250ZW50LWNvbnRhaW5lciB7XG4gIGZsZXgtZ3JvdzogMTtcbiAgbWluLWhlaWdodDogMDtcbiAgb3V0bGluZTogbm9uZTtcbn1cbi5kdi1yb290LXdyYXBwZXIge1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMDAlO1xufVxuLmR2LWdyaWQtdmlldyxcbi5kdi1icmFuY2gtbm9kZSB7XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG59XG4uZHYtZGVidWcgLmR2LXJlc2l6ZS1jb250YWluZXIgLmR2LXJlc2l6ZS1oYW5kbGUtdG9wIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogcmVkO1xufVxuLmR2LWRlYnVnIC5kdi1yZXNpemUtY29udGFpbmVyIC5kdi1yZXNpemUtaGFuZGxlLWJvdHRvbSB7XG4gIGJhY2tncm91bmQtY29sb3I6IGdyZWVuO1xufVxuLmR2LWRlYnVnIC5kdi1yZXNpemUtY29udGFpbmVyIC5kdi1yZXNpemUtaGFuZGxlLWxlZnQge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB5ZWxsb3c7XG59XG4uZHYtZGVidWcgLmR2LXJlc2l6ZS1jb250YWluZXIgLmR2LXJlc2l6ZS1oYW5kbGUtcmlnaHQge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiBibHVlO1xufVxuLmR2LWRlYnVnIC5kdi1yZXNpemUtY29udGFpbmVyIC5kdi1yZXNpemUtaGFuZGxlLXRvcGxlZnQsXG4uZHYtZGVidWcgLmR2LXJlc2l6ZS1jb250YWluZXIgLmR2LXJlc2l6ZS1oYW5kbGUtdG9wcmlnaHQsXG4uZHYtZGVidWcgLmR2LXJlc2l6ZS1jb250YWluZXIgLmR2LXJlc2l6ZS1oYW5kbGUtYm90dG9tbGVmdCxcbi5kdi1kZWJ1ZyAuZHYtcmVzaXplLWNvbnRhaW5lciAuZHYtcmVzaXplLWhhbmRsZS1ib3R0b21yaWdodCB7XG4gIGJhY2tncm91bmQtY29sb3I6IGN5YW47XG59XG5cbi5kdi1yZXNpemUtY29udGFpbmVyIHtcbiAgLS1kdi1vdmVybGF5LXotaW5kZXg6IHZhcigtLWR2LW92ZXJsYXktei1pbmRleCwgOTk5KTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB6LWluZGV4OiBjYWxjKHZhcigtLWR2LW92ZXJsYXktei1pbmRleCkgLSAyKTtcbiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tZHYtdGFiLWRpdmlkZXItY29sb3IpO1xuICBib3gtc2hhZG93OiB2YXIoLS1kdi1mbG9hdGluZy1ib3gtc2hhZG93KTtcbiAgLyogR1BVIG9wdGltaXphdGlvbnMgZm9yIGZsb2F0aW5nIGdyb3VwIG1vdmVtZW50ICovXG4gIHdpbGwtY2hhbmdlOiB0cmFuc2Zvcm0sIG9wYWNpdHk7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XG4gIGJhY2tmYWNlLXZpc2liaWxpdHk6IGhpZGRlbjtcbn1cbi5kdi1yZXNpemUtY29udGFpbmVyLmR2LWhpZGRlbiB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG4uZHYtcmVzaXplLWNvbnRhaW5lci5kdi1yZXNpemUtY29udGFpbmVyLWRyYWdnaW5nIHtcbiAgb3BhY2l0eTogMC41O1xuICAvKiBFbmhhbmNlZCBHUFUgYWNjZWxlcmF0aW9uIGR1cmluZyBkcmFnICovXG4gIHdpbGwtY2hhbmdlOiB0cmFuc2Zvcm0sIG9wYWNpdHk7XG59XG4uZHYtcmVzaXplLWNvbnRhaW5lciAuZHYtcmVzaXplLWhhbmRsZS10b3Age1xuICBoZWlnaHQ6IDRweDtcbiAgd2lkdGg6IGNhbGMoMTAwJSAtIDhweCk7XG4gIGxlZnQ6IDRweDtcbiAgdG9wOiAtMnB4O1xuICB6LWluZGV4OiB2YXIoLS1kdi1vdmVybGF5LXotaW5kZXgpO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGN1cnNvcjogbnMtcmVzaXplO1xufVxuLmR2LXJlc2l6ZS1jb250YWluZXIgLmR2LXJlc2l6ZS1oYW5kbGUtYm90dG9tIHtcbiAgaGVpZ2h0OiA0cHg7XG4gIHdpZHRoOiBjYWxjKDEwMCUgLSA4cHgpO1xuICBsZWZ0OiA0cHg7XG4gIGJvdHRvbTogLTJweDtcbiAgei1pbmRleDogdmFyKC0tZHYtb3ZlcmxheS16LWluZGV4KTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBjdXJzb3I6IG5zLXJlc2l6ZTtcbn1cbi5kdi1yZXNpemUtY29udGFpbmVyIC5kdi1yZXNpemUtaGFuZGxlLWxlZnQge1xuICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDhweCk7XG4gIHdpZHRoOiA0cHg7XG4gIGxlZnQ6IC0ycHg7XG4gIHRvcDogNHB4O1xuICB6LWluZGV4OiB2YXIoLS1kdi1vdmVybGF5LXotaW5kZXgpO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGN1cnNvcjogZXctcmVzaXplO1xufVxuLmR2LXJlc2l6ZS1jb250YWluZXIgLmR2LXJlc2l6ZS1oYW5kbGUtcmlnaHQge1xuICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDhweCk7XG4gIHdpZHRoOiA0cHg7XG4gIHJpZ2h0OiAtMnB4O1xuICB0b3A6IDRweDtcbiAgei1pbmRleDogdmFyKC0tZHYtb3ZlcmxheS16LWluZGV4KTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBjdXJzb3I6IGV3LXJlc2l6ZTtcbn1cbi5kdi1yZXNpemUtY29udGFpbmVyIC5kdi1yZXNpemUtaGFuZGxlLXRvcGxlZnQge1xuICBoZWlnaHQ6IDRweDtcbiAgd2lkdGg6IDRweDtcbiAgdG9wOiAtMnB4O1xuICBsZWZ0OiAtMnB4O1xuICB6LWluZGV4OiB2YXIoLS1kdi1vdmVybGF5LXotaW5kZXgpO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGN1cnNvcjogbnctcmVzaXplO1xufVxuLmR2LXJlc2l6ZS1jb250YWluZXIgLmR2LXJlc2l6ZS1oYW5kbGUtdG9wcmlnaHQge1xuICBoZWlnaHQ6IDRweDtcbiAgd2lkdGg6IDRweDtcbiAgcmlnaHQ6IC0ycHg7XG4gIHRvcDogLTJweDtcbiAgei1pbmRleDogdmFyKC0tZHYtb3ZlcmxheS16LWluZGV4KTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBjdXJzb3I6IG5lLXJlc2l6ZTtcbn1cbi5kdi1yZXNpemUtY29udGFpbmVyIC5kdi1yZXNpemUtaGFuZGxlLWJvdHRvbWxlZnQge1xuICBoZWlnaHQ6IDRweDtcbiAgd2lkdGg6IDRweDtcbiAgbGVmdDogLTJweDtcbiAgYm90dG9tOiAtMnB4O1xuICB6LWluZGV4OiB2YXIoLS1kdi1vdmVybGF5LXotaW5kZXgpO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGN1cnNvcjogc3ctcmVzaXplO1xufVxuLmR2LXJlc2l6ZS1jb250YWluZXIgLmR2LXJlc2l6ZS1oYW5kbGUtYm90dG9tcmlnaHQge1xuICBoZWlnaHQ6IDRweDtcbiAgd2lkdGg6IDRweDtcbiAgcmlnaHQ6IC0ycHg7XG4gIGJvdHRvbTogLTJweDtcbiAgei1pbmRleDogdmFyKC0tZHYtb3ZlcmxheS16LWluZGV4KTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBjdXJzb3I6IHNlLXJlc2l6ZTtcbn1cbi5kdi1yZW5kZXItb3ZlcmxheSB7XG4gIC0tZHYtb3ZlcmxheS16LWluZGV4OiB2YXIoLS1kdi1vdmVybGF5LXotaW5kZXgsIDk5OSk7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgei1pbmRleDogMTtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbiAgY29udGFpbjogbGF5b3V0IHBhaW50O1xuICBpc29sYXRpb246IGlzb2xhdGU7XG4gIC8qIEdQVSBvcHRpbWl6YXRpb25zICovXG4gIHdpbGwtY2hhbmdlOiB0cmFuc2Zvcm07XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XG4gIGJhY2tmYWNlLXZpc2liaWxpdHk6IGhpZGRlbjtcbn1cbi5kdi1yZW5kZXItb3ZlcmxheS5kdi1yZW5kZXItb3ZlcmxheS1mbG9hdCB7XG4gIHotaW5kZXg6IGNhbGModmFyKC0tZHYtb3ZlcmxheS16LWluZGV4KSAtIDEpO1xufVxuXG4uZHYtZGVidWcgLmR2LXJlbmRlci1vdmVybGF5IHtcbiAgb3V0bGluZTogMXB4IHNvbGlkIHJlZDtcbiAgb3V0bGluZS1vZmZzZXQ6IC0xO1xufVxuLmR2LXBhbmUtY29udGFpbmVyIHtcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogMTAwJTtcbn1cbi5kdi1wYW5lLWNvbnRhaW5lci5kdi1hbmltYXRlZCAuZHYtdmlldyB7XG4gIC8qIEdQVSBvcHRpbWl6YXRpb25zIGZvciBzbW9vdGggcGFuZSBhbmltYXRpb25zICovXG4gIHdpbGwtY2hhbmdlOiB0cmFuc2Zvcm07XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XG4gIGJhY2tmYWNlLXZpc2liaWxpdHk6IGhpZGRlbjtcbiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuMTVzIGVhc2Utb3V0O1xufVxuLmR2LXBhbmUtY29udGFpbmVyIC5kdi12aWV3IHtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgcGFkZGluZzogMHB4ICFpbXBvcnRhbnQ7XG59XG4uZHYtcGFuZS1jb250YWluZXIgLmR2LXZpZXc6bm90KDpmaXJzdC1jaGlsZCk6OmJlZm9yZSB7XG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7XG59XG4uZHYtcGFuZS1jb250YWluZXIgLmR2LXZpZXc6bm90KDpmaXJzdC1jaGlsZCkgLmR2LXBhbmUgPiAuZHYtcGFuZS1oZWFkZXIge1xuICBib3JkZXItdG9wOiAxcHggc29saWQgdmFyKC0tZHYtcGFuZXZpZXctaGVhZGVyLWJvcmRlci1jb2xvcik7XG59XG4uZHYtcGFuZS1jb250YWluZXIgLmR2LXZpZXcgLmR2LWRlZmF1bHQtaGVhZGVyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZHYtZ3JvdXAtdmlldy1iYWNrZ3JvdW5kLWNvbG9yKTtcbiAgY29sb3I6IHZhcigtLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItY29sb3IpO1xuICBkaXNwbGF5OiBmbGV4O1xuICBwYWRkaW5nOiAwcHggOHB4O1xuICBjdXJzb3I6IHBvaW50ZXI7XG59XG4uZHYtcGFuZS1jb250YWluZXIgLmR2LXZpZXcgLmR2LWRlZmF1bHQtaGVhZGVyIC5kdi1wYW5lLWhlYWRlci1pY29uIHtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG59XG4uZHYtcGFuZS1jb250YWluZXIgLmR2LXZpZXcgLmR2LWRlZmF1bHQtaGVhZGVyID4gc3BhbiB7XG4gIHBhZGRpbmctbGVmdDogOHB4O1xuICBmbGV4LWdyb3c6IDE7XG59XG4uZHYtcGFuZS1jb250YWluZXI6Zmlyc3Qtb2YtdHlwZSA+IC5kdi1wYW5lID4gLmR2LXBhbmUtaGVhZGVyIHtcbiAgYm9yZGVyLXRvcDogbm9uZSAhaW1wb3J0YW50O1xufVxuLmR2LXBhbmUtY29udGFpbmVyIC5kdi1wYW5lIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgaGVpZ2h0OiAxMDAlO1xufVxuLmR2LXBhbmUtY29udGFpbmVyIC5kdi1wYW5lIC5kdi1wYW5lLWhlYWRlciB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIHVzZXItc2VsZWN0OiBub25lO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIG91dGxpbmU6IG5vbmU7XG59XG4uZHYtcGFuZS1jb250YWluZXIgLmR2LXBhbmUgLmR2LXBhbmUtaGVhZGVyLmR2LXBhbmUtZHJhZ2dhYmxlIHtcbiAgY3Vyc29yOiBwb2ludGVyO1xufVxuLmR2LXBhbmUtY29udGFpbmVyIC5kdi1wYW5lIC5kdi1wYW5lLWhlYWRlcjpmb2N1czpiZWZvcmUsIC5kdi1wYW5lLWNvbnRhaW5lciAuZHYtcGFuZSAuZHYtcGFuZS1oZWFkZXI6Zm9jdXMtd2l0aGluOmJlZm9yZSB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICB6LWluZGV4OiA1O1xuICBjb250ZW50OiBcIlwiO1xuICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgb3V0bGluZTogMXB4IHNvbGlkO1xuICBvdXRsaW5lLXdpZHRoOiAtMXB4O1xuICBvdXRsaW5lLXN0eWxlOiBzb2xpZDtcbiAgb3V0bGluZS1vZmZzZXQ6IC0xcHg7XG4gIG91dGxpbmUtY29sb3I6IHZhcigtLWR2LXBhbmV2aWV3LWFjdGl2ZS1vdXRsaW5lLWNvbG9yKTtcbn1cbi5kdi1wYW5lLWNvbnRhaW5lciAuZHYtcGFuZSAuZHYtcGFuZS1ib2R5IHtcbiAgb3ZlcmZsb3cteTogYXV0bztcbiAgb3ZlcmZsb3cteDogaGlkZGVuO1xuICBmbGV4LWdyb3c6IDE7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgb3V0bGluZTogbm9uZTtcbn1cbi5kdi1wYW5lLWNvbnRhaW5lciAuZHYtcGFuZSAuZHYtcGFuZS1ib2R5OmZvY3VzOmJlZm9yZSwgLmR2LXBhbmUtY29udGFpbmVyIC5kdi1wYW5lIC5kdi1wYW5lLWJvZHk6Zm9jdXMtd2l0aGluOmJlZm9yZSB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICB6LWluZGV4OiA1O1xuICBjb250ZW50OiBcIlwiO1xuICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgb3V0bGluZTogMXB4IHNvbGlkO1xuICBvdXRsaW5lLXdpZHRoOiAtMXB4O1xuICBvdXRsaW5lLXN0eWxlOiBzb2xpZDtcbiAgb3V0bGluZS1vZmZzZXQ6IC0xcHg7XG4gIG91dGxpbmUtY29sb3I6IHZhcigtLWR2LXBhbmV2aWV3LWFjdGl2ZS1vdXRsaW5lLWNvbG9yKTtcbn1cbi5kdi1kZWJ1ZyAuZHYtc3BsaXQtdmlldy1jb250YWluZXIgLmR2LXNhc2gtY29udGFpbmVyIC5kdi1zYXNoLmR2LWVuYWJsZWQge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcbn1cbi5kdi1kZWJ1ZyAuZHYtc3BsaXQtdmlldy1jb250YWluZXIgLmR2LXNhc2gtY29udGFpbmVyIC5kdi1zYXNoLmR2LWRpc2FibGVkIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogb3JhbmdlO1xufVxuLmR2LWRlYnVnIC5kdi1zcGxpdC12aWV3LWNvbnRhaW5lciAuZHYtc2FzaC1jb250YWluZXIgLmR2LXNhc2guZHYtbWF4aW11bSB7XG4gIGJhY2tncm91bmQtY29sb3I6IGdyZWVuO1xufVxuLmR2LWRlYnVnIC5kdi1zcGxpdC12aWV3LWNvbnRhaW5lciAuZHYtc2FzaC1jb250YWluZXIgLmR2LXNhc2guZHYtbWluaW11bSB7XG4gIGJhY2tncm91bmQtY29sb3I6IHJlZDtcbn1cblxuLmR2LXNwbGl0LXZpZXctY29udGFpbmVyIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMDAlO1xufVxuLmR2LXNwbGl0LXZpZXctY29udGFpbmVyLmR2LXNwbGl0dmlldy1kaXNhYmxlZCA+IC5kdi1zYXNoLWNvbnRhaW5lciA+IC5kdi1zYXNoIHtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG59XG4uZHYtc3BsaXQtdmlldy1jb250YWluZXIuZHYtYW5pbWF0aW9uIC5kdi12aWV3LFxuLmR2LXNwbGl0LXZpZXctY29udGFpbmVyLmR2LWFuaW1hdGlvbiAuZHYtc2FzaCB7XG4gIC8qIEdQVSBvcHRpbWl6YXRpb25zIGZvciBzbW9vdGggYW5pbWF0aW9ucyAqL1xuICB3aWxsLWNoYW5nZTogdHJhbnNmb3JtO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xuICBiYWNrZmFjZS12aXNpYmlsaXR5OiBoaWRkZW47XG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjE1cyBlYXNlLW91dDtcbn1cbi5kdi1zcGxpdC12aWV3LWNvbnRhaW5lci5kdi1ob3Jpem9udGFsIHtcbiAgaGVpZ2h0OiAxMDAlO1xufVxuLmR2LXNwbGl0LXZpZXctY29udGFpbmVyLmR2LWhvcml6b250YWwgPiAuZHYtc2FzaC1jb250YWluZXIgPiAuZHYtc2FzaCB7XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDRweDtcbn1cbi5kdi1zcGxpdC12aWV3LWNvbnRhaW5lci5kdi1ob3Jpem9udGFsID4gLmR2LXNhc2gtY29udGFpbmVyID4gLmR2LXNhc2guZHYtZW5hYmxlZCB7XG4gIGN1cnNvcjogZXctcmVzaXplO1xufVxuLmR2LXNwbGl0LXZpZXctY29udGFpbmVyLmR2LWhvcml6b250YWwgPiAuZHYtc2FzaC1jb250YWluZXIgPiAuZHYtc2FzaC5kdi1kaXNhYmxlZCB7XG4gIGN1cnNvcjogZGVmYXVsdDtcbn1cbi5kdi1zcGxpdC12aWV3LWNvbnRhaW5lci5kdi1ob3Jpem9udGFsID4gLmR2LXNhc2gtY29udGFpbmVyID4gLmR2LXNhc2guZHYtbWF4aW11bSB7XG4gIGN1cnNvcjogdy1yZXNpemU7XG59XG4uZHYtc3BsaXQtdmlldy1jb250YWluZXIuZHYtaG9yaXpvbnRhbCA+IC5kdi1zYXNoLWNvbnRhaW5lciA+IC5kdi1zYXNoLmR2LW1pbmltdW0ge1xuICBjdXJzb3I6IGUtcmVzaXplO1xufVxuLmR2LXNwbGl0LXZpZXctY29udGFpbmVyLmR2LWhvcml6b250YWwgPiAuZHYtdmlldy1jb250YWluZXIgPiAuZHYtdmlldzpub3QoOmZpcnN0LWNoaWxkKTo6YmVmb3JlIHtcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogMXB4O1xufVxuLmR2LXNwbGl0LXZpZXctY29udGFpbmVyLmR2LXZlcnRpY2FsIHtcbiAgd2lkdGg6IDEwMCU7XG59XG4uZHYtc3BsaXQtdmlldy1jb250YWluZXIuZHYtdmVydGljYWwgPiAuZHYtc2FzaC1jb250YWluZXIgPiAuZHYtc2FzaCB7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDRweDtcbn1cbi5kdi1zcGxpdC12aWV3LWNvbnRhaW5lci5kdi12ZXJ0aWNhbCA+IC5kdi1zYXNoLWNvbnRhaW5lciA+IC5kdi1zYXNoLmR2LWVuYWJsZWQge1xuICBjdXJzb3I6IG5zLXJlc2l6ZTtcbn1cbi5kdi1zcGxpdC12aWV3LWNvbnRhaW5lci5kdi12ZXJ0aWNhbCA+IC5kdi1zYXNoLWNvbnRhaW5lciA+IC5kdi1zYXNoLmR2LWRpc2FibGVkIHtcbiAgY3Vyc29yOiBkZWZhdWx0O1xufVxuLmR2LXNwbGl0LXZpZXctY29udGFpbmVyLmR2LXZlcnRpY2FsID4gLmR2LXNhc2gtY29udGFpbmVyID4gLmR2LXNhc2guZHYtbWF4aW11bSB7XG4gIGN1cnNvcjogbi1yZXNpemU7XG59XG4uZHYtc3BsaXQtdmlldy1jb250YWluZXIuZHYtdmVydGljYWwgPiAuZHYtc2FzaC1jb250YWluZXIgPiAuZHYtc2FzaC5kdi1taW5pbXVtIHtcbiAgY3Vyc29yOiBzLXJlc2l6ZTtcbn1cbi5kdi1zcGxpdC12aWV3LWNvbnRhaW5lci5kdi12ZXJ0aWNhbCA+IC5kdi12aWV3LWNvbnRhaW5lciA+IC5kdi12aWV3IHtcbiAgd2lkdGg6IDEwMCU7XG59XG4uZHYtc3BsaXQtdmlldy1jb250YWluZXIuZHYtdmVydGljYWwgPiAuZHYtdmlldy1jb250YWluZXIgPiAuZHYtdmlldzpub3QoOmZpcnN0LWNoaWxkKTo6YmVmb3JlIHtcbiAgaGVpZ2h0OiAxcHg7XG4gIHdpZHRoOiAxMDAlO1xufVxuLmR2LXNwbGl0LXZpZXctY29udGFpbmVyIC5kdi1zYXNoLWNvbnRhaW5lciB7XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbn1cbi5kdi1zcGxpdC12aWV3LWNvbnRhaW5lciAuZHYtc2FzaC1jb250YWluZXIgLmR2LXNhc2gge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHotaW5kZXg6IDk5O1xuICBvdXRsaW5lOiBub25lO1xuICB1c2VyLXNlbGVjdDogbm9uZTtcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcbiAgLW1vei11c2VyLXNlbGVjdDogbm9uZTtcbiAgLW1zLXVzZXItc2VsZWN0OiBub25lO1xuICB0b3VjaC1hY3Rpb246IG5vbmU7XG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWR2LXNhc2gtY29sb3IsIHRyYW5zcGFyZW50KTtcbn1cbi5kdi1zcGxpdC12aWV3LWNvbnRhaW5lciAuZHYtc2FzaC1jb250YWluZXIgLmR2LXNhc2g6bm90KC5kaXNhYmxlZCk6YWN0aXZlLCAuZHYtc3BsaXQtdmlldy1jb250YWluZXIgLmR2LXNhc2gtY29udGFpbmVyIC5kdi1zYXNoOm5vdCguZGlzYWJsZWQpOmhvdmVyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZHYtYWN0aXZlLXNhc2gtY29sb3IsIHRyYW5zcGFyZW50KTtcbiAgdHJhbnNpdGlvbi1wcm9wZXJ0eTogYmFja2dyb3VuZC1jb2xvcjtcbiAgdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2UtaW4tb3V0O1xuICB0cmFuc2l0aW9uLWR1cmF0aW9uOiB2YXIoLS1kdi1hY3RpdmUtc2FzaC10cmFuc2l0aW9uLWR1cmF0aW9uLCAwLjFzKTtcbiAgdHJhbnNpdGlvbi1kZWxheTogdmFyKC0tZHYtYWN0aXZlLXNhc2gtdHJhbnNpdGlvbi1kZWxheSwgMC41cyk7XG59XG4uZHYtc3BsaXQtdmlldy1jb250YWluZXIgLmR2LXZpZXctY29udGFpbmVyIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMDAlO1xufVxuLmR2LXNwbGl0LXZpZXctY29udGFpbmVyIC5kdi12aWV3LWNvbnRhaW5lciAuZHYtdmlldyB7XG4gIGhlaWdodDogMTAwJTtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgb3ZlcmZsb3c6IGF1dG87XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbn1cbi5kdi1zcGxpdC12aWV3LWNvbnRhaW5lci5kdi1zZXBhcmF0b3ItYm9yZGVyIC5kdi12aWV3Om5vdCg6Zmlyc3QtY2hpbGQpOjpiZWZvcmUge1xuICBjb250ZW50OiBcIiBcIjtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDA7XG4gIGxlZnQ6IDA7XG4gIHotaW5kZXg6IDU7XG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kdi1zZXBhcmF0b3ItYm9yZGVyKTtcbn1cbi5kdi1kcmFnZ2VkIHtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwcHgsIDBweCwgMHB4KTsgLyogZm9yY2VzIHRhYiB0byBiZSBkcmF3biBvbiBhIHNlcGFyYXRlIGxheWVyIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC92c2NvZGUvaXNzdWVzLzE4NzMzKSAqL1xufVxuXG4uZHYtdGFiIHtcbiAgZmxleC1zaHJpbms6IDA7XG59XG4uZHYtdGFiOmZvY3VzLXdpdGhpbiwgLmR2LXRhYjpmb2N1cyB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbn1cbi5kdi10YWI6Zm9jdXMtd2l0aGluOjphZnRlciwgLmR2LXRhYjpmb2N1czo6YWZ0ZXIge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGNvbnRlbnQ6IFwiXCI7XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG4gIHRvcDogMHB4O1xuICBsZWZ0OiAwcHg7XG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICBvdXRsaW5lOiAxcHggc29saWQgdmFyKC0tZHYtdGFiLWRpdmlkZXItY29sb3IpICFpbXBvcnRhbnQ7XG4gIG91dGxpbmUtb2Zmc2V0OiAtMXB4O1xuICB6LWluZGV4OiA1O1xufVxuLmR2LXRhYi5kdi10YWItZHJhZ2dpbmcgLmR2LWRlZmF1bHQtdGFiLWFjdGlvbiB7XG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItY29sb3IpO1xufVxuLmR2LXRhYi5kdi1hY3RpdmUtdGFiIC5kdi1kZWZhdWx0LXRhYiAuZHYtZGVmYXVsdC10YWItYWN0aW9uIHtcbiAgdmlzaWJpbGl0eTogdmlzaWJsZTtcbn1cbi5kdi10YWIuZHYtaW5hY3RpdmUtdGFiIC5kdi1kZWZhdWx0LXRhYiAuZHYtZGVmYXVsdC10YWItYWN0aW9uIHtcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xufVxuLmR2LXRhYi5kdi1pbmFjdGl2ZS10YWIgLmR2LWRlZmF1bHQtdGFiOmhvdmVyIC5kdi1kZWZhdWx0LXRhYi1hY3Rpb24ge1xuICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xufVxuLmR2LXRhYiAuZHYtZGVmYXVsdC10YWIge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGhlaWdodDogMTAwJTtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG59XG4uZHYtdGFiIC5kdi1kZWZhdWx0LXRhYiAuZHYtZGVmYXVsdC10YWItY29udGVudCB7XG4gIGZsZXgtZ3JvdzogMTtcbiAgbWFyZ2luLXJpZ2h0OiA0cHg7XG59XG4uZHYtdGFiIC5kdi1kZWZhdWx0LXRhYiAuZHYtZGVmYXVsdC10YWItYWN0aW9uIHtcbiAgcGFkZGluZzogNHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbn1cbi5kdi10YWIgLmR2LWRlZmF1bHQtdGFiIC5kdi1kZWZhdWx0LXRhYi1hY3Rpb246aG92ZXIge1xuICBib3JkZXItcmFkaXVzOiAycHg7XG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWR2LWljb24taG92ZXItYmFja2dyb3VuZC1jb2xvcik7XG59XG4uZHYtdGFicy1vdmVyZmxvdy1kcm9wZG93bi1kZWZhdWx0IHtcbiAgaGVpZ2h0OiAxMDAlO1xuICBjb2xvcjogdmFyKC0tZHYtYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWNvbG9yKTtcbiAgbWFyZ2luOiB2YXIoLS1kdi10YWItbWFyZ2luKTtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZmxleC1zaHJpbms6IDA7XG4gIHBhZGRpbmc6IDAuMjVyZW0gMC41cmVtO1xuICBjdXJzb3I6IHBvaW50ZXI7XG59XG4uZHYtdGFicy1vdmVyZmxvdy1kcm9wZG93bi1kZWZhdWx0ID4gc3BhbiB7XG4gIHBhZGRpbmctbGVmdDogMC4yNXJlbTtcbn1cbi5kdi10YWJzLW92ZXJmbG93LWRyb3Bkb3duLWRlZmF1bHQgPiBzdmcge1xuICB0cmFuc2Zvcm06IHJvdGF0ZSg5MGRlZyk7XG59XG4uZHYtdGFicy1jb250YWluZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBoZWlnaHQ6IDEwMCU7XG4gIG92ZXJmbG93OiBhdXRvO1xuICBzY3JvbGxiYXItd2lkdGg6IHRoaW47XG4gIC8qIEdQVSBvcHRpbWl6YXRpb25zIGZvciBzbW9vdGggc2Nyb2xsaW5nICovXG4gIHdpbGwtY2hhbmdlOiBzY3JvbGwtcG9zaXRpb247XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XG4gIC8qIFRyYWNrICovXG4gIC8qIEhhbmRsZSAqL1xufVxuLmR2LXRhYnMtY29udGFpbmVyLmR2LWhvcml6b250YWwgLmR2LXRhYjpub3QoOmZpcnN0LWNoaWxkKTo6YmVmb3JlIHtcbiAgY29udGVudDogXCIgXCI7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICB6LWluZGV4OiA1O1xuICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZHYtdGFiLWRpdmlkZXItY29sb3IpO1xuICB3aWR0aDogMXB4O1xuICBoZWlnaHQ6IDEwMCU7XG59XG4uZHYtdGFicy1jb250YWluZXI6Oi13ZWJraXQtc2Nyb2xsYmFyIHtcbiAgaGVpZ2h0OiAzcHg7XG59XG4uZHYtdGFicy1jb250YWluZXI6Oi13ZWJraXQtc2Nyb2xsYmFyLXRyYWNrIHtcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG59XG4uZHYtdGFicy1jb250YWluZXI6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iIHtcbiAgYmFja2dyb3VuZDogdmFyKC0tZHYtdGFicy1jb250YWluZXItc2Nyb2xsYmFyLWNvbG9yKTtcbn1cblxuLmR2LXNjcm9sbGFibGUgPiAuZHYtdGFicy1jb250YWluZXIge1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuXG4uZHYtdGFiIHtcbiAgLXdlYmtpdC11c2VyLWRyYWc6IGVsZW1lbnQ7XG4gIG91dGxpbmU6IG5vbmU7XG4gIHBhZGRpbmc6IDAuMjVyZW0gMC41cmVtO1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgZm9udC1zaXplOiB2YXIoLS1kdi10YWItZm9udC1zaXplKTtcbiAgbWFyZ2luOiB2YXIoLS1kdi10YWItbWFyZ2luKTtcbn1cblxuLmR2LXRhYnMtb3ZlcmZsb3ctY29udGFpbmVyIHtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgaGVpZ2h0OiB1bnNldDtcbiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tZHYtdGFiLWRpdmlkZXItY29sb3IpO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kdi1ncm91cC12aWV3LWJhY2tncm91bmQtY29sb3IpO1xufVxuLmR2LXRhYnMtb3ZlcmZsb3ctY29udGFpbmVyIC5kdi10YWI6bm90KDpsYXN0LWNoaWxkKSB7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCB2YXIoLS1kdi10YWItZGl2aWRlci1jb2xvcik7XG59XG4uZHYtdGFicy1vdmVyZmxvdy1jb250YWluZXIgLmR2LWFjdGl2ZS10YWIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kdi1hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3IpO1xuICBjb2xvcjogdmFyKC0tZHYtYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1jb2xvcik7XG59XG4uZHYtdGFicy1vdmVyZmxvdy1jb250YWluZXIgLmR2LWluYWN0aXZlLXRhYiB7XG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWR2LWFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yKTtcbiAgY29sb3I6IHZhcigtLWR2LWFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1jb2xvcik7XG59XG4uZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1iYWNrZ3JvdW5kLWNvbG9yKTtcbiAgZmxleC1zaHJpbms6IDA7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIGhlaWdodDogdmFyKC0tZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXItaGVpZ2h0KTtcbiAgZm9udC1zaXplOiB2YXIoLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1mb250LXNpemUpO1xufVxuLmR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLmR2LXNpbmdsZS10YWIuZHYtZnVsbC13aWR0aC1zaW5nbGUtdGFiIC5kdi1zY3JvbGxhYmxlIHtcbiAgZmxleC1ncm93OiAxO1xufVxuLmR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLmR2LXNpbmdsZS10YWIuZHYtZnVsbC13aWR0aC1zaW5nbGUtdGFiIC5kdi10YWJzLWNvbnRhaW5lciB7XG4gIGZsZXgtZ3JvdzogMTtcbn1cbi5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci5kdi1zaW5nbGUtdGFiLmR2LWZ1bGwtd2lkdGgtc2luZ2xlLXRhYiAuZHYtdGFicy1jb250YWluZXIgLmR2LXRhYiB7XG4gIGZsZXgtZ3JvdzogMTtcbiAgcGFkZGluZzogMHB4O1xufVxuLmR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLmR2LXNpbmdsZS10YWIuZHYtZnVsbC13aWR0aC1zaW5nbGUtdGFiIC5kdi12b2lkLWNvbnRhaW5lciB7XG4gIGZsZXgtZ3JvdzogMDtcbn1cbi5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lciAuZHYtdm9pZC1jb250YWluZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWdyb3c6IDE7XG59XG4uZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXIgLmR2LXZvaWQtY29udGFpbmVyLmR2LWRyYWdnYWJsZSB7XG4gIGN1cnNvcjogZ3JhYjtcbn1cbi5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lciAuZHYtcmlnaHQtYWN0aW9ucy1jb250YWluZXIge1xuICBkaXNwbGF5OiBmbGV4O1xufVxuLmR2LXdhdGVybWFyayB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGhlaWdodDogMTAwJTtcbn1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9kb2Nrdmlldy1jb3JlL2Rpc3Qvc3R5bGVzL2RvY2t2aWV3LmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGtCQUFrQjtFQUNsQixnQkFBZ0I7QUFDbEI7QUFDQTtFQUNFLGtCQUFrQjtFQUNsQixXQUFXO0VBQ1gsU0FBUztFQUNULFdBQVc7RUFDWCxrQkFBa0I7RUFDbEIsNkJBQTZCO0VBQzdCLHNCQUFzQjtFQUN0Qix3Q0FBd0M7RUFDeEMsK0JBQStCO0VBQy9CLDJCQUEyQjtFQUMzQixxQ0FBcUM7RUFDckMsdUNBQXVDO0VBQ3ZDLHVCQUF1QjtFQUN2QixvQkFBb0I7QUFDdEI7QUFDQTtFQUNFLGlGQUFpRjtBQUNuRjtBQUNBO0VBQ0UscUJBQXFCO0VBQ3JCLGtCQUFrQjtFQUNsQixjQUFjO0VBQ2Qsb0JBQW9CO0VBQ3BCLGVBQWU7QUFDakI7QUFDQTtFQUNFLDhDQUE4QztFQUM5QywrQ0FBK0M7RUFDL0MsNENBQTRDO0VBQzVDLHNEQUFzRDtFQUN0RCx3Q0FBd0M7RUFDeEMseUNBQXlDO0VBQ3pDLHdEQUF3RDtFQUN4RCwrREFBK0Q7RUFDL0QseUJBQXlCO0VBQ3pCLDJCQUEyQjtFQUMzQix1QkFBdUI7RUFDdkIsa0JBQWtCO0VBQ2xCLDRCQUE0QjtFQUM1QixtQ0FBbUM7RUFDbkMsMENBQTBDO0VBQzFD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a0M7RUFDbEMsNEJBQTRCO0FBQzlCOztBQUVBO0VBQ0Usc0JBQXNCO0VBQ3RCLGFBQWE7RUFDYiw2Q0FBNkM7RUFDN0MsdURBQXVEO0FBQ3pEO0FBQ0E7RUFDRSxvREFBb0Q7QUFDdEQ7QUFDQTtFQUNFLHlFQUF5RTtFQUN6RSxtREFBbUQ7QUFDckQ7QUFDQTtFQUNFLHdFQUF3RTtFQUN4RSxrREFBa0Q7QUFDcEQ7QUFDQTtFQUNFLGFBQWE7RUFDYix1RUFBdUU7RUFDdkUsY0FBYztFQUNkLHNCQUFzQjtFQUN0QixtREFBbUQ7RUFDbkQseURBQXlEO0FBQzNEO0FBQ0E7RUFDRSxZQUFZO0FBQ2Q7QUFDQTtFQUNFLFlBQVk7QUFDZDtBQUNBO0VBQ0UsWUFBWTtFQUNaLFlBQVk7QUFDZDtBQUNBO0VBQ0UsWUFBWTtBQUNkO0FBQ0E7RUFDRSxhQUFhO0VBQ2IsWUFBWTtBQUNkO0FBQ0E7RUFDRSxZQUFZO0FBQ2Q7QUFDQTtFQUNFLGFBQWE7QUFDZjtBQUNBO0VBQ0UsYUFBYTtFQUNiLFlBQVk7QUFDZFwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuZHYtc2Nyb2xsYWJsZSB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG4uZHYtc2Nyb2xsYWJsZSAuZHYtc2Nyb2xsYmFyLWhvcml6b250YWwge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgYm90dG9tOiAwcHg7XFxuICBsZWZ0OiAwcHg7XFxuICBoZWlnaHQ6IDRweDtcXG4gIGJvcmRlci1yYWRpdXM6IDJweDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgLyogR1BVIG9wdGltaXphdGlvbnMgKi9cXG4gIHdpbGwtY2hhbmdlOiBiYWNrZ3JvdW5kLWNvbG9yLCB0cmFuc2Zvcm07XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xcbiAgYmFja2ZhY2UtdmlzaWJpbGl0eTogaGlkZGVuO1xcbiAgdHJhbnNpdGlvbi1wcm9wZXJ0eTogYmFja2dyb3VuZC1jb2xvcjtcXG4gIHRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLWluLW91dDtcXG4gIHRyYW5zaXRpb24tZHVyYXRpb246IDFzO1xcbiAgdHJhbnNpdGlvbi1kZWxheTogMHM7XFxufVxcbi5kdi1zY3JvbGxhYmxlOmhvdmVyIC5kdi1zY3JvbGxiYXItaG9yaXpvbnRhbCwgLmR2LXNjcm9sbGFibGUuZHYtc2Nyb2xsYWJsZS1yZXNpemluZyAuZHYtc2Nyb2xsYmFyLWhvcml6b250YWwsIC5kdi1zY3JvbGxhYmxlLmR2LXNjcm9sbGFibGUtc2Nyb2xsaW5nIC5kdi1zY3JvbGxiYXItaG9yaXpvbnRhbCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kdi1zY3JvbGxiYXItYmFja2dyb3VuZC1jb2xvciwgcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjI1KSk7XFxufVxcbi5kdi1zdmcge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgZmlsbDogY3VycmVudGNvbG9yO1xcbiAgbGluZS1oZWlnaHQ6IDE7XFxuICBzdHJva2U6IGN1cnJlbnRjb2xvcjtcXG4gIHN0cm9rZS13aWR0aDogMDtcXG59XFxuLmRvY2t2aWV3LXRoZW1lLWRhcmsge1xcbiAgLS1kdi1wYW5ldmlldy1hY3RpdmUtb3V0bGluZS1jb2xvcjogZG9kZ2VyYmx1ZTtcXG4gIC0tZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXItZm9udC1zaXplOiAxM3B4O1xcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1oZWlnaHQ6IDM1cHg7XFxuICAtLWR2LWRyYWctb3Zlci1iYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDgzLCA4OSwgOTMsIDAuNSk7XFxuICAtLWR2LWRyYWctb3Zlci1ib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgLS1kdi10YWJzLWNvbnRhaW5lci1zY3JvbGxiYXItY29sb3I6ICM4ODg7XFxuICAtLWR2LWljb24taG92ZXItYmFja2dyb3VuZC1jb2xvcjogcmdiYSg5MCwgOTMsIDk0LCAwLjMxKTtcXG4gIC0tZHYtZmxvYXRpbmctYm94LXNoYWRvdzogOHB4IDhweCA4cHggMHB4IHJnYmEoODMsIDg5LCA5MywgMC41KTtcXG4gIC0tZHYtb3ZlcmxheS16LWluZGV4OiA5OTk7XFxuICAtLWR2LXRhYi1mb250LXNpemU6IGluaGVyaXQ7XFxuICAtLWR2LWJvcmRlci1yYWRpdXM6IDBweDtcXG4gIC0tZHYtdGFiLW1hcmdpbjogMDtcXG4gIC0tZHYtc2FzaC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAtLWR2LWFjdGl2ZS1zYXNoLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIC0tZHYtYWN0aXZlLXNhc2gtdHJhbnNpdGlvbi1kdXJhdGlvbjogMC4xcztcXG4gIC0tZHYtYWN0aXZlLXNhc2gtdHJhbnNpdGlvbi1kZWxheTogMC41cztcXG4gIC0tZHYtZ3JvdXAtdmlldy1iYWNrZ3JvdW5kLWNvbG9yOiAjMWUxZTFlO1xcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1iYWNrZ3JvdW5kLWNvbG9yOiAjMjUyNTI2O1xcbiAgLS1kdi1hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3I6ICMxZTFlMWU7XFxuICAtLWR2LWFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yOiAjMmQyZDJkO1xcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogIzFlMWUxZTtcXG4gIC0tZHYtaW5hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogIzJkMmQyZDtcXG4gIC0tZHYtdGFiLWRpdmlkZXItY29sb3I6ICMxZTFlMWU7XFxuICAtLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItY29sb3I6IHdoaXRlO1xcbiAgLS1kdi1hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItY29sb3I6ICM5Njk2OTY7XFxuICAtLWR2LWluYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1jb2xvcjogIzhmOGY4ZjtcXG4gIC0tZHYtaW5hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItY29sb3I6ICM2MjYyNjI7XFxuICAtLWR2LXNlcGFyYXRvci1ib3JkZXI6IHJnYig2OCwgNjgsIDY4KTtcXG4gIC0tZHYtcGFuZXZpZXctaGVhZGVyLWJvcmRlci1jb2xvcjogcmdiYSgyMDQsIDIwNCwgMjA0LCAwLjIpO1xcbn1cXG4uZG9ja3ZpZXctdGhlbWUtZGFyayAuZHYtZHJvcC10YXJnZXQtY29udGFpbmVyIC5kdi1kcm9wLXRhcmdldC1hbmNob3IuZHYtZHJvcC10YXJnZXQtYW5jaG9yLWNvbnRhaW5lci1jaGFuZ2VkIHtcXG4gIG9wYWNpdHk6IDA7XFxuICB0cmFuc2l0aW9uOiBub25lO1xcbn1cXG5cXG4uZG9ja3ZpZXctdGhlbWUtbGlnaHQge1xcbiAgLS1kdi1wYW5ldmlldy1hY3RpdmUtb3V0bGluZS1jb2xvcjogZG9kZ2VyYmx1ZTtcXG4gIC0tZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXItZm9udC1zaXplOiAxM3B4O1xcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1oZWlnaHQ6IDM1cHg7XFxuICAtLWR2LWRyYWctb3Zlci1iYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDgzLCA4OSwgOTMsIDAuNSk7XFxuICAtLWR2LWRyYWctb3Zlci1ib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgLS1kdi10YWJzLWNvbnRhaW5lci1zY3JvbGxiYXItY29sb3I6ICM4ODg7XFxuICAtLWR2LWljb24taG92ZXItYmFja2dyb3VuZC1jb2xvcjogcmdiYSg5MCwgOTMsIDk0LCAwLjMxKTtcXG4gIC0tZHYtZmxvYXRpbmctYm94LXNoYWRvdzogOHB4IDhweCA4cHggMHB4IHJnYmEoODMsIDg5LCA5MywgMC41KTtcXG4gIC0tZHYtb3ZlcmxheS16LWluZGV4OiA5OTk7XFxuICAtLWR2LXRhYi1mb250LXNpemU6IGluaGVyaXQ7XFxuICAtLWR2LWJvcmRlci1yYWRpdXM6IDBweDtcXG4gIC0tZHYtdGFiLW1hcmdpbjogMDtcXG4gIC0tZHYtc2FzaC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAtLWR2LWFjdGl2ZS1zYXNoLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIC0tZHYtYWN0aXZlLXNhc2gtdHJhbnNpdGlvbi1kdXJhdGlvbjogMC4xcztcXG4gIC0tZHYtYWN0aXZlLXNhc2gtdHJhbnNpdGlvbi1kZWxheTogMC41cztcXG4gIC0tZHYtZ3JvdXAtdmlldy1iYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gIC0tZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXItYmFja2dyb3VuZC1jb2xvcjogI2YzZjNmMztcXG4gIC0tZHYtYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gIC0tZHYtYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3I6ICNlY2VjZWM7XFxuICAtLWR2LWluYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gIC0tZHYtaW5hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogI2VjZWNlYztcXG4gIC0tZHYtdGFiLWRpdmlkZXItY29sb3I6IHdoaXRlO1xcbiAgLS1kdi1hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWNvbG9yOiByZ2IoNTEsIDUxLCA1MSk7XFxuICAtLWR2LWFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1jb2xvcjogcmdiYSg1MSwgNTEsIDUxLCAwLjcpO1xcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItY29sb3I6IHJnYmEoNTEsIDUxLCA1MSwgMC43KTtcXG4gIC0tZHYtaW5hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItY29sb3I6IHJnYmEoNTEsIDUxLCA1MSwgMC4zNSk7XFxuICAtLWR2LXNlcGFyYXRvci1ib3JkZXI6IHJnYmEoMTI4LCAxMjgsIDEyOCwgMC4zNSk7XFxuICAtLWR2LXBhbmV2aWV3LWhlYWRlci1ib3JkZXItY29sb3I6IHJnYig1MSwgNTEsIDUxKTtcXG4gIC0tZHYtc2Nyb2xsYmFyLWJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4yNSk7XFxufVxcbi5kb2Nrdmlldy10aGVtZS1saWdodCAuZHYtZHJvcC10YXJnZXQtY29udGFpbmVyIC5kdi1kcm9wLXRhcmdldC1hbmNob3IuZHYtZHJvcC10YXJnZXQtYW5jaG9yLWNvbnRhaW5lci1jaGFuZ2VkIHtcXG4gIG9wYWNpdHk6IDA7XFxuICB0cmFuc2l0aW9uOiBub25lO1xcbn1cXG5cXG4uZG9ja3ZpZXctdGhlbWUtdnMge1xcbiAgLS1kdi1wYW5ldmlldy1hY3RpdmUtb3V0bGluZS1jb2xvcjogZG9kZ2VyYmx1ZTtcXG4gIC0tZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXItZm9udC1zaXplOiAxM3B4O1xcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1oZWlnaHQ6IDM1cHg7XFxuICAtLWR2LWRyYWctb3Zlci1iYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDgzLCA4OSwgOTMsIDAuNSk7XFxuICAtLWR2LWRyYWctb3Zlci1ib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgLS1kdi10YWJzLWNvbnRhaW5lci1zY3JvbGxiYXItY29sb3I6ICM4ODg7XFxuICAtLWR2LWljb24taG92ZXItYmFja2dyb3VuZC1jb2xvcjogcmdiYSg5MCwgOTMsIDk0LCAwLjMxKTtcXG4gIC0tZHYtZmxvYXRpbmctYm94LXNoYWRvdzogOHB4IDhweCA4cHggMHB4IHJnYmEoODMsIDg5LCA5MywgMC41KTtcXG4gIC0tZHYtb3ZlcmxheS16LWluZGV4OiA5OTk7XFxuICAtLWR2LXRhYi1mb250LXNpemU6IGluaGVyaXQ7XFxuICAtLWR2LWJvcmRlci1yYWRpdXM6IDBweDtcXG4gIC0tZHYtdGFiLW1hcmdpbjogMDtcXG4gIC0tZHYtc2FzaC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAtLWR2LWFjdGl2ZS1zYXNoLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIC0tZHYtYWN0aXZlLXNhc2gtdHJhbnNpdGlvbi1kdXJhdGlvbjogMC4xcztcXG4gIC0tZHYtYWN0aXZlLXNhc2gtdHJhbnNpdGlvbi1kZWxheTogMC41cztcXG4gIC0tZHYtZ3JvdXAtdmlldy1iYWNrZ3JvdW5kLWNvbG9yOiAjMWUxZTFlO1xcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1iYWNrZ3JvdW5kLWNvbG9yOiAjMjUyNTI2O1xcbiAgLS1kdi1hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3I6ICMxZTFlMWU7XFxuICAtLWR2LWFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yOiAjMmQyZDJkO1xcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogIzFlMWUxZTtcXG4gIC0tZHYtaW5hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogIzJkMmQyZDtcXG4gIC0tZHYtdGFiLWRpdmlkZXItY29sb3I6ICMxZTFlMWU7XFxuICAtLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItY29sb3I6IHdoaXRlO1xcbiAgLS1kdi1hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItY29sb3I6ICM5Njk2OTY7XFxuICAtLWR2LWluYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1jb2xvcjogIzhmOGY4ZjtcXG4gIC0tZHYtaW5hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItY29sb3I6ICM2MjYyNjI7XFxuICAtLWR2LXNlcGFyYXRvci1ib3JkZXI6IHJnYig2OCwgNjgsIDY4KTtcXG4gIC0tZHYtcGFuZXZpZXctaGVhZGVyLWJvcmRlci1jb2xvcjogcmdiYSgyMDQsIDIwNCwgMjA0LCAwLjIpO1xcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1iYWNrZ3JvdW5kLWNvbG9yOiAjMmQyZDMwO1xcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1oZWlnaHQ6IDIwcHg7XFxuICAtLWR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLWZvbnQtc2l6ZTogMTFweDtcXG4gIC0tZHYtYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yOiAjMDA3YWNjO1xcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogIzNmM2Y0NjtcXG4gIC0tZHYtYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1jb2xvcjogd2hpdGU7XFxuICAtLWR2LWFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1jb2xvcjogd2hpdGU7XFxuICAtLWR2LWluYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1jb2xvcjogd2hpdGU7XFxuICAtLWR2LWluYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWNvbG9yOiB3aGl0ZTtcXG59XFxuLmRvY2t2aWV3LXRoZW1lLXZzIC5kdi1kcm9wLXRhcmdldC1jb250YWluZXIgLmR2LWRyb3AtdGFyZ2V0LWFuY2hvci5kdi1kcm9wLXRhcmdldC1hbmNob3ItY29udGFpbmVyLWNoYW5nZWQge1xcbiAgb3BhY2l0eTogMDtcXG4gIHRyYW5zaXRpb246IG5vbmU7XFxufVxcbi5kb2Nrdmlldy10aGVtZS12cyAuZHYtZ3JvdXB2aWV3LmR2LWFjdGl2ZS1ncm91cCA+IC5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lciB7XFxuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcXG4gIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCB2YXIoLS1kdi1hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3IpO1xcbn1cXG4uZG9ja3ZpZXctdGhlbWUtdnMgLmR2LWdyb3Vwdmlldy5kdi1hY3RpdmUtZ3JvdXAgPiAuZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXIgLmR2LXRhYi5kdi1hY3RpdmUtdGFiIHtcXG4gIGJvcmRlci10b3A6IDJweCBzb2xpZCB2YXIoLS1kdi1hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3IpO1xcbn1cXG4uZG9ja3ZpZXctdGhlbWUtdnMgLmR2LWdyb3Vwdmlldy5kdi1hY3RpdmUtZ3JvdXAgPiAuZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXIgLmR2LXRhYi5kdi1pbmFjdGl2ZS10YWIge1xcbiAgYm9yZGVyLXRvcDogMnB4IHNvbGlkIHZhcigtLWR2LWFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yKTtcXG59XFxuLmRvY2t2aWV3LXRoZW1lLXZzIC5kdi1ncm91cHZpZXcuZHYtaW5hY3RpdmUtZ3JvdXAgPiAuZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXIge1xcbiAgYm94LXNpemluZzogY29udGVudC1ib3g7XFxuICBib3JkZXItYm90dG9tOiAycHggc29saWQgdmFyKC0tZHYtaW5hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3IpO1xcbn1cXG4uZG9ja3ZpZXctdGhlbWUtdnMgLmR2LWdyb3Vwdmlldy5kdi1pbmFjdGl2ZS1ncm91cCA+IC5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lciAuZHYtdGFiLmR2LWFjdGl2ZS10YWIge1xcbiAgYm9yZGVyLXRvcDogMnB4IHNvbGlkIHZhcigtLWR2LWluYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yKTtcXG59XFxuLmRvY2t2aWV3LXRoZW1lLXZzIC5kdi1ncm91cHZpZXcuZHYtaW5hY3RpdmUtZ3JvdXAgPiAuZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXIgLmR2LXRhYi5kdi1pbmFjdGl2ZS10YWIge1xcbiAgYm9yZGVyLXRvcDogMnB4IHNvbGlkIHZhcigtLWR2LWluYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3IpO1xcbn1cXG5cXG4uZG9ja3ZpZXctdGhlbWUtYWJ5c3Mge1xcbiAgLS1kdi1wYW5ldmlldy1hY3RpdmUtb3V0bGluZS1jb2xvcjogZG9kZ2VyYmx1ZTtcXG4gIC0tZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXItZm9udC1zaXplOiAxM3B4O1xcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1oZWlnaHQ6IDM1cHg7XFxuICAtLWR2LWRyYWctb3Zlci1iYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDgzLCA4OSwgOTMsIDAuNSk7XFxuICAtLWR2LWRyYWctb3Zlci1ib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgLS1kdi10YWJzLWNvbnRhaW5lci1zY3JvbGxiYXItY29sb3I6ICM4ODg7XFxuICAtLWR2LWljb24taG92ZXItYmFja2dyb3VuZC1jb2xvcjogcmdiYSg5MCwgOTMsIDk0LCAwLjMxKTtcXG4gIC0tZHYtZmxvYXRpbmctYm94LXNoYWRvdzogOHB4IDhweCA4cHggMHB4IHJnYmEoODMsIDg5LCA5MywgMC41KTtcXG4gIC0tZHYtb3ZlcmxheS16LWluZGV4OiA5OTk7XFxuICAtLWR2LXRhYi1mb250LXNpemU6IGluaGVyaXQ7XFxuICAtLWR2LWJvcmRlci1yYWRpdXM6IDBweDtcXG4gIC0tZHYtdGFiLW1hcmdpbjogMDtcXG4gIC0tZHYtc2FzaC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAtLWR2LWFjdGl2ZS1zYXNoLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIC0tZHYtYWN0aXZlLXNhc2gtdHJhbnNpdGlvbi1kdXJhdGlvbjogMC4xcztcXG4gIC0tZHYtYWN0aXZlLXNhc2gtdHJhbnNpdGlvbi1kZWxheTogMC41cztcXG4gIC0tZHYtY29sb3ItYWJ5c3MtZGFyazogIzAwMGMxODtcXG4gIC0tZHYtY29sb3ItYWJ5c3M6ICMxMDE5MmM7XFxuICAtLWR2LWNvbG9yLWFieXNzLWxpZ2h0OiAjMWMxYzJhO1xcbiAgLS1kdi1jb2xvci1hYnlzcy1saWdodGVyOiAjMmIyYjRhO1xcbiAgLS1kdi1jb2xvci1hYnlzcy1hY2NlbnQ6IHJnYig5MSwgMzAsIDIwNyk7XFxuICAtLWR2LWNvbG9yLWFieXNzLXByaW1hcnktdGV4dDogd2hpdGU7XFxuICAtLWR2LWNvbG9yLWFieXNzLXNlY29uZGFyeS10ZXh0OiByZ2IoMTQ4LCAxNTEsIDE2OSk7XFxuICAtLWR2LWdyb3VwLXZpZXctYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZHYtY29sb3ItYWJ5c3MtZGFyayk7XFxuICAtLWR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLWJhY2tncm91bmQtY29sb3I6IHZhcihcXG4gICAgICAtLWR2LWNvbG9yLWFieXNzLWxpZ2h0XFxuICApO1xcbiAgLS1kdi1hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3I6IHZhcihcXG4gICAgICAtLWR2LWNvbG9yLWFieXNzLWRhcmtcXG4gICk7XFxuICAtLWR2LWFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kdi1jb2xvci1hYnlzcyk7XFxuICAtLWR2LWluYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yOiB2YXIoXFxuICAgICAgLS1kdi1jb2xvci1hYnlzcy1kYXJrXFxuICApO1xcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kdi1jb2xvci1hYnlzcyk7XFxuICAtLWR2LXRhYi1kaXZpZGVyLWNvbG9yOiB2YXIoLS1kdi1jb2xvci1hYnlzcy1saWdodGVyKTtcXG4gIC0tZHYtYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1jb2xvcjogd2hpdGU7XFxuICAtLWR2LWFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpO1xcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTtcXG4gIC0tZHYtaW5hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yNSk7XFxuICAtLWR2LXNlcGFyYXRvci1ib3JkZXI6IHZhcigtLWR2LWNvbG9yLWFieXNzLWxpZ2h0ZXIpO1xcbiAgLS1kdi1wYW5ldmlldy1oZWFkZXItYm9yZGVyLWNvbG9yOiB2YXIoLS1kdi1jb2xvci1hYnlzcy1saWdodGVyKTtcXG4gIC0tZHYtcGFuZXZpZXctYWN0aXZlLW91dGxpbmUtY29sb3I6ICM1OTZmOTk7XFxufVxcbi5kb2Nrdmlldy10aGVtZS1hYnlzcyAuZHYtZHJvcC10YXJnZXQtY29udGFpbmVyIC5kdi1kcm9wLXRhcmdldC1hbmNob3IuZHYtZHJvcC10YXJnZXQtYW5jaG9yLWNvbnRhaW5lci1jaGFuZ2VkIHtcXG4gIG9wYWNpdHk6IDA7XFxuICB0cmFuc2l0aW9uOiBub25lO1xcbn1cXG5cXG4uZG9ja3ZpZXctdGhlbWUtZHJhY3VsYSB7XFxuICAtLWR2LXBhbmV2aWV3LWFjdGl2ZS1vdXRsaW5lLWNvbG9yOiBkb2RnZXJibHVlO1xcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1mb250LXNpemU6IDEzcHg7XFxuICAtLWR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLWhlaWdodDogMzVweDtcXG4gIC0tZHYtZHJhZy1vdmVyLWJhY2tncm91bmQtY29sb3I6IHJnYmEoODMsIDg5LCA5MywgMC41KTtcXG4gIC0tZHYtZHJhZy1vdmVyLWJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAtLWR2LXRhYnMtY29udGFpbmVyLXNjcm9sbGJhci1jb2xvcjogIzg4ODtcXG4gIC0tZHYtaWNvbi1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDkwLCA5MywgOTQsIDAuMzEpO1xcbiAgLS1kdi1mbG9hdGluZy1ib3gtc2hhZG93OiA4cHggOHB4IDhweCAwcHggcmdiYSg4MywgODksIDkzLCAwLjUpO1xcbiAgLS1kdi1vdmVybGF5LXotaW5kZXg6IDk5OTtcXG4gIC0tZHYtdGFiLWZvbnQtc2l6ZTogaW5oZXJpdDtcXG4gIC0tZHYtYm9yZGVyLXJhZGl1czogMHB4O1xcbiAgLS1kdi10YWItbWFyZ2luOiAwO1xcbiAgLS1kdi1zYXNoLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIC0tZHYtYWN0aXZlLXNhc2gtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgLS1kdi1hY3RpdmUtc2FzaC10cmFuc2l0aW9uLWR1cmF0aW9uOiAwLjFzO1xcbiAgLS1kdi1hY3RpdmUtc2FzaC10cmFuc2l0aW9uLWRlbGF5OiAwLjVzO1xcbiAgLS1kdi1ncm91cC12aWV3LWJhY2tncm91bmQtY29sb3I6ICMyODJhMzY7XFxuICAtLWR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLWJhY2tncm91bmQtY29sb3I6ICMxOTFhMjE7XFxuICAtLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogIzI4MmEzNjtcXG4gIC0tZHYtYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3I6ICMyMTIyMmM7XFxuICAtLWR2LWluYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yOiAjMjgyYTM2O1xcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yOiAjMjEyMjJjO1xcbiAgLS1kdi10YWItZGl2aWRlci1jb2xvcjogIzE5MWEyMTtcXG4gIC0tZHYtYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1jb2xvcjogcmdiKDI0OCwgMjQ4LCAyNDIpO1xcbiAgLS1kdi1hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItY29sb3I6IHJnYig5OCwgMTE0LCAxNjQpO1xcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItY29sb3I6IHJnYmEoMjQ4LCAyNDgsIDI0MiwgMC41KTtcXG4gIC0tZHYtaW5hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItY29sb3I6IHJnYmEoOTgsIDExNCwgMTY0LCAwLjUpO1xcbiAgLS1kdi1zZXBhcmF0b3ItYm9yZGVyOiAjYmQ5M2Y5O1xcbiAgLS1kdi1wYW5ldmlldy1oZWFkZXItYm9yZGVyLWNvbG9yOiAjYmQ5M2Y5O1xcbiAgLS1kdi1wYW5ldmlldy1hY3RpdmUtb3V0bGluZS1jb2xvcjogIzYyNzJhNDtcXG59XFxuLmRvY2t2aWV3LXRoZW1lLWRyYWN1bGEgLmR2LWRyb3AtdGFyZ2V0LWNvbnRhaW5lciAuZHYtZHJvcC10YXJnZXQtYW5jaG9yLmR2LWRyb3AtdGFyZ2V0LWFuY2hvci1jb250YWluZXItY2hhbmdlZCB7XFxuICBvcGFjaXR5OiAwO1xcbiAgdHJhbnNpdGlvbjogbm9uZTtcXG59XFxuLmRvY2t2aWV3LXRoZW1lLWRyYWN1bGEgLmR2LWdyb3Vwdmlldy5kdi1hY3RpdmUtZ3JvdXAgPiAuZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXIgLmR2LXRhYnMtY29udGFpbmVyID4gLmR2LXRhYi5kdi1hY3RpdmUtdGFiIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuLmRvY2t2aWV3LXRoZW1lLWRyYWN1bGEgLmR2LWdyb3Vwdmlldy5kdi1hY3RpdmUtZ3JvdXAgPiAuZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXIgLmR2LXRhYnMtY29udGFpbmVyID4gLmR2LXRhYi5kdi1hY3RpdmUtdGFiOjphZnRlciB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBsZWZ0OiAwcHg7XFxuICB0b3A6IDBweDtcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDFweDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM5NDUyN2U7XFxuICB6LWluZGV4OiA5OTk7XFxufVxcbi5kb2Nrdmlldy10aGVtZS1kcmFjdWxhIC5kdi1ncm91cHZpZXcuZHYtaW5hY3RpdmUtZ3JvdXAgPiAuZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXIgLmR2LXRhYnMtY29udGFpbmVyID4gLmR2LXRhYi5kdi1hY3RpdmUtdGFiIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuLmRvY2t2aWV3LXRoZW1lLWRyYWN1bGEgLmR2LWdyb3Vwdmlldy5kdi1pbmFjdGl2ZS1ncm91cCA+IC5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lciAuZHYtdGFicy1jb250YWluZXIgPiAuZHYtdGFiLmR2LWFjdGl2ZS10YWI6OmFmdGVyIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGxlZnQ6IDBweDtcXG4gIGJvdHRvbTogMHB4O1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMXB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzVlM2Q1YTtcXG4gIHotaW5kZXg6IDk5OTtcXG59XFxuXFxuLmRvY2t2aWV3LXRoZW1lLXJlcGxpdCB7XFxuICAtLWR2LXBhbmV2aWV3LWFjdGl2ZS1vdXRsaW5lLWNvbG9yOiBkb2RnZXJibHVlO1xcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1mb250LXNpemU6IDEzcHg7XFxuICAtLWR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLWhlaWdodDogMzVweDtcXG4gIC0tZHYtZHJhZy1vdmVyLWJhY2tncm91bmQtY29sb3I6IHJnYmEoODMsIDg5LCA5MywgMC41KTtcXG4gIC0tZHYtZHJhZy1vdmVyLWJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAtLWR2LXRhYnMtY29udGFpbmVyLXNjcm9sbGJhci1jb2xvcjogIzg4ODtcXG4gIC0tZHYtaWNvbi1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDkwLCA5MywgOTQsIDAuMzEpO1xcbiAgLS1kdi1mbG9hdGluZy1ib3gtc2hhZG93OiA4cHggOHB4IDhweCAwcHggcmdiYSg4MywgODksIDkzLCAwLjUpO1xcbiAgLS1kdi1vdmVybGF5LXotaW5kZXg6IDk5OTtcXG4gIC0tZHYtdGFiLWZvbnQtc2l6ZTogaW5oZXJpdDtcXG4gIC0tZHYtYm9yZGVyLXJhZGl1czogMHB4O1xcbiAgLS1kdi10YWItbWFyZ2luOiAwO1xcbiAgLS1kdi1zYXNoLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIC0tZHYtYWN0aXZlLXNhc2gtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgLS1kdi1hY3RpdmUtc2FzaC10cmFuc2l0aW9uLWR1cmF0aW9uOiAwLjFzO1xcbiAgLS1kdi1hY3RpdmUtc2FzaC10cmFuc2l0aW9uLWRlbGF5OiAwLjVzO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIHBhZGRpbmc6IDEwcHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWJlY2VkO1xcbiAgLS1kdi1ncm91cC12aWV3LWJhY2tncm91bmQtY29sb3I6ICNlYmVjZWQ7XFxuICAtLWR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLWJhY2tncm91bmQtY29sb3I6ICNmY2ZjZmM7XFxuICAtLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogI2YwZjFmMjtcXG4gIC0tZHYtYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3I6ICNmY2ZjZmM7XFxuICAtLWR2LWluYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yOiAjZjBmMWYyO1xcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yOiAjZmNmY2ZjO1xcbiAgLS1kdi10YWItZGl2aWRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAtLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItY29sb3I6IHJnYig1MSwgNTEsIDUxKTtcXG4gIC0tZHYtYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWNvbG9yOiByZ2IoNTEsIDUxLCA1MSk7XFxuICAtLWR2LWluYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1jb2xvcjogcmdiKDUxLCA1MSwgNTEpO1xcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1jb2xvcjogcmdiKDUxLCA1MSwgNTEpO1xcbiAgLS1kdi1zZXBhcmF0b3ItYm9yZGVyOiB0cmFuc3BhcmVudDtcXG4gIC0tZHYtcGFuZXZpZXctaGVhZGVyLWJvcmRlci1jb2xvcjogcmdiKDUxLCA1MSwgNTEpO1xcbiAgLS1kdi1zYXNoLWNvbG9yOiAjY2ZkMWQzO1xcbiAgLS1kdi1hY3RpdmUtc2FzaC1jb2xvcjogI2JhYmJiYjtcXG59XFxuLmRvY2t2aWV3LXRoZW1lLXJlcGxpdCAuZHYtZHJvcC10YXJnZXQtY29udGFpbmVyIC5kdi1kcm9wLXRhcmdldC1hbmNob3IuZHYtZHJvcC10YXJnZXQtYW5jaG9yLWNvbnRhaW5lci1jaGFuZ2VkIHtcXG4gIG9wYWNpdHk6IDA7XFxuICB0cmFuc2l0aW9uOiBub25lO1xcbn1cXG4uZG9ja3ZpZXctdGhlbWUtcmVwbGl0IC5kdi1yZXNpemUtY29udGFpbmVyOmhhcyg+IC5kdi1ncm91cHZpZXcpIHtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG59XFxuLmRvY2t2aWV3LXRoZW1lLXJlcGxpdCAuZHYtcmVzaXplLWNvbnRhaW5lciB7XFxuICBib3JkZXItcmFkaXVzOiAxMHB4ICFpbXBvcnRhbnQ7XFxuICBib3JkZXI6IG5vbmU7XFxufVxcbi5kb2Nrdmlldy10aGVtZS1yZXBsaXQgLmR2LWdyb3VwdmlldyB7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcXG59XFxuLmRvY2t2aWV3LXRoZW1lLXJlcGxpdCAuZHYtZ3JvdXB2aWV3IC5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lciB7XFxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgcmdiYSgxMjgsIDEyOCwgMTI4LCAwLjM1KTtcXG59XFxuLmRvY2t2aWV3LXRoZW1lLXJlcGxpdCAuZHYtZ3JvdXB2aWV3IC5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lciAuZHYtdGFiIHtcXG4gIG1hcmdpbjogNHB4O1xcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcbn1cXG4uZG9ja3ZpZXctdGhlbWUtcmVwbGl0IC5kdi1ncm91cHZpZXcgLmR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyIC5kdi10YWIgLmR2LXN2ZyB7XFxuICBoZWlnaHQ6IDhweDtcXG4gIHdpZHRoOiA4cHg7XFxufVxcbi5kb2Nrdmlldy10aGVtZS1yZXBsaXQgLmR2LWdyb3VwdmlldyAuZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXIgLmR2LXRhYjpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTRlNWU2ICFpbXBvcnRhbnQ7XFxufVxcbi5kb2Nrdmlldy10aGVtZS1yZXBsaXQgLmR2LWdyb3VwdmlldyAuZHYtY29udGVudC1jb250YWluZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZjZmNmYztcXG59XFxuLmRvY2t2aWV3LXRoZW1lLXJlcGxpdCAuZHYtZ3JvdXB2aWV3LmR2LWFjdGl2ZS1ncm91cCB7XFxuICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDEyOCwgMTI4LCAxMjgsIDAuMzUpO1xcbn1cXG4uZG9ja3ZpZXctdGhlbWUtcmVwbGl0IC5kdi1ncm91cHZpZXcuZHYtaW5hY3RpdmUtZ3JvdXAge1xcbiAgYm9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7XFxufVxcbi5kb2Nrdmlldy10aGVtZS1yZXBsaXQgLmR2LXZlcnRpY2FsID4gLmR2LXNhc2gtY29udGFpbmVyID4gLmR2LXNhc2gge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxufVxcbi5kb2Nrdmlldy10aGVtZS1yZXBsaXQgLmR2LXZlcnRpY2FsID4gLmR2LXNhc2gtY29udGFpbmVyID4gLmR2LXNhc2g6bm90KC5kaXNhYmxlZCk6OmFmdGVyIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgaGVpZ2h0OiA0cHg7XFxuICB3aWR0aDogNDBweDtcXG4gIGJvcmRlci1yYWRpdXM6IDJweDtcXG4gIHRvcDogNTAlO1xcbiAgbGVmdDogNTAlO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kdi1zYXNoLWNvbG9yKTtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG59XFxuLmRvY2t2aWV3LXRoZW1lLXJlcGxpdCAuZHYtdmVydGljYWwgPiAuZHYtc2FzaC1jb250YWluZXIgPiAuZHYtc2FzaDpub3QoLmRpc2FibGVkKTpob3ZlciwgLmRvY2t2aWV3LXRoZW1lLXJlcGxpdCAuZHYtdmVydGljYWwgPiAuZHYtc2FzaC1jb250YWluZXIgPiAuZHYtc2FzaDpub3QoLmRpc2FibGVkKTphY3RpdmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxufVxcbi5kb2Nrdmlldy10aGVtZS1yZXBsaXQgLmR2LXZlcnRpY2FsID4gLmR2LXNhc2gtY29udGFpbmVyID4gLmR2LXNhc2g6bm90KC5kaXNhYmxlZCk6aG92ZXI6OmFmdGVyLCAuZG9ja3ZpZXctdGhlbWUtcmVwbGl0IC5kdi12ZXJ0aWNhbCA+IC5kdi1zYXNoLWNvbnRhaW5lciA+IC5kdi1zYXNoOm5vdCguZGlzYWJsZWQpOmFjdGl2ZTo6YWZ0ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZHYtYWN0aXZlLXNhc2gtY29sb3IpO1xcbn1cXG4uZG9ja3ZpZXctdGhlbWUtcmVwbGl0IC5kdi1ob3Jpem9udGFsID4gLmR2LXNhc2gtY29udGFpbmVyID4gLmR2LXNhc2gge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxufVxcbi5kb2Nrdmlldy10aGVtZS1yZXBsaXQgLmR2LWhvcml6b250YWwgPiAuZHYtc2FzaC1jb250YWluZXIgPiAuZHYtc2FzaDpub3QoLmRpc2FibGVkKTo6YWZ0ZXIge1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBoZWlnaHQ6IDQwcHg7XFxuICB3aWR0aDogNHB4O1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgdG9wOiA1MCU7XFxuICBsZWZ0OiA1MCU7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWR2LXNhc2gtY29sb3IpO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbn1cXG4uZG9ja3ZpZXctdGhlbWUtcmVwbGl0IC5kdi1ob3Jpem9udGFsID4gLmR2LXNhc2gtY29udGFpbmVyID4gLmR2LXNhc2g6bm90KC5kaXNhYmxlZCk6aG92ZXIsIC5kb2Nrdmlldy10aGVtZS1yZXBsaXQgLmR2LWhvcml6b250YWwgPiAuZHYtc2FzaC1jb250YWluZXIgPiAuZHYtc2FzaDpub3QoLmRpc2FibGVkKTphY3RpdmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxufVxcbi5kb2Nrdmlldy10aGVtZS1yZXBsaXQgLmR2LWhvcml6b250YWwgPiAuZHYtc2FzaC1jb250YWluZXIgPiAuZHYtc2FzaDpub3QoLmRpc2FibGVkKTpob3Zlcjo6YWZ0ZXIsIC5kb2Nrdmlldy10aGVtZS1yZXBsaXQgLmR2LWhvcml6b250YWwgPiAuZHYtc2FzaC1jb250YWluZXIgPiAuZHYtc2FzaDpub3QoLmRpc2FibGVkKTphY3RpdmU6OmFmdGVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWR2LWFjdGl2ZS1zYXNoLWNvbG9yKTtcXG59XFxuXFxuLmRvY2t2aWV3LXRoZW1lLWFieXNzLXNwYWNlZCB7XFxuICAtLWR2LXBhbmV2aWV3LWFjdGl2ZS1vdXRsaW5lLWNvbG9yOiBkb2RnZXJibHVlO1xcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1mb250LXNpemU6IDEzcHg7XFxuICAtLWR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLWhlaWdodDogMzVweDtcXG4gIC0tZHYtZHJhZy1vdmVyLWJhY2tncm91bmQtY29sb3I6IHJnYmEoODMsIDg5LCA5MywgMC41KTtcXG4gIC0tZHYtZHJhZy1vdmVyLWJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAtLWR2LXRhYnMtY29udGFpbmVyLXNjcm9sbGJhci1jb2xvcjogIzg4ODtcXG4gIC0tZHYtaWNvbi1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDkwLCA5MywgOTQsIDAuMzEpO1xcbiAgLS1kdi1mbG9hdGluZy1ib3gtc2hhZG93OiA4cHggOHB4IDhweCAwcHggcmdiYSg4MywgODksIDkzLCAwLjUpO1xcbiAgLS1kdi1vdmVybGF5LXotaW5kZXg6IDk5OTtcXG4gIC0tZHYtdGFiLWZvbnQtc2l6ZTogaW5oZXJpdDtcXG4gIC0tZHYtYm9yZGVyLXJhZGl1czogMHB4O1xcbiAgLS1kdi10YWItbWFyZ2luOiAwO1xcbiAgLS1kdi1zYXNoLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIC0tZHYtYWN0aXZlLXNhc2gtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgLS1kdi1hY3RpdmUtc2FzaC10cmFuc2l0aW9uLWR1cmF0aW9uOiAwLjFzO1xcbiAgLS1kdi1hY3RpdmUtc2FzaC10cmFuc2l0aW9uLWRlbGF5OiAwLjVzO1xcbiAgLS1kdi10YWItZm9udC1zaXplOiAxMnB4O1xcbiAgLS1kdi1ib3JkZXItcmFkaXVzOiAyMHB4O1xcbiAgLS1kdi10YWItbWFyZ2luOiAwLjVyZW0gMC4yNXJlbTtcXG4gIC0tZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXItaGVpZ2h0OiA0NHB4O1xcbiAgLS1kdi1ib3JkZXItcmFkaXVzOiAyMHB4O1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIC0tZHYtY29sb3ItYWJ5c3MtZGFyazogcmdiKDExLCA2LCAxNyk7XFxuICAtLWR2LWNvbG9yLWFieXNzOiAjMTYxMjFmO1xcbiAgLS1kdi1jb2xvci1hYnlzcy1saWdodDogIzIwMWQyYjtcXG4gIC0tZHYtY29sb3ItYWJ5c3MtbGlnaHRlcjogIzJhMjgzNztcXG4gIC0tZHYtY29sb3ItYWJ5c3MtYWNjZW50OiByZ2IoOTEsIDMwLCAyMDcpO1xcbiAgLS1kdi1jb2xvci1hYnlzcy1wcmltYXJ5LXRleHQ6IHdoaXRlO1xcbiAgLS1kdi1jb2xvci1hYnlzcy1zZWNvbmRhcnktdGV4dDogcmdiKDE0OCwgMTUxLCAxNjkpO1xcbiAgLS1kdi1kcmFnLW92ZXItYm9yZGVyOiAycHggc29saWQgdmFyKC0tZHYtY29sb3ItYWJ5c3MtYWNjZW50KTtcXG4gIC0tZHYtZHJhZy1vdmVyLWJhY2tncm91bmQtY29sb3I6IFxcXCJcXFwiO1xcbiAgLS1kdi1ncm91cC12aWV3LWJhY2tncm91bmQtY29sb3I6IHZhcigtLWR2LWNvbG9yLWFieXNzLWRhcmspO1xcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1iYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kdi1jb2xvci1hYnlzcyk7XFxuICAtLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogdmFyKFxcbiAgICAgIC0tZHYtY29sb3ItYWJ5c3MtbGlnaHRlclxcbiAgKTtcXG4gIC0tZHYtYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3I6IHZhcihcXG4gICAgICAtLWR2LWNvbG9yLWFieXNzLWxpZ2h0XFxuICApO1xcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogdmFyKFxcbiAgICAgIC0tZHYtY29sb3ItYWJ5c3MtbGlnaHRlclxcbiAgKTtcXG4gIC0tZHYtaW5hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogdmFyKFxcbiAgICAgIC0tZHYtY29sb3ItYWJ5c3MtbGlnaHRcXG4gICk7XFxuICAtLWR2LXRhYi1kaXZpZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIC0tZHYtYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1jb2xvcjogdmFyKC0tZHYtY29sb3ItYWJ5c3MtcHJpbWFyeS10ZXh0KTtcXG4gIC0tZHYtYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWNvbG9yOiB2YXIoXFxuICAgICAgLS1kdi1jb2xvci1hYnlzcy1zZWNvbmRhcnktdGV4dFxcbiAgKTtcXG4gIC0tZHYtaW5hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWNvbG9yOiB2YXIoXFxuICAgICAgLS1kdi1jb2xvci1hYnlzcy1wcmltYXJ5LXRleHRcXG4gICk7XFxuICAtLWR2LWluYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWNvbG9yOiB2YXIoXFxuICAgICAgLS1kdi1jb2xvci1hYnlzcy1zZWNvbmRhcnktdGV4dFxcbiAgKTtcXG4gIC0tZHYtc2VwYXJhdG9yLWJvcmRlcjogdHJhbnNwYXJlbnQ7XFxuICAtLWR2LXBhbmV2aWV3LWhlYWRlci1ib3JkZXItY29sb3I6IHJnYig1MSwgNTEsIDUxKTtcXG4gIC0tZHYtYWN0aXZlLXNhc2gtY29sb3I6IHZhcigtLWR2LWNvbG9yLWFieXNzLWFjY2VudCk7XFxuICAtLWR2LWZsb2F0aW5nLWJveC1zaGFkb3c6IDhweCA4cHggOHB4IDBweCByZ2JhKDAsIDAsIDAsIDAuNSk7XFxuICBwYWRkaW5nOiAxMHB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZHYtY29sb3ItYWJ5c3MtZGFyayk7XFxufVxcbi5kb2Nrdmlldy10aGVtZS1hYnlzcy1zcGFjZWQgLmR2LXJlc2l6ZS1jb250YWluZXI6aGFzKD4gLmR2LWdyb3Vwdmlldykge1xcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcbn1cXG4uZG9ja3ZpZXctdGhlbWUtYWJ5c3Mtc3BhY2VkIC5kdi1zYXNoIHtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG59XFxuLmRvY2t2aWV3LXRoZW1lLWFieXNzLXNwYWNlZCAuZHYtZHJvcC10YXJnZXQtYW5jaG9yIHtcXG4gIGJvcmRlci1yYWRpdXM6IGNhbGModmFyKC0tZHYtYm9yZGVyLXJhZGl1cykgLyA0KTtcXG59XFxuLmRvY2t2aWV3LXRoZW1lLWFieXNzLXNwYWNlZCAuZHYtZHJvcC10YXJnZXQtYW5jaG9yLmR2LWRyb3AtdGFyZ2V0LWNvbnRlbnQge1xcbiAgYm9yZGVyLXJhZGl1czogdmFyKC0tZHYtYm9yZGVyLXJhZGl1cyk7XFxufVxcbi5kb2Nrdmlldy10aGVtZS1hYnlzcy1zcGFjZWQgLmR2LXJlc2l6ZS1jb250YWluZXIge1xcbiAgYm9yZGVyLXJhZGl1czogdmFyKC0tZHYtYm9yZGVyLXJhZGl1cykgIWltcG9ydGFudDtcXG4gIGJvcmRlcjogbm9uZTtcXG59XFxuLmRvY2t2aWV3LXRoZW1lLWFieXNzLXNwYWNlZCAuZHYtdGFicy1vdmVyZmxvdy1jb250YWluZXIsXFxuLmRvY2t2aWV3LXRoZW1lLWFieXNzLXNwYWNlZCAuZHYtdGFicy1vdmVyZmxvdy1kcm9wZG93bi1kZWZhdWx0IHtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG4gIGhlaWdodDogdW5zZXQgIWltcG9ydGFudDtcXG59XFxuLmRvY2t2aWV3LXRoZW1lLWFieXNzLXNwYWNlZCAuZHYtdGFiIHtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG59XFxuLmRvY2t2aWV3LXRoZW1lLWFieXNzLXNwYWNlZCAuZHYtdGFiIC5kdi1zdmcge1xcbiAgaGVpZ2h0OiA4cHg7XFxuICB3aWR0aDogOHB4O1xcbn1cXG4uZG9ja3ZpZXctdGhlbWUtYWJ5c3Mtc3BhY2VkIC5kdi1ncm91cHZpZXcge1xcbiAgYm9yZGVyLXJhZGl1czogdmFyKC0tZHYtYm9yZGVyLXJhZGl1cyk7XFxufVxcbi5kb2Nrdmlldy10aGVtZS1hYnlzcy1zcGFjZWQgLmR2LWdyb3VwdmlldyAuZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXIge1xcbiAgcGFkZGluZzogMHB4IGNhbGModmFyKC0tZHYtYm9yZGVyLXJhZGl1cykgLyAyKTtcXG59XFxuLmRvY2t2aWV3LXRoZW1lLWFieXNzLXNwYWNlZCAuZHYtZ3JvdXB2aWV3IC5kdi1jb250ZW50LWNvbnRhaW5lciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1iYWNrZ3JvdW5kLWNvbG9yKTtcXG59XFxuLmRvY2t2aWV3LXRoZW1lLWFieXNzLXNwYWNlZCAuZHYtcmVzaXplLWNvbnRhaW5lciAuZHYtZ3JvdXB2aWV3IHtcXG4gIGJvcmRlcjogMnB4IHNvbGlkIHZhcigtLWR2LWNvbG9yLWFieXNzLWRhcmspO1xcbn1cXG5cXG4uZG9ja3ZpZXctdGhlbWUtbGlnaHQtc3BhY2VkIHtcXG4gIC0tZHYtcGFuZXZpZXctYWN0aXZlLW91dGxpbmUtY29sb3I6IGRvZGdlcmJsdWU7XFxuICAtLWR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLWZvbnQtc2l6ZTogMTNweDtcXG4gIC0tZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXItaGVpZ2h0OiAzNXB4O1xcbiAgLS1kdi1kcmFnLW92ZXItYmFja2dyb3VuZC1jb2xvcjogcmdiYSg4MywgODksIDkzLCAwLjUpO1xcbiAgLS1kdi1kcmFnLW92ZXItYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIC0tZHYtdGFicy1jb250YWluZXItc2Nyb2xsYmFyLWNvbG9yOiAjODg4O1xcbiAgLS1kdi1pY29uLWhvdmVyLWJhY2tncm91bmQtY29sb3I6IHJnYmEoOTAsIDkzLCA5NCwgMC4zMSk7XFxuICAtLWR2LWZsb2F0aW5nLWJveC1zaGFkb3c6IDhweCA4cHggOHB4IDBweCByZ2JhKDgzLCA4OSwgOTMsIDAuNSk7XFxuICAtLWR2LW92ZXJsYXktei1pbmRleDogOTk5O1xcbiAgLS1kdi10YWItZm9udC1zaXplOiBpbmhlcml0O1xcbiAgLS1kdi1ib3JkZXItcmFkaXVzOiAwcHg7XFxuICAtLWR2LXRhYi1tYXJnaW46IDA7XFxuICAtLWR2LXNhc2gtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgLS1kdi1hY3RpdmUtc2FzaC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAtLWR2LWFjdGl2ZS1zYXNoLXRyYW5zaXRpb24tZHVyYXRpb246IDAuMXM7XFxuICAtLWR2LWFjdGl2ZS1zYXNoLXRyYW5zaXRpb24tZGVsYXk6IDAuNXM7XFxuICAtLWR2LXRhYi1mb250LXNpemU6IDEycHg7XFxuICAtLWR2LWJvcmRlci1yYWRpdXM6IDIwcHg7XFxuICAtLWR2LXRhYi1tYXJnaW46IDAuNXJlbSAwLjI1cmVtO1xcbiAgLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1oZWlnaHQ6IDQ0cHg7XFxuICAtLWR2LWJvcmRlci1yYWRpdXM6IDIwcHg7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgLS1kdi1kcmFnLW92ZXItYm9yZGVyOiAycHggc29saWQgcmdiKDkxLCAzMCwgMjA3KTtcXG4gIC0tZHYtZHJhZy1vdmVyLWJhY2tncm91bmQtY29sb3I6IFxcXCJcXFwiO1xcbiAgLS1kdi1ncm91cC12aWV3LWJhY2tncm91bmQtY29sb3I6ICNmNmY1Zjk7XFxuICAtLWR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLWJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgLS1kdi1hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3I6ICNlZGVkZjA7XFxuICAtLWR2LWFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yOiAjZjlmOWZhO1xcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogI2VkZWRmMDtcXG4gIC0tZHYtaW5hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcjogI2Y5ZjlmYTtcXG4gIC0tZHYtdGFiLWRpdmlkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgLS1kdi1hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWNvbG9yOiByZ2IoMTA0LCAxMDcsIDEzMCk7XFxuICAtLWR2LWFjdGl2ZWdyb3VwLWhpZGRlbnBhbmVsLXRhYi1jb2xvcjogcmdiKDE0OCwgMTUxLCAxNjkpO1xcbiAgLS1kdi1pbmFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItY29sb3I6IHJnYigxMDQsIDEwNywgMTMwKTtcXG4gIC0tZHYtaW5hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItY29sb3I6IHJnYigxNDgsIDE1MSwgMTY5KTtcXG4gIC0tZHYtc2VwYXJhdG9yLWJvcmRlcjogdHJhbnNwYXJlbnQ7XFxuICAtLWR2LXBhbmV2aWV3LWhlYWRlci1ib3JkZXItY29sb3I6IHJnYig1MSwgNTEsIDUxKTtcXG4gIC0tZHYtYWN0aXZlLXNhc2gtY29sb3I6IHJnYig5MSwgMzAsIDIwNyk7XFxuICAtLWR2LWZsb2F0aW5nLWJveC1zaGFkb3c6IDhweCA4cHggOHB4IDBweCByZ2JhKDAsIDAsIDAsIDAuMSk7XFxuICBwYWRkaW5nOiAxMHB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y2ZjVmOTtcXG4gIC0tZHYtc2Nyb2xsYmFyLWJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4yNSk7XFxufVxcbi5kb2Nrdmlldy10aGVtZS1saWdodC1zcGFjZWQgLmR2LXJlc2l6ZS1jb250YWluZXI6aGFzKD4gLmR2LWdyb3Vwdmlldykge1xcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcbn1cXG4uZG9ja3ZpZXctdGhlbWUtbGlnaHQtc3BhY2VkIC5kdi1zYXNoIHtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG59XFxuLmRvY2t2aWV3LXRoZW1lLWxpZ2h0LXNwYWNlZCAuZHYtZHJvcC10YXJnZXQtYW5jaG9yIHtcXG4gIGJvcmRlci1yYWRpdXM6IGNhbGModmFyKC0tZHYtYm9yZGVyLXJhZGl1cykgLyA0KTtcXG59XFxuLmRvY2t2aWV3LXRoZW1lLWxpZ2h0LXNwYWNlZCAuZHYtZHJvcC10YXJnZXQtYW5jaG9yLmR2LWRyb3AtdGFyZ2V0LWNvbnRlbnQge1xcbiAgYm9yZGVyLXJhZGl1czogdmFyKC0tZHYtYm9yZGVyLXJhZGl1cyk7XFxufVxcbi5kb2Nrdmlldy10aGVtZS1saWdodC1zcGFjZWQgLmR2LXJlc2l6ZS1jb250YWluZXIge1xcbiAgYm9yZGVyLXJhZGl1czogdmFyKC0tZHYtYm9yZGVyLXJhZGl1cykgIWltcG9ydGFudDtcXG4gIGJvcmRlcjogbm9uZTtcXG59XFxuLmRvY2t2aWV3LXRoZW1lLWxpZ2h0LXNwYWNlZCAuZHYtdGFicy1vdmVyZmxvdy1jb250YWluZXIsXFxuLmRvY2t2aWV3LXRoZW1lLWxpZ2h0LXNwYWNlZCAuZHYtdGFicy1vdmVyZmxvdy1kcm9wZG93bi1kZWZhdWx0IHtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG4gIGhlaWdodDogdW5zZXQgIWltcG9ydGFudDtcXG59XFxuLmRvY2t2aWV3LXRoZW1lLWxpZ2h0LXNwYWNlZCAuZHYtdGFiIHtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG59XFxuLmRvY2t2aWV3LXRoZW1lLWxpZ2h0LXNwYWNlZCAuZHYtdGFiIC5kdi1zdmcge1xcbiAgaGVpZ2h0OiA4cHg7XFxuICB3aWR0aDogOHB4O1xcbn1cXG4uZG9ja3ZpZXctdGhlbWUtbGlnaHQtc3BhY2VkIC5kdi1ncm91cHZpZXcge1xcbiAgYm9yZGVyLXJhZGl1czogdmFyKC0tZHYtYm9yZGVyLXJhZGl1cyk7XFxufVxcbi5kb2Nrdmlldy10aGVtZS1saWdodC1zcGFjZWQgLmR2LWdyb3VwdmlldyAuZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXIge1xcbiAgcGFkZGluZzogMHB4IGNhbGModmFyKC0tZHYtYm9yZGVyLXJhZGl1cykgLyAyKTtcXG59XFxuLmRvY2t2aWV3LXRoZW1lLWxpZ2h0LXNwYWNlZCAuZHYtZ3JvdXB2aWV3IC5kdi1jb250ZW50LWNvbnRhaW5lciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1iYWNrZ3JvdW5kLWNvbG9yKTtcXG59XFxuLmRvY2t2aWV3LXRoZW1lLWxpZ2h0LXNwYWNlZCAuZHYtcmVzaXplLWNvbnRhaW5lciAuZHYtZ3JvdXB2aWV3IHtcXG4gIGJvcmRlcjogMnB4IHNvbGlkIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4xKTtcXG59XFxuLmR2LWRyb3AtdGFyZ2V0LWNvbnRhaW5lciB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB6LWluZGV4OiA5OTk5O1xcbiAgdG9wOiAwcHg7XFxuICBsZWZ0OiAwcHg7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICB3aWR0aDogMTAwJTtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIC0tZHYtdHJhbnNpdGlvbi1kdXJhdGlvbjogMzAwbXM7XFxufVxcbi5kdi1kcm9wLXRhcmdldC1jb250YWluZXIgLmR2LWRyb3AtdGFyZ2V0LWFuY2hvciB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBib3JkZXI6IHZhcigtLWR2LWRyYWctb3Zlci1ib3JkZXIpO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZHYtZHJhZy1vdmVyLWJhY2tncm91bmQtY29sb3IpO1xcbiAgb3BhY2l0eTogMTtcXG4gIC8qIEdQVSBvcHRpbWl6YXRpb25zICovXFxuICB3aWxsLWNoYW5nZTogdHJhbnNmb3JtLCBvcGFjaXR5O1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcXG4gIGJhY2tmYWNlLXZpc2liaWxpdHk6IGhpZGRlbjtcXG4gIGNvbnRhaW46IGxheW91dCBwYWludDtcXG4gIHRyYW5zaXRpb246IG9wYWNpdHkgdmFyKC0tZHYtdHJhbnNpdGlvbi1kdXJhdGlvbikgZWFzZS1pbiwgdHJhbnNmb3JtIHZhcigtLWR2LXRyYW5zaXRpb24tZHVyYXRpb24pIGVhc2Utb3V0O1xcbn1cXG4uZHYtZHJvcC10YXJnZXQge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgLS1kdi10cmFuc2l0aW9uLWR1cmF0aW9uOiA3MG1zO1xcbn1cXG4uZHYtZHJvcC10YXJnZXQgPiAuZHYtZHJvcC10YXJnZXQtZHJvcHpvbmUge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgbGVmdDogMHB4O1xcbiAgdG9wOiAwcHg7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICB3aWR0aDogMTAwJTtcXG4gIHotaW5kZXg6IDEwMDA7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG59XFxuLmR2LWRyb3AtdGFyZ2V0ID4gLmR2LWRyb3AtdGFyZ2V0LWRyb3B6b25lID4gLmR2LWRyb3AtdGFyZ2V0LXNlbGVjdGlvbiB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBib3JkZXI6IHZhcigtLWR2LWRyYWctb3Zlci1ib3JkZXIpO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZHYtZHJhZy1vdmVyLWJhY2tncm91bmQtY29sb3IpO1xcbiAgdHJhbnNpdGlvbjogdG9wIHZhcigtLWR2LXRyYW5zaXRpb24tZHVyYXRpb24pIGVhc2Utb3V0LCBsZWZ0IHZhcigtLWR2LXRyYW5zaXRpb24tZHVyYXRpb24pIGVhc2Utb3V0LCB3aWR0aCB2YXIoLS1kdi10cmFuc2l0aW9uLWR1cmF0aW9uKSBlYXNlLW91dCwgaGVpZ2h0IHZhcigtLWR2LXRyYW5zaXRpb24tZHVyYXRpb24pIGVhc2Utb3V0LCBvcGFjaXR5IHZhcigtLWR2LXRyYW5zaXRpb24tZHVyYXRpb24pIGVhc2Utb3V0O1xcbiAgd2lsbC1jaGFuZ2U6IHRyYW5zZm9ybTtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbn1cXG4uZHYtZHJvcC10YXJnZXQgPiAuZHYtZHJvcC10YXJnZXQtZHJvcHpvbmUgPiAuZHYtZHJvcC10YXJnZXQtc2VsZWN0aW9uLmR2LWRyb3AtdGFyZ2V0LXRvcC5kdi1kcm9wLXRhcmdldC1zbWFsbC12ZXJ0aWNhbCB7XFxuICBib3JkZXItdG9wOiAxcHggc29saWQgdmFyKC0tZHYtZHJhZy1vdmVyLWJvcmRlci1jb2xvcik7XFxufVxcbi5kdi1kcm9wLXRhcmdldCA+IC5kdi1kcm9wLXRhcmdldC1kcm9wem9uZSA+IC5kdi1kcm9wLXRhcmdldC1zZWxlY3Rpb24uZHYtZHJvcC10YXJnZXQtYm90dG9tLmR2LWRyb3AtdGFyZ2V0LXNtYWxsLXZlcnRpY2FsIHtcXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCB2YXIoLS1kdi1kcmFnLW92ZXItYm9yZGVyLWNvbG9yKTtcXG59XFxuLmR2LWRyb3AtdGFyZ2V0ID4gLmR2LWRyb3AtdGFyZ2V0LWRyb3B6b25lID4gLmR2LWRyb3AtdGFyZ2V0LXNlbGVjdGlvbi5kdi1kcm9wLXRhcmdldC1sZWZ0LmR2LWRyb3AtdGFyZ2V0LXNtYWxsLWhvcml6b250YWwge1xcbiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCB2YXIoLS1kdi1kcmFnLW92ZXItYm9yZGVyLWNvbG9yKTtcXG59XFxuLmR2LWRyb3AtdGFyZ2V0ID4gLmR2LWRyb3AtdGFyZ2V0LWRyb3B6b25lID4gLmR2LWRyb3AtdGFyZ2V0LXNlbGVjdGlvbi5kdi1kcm9wLXRhcmdldC1yaWdodC5kdi1kcm9wLXRhcmdldC1zbWFsbC1ob3Jpem9udGFsIHtcXG4gIGJvcmRlci1yaWdodDogMXB4IHNvbGlkIHZhcigtLWR2LWRyYWctb3Zlci1ib3JkZXItY29sb3IpO1xcbn1cXG4uZHYtZG9ja3ZpZXcge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZHYtZ3JvdXAtdmlldy1iYWNrZ3JvdW5kLWNvbG9yKTtcXG4gIGNvbnRhaW46IGxheW91dDtcXG59XFxuLmR2LWRvY2t2aWV3IC5kdi13YXRlcm1hcmstY29udGFpbmVyIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMHB4O1xcbiAgbGVmdDogMHB4O1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgd2lkdGg6IDEwMCU7XFxuICB6LWluZGV4OiAxO1xcbn1cXG4uZHYtZG9ja3ZpZXcgLmR2LW92ZXJsYXktcmVuZGVyLWNvbnRhaW5lciB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcblxcbi5kdi1ncm91cHZpZXcuZHYtYWN0aXZlLWdyb3VwID4gLmR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyIC5kdi10YWJzLWNvbnRhaW5lciA+IC5kdi10YWIuZHYtYWN0aXZlLXRhYiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kdi1hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3IpO1xcbiAgY29sb3I6IHZhcigtLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItY29sb3IpO1xcbn1cXG4uZHYtZ3JvdXB2aWV3LmR2LWFjdGl2ZS1ncm91cCA+IC5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lciAuZHYtdGFicy1jb250YWluZXIgPiAuZHYtdGFiLmR2LWluYWN0aXZlLXRhYiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kdi1hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcik7XFxuICBjb2xvcjogdmFyKC0tZHYtYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWNvbG9yKTtcXG59XFxuLmR2LWdyb3Vwdmlldy5kdi1pbmFjdGl2ZS1ncm91cCA+IC5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lciAuZHYtdGFicy1jb250YWluZXIgPiAuZHYtdGFiLmR2LWFjdGl2ZS10YWIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZHYtaW5hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3IpO1xcbiAgY29sb3I6IHZhcigtLWR2LWluYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1jb2xvcik7XFxufVxcbi5kdi1ncm91cHZpZXcuZHYtaW5hY3RpdmUtZ3JvdXAgPiAuZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXIgLmR2LXRhYnMtY29udGFpbmVyID4gLmR2LXRhYi5kdi1pbmFjdGl2ZS10YWIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZHYtaW5hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcik7XFxuICBjb2xvcjogdmFyKC0tZHYtaW5hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItY29sb3IpO1xcbn1cXG5cXG4vKipcXG4gKiB3aGVuIGEgdGFiIGlzIGRyYWdnZWQgd2UgbG9zZSB0aGUgYWJvdmUgc3R5bGluZ3MgYmVjYXVzZSB0aGV5IGFyZSBjb25kaXRpb25hbCBvbiBwYXJlbnQgZWxlbWVudHNcXG4gKiB0aGVyZWZvcmUgd2UgYWxzbyBzZXQgc29tZSBzdHlsaW5ncyBmb3IgdGhlIGRyYWdnaW5nIGV2ZW50XFxuICoqL1xcbi5kdi10YWIuZHYtdGFiLWRyYWdnaW5nIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcik7XFxuICBjb2xvcjogdmFyKC0tZHYtYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1jb2xvcik7XFxufVxcbi5kdi1ncm91cHZpZXcge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kdi1ncm91cC12aWV3LWJhY2tncm91bmQtY29sb3IpO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG59XFxuLmR2LWdyb3Vwdmlldzpmb2N1cyB7XFxuICBvdXRsaW5lOiBub25lO1xcbn1cXG4uZHYtZ3JvdXB2aWV3ID4gLmR2LWNvbnRlbnQtY29udGFpbmVyIHtcXG4gIGZsZXgtZ3JvdzogMTtcXG4gIG1pbi1oZWlnaHQ6IDA7XFxuICBvdXRsaW5lOiBub25lO1xcbn1cXG4uZHYtcm9vdC13cmFwcGVyIHtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG4uZHYtZ3JpZC12aWV3LFxcbi5kdi1icmFuY2gtbm9kZSB7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuLmR2LWRlYnVnIC5kdi1yZXNpemUtY29udGFpbmVyIC5kdi1yZXNpemUtaGFuZGxlLXRvcCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZWQ7XFxufVxcbi5kdi1kZWJ1ZyAuZHYtcmVzaXplLWNvbnRhaW5lciAuZHYtcmVzaXplLWhhbmRsZS1ib3R0b20ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogZ3JlZW47XFxufVxcbi5kdi1kZWJ1ZyAuZHYtcmVzaXplLWNvbnRhaW5lciAuZHYtcmVzaXplLWhhbmRsZS1sZWZ0IHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHllbGxvdztcXG59XFxuLmR2LWRlYnVnIC5kdi1yZXNpemUtY29udGFpbmVyIC5kdi1yZXNpemUtaGFuZGxlLXJpZ2h0IHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGJsdWU7XFxufVxcbi5kdi1kZWJ1ZyAuZHYtcmVzaXplLWNvbnRhaW5lciAuZHYtcmVzaXplLWhhbmRsZS10b3BsZWZ0LFxcbi5kdi1kZWJ1ZyAuZHYtcmVzaXplLWNvbnRhaW5lciAuZHYtcmVzaXplLWhhbmRsZS10b3ByaWdodCxcXG4uZHYtZGVidWcgLmR2LXJlc2l6ZS1jb250YWluZXIgLmR2LXJlc2l6ZS1oYW5kbGUtYm90dG9tbGVmdCxcXG4uZHYtZGVidWcgLmR2LXJlc2l6ZS1jb250YWluZXIgLmR2LXJlc2l6ZS1oYW5kbGUtYm90dG9tcmlnaHQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogY3lhbjtcXG59XFxuXFxuLmR2LXJlc2l6ZS1jb250YWluZXIge1xcbiAgLS1kdi1vdmVybGF5LXotaW5kZXg6IHZhcigtLWR2LW92ZXJsYXktei1pbmRleCwgOTk5KTtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHotaW5kZXg6IGNhbGModmFyKC0tZHYtb3ZlcmxheS16LWluZGV4KSAtIDIpO1xcbiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tZHYtdGFiLWRpdmlkZXItY29sb3IpO1xcbiAgYm94LXNoYWRvdzogdmFyKC0tZHYtZmxvYXRpbmctYm94LXNoYWRvdyk7XFxuICAvKiBHUFUgb3B0aW1pemF0aW9ucyBmb3IgZmxvYXRpbmcgZ3JvdXAgbW92ZW1lbnQgKi9cXG4gIHdpbGwtY2hhbmdlOiB0cmFuc2Zvcm0sIG9wYWNpdHk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xcbiAgYmFja2ZhY2UtdmlzaWJpbGl0eTogaGlkZGVuO1xcbn1cXG4uZHYtcmVzaXplLWNvbnRhaW5lci5kdi1oaWRkZW4ge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuLmR2LXJlc2l6ZS1jb250YWluZXIuZHYtcmVzaXplLWNvbnRhaW5lci1kcmFnZ2luZyB7XFxuICBvcGFjaXR5OiAwLjU7XFxuICAvKiBFbmhhbmNlZCBHUFUgYWNjZWxlcmF0aW9uIGR1cmluZyBkcmFnICovXFxuICB3aWxsLWNoYW5nZTogdHJhbnNmb3JtLCBvcGFjaXR5O1xcbn1cXG4uZHYtcmVzaXplLWNvbnRhaW5lciAuZHYtcmVzaXplLWhhbmRsZS10b3Age1xcbiAgaGVpZ2h0OiA0cHg7XFxuICB3aWR0aDogY2FsYygxMDAlIC0gOHB4KTtcXG4gIGxlZnQ6IDRweDtcXG4gIHRvcDogLTJweDtcXG4gIHotaW5kZXg6IHZhcigtLWR2LW92ZXJsYXktei1pbmRleCk7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBjdXJzb3I6IG5zLXJlc2l6ZTtcXG59XFxuLmR2LXJlc2l6ZS1jb250YWluZXIgLmR2LXJlc2l6ZS1oYW5kbGUtYm90dG9tIHtcXG4gIGhlaWdodDogNHB4O1xcbiAgd2lkdGg6IGNhbGMoMTAwJSAtIDhweCk7XFxuICBsZWZ0OiA0cHg7XFxuICBib3R0b206IC0ycHg7XFxuICB6LWluZGV4OiB2YXIoLS1kdi1vdmVybGF5LXotaW5kZXgpO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgY3Vyc29yOiBucy1yZXNpemU7XFxufVxcbi5kdi1yZXNpemUtY29udGFpbmVyIC5kdi1yZXNpemUtaGFuZGxlLWxlZnQge1xcbiAgaGVpZ2h0OiBjYWxjKDEwMCUgLSA4cHgpO1xcbiAgd2lkdGg6IDRweDtcXG4gIGxlZnQ6IC0ycHg7XFxuICB0b3A6IDRweDtcXG4gIHotaW5kZXg6IHZhcigtLWR2LW92ZXJsYXktei1pbmRleCk7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBjdXJzb3I6IGV3LXJlc2l6ZTtcXG59XFxuLmR2LXJlc2l6ZS1jb250YWluZXIgLmR2LXJlc2l6ZS1oYW5kbGUtcmlnaHQge1xcbiAgaGVpZ2h0OiBjYWxjKDEwMCUgLSA4cHgpO1xcbiAgd2lkdGg6IDRweDtcXG4gIHJpZ2h0OiAtMnB4O1xcbiAgdG9wOiA0cHg7XFxuICB6LWluZGV4OiB2YXIoLS1kdi1vdmVybGF5LXotaW5kZXgpO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgY3Vyc29yOiBldy1yZXNpemU7XFxufVxcbi5kdi1yZXNpemUtY29udGFpbmVyIC5kdi1yZXNpemUtaGFuZGxlLXRvcGxlZnQge1xcbiAgaGVpZ2h0OiA0cHg7XFxuICB3aWR0aDogNHB4O1xcbiAgdG9wOiAtMnB4O1xcbiAgbGVmdDogLTJweDtcXG4gIHotaW5kZXg6IHZhcigtLWR2LW92ZXJsYXktei1pbmRleCk7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBjdXJzb3I6IG53LXJlc2l6ZTtcXG59XFxuLmR2LXJlc2l6ZS1jb250YWluZXIgLmR2LXJlc2l6ZS1oYW5kbGUtdG9wcmlnaHQge1xcbiAgaGVpZ2h0OiA0cHg7XFxuICB3aWR0aDogNHB4O1xcbiAgcmlnaHQ6IC0ycHg7XFxuICB0b3A6IC0ycHg7XFxuICB6LWluZGV4OiB2YXIoLS1kdi1vdmVybGF5LXotaW5kZXgpO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgY3Vyc29yOiBuZS1yZXNpemU7XFxufVxcbi5kdi1yZXNpemUtY29udGFpbmVyIC5kdi1yZXNpemUtaGFuZGxlLWJvdHRvbWxlZnQge1xcbiAgaGVpZ2h0OiA0cHg7XFxuICB3aWR0aDogNHB4O1xcbiAgbGVmdDogLTJweDtcXG4gIGJvdHRvbTogLTJweDtcXG4gIHotaW5kZXg6IHZhcigtLWR2LW92ZXJsYXktei1pbmRleCk7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBjdXJzb3I6IHN3LXJlc2l6ZTtcXG59XFxuLmR2LXJlc2l6ZS1jb250YWluZXIgLmR2LXJlc2l6ZS1oYW5kbGUtYm90dG9tcmlnaHQge1xcbiAgaGVpZ2h0OiA0cHg7XFxuICB3aWR0aDogNHB4O1xcbiAgcmlnaHQ6IC0ycHg7XFxuICBib3R0b206IC0ycHg7XFxuICB6LWluZGV4OiB2YXIoLS1kdi1vdmVybGF5LXotaW5kZXgpO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgY3Vyc29yOiBzZS1yZXNpemU7XFxufVxcbi5kdi1yZW5kZXItb3ZlcmxheSB7XFxuICAtLWR2LW92ZXJsYXktei1pbmRleDogdmFyKC0tZHYtb3ZlcmxheS16LWluZGV4LCA5OTkpO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgei1pbmRleDogMTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgY29udGFpbjogbGF5b3V0IHBhaW50O1xcbiAgaXNvbGF0aW9uOiBpc29sYXRlO1xcbiAgLyogR1BVIG9wdGltaXphdGlvbnMgKi9cXG4gIHdpbGwtY2hhbmdlOiB0cmFuc2Zvcm07XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xcbiAgYmFja2ZhY2UtdmlzaWJpbGl0eTogaGlkZGVuO1xcbn1cXG4uZHYtcmVuZGVyLW92ZXJsYXkuZHYtcmVuZGVyLW92ZXJsYXktZmxvYXQge1xcbiAgei1pbmRleDogY2FsYyh2YXIoLS1kdi1vdmVybGF5LXotaW5kZXgpIC0gMSk7XFxufVxcblxcbi5kdi1kZWJ1ZyAuZHYtcmVuZGVyLW92ZXJsYXkge1xcbiAgb3V0bGluZTogMXB4IHNvbGlkIHJlZDtcXG4gIG91dGxpbmUtb2Zmc2V0OiAtMTtcXG59XFxuLmR2LXBhbmUtY29udGFpbmVyIHtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG4uZHYtcGFuZS1jb250YWluZXIuZHYtYW5pbWF0ZWQgLmR2LXZpZXcge1xcbiAgLyogR1BVIG9wdGltaXphdGlvbnMgZm9yIHNtb290aCBwYW5lIGFuaW1hdGlvbnMgKi9cXG4gIHdpbGwtY2hhbmdlOiB0cmFuc2Zvcm07XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xcbiAgYmFja2ZhY2UtdmlzaWJpbGl0eTogaGlkZGVuO1xcbiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuMTVzIGVhc2Utb3V0O1xcbn1cXG4uZHYtcGFuZS1jb250YWluZXIgLmR2LXZpZXcge1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgcGFkZGluZzogMHB4ICFpbXBvcnRhbnQ7XFxufVxcbi5kdi1wYW5lLWNvbnRhaW5lciAuZHYtdmlldzpub3QoOmZpcnN0LWNoaWxkKTo6YmVmb3JlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7XFxufVxcbi5kdi1wYW5lLWNvbnRhaW5lciAuZHYtdmlldzpub3QoOmZpcnN0LWNoaWxkKSAuZHYtcGFuZSA+IC5kdi1wYW5lLWhlYWRlciB7XFxuICBib3JkZXItdG9wOiAxcHggc29saWQgdmFyKC0tZHYtcGFuZXZpZXctaGVhZGVyLWJvcmRlci1jb2xvcik7XFxufVxcbi5kdi1wYW5lLWNvbnRhaW5lciAuZHYtdmlldyAuZHYtZGVmYXVsdC1oZWFkZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZHYtZ3JvdXAtdmlldy1iYWNrZ3JvdW5kLWNvbG9yKTtcXG4gIGNvbG9yOiB2YXIoLS1kdi1hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWNvbG9yKTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBwYWRkaW5nOiAwcHggOHB4O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG4uZHYtcGFuZS1jb250YWluZXIgLmR2LXZpZXcgLmR2LWRlZmF1bHQtaGVhZGVyIC5kdi1wYW5lLWhlYWRlci1pY29uIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcbi5kdi1wYW5lLWNvbnRhaW5lciAuZHYtdmlldyAuZHYtZGVmYXVsdC1oZWFkZXIgPiBzcGFuIHtcXG4gIHBhZGRpbmctbGVmdDogOHB4O1xcbiAgZmxleC1ncm93OiAxO1xcbn1cXG4uZHYtcGFuZS1jb250YWluZXI6Zmlyc3Qtb2YtdHlwZSA+IC5kdi1wYW5lID4gLmR2LXBhbmUtaGVhZGVyIHtcXG4gIGJvcmRlci10b3A6IG5vbmUgIWltcG9ydGFudDtcXG59XFxuLmR2LXBhbmUtY29udGFpbmVyIC5kdi1wYW5lIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIGhlaWdodDogMTAwJTtcXG59XFxuLmR2LXBhbmUtY29udGFpbmVyIC5kdi1wYW5lIC5kdi1wYW5lLWhlYWRlciB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBvdXRsaW5lOiBub25lO1xcbn1cXG4uZHYtcGFuZS1jb250YWluZXIgLmR2LXBhbmUgLmR2LXBhbmUtaGVhZGVyLmR2LXBhbmUtZHJhZ2dhYmxlIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuLmR2LXBhbmUtY29udGFpbmVyIC5kdi1wYW5lIC5kdi1wYW5lLWhlYWRlcjpmb2N1czpiZWZvcmUsIC5kdi1wYW5lLWNvbnRhaW5lciAuZHYtcGFuZSAuZHYtcGFuZS1oZWFkZXI6Zm9jdXMtd2l0aGluOmJlZm9yZSB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICBsZWZ0OiAwO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICB6LWluZGV4OiA1O1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG4gIG91dGxpbmU6IDFweCBzb2xpZDtcXG4gIG91dGxpbmUtd2lkdGg6IC0xcHg7XFxuICBvdXRsaW5lLXN0eWxlOiBzb2xpZDtcXG4gIG91dGxpbmUtb2Zmc2V0OiAtMXB4O1xcbiAgb3V0bGluZS1jb2xvcjogdmFyKC0tZHYtcGFuZXZpZXctYWN0aXZlLW91dGxpbmUtY29sb3IpO1xcbn1cXG4uZHYtcGFuZS1jb250YWluZXIgLmR2LXBhbmUgLmR2LXBhbmUtYm9keSB7XFxuICBvdmVyZmxvdy15OiBhdXRvO1xcbiAgb3ZlcmZsb3cteDogaGlkZGVuO1xcbiAgZmxleC1ncm93OiAxO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgb3V0bGluZTogbm9uZTtcXG59XFxuLmR2LXBhbmUtY29udGFpbmVyIC5kdi1wYW5lIC5kdi1wYW5lLWJvZHk6Zm9jdXM6YmVmb3JlLCAuZHYtcGFuZS1jb250YWluZXIgLmR2LXBhbmUgLmR2LXBhbmUtYm9keTpmb2N1cy13aXRoaW46YmVmb3JlIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHotaW5kZXg6IDU7XFxuICBjb250ZW50OiBcXFwiXFxcIjtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbiAgb3V0bGluZTogMXB4IHNvbGlkO1xcbiAgb3V0bGluZS13aWR0aDogLTFweDtcXG4gIG91dGxpbmUtc3R5bGU6IHNvbGlkO1xcbiAgb3V0bGluZS1vZmZzZXQ6IC0xcHg7XFxuICBvdXRsaW5lLWNvbG9yOiB2YXIoLS1kdi1wYW5ldmlldy1hY3RpdmUtb3V0bGluZS1jb2xvcik7XFxufVxcbi5kdi1kZWJ1ZyAuZHYtc3BsaXQtdmlldy1jb250YWluZXIgLmR2LXNhc2gtY29udGFpbmVyIC5kdi1zYXNoLmR2LWVuYWJsZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XFxufVxcbi5kdi1kZWJ1ZyAuZHYtc3BsaXQtdmlldy1jb250YWluZXIgLmR2LXNhc2gtY29udGFpbmVyIC5kdi1zYXNoLmR2LWRpc2FibGVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IG9yYW5nZTtcXG59XFxuLmR2LWRlYnVnIC5kdi1zcGxpdC12aWV3LWNvbnRhaW5lciAuZHYtc2FzaC1jb250YWluZXIgLmR2LXNhc2guZHYtbWF4aW11bSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBncmVlbjtcXG59XFxuLmR2LWRlYnVnIC5kdi1zcGxpdC12aWV3LWNvbnRhaW5lciAuZHYtc2FzaC1jb250YWluZXIgLmR2LXNhc2guZHYtbWluaW11bSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZWQ7XFxufVxcblxcbi5kdi1zcGxpdC12aWV3LWNvbnRhaW5lciB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcbi5kdi1zcGxpdC12aWV3LWNvbnRhaW5lci5kdi1zcGxpdHZpZXctZGlzYWJsZWQgPiAuZHYtc2FzaC1jb250YWluZXIgPiAuZHYtc2FzaCB7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG59XFxuLmR2LXNwbGl0LXZpZXctY29udGFpbmVyLmR2LWFuaW1hdGlvbiAuZHYtdmlldyxcXG4uZHYtc3BsaXQtdmlldy1jb250YWluZXIuZHYtYW5pbWF0aW9uIC5kdi1zYXNoIHtcXG4gIC8qIEdQVSBvcHRpbWl6YXRpb25zIGZvciBzbW9vdGggYW5pbWF0aW9ucyAqL1xcbiAgd2lsbC1jaGFuZ2U6IHRyYW5zZm9ybTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XFxuICBiYWNrZmFjZS12aXNpYmlsaXR5OiBoaWRkZW47XFxuICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4xNXMgZWFzZS1vdXQ7XFxufVxcbi5kdi1zcGxpdC12aWV3LWNvbnRhaW5lci5kdi1ob3Jpem9udGFsIHtcXG4gIGhlaWdodDogMTAwJTtcXG59XFxuLmR2LXNwbGl0LXZpZXctY29udGFpbmVyLmR2LWhvcml6b250YWwgPiAuZHYtc2FzaC1jb250YWluZXIgPiAuZHYtc2FzaCB7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICB3aWR0aDogNHB4O1xcbn1cXG4uZHYtc3BsaXQtdmlldy1jb250YWluZXIuZHYtaG9yaXpvbnRhbCA+IC5kdi1zYXNoLWNvbnRhaW5lciA+IC5kdi1zYXNoLmR2LWVuYWJsZWQge1xcbiAgY3Vyc29yOiBldy1yZXNpemU7XFxufVxcbi5kdi1zcGxpdC12aWV3LWNvbnRhaW5lci5kdi1ob3Jpem9udGFsID4gLmR2LXNhc2gtY29udGFpbmVyID4gLmR2LXNhc2guZHYtZGlzYWJsZWQge1xcbiAgY3Vyc29yOiBkZWZhdWx0O1xcbn1cXG4uZHYtc3BsaXQtdmlldy1jb250YWluZXIuZHYtaG9yaXpvbnRhbCA+IC5kdi1zYXNoLWNvbnRhaW5lciA+IC5kdi1zYXNoLmR2LW1heGltdW0ge1xcbiAgY3Vyc29yOiB3LXJlc2l6ZTtcXG59XFxuLmR2LXNwbGl0LXZpZXctY29udGFpbmVyLmR2LWhvcml6b250YWwgPiAuZHYtc2FzaC1jb250YWluZXIgPiAuZHYtc2FzaC5kdi1taW5pbXVtIHtcXG4gIGN1cnNvcjogZS1yZXNpemU7XFxufVxcbi5kdi1zcGxpdC12aWV3LWNvbnRhaW5lci5kdi1ob3Jpem9udGFsID4gLmR2LXZpZXctY29udGFpbmVyID4gLmR2LXZpZXc6bm90KDpmaXJzdC1jaGlsZCk6OmJlZm9yZSB7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICB3aWR0aDogMXB4O1xcbn1cXG4uZHYtc3BsaXQtdmlldy1jb250YWluZXIuZHYtdmVydGljYWwge1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcbi5kdi1zcGxpdC12aWV3LWNvbnRhaW5lci5kdi12ZXJ0aWNhbCA+IC5kdi1zYXNoLWNvbnRhaW5lciA+IC5kdi1zYXNoIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiA0cHg7XFxufVxcbi5kdi1zcGxpdC12aWV3LWNvbnRhaW5lci5kdi12ZXJ0aWNhbCA+IC5kdi1zYXNoLWNvbnRhaW5lciA+IC5kdi1zYXNoLmR2LWVuYWJsZWQge1xcbiAgY3Vyc29yOiBucy1yZXNpemU7XFxufVxcbi5kdi1zcGxpdC12aWV3LWNvbnRhaW5lci5kdi12ZXJ0aWNhbCA+IC5kdi1zYXNoLWNvbnRhaW5lciA+IC5kdi1zYXNoLmR2LWRpc2FibGVkIHtcXG4gIGN1cnNvcjogZGVmYXVsdDtcXG59XFxuLmR2LXNwbGl0LXZpZXctY29udGFpbmVyLmR2LXZlcnRpY2FsID4gLmR2LXNhc2gtY29udGFpbmVyID4gLmR2LXNhc2guZHYtbWF4aW11bSB7XFxuICBjdXJzb3I6IG4tcmVzaXplO1xcbn1cXG4uZHYtc3BsaXQtdmlldy1jb250YWluZXIuZHYtdmVydGljYWwgPiAuZHYtc2FzaC1jb250YWluZXIgPiAuZHYtc2FzaC5kdi1taW5pbXVtIHtcXG4gIGN1cnNvcjogcy1yZXNpemU7XFxufVxcbi5kdi1zcGxpdC12aWV3LWNvbnRhaW5lci5kdi12ZXJ0aWNhbCA+IC5kdi12aWV3LWNvbnRhaW5lciA+IC5kdi12aWV3IHtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG4uZHYtc3BsaXQtdmlldy1jb250YWluZXIuZHYtdmVydGljYWwgPiAuZHYtdmlldy1jb250YWluZXIgPiAuZHYtdmlldzpub3QoOmZpcnN0LWNoaWxkKTo6YmVmb3JlIHtcXG4gIGhlaWdodDogMXB4O1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcbi5kdi1zcGxpdC12aWV3LWNvbnRhaW5lciAuZHYtc2FzaC1jb250YWluZXIge1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxufVxcbi5kdi1zcGxpdC12aWV3LWNvbnRhaW5lciAuZHYtc2FzaC1jb250YWluZXIgLmR2LXNhc2gge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgei1pbmRleDogOTk7XFxuICBvdXRsaW5lOiBub25lO1xcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcbiAgLW1vei11c2VyLXNlbGVjdDogbm9uZTtcXG4gIC1tcy11c2VyLXNlbGVjdDogbm9uZTtcXG4gIHRvdWNoLWFjdGlvbjogbm9uZTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWR2LXNhc2gtY29sb3IsIHRyYW5zcGFyZW50KTtcXG59XFxuLmR2LXNwbGl0LXZpZXctY29udGFpbmVyIC5kdi1zYXNoLWNvbnRhaW5lciAuZHYtc2FzaDpub3QoLmRpc2FibGVkKTphY3RpdmUsIC5kdi1zcGxpdC12aWV3LWNvbnRhaW5lciAuZHYtc2FzaC1jb250YWluZXIgLmR2LXNhc2g6bm90KC5kaXNhYmxlZCk6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZHYtYWN0aXZlLXNhc2gtY29sb3IsIHRyYW5zcGFyZW50KTtcXG4gIHRyYW5zaXRpb24tcHJvcGVydHk6IGJhY2tncm91bmQtY29sb3I7XFxuICB0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1pbi1vdXQ7XFxuICB0cmFuc2l0aW9uLWR1cmF0aW9uOiB2YXIoLS1kdi1hY3RpdmUtc2FzaC10cmFuc2l0aW9uLWR1cmF0aW9uLCAwLjFzKTtcXG4gIHRyYW5zaXRpb24tZGVsYXk6IHZhcigtLWR2LWFjdGl2ZS1zYXNoLXRyYW5zaXRpb24tZGVsYXksIDAuNXMpO1xcbn1cXG4uZHYtc3BsaXQtdmlldy1jb250YWluZXIgLmR2LXZpZXctY29udGFpbmVyIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG4uZHYtc3BsaXQtdmlldy1jb250YWluZXIgLmR2LXZpZXctY29udGFpbmVyIC5kdi12aWV3IHtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBvdmVyZmxvdzogYXV0bztcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG59XFxuLmR2LXNwbGl0LXZpZXctY29udGFpbmVyLmR2LXNlcGFyYXRvci1ib3JkZXIgLmR2LXZpZXc6bm90KDpmaXJzdC1jaGlsZCk6OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiIFxcXCI7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICBsZWZ0OiAwO1xcbiAgei1pbmRleDogNTtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZHYtc2VwYXJhdG9yLWJvcmRlcik7XFxufVxcbi5kdi1kcmFnZ2VkIHtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMHB4LCAwcHgsIDBweCk7IC8qIGZvcmNlcyB0YWIgdG8gYmUgZHJhd24gb24gYSBzZXBhcmF0ZSBsYXllciAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvdnNjb2RlL2lzc3Vlcy8xODczMykgKi9cXG59XFxuXFxuLmR2LXRhYiB7XFxuICBmbGV4LXNocmluazogMDtcXG59XFxuLmR2LXRhYjpmb2N1cy13aXRoaW4sIC5kdi10YWI6Zm9jdXMge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG4uZHYtdGFiOmZvY3VzLXdpdGhpbjo6YWZ0ZXIsIC5kdi10YWI6Zm9jdXM6OmFmdGVyIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgd2lkdGg6IDEwMCU7XFxuICB0b3A6IDBweDtcXG4gIGxlZnQ6IDBweDtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbiAgb3V0bGluZTogMXB4IHNvbGlkIHZhcigtLWR2LXRhYi1kaXZpZGVyLWNvbG9yKSAhaW1wb3J0YW50O1xcbiAgb3V0bGluZS1vZmZzZXQ6IC0xcHg7XFxuICB6LWluZGV4OiA1O1xcbn1cXG4uZHYtdGFiLmR2LXRhYi1kcmFnZ2luZyAuZHYtZGVmYXVsdC10YWItYWN0aW9uIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItY29sb3IpO1xcbn1cXG4uZHYtdGFiLmR2LWFjdGl2ZS10YWIgLmR2LWRlZmF1bHQtdGFiIC5kdi1kZWZhdWx0LXRhYi1hY3Rpb24ge1xcbiAgdmlzaWJpbGl0eTogdmlzaWJsZTtcXG59XFxuLmR2LXRhYi5kdi1pbmFjdGl2ZS10YWIgLmR2LWRlZmF1bHQtdGFiIC5kdi1kZWZhdWx0LXRhYi1hY3Rpb24ge1xcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xcbn1cXG4uZHYtdGFiLmR2LWluYWN0aXZlLXRhYiAuZHYtZGVmYXVsdC10YWI6aG92ZXIgLmR2LWRlZmF1bHQtdGFiLWFjdGlvbiB7XFxuICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xcbn1cXG4uZHYtdGFiIC5kdi1kZWZhdWx0LXRhYiB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcXG59XFxuLmR2LXRhYiAuZHYtZGVmYXVsdC10YWIgLmR2LWRlZmF1bHQtdGFiLWNvbnRlbnQge1xcbiAgZmxleC1ncm93OiAxO1xcbiAgbWFyZ2luLXJpZ2h0OiA0cHg7XFxufVxcbi5kdi10YWIgLmR2LWRlZmF1bHQtdGFiIC5kdi1kZWZhdWx0LXRhYi1hY3Rpb24ge1xcbiAgcGFkZGluZzogNHB4O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcbi5kdi10YWIgLmR2LWRlZmF1bHQtdGFiIC5kdi1kZWZhdWx0LXRhYi1hY3Rpb246aG92ZXIge1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZHYtaWNvbi1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yKTtcXG59XFxuLmR2LXRhYnMtb3ZlcmZsb3ctZHJvcGRvd24tZGVmYXVsdCB7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBjb2xvcjogdmFyKC0tZHYtYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWNvbG9yKTtcXG4gIG1hcmdpbjogdmFyKC0tZHYtdGFiLW1hcmdpbik7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGZsZXgtc2hyaW5rOiAwO1xcbiAgcGFkZGluZzogMC4yNXJlbSAwLjVyZW07XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcbi5kdi10YWJzLW92ZXJmbG93LWRyb3Bkb3duLWRlZmF1bHQgPiBzcGFuIHtcXG4gIHBhZGRpbmctbGVmdDogMC4yNXJlbTtcXG59XFxuLmR2LXRhYnMtb3ZlcmZsb3ctZHJvcGRvd24tZGVmYXVsdCA+IHN2ZyB7XFxuICB0cmFuc2Zvcm06IHJvdGF0ZSg5MGRlZyk7XFxufVxcbi5kdi10YWJzLWNvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgb3ZlcmZsb3c6IGF1dG87XFxuICBzY3JvbGxiYXItd2lkdGg6IHRoaW47XFxuICAvKiBHUFUgb3B0aW1pemF0aW9ucyBmb3Igc21vb3RoIHNjcm9sbGluZyAqL1xcbiAgd2lsbC1jaGFuZ2U6IHNjcm9sbC1wb3NpdGlvbjtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XFxuICAvKiBUcmFjayAqL1xcbiAgLyogSGFuZGxlICovXFxufVxcbi5kdi10YWJzLWNvbnRhaW5lci5kdi1ob3Jpem9udGFsIC5kdi10YWI6bm90KDpmaXJzdC1jaGlsZCk6OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiIFxcXCI7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICBsZWZ0OiAwO1xcbiAgei1pbmRleDogNTtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZHYtdGFiLWRpdmlkZXItY29sb3IpO1xcbiAgd2lkdGg6IDFweDtcXG4gIGhlaWdodDogMTAwJTtcXG59XFxuLmR2LXRhYnMtY29udGFpbmVyOjotd2Via2l0LXNjcm9sbGJhciB7XFxuICBoZWlnaHQ6IDNweDtcXG59XFxuLmR2LXRhYnMtY29udGFpbmVyOjotd2Via2l0LXNjcm9sbGJhci10cmFjayB7XFxuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG59XFxuLmR2LXRhYnMtY29udGFpbmVyOjotd2Via2l0LXNjcm9sbGJhci10aHVtYiB7XFxuICBiYWNrZ3JvdW5kOiB2YXIoLS1kdi10YWJzLWNvbnRhaW5lci1zY3JvbGxiYXItY29sb3IpO1xcbn1cXG5cXG4uZHYtc2Nyb2xsYWJsZSA+IC5kdi10YWJzLWNvbnRhaW5lciB7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG5cXG4uZHYtdGFiIHtcXG4gIC13ZWJraXQtdXNlci1kcmFnOiBlbGVtZW50O1xcbiAgb3V0bGluZTogbm9uZTtcXG4gIHBhZGRpbmc6IDAuMjVyZW0gMC41cmVtO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGZvbnQtc2l6ZTogdmFyKC0tZHYtdGFiLWZvbnQtc2l6ZSk7XFxuICBtYXJnaW46IHZhcigtLWR2LXRhYi1tYXJnaW4pO1xcbn1cXG5cXG4uZHYtdGFicy1vdmVyZmxvdy1jb250YWluZXIge1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGhlaWdodDogdW5zZXQ7XFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1kdi10YWItZGl2aWRlci1jb2xvcik7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kdi1ncm91cC12aWV3LWJhY2tncm91bmQtY29sb3IpO1xcbn1cXG4uZHYtdGFicy1vdmVyZmxvdy1jb250YWluZXIgLmR2LXRhYjpub3QoOmxhc3QtY2hpbGQpIHtcXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCB2YXIoLS1kdi10YWItZGl2aWRlci1jb2xvcik7XFxufVxcbi5kdi10YWJzLW92ZXJmbG93LWNvbnRhaW5lciAuZHYtYWN0aXZlLXRhYiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kdi1hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWJhY2tncm91bmQtY29sb3IpO1xcbiAgY29sb3I6IHZhcigtLWR2LWFjdGl2ZWdyb3VwLXZpc2libGVwYW5lbC10YWItY29sb3IpO1xcbn1cXG4uZHYtdGFicy1vdmVyZmxvdy1jb250YWluZXIgLmR2LWluYWN0aXZlLXRhYiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kdi1hY3RpdmVncm91cC1oaWRkZW5wYW5lbC10YWItYmFja2dyb3VuZC1jb2xvcik7XFxuICBjb2xvcjogdmFyKC0tZHYtYWN0aXZlZ3JvdXAtaGlkZGVucGFuZWwtdGFiLWNvbG9yKTtcXG59XFxuLmR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci1iYWNrZ3JvdW5kLWNvbG9yKTtcXG4gIGZsZXgtc2hyaW5rOiAwO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGhlaWdodDogdmFyKC0tZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXItaGVpZ2h0KTtcXG4gIGZvbnQtc2l6ZTogdmFyKC0tZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXItZm9udC1zaXplKTtcXG59XFxuLmR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLmR2LXNpbmdsZS10YWIuZHYtZnVsbC13aWR0aC1zaW5nbGUtdGFiIC5kdi1zY3JvbGxhYmxlIHtcXG4gIGZsZXgtZ3JvdzogMTtcXG59XFxuLmR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyLmR2LXNpbmdsZS10YWIuZHYtZnVsbC13aWR0aC1zaW5nbGUtdGFiIC5kdi10YWJzLWNvbnRhaW5lciB7XFxuICBmbGV4LWdyb3c6IDE7XFxufVxcbi5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci5kdi1zaW5nbGUtdGFiLmR2LWZ1bGwtd2lkdGgtc2luZ2xlLXRhYiAuZHYtdGFicy1jb250YWluZXIgLmR2LXRhYiB7XFxuICBmbGV4LWdyb3c6IDE7XFxuICBwYWRkaW5nOiAwcHg7XFxufVxcbi5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lci5kdi1zaW5nbGUtdGFiLmR2LWZ1bGwtd2lkdGgtc2luZ2xlLXRhYiAuZHYtdm9pZC1jb250YWluZXIge1xcbiAgZmxleC1ncm93OiAwO1xcbn1cXG4uZHYtdGFicy1hbmQtYWN0aW9ucy1jb250YWluZXIgLmR2LXZvaWQtY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWdyb3c6IDE7XFxufVxcbi5kdi10YWJzLWFuZC1hY3Rpb25zLWNvbnRhaW5lciAuZHYtdm9pZC1jb250YWluZXIuZHYtZHJhZ2dhYmxlIHtcXG4gIGN1cnNvcjogZ3JhYjtcXG59XFxuLmR2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyIC5kdi1yaWdodC1hY3Rpb25zLWNvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbn1cXG4uZHYtd2F0ZXJtYXJrIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBoZWlnaHQ6IDEwMCU7XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiZXhwb3J0IGNsYXNzIFNwbGl0dmlld0FwaSB7XG4gICAgLyoqXG4gICAgICogVGhlIG1pbmltdW0gc2l6ZSAgdGhlIGNvbXBvbmVudCBjYW4gcmVhY2ggd2hlcmUgc2l6ZSBpcyBtZWFzdXJlZCBpbiB0aGUgZGlyZWN0aW9uIG9mIG9yaWVudGF0aW9uIHByb3ZpZGVkLlxuICAgICAqL1xuICAgIGdldCBtaW5pbXVtU2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50Lm1pbmltdW1TaXplO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgbWF4aW11bSBzaXplIHRoZSBjb21wb25lbnQgY2FuIHJlYWNoIHdoZXJlIHNpemUgaXMgbWVhc3VyZWQgaW4gdGhlIGRpcmVjdGlvbiBvZiBvcmllbnRhdGlvbiBwcm92aWRlZC5cbiAgICAgKi9cbiAgICBnZXQgbWF4aW11bVNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5tYXhpbXVtU2l6ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2lkdGggb2YgdGhlIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBnZXQgd2lkdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC53aWR0aDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSGVpZ2h0IG9mIHRoZSBjb21wb25lbnQuXG4gICAgICovXG4gICAgZ2V0IGhlaWdodCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50LmhlaWdodDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGN1cnJlbnQgbnVtYmVyIG9mIHBhbmVscy5cbiAgICAgKi9cbiAgICBnZXQgbGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQubGVuZ3RoO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCBvcmllbnRhdGlvbiBvZiB0aGUgY29tcG9uZW50LlxuICAgICAqL1xuICAgIGdldCBvcmllbnRhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50Lm9yaWVudGF0aW9uO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgbGlzdCBvZiBjdXJyZW50IHBhbmVscy5cbiAgICAgKi9cbiAgICBnZXQgcGFuZWxzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQucGFuZWxzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIGFmdGVyIGEgbGF5b3V0IGlzIGxvYWRlZCB0aHJvdWdoIHRoZSBgZnJvbUpTT05gIG1ldGhvZC5cbiAgICAgKi9cbiAgICBnZXQgb25EaWRMYXlvdXRGcm9tSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50Lm9uRGlkTGF5b3V0RnJvbUpTT047XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludm9rZWQgd2hlbmV2ZXIgYW55IGFzcGVjdCBvZiB0aGUgbGF5b3V0IGNoYW5nZXMuXG4gICAgICogSWYgbGlzdGVuaW5nIHRvIHRoaXMgZXZlbnQgaXQgbWF5IGJlIHdvcnRoIGRlYm91bmNpbmcgb3VwdXRzLlxuICAgICAqL1xuICAgIGdldCBvbkRpZExheW91dENoYW5nZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50Lm9uRGlkTGF5b3V0Q2hhbmdlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIHdoZW4gYSB2aWV3IGlzIGFkZGVkLlxuICAgICAqL1xuICAgIGdldCBvbkRpZEFkZFZpZXcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5vbkRpZEFkZFZpZXc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludm9rZWQgd2hlbiBhIHZpZXcgaXMgcmVtb3ZlZC5cbiAgICAgKi9cbiAgICBnZXQgb25EaWRSZW1vdmVWaWV3KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQub25EaWRSZW1vdmVWaWV3O1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcihjb21wb25lbnQpIHtcbiAgICAgICAgdGhpcy5jb21wb25lbnQgPSBjb21wb25lbnQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYW4gZXhpc3RpbmcgcGFuZWwgYW5kIG9wdGlvbmFsbHkgcHJvdmlkZSBhIGBTaXppbmdgIG1ldGhvZFxuICAgICAqIGZvciB0aGUgc3Vic2VxdWVudCByZXNpemUuXG4gICAgICovXG4gICAgcmVtb3ZlUGFuZWwocGFuZWwsIHNpemluZykge1xuICAgICAgICB0aGlzLmNvbXBvbmVudC5yZW1vdmVQYW5lbChwYW5lbCwgc2l6aW5nKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRm9jdXMgdGhlIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBmb2N1cygpIHtcbiAgICAgICAgdGhpcy5jb21wb25lbnQuZm9jdXMoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSByZWZlcmVuY2UgdG8gYSBwYW5lbCBnaXZlbiBpdCdzIGBzdHJpbmdgIGlkLlxuICAgICAqL1xuICAgIGdldFBhbmVsKGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5nZXRQYW5lbChpZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExheW91dCB0aGUgcGFuZWwgd2l0aCBhIHdpZHRoIGFuZCBoZWlnaHQuXG4gICAgICovXG4gICAgbGF5b3V0KHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50LmxheW91dCh3aWR0aCwgaGVpZ2h0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkIGEgbmV3IHBhbmVsIGFuZCByZXR1cm4gdGhlIGNyZWF0ZWQgaW5zdGFuY2UuXG4gICAgICovXG4gICAgYWRkUGFuZWwob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQuYWRkUGFuZWwob3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1vdmUgYSBwYW5lbCBnaXZlbiBpdCdzIGN1cnJlbnQgYW5kIGRlc2lyZWQgaW5kZXguXG4gICAgICovXG4gICAgbW92ZVBhbmVsKGZyb20sIHRvKSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50Lm1vdmVQYW5lbChmcm9tLCB0byk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlc2VyaWFsaXplIGEgbGF5b3V0IHRvIGJ1aWx0IGEgc3BsaXRpdmV3LlxuICAgICAqL1xuICAgIGZyb21KU09OKGRhdGEpIHtcbiAgICAgICAgdGhpcy5jb21wb25lbnQuZnJvbUpTT04oZGF0YSk7XG4gICAgfVxuICAgIC8qKiBTZXJpYWxpemUgYSBsYXlvdXQgKi9cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC50b0pTT04oKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGFsbCBwYW5lbHMgYW5kIGNsZWFyIHRoZSBjb21wb25lbnQuXG4gICAgICovXG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50LmNsZWFyKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBjb25maWd1cmF0YWJsZSBvcHRpb25zLlxuICAgICAqL1xuICAgIHVwZGF0ZU9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICB0aGlzLmNvbXBvbmVudC51cGRhdGVPcHRpb25zKG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWxlYXNlIHJlc291cmNlcyBhbmQgdGVhcmRvd24gY29tcG9uZW50LiBEbyBub3QgY2FsbCB3aGVuIHVzaW5nIGZyYW1ld29yayB2ZXJzaW9ucyBvZiBkb2Nrdmlldy5cbiAgICAgKi9cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICB0aGlzLmNvbXBvbmVudC5kaXNwb3NlKCk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFBhbmV2aWV3QXBpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgbWluaW11bSBzaXplICB0aGUgY29tcG9uZW50IGNhbiByZWFjaCB3aGVyZSBzaXplIGlzIG1lYXN1cmVkIGluIHRoZSBkaXJlY3Rpb24gb2Ygb3JpZW50YXRpb24gcHJvdmlkZWQuXG4gICAgICovXG4gICAgZ2V0IG1pbmltdW1TaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQubWluaW11bVNpemU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBtYXhpbXVtIHNpemUgdGhlIGNvbXBvbmVudCBjYW4gcmVhY2ggd2hlcmUgc2l6ZSBpcyBtZWFzdXJlZCBpbiB0aGUgZGlyZWN0aW9uIG9mIG9yaWVudGF0aW9uIHByb3ZpZGVkLlxuICAgICAqL1xuICAgIGdldCBtYXhpbXVtU2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50Lm1heGltdW1TaXplO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaWR0aCBvZiB0aGUgY29tcG9uZW50LlxuICAgICAqL1xuICAgIGdldCB3aWR0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50LndpZHRoO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBIZWlnaHQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBnZXQgaGVpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQuaGVpZ2h0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBbGwgcGFuZWwgb2JqZWN0cy5cbiAgICAgKi9cbiAgICBnZXQgcGFuZWxzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQucGFuZWxzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIHdoZW4gYW55IGxheW91dCBjaGFuZ2Ugb2NjdXJlcywgYW4gYWdncmVnYXRpb24gb2YgbWFueSBldmVudHMuXG4gICAgICovXG4gICAgZ2V0IG9uRGlkTGF5b3V0Q2hhbmdlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQub25EaWRMYXlvdXRDaGFuZ2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludm9rZWQgYWZ0ZXIgYSBsYXlvdXQgaXMgZGVzZXJpYWx6aWVkIHVzaW5nIHRoZSBgZnJvbUpTT05gIG1ldGhvZC5cbiAgICAgKi9cbiAgICBnZXQgb25EaWRMYXlvdXRGcm9tSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50Lm9uRGlkTGF5b3V0RnJvbUpTT047XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludm9rZWQgd2hlbiBhIHBhbmVsIGlzIGFkZGVkLiBNYXkgYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzIHdoZW4gbW92aW5nIHBhbmVscy5cbiAgICAgKi9cbiAgICBnZXQgb25EaWRBZGRWaWV3KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQub25EaWRBZGRWaWV3O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIHdoZW4gYSBwYW5lbCBpcyByZW1vdmVkLiBNYXkgYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzIHdoZW4gbW92aW5nIHBhbmVscy5cbiAgICAgKi9cbiAgICBnZXQgb25EaWRSZW1vdmVWaWV3KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQub25EaWRSZW1vdmVWaWV3O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIHdoZW4gYSBEcmFnJ24nRHJvcCBldmVudCBvY2N1cnMgdGhhdCB0aGUgY29tcG9uZW50IHdhcyB1bmFibGUgdG8gaGFuZGxlLiBFeHBvc2VkIGZvciBjdXN0b20gRHJhZyduJ0Ryb3AgZnVuY3Rpb25hbGl0eS5cbiAgICAgKi9cbiAgICBnZXQgb25EaWREcm9wKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQub25EaWREcm9wO1xuICAgIH1cbiAgICBnZXQgb25VbmhhbmRsZWREcmFnT3ZlckV2ZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQub25VbmhhbmRsZWREcmFnT3ZlckV2ZW50O1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcihjb21wb25lbnQpIHtcbiAgICAgICAgdGhpcy5jb21wb25lbnQgPSBjb21wb25lbnQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIHBhbmVsIGdpdmVuIHRoZSBwYW5lbCBvYmplY3QuXG4gICAgICovXG4gICAgcmVtb3ZlUGFuZWwocGFuZWwpIHtcbiAgICAgICAgdGhpcy5jb21wb25lbnQucmVtb3ZlUGFuZWwocGFuZWwpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgYSBwYW5lbCBvYmplY3QgZ2l2ZW4gYSBgc3RyaW5nYCBpZC4gTWF5IHJldHVybiBgdW5kZWZpbmVkYC5cbiAgICAgKi9cbiAgICBnZXRQYW5lbChpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQuZ2V0UGFuZWwoaWQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNb3ZlIGEgcGFuZWwgZ2l2ZW4gaXQncyBjdXJyZW50IGFuZCBkZXNpcmVkIGluZGV4LlxuICAgICAqL1xuICAgIG1vdmVQYW5lbChmcm9tLCB0bykge1xuICAgICAgICB0aGlzLmNvbXBvbmVudC5tb3ZlUGFuZWwoZnJvbSwgdG8pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgRm9jdXMgdGhlIGNvbXBvbmVudC4gV2lsbCB0cnkgdG8gZm9jdXMgYW4gYWN0aXZlIHBhbmVsIGlmIG9uZSBleGlzdHMuXG4gICAgICovXG4gICAgZm9jdXMoKSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50LmZvY3VzKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZvcmNlIHJlc2l6ZSB0aGUgY29tcG9uZW50IHRvIGFuIGV4YWN0IHdpZHRoIGFuZCBoZWlnaHQuIFJlYWQgYWJvdXQgYXV0by1yZXNpemluZyBiZWZvcmUgdXNpbmcuXG4gICAgICovXG4gICAgbGF5b3V0KHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgdGhpcy5jb21wb25lbnQubGF5b3V0KHdpZHRoLCBoZWlnaHQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGQgYSBwYW5lbCBhbmQgcmV0dXJuIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAgICAgKi9cbiAgICBhZGRQYW5lbChvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5hZGRQYW5lbChvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgY29tcG9uZW50IGZyb20gYSBzZXJpYWxpemVkIG9iamVjdC5cbiAgICAgKi9cbiAgICBmcm9tSlNPTihkYXRhKSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50LmZyb21KU09OKGRhdGEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBzZXJpYWxpemVkIG9iamVjdCBvZiB0aGUgY3VycmVudCBjb21wb25lbnQuXG4gICAgICovXG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQudG9KU09OKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlc2V0IHRoZSBjb21wb25lbnQgYmFjayB0byBhbiBlbXB0eSBhbmQgZGVmYXVsdCBzdGF0ZS5cbiAgICAgKi9cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdGhpcy5jb21wb25lbnQuY2xlYXIoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlIGNvbmZpZ3VyYXRhYmxlIG9wdGlvbnMuXG4gICAgICovXG4gICAgdXBkYXRlT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50LnVwZGF0ZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbGVhc2UgcmVzb3VyY2VzIGFuZCB0ZWFyZG93biBjb21wb25lbnQuIERvIG5vdCBjYWxsIHdoZW4gdXNpbmcgZnJhbWV3b3JrIHZlcnNpb25zIG9mIGRvY2t2aWV3LlxuICAgICAqL1xuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50LmRpc3Bvc2UoKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgR3JpZHZpZXdBcGkge1xuICAgIC8qKlxuICAgICAqIFdpZHRoIG9mIHRoZSBjb21wb25lbnQuXG4gICAgICovXG4gICAgZ2V0IHdpZHRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQud2lkdGg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEhlaWdodCBvZiB0aGUgY29tcG9uZW50LlxuICAgICAqL1xuICAgIGdldCBoZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5oZWlnaHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1pbmltdW0gaGVpZ2h0IG9mIHRoZSBjb21wb25lbnQuXG4gICAgICovXG4gICAgZ2V0IG1pbmltdW1IZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5taW5pbXVtSGVpZ2h0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYXhpbXVtIGhlaWdodCBvZiB0aGUgY29tcG9uZW50LlxuICAgICAqL1xuICAgIGdldCBtYXhpbXVtSGVpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQubWF4aW11bUhlaWdodDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWluaW11bSB3aWR0aCBvZiB0aGUgY29tcG9uZW50LlxuICAgICAqL1xuICAgIGdldCBtaW5pbXVtV2lkdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5taW5pbXVtV2lkdGg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1heGltdW0gd2lkdGggb2YgdGhlIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBnZXQgbWF4aW11bVdpZHRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQubWF4aW11bVdpZHRoO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIHdoZW4gYW55IGxheW91dCBjaGFuZ2Ugb2NjdXJlcywgYW4gYWdncmVnYXRpb24gb2YgbWFueSBldmVudHMuXG4gICAgICovXG4gICAgZ2V0IG9uRGlkTGF5b3V0Q2hhbmdlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQub25EaWRMYXlvdXRDaGFuZ2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludm9rZWQgd2hlbiBhIHBhbmVsIGlzIGFkZGVkLiBNYXkgYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzIHdoZW4gbW92aW5nIHBhbmVscy5cbiAgICAgKi9cbiAgICBnZXQgb25EaWRBZGRQYW5lbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50Lm9uRGlkQWRkR3JvdXA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludm9rZWQgd2hlbiBhIHBhbmVsIGlzIHJlbW92ZWQuIE1heSBiZSBjYWxsZWQgbXVsdGlwbGUgdGltZXMgd2hlbiBtb3ZpbmcgcGFuZWxzLlxuICAgICAqL1xuICAgIGdldCBvbkRpZFJlbW92ZVBhbmVsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQub25EaWRSZW1vdmVHcm91cDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW52b2tlZCB3aGVuIHRoZSBhY3RpdmUgcGFuZWwgY2hhbmdlcy4gTWF5IGJlIHVuZGVmaW5lZCBpZiBubyBwYW5lbCBpcyBhY3RpdmUuXG4gICAgICovXG4gICAgZ2V0IG9uRGlkQWN0aXZlUGFuZWxDaGFuZ2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5vbkRpZEFjdGl2ZUdyb3VwQ2hhbmdlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIGFmdGVyIGEgbGF5b3V0IGlzIGRlc2VyaWFsemllZCB1c2luZyB0aGUgYGZyb21KU09OYCBtZXRob2QuXG4gICAgICovXG4gICAgZ2V0IG9uRGlkTGF5b3V0RnJvbUpTT04oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5vbkRpZExheW91dEZyb21KU09OO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBbGwgcGFuZWwgb2JqZWN0cy5cbiAgICAgKi9cbiAgICBnZXQgcGFuZWxzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQuZ3JvdXBzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDdXJyZW50IG9yaWVudGF0aW9uLiBDYW4gYmUgY2hhbmdlZCBhZnRlciBpbml0aWFsaXphdGlvbi5cbiAgICAgKi9cbiAgICBnZXQgb3JpZW50YXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5vcmllbnRhdGlvbjtcbiAgICB9XG4gICAgc2V0IG9yaWVudGF0aW9uKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50LnVwZGF0ZU9wdGlvbnMoeyBvcmllbnRhdGlvbjogdmFsdWUgfSk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGNvbXBvbmVudCkge1xuICAgICAgICB0aGlzLmNvbXBvbmVudCA9IGNvbXBvbmVudDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIEZvY3VzIHRoZSBjb21wb25lbnQuIFdpbGwgdHJ5IHRvIGZvY3VzIGFuIGFjdGl2ZSBwYW5lbCBpZiBvbmUgZXhpc3RzLlxuICAgICAqL1xuICAgIGZvY3VzKCkge1xuICAgICAgICB0aGlzLmNvbXBvbmVudC5mb2N1cygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGb3JjZSByZXNpemUgdGhlIGNvbXBvbmVudCB0byBhbiBleGFjdCB3aWR0aCBhbmQgaGVpZ2h0LiBSZWFkIGFib3V0IGF1dG8tcmVzaXppbmcgYmVmb3JlIHVzaW5nLlxuICAgICAqL1xuICAgIGxheW91dCh3aWR0aCwgaGVpZ2h0LCBmb3JjZSA9IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50LmxheW91dCh3aWR0aCwgaGVpZ2h0LCBmb3JjZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZCBhIHBhbmVsIGFuZCByZXR1cm4gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICAgICAqL1xuICAgIGFkZFBhbmVsKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50LmFkZFBhbmVsKG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYSBwYW5lbCBnaXZlbiB0aGUgcGFuZWwgb2JqZWN0LlxuICAgICAqL1xuICAgIHJlbW92ZVBhbmVsKHBhbmVsLCBzaXppbmcpIHtcbiAgICAgICAgdGhpcy5jb21wb25lbnQucmVtb3ZlUGFuZWwocGFuZWwsIHNpemluZyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1vdmUgYSBwYW5lbCBpbiBhIHBhcnRpY3VsYXIgZGlyZWN0aW9uIHJlbGF0aXZlIHRvIGFub3RoZXIgcGFuZWwuXG4gICAgICovXG4gICAgbW92ZVBhbmVsKHBhbmVsLCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50Lm1vdmVQYW5lbChwYW5lbCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhIHBhbmVsIG9iamVjdCBnaXZlbiBhIGBzdHJpbmdgIGlkLiBNYXkgcmV0dXJuIGB1bmRlZmluZWRgLlxuICAgICAqL1xuICAgIGdldFBhbmVsKGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5nZXRQYW5lbChpZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGNvbXBvbmVudCBmcm9tIGEgc2VyaWFsaXplZCBvYmplY3QuXG4gICAgICovXG4gICAgZnJvbUpTT04oZGF0YSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQuZnJvbUpTT04oZGF0YSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIHNlcmlhbGl6ZWQgb2JqZWN0IG9mIHRoZSBjdXJyZW50IGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC50b0pTT04oKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVzZXQgdGhlIGNvbXBvbmVudCBiYWNrIHRvIGFuIGVtcHR5IGFuZCBkZWZhdWx0IHN0YXRlLlxuICAgICAqL1xuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLmNvbXBvbmVudC5jbGVhcigpO1xuICAgIH1cbiAgICB1cGRhdGVPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5jb21wb25lbnQudXBkYXRlT3B0aW9ucyhvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVsZWFzZSByZXNvdXJjZXMgYW5kIHRlYXJkb3duIGNvbXBvbmVudC4gRG8gbm90IGNhbGwgd2hlbiB1c2luZyBmcmFtZXdvcmsgdmVyc2lvbnMgb2YgZG9ja3ZpZXcuXG4gICAgICovXG4gICAgZGlzcG9zZSgpIHtcbiAgICAgICAgdGhpcy5jb21wb25lbnQuZGlzcG9zZSgpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBEb2Nrdmlld0FwaSB7XG4gICAgLyoqXG4gICAgICogVGhlIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGlzIGluc3RhbmNlLiBVc2VkIHRvIG1hbmFnZSBzY29wZSBvZiBEcmFnJ24nRHJvcCBldmVudHMuXG4gICAgICovXG4gICAgZ2V0IGlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQuaWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdpZHRoIG9mIHRoZSBjb21wb25lbnQuXG4gICAgICovXG4gICAgZ2V0IHdpZHRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQud2lkdGg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEhlaWdodCBvZiB0aGUgY29tcG9uZW50LlxuICAgICAqL1xuICAgIGdldCBoZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5oZWlnaHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1pbmltdW0gaGVpZ2h0IG9mIHRoZSBjb21wb25lbnQuXG4gICAgICovXG4gICAgZ2V0IG1pbmltdW1IZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5taW5pbXVtSGVpZ2h0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYXhpbXVtIGhlaWdodCBvZiB0aGUgY29tcG9uZW50LlxuICAgICAqL1xuICAgIGdldCBtYXhpbXVtSGVpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQubWF4aW11bUhlaWdodDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWluaW11bSB3aWR0aCBvZiB0aGUgY29tcG9uZW50LlxuICAgICAqL1xuICAgIGdldCBtaW5pbXVtV2lkdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5taW5pbXVtV2lkdGg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1heGltdW0gd2lkdGggb2YgdGhlIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBnZXQgbWF4aW11bVdpZHRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQubWF4aW11bVdpZHRoO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUb3RhbCBudW1iZXIgb2YgZ3JvdXBzLlxuICAgICAqL1xuICAgIGdldCBzaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQuc2l6ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVG90YWwgbnVtYmVyIG9mIHBhbmVscy5cbiAgICAgKi9cbiAgICBnZXQgdG90YWxQYW5lbHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC50b3RhbFBhbmVscztcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW52b2tlZCB3aGVuIHRoZSBhY3RpdmUgZ3JvdXAgY2hhbmdlcy4gTWF5IGJlIHVuZGVmaW5lZCBpZiBubyBncm91cCBpcyBhY3RpdmUuXG4gICAgICovXG4gICAgZ2V0IG9uRGlkQWN0aXZlR3JvdXBDaGFuZ2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5vbkRpZEFjdGl2ZUdyb3VwQ2hhbmdlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIHdoZW4gYSBncm91cCBpcyBhZGRlZC4gTWF5IGJlIGNhbGxlZCBtdWx0aXBsZSB0aW1lcyB3aGVuIG1vdmluZyBncm91cHMuXG4gICAgICovXG4gICAgZ2V0IG9uRGlkQWRkR3JvdXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5vbkRpZEFkZEdyb3VwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIHdoZW4gYSBncm91cCBpcyByZW1vdmVkLiBNYXkgYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzIHdoZW4gbW92aW5nIGdyb3Vwcy5cbiAgICAgKi9cbiAgICBnZXQgb25EaWRSZW1vdmVHcm91cCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50Lm9uRGlkUmVtb3ZlR3JvdXA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludm9rZWQgd2hlbiB0aGUgYWN0aXZlIHBhbmVsIGNoYW5nZXMuIE1heSBiZSB1bmRlZmluZWQgaWYgbm8gcGFuZWwgaXMgYWN0aXZlLlxuICAgICAqL1xuICAgIGdldCBvbkRpZEFjdGl2ZVBhbmVsQ2hhbmdlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQub25EaWRBY3RpdmVQYW5lbENoYW5nZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW52b2tlZCB3aGVuIGEgcGFuZWwgaXMgYWRkZWQuIE1heSBiZSBjYWxsZWQgbXVsdGlwbGUgdGltZXMgd2hlbiBtb3ZpbmcgcGFuZWxzLlxuICAgICAqL1xuICAgIGdldCBvbkRpZEFkZFBhbmVsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQub25EaWRBZGRQYW5lbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW52b2tlZCB3aGVuIGEgcGFuZWwgaXMgcmVtb3ZlZC4gTWF5IGJlIGNhbGxlZCBtdWx0aXBsZSB0aW1lcyB3aGVuIG1vdmluZyBwYW5lbHMuXG4gICAgICovXG4gICAgZ2V0IG9uRGlkUmVtb3ZlUGFuZWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5vbkRpZFJlbW92ZVBhbmVsO1xuICAgIH1cbiAgICBnZXQgb25EaWRNb3ZlUGFuZWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5vbkRpZE1vdmVQYW5lbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW52b2tlZCBhZnRlciBhIGxheW91dCBpcyBkZXNlcmlhbHppZWQgdXNpbmcgdGhlIGBmcm9tSlNPTmAgbWV0aG9kLlxuICAgICAqL1xuICAgIGdldCBvbkRpZExheW91dEZyb21KU09OKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQub25EaWRMYXlvdXRGcm9tSlNPTjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW52b2tlZCB3aGVuIGFueSBsYXlvdXQgY2hhbmdlIG9jY3VyZXMsIGFuIGFnZ3JlZ2F0aW9uIG9mIG1hbnkgZXZlbnRzLlxuICAgICAqL1xuICAgIGdldCBvbkRpZExheW91dENoYW5nZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50Lm9uRGlkTGF5b3V0Q2hhbmdlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIHdoZW4gYSBEcmFnJ24nRHJvcCBldmVudCBvY2N1cnMgdGhhdCB0aGUgY29tcG9uZW50IHdhcyB1bmFibGUgdG8gaGFuZGxlLiBFeHBvc2VkIGZvciBjdXN0b20gRHJhZyduJ0Ryb3AgZnVuY3Rpb25hbGl0eS5cbiAgICAgKi9cbiAgICBnZXQgb25EaWREcm9wKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQub25EaWREcm9wO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIHdoZW4gYSBEcmFnJ24nRHJvcCBldmVudCBvY2N1cnMgYnV0IGJlZm9yZSBkb2NrdmlldyBoYW5kbGVzIGl0IGdpdmluZyB0aGUgdXNlciBhbiBvcHBvcnR1bml0eSB0byBpbnRlY2VwdCBhbmRcbiAgICAgKiBwcmV2ZW50IHRoZSBldmVudCBmcm9tIG9jY3VyaW5nIHVzaW5nIHRoZSBzdGFuZGFyZCBgcHJldmVudERlZmF1bHQoKWAgc3ludGF4LlxuICAgICAqXG4gICAgICogUHJldmVudGluZyBjZXJ0YWluIGV2ZW50cyBtYXkgY2F1c2VzIHVuZXhwZWN0ZWQgYmVoYXZpb3VycywgdXNlIGNhcmVmdWxseS5cbiAgICAgKi9cbiAgICBnZXQgb25XaWxsRHJvcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50Lm9uV2lsbERyb3A7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludm9rZWQgYmVmb3JlIGFuIG92ZXJsYXkgaXMgc2hvd24gaW5kaWNhdGluZyBhIGRyb3AgdGFyZ2V0LlxuICAgICAqXG4gICAgICogQ2FsbGluZyBgZXZlbnQucHJldmVudERlZmF1bHQoKWAgd2lsbCBwcmV2ZW50IHRoZSBvdmVybGF5IGJlaW5nIHNob3duIGFuZCBwcmV2ZW50XG4gICAgICogdGhlIGFueSBzdWJzZXF1ZW50IGRyb3AgZXZlbnQuXG4gICAgICovXG4gICAgZ2V0IG9uV2lsbFNob3dPdmVybGF5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQub25XaWxsU2hvd092ZXJsYXk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludm9rZWQgYmVmb3JlIGEgZ3JvdXAgaXMgZHJhZ2dlZC5cbiAgICAgKlxuICAgICAqIENhbGxpbmcgYGV2ZW50Lm5hdGl2ZUV2ZW50LnByZXZlbnREZWZhdWx0KClgIHdpbGwgcHJldmVudCB0aGUgZ3JvdXAgZHJhZyBzdGFydGluZy5cbiAgICAgKlxuICAgICAqL1xuICAgIGdldCBvbldpbGxEcmFnR3JvdXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5vbldpbGxEcmFnR3JvdXA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludm9rZWQgYmVmb3JlIGEgcGFuZWwgaXMgZHJhZ2dlZC5cbiAgICAgKlxuICAgICAqIENhbGxpbmcgYGV2ZW50Lm5hdGl2ZUV2ZW50LnByZXZlbnREZWZhdWx0KClgIHdpbGwgcHJldmVudCB0aGUgcGFuZWwgZHJhZyBzdGFydGluZy5cbiAgICAgKi9cbiAgICBnZXQgb25XaWxsRHJhZ1BhbmVsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQub25XaWxsRHJhZ1BhbmVsO1xuICAgIH1cbiAgICBnZXQgb25VbmhhbmRsZWREcmFnT3ZlckV2ZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQub25VbmhhbmRsZWREcmFnT3ZlckV2ZW50O1xuICAgIH1cbiAgICBnZXQgb25EaWRQb3BvdXRHcm91cFNpemVDaGFuZ2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5vbkRpZFBvcG91dEdyb3VwU2l6ZUNoYW5nZTtcbiAgICB9XG4gICAgZ2V0IG9uRGlkUG9wb3V0R3JvdXBQb3NpdGlvbkNoYW5nZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50Lm9uRGlkUG9wb3V0R3JvdXBQb3NpdGlvbkNoYW5nZTtcbiAgICB9XG4gICAgZ2V0IG9uRGlkT3BlblBvcG91dFdpbmRvd0ZhaWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5vbkRpZE9wZW5Qb3BvdXRXaW5kb3dGYWlsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBbGwgcGFuZWwgb2JqZWN0cy5cbiAgICAgKi9cbiAgICBnZXQgcGFuZWxzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQucGFuZWxzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBbGwgZ3JvdXAgb2JqZWN0cy5cbiAgICAgKi9cbiAgICBnZXQgZ3JvdXBzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQuZ3JvdXBzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgQWN0aXZlIHBhbmVsIG9iamVjdC5cbiAgICAgKi9cbiAgICBnZXQgYWN0aXZlUGFuZWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5hY3RpdmVQYW5lbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWN0aXZlIGdyb3VwIG9iamVjdC5cbiAgICAgKi9cbiAgICBnZXQgYWN0aXZlR3JvdXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5hY3RpdmVHcm91cDtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoY29tcG9uZW50KSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50ID0gY29tcG9uZW50O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgRm9jdXMgdGhlIGNvbXBvbmVudC4gV2lsbCB0cnkgdG8gZm9jdXMgYW4gYWN0aXZlIHBhbmVsIGlmIG9uZSBleGlzdHMuXG4gICAgICovXG4gICAgZm9jdXMoKSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50LmZvY3VzKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhIHBhbmVsIG9iamVjdCBnaXZlbiBhIGBzdHJpbmdgIGlkLiBNYXkgcmV0dXJuIGB1bmRlZmluZWRgLlxuICAgICAqL1xuICAgIGdldFBhbmVsKGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5nZXRHcm91cFBhbmVsKGlkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRm9yY2UgcmVzaXplIHRoZSBjb21wb25lbnQgdG8gYW4gZXhhY3Qgd2lkdGggYW5kIGhlaWdodC4gUmVhZCBhYm91dCBhdXRvLXJlc2l6aW5nIGJlZm9yZSB1c2luZy5cbiAgICAgKi9cbiAgICBsYXlvdXQod2lkdGgsIGhlaWdodCwgZm9yY2UgPSBmYWxzZSkge1xuICAgICAgICB0aGlzLmNvbXBvbmVudC5sYXlvdXQod2lkdGgsIGhlaWdodCwgZm9yY2UpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGQgYSBwYW5lbCBhbmQgcmV0dXJuIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAgICAgKi9cbiAgICBhZGRQYW5lbChvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5hZGRQYW5lbChvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGEgcGFuZWwgZ2l2ZW4gdGhlIHBhbmVsIG9iamVjdC5cbiAgICAgKi9cbiAgICByZW1vdmVQYW5lbChwYW5lbCkge1xuICAgICAgICB0aGlzLmNvbXBvbmVudC5yZW1vdmVQYW5lbChwYW5lbCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZCBhIGdyb3VwIGFuZCByZXR1cm4gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICAgICAqL1xuICAgIGFkZEdyb3VwKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50LmFkZEdyb3VwKG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbG9zZSBhbGwgZ3JvdXBzIGFuZCBwYW5lbHMuXG4gICAgICovXG4gICAgY2xvc2VBbGxHcm91cHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5jbG9zZUFsbEdyb3VwcygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYSBncm91cCBhbmQgYW55IHBhbmVscyB3aXRoaW4gdGhlIGdyb3VwLlxuICAgICAqL1xuICAgIHJlbW92ZUdyb3VwKGdyb3VwKSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50LnJlbW92ZUdyb3VwKGdyb3VwKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGEgZ3JvdXAgb2JqZWN0IGdpdmVuIGEgYHN0cmluZ2AgaWQuIE1heSByZXR1cm4gdW5kZWZpbmVkLlxuICAgICAqL1xuICAgIGdldEdyb3VwKGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5nZXRQYW5lbChpZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZCBhIGZsb2F0aW5nIGdyb3VwXG4gICAgICovXG4gICAgYWRkRmxvYXRpbmdHcm91cChpdGVtLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5hZGRGbG9hdGluZ0dyb3VwKGl0ZW0sIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBjb21wb25lbnQgZnJvbSBhIHNlcmlhbGl6ZWQgb2JqZWN0LlxuICAgICAqL1xuICAgIGZyb21KU09OKGRhdGEpIHtcbiAgICAgICAgdGhpcy5jb21wb25lbnQuZnJvbUpTT04oZGF0YSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIHNlcmlhbGl6ZWQgb2JqZWN0IG9mIHRoZSBjdXJyZW50IGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC50b0pTT04oKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVzZXQgdGhlIGNvbXBvbmVudCBiYWNrIHRvIGFuIGVtcHR5IGFuZCBkZWZhdWx0IHN0YXRlLlxuICAgICAqL1xuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLmNvbXBvbmVudC5jbGVhcigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNb3ZlIHRoZSBmb2N1cyBwcm9nbWF0aWNhbGx5IHRvIHRoZSBuZXh0IHBhbmVsIG9yIGdyb3VwLlxuICAgICAqL1xuICAgIG1vdmVUb05leHQob3B0aW9ucykge1xuICAgICAgICB0aGlzLmNvbXBvbmVudC5tb3ZlVG9OZXh0KG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNb3ZlIHRoZSBmb2N1cyBwcm9nbWF0aWNhbGx5IHRvIHRoZSBwcmV2aW91cyBwYW5lbCBvciBncm91cC5cbiAgICAgKi9cbiAgICBtb3ZlVG9QcmV2aW91cyhvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50Lm1vdmVUb1ByZXZpb3VzKG9wdGlvbnMpO1xuICAgIH1cbiAgICBtYXhpbWl6ZUdyb3VwKHBhbmVsKSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50Lm1heGltaXplR3JvdXAocGFuZWwuZ3JvdXApO1xuICAgIH1cbiAgICBoYXNNYXhpbWl6ZWRHcm91cCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50Lmhhc01heGltaXplZEdyb3VwKCk7XG4gICAgfVxuICAgIGV4aXRNYXhpbWl6ZWRHcm91cCgpIHtcbiAgICAgICAgdGhpcy5jb21wb25lbnQuZXhpdE1heGltaXplZEdyb3VwKCk7XG4gICAgfVxuICAgIGdldCBvbkRpZE1heGltaXplZEdyb3VwQ2hhbmdlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQub25EaWRNYXhpbWl6ZWRHcm91cENoYW5nZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkIGEgcG9wb3V0IGdyb3VwIGluIGEgbmV3IFdpbmRvd1xuICAgICAqL1xuICAgIGFkZFBvcG91dEdyb3VwKGl0ZW0sIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50LmFkZFBvcG91dEdyb3VwKGl0ZW0sIG9wdGlvbnMpO1xuICAgIH1cbiAgICB1cGRhdGVPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5jb21wb25lbnQudXBkYXRlT3B0aW9ucyhvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVsZWFzZSByZXNvdXJjZXMgYW5kIHRlYXJkb3duIGNvbXBvbmVudC4gRG8gbm90IGNhbGwgd2hlbiB1c2luZyBmcmFtZXdvcmsgdmVyc2lvbnMgb2YgZG9ja3ZpZXcuXG4gICAgICovXG4gICAgZGlzcG9zZSgpIHtcbiAgICAgICAgdGhpcy5jb21wb25lbnQuZGlzcG9zZSgpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IHBvc2l0aW9uVG9EaXJlY3Rpb24gfSBmcm9tICcuLi9kbmQvZHJvcHRhcmdldCc7XG5pbXBvcnQgeyBFbWl0dGVyIH0gZnJvbSAnLi4vZXZlbnRzJztcbmltcG9ydCB7IEdyaWR2aWV3UGFuZWxBcGlJbXBsIH0gZnJvbSAnLi9ncmlkdmlld1BhbmVsQXBpJztcbmNvbnN0IE5PVF9JTklUSUFMSVpFRF9NRVNTQUdFID0gJ2RvY2t2aWV3OiBEb2Nrdmlld0dyb3VwUGFuZWxBcGlJbXBsIG5vdCBpbml0aWFsaXplZCc7XG5leHBvcnQgY2xhc3MgRG9ja3ZpZXdHcm91cFBhbmVsQXBpSW1wbCBleHRlbmRzIEdyaWR2aWV3UGFuZWxBcGlJbXBsIHtcbiAgICBnZXQgbG9jYXRpb24oKSB7XG4gICAgICAgIGlmICghdGhpcy5fZ3JvdXApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihOT1RfSU5JVElBTElaRURfTUVTU0FHRSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2dyb3VwLm1vZGVsLmxvY2F0aW9uO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihpZCwgYWNjZXNzb3IpIHtcbiAgICAgICAgc3VwZXIoaWQsICdfX2RvY2t2aWV3Z3JvdXBfXycpO1xuICAgICAgICB0aGlzLmFjY2Vzc29yID0gYWNjZXNzb3I7XG4gICAgICAgIHRoaXMuX29uRGlkTG9jYXRpb25DaGFuZ2UgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRGlkTG9jYXRpb25DaGFuZ2UgPSB0aGlzLl9vbkRpZExvY2F0aW9uQ2hhbmdlLmV2ZW50O1xuICAgICAgICB0aGlzLl9vbkRpZEFjdGl2ZVBhbmVsQ2hhbmdlID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZEFjdGl2ZVBhbmVsQ2hhbmdlID0gdGhpcy5fb25EaWRBY3RpdmVQYW5lbENoYW5nZS5ldmVudDtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyh0aGlzLl9vbkRpZExvY2F0aW9uQ2hhbmdlLCB0aGlzLl9vbkRpZEFjdGl2ZVBhbmVsQ2hhbmdlKTtcbiAgICB9XG4gICAgY2xvc2UoKSB7XG4gICAgICAgIGlmICghdGhpcy5fZ3JvdXApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5hY2Nlc3Nvci5yZW1vdmVHcm91cCh0aGlzLl9ncm91cCk7XG4gICAgfVxuICAgIGdldFdpbmRvdygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYXRpb24udHlwZSA9PT0gJ3BvcG91dCdcbiAgICAgICAgICAgID8gdGhpcy5sb2NhdGlvbi5nZXRXaW5kb3coKVxuICAgICAgICAgICAgOiB3aW5kb3c7XG4gICAgfVxuICAgIG1vdmVUbyhvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICAgICAgaWYgKCF0aGlzLl9ncm91cCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKE5PVF9JTklUSUFMSVpFRF9NRVNTQUdFKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBncm91cCA9IChfYSA9IG9wdGlvbnMuZ3JvdXApICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHRoaXMuYWNjZXNzb3IuYWRkR3JvdXAoe1xuICAgICAgICAgICAgZGlyZWN0aW9uOiBwb3NpdGlvblRvRGlyZWN0aW9uKChfYiA9IG9wdGlvbnMucG9zaXRpb24pICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICdyaWdodCcpLFxuICAgICAgICAgICAgc2tpcFNldEFjdGl2ZTogKF9jID0gb3B0aW9ucy5za2lwU2V0QWN0aXZlKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBmYWxzZSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYWNjZXNzb3IubW92ZUdyb3VwT3JQYW5lbCh7XG4gICAgICAgICAgICBmcm9tOiB7IGdyb3VwSWQ6IHRoaXMuX2dyb3VwLmlkIH0sXG4gICAgICAgICAgICB0bzoge1xuICAgICAgICAgICAgICAgIGdyb3VwLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBvcHRpb25zLmdyb3VwXG4gICAgICAgICAgICAgICAgICAgID8gKF9kID0gb3B0aW9ucy5wb3NpdGlvbikgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogJ2NlbnRlcidcbiAgICAgICAgICAgICAgICAgICAgOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICBpbmRleDogb3B0aW9ucy5pbmRleCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBza2lwU2V0QWN0aXZlOiBvcHRpb25zLnNraXBTZXRBY3RpdmUsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBtYXhpbWl6ZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9ncm91cCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKE5PVF9JTklUSUFMSVpFRF9NRVNTQUdFKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5sb2NhdGlvbi50eXBlICE9PSAnZ3JpZCcpIHtcbiAgICAgICAgICAgIC8vIG9ubHkgZ3JpZCBncm91cHMgY2FuIGJlIG1heGltaXplZFxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWNjZXNzb3IubWF4aW1pemVHcm91cCh0aGlzLl9ncm91cCk7XG4gICAgfVxuICAgIGlzTWF4aW1pemVkKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2dyb3VwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoTk9UX0lOSVRJQUxJWkVEX01FU1NBR0UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmFjY2Vzc29yLmlzTWF4aW1pemVkR3JvdXAodGhpcy5fZ3JvdXApO1xuICAgIH1cbiAgICBleGl0TWF4aW1pemVkKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2dyb3VwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoTk9UX0lOSVRJQUxJWkVEX01FU1NBR0UpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlzTWF4aW1pemVkKCkpIHtcbiAgICAgICAgICAgIHRoaXMuYWNjZXNzb3IuZXhpdE1heGltaXplZEdyb3VwKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaW5pdGlhbGl6ZShncm91cCkge1xuICAgICAgICB0aGlzLl9ncm91cCA9IGdyb3VwO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEVtaXR0ZXIgfSBmcm9tICcuLi9ldmVudHMnO1xuaW1wb3J0IHsgR3JpZHZpZXdQYW5lbEFwaUltcGwgfSBmcm9tICcuL2dyaWR2aWV3UGFuZWxBcGknO1xuaW1wb3J0IHsgQ29tcG9zaXRlRGlzcG9zYWJsZSwgTXV0YWJsZURpc3Bvc2FibGUgfSBmcm9tICcuLi9saWZlY3ljbGUnO1xuZXhwb3J0IGNsYXNzIERvY2t2aWV3UGFuZWxBcGlJbXBsIGV4dGVuZHMgR3JpZHZpZXdQYW5lbEFwaUltcGwge1xuICAgIGdldCBsb2NhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3JvdXAuYXBpLmxvY2F0aW9uO1xuICAgIH1cbiAgICBnZXQgdGl0bGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhbmVsLnRpdGxlO1xuICAgIH1cbiAgICBnZXQgaXNHcm91cEFjdGl2ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3JvdXAuaXNBY3RpdmU7XG4gICAgfVxuICAgIGdldCByZW5kZXJlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFuZWwucmVuZGVyZXI7XG4gICAgfVxuICAgIHNldCBncm91cCh2YWx1ZSkge1xuICAgICAgICBjb25zdCBvbGRHcm91cCA9IHRoaXMuX2dyb3VwO1xuICAgICAgICBpZiAodGhpcy5fZ3JvdXAgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl9ncm91cCA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy5fb25EaWRHcm91cENoYW5nZS5maXJlKHt9KTtcbiAgICAgICAgICAgIHRoaXMuc2V0dXBHcm91cEV2ZW50TGlzdGVuZXJzKG9sZEdyb3VwKTtcbiAgICAgICAgICAgIHRoaXMuX29uRGlkTG9jYXRpb25DaGFuZ2UuZmlyZSh7XG4gICAgICAgICAgICAgICAgbG9jYXRpb246IHRoaXMuZ3JvdXAuYXBpLmxvY2F0aW9uLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGdyb3VwKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ3JvdXA7XG4gICAgfVxuICAgIGdldCB0YWJDb21wb25lbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90YWJDb21wb25lbnQ7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHBhbmVsLCBncm91cCwgYWNjZXNzb3IsIGNvbXBvbmVudCwgdGFiQ29tcG9uZW50KSB7XG4gICAgICAgIHN1cGVyKHBhbmVsLmlkLCBjb21wb25lbnQpO1xuICAgICAgICB0aGlzLnBhbmVsID0gcGFuZWw7XG4gICAgICAgIHRoaXMuYWNjZXNzb3IgPSBhY2Nlc3NvcjtcbiAgICAgICAgdGhpcy5fb25EaWRUaXRsZUNoYW5nZSA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRUaXRsZUNoYW5nZSA9IHRoaXMuX29uRGlkVGl0bGVDaGFuZ2UuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uRGlkQWN0aXZlR3JvdXBDaGFuZ2UgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRGlkQWN0aXZlR3JvdXBDaGFuZ2UgPSB0aGlzLl9vbkRpZEFjdGl2ZUdyb3VwQ2hhbmdlLmV2ZW50O1xuICAgICAgICB0aGlzLl9vbkRpZEdyb3VwQ2hhbmdlID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZEdyb3VwQ2hhbmdlID0gdGhpcy5fb25EaWRHcm91cENoYW5nZS5ldmVudDtcbiAgICAgICAgdGhpcy5fb25EaWRSZW5kZXJlckNoYW5nZSA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRSZW5kZXJlckNoYW5nZSA9IHRoaXMuX29uRGlkUmVuZGVyZXJDaGFuZ2UuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uRGlkTG9jYXRpb25DaGFuZ2UgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRGlkTG9jYXRpb25DaGFuZ2UgPSB0aGlzLl9vbkRpZExvY2F0aW9uQ2hhbmdlLmV2ZW50O1xuICAgICAgICB0aGlzLmdyb3VwRXZlbnRzRGlzcG9zYWJsZSA9IG5ldyBNdXRhYmxlRGlzcG9zYWJsZSgpO1xuICAgICAgICB0aGlzLl90YWJDb21wb25lbnQgPSB0YWJDb21wb25lbnQ7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZShwYW5lbCk7XG4gICAgICAgIHRoaXMuX2dyb3VwID0gZ3JvdXA7XG4gICAgICAgIHRoaXMuc2V0dXBHcm91cEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgICAgIHRoaXMuYWRkRGlzcG9zYWJsZXModGhpcy5ncm91cEV2ZW50c0Rpc3Bvc2FibGUsIHRoaXMuX29uRGlkUmVuZGVyZXJDaGFuZ2UsIHRoaXMuX29uRGlkVGl0bGVDaGFuZ2UsIHRoaXMuX29uRGlkR3JvdXBDaGFuZ2UsIHRoaXMuX29uRGlkQWN0aXZlR3JvdXBDaGFuZ2UsIHRoaXMuX29uRGlkTG9jYXRpb25DaGFuZ2UpO1xuICAgIH1cbiAgICBnZXRXaW5kb3coKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyb3VwLmFwaS5nZXRXaW5kb3coKTtcbiAgICB9XG4gICAgbW92ZVRvKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgdGhpcy5hY2Nlc3Nvci5tb3ZlR3JvdXBPclBhbmVsKHtcbiAgICAgICAgICAgIGZyb206IHsgZ3JvdXBJZDogdGhpcy5fZ3JvdXAuaWQsIHBhbmVsSWQ6IHRoaXMucGFuZWwuaWQgfSxcbiAgICAgICAgICAgIHRvOiB7XG4gICAgICAgICAgICAgICAgZ3JvdXA6IChfYSA9IG9wdGlvbnMuZ3JvdXApICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHRoaXMuX2dyb3VwLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBvcHRpb25zLmdyb3VwXG4gICAgICAgICAgICAgICAgICAgID8gKF9iID0gb3B0aW9ucy5wb3NpdGlvbikgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogJ2NlbnRlcidcbiAgICAgICAgICAgICAgICAgICAgOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICBpbmRleDogb3B0aW9ucy5pbmRleCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBza2lwU2V0QWN0aXZlOiBvcHRpb25zLnNraXBTZXRBY3RpdmUsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzZXRUaXRsZSh0aXRsZSkge1xuICAgICAgICB0aGlzLnBhbmVsLnNldFRpdGxlKHRpdGxlKTtcbiAgICB9XG4gICAgc2V0UmVuZGVyZXIocmVuZGVyZXIpIHtcbiAgICAgICAgdGhpcy5wYW5lbC5zZXRSZW5kZXJlcihyZW5kZXJlcik7XG4gICAgfVxuICAgIGNsb3NlKCkge1xuICAgICAgICB0aGlzLmdyb3VwLm1vZGVsLmNsb3NlUGFuZWwodGhpcy5wYW5lbCk7XG4gICAgfVxuICAgIG1heGltaXplKCkge1xuICAgICAgICB0aGlzLmdyb3VwLmFwaS5tYXhpbWl6ZSgpO1xuICAgIH1cbiAgICBpc01heGltaXplZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3JvdXAuYXBpLmlzTWF4aW1pemVkKCk7XG4gICAgfVxuICAgIGV4aXRNYXhpbWl6ZWQoKSB7XG4gICAgICAgIHRoaXMuZ3JvdXAuYXBpLmV4aXRNYXhpbWl6ZWQoKTtcbiAgICB9XG4gICAgc2V0dXBHcm91cEV2ZW50TGlzdGVuZXJzKHByZXZpb3VzR3JvdXApIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBsZXQgX3RyYWNrR3JvdXBBY3RpdmUgPSAoX2EgPSBwcmV2aW91c0dyb3VwID09PSBudWxsIHx8IHByZXZpb3VzR3JvdXAgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHByZXZpb3VzR3JvdXAuaXNBY3RpdmUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGZhbHNlOyAvLyBwcmV2ZW50IGR1cGxpY2F0ZSBldmVudHMgd2l0aCBzYW1lIHN0YXRlXG4gICAgICAgIHRoaXMuZ3JvdXBFdmVudHNEaXNwb3NhYmxlLnZhbHVlID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUodGhpcy5ncm91cC5hcGkub25EaWRWaXNpYmlsaXR5Q2hhbmdlKChldmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaGFzQmVjb21lSGlkZGVuID0gIWV2ZW50LmlzVmlzaWJsZSAmJiB0aGlzLmlzVmlzaWJsZTtcbiAgICAgICAgICAgIGNvbnN0IGhhc0JlY29tZVZpc2libGUgPSBldmVudC5pc1Zpc2libGUgJiYgIXRoaXMuaXNWaXNpYmxlO1xuICAgICAgICAgICAgY29uc3QgaXNBY3RpdmVQYW5lbCA9IHRoaXMuZ3JvdXAubW9kZWwuaXNQYW5lbEFjdGl2ZSh0aGlzLnBhbmVsKTtcbiAgICAgICAgICAgIGlmIChoYXNCZWNvbWVIaWRkZW4gfHwgKGhhc0JlY29tZVZpc2libGUgJiYgaXNBY3RpdmVQYW5lbCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vbkRpZFZpc2liaWxpdHlDaGFuZ2UuZmlyZShldmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLCB0aGlzLmdyb3VwLmFwaS5vbkRpZExvY2F0aW9uQ2hhbmdlKChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuZ3JvdXAgIT09IHRoaXMucGFuZWwuZ3JvdXApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9vbkRpZExvY2F0aW9uQ2hhbmdlLmZpcmUoZXZlbnQpO1xuICAgICAgICB9KSwgdGhpcy5ncm91cC5hcGkub25EaWRBY3RpdmVDaGFuZ2UoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuZ3JvdXAgIT09IHRoaXMucGFuZWwuZ3JvdXApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoX3RyYWNrR3JvdXBBY3RpdmUgIT09IHRoaXMuaXNHcm91cEFjdGl2ZSkge1xuICAgICAgICAgICAgICAgIF90cmFja0dyb3VwQWN0aXZlID0gdGhpcy5pc0dyb3VwQWN0aXZlO1xuICAgICAgICAgICAgICAgIHRoaXMuX29uRGlkQWN0aXZlR3JvdXBDaGFuZ2UuZmlyZSh7XG4gICAgICAgICAgICAgICAgICAgIGlzQWN0aXZlOiB0aGlzLmlzR3JvdXBBY3RpdmUsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBHcmlkdmlld0FwaSwgUGFuZXZpZXdBcGksIFNwbGl0dmlld0FwaSwgfSBmcm9tICcuLi9hcGkvY29tcG9uZW50LmFwaSc7XG5pbXBvcnQgeyBEb2Nrdmlld0NvbXBvbmVudCB9IGZyb20gJy4uL2RvY2t2aWV3L2RvY2t2aWV3Q29tcG9uZW50JztcbmltcG9ydCB7IEdyaWR2aWV3Q29tcG9uZW50IH0gZnJvbSAnLi4vZ3JpZHZpZXcvZ3JpZHZpZXdDb21wb25lbnQnO1xuaW1wb3J0IHsgUGFuZXZpZXdDb21wb25lbnQgfSBmcm9tICcuLi9wYW5ldmlldy9wYW5ldmlld0NvbXBvbmVudCc7XG5pbXBvcnQgeyBTcGxpdHZpZXdDb21wb25lbnQgfSBmcm9tICcuLi9zcGxpdHZpZXcvc3BsaXR2aWV3Q29tcG9uZW50JztcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEb2NrdmlldyhlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgY29uc3QgY29tcG9uZW50ID0gbmV3IERvY2t2aWV3Q29tcG9uZW50KGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgIHJldHVybiBjb21wb25lbnQuYXBpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNwbGl0dmlldyhlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgY29uc3QgY29tcG9uZW50ID0gbmV3IFNwbGl0dmlld0NvbXBvbmVudChlbGVtZW50LCBvcHRpb25zKTtcbiAgICByZXR1cm4gbmV3IFNwbGl0dmlld0FwaShjb21wb25lbnQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUdyaWR2aWV3KGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBjb21wb25lbnQgPSBuZXcgR3JpZHZpZXdDb21wb25lbnQoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIG5ldyBHcmlkdmlld0FwaShjb21wb25lbnQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVBhbmV2aWV3KGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBjb21wb25lbnQgPSBuZXcgUGFuZXZpZXdDb21wb25lbnQoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIG5ldyBQYW5ldmlld0FwaShjb21wb25lbnQpO1xufVxuIiwiaW1wb3J0IHsgRW1pdHRlciB9IGZyb20gJy4uL2V2ZW50cyc7XG5pbXBvcnQgeyBQYW5lbEFwaUltcGwgfSBmcm9tICcuL3BhbmVsQXBpJztcbmV4cG9ydCBjbGFzcyBHcmlkdmlld1BhbmVsQXBpSW1wbCBleHRlbmRzIFBhbmVsQXBpSW1wbCB7XG4gICAgY29uc3RydWN0b3IoaWQsIGNvbXBvbmVudCwgcGFuZWwpIHtcbiAgICAgICAgc3VwZXIoaWQsIGNvbXBvbmVudCk7XG4gICAgICAgIHRoaXMuX29uRGlkQ29uc3RyYWludHNDaGFuZ2VJbnRlcm5hbCA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRDb25zdHJhaW50c0NoYW5nZUludGVybmFsID0gdGhpcy5fb25EaWRDb25zdHJhaW50c0NoYW5nZUludGVybmFsLmV2ZW50O1xuICAgICAgICB0aGlzLl9vbkRpZENvbnN0cmFpbnRzQ2hhbmdlID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZENvbnN0cmFpbnRzQ2hhbmdlID0gdGhpcy5fb25EaWRDb25zdHJhaW50c0NoYW5nZS5ldmVudDtcbiAgICAgICAgdGhpcy5fb25EaWRTaXplQ2hhbmdlID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZFNpemVDaGFuZ2UgPSB0aGlzLl9vbkRpZFNpemVDaGFuZ2UuZXZlbnQ7XG4gICAgICAgIHRoaXMuYWRkRGlzcG9zYWJsZXModGhpcy5fb25EaWRDb25zdHJhaW50c0NoYW5nZUludGVybmFsLCB0aGlzLl9vbkRpZENvbnN0cmFpbnRzQ2hhbmdlLCB0aGlzLl9vbkRpZFNpemVDaGFuZ2UpO1xuICAgICAgICBpZiAocGFuZWwpIHtcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZShwYW5lbCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2V0Q29uc3RyYWludHModmFsdWUpIHtcbiAgICAgICAgdGhpcy5fb25EaWRDb25zdHJhaW50c0NoYW5nZUludGVybmFsLmZpcmUodmFsdWUpO1xuICAgIH1cbiAgICBzZXRTaXplKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuX29uRGlkU2l6ZUNoYW5nZS5maXJlKGV2ZW50KTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBEb2Nrdmlld0V2ZW50LCBFbWl0dGVyIH0gZnJvbSAnLi4vZXZlbnRzJztcbmltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUsIE11dGFibGVEaXNwb3NhYmxlIH0gZnJvbSAnLi4vbGlmZWN5Y2xlJztcbmV4cG9ydCBjbGFzcyBXaWxsRm9jdXNFdmVudCBleHRlbmRzIERvY2t2aWV3RXZlbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cbn1cbi8qKlxuICogQSBjb3JlIGFwaSBpbXBsZW1lbnRhdGlvbiB0aGF0IHNob3VsZCBiZSB1c2VkIGFjcm9zcyBhbGwgcGFuZWwtbGlrZSBvYmplY3RzXG4gKi9cbmV4cG9ydCBjbGFzcyBQYW5lbEFwaUltcGwgZXh0ZW5kcyBDb21wb3NpdGVEaXNwb3NhYmxlIHtcbiAgICBnZXQgaXNGb2N1c2VkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNGb2N1c2VkO1xuICAgIH1cbiAgICBnZXQgaXNBY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc0FjdGl2ZTtcbiAgICB9XG4gICAgZ2V0IGlzVmlzaWJsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzVmlzaWJsZTtcbiAgICB9XG4gICAgZ2V0IHdpZHRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fd2lkdGg7XG4gICAgfVxuICAgIGdldCBoZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9oZWlnaHQ7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGlkLCBjb21wb25lbnQpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLmNvbXBvbmVudCA9IGNvbXBvbmVudDtcbiAgICAgICAgdGhpcy5faXNGb2N1c2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2lzQWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2lzVmlzaWJsZSA9IHRydWU7XG4gICAgICAgIHRoaXMuX3dpZHRoID0gMDtcbiAgICAgICAgdGhpcy5faGVpZ2h0ID0gMDtcbiAgICAgICAgdGhpcy5fcGFyYW1ldGVycyA9IHt9O1xuICAgICAgICB0aGlzLnBhbmVsVXBkYXRlc0Rpc3Bvc2FibGUgPSBuZXcgTXV0YWJsZURpc3Bvc2FibGUoKTtcbiAgICAgICAgdGhpcy5fb25EaWREaW1lbnNpb25DaGFuZ2UgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRGlkRGltZW5zaW9uc0NoYW5nZSA9IHRoaXMuX29uRGlkRGltZW5zaW9uQ2hhbmdlLmV2ZW50O1xuICAgICAgICB0aGlzLl9vbkRpZENoYW5nZUZvY3VzID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZEZvY3VzQ2hhbmdlID0gdGhpcy5fb25EaWRDaGFuZ2VGb2N1cy5ldmVudDtcbiAgICAgICAgLy9cbiAgICAgICAgdGhpcy5fb25XaWxsRm9jdXMgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uV2lsbEZvY3VzID0gdGhpcy5fb25XaWxsRm9jdXMuZXZlbnQ7XG4gICAgICAgIC8vXG4gICAgICAgIHRoaXMuX29uRGlkVmlzaWJpbGl0eUNoYW5nZSA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRWaXNpYmlsaXR5Q2hhbmdlID0gdGhpcy5fb25EaWRWaXNpYmlsaXR5Q2hhbmdlLmV2ZW50O1xuICAgICAgICB0aGlzLl9vbldpbGxWaXNpYmlsaXR5Q2hhbmdlID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbldpbGxWaXNpYmlsaXR5Q2hhbmdlID0gdGhpcy5fb25XaWxsVmlzaWJpbGl0eUNoYW5nZS5ldmVudDtcbiAgICAgICAgdGhpcy5fb25EaWRBY3RpdmVDaGFuZ2UgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRGlkQWN0aXZlQ2hhbmdlID0gdGhpcy5fb25EaWRBY3RpdmVDaGFuZ2UuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uQWN0aXZlQ2hhbmdlID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkFjdGl2ZUNoYW5nZSA9IHRoaXMuX29uQWN0aXZlQ2hhbmdlLmV2ZW50O1xuICAgICAgICB0aGlzLl9vbkRpZFBhcmFtZXRlcnNDaGFuZ2UgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRGlkUGFyYW1ldGVyc0NoYW5nZSA9IHRoaXMuX29uRGlkUGFyYW1ldGVyc0NoYW5nZS5ldmVudDtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyh0aGlzLm9uRGlkRm9jdXNDaGFuZ2UoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9pc0ZvY3VzZWQgPSBldmVudC5pc0ZvY3VzZWQ7XG4gICAgICAgIH0pLCB0aGlzLm9uRGlkQWN0aXZlQ2hhbmdlKChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5faXNBY3RpdmUgPSBldmVudC5pc0FjdGl2ZTtcbiAgICAgICAgfSksIHRoaXMub25EaWRWaXNpYmlsaXR5Q2hhbmdlKChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5faXNWaXNpYmxlID0gZXZlbnQuaXNWaXNpYmxlO1xuICAgICAgICB9KSwgdGhpcy5vbkRpZERpbWVuc2lvbnNDaGFuZ2UoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl93aWR0aCA9IGV2ZW50LndpZHRoO1xuICAgICAgICAgICAgdGhpcy5faGVpZ2h0ID0gZXZlbnQuaGVpZ2h0O1xuICAgICAgICB9KSwgdGhpcy5wYW5lbFVwZGF0ZXNEaXNwb3NhYmxlLCB0aGlzLl9vbkRpZERpbWVuc2lvbkNoYW5nZSwgdGhpcy5fb25EaWRDaGFuZ2VGb2N1cywgdGhpcy5fb25EaWRWaXNpYmlsaXR5Q2hhbmdlLCB0aGlzLl9vbkRpZEFjdGl2ZUNoYW5nZSwgdGhpcy5fb25XaWxsRm9jdXMsIHRoaXMuX29uQWN0aXZlQ2hhbmdlLCB0aGlzLl9vbldpbGxGb2N1cywgdGhpcy5fb25XaWxsVmlzaWJpbGl0eUNoYW5nZSwgdGhpcy5fb25EaWRQYXJhbWV0ZXJzQ2hhbmdlKTtcbiAgICB9XG4gICAgZ2V0UGFyYW1ldGVycygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcmFtZXRlcnM7XG4gICAgfVxuICAgIGluaXRpYWxpemUocGFuZWwpIHtcbiAgICAgICAgdGhpcy5wYW5lbFVwZGF0ZXNEaXNwb3NhYmxlLnZhbHVlID0gdGhpcy5fb25EaWRQYXJhbWV0ZXJzQ2hhbmdlLmV2ZW50KChwYXJhbWV0ZXJzKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9wYXJhbWV0ZXJzID0gcGFyYW1ldGVycztcbiAgICAgICAgICAgIHBhbmVsLnVwZGF0ZSh7XG4gICAgICAgICAgICAgICAgcGFyYW1zOiBwYXJhbWV0ZXJzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzZXRWaXNpYmxlKGlzVmlzaWJsZSkge1xuICAgICAgICB0aGlzLl9vbldpbGxWaXNpYmlsaXR5Q2hhbmdlLmZpcmUoeyBpc1Zpc2libGUgfSk7XG4gICAgfVxuICAgIHNldEFjdGl2ZSgpIHtcbiAgICAgICAgdGhpcy5fb25BY3RpdmVDaGFuZ2UuZmlyZSgpO1xuICAgIH1cbiAgICB1cGRhdGVQYXJhbWV0ZXJzKHBhcmFtZXRlcnMpIHtcbiAgICAgICAgdGhpcy5fb25EaWRQYXJhbWV0ZXJzQ2hhbmdlLmZpcmUocGFyYW1ldGVycyk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgRW1pdHRlciB9IGZyb20gJy4uL2V2ZW50cyc7XG5pbXBvcnQgeyBTcGxpdHZpZXdQYW5lbEFwaUltcGwgfSBmcm9tICcuL3NwbGl0dmlld1BhbmVsQXBpJztcbmV4cG9ydCBjbGFzcyBQYW5ldmlld1BhbmVsQXBpSW1wbCBleHRlbmRzIFNwbGl0dmlld1BhbmVsQXBpSW1wbCB7XG4gICAgc2V0IHBhbmUocGFuZSkge1xuICAgICAgICB0aGlzLl9wYW5lID0gcGFuZTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoaWQsIGNvbXBvbmVudCkge1xuICAgICAgICBzdXBlcihpZCwgY29tcG9uZW50KTtcbiAgICAgICAgdGhpcy5fb25EaWRFeHBhbnNpb25DaGFuZ2UgPSBuZXcgRW1pdHRlcih7XG4gICAgICAgICAgICByZXBsYXk6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm9uRGlkRXhwYW5zaW9uQ2hhbmdlID0gdGhpcy5fb25EaWRFeHBhbnNpb25DaGFuZ2UuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uTW91c2VFbnRlciA9IG5ldyBFbWl0dGVyKHt9KTtcbiAgICAgICAgdGhpcy5vbk1vdXNlRW50ZXIgPSB0aGlzLl9vbk1vdXNlRW50ZXIuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uTW91c2VMZWF2ZSA9IG5ldyBFbWl0dGVyKHt9KTtcbiAgICAgICAgdGhpcy5vbk1vdXNlTGVhdmUgPSB0aGlzLl9vbk1vdXNlTGVhdmUuZXZlbnQ7XG4gICAgICAgIHRoaXMuYWRkRGlzcG9zYWJsZXModGhpcy5fb25EaWRFeHBhbnNpb25DaGFuZ2UsIHRoaXMuX29uTW91c2VFbnRlciwgdGhpcy5fb25Nb3VzZUxlYXZlKTtcbiAgICB9XG4gICAgc2V0RXhwYW5kZWQoaXNFeHBhbmRlZCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIChfYSA9IHRoaXMuX3BhbmUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zZXRFeHBhbmRlZChpc0V4cGFuZGVkKTtcbiAgICB9XG4gICAgZ2V0IGlzRXhwYW5kZWQoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuICEhKChfYSA9IHRoaXMuX3BhbmUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pc0V4cGFuZGVkKCkpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEVtaXR0ZXIgfSBmcm9tICcuLi9ldmVudHMnO1xuaW1wb3J0IHsgUGFuZWxBcGlJbXBsIH0gZnJvbSAnLi9wYW5lbEFwaSc7XG5leHBvcnQgY2xhc3MgU3BsaXR2aWV3UGFuZWxBcGlJbXBsIGV4dGVuZHMgUGFuZWxBcGlJbXBsIHtcbiAgICAvL1xuICAgIGNvbnN0cnVjdG9yKGlkLCBjb21wb25lbnQpIHtcbiAgICAgICAgc3VwZXIoaWQsIGNvbXBvbmVudCk7XG4gICAgICAgIHRoaXMuX29uRGlkQ29uc3RyYWludHNDaGFuZ2VJbnRlcm5hbCA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRDb25zdHJhaW50c0NoYW5nZUludGVybmFsID0gdGhpcy5fb25EaWRDb25zdHJhaW50c0NoYW5nZUludGVybmFsLmV2ZW50O1xuICAgICAgICAvL1xuICAgICAgICB0aGlzLl9vbkRpZENvbnN0cmFpbnRzQ2hhbmdlID0gbmV3IEVtaXR0ZXIoe1xuICAgICAgICAgICAgcmVwbGF5OiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5vbkRpZENvbnN0cmFpbnRzQ2hhbmdlID0gdGhpcy5fb25EaWRDb25zdHJhaW50c0NoYW5nZS5ldmVudDtcbiAgICAgICAgLy9cbiAgICAgICAgdGhpcy5fb25EaWRTaXplQ2hhbmdlID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZFNpemVDaGFuZ2UgPSB0aGlzLl9vbkRpZFNpemVDaGFuZ2UuZXZlbnQ7XG4gICAgICAgIHRoaXMuYWRkRGlzcG9zYWJsZXModGhpcy5fb25EaWRDb25zdHJhaW50c0NoYW5nZUludGVybmFsLCB0aGlzLl9vbkRpZENvbnN0cmFpbnRzQ2hhbmdlLCB0aGlzLl9vbkRpZFNpemVDaGFuZ2UpO1xuICAgIH1cbiAgICBzZXRDb25zdHJhaW50cyh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9vbkRpZENvbnN0cmFpbnRzQ2hhbmdlSW50ZXJuYWwuZmlyZSh2YWx1ZSk7XG4gICAgfVxuICAgIHNldFNpemUoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5fb25EaWRTaXplQ2hhbmdlLmZpcmUoZXZlbnQpO1xuICAgIH1cbn1cbiIsImV4cG9ydCBmdW5jdGlvbiB0YWlsKGFycikge1xuICAgIGlmIChhcnIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB0YWlsIGNhbGwnKTtcbiAgICB9XG4gICAgcmV0dXJuIFthcnIuc2xpY2UoMCwgYXJyLmxlbmd0aCAtIDEpLCBhcnJbYXJyLmxlbmd0aCAtIDFdXTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBsYXN0KGFycikge1xuICAgIHJldHVybiBhcnIubGVuZ3RoID4gMCA/IGFyclthcnIubGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gc2VxdWVuY2VFcXVhbHMoYXJyMSwgYXJyMikge1xuICAgIGlmIChhcnIxLmxlbmd0aCAhPT0gYXJyMi5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycjEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGFycjFbaV0gIT09IGFycjJbaV0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbi8qKlxuICogUHVzaGVzIGFuIGVsZW1lbnQgdG8gdGhlIHN0YXJ0IG9mIHRoZSBhcnJheSwgaWYgZm91bmQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwdXNoVG9TdGFydChhcnIsIHZhbHVlKSB7XG4gICAgY29uc3QgaW5kZXggPSBhcnIuaW5kZXhPZih2YWx1ZSk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgYXJyLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIGFyci51bnNoaWZ0KHZhbHVlKTtcbiAgICB9XG59XG4vKipcbiAqIFB1c2hlcyBhbiBlbGVtZW50IHRvIHRoZSBlbmQgb2YgdGhlIGFycmF5LCBpZiBmb3VuZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHB1c2hUb0VuZChhcnIsIHZhbHVlKSB7XG4gICAgY29uc3QgaW5kZXggPSBhcnIuaW5kZXhPZih2YWx1ZSk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgYXJyLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIGFyci5wdXNoKHZhbHVlKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gZmlyc3RJbmRleChhcnJheSwgZm4pIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBhcnJheVtpXTtcbiAgICAgICAgaWYgKGZuKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlKGFycmF5LCB2YWx1ZSkge1xuICAgIGNvbnN0IGluZGV4ID0gYXJyYXkuZmluZEluZGV4KCh0KSA9PiB0ID09PSB2YWx1ZSk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgYXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbiIsImV4cG9ydCBjb25zdCBERUZBVUxUX0ZMT0FUSU5HX0dST1VQX09WRVJGTE9XX1NJWkUgPSAxMDA7XG5leHBvcnQgY29uc3QgREVGQVVMVF9GTE9BVElOR19HUk9VUF9QT1NJVElPTiA9IHsgbGVmdDogMTAwLCB0b3A6IDEwMCwgd2lkdGg6IDMwMCwgaGVpZ2h0OiAzMDAgfTtcbmV4cG9ydCBjb25zdCBERVNFUklBTElaQVRJT05fUE9QT1VUX0RFTEFZX01TID0gMTAwO1xuIiwiaW1wb3J0IHsgZGlzYWJsZUlmcmFtZVBvaW50RXZlbnRzIH0gZnJvbSAnLi4vZG9tJztcbmltcG9ydCB7IGFkZERpc3Bvc2FibGVMaXN0ZW5lciwgRW1pdHRlciB9IGZyb20gJy4uL2V2ZW50cyc7XG5pbXBvcnQgeyBDb21wb3NpdGVEaXNwb3NhYmxlLCBNdXRhYmxlRGlzcG9zYWJsZSwgfSBmcm9tICcuLi9saWZlY3ljbGUnO1xuZXhwb3J0IGNsYXNzIERyYWdIYW5kbGVyIGV4dGVuZHMgQ29tcG9zaXRlRGlzcG9zYWJsZSB7XG4gICAgY29uc3RydWN0b3IoZWwsIGRpc2FibGVkKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZWwgPSBlbDtcbiAgICAgICAgdGhpcy5kaXNhYmxlZCA9IGRpc2FibGVkO1xuICAgICAgICB0aGlzLmRhdGFEaXNwb3NhYmxlID0gbmV3IE11dGFibGVEaXNwb3NhYmxlKCk7XG4gICAgICAgIHRoaXMucG9pbnRlckV2ZW50c0Rpc3Bvc2FibGUgPSBuZXcgTXV0YWJsZURpc3Bvc2FibGUoKTtcbiAgICAgICAgdGhpcy5fb25EcmFnU3RhcnQgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRHJhZ1N0YXJ0ID0gdGhpcy5fb25EcmFnU3RhcnQuZXZlbnQ7XG4gICAgICAgIHRoaXMuYWRkRGlzcG9zYWJsZXModGhpcy5fb25EcmFnU3RhcnQsIHRoaXMuZGF0YURpc3Bvc2FibGUsIHRoaXMucG9pbnRlckV2ZW50c0Rpc3Bvc2FibGUpO1xuICAgICAgICB0aGlzLmNvbmZpZ3VyZSgpO1xuICAgIH1cbiAgICBzZXREaXNhYmxlZChkaXNhYmxlZCkge1xuICAgICAgICB0aGlzLmRpc2FibGVkID0gZGlzYWJsZWQ7XG4gICAgfVxuICAgIGlzQ2FuY2VsbGVkKF9ldmVudCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbmZpZ3VyZSgpIHtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyh0aGlzLl9vbkRyYWdTdGFydCwgYWRkRGlzcG9zYWJsZUxpc3RlbmVyKHRoaXMuZWwsICdkcmFnc3RhcnQnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkIHx8IHRoaXMuaXNDYW5jZWxsZWQoZXZlbnQpIHx8IHRoaXMuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGlmcmFtZXMgPSBkaXNhYmxlSWZyYW1lUG9pbnRFdmVudHMoKTtcbiAgICAgICAgICAgIHRoaXMucG9pbnRlckV2ZW50c0Rpc3Bvc2FibGUudmFsdWUgPSB7XG4gICAgICAgICAgICAgICAgZGlzcG9zZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZnJhbWVzLnJlbGVhc2UoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuZWwuY2xhc3NMaXN0LmFkZCgnZHYtZHJhZ2dlZCcpO1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLmVsLmNsYXNzTGlzdC5yZW1vdmUoJ2R2LWRyYWdnZWQnKSwgMCk7XG4gICAgICAgICAgICB0aGlzLmRhdGFEaXNwb3NhYmxlLnZhbHVlID0gdGhpcy5nZXREYXRhKGV2ZW50KTtcbiAgICAgICAgICAgIHRoaXMuX29uRHJhZ1N0YXJ0LmZpcmUoZXZlbnQpO1xuICAgICAgICAgICAgaWYgKGV2ZW50LmRhdGFUcmFuc2Zlcikge1xuICAgICAgICAgICAgICAgIGV2ZW50LmRhdGFUcmFuc2Zlci5lZmZlY3RBbGxvd2VkID0gJ21vdmUnO1xuICAgICAgICAgICAgICAgIGNvbnN0IGhhc0RhdGEgPSBldmVudC5kYXRhVHJhbnNmZXIuaXRlbXMubGVuZ3RoID4gMDtcbiAgICAgICAgICAgICAgICBpZiAoIWhhc0RhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIEFsdGhvdWdoIHRoaXMgaXMgbm90IHVzZWQgYnkgZG9ja3ZpZXcgbWFueSB0aGlyZCBwYXJ0eSBkbmQgbGlicmFyaWVzIHdpbGwgY2hlY2tcbiAgICAgICAgICAgICAgICAgICAgICogZGF0YVRyYW5zZmVyLnR5cGVzIHRvIGRldGVybWluZSB2YWxpZCBkcmFnIGV2ZW50cy5cbiAgICAgICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgICAgICogRm9yIGV4YW1wbGU6IGluIHJlYWN0LWRuZCBpZiBkYXRhVHJhbnNmZXIudHlwZXMgaXMgbm90IHNldCB0aGVuIHRoZSBkcmFnU3RhcnQgZXZlbnQgd2lsbCBiZSBjYW5jZWxsZWRcbiAgICAgICAgICAgICAgICAgICAgICogdGhyb3VnaCAucHJldmVudERlZmF1bHQoKS4gU2luY2UgdGhpcyBpcyBhcHBsaWVkIGdsb2JhbGx5IHRvIGFsbCBkcmFnIGV2ZW50cyB0aGlzIHdvdWxkIGJyZWFrIGRvY2t2aWV3c1xuICAgICAgICAgICAgICAgICAgICAgKiBkbmQgbG9naWMuIFlvdSBjYW4gc2VlIHRoZSBjb2RlIGF0XG4gICAgICAgICAgICAgICAgIFAgICAgKiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtZG5kL3JlYWN0LWRuZC9ibG9iL21haW4vcGFja2FnZXMvYmFja2VuZC1odG1sNS9zcmMvSFRNTDVCYWNrZW5kSW1wbC50cyNMNTQyXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBldmVudC5kYXRhVHJhbnNmZXIuc2V0RGF0YSgndGV4dC9wbGFpbicsICcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLCBhZGREaXNwb3NhYmxlTGlzdGVuZXIodGhpcy5lbCwgJ2RyYWdlbmQnLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnBvaW50ZXJFdmVudHNEaXNwb3NhYmxlLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YURpc3Bvc2FibGUuZGlzcG9zZSgpOyAvLyBhbGxvdyB0aGUgZGF0YSB0byBiZSByZWFkIGJ5IG90aGVyIGhhbmRsZXJzIGJlZm9yZSBkaXNwb3NpbmdcbiAgICAgICAgICAgIH0sIDApO1xuICAgICAgICB9KSk7XG4gICAgfVxufVxuIiwiY2xhc3MgVHJhbnNmZXJPYmplY3Qge1xufVxuZXhwb3J0IGNsYXNzIFBhbmVsVHJhbnNmZXIgZXh0ZW5kcyBUcmFuc2Zlck9iamVjdCB7XG4gICAgY29uc3RydWN0b3Iodmlld0lkLCBncm91cElkLCBwYW5lbElkKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMudmlld0lkID0gdmlld0lkO1xuICAgICAgICB0aGlzLmdyb3VwSWQgPSBncm91cElkO1xuICAgICAgICB0aGlzLnBhbmVsSWQgPSBwYW5lbElkO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBQYW5lVHJhbnNmZXIgZXh0ZW5kcyBUcmFuc2Zlck9iamVjdCB7XG4gICAgY29uc3RydWN0b3Iodmlld0lkLCBwYW5lSWQpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy52aWV3SWQgPSB2aWV3SWQ7XG4gICAgICAgIHRoaXMucGFuZUlkID0gcGFuZUlkO1xuICAgIH1cbn1cbi8qKlxuICogQSBzaW5nbGV0b24gdG8gc3RvcmUgdHJhbnNmZXIgZGF0YSBkdXJpbmcgZHJhZyAmIGRyb3Agb3BlcmF0aW9ucyB0aGF0IGFyZSBvbmx5IHZhbGlkIHdpdGhpbiB0aGUgYXBwbGljYXRpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBMb2NhbFNlbGVjdGlvblRyYW5zZmVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLy8gcHJvdGVjdCBhZ2FpbnN0IGV4dGVybmFsIGluc3RhbnRpYXRpb25cbiAgICB9XG4gICAgc3RhdGljIGdldEluc3RhbmNlKCkge1xuICAgICAgICByZXR1cm4gTG9jYWxTZWxlY3Rpb25UcmFuc2Zlci5JTlNUQU5DRTtcbiAgICB9XG4gICAgaGFzRGF0YShwcm90bykge1xuICAgICAgICByZXR1cm4gcHJvdG8gJiYgcHJvdG8gPT09IHRoaXMucHJvdG87XG4gICAgfVxuICAgIGNsZWFyRGF0YShwcm90bykge1xuICAgICAgICBpZiAodGhpcy5oYXNEYXRhKHByb3RvKSkge1xuICAgICAgICAgICAgdGhpcy5wcm90byA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMuZGF0YSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXREYXRhKHByb3RvKSB7XG4gICAgICAgIGlmICh0aGlzLmhhc0RhdGEocHJvdG8pKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHNldERhdGEoZGF0YSwgcHJvdG8pIHtcbiAgICAgICAgaWYgKHByb3RvKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICAgICAgdGhpcy5wcm90byA9IHByb3RvO1xuICAgICAgICB9XG4gICAgfVxufVxuTG9jYWxTZWxlY3Rpb25UcmFuc2Zlci5JTlNUQU5DRSA9IG5ldyBMb2NhbFNlbGVjdGlvblRyYW5zZmVyKCk7XG5leHBvcnQgZnVuY3Rpb24gZ2V0UGFuZWxEYXRhKCkge1xuICAgIGNvbnN0IHBhbmVsVHJhbnNmZXIgPSBMb2NhbFNlbGVjdGlvblRyYW5zZmVyLmdldEluc3RhbmNlKCk7XG4gICAgY29uc3QgaXNQYW5lbEV2ZW50ID0gcGFuZWxUcmFuc2Zlci5oYXNEYXRhKFBhbmVsVHJhbnNmZXIucHJvdG90eXBlKTtcbiAgICBpZiAoIWlzUGFuZWxFdmVudCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gcGFuZWxUcmFuc2Zlci5nZXREYXRhKFBhbmVsVHJhbnNmZXIucHJvdG90eXBlKVswXTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRQYW5lRGF0YSgpIHtcbiAgICBjb25zdCBwYW5lVHJhbnNmZXIgPSBMb2NhbFNlbGVjdGlvblRyYW5zZmVyLmdldEluc3RhbmNlKCk7XG4gICAgY29uc3QgaXNQYW5lbEV2ZW50ID0gcGFuZVRyYW5zZmVyLmhhc0RhdGEoUGFuZVRyYW5zZmVyLnByb3RvdHlwZSk7XG4gICAgaWYgKCFpc1BhbmVsRXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIHBhbmVUcmFuc2Zlci5nZXREYXRhKFBhbmVUcmFuc2Zlci5wcm90b3R5cGUpWzBdO1xufVxuIiwiaW1wb3J0IHsgYWRkRGlzcG9zYWJsZUxpc3RlbmVyIH0gZnJvbSAnLi4vZXZlbnRzJztcbmltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUgfSBmcm9tICcuLi9saWZlY3ljbGUnO1xuZXhwb3J0IGNsYXNzIERyYWdBbmREcm9wT2JzZXJ2ZXIgZXh0ZW5kcyBDb21wb3NpdGVEaXNwb3NhYmxlIHtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50LCBjYWxsYmFja3MpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgdGhpcy5jYWxsYmFja3MgPSBjYWxsYmFja3M7XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5yZWdpc3Rlckxpc3RlbmVycygpO1xuICAgIH1cbiAgICBvbkRyYWdFbnRlcihlKSB7XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICAgIHRoaXMuY2FsbGJhY2tzLm9uRHJhZ0VudGVyKGUpO1xuICAgIH1cbiAgICBvbkRyYWdPdmVyKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAvLyBuZWVkZWQgc28gdGhhdCB0aGUgZHJvcCBldmVudCBmaXJlcyAoaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjEzMzk5MjQvZHJvcC1ldmVudC1ub3QtZmlyaW5nLWluLWNocm9tZSlcbiAgICAgICAgaWYgKHRoaXMuY2FsbGJhY2tzLm9uRHJhZ092ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tzLm9uRHJhZ092ZXIoZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgb25EcmFnTGVhdmUoZSkge1xuICAgICAgICBpZiAodGhpcy50YXJnZXQgPT09IGUudGFyZ2V0KSB7XG4gICAgICAgICAgICB0aGlzLnRhcmdldCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmNhbGxiYWNrcy5vbkRyYWdMZWF2ZShlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvbkRyYWdFbmQoZSkge1xuICAgICAgICB0aGlzLnRhcmdldCA9IG51bGw7XG4gICAgICAgIHRoaXMuY2FsbGJhY2tzLm9uRHJhZ0VuZChlKTtcbiAgICB9XG4gICAgb25Ecm9wKGUpIHtcbiAgICAgICAgdGhpcy5jYWxsYmFja3Mub25Ecm9wKGUpO1xuICAgIH1cbiAgICByZWdpc3Rlckxpc3RlbmVycygpIHtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyhhZGREaXNwb3NhYmxlTGlzdGVuZXIodGhpcy5lbGVtZW50LCAnZHJhZ2VudGVyJywgKGUpID0+IHtcbiAgICAgICAgICAgIHRoaXMub25EcmFnRW50ZXIoZSk7XG4gICAgICAgIH0sIHRydWUpKTtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyhhZGREaXNwb3NhYmxlTGlzdGVuZXIodGhpcy5lbGVtZW50LCAnZHJhZ292ZXInLCAoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vbkRyYWdPdmVyKGUpO1xuICAgICAgICB9LCB0cnVlKSk7XG4gICAgICAgIHRoaXMuYWRkRGlzcG9zYWJsZXMoYWRkRGlzcG9zYWJsZUxpc3RlbmVyKHRoaXMuZWxlbWVudCwgJ2RyYWdsZWF2ZScsIChlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm9uRHJhZ0xlYXZlKGUpO1xuICAgICAgICB9KSk7XG4gICAgICAgIHRoaXMuYWRkRGlzcG9zYWJsZXMoYWRkRGlzcG9zYWJsZUxpc3RlbmVyKHRoaXMuZWxlbWVudCwgJ2RyYWdlbmQnLCAoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vbkRyYWdFbmQoZSk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyhhZGREaXNwb3NhYmxlTGlzdGVuZXIodGhpcy5lbGVtZW50LCAnZHJvcCcsIChlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm9uRHJvcChlKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUsIERpc3Bvc2FibGUgfSBmcm9tICcuLi9saWZlY3ljbGUnO1xuZXhwb3J0IGNsYXNzIERyb3BUYXJnZXRBbmNob3JDb250YWluZXIgZXh0ZW5kcyBDb21wb3NpdGVEaXNwb3NhYmxlIHtcbiAgICBnZXQgZGlzYWJsZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kaXNhYmxlZDtcbiAgICB9XG4gICAgc2V0IGRpc2FibGVkKHZhbHVlKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHRoaXMuZGlzYWJsZWQgPT09IHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZGlzYWJsZWQgPSB2YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAoX2EgPSB0aGlzLm1vZGVsKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2xlYXIoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgbW9kZWwoKSB7XG4gICAgICAgIGlmICh0aGlzLmRpc2FibGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjbGVhcjogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbW9kZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgKF9hID0gdGhpcy5fbW9kZWwucm9vdC5wYXJlbnRFbGVtZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucmVtb3ZlQ2hpbGQodGhpcy5fbW9kZWwucm9vdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX21vZGVsID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGV4aXN0czogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiAhIXRoaXMuX21vZGVsO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldEVsZW1lbnRzOiAoZXZlbnQsIG91dGxpbmUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaGFuZ2VkID0gdGhpcy5fb3V0bGluZSAhPT0gb3V0bGluZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9vdXRsaW5lID0gb3V0bGluZTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbW9kZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW9kZWwuY2hhbmdlZCA9IGNoYW5nZWQ7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb2RlbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5jcmVhdGVDb250YWluZXIoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBhbmNob3IgPSB0aGlzLmNyZWF0ZUFuY2hvcigpO1xuICAgICAgICAgICAgICAgIHRoaXMuX21vZGVsID0geyByb290OiBjb250YWluZXIsIG92ZXJsYXk6IGFuY2hvciwgY2hhbmdlZCB9O1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChhbmNob3IpO1xuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuICAgICAgICAgICAgICAgIGlmICgoZXZlbnQgPT09IG51bGwgfHwgZXZlbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGV2ZW50LnRhcmdldCkgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXRCb3ggPSBldmVudC50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJveCA9IHRoaXMuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgYW5jaG9yLnN0eWxlLmxlZnQgPSBgJHt0YXJnZXRCb3gubGVmdCAtIGJveC5sZWZ0fXB4YDtcbiAgICAgICAgICAgICAgICAgICAgYW5jaG9yLnN0eWxlLnRvcCA9IGAke3RhcmdldEJveC50b3AgLSBib3gudG9wfXB4YDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vZGVsO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICB0aGlzLl9kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9kaXNhYmxlZCA9IG9wdGlvbnMuZGlzYWJsZWQ7XG4gICAgICAgIHRoaXMuYWRkRGlzcG9zYWJsZXMoRGlzcG9zYWJsZS5mcm9tKCgpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIChfYSA9IHRoaXMubW9kZWwpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jbGVhcigpO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGNyZWF0ZUNvbnRhaW5lcigpIHtcbiAgICAgICAgY29uc3QgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgZWwuY2xhc3NOYW1lID0gJ2R2LWRyb3AtdGFyZ2V0LWNvbnRhaW5lcic7XG4gICAgICAgIHJldHVybiBlbDtcbiAgICB9XG4gICAgY3JlYXRlQW5jaG9yKCkge1xuICAgICAgICBjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBlbC5jbGFzc05hbWUgPSAnZHYtZHJvcC10YXJnZXQtYW5jaG9yJztcbiAgICAgICAgZWwuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgICAgICByZXR1cm4gZWw7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgdG9nZ2xlQ2xhc3MgfSBmcm9tICcuLi9kb20nO1xuaW1wb3J0IHsgRG9ja3ZpZXdFdmVudCwgRW1pdHRlciB9IGZyb20gJy4uL2V2ZW50cyc7XG5pbXBvcnQgeyBDb21wb3NpdGVEaXNwb3NhYmxlIH0gZnJvbSAnLi4vbGlmZWN5Y2xlJztcbmltcG9ydCB7IERyYWdBbmREcm9wT2JzZXJ2ZXIgfSBmcm9tICcuL2RuZCc7XG5pbXBvcnQgeyBjbGFtcCB9IGZyb20gJy4uL21hdGgnO1xuZnVuY3Rpb24gc2V0R1BVT3B0aW1pemVkQm91bmRzKGVsZW1lbnQsIGJvdW5kcykge1xuICAgIGNvbnN0IHsgdG9wLCBsZWZ0LCB3aWR0aCwgaGVpZ2h0IH0gPSBib3VuZHM7XG4gICAgY29uc3QgdG9wUHggPSBgJHtNYXRoLnJvdW5kKHRvcCl9cHhgO1xuICAgIGNvbnN0IGxlZnRQeCA9IGAke01hdGgucm91bmQobGVmdCl9cHhgO1xuICAgIGNvbnN0IHdpZHRoUHggPSBgJHtNYXRoLnJvdW5kKHdpZHRoKX1weGA7XG4gICAgY29uc3QgaGVpZ2h0UHggPSBgJHtNYXRoLnJvdW5kKGhlaWdodCl9cHhgO1xuICAgIC8vIFVzZSB0cmFkaXRpb25hbCBwb3NpdGlvbmluZyBidXQgbWFpbnRhaW4gR1BVIGxheWVyXG4gICAgZWxlbWVudC5zdHlsZS50b3AgPSB0b3BQeDtcbiAgICBlbGVtZW50LnN0eWxlLmxlZnQgPSBsZWZ0UHg7XG4gICAgZWxlbWVudC5zdHlsZS53aWR0aCA9IHdpZHRoUHg7XG4gICAgZWxlbWVudC5zdHlsZS5oZWlnaHQgPSBoZWlnaHRQeDtcbiAgICBlbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG4gICAgLy8gRW5zdXJlIEdQVSBsYXllciBpcyBtYWludGFpbmVkXG4gICAgaWYgKCFlbGVtZW50LnN0eWxlLnRyYW5zZm9ybSB8fCBlbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9PT0gJycpIHtcbiAgICAgICAgZWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlM2QoMCwgMCwgMCknO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNldEdQVU9wdGltaXplZEJvdW5kc0Zyb21TdHJpbmdzKGVsZW1lbnQsIGJvdW5kcykge1xuICAgIGNvbnN0IHsgdG9wLCBsZWZ0LCB3aWR0aCwgaGVpZ2h0IH0gPSBib3VuZHM7XG4gICAgLy8gVXNlIHRyYWRpdGlvbmFsIHBvc2l0aW9uaW5nIGJ1dCBtYWludGFpbiBHUFUgbGF5ZXJcbiAgICBlbGVtZW50LnN0eWxlLnRvcCA9IHRvcDtcbiAgICBlbGVtZW50LnN0eWxlLmxlZnQgPSBsZWZ0O1xuICAgIGVsZW1lbnQuc3R5bGUud2lkdGggPSB3aWR0aDtcbiAgICBlbGVtZW50LnN0eWxlLmhlaWdodCA9IGhlaWdodDtcbiAgICBlbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG4gICAgLy8gRW5zdXJlIEdQVSBsYXllciBpcyBtYWludGFpbmVkXG4gICAgaWYgKCFlbGVtZW50LnN0eWxlLnRyYW5zZm9ybSB8fCBlbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9PT0gJycpIHtcbiAgICAgICAgZWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlM2QoMCwgMCwgMCknO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNoZWNrQm91bmRzQ2hhbmdlZChlbGVtZW50LCBib3VuZHMpIHtcbiAgICBjb25zdCB7IHRvcCwgbGVmdCwgd2lkdGgsIGhlaWdodCB9ID0gYm91bmRzO1xuICAgIGNvbnN0IHRvcFB4ID0gYCR7TWF0aC5yb3VuZCh0b3ApfXB4YDtcbiAgICBjb25zdCBsZWZ0UHggPSBgJHtNYXRoLnJvdW5kKGxlZnQpfXB4YDtcbiAgICBjb25zdCB3aWR0aFB4ID0gYCR7TWF0aC5yb3VuZCh3aWR0aCl9cHhgO1xuICAgIGNvbnN0IGhlaWdodFB4ID0gYCR7TWF0aC5yb3VuZChoZWlnaHQpfXB4YDtcbiAgICAvLyBDaGVjayBpZiBwb3NpdGlvbiBvciBzaXplIGNoYW5nZWQgKGJhY2sgdG8gdHJhZGl0aW9uYWwgbWV0aG9kKVxuICAgIHJldHVybiBlbGVtZW50LnN0eWxlLnRvcCAhPT0gdG9wUHggfHxcbiAgICAgICAgZWxlbWVudC5zdHlsZS5sZWZ0ICE9PSBsZWZ0UHggfHxcbiAgICAgICAgZWxlbWVudC5zdHlsZS53aWR0aCAhPT0gd2lkdGhQeCB8fFxuICAgICAgICBlbGVtZW50LnN0eWxlLmhlaWdodCAhPT0gaGVpZ2h0UHg7XG59XG5leHBvcnQgY2xhc3MgV2lsbFNob3dPdmVybGF5RXZlbnQgZXh0ZW5kcyBEb2Nrdmlld0V2ZW50IHtcbiAgICBnZXQgbmF0aXZlRXZlbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMubmF0aXZlRXZlbnQ7XG4gICAgfVxuICAgIGdldCBwb3NpdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5wb3NpdGlvbjtcbiAgICB9XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBkaXJlY3Rpb25Ub1Bvc2l0aW9uKGRpcmVjdGlvbikge1xuICAgIHN3aXRjaCAoZGlyZWN0aW9uKSB7XG4gICAgICAgIGNhc2UgJ2Fib3ZlJzpcbiAgICAgICAgICAgIHJldHVybiAndG9wJztcbiAgICAgICAgY2FzZSAnYmVsb3cnOlxuICAgICAgICAgICAgcmV0dXJuICdib3R0b20nO1xuICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgICAgIHJldHVybiAnbGVmdCc7XG4gICAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgICAgIHJldHVybiAncmlnaHQnO1xuICAgICAgICBjYXNlICd3aXRoaW4nOlxuICAgICAgICAgICAgcmV0dXJuICdjZW50ZXInO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIGRpcmVjdGlvbiAnJHtkaXJlY3Rpb259J2ApO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBwb3NpdGlvblRvRGlyZWN0aW9uKHBvc2l0aW9uKSB7XG4gICAgc3dpdGNoIChwb3NpdGlvbikge1xuICAgICAgICBjYXNlICd0b3AnOlxuICAgICAgICAgICAgcmV0dXJuICdhYm92ZSc7XG4gICAgICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICAgICAgICByZXR1cm4gJ2JlbG93JztcbiAgICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgICAgICByZXR1cm4gJ2xlZnQnO1xuICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgICByZXR1cm4gJ3JpZ2h0JztcbiAgICAgICAgY2FzZSAnY2VudGVyJzpcbiAgICAgICAgICAgIHJldHVybiAnd2l0aGluJztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCBwb3NpdGlvbiAnJHtwb3NpdGlvbn0nYCk7XG4gICAgfVxufVxuY29uc3QgREVGQVVMVF9BQ1RJVkFUSU9OX1NJWkUgPSB7XG4gICAgdmFsdWU6IDIwLFxuICAgIHR5cGU6ICdwZXJjZW50YWdlJyxcbn07XG5jb25zdCBERUZBVUxUX1NJWkUgPSB7XG4gICAgdmFsdWU6IDUwLFxuICAgIHR5cGU6ICdwZXJjZW50YWdlJyxcbn07XG5jb25zdCBTTUFMTF9XSURUSF9CT1VOREFSWSA9IDEwMDtcbmNvbnN0IFNNQUxMX0hFSUdIVF9CT1VOREFSWSA9IDEwMDtcbmV4cG9ydCBjbGFzcyBEcm9wdGFyZ2V0IGV4dGVuZHMgQ29tcG9zaXRlRGlzcG9zYWJsZSB7XG4gICAgZ2V0IGRpc2FibGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGlzYWJsZWQ7XG4gICAgfVxuICAgIHNldCBkaXNhYmxlZCh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9kaXNhYmxlZCA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgc3RhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGF0ZTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLl9vbkRyb3AgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRHJvcCA9IHRoaXMuX29uRHJvcC5ldmVudDtcbiAgICAgICAgdGhpcy5fb25XaWxsU2hvd092ZXJsYXkgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uV2lsbFNob3dPdmVybGF5ID0gdGhpcy5fb25XaWxsU2hvd092ZXJsYXkuZXZlbnQ7XG4gICAgICAgIHRoaXMuX2Rpc2FibGVkID0gZmFsc2U7XG4gICAgICAgIC8vIHVzZSBhIHNldCB0byB0YWtlIGFkdmFudGFnZSBvZiAjPHNldD4uaGFzXG4gICAgICAgIHRoaXMuX2FjY2VwdGVkVGFyZ2V0Wm9uZXNTZXQgPSBuZXcgU2V0KHRoaXMub3B0aW9ucy5hY2NlcHRlZFRhcmdldFpvbmVzKTtcbiAgICAgICAgdGhpcy5kbmQgPSBuZXcgRHJhZ0FuZERyb3BPYnNlcnZlcih0aGlzLmVsZW1lbnQsIHtcbiAgICAgICAgICAgIG9uRHJhZ0VudGVyOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgICAgICAgICAgKF9jID0gKF9iID0gKF9hID0gdGhpcy5vcHRpb25zKS5nZXRPdmVycmlkZVRhcmdldCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EpKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuZ2V0RWxlbWVudHMoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkRyYWdPdmVyOiAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZztcbiAgICAgICAgICAgICAgICBEcm9wdGFyZ2V0LkFDVFVBTF9UQVJHRVQgPSB0aGlzO1xuICAgICAgICAgICAgICAgIGNvbnN0IG92ZXJyaWRlVGFyZ2V0ID0gKF9iID0gKF9hID0gdGhpcy5vcHRpb25zKS5nZXRPdmVycmlkZVRhcmdldCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9hY2NlcHRlZFRhcmdldFpvbmVzU2V0LnNpemUgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG92ZXJyaWRlVGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVEcm9wVGFyZ2V0KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gKF9lID0gKF9kID0gKF9jID0gdGhpcy5vcHRpb25zKS5nZXRPdmVybGF5T3V0bGluZSkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmNhbGwoX2MpKSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiB0aGlzLmVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgY29uc3Qgd2lkdGggPSB0YXJnZXQub2Zmc2V0V2lkdGg7XG4gICAgICAgICAgICAgICAgY29uc3QgaGVpZ2h0ID0gdGFyZ2V0Lm9mZnNldEhlaWdodDtcbiAgICAgICAgICAgICAgICBpZiAod2lkdGggPT09IDAgfHwgaGVpZ2h0ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjsgLy8gYXZvaWQgZGl2ITBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgcmVjdCA9IGUuY3VycmVudFRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgICAgICBjb25zdCB4ID0gKChfZiA9IGUuY2xpZW50WCkgIT09IG51bGwgJiYgX2YgIT09IHZvaWQgMCA/IF9mIDogMCkgLSByZWN0LmxlZnQ7XG4gICAgICAgICAgICAgICAgY29uc3QgeSA9ICgoX2cgPSBlLmNsaWVudFkpICE9PSBudWxsICYmIF9nICE9PSB2b2lkIDAgPyBfZyA6IDApIC0gcmVjdC50b3A7XG4gICAgICAgICAgICAgICAgY29uc3QgcXVhZHJhbnQgPSB0aGlzLmNhbGN1bGF0ZVF1YWRyYW50KHRoaXMuX2FjY2VwdGVkVGFyZ2V0Wm9uZXNTZXQsIHgsIHksIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIElmIHRoZSBldmVudCBoYXMgYWxyZWFkeSBiZWVuIHVzZWQgYnkgYW5vdGhlciBEcm9wVGFyZ2V0IGluc3RhbmNlXG4gICAgICAgICAgICAgICAgICogdGhlbiBkb24ndCBzaG93IGEgc2Vjb25kIGRyb3AgdGFyZ2V0LCBvbmx5IG9uZSB0YXJnZXQgc2hvdWxkIGJlXG4gICAgICAgICAgICAgICAgICogYWN0aXZlIGF0IGFueSBvbmUgdGltZVxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzQWxyZWFkeVVzZWQoZSkgfHwgcXVhZHJhbnQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbm8gZHJvcCB0YXJnZXQgc2hvdWxkIGJlIGRpc3BsYXllZFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZURyb3BUYXJnZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5jYW5EaXNwbGF5T3ZlcmxheShlLCBxdWFkcmFudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG92ZXJyaWRlVGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVEcm9wVGFyZ2V0KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3Qgd2lsbFNob3dPdmVybGF5RXZlbnQgPSBuZXcgV2lsbFNob3dPdmVybGF5RXZlbnQoe1xuICAgICAgICAgICAgICAgICAgICBuYXRpdmVFdmVudDogZSxcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHF1YWRyYW50LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFByb3ZpZGUgYW4gb3Bwb3J0dW5pdHkgdG8gcHJldmVudCB0aGUgb3ZlcmxheSBhcHBlYXJpbmcgYW5kIGluIHR1cm5cbiAgICAgICAgICAgICAgICAgKiBhbnkgZG5kIGJlaGF2aW91cnNcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICB0aGlzLl9vbldpbGxTaG93T3ZlcmxheS5maXJlKHdpbGxTaG93T3ZlcmxheUV2ZW50KTtcbiAgICAgICAgICAgICAgICBpZiAod2lsbFNob3dPdmVybGF5RXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZURyb3BUYXJnZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLm1hcmtBc1VzZWQoZSk7XG4gICAgICAgICAgICAgICAgaWYgKG92ZXJyaWRlVGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCF0aGlzLnRhcmdldEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50YXJnZXRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0RWxlbWVudC5jbGFzc05hbWUgPSAnZHYtZHJvcC10YXJnZXQtZHJvcHpvbmUnO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm92ZXJsYXlFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3ZlcmxheUVsZW1lbnQuY2xhc3NOYW1lID0gJ2R2LWRyb3AtdGFyZ2V0LXNlbGVjdGlvbic7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gJ2NlbnRlcic7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0RWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLm92ZXJsYXlFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2R2LWRyb3AtdGFyZ2V0Jyk7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5hcHBlbmQodGhpcy50YXJnZXRFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcy5vdmVybGF5RWxlbWVudC5zdHlsZS5vcGFjaXR5ID0gJzAnO1xuICAgICAgICAgICAgICAgICAgICAvLyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgaWYgKHRoaXMub3ZlcmxheUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICB0aGlzLm92ZXJsYXlFbGVtZW50LnN0eWxlLm9wYWNpdHkgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlQ2xhc3NlcyhxdWFkcmFudCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBxdWFkcmFudDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkRyYWdMZWF2ZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gKF9iID0gKF9hID0gdGhpcy5vcHRpb25zKS5nZXRPdmVycmlkZVRhcmdldCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EpO1xuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZURyb3BUYXJnZXQoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkRyYWdFbmQ6IChlKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXQgPSAoX2IgPSAoX2EgPSB0aGlzLm9wdGlvbnMpLmdldE92ZXJyaWRlVGFyZ2V0KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSk7XG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldCAmJiBEcm9wdGFyZ2V0LkFDVFVBTF9UQVJHRVQgPT09IHRoaXMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3N0YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBvbmx5IHN0b3AgdGhlIHByb3BhZ2F0aW9uIG9mIHRoZSBldmVudCBpZiB3ZSBhcmUgZGVhbGluZyB3aXRoIGl0XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB3aGljaCBpcyBvbmx5IHdoZW4gdGhlIHRhcmdldCBoYXMgc3RhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vbkRyb3AuZmlyZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHRoaXMuX3N0YXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdGl2ZUV2ZW50OiBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVEcm9wVGFyZ2V0KCk7XG4gICAgICAgICAgICAgICAgdGFyZ2V0ID09PSBudWxsIHx8IHRhcmdldCA9PT0gdm9pZCAwID8gdm9pZCAwIDogdGFyZ2V0LmNsZWFyKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25Ecm9wOiAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMuX3N0YXRlO1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlRHJvcFRhcmdldCgpO1xuICAgICAgICAgICAgICAgIChfYyA9IChfYiA9IChfYSA9IHRoaXMub3B0aW9ucykuZ2V0T3ZlcnJpZGVUYXJnZXQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hKSkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG9ubHkgc3RvcCB0aGUgcHJvcGFnYXRpb24gb2YgdGhlIGV2ZW50IGlmIHdlIGFyZSBkZWFsaW5nIHdpdGggaXRcbiAgICAgICAgICAgICAgICAgICAgLy8gd2hpY2ggaXMgb25seSB3aGVuIHRoZSB0YXJnZXQgaGFzIHN0YXRlXG4gICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29uRHJvcC5maXJlKHsgcG9zaXRpb246IHN0YXRlLCBuYXRpdmVFdmVudDogZSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyh0aGlzLl9vbkRyb3AsIHRoaXMuX29uV2lsbFNob3dPdmVybGF5LCB0aGlzLmRuZCk7XG4gICAgfVxuICAgIHNldFRhcmdldFpvbmVzKGFjY2VwdGVkVGFyZ2V0Wm9uZXMpIHtcbiAgICAgICAgdGhpcy5fYWNjZXB0ZWRUYXJnZXRab25lc1NldCA9IG5ldyBTZXQoYWNjZXB0ZWRUYXJnZXRab25lcyk7XG4gICAgfVxuICAgIHNldE92ZXJsYXlNb2RlbChtb2RlbCkge1xuICAgICAgICB0aGlzLm9wdGlvbnMub3ZlcmxheU1vZGVsID0gbW9kZWw7XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRHJvcFRhcmdldCgpO1xuICAgICAgICBzdXBlci5kaXNwb3NlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZCBhIHByb3BlcnR5IHRvIHRoZSBldmVudCBvYmplY3QgZm9yIG90aGVyIHBvdGVudGlhbCBsaXN0ZW5lcnMgdG8gY2hlY2tcbiAgICAgKi9cbiAgICBtYXJrQXNVc2VkKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50W0Ryb3B0YXJnZXQuVVNFRF9FVkVOVF9JRF0gPSB0cnVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVjayBpcyB0aGUgZXZlbnQgaGFzIGFscmVhZHkgYmVlbiB1c2VkIGJ5IGFub3RoZXIgaW5zdGFuY2Ugb2YgRHJvcFRhcmdldFxuICAgICAqL1xuICAgIGlzQWxyZWFkeVVzZWQoZXZlbnQpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBldmVudFtEcm9wdGFyZ2V0LlVTRURfRVZFTlRfSURdO1xuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicgJiYgdmFsdWU7XG4gICAgfVxuICAgIHRvZ2dsZUNsYXNzZXMocXVhZHJhbnQsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nO1xuICAgICAgICBjb25zdCB0YXJnZXQgPSAoX2IgPSAoX2EgPSB0aGlzLm9wdGlvbnMpLmdldE92ZXJyaWRlVGFyZ2V0KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSk7XG4gICAgICAgIGlmICghdGFyZ2V0ICYmICF0aGlzLm92ZXJsYXlFbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXNTbWFsbFggPSB3aWR0aCA8IFNNQUxMX1dJRFRIX0JPVU5EQVJZO1xuICAgICAgICBjb25zdCBpc1NtYWxsWSA9IGhlaWdodCA8IFNNQUxMX0hFSUdIVF9CT1VOREFSWTtcbiAgICAgICAgY29uc3QgaXNMZWZ0ID0gcXVhZHJhbnQgPT09ICdsZWZ0JztcbiAgICAgICAgY29uc3QgaXNSaWdodCA9IHF1YWRyYW50ID09PSAncmlnaHQnO1xuICAgICAgICBjb25zdCBpc1RvcCA9IHF1YWRyYW50ID09PSAndG9wJztcbiAgICAgICAgY29uc3QgaXNCb3R0b20gPSBxdWFkcmFudCA9PT0gJ2JvdHRvbSc7XG4gICAgICAgIGNvbnN0IHJpZ2h0Q2xhc3MgPSAhaXNTbWFsbFggJiYgaXNSaWdodDtcbiAgICAgICAgY29uc3QgbGVmdENsYXNzID0gIWlzU21hbGxYICYmIGlzTGVmdDtcbiAgICAgICAgY29uc3QgdG9wQ2xhc3MgPSAhaXNTbWFsbFkgJiYgaXNUb3A7XG4gICAgICAgIGNvbnN0IGJvdHRvbUNsYXNzID0gIWlzU21hbGxZICYmIGlzQm90dG9tO1xuICAgICAgICBsZXQgc2l6ZSA9IDE7XG4gICAgICAgIGNvbnN0IHNpemVPcHRpb25zID0gKF9kID0gKF9jID0gdGhpcy5vcHRpb25zLm92ZXJsYXlNb2RlbCkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLnNpemUpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IERFRkFVTFRfU0laRTtcbiAgICAgICAgaWYgKHNpemVPcHRpb25zLnR5cGUgPT09ICdwZXJjZW50YWdlJykge1xuICAgICAgICAgICAgc2l6ZSA9IGNsYW1wKHNpemVPcHRpb25zLnZhbHVlLCAwLCAxMDApIC8gMTAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHJpZ2h0Q2xhc3MgfHwgbGVmdENsYXNzKSB7XG4gICAgICAgICAgICAgICAgc2l6ZSA9IGNsYW1wKDAsIHNpemVPcHRpb25zLnZhbHVlLCB3aWR0aCkgLyB3aWR0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0b3BDbGFzcyB8fCBib3R0b21DbGFzcykge1xuICAgICAgICAgICAgICAgIHNpemUgPSBjbGFtcCgwLCBzaXplT3B0aW9ucy52YWx1ZSwgaGVpZ2h0KSAvIGhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgICAgICBjb25zdCBvdXRsaW5lRWwgPSAoX2cgPSAoX2YgPSAoX2UgPSB0aGlzLm9wdGlvbnMpLmdldE92ZXJsYXlPdXRsaW5lKSA9PT0gbnVsbCB8fCBfZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2YuY2FsbChfZSkpICE9PSBudWxsICYmIF9nICE9PSB2b2lkIDAgPyBfZyA6IHRoaXMuZWxlbWVudDtcbiAgICAgICAgICAgIGNvbnN0IGVsQm94ID0gb3V0bGluZUVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgY29uc3QgdGEgPSB0YXJnZXQuZ2V0RWxlbWVudHModW5kZWZpbmVkLCBvdXRsaW5lRWwpO1xuICAgICAgICAgICAgY29uc3QgZWwgPSB0YS5yb290O1xuICAgICAgICAgICAgY29uc3Qgb3ZlcmxheSA9IHRhLm92ZXJsYXk7XG4gICAgICAgICAgICBjb25zdCBiaWdib3ggPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIGNvbnN0IHJvb3RUb3AgPSBlbEJveC50b3AgLSBiaWdib3gudG9wO1xuICAgICAgICAgICAgY29uc3Qgcm9vdExlZnQgPSBlbEJveC5sZWZ0IC0gYmlnYm94LmxlZnQ7XG4gICAgICAgICAgICBjb25zdCBib3ggPSB7XG4gICAgICAgICAgICAgICAgdG9wOiByb290VG9wLFxuICAgICAgICAgICAgICAgIGxlZnQ6IHJvb3RMZWZ0LFxuICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAocmlnaHRDbGFzcykge1xuICAgICAgICAgICAgICAgIGJveC5sZWZ0ID0gcm9vdExlZnQgKyB3aWR0aCAqICgxIC0gc2l6ZSk7XG4gICAgICAgICAgICAgICAgYm94LndpZHRoID0gd2lkdGggKiBzaXplO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobGVmdENsYXNzKSB7XG4gICAgICAgICAgICAgICAgYm94LndpZHRoID0gd2lkdGggKiBzaXplO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodG9wQ2xhc3MpIHtcbiAgICAgICAgICAgICAgICBib3guaGVpZ2h0ID0gaGVpZ2h0ICogc2l6ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGJvdHRvbUNsYXNzKSB7XG4gICAgICAgICAgICAgICAgYm94LnRvcCA9IHJvb3RUb3AgKyBoZWlnaHQgKiAoMSAtIHNpemUpO1xuICAgICAgICAgICAgICAgIGJveC5oZWlnaHQgPSBoZWlnaHQgKiBzaXplO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU21hbGxYICYmIGlzTGVmdCkge1xuICAgICAgICAgICAgICAgIGJveC53aWR0aCA9IDQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNTbWFsbFggJiYgaXNSaWdodCkge1xuICAgICAgICAgICAgICAgIGJveC5sZWZ0ID0gcm9vdExlZnQgKyB3aWR0aCAtIDQ7XG4gICAgICAgICAgICAgICAgYm94LndpZHRoID0gNDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFVzZSBHUFUtb3B0aW1pemVkIGJvdW5kcyBjaGVja2luZyBhbmQgc2V0dGluZ1xuICAgICAgICAgICAgaWYgKCFjaGVja0JvdW5kc0NoYW5nZWQob3ZlcmxheSwgYm94KSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNldEdQVU9wdGltaXplZEJvdW5kcyhvdmVybGF5LCBib3gpO1xuICAgICAgICAgICAgb3ZlcmxheS5jbGFzc05hbWUgPSBgZHYtZHJvcC10YXJnZXQtYW5jaG9yJHt0aGlzLm9wdGlvbnMuY2xhc3NOYW1lID8gYCAke3RoaXMub3B0aW9ucy5jbGFzc05hbWV9YCA6ICcnfWA7XG4gICAgICAgICAgICB0b2dnbGVDbGFzcyhvdmVybGF5LCAnZHYtZHJvcC10YXJnZXQtbGVmdCcsIGlzTGVmdCk7XG4gICAgICAgICAgICB0b2dnbGVDbGFzcyhvdmVybGF5LCAnZHYtZHJvcC10YXJnZXQtcmlnaHQnLCBpc1JpZ2h0KTtcbiAgICAgICAgICAgIHRvZ2dsZUNsYXNzKG92ZXJsYXksICdkdi1kcm9wLXRhcmdldC10b3AnLCBpc1RvcCk7XG4gICAgICAgICAgICB0b2dnbGVDbGFzcyhvdmVybGF5LCAnZHYtZHJvcC10YXJnZXQtYm90dG9tJywgaXNCb3R0b20pO1xuICAgICAgICAgICAgdG9nZ2xlQ2xhc3Mob3ZlcmxheSwgJ2R2LWRyb3AtdGFyZ2V0LWNlbnRlcicsIHF1YWRyYW50ID09PSAnY2VudGVyJyk7XG4gICAgICAgICAgICBpZiAodGEuY2hhbmdlZCkge1xuICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKG92ZXJsYXksICdkdi1kcm9wLXRhcmdldC1hbmNob3ItY29udGFpbmVyLWNoYW5nZWQnLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3Mob3ZlcmxheSwgJ2R2LWRyb3AtdGFyZ2V0LWFuY2hvci1jb250YWluZXItY2hhbmdlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9LCAxMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLm92ZXJsYXlFbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYm94ID0geyB0b3A6ICcwcHgnLCBsZWZ0OiAnMHB4Jywgd2lkdGg6ICcxMDAlJywgaGVpZ2h0OiAnMTAwJScgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFlvdSBjYW4gYWxzbyBhY2hpZXZlIHRoZSBvdmVybGF5IHBsYWNlbWVudCB1c2luZyB0aGUgdHJhbnNmb3JtIENTUyBwcm9wZXJ0eVxuICAgICAgICAgKiB0byB0cmFuc2xhdGUgYW5kIHNjYWxlIHRoZSBlbGVtZW50IGhvd2V2ZXIgdGhpcyBoYXMgdGhlIHVuZGVzaXJlZCBlZmZlY3Qgb2ZcbiAgICAgICAgICogJ3NrZXdpbmcnIHRoZSBlbGVtZW50LiBDb21tZW50IGxlZnQgaGVyZSBmb3IgYW55Ym9keSB0aGF0IGV2ZXIgcmV2aXNpdHMgdGhpcy5cbiAgICAgICAgICpcbiAgICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvdHJhbnNmb3JtXG4gICAgICAgICAqXG4gICAgICAgICAqIHJpZ2h0XG4gICAgICAgICAqIHRyYW5zbGF0ZVgoJHsxMDAgKiAoMSAtIHNpemUpIC8gMn0lKSBzY2FsZVgoJHtzY2FsZX0pXG4gICAgICAgICAqXG4gICAgICAgICAqIGxlZnRcbiAgICAgICAgICogdHJhbnNsYXRlWCgtJHsxMDAgKiAoMSAtIHNpemUpIC8gMn0lKSBzY2FsZVgoJHtzY2FsZX0pXG4gICAgICAgICAqXG4gICAgICAgICAqIHRvcFxuICAgICAgICAgKiB0cmFuc2xhdGVZKC0kezEwMCAqICgxIC0gc2l6ZSkgLyAyfSUpIHNjYWxlWSgke3NjYWxlfSlcbiAgICAgICAgICpcbiAgICAgICAgICogYm90dG9tXG4gICAgICAgICAqIHRyYW5zbGF0ZVkoJHsxMDAgKiAoMSAtIHNpemUpIC8gMn0lKSBzY2FsZVkoJHtzY2FsZX0pXG4gICAgICAgICAqL1xuICAgICAgICBpZiAocmlnaHRDbGFzcykge1xuICAgICAgICAgICAgYm94LmxlZnQgPSBgJHsxMDAgKiAoMSAtIHNpemUpfSVgO1xuICAgICAgICAgICAgYm94LndpZHRoID0gYCR7MTAwICogc2l6ZX0lYDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChsZWZ0Q2xhc3MpIHtcbiAgICAgICAgICAgIGJveC53aWR0aCA9IGAkezEwMCAqIHNpemV9JWA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodG9wQ2xhc3MpIHtcbiAgICAgICAgICAgIGJveC5oZWlnaHQgPSBgJHsxMDAgKiBzaXplfSVgO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGJvdHRvbUNsYXNzKSB7XG4gICAgICAgICAgICBib3gudG9wID0gYCR7MTAwICogKDEgLSBzaXplKX0lYDtcbiAgICAgICAgICAgIGJveC5oZWlnaHQgPSBgJHsxMDAgKiBzaXplfSVgO1xuICAgICAgICB9XG4gICAgICAgIHNldEdQVU9wdGltaXplZEJvdW5kc0Zyb21TdHJpbmdzKHRoaXMub3ZlcmxheUVsZW1lbnQsIGJveCk7XG4gICAgICAgIHRvZ2dsZUNsYXNzKHRoaXMub3ZlcmxheUVsZW1lbnQsICdkdi1kcm9wLXRhcmdldC1zbWFsbC12ZXJ0aWNhbCcsIGlzU21hbGxZKTtcbiAgICAgICAgdG9nZ2xlQ2xhc3ModGhpcy5vdmVybGF5RWxlbWVudCwgJ2R2LWRyb3AtdGFyZ2V0LXNtYWxsLWhvcml6b250YWwnLCBpc1NtYWxsWCk7XG4gICAgICAgIHRvZ2dsZUNsYXNzKHRoaXMub3ZlcmxheUVsZW1lbnQsICdkdi1kcm9wLXRhcmdldC1sZWZ0JywgaXNMZWZ0KTtcbiAgICAgICAgdG9nZ2xlQ2xhc3ModGhpcy5vdmVybGF5RWxlbWVudCwgJ2R2LWRyb3AtdGFyZ2V0LXJpZ2h0JywgaXNSaWdodCk7XG4gICAgICAgIHRvZ2dsZUNsYXNzKHRoaXMub3ZlcmxheUVsZW1lbnQsICdkdi1kcm9wLXRhcmdldC10b3AnLCBpc1RvcCk7XG4gICAgICAgIHRvZ2dsZUNsYXNzKHRoaXMub3ZlcmxheUVsZW1lbnQsICdkdi1kcm9wLXRhcmdldC1ib3R0b20nLCBpc0JvdHRvbSk7XG4gICAgICAgIHRvZ2dsZUNsYXNzKHRoaXMub3ZlcmxheUVsZW1lbnQsICdkdi1kcm9wLXRhcmdldC1jZW50ZXInLCBxdWFkcmFudCA9PT0gJ2NlbnRlcicpO1xuICAgIH1cbiAgICBjYWxjdWxhdGVRdWFkcmFudChvdmVybGF5VHlwZSwgeCwgeSwgd2lkdGgsIGhlaWdodCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBjb25zdCBhY3RpdmF0aW9uU2l6ZU9wdGlvbnMgPSAoX2IgPSAoX2EgPSB0aGlzLm9wdGlvbnMub3ZlcmxheU1vZGVsKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYWN0aXZhdGlvblNpemUpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IERFRkFVTFRfQUNUSVZBVElPTl9TSVpFO1xuICAgICAgICBjb25zdCBpc1BlcmNlbnRhZ2UgPSBhY3RpdmF0aW9uU2l6ZU9wdGlvbnMudHlwZSA9PT0gJ3BlcmNlbnRhZ2UnO1xuICAgICAgICBpZiAoaXNQZXJjZW50YWdlKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsY3VsYXRlUXVhZHJhbnRBc1BlcmNlbnRhZ2Uob3ZlcmxheVR5cGUsIHgsIHksIHdpZHRoLCBoZWlnaHQsIGFjdGl2YXRpb25TaXplT3B0aW9ucy52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNhbGN1bGF0ZVF1YWRyYW50QXNQaXhlbHMob3ZlcmxheVR5cGUsIHgsIHksIHdpZHRoLCBoZWlnaHQsIGFjdGl2YXRpb25TaXplT3B0aW9ucy52YWx1ZSk7XG4gICAgfVxuICAgIHJlbW92ZURyb3BUYXJnZXQoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHRoaXMudGFyZ2V0RWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAoX2EgPSB0aGlzLnRhcmdldEVsZW1lbnQucGFyZW50RWxlbWVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNsYXNzTGlzdC5yZW1vdmUoJ2R2LWRyb3AtdGFyZ2V0Jyk7XG4gICAgICAgICAgICB0aGlzLnRhcmdldEVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgICAgICB0aGlzLnRhcmdldEVsZW1lbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLm92ZXJsYXlFbGVtZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxufVxuRHJvcHRhcmdldC5VU0VEX0VWRU5UX0lEID0gJ19fZG9ja3ZpZXdfZHJvcHRhcmdldF9ldmVudF9pc191c2VkX18nO1xuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZVF1YWRyYW50QXNQZXJjZW50YWdlKG92ZXJsYXlUeXBlLCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCB0aHJlc2hvbGQpIHtcbiAgICBjb25zdCB4cCA9ICgxMDAgKiB4KSAvIHdpZHRoO1xuICAgIGNvbnN0IHlwID0gKDEwMCAqIHkpIC8gaGVpZ2h0O1xuICAgIGlmIChvdmVybGF5VHlwZS5oYXMoJ2xlZnQnKSAmJiB4cCA8IHRocmVzaG9sZCkge1xuICAgICAgICByZXR1cm4gJ2xlZnQnO1xuICAgIH1cbiAgICBpZiAob3ZlcmxheVR5cGUuaGFzKCdyaWdodCcpICYmIHhwID4gMTAwIC0gdGhyZXNob2xkKSB7XG4gICAgICAgIHJldHVybiAncmlnaHQnO1xuICAgIH1cbiAgICBpZiAob3ZlcmxheVR5cGUuaGFzKCd0b3AnKSAmJiB5cCA8IHRocmVzaG9sZCkge1xuICAgICAgICByZXR1cm4gJ3RvcCc7XG4gICAgfVxuICAgIGlmIChvdmVybGF5VHlwZS5oYXMoJ2JvdHRvbScpICYmIHlwID4gMTAwIC0gdGhyZXNob2xkKSB7XG4gICAgICAgIHJldHVybiAnYm90dG9tJztcbiAgICB9XG4gICAgaWYgKCFvdmVybGF5VHlwZS5oYXMoJ2NlbnRlcicpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gJ2NlbnRlcic7XG59XG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlUXVhZHJhbnRBc1BpeGVscyhvdmVybGF5VHlwZSwgeCwgeSwgd2lkdGgsIGhlaWdodCwgdGhyZXNob2xkKSB7XG4gICAgaWYgKG92ZXJsYXlUeXBlLmhhcygnbGVmdCcpICYmIHggPCB0aHJlc2hvbGQpIHtcbiAgICAgICAgcmV0dXJuICdsZWZ0JztcbiAgICB9XG4gICAgaWYgKG92ZXJsYXlUeXBlLmhhcygncmlnaHQnKSAmJiB4ID4gd2lkdGggLSB0aHJlc2hvbGQpIHtcbiAgICAgICAgcmV0dXJuICdyaWdodCc7XG4gICAgfVxuICAgIGlmIChvdmVybGF5VHlwZS5oYXMoJ3RvcCcpICYmIHkgPCB0aHJlc2hvbGQpIHtcbiAgICAgICAgcmV0dXJuICd0b3AnO1xuICAgIH1cbiAgICBpZiAob3ZlcmxheVR5cGUuaGFzKCdib3R0b20nKSAmJiB5ID4gaGVpZ2h0IC0gdGhyZXNob2xkKSB7XG4gICAgICAgIHJldHVybiAnYm90dG9tJztcbiAgICB9XG4gICAgaWYgKCFvdmVybGF5VHlwZS5oYXMoJ2NlbnRlcicpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gJ2NlbnRlcic7XG59XG4iLCJpbXBvcnQgeyBhZGRDbGFzc2VzLCByZW1vdmVDbGFzc2VzIH0gZnJvbSAnLi4vZG9tJztcbmV4cG9ydCBmdW5jdGlvbiBhZGRHaG9zdEltYWdlKGRhdGFUcmFuc2ZlciwgZ2hvc3RFbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICAvLyBjbGFzcyBkb2NrdmlldyBwcm92aWRlcyB0byBmb3JjZSBnaG9zdCBpbWFnZSB0byBiZSBkcmF3biBvbiBhIGRpZmZlcmVudCBsYXllciBhbmQgcHJldmVudCB3ZWlyZCByZW5kZXJpbmcgaXNzdWVzXG4gICAgYWRkQ2xhc3NlcyhnaG9zdEVsZW1lbnQsICdkdi1kcmFnZ2VkJyk7XG4gICAgLy8gbW92ZSB0aGUgZWxlbWVudCBvZmYtc2NyZWVuIGluaXRpYWxseSBvdGhlcndpc2UgaXQgbWF5IGluIHNvbWUgY2FzZXMgYmUgcmVuZGVyZWQgYXQgKDAsMCkgbW9tZW50YXJpbHlcbiAgICBnaG9zdEVsZW1lbnQuc3R5bGUudG9wID0gJy05OTk5cHgnO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZ2hvc3RFbGVtZW50KTtcbiAgICBkYXRhVHJhbnNmZXIuc2V0RHJhZ0ltYWdlKGdob3N0RWxlbWVudCwgKF9hID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLngpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDAsIChfYiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy55KSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAwKTtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgcmVtb3ZlQ2xhc3NlcyhnaG9zdEVsZW1lbnQsICdkdi1kcmFnZ2VkJyk7XG4gICAgICAgIGdob3N0RWxlbWVudC5yZW1vdmUoKTtcbiAgICB9LCAwKTtcbn1cbiIsImltcG9ydCB7IHF1YXNpUHJldmVudERlZmF1bHQgfSBmcm9tICcuLi9kb20nO1xuaW1wb3J0IHsgYWRkRGlzcG9zYWJsZUxpc3RlbmVyIH0gZnJvbSAnLi4vZXZlbnRzJztcbmltcG9ydCB7IERyYWdIYW5kbGVyIH0gZnJvbSAnLi9hYnN0cmFjdERyYWdIYW5kbGVyJztcbmltcG9ydCB7IExvY2FsU2VsZWN0aW9uVHJhbnNmZXIsIFBhbmVsVHJhbnNmZXIgfSBmcm9tICcuL2RhdGFUcmFuc2Zlcic7XG5pbXBvcnQgeyBhZGRHaG9zdEltYWdlIH0gZnJvbSAnLi9naG9zdCc7XG5leHBvcnQgY2xhc3MgR3JvdXBEcmFnSGFuZGxlciBleHRlbmRzIERyYWdIYW5kbGVyIHtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50LCBhY2Nlc3NvciwgZ3JvdXAsIGRpc2FibGVkKSB7XG4gICAgICAgIHN1cGVyKGVsZW1lbnQsIGRpc2FibGVkKTtcbiAgICAgICAgdGhpcy5hY2Nlc3NvciA9IGFjY2Vzc29yO1xuICAgICAgICB0aGlzLmdyb3VwID0gZ3JvdXA7XG4gICAgICAgIHRoaXMucGFuZWxUcmFuc2ZlciA9IExvY2FsU2VsZWN0aW9uVHJhbnNmZXIuZ2V0SW5zdGFuY2UoKTtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyhhZGREaXNwb3NhYmxlTGlzdGVuZXIoZWxlbWVudCwgJ3BvaW50ZXJkb3duJywgKGUpID0+IHtcbiAgICAgICAgICAgIGlmIChlLnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogWW91IGNhbm5vdCBjYWxsIGUucHJldmVudERlZmF1bHQoKSBiZWNhdXNlIHRoYXQgd2lsbCBwcmV2ZW50IGRyYWcgZXZlbnRzIGZyb20gZmlyaW5nXG4gICAgICAgICAgICAgICAgICogYnV0IHdlIGFsc28gbmVlZCB0byBzdG9wIGFueSBncm91cCBvdmVybGF5IGRyYWcgZXZlbnRzIGZyb20gb2NjdXJpbmdcbiAgICAgICAgICAgICAgICAgKiBVc2UgYSBjdXN0b20gZXZlbnQgbWFya2VyIHRoYXQgY2FuIGJlIGNoZWNrZWQgYnkgdGhlIG92ZXJsYXkgZHJhZyBldmVudHNcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBxdWFzaVByZXZlbnREZWZhdWx0KGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB0cnVlKSk7XG4gICAgfVxuICAgIGlzQ2FuY2VsbGVkKF9ldmVudCkge1xuICAgICAgICBpZiAodGhpcy5ncm91cC5hcGkubG9jYXRpb24udHlwZSA9PT0gJ2Zsb2F0aW5nJyAmJiAhX2V2ZW50LnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGdldERhdGEoZHJhZ0V2ZW50KSB7XG4gICAgICAgIGNvbnN0IGRhdGFUcmFuc2ZlciA9IGRyYWdFdmVudC5kYXRhVHJhbnNmZXI7XG4gICAgICAgIHRoaXMucGFuZWxUcmFuc2Zlci5zZXREYXRhKFtuZXcgUGFuZWxUcmFuc2Zlcih0aGlzLmFjY2Vzc29yLmlkLCB0aGlzLmdyb3VwLmlkLCBudWxsKV0sIFBhbmVsVHJhbnNmZXIucHJvdG90eXBlKTtcbiAgICAgICAgY29uc3Qgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLmVsKTtcbiAgICAgICAgY29uc3QgYmdDb2xvciA9IHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJy0tZHYtYWN0aXZlZ3JvdXAtdmlzaWJsZXBhbmVsLXRhYi1iYWNrZ3JvdW5kLWNvbG9yJyk7XG4gICAgICAgIGNvbnN0IGNvbG9yID0gc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnLS1kdi1hY3RpdmVncm91cC12aXNpYmxlcGFuZWwtdGFiLWNvbG9yJyk7XG4gICAgICAgIGlmIChkYXRhVHJhbnNmZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGdob3N0RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgZ2hvc3RFbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGJnQ29sb3I7XG4gICAgICAgICAgICBnaG9zdEVsZW1lbnQuc3R5bGUuY29sb3IgPSBjb2xvcjtcbiAgICAgICAgICAgIGdob3N0RWxlbWVudC5zdHlsZS5wYWRkaW5nID0gJzJweCA4cHgnO1xuICAgICAgICAgICAgZ2hvc3RFbGVtZW50LnN0eWxlLmhlaWdodCA9ICcyNHB4JztcbiAgICAgICAgICAgIGdob3N0RWxlbWVudC5zdHlsZS5mb250U2l6ZSA9ICcxMXB4JztcbiAgICAgICAgICAgIGdob3N0RWxlbWVudC5zdHlsZS5saW5lSGVpZ2h0ID0gJzIwcHgnO1xuICAgICAgICAgICAgZ2hvc3RFbGVtZW50LnN0eWxlLmJvcmRlclJhZGl1cyA9ICcxMnB4JztcbiAgICAgICAgICAgIGdob3N0RWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgICAgICAgICBnaG9zdEVsZW1lbnQuc3R5bGUucG9pbnRlckV2ZW50cyA9ICdub25lJztcbiAgICAgICAgICAgIGdob3N0RWxlbWVudC5zdHlsZS50b3AgPSAnLTk5OTlweCc7XG4gICAgICAgICAgICBnaG9zdEVsZW1lbnQudGV4dENvbnRlbnQgPSBgTXVsdGlwbGUgUGFuZWxzICgke3RoaXMuZ3JvdXAuc2l6ZX0pYDtcbiAgICAgICAgICAgIGFkZEdob3N0SW1hZ2UoZGF0YVRyYW5zZmVyLCBnaG9zdEVsZW1lbnQsIHsgeTogLTEwLCB4OiAzMCB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGlzcG9zZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucGFuZWxUcmFuc2Zlci5jbGVhckRhdGEoUGFuZWxUcmFuc2Zlci5wcm90b3R5cGUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBDb21wb3NpdGVEaXNwb3NhYmxlLCBNdXRhYmxlRGlzcG9zYWJsZSwgfSBmcm9tICcuLi8uLi8uLi9saWZlY3ljbGUnO1xuaW1wb3J0IHsgRW1pdHRlciB9IGZyb20gJy4uLy4uLy4uL2V2ZW50cyc7XG5pbXBvcnQgeyB0cmFja0ZvY3VzIH0gZnJvbSAnLi4vLi4vLi4vZG9tJztcbmltcG9ydCB7IERyb3B0YXJnZXQgfSBmcm9tICcuLi8uLi8uLi9kbmQvZHJvcHRhcmdldCc7XG5pbXBvcnQgeyBnZXRQYW5lbERhdGEgfSBmcm9tICcuLi8uLi8uLi9kbmQvZGF0YVRyYW5zZmVyJztcbmV4cG9ydCBjbGFzcyBDb250ZW50Q29udGFpbmVyIGV4dGVuZHMgQ29tcG9zaXRlRGlzcG9zYWJsZSB7XG4gICAgZ2V0IGVsZW1lbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbGVtZW50O1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihhY2Nlc3NvciwgZ3JvdXApIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5hY2Nlc3NvciA9IGFjY2Vzc29yO1xuICAgICAgICB0aGlzLmdyb3VwID0gZ3JvdXA7XG4gICAgICAgIHRoaXMuZGlzcG9zYWJsZSA9IG5ldyBNdXRhYmxlRGlzcG9zYWJsZSgpO1xuICAgICAgICB0aGlzLl9vbkRpZEZvY3VzID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZEZvY3VzID0gdGhpcy5fb25EaWRGb2N1cy5ldmVudDtcbiAgICAgICAgdGhpcy5fb25EaWRCbHVyID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZEJsdXIgPSB0aGlzLl9vbkRpZEJsdXIuZXZlbnQ7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc05hbWUgPSAnZHYtY29udGVudC1jb250YWluZXInO1xuICAgICAgICB0aGlzLl9lbGVtZW50LnRhYkluZGV4ID0gLTE7XG4gICAgICAgIHRoaXMuYWRkRGlzcG9zYWJsZXModGhpcy5fb25EaWRGb2N1cywgdGhpcy5fb25EaWRCbHVyKTtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZ3JvdXAuZHJvcFRhcmdldENvbnRhaW5lcjtcbiAgICAgICAgdGhpcy5kcm9wVGFyZ2V0ID0gbmV3IERyb3B0YXJnZXQodGhpcy5lbGVtZW50LCB7XG4gICAgICAgICAgICBnZXRPdmVybGF5T3V0bGluZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKChfYSA9IGFjY2Vzc29yLm9wdGlvbnMudGhlbWUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kbmRQYW5lbE92ZXJsYXkpID09PSAnZ3JvdXAnXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5lbGVtZW50LnBhcmVudEVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ2R2LWRyb3AtdGFyZ2V0LWNvbnRlbnQnLFxuICAgICAgICAgICAgYWNjZXB0ZWRUYXJnZXRab25lczogWyd0b3AnLCAnYm90dG9tJywgJ2xlZnQnLCAncmlnaHQnLCAnY2VudGVyJ10sXG4gICAgICAgICAgICBjYW5EaXNwbGF5T3ZlcmxheTogKGV2ZW50LCBwb3NpdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmdyb3VwLmxvY2tlZCA9PT0gJ25vLWRyb3AtdGFyZ2V0JyB8fFxuICAgICAgICAgICAgICAgICAgICAodGhpcy5ncm91cC5sb2NrZWQgJiYgcG9zaXRpb24gPT09ICdjZW50ZXInKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBnZXRQYW5lbERhdGEoKTtcbiAgICAgICAgICAgICAgICBpZiAoIWRhdGEgJiZcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuc2hpZnRLZXkgJiZcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ncm91cC5sb2NhdGlvbi50eXBlICE9PSAnZmxvYXRpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS52aWV3SWQgPT09IHRoaXMuYWNjZXNzb3IuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyb3VwLmNhbkRpc3BsYXlPdmVybGF5KGV2ZW50LCBwb3NpdGlvbiwgJ2NvbnRlbnQnKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRPdmVycmlkZVRhcmdldDogdGFyZ2V0ID8gKCkgPT4gdGFyZ2V0Lm1vZGVsIDogdW5kZWZpbmVkLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyh0aGlzLmRyb3BUYXJnZXQpO1xuICAgIH1cbiAgICBzaG93KCkge1xuICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICcnO1xuICAgIH1cbiAgICBoaWRlKCkge1xuICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICB9XG4gICAgcmVuZGVyUGFuZWwocGFuZWwsIG9wdGlvbnMgPSB7IGFzQWN0aXZlOiB0cnVlIH0pIHtcbiAgICAgICAgY29uc3QgZG9SZW5kZXIgPSBvcHRpb25zLmFzQWN0aXZlIHx8XG4gICAgICAgICAgICAodGhpcy5wYW5lbCAmJiB0aGlzLmdyb3VwLmlzUGFuZWxBY3RpdmUodGhpcy5wYW5lbCkpO1xuICAgICAgICBpZiAodGhpcy5wYW5lbCAmJlxuICAgICAgICAgICAgdGhpcy5wYW5lbC52aWV3LmNvbnRlbnQuZWxlbWVudC5wYXJlbnRFbGVtZW50ID09PSB0aGlzLl9lbGVtZW50KSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHRoZSBjdXJyZW50bHkgYXR0YWNoZWQgcGFuZWwgaXMgbW91bnRlZCBkaXJlY3RseSB0byB0aGUgY29udGVudCB0aGVuIHJlbW92ZSBpdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMucGFuZWwudmlldy5jb250ZW50LmVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGFuZWwgPSBwYW5lbDtcbiAgICAgICAgbGV0IGNvbnRhaW5lcjtcbiAgICAgICAgc3dpdGNoIChwYW5lbC5hcGkucmVuZGVyZXIpIHtcbiAgICAgICAgICAgIGNhc2UgJ29ubHlXaGVuVmlzaWJsZSc6XG4gICAgICAgICAgICAgICAgdGhpcy5ncm91cC5yZW5kZXJDb250YWluZXIuZGV0YXRjaChwYW5lbCk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucGFuZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRvUmVuZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMucGFuZWwudmlldy5jb250ZW50LmVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IHRoaXMuX2VsZW1lbnQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdhbHdheXMnOlxuICAgICAgICAgICAgICAgIGlmIChwYW5lbC52aWV3LmNvbnRlbnQuZWxlbWVudC5wYXJlbnRFbGVtZW50ID09PSB0aGlzLl9lbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlQ2hpbGQocGFuZWwudmlldy5jb250ZW50LmVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250YWluZXIgPSB0aGlzLmdyb3VwLnJlbmRlckNvbnRhaW5lci5hdHRhY2goe1xuICAgICAgICAgICAgICAgICAgICBwYW5lbCxcbiAgICAgICAgICAgICAgICAgICAgcmVmZXJlbmNlQ29udGFpbmVyOiB0aGlzLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGRvY2t2aWV3OiBpbnZhbGlkIHJlbmRlcmVyIHR5cGUgJyR7cGFuZWwuYXBpLnJlbmRlcmVyfSdgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZG9SZW5kZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGZvY3VzVHJhY2tlciA9IHRyYWNrRm9jdXMoY29udGFpbmVyKTtcbiAgICAgICAgICAgIGNvbnN0IGRpc3Bvc2FibGUgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpO1xuICAgICAgICAgICAgZGlzcG9zYWJsZS5hZGREaXNwb3NhYmxlcyhmb2N1c1RyYWNrZXIsIGZvY3VzVHJhY2tlci5vbkRpZEZvY3VzKCgpID0+IHRoaXMuX29uRGlkRm9jdXMuZmlyZSgpKSwgZm9jdXNUcmFja2VyLm9uRGlkQmx1cigoKSA9PiB0aGlzLl9vbkRpZEJsdXIuZmlyZSgpKSk7XG4gICAgICAgICAgICB0aGlzLmRpc3Bvc2FibGUudmFsdWUgPSBkaXNwb3NhYmxlO1xuICAgICAgICB9XG4gICAgfVxuICAgIG9wZW5QYW5lbChwYW5lbCkge1xuICAgICAgICBpZiAodGhpcy5wYW5lbCA9PT0gcGFuZWwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbmRlclBhbmVsKHBhbmVsKTtcbiAgICB9XG4gICAgbGF5b3V0KF93aWR0aCwgX2hlaWdodCkge1xuICAgICAgICAvLyBub29wXG4gICAgfVxuICAgIGNsb3NlUGFuZWwoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHRoaXMucGFuZWwpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnBhbmVsLmFwaS5yZW5kZXJlciA9PT0gJ29ubHlXaGVuVmlzaWJsZScpIHtcbiAgICAgICAgICAgICAgICAoX2EgPSB0aGlzLnBhbmVsLnZpZXcuY29udGVudC5lbGVtZW50LnBhcmVudEVsZW1lbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5yZW1vdmVDaGlsZCh0aGlzLnBhbmVsLnZpZXcuY29udGVudC5lbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBhbmVsID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICB0aGlzLmRpc3Bvc2FibGUuZGlzcG9zZSgpO1xuICAgICAgICBzdXBlci5kaXNwb3NlKCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgc2hpZnRBYnNvbHV0ZUVsZW1lbnRJbnRvVmlldyB9IGZyb20gJy4uLy4uL2RvbSc7XG5pbXBvcnQgeyBhZGREaXNwb3NhYmxlTGlzdGVuZXIgfSBmcm9tICcuLi8uLi9ldmVudHMnO1xuaW1wb3J0IHsgQ29tcG9zaXRlRGlzcG9zYWJsZSwgRGlzcG9zYWJsZSwgTXV0YWJsZURpc3Bvc2FibGUsIH0gZnJvbSAnLi4vLi4vbGlmZWN5Y2xlJztcbmV4cG9ydCBjbGFzcyBQb3B1cFNlcnZpY2UgZXh0ZW5kcyBDb21wb3NpdGVEaXNwb3NhYmxlIHtcbiAgICBjb25zdHJ1Y3Rvcihyb290KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMucm9vdCA9IHJvb3Q7XG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2FjdGl2ZURpc3Bvc2FibGUgPSBuZXcgTXV0YWJsZURpc3Bvc2FibGUoKTtcbiAgICAgICAgdGhpcy5fZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTmFtZSA9ICdkdi1wb3BvdmVyLWFuY2hvcic7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xuICAgICAgICB0aGlzLnJvb3QucHJlcGVuZCh0aGlzLl9lbGVtZW50KTtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyhEaXNwb3NhYmxlLmZyb20oKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICB9KSwgdGhpcy5fYWN0aXZlRGlzcG9zYWJsZSk7XG4gICAgfVxuICAgIG9wZW5Qb3BvdmVyKGVsZW1lbnQsIHBvc2l0aW9uKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICBjb25zdCB3cmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHdyYXBwZXIuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgICB3cmFwcGVyLnN0eWxlLnpJbmRleCA9IChfYSA9IHBvc2l0aW9uLnpJbmRleCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJ3ZhcigtLWR2LW92ZXJsYXktei1pbmRleCknO1xuICAgICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICAgICAgICBjb25zdCBhbmNob3JCb3ggPSB0aGlzLl9lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBjb25zdCBvZmZzZXRYID0gYW5jaG9yQm94LmxlZnQ7XG4gICAgICAgIGNvbnN0IG9mZnNldFkgPSBhbmNob3JCb3gudG9wO1xuICAgICAgICB3cmFwcGVyLnN0eWxlLnRvcCA9IGAke3Bvc2l0aW9uLnkgLSBvZmZzZXRZfXB4YDtcbiAgICAgICAgd3JhcHBlci5zdHlsZS5sZWZ0ID0gYCR7cG9zaXRpb24ueCAtIG9mZnNldFh9cHhgO1xuICAgICAgICB0aGlzLl9lbGVtZW50LmFwcGVuZENoaWxkKHdyYXBwZXIpO1xuICAgICAgICB0aGlzLl9hY3RpdmUgPSB3cmFwcGVyO1xuICAgICAgICB0aGlzLl9hY3RpdmVEaXNwb3NhYmxlLnZhbHVlID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoYWRkRGlzcG9zYWJsZUxpc3RlbmVyKHdpbmRvdywgJ3BvaW50ZXJkb3duJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG4gICAgICAgICAgICBpZiAoISh0YXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgZWwgPSB0YXJnZXQ7XG4gICAgICAgICAgICB3aGlsZSAoZWwgJiYgZWwgIT09IHdyYXBwZXIpIHtcbiAgICAgICAgICAgICAgICBlbCA9IChfYSA9IGVsID09PSBudWxsIHx8IGVsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlbC5wYXJlbnRFbGVtZW50KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuOyAvLyBjbGlja2VkIHdpdGhpbiBwb3BvdmVyXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgIHNoaWZ0QWJzb2x1dGVFbGVtZW50SW50b1ZpZXcod3JhcHBlciwgdGhpcy5yb290KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNsb3NlKCkge1xuICAgICAgICBpZiAodGhpcy5fYWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLl9hY3RpdmUucmVtb3ZlKCk7XG4gICAgICAgICAgICB0aGlzLl9hY3RpdmVEaXNwb3NhYmxlLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIHRoaXMuX2FjdGl2ZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBDb21wb3NpdGVEaXNwb3NhYmxlIH0gZnJvbSAnLi4vLi4vLi4vbGlmZWN5Y2xlJztcbmltcG9ydCB7IGFkZERpc3Bvc2FibGVMaXN0ZW5lciB9IGZyb20gJy4uLy4uLy4uL2V2ZW50cyc7XG5pbXBvcnQgeyBjcmVhdGVDbG9zZUJ1dHRvbiB9IGZyb20gJy4uLy4uLy4uL3N2Zyc7XG5leHBvcnQgY2xhc3MgRGVmYXVsdFRhYiBleHRlbmRzIENvbXBvc2l0ZURpc3Bvc2FibGUge1xuICAgIGdldCBlbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZWxlbWVudDtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc05hbWUgPSAnZHYtZGVmYXVsdC10YWInO1xuICAgICAgICB0aGlzLl9jb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRoaXMuX2NvbnRlbnQuY2xhc3NOYW1lID0gJ2R2LWRlZmF1bHQtdGFiLWNvbnRlbnQnO1xuICAgICAgICB0aGlzLmFjdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0aGlzLmFjdGlvbi5jbGFzc05hbWUgPSAnZHYtZGVmYXVsdC10YWItYWN0aW9uJztcbiAgICAgICAgdGhpcy5hY3Rpb24uYXBwZW5kQ2hpbGQoY3JlYXRlQ2xvc2VCdXR0b24oKSk7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5fY29udGVudCk7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5hY3Rpb24pO1xuICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH1cbiAgICBpbml0KHBhcmFtcykge1xuICAgICAgICB0aGlzLl90aXRsZSA9IHBhcmFtcy50aXRsZTtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyhwYXJhbXMuYXBpLm9uRGlkVGl0bGVDaGFuZ2UoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl90aXRsZSA9IGV2ZW50LnRpdGxlO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICAgICAgfSksIGFkZERpc3Bvc2FibGVMaXN0ZW5lcih0aGlzLmFjdGlvbiwgJ3BvaW50ZXJkb3duJywgKGV2KSA9PiB7XG4gICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9KSwgYWRkRGlzcG9zYWJsZUxpc3RlbmVyKHRoaXMuYWN0aW9uLCAnY2xpY2snLCAoZXYpID0+IHtcbiAgICAgICAgICAgIGlmIChldi5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHBhcmFtcy5hcGkuY2xvc2UoKTtcbiAgICAgICAgfSkpO1xuICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRlbnQudGV4dENvbnRlbnQgIT09IHRoaXMuX3RpdGxlKSB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZW50LnRleHRDb250ZW50ID0gKF9hID0gdGhpcy5fdGl0bGUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcnO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgYWRkRGlzcG9zYWJsZUxpc3RlbmVyLCBFbWl0dGVyIH0gZnJvbSAnLi4vLi4vLi4vZXZlbnRzJztcbmltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUgfSBmcm9tICcuLi8uLi8uLi9saWZlY3ljbGUnO1xuaW1wb3J0IHsgZ2V0UGFuZWxEYXRhLCBMb2NhbFNlbGVjdGlvblRyYW5zZmVyLCBQYW5lbFRyYW5zZmVyLCB9IGZyb20gJy4uLy4uLy4uL2RuZC9kYXRhVHJhbnNmZXInO1xuaW1wb3J0IHsgdG9nZ2xlQ2xhc3MgfSBmcm9tICcuLi8uLi8uLi9kb20nO1xuaW1wb3J0IHsgRHJvcHRhcmdldCwgfSBmcm9tICcuLi8uLi8uLi9kbmQvZHJvcHRhcmdldCc7XG5pbXBvcnQgeyBEcmFnSGFuZGxlciB9IGZyb20gJy4uLy4uLy4uL2RuZC9hYnN0cmFjdERyYWdIYW5kbGVyJztcbmltcG9ydCB7IGFkZEdob3N0SW1hZ2UgfSBmcm9tICcuLi8uLi8uLi9kbmQvZ2hvc3QnO1xuY2xhc3MgVGFiRHJhZ0hhbmRsZXIgZXh0ZW5kcyBEcmFnSGFuZGxlciB7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudCwgYWNjZXNzb3IsIGdyb3VwLCBwYW5lbCwgZGlzYWJsZWQpIHtcbiAgICAgICAgc3VwZXIoZWxlbWVudCwgZGlzYWJsZWQpO1xuICAgICAgICB0aGlzLmFjY2Vzc29yID0gYWNjZXNzb3I7XG4gICAgICAgIHRoaXMuZ3JvdXAgPSBncm91cDtcbiAgICAgICAgdGhpcy5wYW5lbCA9IHBhbmVsO1xuICAgICAgICB0aGlzLnBhbmVsVHJhbnNmZXIgPSBMb2NhbFNlbGVjdGlvblRyYW5zZmVyLmdldEluc3RhbmNlKCk7XG4gICAgfVxuICAgIGdldERhdGEoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5wYW5lbFRyYW5zZmVyLnNldERhdGEoW25ldyBQYW5lbFRyYW5zZmVyKHRoaXMuYWNjZXNzb3IuaWQsIHRoaXMuZ3JvdXAuaWQsIHRoaXMucGFuZWwuaWQpXSwgUGFuZWxUcmFuc2Zlci5wcm90b3R5cGUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGlzcG9zZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucGFuZWxUcmFuc2Zlci5jbGVhckRhdGEoUGFuZWxUcmFuc2Zlci5wcm90b3R5cGUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgVGFiIGV4dGVuZHMgQ29tcG9zaXRlRGlzcG9zYWJsZSB7XG4gICAgZ2V0IGVsZW1lbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbGVtZW50O1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihwYW5lbCwgYWNjZXNzb3IsIGdyb3VwKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMucGFuZWwgPSBwYW5lbDtcbiAgICAgICAgdGhpcy5hY2Nlc3NvciA9IGFjY2Vzc29yO1xuICAgICAgICB0aGlzLmdyb3VwID0gZ3JvdXA7XG4gICAgICAgIHRoaXMuY29udGVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fb25Qb2ludERvd24gPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uUG9pbnRlckRvd24gPSB0aGlzLl9vblBvaW50RG93bi5ldmVudDtcbiAgICAgICAgdGhpcy5fb25Ecm9wcGVkID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRyb3AgPSB0aGlzLl9vbkRyb3BwZWQuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uRHJhZ1N0YXJ0ID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRyYWdTdGFydCA9IHRoaXMuX29uRHJhZ1N0YXJ0LmV2ZW50O1xuICAgICAgICB0aGlzLl9lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NOYW1lID0gJ2R2LXRhYic7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQudGFiSW5kZXggPSAwO1xuICAgICAgICB0aGlzLl9lbGVtZW50LmRyYWdnYWJsZSA9ICF0aGlzLmFjY2Vzc29yLm9wdGlvbnMuZGlzYWJsZURuZDtcbiAgICAgICAgdG9nZ2xlQ2xhc3ModGhpcy5lbGVtZW50LCAnZHYtaW5hY3RpdmUtdGFiJywgdHJ1ZSk7XG4gICAgICAgIHRoaXMuZHJhZ0hhbmRsZXIgPSBuZXcgVGFiRHJhZ0hhbmRsZXIodGhpcy5fZWxlbWVudCwgdGhpcy5hY2Nlc3NvciwgdGhpcy5ncm91cCwgdGhpcy5wYW5lbCwgISF0aGlzLmFjY2Vzc29yLm9wdGlvbnMuZGlzYWJsZURuZCk7XG4gICAgICAgIHRoaXMuZHJvcFRhcmdldCA9IG5ldyBEcm9wdGFyZ2V0KHRoaXMuX2VsZW1lbnQsIHtcbiAgICAgICAgICAgIGFjY2VwdGVkVGFyZ2V0Wm9uZXM6IFsnbGVmdCcsICdyaWdodCddLFxuICAgICAgICAgICAgb3ZlcmxheU1vZGVsOiB7IGFjdGl2YXRpb25TaXplOiB7IHZhbHVlOiA1MCwgdHlwZTogJ3BlcmNlbnRhZ2UnIH0gfSxcbiAgICAgICAgICAgIGNhbkRpc3BsYXlPdmVybGF5OiAoZXZlbnQsIHBvc2l0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZ3JvdXAubG9ja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IGdldFBhbmVsRGF0YSgpO1xuICAgICAgICAgICAgICAgIGlmIChkYXRhICYmIHRoaXMuYWNjZXNzb3IuaWQgPT09IGRhdGEudmlld0lkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ncm91cC5tb2RlbC5jYW5EaXNwbGF5T3ZlcmxheShldmVudCwgcG9zaXRpb24sICd0YWInKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRPdmVycmlkZVRhcmdldDogKCkgPT4geyB2YXIgX2E7IHJldHVybiAoX2EgPSBncm91cC5tb2RlbC5kcm9wVGFyZ2V0Q29udGFpbmVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubW9kZWw7IH0sXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm9uV2lsbFNob3dPdmVybGF5ID0gdGhpcy5kcm9wVGFyZ2V0Lm9uV2lsbFNob3dPdmVybGF5O1xuICAgICAgICB0aGlzLmFkZERpc3Bvc2FibGVzKHRoaXMuX29uUG9pbnREb3duLCB0aGlzLl9vbkRyb3BwZWQsIHRoaXMuX29uRHJhZ1N0YXJ0LCB0aGlzLmRyYWdIYW5kbGVyLm9uRHJhZ1N0YXJ0KChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmRhdGFUcmFuc2Zlcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLmVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld05vZGUgPSB0aGlzLmVsZW1lbnQuY2xvbmVOb2RlKHRydWUpO1xuICAgICAgICAgICAgICAgIEFycmF5LmZyb20oc3R5bGUpLmZvckVhY2goKGtleSkgPT4gbmV3Tm9kZS5zdHlsZS5zZXRQcm9wZXJ0eShrZXksIHN0eWxlLmdldFByb3BlcnR5VmFsdWUoa2V5KSwgc3R5bGUuZ2V0UHJvcGVydHlQcmlvcml0eShrZXkpKSk7XG4gICAgICAgICAgICAgICAgbmV3Tm9kZS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgICAgICAgICAgICAgYWRkR2hvc3RJbWFnZShldmVudC5kYXRhVHJhbnNmZXIsIG5ld05vZGUsIHtcbiAgICAgICAgICAgICAgICAgICAgeTogLTEwLFxuICAgICAgICAgICAgICAgICAgICB4OiAzMCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX29uRHJhZ1N0YXJ0LmZpcmUoZXZlbnQpO1xuICAgICAgICB9KSwgdGhpcy5kcmFnSGFuZGxlciwgYWRkRGlzcG9zYWJsZUxpc3RlbmVyKHRoaXMuX2VsZW1lbnQsICdwb2ludGVyZG93bicsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25Qb2ludERvd24uZmlyZShldmVudCk7XG4gICAgICAgIH0pLCB0aGlzLmRyb3BUYXJnZXQub25Ecm9wKChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25Ecm9wcGVkLmZpcmUoZXZlbnQpO1xuICAgICAgICB9KSwgdGhpcy5kcm9wVGFyZ2V0KTtcbiAgICB9XG4gICAgc2V0QWN0aXZlKGlzQWN0aXZlKSB7XG4gICAgICAgIHRvZ2dsZUNsYXNzKHRoaXMuZWxlbWVudCwgJ2R2LWFjdGl2ZS10YWInLCBpc0FjdGl2ZSk7XG4gICAgICAgIHRvZ2dsZUNsYXNzKHRoaXMuZWxlbWVudCwgJ2R2LWluYWN0aXZlLXRhYicsICFpc0FjdGl2ZSk7XG4gICAgfVxuICAgIHNldENvbnRlbnQocGFydCkge1xuICAgICAgICBpZiAodGhpcy5jb250ZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMuY29udGVudC5lbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbnRlbnQgPSBwYXJ0O1xuICAgICAgICB0aGlzLl9lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuY29udGVudC5lbGVtZW50KTtcbiAgICB9XG4gICAgdXBkYXRlRHJhZ0FuZERyb3BTdGF0ZSgpIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5kcmFnZ2FibGUgPSAhdGhpcy5hY2Nlc3Nvci5vcHRpb25zLmRpc2FibGVEbmQ7XG4gICAgICAgIHRoaXMuZHJhZ0hhbmRsZXIuc2V0RGlzYWJsZWQoISF0aGlzLmFjY2Vzc29yLm9wdGlvbnMuZGlzYWJsZURuZCk7XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHN1cGVyLmRpc3Bvc2UoKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBjcmVhdGVDaGV2cm9uUmlnaHRCdXR0b24gfSBmcm9tICcuLi8uLi8uLi9zdmcnO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURyb3Bkb3duRWxlbWVudEhhbmRsZSgpIHtcbiAgICBjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVsLmNsYXNzTmFtZSA9ICdkdi10YWJzLW92ZXJmbG93LWRyb3Bkb3duLWRlZmF1bHQnO1xuICAgIGNvbnN0IHRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgdGV4dC50ZXh0Q29udGVudCA9IGBgO1xuICAgIGNvbnN0IGljb24gPSBjcmVhdGVDaGV2cm9uUmlnaHRCdXR0b24oKTtcbiAgICBlbC5hcHBlbmRDaGlsZChpY29uKTtcbiAgICBlbC5hcHBlbmRDaGlsZCh0ZXh0KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBlbGVtZW50OiBlbCxcbiAgICAgICAgdXBkYXRlOiAocGFyYW1zKSA9PiB7XG4gICAgICAgICAgICB0ZXh0LnRleHRDb250ZW50ID0gYCR7cGFyYW1zLnRhYnN9YDtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuIiwiaW1wb3J0IHsgZ2V0UGFuZWxEYXRhIH0gZnJvbSAnLi4vLi4vLi4vZG5kL2RhdGFUcmFuc2Zlcic7XG5pbXBvcnQgeyBpc0NoaWxkRW50aXJlbHlWaXNpYmxlV2l0aGluUGFyZW50LCBPdmVyZmxvd09ic2VydmVyLCB9IGZyb20gJy4uLy4uLy4uL2RvbSc7XG5pbXBvcnQgeyBhZGREaXNwb3NhYmxlTGlzdGVuZXIsIEVtaXR0ZXIgfSBmcm9tICcuLi8uLi8uLi9ldmVudHMnO1xuaW1wb3J0IHsgQ29tcG9zaXRlRGlzcG9zYWJsZSwgRGlzcG9zYWJsZSwgTXV0YWJsZURpc3Bvc2FibGUsIH0gZnJvbSAnLi4vLi4vLi4vbGlmZWN5Y2xlJztcbmltcG9ydCB7IFNjcm9sbGJhciB9IGZyb20gJy4uLy4uLy4uL3Njcm9sbGJhcic7XG5pbXBvcnQgeyBXaWxsU2hvd092ZXJsYXlMb2NhdGlvbkV2ZW50IH0gZnJvbSAnLi4vLi4vZXZlbnRzJztcbmltcG9ydCB7IFRhYiB9IGZyb20gJy4uL3RhYi90YWInO1xuZXhwb3J0IGNsYXNzIFRhYnMgZXh0ZW5kcyBDb21wb3NpdGVEaXNwb3NhYmxlIHtcbiAgICBnZXQgc2hvd1RhYnNPdmVyZmxvd0NvbnRyb2woKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zaG93VGFic092ZXJmbG93Q29udHJvbDtcbiAgICB9XG4gICAgc2V0IHNob3dUYWJzT3ZlcmZsb3dDb250cm9sKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLl9zaG93VGFic092ZXJmbG93Q29udHJvbCA9PSB2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Nob3dUYWJzT3ZlcmZsb3dDb250cm9sID0gdmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgT3ZlcmZsb3dPYnNlcnZlcih0aGlzLl90YWJzTGlzdCk7XG4gICAgICAgICAgICB0aGlzLl9vYnNlcnZlckRpc3Bvc2FibGUudmFsdWUgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZShvYnNlcnZlciwgb2JzZXJ2ZXIub25EaWRDaGFuZ2UoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGFzT3ZlcmZsb3cgPSBldmVudC5oYXNTY3JvbGxYIHx8IGV2ZW50Lmhhc1Njcm9sbFk7XG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGVEcm9wZG93bih7IHJlc2V0OiAhaGFzT3ZlcmZsb3cgfSk7XG4gICAgICAgICAgICB9KSwgYWRkRGlzcG9zYWJsZUxpc3RlbmVyKHRoaXMuX3RhYnNMaXN0LCAnc2Nyb2xsJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlRHJvcGRvd24oeyByZXNldDogZmFsc2UgfSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGVsZW1lbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbGVtZW50O1xuICAgIH1cbiAgICBnZXQgcGFuZWxzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdGFicy5tYXAoKF8pID0+IF8udmFsdWUucGFuZWwuaWQpO1xuICAgIH1cbiAgICBnZXQgc2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RhYnMubGVuZ3RoO1xuICAgIH1cbiAgICBnZXQgdGFicygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RhYnMubWFwKChfKSA9PiBfLnZhbHVlKTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZ3JvdXAsIGFjY2Vzc29yLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZ3JvdXAgPSBncm91cDtcbiAgICAgICAgdGhpcy5hY2Nlc3NvciA9IGFjY2Vzc29yO1xuICAgICAgICB0aGlzLl9vYnNlcnZlckRpc3Bvc2FibGUgPSBuZXcgTXV0YWJsZURpc3Bvc2FibGUoKTtcbiAgICAgICAgdGhpcy5fdGFicyA9IFtdO1xuICAgICAgICB0aGlzLnNlbGVjdGVkSW5kZXggPSAtMTtcbiAgICAgICAgdGhpcy5fc2hvd1RhYnNPdmVyZmxvd0NvbnRyb2wgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fb25UYWJEcmFnU3RhcnQgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uVGFiRHJhZ1N0YXJ0ID0gdGhpcy5fb25UYWJEcmFnU3RhcnQuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uRHJvcCA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25Ecm9wID0gdGhpcy5fb25Ecm9wLmV2ZW50O1xuICAgICAgICB0aGlzLl9vbldpbGxTaG93T3ZlcmxheSA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25XaWxsU2hvd092ZXJsYXkgPSB0aGlzLl9vbldpbGxTaG93T3ZlcmxheS5ldmVudDtcbiAgICAgICAgdGhpcy5fb25PdmVyZmxvd1RhYnNDaGFuZ2UgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uT3ZlcmZsb3dUYWJzQ2hhbmdlID0gdGhpcy5fb25PdmVyZmxvd1RhYnNDaGFuZ2UuZXZlbnQ7XG4gICAgICAgIHRoaXMuX3RhYnNMaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRoaXMuX3RhYnNMaXN0LmNsYXNzTmFtZSA9ICdkdi10YWJzLWNvbnRhaW5lciBkdi1ob3Jpem9udGFsJztcbiAgICAgICAgdGhpcy5zaG93VGFic092ZXJmbG93Q29udHJvbCA9IG9wdGlvbnMuc2hvd1RhYnNPdmVyZmxvd0NvbnRyb2w7XG4gICAgICAgIGlmIChhY2Nlc3Nvci5vcHRpb25zLnNjcm9sbGJhcnMgPT09ICduYXRpdmUnKSB7XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50ID0gdGhpcy5fdGFic0xpc3Q7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBzY3JvbGxiYXIgPSBuZXcgU2Nyb2xsYmFyKHRoaXMuX3RhYnNMaXN0KTtcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQgPSBzY3JvbGxiYXIuZWxlbWVudDtcbiAgICAgICAgICAgIHRoaXMuYWRkRGlzcG9zYWJsZXMoc2Nyb2xsYmFyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFkZERpc3Bvc2FibGVzKHRoaXMuX29uT3ZlcmZsb3dUYWJzQ2hhbmdlLCB0aGlzLl9vYnNlcnZlckRpc3Bvc2FibGUsIHRoaXMuX29uV2lsbFNob3dPdmVybGF5LCB0aGlzLl9vbkRyb3AsIHRoaXMuX29uVGFiRHJhZ1N0YXJ0LCBhZGREaXNwb3NhYmxlTGlzdGVuZXIodGhpcy5lbGVtZW50LCAncG9pbnRlcmRvd24nLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaXNMZWZ0Q2xpY2sgPSBldmVudC5idXR0b24gPT09IDA7XG4gICAgICAgICAgICBpZiAoaXNMZWZ0Q2xpY2spIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFjY2Vzc29yLmRvU2V0R3JvdXBBY3RpdmUodGhpcy5ncm91cCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLCBEaXNwb3NhYmxlLmZyb20oKCkgPT4ge1xuICAgICAgICAgICAgZm9yIChjb25zdCB7IHZhbHVlLCBkaXNwb3NhYmxlIH0gb2YgdGhpcy5fdGFicykge1xuICAgICAgICAgICAgICAgIGRpc3Bvc2FibGUuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIHZhbHVlLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3RhYnMgPSBbXTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBpbmRleE9mKGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90YWJzLmZpbmRJbmRleCgodGFiKSA9PiB0YWIudmFsdWUucGFuZWwuaWQgPT09IGlkKTtcbiAgICB9XG4gICAgaXNBY3RpdmUodGFiKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5zZWxlY3RlZEluZGV4ID4gLTEgJiZcbiAgICAgICAgICAgIHRoaXMuX3RhYnNbdGhpcy5zZWxlY3RlZEluZGV4XS52YWx1ZSA9PT0gdGFiKTtcbiAgICB9XG4gICAgc2V0QWN0aXZlUGFuZWwocGFuZWwpIHtcbiAgICAgICAgbGV0IHJ1bm5pbmdXaWR0aCA9IDA7XG4gICAgICAgIGZvciAoY29uc3QgdGFiIG9mIHRoaXMuX3RhYnMpIHtcbiAgICAgICAgICAgIGNvbnN0IGlzQWN0aXZlUGFuZWwgPSBwYW5lbC5pZCA9PT0gdGFiLnZhbHVlLnBhbmVsLmlkO1xuICAgICAgICAgICAgdGFiLnZhbHVlLnNldEFjdGl2ZShpc0FjdGl2ZVBhbmVsKTtcbiAgICAgICAgICAgIGlmIChpc0FjdGl2ZVBhbmVsKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IHRhYi52YWx1ZS5lbGVtZW50O1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudEVsZW1lbnQgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgaWYgKHJ1bm5pbmdXaWR0aCA8IHBhcmVudEVsZW1lbnQuc2Nyb2xsTGVmdCB8fFxuICAgICAgICAgICAgICAgICAgICBydW5uaW5nV2lkdGggKyBlbGVtZW50LmNsaWVudFdpZHRoID5cbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudEVsZW1lbnQuc2Nyb2xsTGVmdCArIHBhcmVudEVsZW1lbnQuY2xpZW50V2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50RWxlbWVudC5zY3JvbGxMZWZ0ID0gcnVubmluZ1dpZHRoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJ1bm5pbmdXaWR0aCArPSB0YWIudmFsdWUuZWxlbWVudC5jbGllbnRXaWR0aDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvcGVuUGFuZWwocGFuZWwsIGluZGV4ID0gdGhpcy5fdGFicy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RhYnMuZmluZCgodGFiKSA9PiB0YWIudmFsdWUucGFuZWwuaWQgPT09IHBhbmVsLmlkKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRhYiA9IG5ldyBUYWIocGFuZWwsIHRoaXMuYWNjZXNzb3IsIHRoaXMuZ3JvdXApO1xuICAgICAgICB0YWIuc2V0Q29udGVudChwYW5lbC52aWV3LnRhYik7XG4gICAgICAgIGNvbnN0IGRpc3Bvc2FibGUgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSh0YWIub25EcmFnU3RhcnQoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9vblRhYkRyYWdTdGFydC5maXJlKHsgbmF0aXZlRXZlbnQ6IGV2ZW50LCBwYW5lbCB9KTtcbiAgICAgICAgfSksIHRhYi5vblBvaW50ZXJEb3duKChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBpc0Zsb2F0aW5nR3JvdXBzRW5hYmxlZCA9ICF0aGlzLmFjY2Vzc29yLm9wdGlvbnMuZGlzYWJsZUZsb2F0aW5nR3JvdXBzO1xuICAgICAgICAgICAgY29uc3QgaXNGbG9hdGluZ1dpdGhPbmVQYW5lbCA9IHRoaXMuZ3JvdXAuYXBpLmxvY2F0aW9uLnR5cGUgPT09ICdmbG9hdGluZycgJiZcbiAgICAgICAgICAgICAgICB0aGlzLnNpemUgPT09IDE7XG4gICAgICAgICAgICBpZiAoaXNGbG9hdGluZ0dyb3Vwc0VuYWJsZWQgJiZcbiAgICAgICAgICAgICAgICAhaXNGbG9hdGluZ1dpdGhPbmVQYW5lbCAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwYW5lbCA9IHRoaXMuYWNjZXNzb3IuZ2V0R3JvdXBQYW5lbCh0YWIucGFuZWwuaWQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgdG9wLCBsZWZ0IH0gPSB0YWIuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHRvcDogcm9vdFRvcCwgbGVmdDogcm9vdExlZnQgfSA9IHRoaXMuYWNjZXNzb3IuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFjY2Vzc29yLmFkZEZsb2F0aW5nR3JvdXAocGFuZWwsIHtcbiAgICAgICAgICAgICAgICAgICAgeDogbGVmdCAtIHJvb3RMZWZ0LFxuICAgICAgICAgICAgICAgICAgICB5OiB0b3AgLSByb290VG9wLFxuICAgICAgICAgICAgICAgICAgICBpbkRyYWdNb2RlOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN3aXRjaCAoZXZlbnQuYnV0dG9uKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOiAvLyBsZWZ0IGNsaWNrIG9yIHRvdWNoXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmdyb3VwLmFjdGl2ZVBhbmVsICE9PSBwYW5lbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ncm91cC5tb2RlbC5vcGVuUGFuZWwocGFuZWwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSwgdGFiLm9uRHJvcCgoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX29uRHJvcC5maXJlKHtcbiAgICAgICAgICAgICAgICBldmVudDogZXZlbnQubmF0aXZlRXZlbnQsXG4gICAgICAgICAgICAgICAgaW5kZXg6IHRoaXMuX3RhYnMuZmluZEluZGV4KCh4KSA9PiB4LnZhbHVlID09PSB0YWIpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pLCB0YWIub25XaWxsU2hvd092ZXJsYXkoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9vbldpbGxTaG93T3ZlcmxheS5maXJlKG5ldyBXaWxsU2hvd092ZXJsYXlMb2NhdGlvbkV2ZW50KGV2ZW50LCB7XG4gICAgICAgICAgICAgICAga2luZDogJ3RhYicsXG4gICAgICAgICAgICAgICAgcGFuZWw6IHRoaXMuZ3JvdXAuYWN0aXZlUGFuZWwsXG4gICAgICAgICAgICAgICAgYXBpOiB0aGlzLmFjY2Vzc29yLmFwaSxcbiAgICAgICAgICAgICAgICBncm91cDogdGhpcy5ncm91cCxcbiAgICAgICAgICAgICAgICBnZXREYXRhOiBnZXRQYW5lbERhdGEsXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB7IHZhbHVlOiB0YWIsIGRpc3Bvc2FibGUgfTtcbiAgICAgICAgdGhpcy5hZGRUYWIodmFsdWUsIGluZGV4KTtcbiAgICB9XG4gICAgZGVsZXRlKGlkKSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5pbmRleE9mKGlkKTtcbiAgICAgICAgY29uc3QgdGFiVG9SZW1vdmUgPSB0aGlzLl90YWJzLnNwbGljZShpbmRleCwgMSlbMF07XG4gICAgICAgIGNvbnN0IHsgdmFsdWUsIGRpc3Bvc2FibGUgfSA9IHRhYlRvUmVtb3ZlO1xuICAgICAgICBkaXNwb3NhYmxlLmRpc3Bvc2UoKTtcbiAgICAgICAgdmFsdWUuZGlzcG9zZSgpO1xuICAgICAgICB2YWx1ZS5lbGVtZW50LnJlbW92ZSgpO1xuICAgIH1cbiAgICBhZGRUYWIodGFiLCBpbmRleCA9IHRoaXMuX3RhYnMubGVuZ3RoKSB7XG4gICAgICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPiB0aGlzLl90YWJzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGxvY2F0aW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdGFic0xpc3QuaW5zZXJ0QmVmb3JlKHRhYi52YWx1ZS5lbGVtZW50LCB0aGlzLl90YWJzTGlzdC5jaGlsZHJlbltpbmRleF0pO1xuICAgICAgICB0aGlzLl90YWJzID0gW1xuICAgICAgICAgICAgLi4udGhpcy5fdGFicy5zbGljZSgwLCBpbmRleCksXG4gICAgICAgICAgICB0YWIsXG4gICAgICAgICAgICAuLi50aGlzLl90YWJzLnNsaWNlKGluZGV4KSxcbiAgICAgICAgXTtcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRJbmRleCA8IDApIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRJbmRleCA9IGluZGV4O1xuICAgICAgICB9XG4gICAgfVxuICAgIHRvZ2dsZURyb3Bkb3duKG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgdGFicyA9IG9wdGlvbnMucmVzZXRcbiAgICAgICAgICAgID8gW11cbiAgICAgICAgICAgIDogdGhpcy5fdGFic1xuICAgICAgICAgICAgICAgIC5maWx0ZXIoKHRhYikgPT4gIWlzQ2hpbGRFbnRpcmVseVZpc2libGVXaXRoaW5QYXJlbnQodGFiLnZhbHVlLmVsZW1lbnQsIHRoaXMuX3RhYnNMaXN0KSlcbiAgICAgICAgICAgICAgICAubWFwKCh4KSA9PiB4LnZhbHVlLnBhbmVsLmlkKTtcbiAgICAgICAgdGhpcy5fb25PdmVyZmxvd1RhYnNDaGFuZ2UuZmlyZSh7IHRhYnMsIHJlc2V0OiBvcHRpb25zLnJlc2V0IH0pO1xuICAgIH1cbiAgICB1cGRhdGVEcmFnQW5kRHJvcFN0YXRlKCkge1xuICAgICAgICBmb3IgKGNvbnN0IHRhYiBvZiB0aGlzLl90YWJzKSB7XG4gICAgICAgICAgICB0YWIudmFsdWUudXBkYXRlRHJhZ0FuZERyb3BTdGF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQ29tcG9zaXRlRGlzcG9zYWJsZSwgRGlzcG9zYWJsZSwgTXV0YWJsZURpc3Bvc2FibGUsIH0gZnJvbSAnLi4vLi4vLi4vbGlmZWN5Y2xlJztcbmltcG9ydCB7IGFkZERpc3Bvc2FibGVMaXN0ZW5lciwgRW1pdHRlciB9IGZyb20gJy4uLy4uLy4uL2V2ZW50cyc7XG5pbXBvcnQgeyBWb2lkQ29udGFpbmVyIH0gZnJvbSAnLi92b2lkQ29udGFpbmVyJztcbmltcG9ydCB7IGZpbmRSZWxhdGl2ZVpJbmRleFBhcmVudCwgdG9nZ2xlQ2xhc3MgfSBmcm9tICcuLi8uLi8uLi9kb20nO1xuaW1wb3J0IHsgV2lsbFNob3dPdmVybGF5TG9jYXRpb25FdmVudCB9IGZyb20gJy4uLy4uL2V2ZW50cyc7XG5pbXBvcnQgeyBnZXRQYW5lbERhdGEgfSBmcm9tICcuLi8uLi8uLi9kbmQvZGF0YVRyYW5zZmVyJztcbmltcG9ydCB7IFRhYnMgfSBmcm9tICcuL3RhYnMnO1xuaW1wb3J0IHsgY3JlYXRlRHJvcGRvd25FbGVtZW50SGFuZGxlLCB9IGZyb20gJy4vdGFiT3ZlcmZsb3dDb250cm9sJztcbmV4cG9ydCBjbGFzcyBUYWJzQ29udGFpbmVyIGV4dGVuZHMgQ29tcG9zaXRlRGlzcG9zYWJsZSB7XG4gICAgZ2V0IG9uVGFiRHJhZ1N0YXJ0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy50YWJzLm9uVGFiRHJhZ1N0YXJ0O1xuICAgIH1cbiAgICBnZXQgcGFuZWxzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50YWJzLnBhbmVscztcbiAgICB9XG4gICAgZ2V0IHNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRhYnMuc2l6ZTtcbiAgICB9XG4gICAgZ2V0IGhpZGRlbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hpZGRlbjtcbiAgICB9XG4gICAgc2V0IGhpZGRlbih2YWx1ZSkge1xuICAgICAgICB0aGlzLl9oaWRkZW4gPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/ICdub25lJyA6ICcnO1xuICAgIH1cbiAgICBnZXQgZWxlbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGFjY2Vzc29yLCBncm91cCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmFjY2Vzc29yID0gYWNjZXNzb3I7XG4gICAgICAgIHRoaXMuZ3JvdXAgPSBncm91cDtcbiAgICAgICAgdGhpcy5faGlkZGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZHJvcGRvd25QYXJ0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fb3ZlcmZsb3dUYWJzID0gW107XG4gICAgICAgIHRoaXMuX2Ryb3Bkb3duRGlzcG9zYWJsZSA9IG5ldyBNdXRhYmxlRGlzcG9zYWJsZSgpO1xuICAgICAgICB0aGlzLl9vbkRyb3AgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRHJvcCA9IHRoaXMuX29uRHJvcC5ldmVudDtcbiAgICAgICAgdGhpcy5fb25Hcm91cERyYWdTdGFydCA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25Hcm91cERyYWdTdGFydCA9IHRoaXMuX29uR3JvdXBEcmFnU3RhcnQuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uV2lsbFNob3dPdmVybGF5ID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbldpbGxTaG93T3ZlcmxheSA9IHRoaXMuX29uV2lsbFNob3dPdmVybGF5LmV2ZW50O1xuICAgICAgICB0aGlzLl9lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NOYW1lID0gJ2R2LXRhYnMtYW5kLWFjdGlvbnMtY29udGFpbmVyJztcbiAgICAgICAgdG9nZ2xlQ2xhc3ModGhpcy5fZWxlbWVudCwgJ2R2LWZ1bGwtd2lkdGgtc2luZ2xlLXRhYicsIHRoaXMuYWNjZXNzb3Iub3B0aW9ucy5zaW5nbGVUYWJNb2RlID09PSAnZnVsbHdpZHRoJyk7XG4gICAgICAgIHRoaXMucmlnaHRBY3Rpb25zQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRoaXMucmlnaHRBY3Rpb25zQ29udGFpbmVyLmNsYXNzTmFtZSA9ICdkdi1yaWdodC1hY3Rpb25zLWNvbnRhaW5lcic7XG4gICAgICAgIHRoaXMubGVmdEFjdGlvbnNDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy5sZWZ0QWN0aW9uc0NvbnRhaW5lci5jbGFzc05hbWUgPSAnZHYtbGVmdC1hY3Rpb25zLWNvbnRhaW5lcic7XG4gICAgICAgIHRoaXMucHJlQWN0aW9uc0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0aGlzLnByZUFjdGlvbnNDb250YWluZXIuY2xhc3NOYW1lID0gJ2R2LXByZS1hY3Rpb25zLWNvbnRhaW5lcic7XG4gICAgICAgIHRoaXMudGFicyA9IG5ldyBUYWJzKGdyb3VwLCBhY2Nlc3Nvciwge1xuICAgICAgICAgICAgc2hvd1RhYnNPdmVyZmxvd0NvbnRyb2w6ICFhY2Nlc3Nvci5vcHRpb25zLmRpc2FibGVUYWJzT3ZlcmZsb3dMaXN0LFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy52b2lkQ29udGFpbmVyID0gbmV3IFZvaWRDb250YWluZXIodGhpcy5hY2Nlc3NvciwgdGhpcy5ncm91cCk7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5wcmVBY3Rpb25zQ29udGFpbmVyKTtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLnRhYnMuZWxlbWVudCk7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5sZWZ0QWN0aW9uc0NvbnRhaW5lcik7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy52b2lkQ29udGFpbmVyLmVsZW1lbnQpO1xuICAgICAgICB0aGlzLl9lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMucmlnaHRBY3Rpb25zQ29udGFpbmVyKTtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyh0aGlzLnRhYnMub25Ecm9wKChlKSA9PiB0aGlzLl9vbkRyb3AuZmlyZShlKSksIHRoaXMudGFicy5vbldpbGxTaG93T3ZlcmxheSgoZSkgPT4gdGhpcy5fb25XaWxsU2hvd092ZXJsYXkuZmlyZShlKSksIGFjY2Vzc29yLm9uRGlkT3B0aW9uc0NoYW5nZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnRhYnMuc2hvd1RhYnNPdmVyZmxvd0NvbnRyb2wgPVxuICAgICAgICAgICAgICAgICFhY2Nlc3Nvci5vcHRpb25zLmRpc2FibGVUYWJzT3ZlcmZsb3dMaXN0O1xuICAgICAgICB9KSwgdGhpcy50YWJzLm9uT3ZlcmZsb3dUYWJzQ2hhbmdlKChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy50b2dnbGVEcm9wZG93bihldmVudCk7XG4gICAgICAgIH0pLCB0aGlzLnRhYnMsIHRoaXMuX29uV2lsbFNob3dPdmVybGF5LCB0aGlzLl9vbkRyb3AsIHRoaXMuX29uR3JvdXBEcmFnU3RhcnQsIHRoaXMudm9pZENvbnRhaW5lciwgdGhpcy52b2lkQ29udGFpbmVyLm9uRHJhZ1N0YXJ0KChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25Hcm91cERyYWdTdGFydC5maXJlKHtcbiAgICAgICAgICAgICAgICBuYXRpdmVFdmVudDogZXZlbnQsXG4gICAgICAgICAgICAgICAgZ3JvdXA6IHRoaXMuZ3JvdXAsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSksIHRoaXMudm9pZENvbnRhaW5lci5vbkRyb3AoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9vbkRyb3AuZmlyZSh7XG4gICAgICAgICAgICAgICAgZXZlbnQ6IGV2ZW50Lm5hdGl2ZUV2ZW50LFxuICAgICAgICAgICAgICAgIGluZGV4OiB0aGlzLnRhYnMuc2l6ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KSwgdGhpcy52b2lkQ29udGFpbmVyLm9uV2lsbFNob3dPdmVybGF5KChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25XaWxsU2hvd092ZXJsYXkuZmlyZShuZXcgV2lsbFNob3dPdmVybGF5TG9jYXRpb25FdmVudChldmVudCwge1xuICAgICAgICAgICAgICAgIGtpbmQ6ICdoZWFkZXJfc3BhY2UnLFxuICAgICAgICAgICAgICAgIHBhbmVsOiB0aGlzLmdyb3VwLmFjdGl2ZVBhbmVsLFxuICAgICAgICAgICAgICAgIGFwaTogdGhpcy5hY2Nlc3Nvci5hcGksXG4gICAgICAgICAgICAgICAgZ3JvdXA6IHRoaXMuZ3JvdXAsXG4gICAgICAgICAgICAgICAgZ2V0RGF0YTogZ2V0UGFuZWxEYXRhLFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSwgYWRkRGlzcG9zYWJsZUxpc3RlbmVyKHRoaXMudm9pZENvbnRhaW5lci5lbGVtZW50LCAncG9pbnRlcmRvd24nLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaXNGbG9hdGluZ0dyb3Vwc0VuYWJsZWQgPSAhdGhpcy5hY2Nlc3Nvci5vcHRpb25zLmRpc2FibGVGbG9hdGluZ0dyb3VwcztcbiAgICAgICAgICAgIGlmIChpc0Zsb2F0aW5nR3JvdXBzRW5hYmxlZCAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LnNoaWZ0S2V5ICYmXG4gICAgICAgICAgICAgICAgdGhpcy5ncm91cC5hcGkubG9jYXRpb24udHlwZSAhPT0gJ2Zsb2F0aW5nJykge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgeyB0b3AsIGxlZnQgfSA9IHRoaXMuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHRvcDogcm9vdFRvcCwgbGVmdDogcm9vdExlZnQgfSA9IHRoaXMuYWNjZXNzb3IuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFjY2Vzc29yLmFkZEZsb2F0aW5nR3JvdXAodGhpcy5ncm91cCwge1xuICAgICAgICAgICAgICAgICAgICB4OiBsZWZ0IC0gcm9vdExlZnQgKyAyMCxcbiAgICAgICAgICAgICAgICAgICAgeTogdG9wIC0gcm9vdFRvcCArIDIwLFxuICAgICAgICAgICAgICAgICAgICBpbkRyYWdNb2RlOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgfVxuICAgIHNob3coKSB7XG4gICAgICAgIGlmICghdGhpcy5oaWRkZW4pIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJyc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaGlkZSgpIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIH1cbiAgICBzZXRSaWdodEFjdGlvbnNFbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgICAgaWYgKHRoaXMucmlnaHRBY3Rpb25zID09PSBlbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucmlnaHRBY3Rpb25zKSB7XG4gICAgICAgICAgICB0aGlzLnJpZ2h0QWN0aW9ucy5yZW1vdmUoKTtcbiAgICAgICAgICAgIHRoaXMucmlnaHRBY3Rpb25zID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLnJpZ2h0QWN0aW9uc0NvbnRhaW5lci5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgICAgICAgICAgIHRoaXMucmlnaHRBY3Rpb25zID0gZWxlbWVudDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXRMZWZ0QWN0aW9uc0VsZW1lbnQoZWxlbWVudCkge1xuICAgICAgICBpZiAodGhpcy5sZWZ0QWN0aW9ucyA9PT0gZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmxlZnRBY3Rpb25zKSB7XG4gICAgICAgICAgICB0aGlzLmxlZnRBY3Rpb25zLnJlbW92ZSgpO1xuICAgICAgICAgICAgdGhpcy5sZWZ0QWN0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5sZWZ0QWN0aW9uc0NvbnRhaW5lci5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgICAgICAgICAgIHRoaXMubGVmdEFjdGlvbnMgPSBlbGVtZW50O1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldFByZWZpeEFjdGlvbnNFbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgICAgaWYgKHRoaXMucHJlQWN0aW9ucyA9PT0gZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnByZUFjdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMucHJlQWN0aW9ucy5yZW1vdmUoKTtcbiAgICAgICAgICAgIHRoaXMucHJlQWN0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5wcmVBY3Rpb25zQ29udGFpbmVyLmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICAgICAgICAgICAgdGhpcy5wcmVBY3Rpb25zID0gZWxlbWVudDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpc0FjdGl2ZSh0YWIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGFicy5pc0FjdGl2ZSh0YWIpO1xuICAgIH1cbiAgICBpbmRleE9mKGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRhYnMuaW5kZXhPZihpZCk7XG4gICAgfVxuICAgIHNldEFjdGl2ZShfaXNHcm91cEFjdGl2ZSkge1xuICAgICAgICAvLyBub29wXG4gICAgfVxuICAgIGRlbGV0ZShpZCkge1xuICAgICAgICB0aGlzLnRhYnMuZGVsZXRlKGlkKTtcbiAgICAgICAgdGhpcy51cGRhdGVDbGFzc25hbWVzKCk7XG4gICAgfVxuICAgIHNldEFjdGl2ZVBhbmVsKHBhbmVsKSB7XG4gICAgICAgIHRoaXMudGFicy5zZXRBY3RpdmVQYW5lbChwYW5lbCk7XG4gICAgfVxuICAgIG9wZW5QYW5lbChwYW5lbCwgaW5kZXggPSB0aGlzLnRhYnMuc2l6ZSkge1xuICAgICAgICB0aGlzLnRhYnMub3BlblBhbmVsKHBhbmVsLCBpbmRleCk7XG4gICAgICAgIHRoaXMudXBkYXRlQ2xhc3NuYW1lcygpO1xuICAgIH1cbiAgICBjbG9zZVBhbmVsKHBhbmVsKSB7XG4gICAgICAgIHRoaXMuZGVsZXRlKHBhbmVsLmlkKTtcbiAgICB9XG4gICAgdXBkYXRlQ2xhc3NuYW1lcygpIHtcbiAgICAgICAgdG9nZ2xlQ2xhc3ModGhpcy5fZWxlbWVudCwgJ2R2LXNpbmdsZS10YWInLCB0aGlzLnNpemUgPT09IDEpO1xuICAgIH1cbiAgICB0b2dnbGVEcm9wZG93bihvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHRhYnMgPSBvcHRpb25zLnJlc2V0ID8gW10gOiBvcHRpb25zLnRhYnM7XG4gICAgICAgIHRoaXMuX292ZXJmbG93VGFicyA9IHRhYnM7XG4gICAgICAgIGlmICh0aGlzLl9vdmVyZmxvd1RhYnMubGVuZ3RoID4gMCAmJiB0aGlzLmRyb3Bkb3duUGFydCkge1xuICAgICAgICAgICAgdGhpcy5kcm9wZG93blBhcnQudXBkYXRlKHsgdGFiczogdGFicy5sZW5ndGggfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX292ZXJmbG93VGFicy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuX2Ryb3Bkb3duRGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgcm9vdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICByb290LmNsYXNzTmFtZSA9ICdkdi10YWJzLW92ZXJmbG93LWRyb3Bkb3duLXJvb3QnO1xuICAgICAgICBjb25zdCBwYXJ0ID0gY3JlYXRlRHJvcGRvd25FbGVtZW50SGFuZGxlKCk7XG4gICAgICAgIHBhcnQudXBkYXRlKHsgdGFiczogdGFicy5sZW5ndGggfSk7XG4gICAgICAgIHRoaXMuZHJvcGRvd25QYXJ0ID0gcGFydDtcbiAgICAgICAgcm9vdC5hcHBlbmRDaGlsZChwYXJ0LmVsZW1lbnQpO1xuICAgICAgICB0aGlzLnJpZ2h0QWN0aW9uc0NvbnRhaW5lci5wcmVwZW5kKHJvb3QpO1xuICAgICAgICB0aGlzLl9kcm9wZG93bkRpc3Bvc2FibGUudmFsdWUgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZShEaXNwb3NhYmxlLmZyb20oKCkgPT4ge1xuICAgICAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgICAgIHJvb3QucmVtb3ZlKCk7XG4gICAgICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmRyb3Bkb3duUGFydCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmRpc3Bvc2UpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hKTtcbiAgICAgICAgICAgIHRoaXMuZHJvcGRvd25QYXJ0ID0gbnVsbDtcbiAgICAgICAgfSksIGFkZERpc3Bvc2FibGVMaXN0ZW5lcihyb290LCAncG9pbnRlcmRvd24nLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH0sIHsgY2FwdHVyZTogdHJ1ZSB9KSwgYWRkRGlzcG9zYWJsZUxpc3RlbmVyKHJvb3QsICdjbGljaycsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGVsLnN0eWxlLm92ZXJmbG93ID0gJ2F1dG8nO1xuICAgICAgICAgICAgZWwuY2xhc3NOYW1lID0gJ2R2LXRhYnMtb3ZlcmZsb3ctY29udGFpbmVyJztcbiAgICAgICAgICAgIGZvciAoY29uc3QgdGFiIG9mIHRoaXMudGFicy50YWJzLmZpbHRlcigodGFiKSA9PiB0aGlzLl9vdmVyZmxvd1RhYnMuaW5jbHVkZXModGFiLnBhbmVsLmlkKSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYW5lbE9iamVjdCA9IHRoaXMuZ3JvdXAucGFuZWxzLmZpbmQoKHBhbmVsKSA9PiBwYW5lbCA9PT0gdGFiLnBhbmVsKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0YWJDb21wb25lbnQgPSBwYW5lbE9iamVjdC52aWV3LmNyZWF0ZVRhYlJlbmRlcmVyKCdoZWFkZXJPdmVyZmxvdycpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gdGFiQ29tcG9uZW50LmVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKHdyYXBwZXIsICdkdi10YWInLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyh3cmFwcGVyLCAnZHYtYWN0aXZlLXRhYicsIHBhbmVsT2JqZWN0LmFwaS5pc0FjdGl2ZSk7XG4gICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3Mod3JhcHBlciwgJ2R2LWluYWN0aXZlLXRhYicsICFwYW5lbE9iamVjdC5hcGkuaXNBY3RpdmUpO1xuICAgICAgICAgICAgICAgIHdyYXBwZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hY2Nlc3Nvci5wb3B1cFNlcnZpY2UuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YWIuZWxlbWVudC5zY3JvbGxJbnRvVmlldygpO1xuICAgICAgICAgICAgICAgICAgICB0YWIucGFuZWwuYXBpLnNldEFjdGl2ZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQoY2hpbGQpO1xuICAgICAgICAgICAgICAgIGVsLmFwcGVuZENoaWxkKHdyYXBwZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcmVsYXRpdmVQYXJlbnQgPSBmaW5kUmVsYXRpdmVaSW5kZXhQYXJlbnQocm9vdCk7XG4gICAgICAgICAgICB0aGlzLmFjY2Vzc29yLnBvcHVwU2VydmljZS5vcGVuUG9wb3ZlcihlbCwge1xuICAgICAgICAgICAgICAgIHg6IGV2ZW50LmNsaWVudFgsXG4gICAgICAgICAgICAgICAgeTogZXZlbnQuY2xpZW50WSxcbiAgICAgICAgICAgICAgICB6SW5kZXg6IChyZWxhdGl2ZVBhcmVudCA9PT0gbnVsbCB8fCByZWxhdGl2ZVBhcmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVsYXRpdmVQYXJlbnQuc3R5bGUuekluZGV4KVxuICAgICAgICAgICAgICAgICAgICA/IGBjYWxjKCR7cmVsYXRpdmVQYXJlbnQuc3R5bGUuekluZGV4fSAqIDIpYFxuICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIHVwZGF0ZURyYWdBbmREcm9wU3RhdGUoKSB7XG4gICAgICAgIHRoaXMudGFicy51cGRhdGVEcmFnQW5kRHJvcFN0YXRlKCk7XG4gICAgICAgIHRoaXMudm9pZENvbnRhaW5lci51cGRhdGVEcmFnQW5kRHJvcFN0YXRlKCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgZ2V0UGFuZWxEYXRhIH0gZnJvbSAnLi4vLi4vLi4vZG5kL2RhdGFUcmFuc2Zlcic7XG5pbXBvcnQgeyBEcm9wdGFyZ2V0LCB9IGZyb20gJy4uLy4uLy4uL2RuZC9kcm9wdGFyZ2V0JztcbmltcG9ydCB7IEdyb3VwRHJhZ0hhbmRsZXIgfSBmcm9tICcuLi8uLi8uLi9kbmQvZ3JvdXBEcmFnSGFuZGxlcic7XG5pbXBvcnQgeyBhZGREaXNwb3NhYmxlTGlzdGVuZXIsIEVtaXR0ZXIgfSBmcm9tICcuLi8uLi8uLi9ldmVudHMnO1xuaW1wb3J0IHsgQ29tcG9zaXRlRGlzcG9zYWJsZSB9IGZyb20gJy4uLy4uLy4uL2xpZmVjeWNsZSc7XG5pbXBvcnQgeyB0b2dnbGVDbGFzcyB9IGZyb20gJy4uLy4uLy4uL2RvbSc7XG5leHBvcnQgY2xhc3MgVm9pZENvbnRhaW5lciBleHRlbmRzIENvbXBvc2l0ZURpc3Bvc2FibGUge1xuICAgIGdldCBlbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZWxlbWVudDtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoYWNjZXNzb3IsIGdyb3VwKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuYWNjZXNzb3IgPSBhY2Nlc3NvcjtcbiAgICAgICAgdGhpcy5ncm91cCA9IGdyb3VwO1xuICAgICAgICB0aGlzLl9vbkRyb3AgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRHJvcCA9IHRoaXMuX29uRHJvcC5ldmVudDtcbiAgICAgICAgdGhpcy5fb25EcmFnU3RhcnQgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRHJhZ1N0YXJ0ID0gdGhpcy5fb25EcmFnU3RhcnQuZXZlbnQ7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc05hbWUgPSAnZHYtdm9pZC1jb250YWluZXInO1xuICAgICAgICB0aGlzLl9lbGVtZW50LmRyYWdnYWJsZSA9ICF0aGlzLmFjY2Vzc29yLm9wdGlvbnMuZGlzYWJsZURuZDtcbiAgICAgICAgdG9nZ2xlQ2xhc3ModGhpcy5fZWxlbWVudCwgJ2R2LWRyYWdnYWJsZScsICF0aGlzLmFjY2Vzc29yLm9wdGlvbnMuZGlzYWJsZURuZCk7XG4gICAgICAgIHRoaXMuYWRkRGlzcG9zYWJsZXModGhpcy5fb25Ecm9wLCB0aGlzLl9vbkRyYWdTdGFydCwgYWRkRGlzcG9zYWJsZUxpc3RlbmVyKHRoaXMuX2VsZW1lbnQsICdwb2ludGVyZG93bicsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYWNjZXNzb3IuZG9TZXRHcm91cEFjdGl2ZSh0aGlzLmdyb3VwKTtcbiAgICAgICAgfSkpO1xuICAgICAgICB0aGlzLmhhbmRsZXIgPSBuZXcgR3JvdXBEcmFnSGFuZGxlcih0aGlzLl9lbGVtZW50LCBhY2Nlc3NvciwgZ3JvdXAsICEhdGhpcy5hY2Nlc3Nvci5vcHRpb25zLmRpc2FibGVEbmQpO1xuICAgICAgICB0aGlzLmRyb3BUYXJnZXQgPSBuZXcgRHJvcHRhcmdldCh0aGlzLl9lbGVtZW50LCB7XG4gICAgICAgICAgICBhY2NlcHRlZFRhcmdldFpvbmVzOiBbJ2NlbnRlciddLFxuICAgICAgICAgICAgY2FuRGlzcGxheU92ZXJsYXk6IChldmVudCwgcG9zaXRpb24pID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gZ2V0UGFuZWxEYXRhKCk7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEgJiYgdGhpcy5hY2Nlc3Nvci5pZCA9PT0gZGF0YS52aWV3SWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBncm91cC5tb2RlbC5jYW5EaXNwbGF5T3ZlcmxheShldmVudCwgcG9zaXRpb24sICdoZWFkZXJfc3BhY2UnKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRPdmVycmlkZVRhcmdldDogKCkgPT4geyB2YXIgX2E7IHJldHVybiAoX2EgPSBncm91cC5tb2RlbC5kcm9wVGFyZ2V0Q29udGFpbmVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubW9kZWw7IH0sXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm9uV2lsbFNob3dPdmVybGF5ID0gdGhpcy5kcm9wVGFyZ2V0Lm9uV2lsbFNob3dPdmVybGF5O1xuICAgICAgICB0aGlzLmFkZERpc3Bvc2FibGVzKHRoaXMuaGFuZGxlciwgdGhpcy5oYW5kbGVyLm9uRHJhZ1N0YXJ0KChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25EcmFnU3RhcnQuZmlyZShldmVudCk7XG4gICAgICAgIH0pLCB0aGlzLmRyb3BUYXJnZXQub25Ecm9wKChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25Ecm9wLmZpcmUoZXZlbnQpO1xuICAgICAgICB9KSwgdGhpcy5kcm9wVGFyZ2V0KTtcbiAgICB9XG4gICAgdXBkYXRlRHJhZ0FuZERyb3BTdGF0ZSgpIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5kcmFnZ2FibGUgPSAhdGhpcy5hY2Nlc3Nvci5vcHRpb25zLmRpc2FibGVEbmQ7XG4gICAgICAgIHRvZ2dsZUNsYXNzKHRoaXMuX2VsZW1lbnQsICdkdi1kcmFnZ2FibGUnLCAhdGhpcy5hY2Nlc3Nvci5vcHRpb25zLmRpc2FibGVEbmQpO1xuICAgICAgICB0aGlzLmhhbmRsZXIuc2V0RGlzYWJsZWQoISF0aGlzLmFjY2Vzc29yLm9wdGlvbnMuZGlzYWJsZURuZCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQ29tcG9zaXRlRGlzcG9zYWJsZSB9IGZyb20gJy4uLy4uLy4uL2xpZmVjeWNsZSc7XG5leHBvcnQgY2xhc3MgV2F0ZXJtYXJrIGV4dGVuZHMgQ29tcG9zaXRlRGlzcG9zYWJsZSB7XG4gICAgZ2V0IGVsZW1lbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbGVtZW50O1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTmFtZSA9ICdkdi13YXRlcm1hcmsnO1xuICAgIH1cbiAgICBpbml0KF9wYXJhbXMpIHtcbiAgICAgICAgLy8gbm9vcFxuICAgIH1cbn1cbiIsImltcG9ydCB7IERvY2t2aWV3UGFuZWwgfSBmcm9tICcuL2RvY2t2aWV3UGFuZWwnO1xuaW1wb3J0IHsgRG9ja3ZpZXdQYW5lbE1vZGVsIH0gZnJvbSAnLi9kb2Nrdmlld1BhbmVsTW9kZWwnO1xuaW1wb3J0IHsgRG9ja3ZpZXdBcGkgfSBmcm9tICcuLi9hcGkvY29tcG9uZW50LmFwaSc7XG5leHBvcnQgY2xhc3MgRGVmYXVsdERvY2t2aWV3RGVzZXJpYWx6aWVyIHtcbiAgICBjb25zdHJ1Y3RvcihhY2Nlc3Nvcikge1xuICAgICAgICB0aGlzLmFjY2Vzc29yID0gYWNjZXNzb3I7XG4gICAgfVxuICAgIGZyb21KU09OKHBhbmVsRGF0YSwgZ3JvdXApIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgY29uc3QgcGFuZWxJZCA9IHBhbmVsRGF0YS5pZDtcbiAgICAgICAgY29uc3QgcGFyYW1zID0gcGFuZWxEYXRhLnBhcmFtcztcbiAgICAgICAgY29uc3QgdGl0bGUgPSBwYW5lbERhdGEudGl0bGU7XG4gICAgICAgIGNvbnN0IHZpZXdEYXRhID0gcGFuZWxEYXRhLnZpZXc7XG4gICAgICAgIGNvbnN0IGNvbnRlbnRDb21wb25lbnQgPSB2aWV3RGF0YVxuICAgICAgICAgICAgPyB2aWV3RGF0YS5jb250ZW50LmlkXG4gICAgICAgICAgICA6IChfYSA9IHBhbmVsRGF0YS5jb250ZW50Q29tcG9uZW50KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAndW5rbm93bic7XG4gICAgICAgIGNvbnN0IHRhYkNvbXBvbmVudCA9IHZpZXdEYXRhXG4gICAgICAgICAgICA/IChfYiA9IHZpZXdEYXRhLnRhYikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmlkXG4gICAgICAgICAgICA6IHBhbmVsRGF0YS50YWJDb21wb25lbnQ7XG4gICAgICAgIGNvbnN0IHZpZXcgPSBuZXcgRG9ja3ZpZXdQYW5lbE1vZGVsKHRoaXMuYWNjZXNzb3IsIHBhbmVsSWQsIGNvbnRlbnRDb21wb25lbnQsIHRhYkNvbXBvbmVudCk7XG4gICAgICAgIGNvbnN0IHBhbmVsID0gbmV3IERvY2t2aWV3UGFuZWwocGFuZWxJZCwgY29udGVudENvbXBvbmVudCwgdGFiQ29tcG9uZW50LCB0aGlzLmFjY2Vzc29yLCBuZXcgRG9ja3ZpZXdBcGkodGhpcy5hY2Nlc3NvciksIGdyb3VwLCB2aWV3LCB7XG4gICAgICAgICAgICByZW5kZXJlcjogcGFuZWxEYXRhLnJlbmRlcmVyLFxuICAgICAgICAgICAgbWluaW11bVdpZHRoOiBwYW5lbERhdGEubWluaW11bVdpZHRoLFxuICAgICAgICAgICAgbWluaW11bUhlaWdodDogcGFuZWxEYXRhLm1pbmltdW1IZWlnaHQsXG4gICAgICAgICAgICBtYXhpbXVtV2lkdGg6IHBhbmVsRGF0YS5tYXhpbXVtV2lkdGgsXG4gICAgICAgICAgICBtYXhpbXVtSGVpZ2h0OiBwYW5lbERhdGEubWF4aW11bUhlaWdodCxcbiAgICAgICAgfSk7XG4gICAgICAgIHBhbmVsLmluaXQoe1xuICAgICAgICAgICAgdGl0bGU6IHRpdGxlICE9PSBudWxsICYmIHRpdGxlICE9PSB2b2lkIDAgPyB0aXRsZSA6IHBhbmVsSWQsXG4gICAgICAgICAgICBwYXJhbXM6IHBhcmFtcyAhPT0gbnVsbCAmJiBwYXJhbXMgIT09IHZvaWQgMCA/IHBhcmFtcyA6IHt9LFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHBhbmVsO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IGdldFJlbGF0aXZlTG9jYXRpb24sIGdldEdyaWRMb2NhdGlvbiwgb3J0aG9nb25hbCwgfSBmcm9tICcuLi9ncmlkdmlldy9ncmlkdmlldyc7XG5pbXBvcnQgeyBkaXJlY3Rpb25Ub1Bvc2l0aW9uLCBEcm9wdGFyZ2V0LCB9IGZyb20gJy4uL2RuZC9kcm9wdGFyZ2V0JztcbmltcG9ydCB7IHRhaWwsIHNlcXVlbmNlRXF1YWxzLCByZW1vdmUgfSBmcm9tICcuLi9hcnJheSc7XG5pbXBvcnQgeyBEb2Nrdmlld1BhbmVsIH0gZnJvbSAnLi9kb2Nrdmlld1BhbmVsJztcbmltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUsIERpc3Bvc2FibGUgfSBmcm9tICcuLi9saWZlY3ljbGUnO1xuaW1wb3J0IHsgRXZlbnQsIEVtaXR0ZXIsIGFkZERpc3Bvc2FibGVMaXN0ZW5lciB9IGZyb20gJy4uL2V2ZW50cyc7XG5pbXBvcnQgeyBXYXRlcm1hcmsgfSBmcm9tICcuL2NvbXBvbmVudHMvd2F0ZXJtYXJrL3dhdGVybWFyayc7XG5pbXBvcnQgeyBzZXF1ZW50aWFsTnVtYmVyR2VuZXJhdG9yIH0gZnJvbSAnLi4vbWF0aCc7XG5pbXBvcnQgeyBEZWZhdWx0RG9ja3ZpZXdEZXNlcmlhbHppZXIgfSBmcm9tICcuL2Rlc2VyaWFsaXplcic7XG5pbXBvcnQgeyBEb2Nrdmlld1VuaGFuZGxlZERyYWdPdmVyRXZlbnQsIGlzR3JvdXBPcHRpb25zV2l0aEdyb3VwLCBpc0dyb3VwT3B0aW9uc1dpdGhQYW5lbCwgaXNQYW5lbE9wdGlvbnNXaXRoR3JvdXAsIGlzUGFuZWxPcHRpb25zV2l0aFBhbmVsLCB9IGZyb20gJy4vb3B0aW9ucyc7XG5pbXBvcnQgeyBCYXNlR3JpZCwgdG9UYXJnZXQsIH0gZnJvbSAnLi4vZ3JpZHZpZXcvYmFzZUNvbXBvbmVudEdyaWR2aWV3JztcbmltcG9ydCB7IERvY2t2aWV3QXBpIH0gZnJvbSAnLi4vYXBpL2NvbXBvbmVudC5hcGknO1xuaW1wb3J0IHsgT3JpZW50YXRpb24gfSBmcm9tICcuLi9zcGxpdHZpZXcvc3BsaXR2aWV3JztcbmltcG9ydCB7IERvY2t2aWV3RGlkRHJvcEV2ZW50LCBEb2Nrdmlld1dpbGxEcm9wRXZlbnQsIH0gZnJvbSAnLi9kb2Nrdmlld0dyb3VwUGFuZWxNb2RlbCc7XG5pbXBvcnQgeyBXaWxsU2hvd092ZXJsYXlMb2NhdGlvbkV2ZW50IH0gZnJvbSAnLi9ldmVudHMnO1xuaW1wb3J0IHsgRG9ja3ZpZXdHcm91cFBhbmVsIH0gZnJvbSAnLi9kb2Nrdmlld0dyb3VwUGFuZWwnO1xuaW1wb3J0IHsgRG9ja3ZpZXdQYW5lbE1vZGVsIH0gZnJvbSAnLi9kb2Nrdmlld1BhbmVsTW9kZWwnO1xuaW1wb3J0IHsgZ2V0UGFuZWxEYXRhIH0gZnJvbSAnLi4vZG5kL2RhdGFUcmFuc2Zlcic7XG5pbXBvcnQgeyBPdmVybGF5IH0gZnJvbSAnLi4vb3ZlcmxheS9vdmVybGF5JztcbmltcG9ydCB7IGFkZFRlc3RJZCwgQ2xhc3NuYW1lcywgZ2V0RG9ja3ZpZXdUaGVtZSwgb25EaWRXaW5kb3dSZXNpemVFbmQsIG9uRGlkV2luZG93TW92ZUVuZCwgdG9nZ2xlQ2xhc3MsIHdhdGNoRWxlbWVudFJlc2l6ZSwgfSBmcm9tICcuLi9kb20nO1xuaW1wb3J0IHsgRG9ja3ZpZXdGbG9hdGluZ0dyb3VwUGFuZWwgfSBmcm9tICcuL2RvY2t2aWV3RmxvYXRpbmdHcm91cFBhbmVsJztcbmltcG9ydCB7IERFRkFVTFRfRkxPQVRJTkdfR1JPVVBfT1ZFUkZMT1dfU0laRSwgREVGQVVMVF9GTE9BVElOR19HUk9VUF9QT1NJVElPTiwgREVTRVJJQUxJWkFUSU9OX1BPUE9VVF9ERUxBWV9NUywgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgT3ZlcmxheVJlbmRlckNvbnRhaW5lciwgfSBmcm9tICcuLi9vdmVybGF5L292ZXJsYXlSZW5kZXJDb250YWluZXInO1xuaW1wb3J0IHsgUG9wb3V0V2luZG93IH0gZnJvbSAnLi4vcG9wb3V0V2luZG93JztcbmltcG9ydCB7IFN0cmljdEV2ZW50c1NlcXVlbmNpbmcgfSBmcm9tICcuL3N0cmljdEV2ZW50c1NlcXVlbmNpbmcnO1xuaW1wb3J0IHsgUG9wdXBTZXJ2aWNlIH0gZnJvbSAnLi9jb21wb25lbnRzL3BvcHVwU2VydmljZSc7XG5pbXBvcnQgeyBEcm9wVGFyZ2V0QW5jaG9yQ29udGFpbmVyIH0gZnJvbSAnLi4vZG5kL2Ryb3BUYXJnZXRBbmNob3JDb250YWluZXInO1xuaW1wb3J0IHsgdGhlbWVBYnlzcyB9IGZyb20gJy4vdGhlbWUnO1xuY29uc3QgREVGQVVMVF9ST09UX09WRVJMQVlfTU9ERUwgPSB7XG4gICAgYWN0aXZhdGlvblNpemU6IHsgdHlwZTogJ3BpeGVscycsIHZhbHVlOiAxMCB9LFxuICAgIHNpemU6IHsgdHlwZTogJ3BpeGVscycsIHZhbHVlOiAyMCB9LFxufTtcbmZ1bmN0aW9uIG1vdmVHcm91cFdpdGhvdXREZXN0cm95aW5nKG9wdGlvbnMpIHtcbiAgICBjb25zdCBhY3RpdmVQYW5lbCA9IG9wdGlvbnMuZnJvbS5hY3RpdmVQYW5lbDtcbiAgICBjb25zdCBwYW5lbHMgPSBbLi4ub3B0aW9ucy5mcm9tLnBhbmVsc10ubWFwKChwYW5lbCkgPT4ge1xuICAgICAgICBjb25zdCByZW1vdmVkUGFuZWwgPSBvcHRpb25zLmZyb20ubW9kZWwucmVtb3ZlUGFuZWwocGFuZWwpO1xuICAgICAgICBvcHRpb25zLmZyb20ubW9kZWwucmVuZGVyQ29udGFpbmVyLmRldGF0Y2gocGFuZWwpO1xuICAgICAgICByZXR1cm4gcmVtb3ZlZFBhbmVsO1xuICAgIH0pO1xuICAgIHBhbmVscy5mb3JFYWNoKChwYW5lbCkgPT4ge1xuICAgICAgICBvcHRpb25zLnRvLm1vZGVsLm9wZW5QYW5lbChwYW5lbCwge1xuICAgICAgICAgICAgc2tpcFNldEFjdGl2ZTogYWN0aXZlUGFuZWwgIT09IHBhbmVsLFxuICAgICAgICAgICAgc2tpcFNldEdyb3VwQWN0aXZlOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmV4cG9ydCBjbGFzcyBEb2Nrdmlld0NvbXBvbmVudCBleHRlbmRzIEJhc2VHcmlkIHtcbiAgICBnZXQgb3JpZW50YXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyaWR2aWV3Lm9yaWVudGF0aW9uO1xuICAgIH1cbiAgICBnZXQgdG90YWxQYW5lbHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhbmVscy5sZW5ndGg7XG4gICAgfVxuICAgIGdldCBwYW5lbHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyb3Vwcy5mbGF0TWFwKChncm91cCkgPT4gZ3JvdXAucGFuZWxzKTtcbiAgICB9XG4gICAgZ2V0IG9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vcHRpb25zO1xuICAgIH1cbiAgICBnZXQgYWN0aXZlUGFuZWwoKSB7XG4gICAgICAgIGNvbnN0IGFjdGl2ZUdyb3VwID0gdGhpcy5hY3RpdmVHcm91cDtcbiAgICAgICAgaWYgKCFhY3RpdmVHcm91cCkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWN0aXZlR3JvdXAuYWN0aXZlUGFuZWw7XG4gICAgfVxuICAgIGdldCByZW5kZXJlcigpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5vcHRpb25zLmRlZmF1bHRSZW5kZXJlcikgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJ29ubHlXaGVuVmlzaWJsZSc7XG4gICAgfVxuICAgIGdldCBhcGkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcGk7XG4gICAgfVxuICAgIGdldCBmbG9hdGluZ0dyb3VwcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Zsb2F0aW5nR3JvdXBzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBhbGwgcG9wb3V0IGdyb3VwcyBmcm9tIHRoZSBsYXN0IGZyb21KU09OIGNhbGwgYXJlIHJlc3RvcmVkLlxuICAgICAqIFVzZWZ1bCBmb3IgdGVzdHMgdGhhdCBuZWVkIHRvIHdhaXQgZm9yIGRlbGF5ZWQgcG9wb3V0IGNyZWF0aW9uLlxuICAgICAqL1xuICAgIGdldCBwb3BvdXRSZXN0b3JhdGlvblByb21pc2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wb3BvdXRSZXN0b3JhdGlvblByb21pc2U7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lciwgb3B0aW9ucykge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgc3VwZXIoY29udGFpbmVyLCB7XG4gICAgICAgICAgICBwcm9wb3J0aW9uYWxMYXlvdXQ6IHRydWUsXG4gICAgICAgICAgICBvcmllbnRhdGlvbjogT3JpZW50YXRpb24uSE9SSVpPTlRBTCxcbiAgICAgICAgICAgIHN0eWxlczogb3B0aW9ucy5oaWRlQm9yZGVyc1xuICAgICAgICAgICAgICAgID8geyBzZXBhcmF0b3JCb3JkZXI6ICd0cmFuc3BhcmVudCcgfVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZGlzYWJsZUF1dG9SZXNpemluZzogb3B0aW9ucy5kaXNhYmxlQXV0b1Jlc2l6aW5nLFxuICAgICAgICAgICAgbG9ja2VkOiBvcHRpb25zLmxvY2tlZCxcbiAgICAgICAgICAgIG1hcmdpbjogKF9iID0gKF9hID0gb3B0aW9ucy50aGVtZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmdhcCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogMCxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogb3B0aW9ucy5jbGFzc05hbWUsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5leHRHcm91cElkID0gc2VxdWVudGlhbE51bWJlckdlbmVyYXRvcigpO1xuICAgICAgICB0aGlzLl9kZXNlcmlhbGl6ZXIgPSBuZXcgRGVmYXVsdERvY2t2aWV3RGVzZXJpYWx6aWVyKHRoaXMpO1xuICAgICAgICB0aGlzLl93YXRlcm1hcmsgPSBudWxsO1xuICAgICAgICB0aGlzLl9vbldpbGxEcmFnUGFuZWwgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uV2lsbERyYWdQYW5lbCA9IHRoaXMuX29uV2lsbERyYWdQYW5lbC5ldmVudDtcbiAgICAgICAgdGhpcy5fb25XaWxsRHJhZ0dyb3VwID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbldpbGxEcmFnR3JvdXAgPSB0aGlzLl9vbldpbGxEcmFnR3JvdXAuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uRGlkRHJvcCA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWREcm9wID0gdGhpcy5fb25EaWREcm9wLmV2ZW50O1xuICAgICAgICB0aGlzLl9vbldpbGxEcm9wID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbldpbGxEcm9wID0gdGhpcy5fb25XaWxsRHJvcC5ldmVudDtcbiAgICAgICAgdGhpcy5fb25XaWxsU2hvd092ZXJsYXkgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uV2lsbFNob3dPdmVybGF5ID0gdGhpcy5fb25XaWxsU2hvd092ZXJsYXkuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uVW5oYW5kbGVkRHJhZ092ZXJFdmVudCA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25VbmhhbmRsZWREcmFnT3ZlckV2ZW50ID0gdGhpcy5fb25VbmhhbmRsZWREcmFnT3ZlckV2ZW50LmV2ZW50O1xuICAgICAgICB0aGlzLl9vbkRpZFJlbW92ZVBhbmVsID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZFJlbW92ZVBhbmVsID0gdGhpcy5fb25EaWRSZW1vdmVQYW5lbC5ldmVudDtcbiAgICAgICAgdGhpcy5fb25EaWRBZGRQYW5lbCA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRBZGRQYW5lbCA9IHRoaXMuX29uRGlkQWRkUGFuZWwuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uRGlkUG9wb3V0R3JvdXBTaXplQ2hhbmdlID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZFBvcG91dEdyb3VwU2l6ZUNoYW5nZSA9IHRoaXMuX29uRGlkUG9wb3V0R3JvdXBTaXplQ2hhbmdlLmV2ZW50O1xuICAgICAgICB0aGlzLl9vbkRpZFBvcG91dEdyb3VwUG9zaXRpb25DaGFuZ2UgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRGlkUG9wb3V0R3JvdXBQb3NpdGlvbkNoYW5nZSA9IHRoaXMuX29uRGlkUG9wb3V0R3JvdXBQb3NpdGlvbkNoYW5nZS5ldmVudDtcbiAgICAgICAgdGhpcy5fb25EaWRPcGVuUG9wb3V0V2luZG93RmFpbCA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRPcGVuUG9wb3V0V2luZG93RmFpbCA9IHRoaXMuX29uRGlkT3BlblBvcG91dFdpbmRvd0ZhaWwuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uRGlkTGF5b3V0RnJvbUpTT04gPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRGlkTGF5b3V0RnJvbUpTT04gPSB0aGlzLl9vbkRpZExheW91dEZyb21KU09OLmV2ZW50O1xuICAgICAgICB0aGlzLl9vbkRpZEFjdGl2ZVBhbmVsQ2hhbmdlID0gbmV3IEVtaXR0ZXIoeyByZXBsYXk6IHRydWUgfSk7XG4gICAgICAgIHRoaXMub25EaWRBY3RpdmVQYW5lbENoYW5nZSA9IHRoaXMuX29uRGlkQWN0aXZlUGFuZWxDaGFuZ2UuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uRGlkTW92ZVBhbmVsID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZE1vdmVQYW5lbCA9IHRoaXMuX29uRGlkTW92ZVBhbmVsLmV2ZW50O1xuICAgICAgICB0aGlzLl9vbkRpZE1heGltaXplZEdyb3VwQ2hhbmdlID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZE1heGltaXplZEdyb3VwQ2hhbmdlID0gdGhpcy5fb25EaWRNYXhpbWl6ZWRHcm91cENoYW5nZS5ldmVudDtcbiAgICAgICAgdGhpcy5fZmxvYXRpbmdHcm91cHMgPSBbXTtcbiAgICAgICAgdGhpcy5fcG9wb3V0R3JvdXBzID0gW107XG4gICAgICAgIHRoaXMuX3BvcG91dFJlc3RvcmF0aW9uUHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICB0aGlzLl9vbkRpZFJlbW92ZUdyb3VwID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZFJlbW92ZUdyb3VwID0gdGhpcy5fb25EaWRSZW1vdmVHcm91cC5ldmVudDtcbiAgICAgICAgdGhpcy5fb25EaWRBZGRHcm91cCA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRBZGRHcm91cCA9IHRoaXMuX29uRGlkQWRkR3JvdXAuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uRGlkT3B0aW9uc0NoYW5nZSA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRPcHRpb25zQ2hhbmdlID0gdGhpcy5fb25EaWRPcHRpb25zQ2hhbmdlLmV2ZW50O1xuICAgICAgICB0aGlzLl9vbkRpZEFjdGl2ZUdyb3VwQ2hhbmdlID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZEFjdGl2ZUdyb3VwQ2hhbmdlID0gdGhpcy5fb25EaWRBY3RpdmVHcm91cENoYW5nZS5ldmVudDtcbiAgICAgICAgdGhpcy5fbW92aW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLnBvcHVwU2VydmljZSA9IG5ldyBQb3B1cFNlcnZpY2UodGhpcy5lbGVtZW50KTtcbiAgICAgICAgdGhpcy5fdGhlbWVDbGFzc25hbWVzID0gbmV3IENsYXNzbmFtZXModGhpcy5lbGVtZW50KTtcbiAgICAgICAgdGhpcy5fYXBpID0gbmV3IERvY2t2aWV3QXBpKHRoaXMpO1xuICAgICAgICB0aGlzLnJvb3REcm9wVGFyZ2V0Q29udGFpbmVyID0gbmV3IERyb3BUYXJnZXRBbmNob3JDb250YWluZXIodGhpcy5lbGVtZW50LCB7IGRpc2FibGVkOiB0cnVlIH0pO1xuICAgICAgICB0aGlzLm92ZXJsYXlSZW5kZXJDb250YWluZXIgPSBuZXcgT3ZlcmxheVJlbmRlckNvbnRhaW5lcih0aGlzLmdyaWR2aWV3LmVsZW1lbnQsIHRoaXMpO1xuICAgICAgICB0aGlzLl9yb290RHJvcFRhcmdldCA9IG5ldyBEcm9wdGFyZ2V0KHRoaXMuZWxlbWVudCwge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiAnZHYtZHJvcC10YXJnZXQtZWRnZScsXG4gICAgICAgICAgICBjYW5EaXNwbGF5T3ZlcmxheTogKGV2ZW50LCBwb3NpdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBnZXRQYW5lbERhdGEoKTtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS52aWV3SWQgIT09IHRoaXMuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocG9zaXRpb24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjZW50ZXIgZHJvcCB0YXJnZXQgaXMgb25seSBhbGxvd2VkIGlmIHRoZXJlIGFyZSBubyBwYW5lbHMgaW4gdGhlIGdyaWRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZsb2F0aW5nIHBhbmVscyBhcmUgYWxsb3dlZFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JpZHZpZXcubGVuZ3RoID09PSAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocG9zaXRpb24gPT09ICdjZW50ZXInICYmIHRoaXMuZ3JpZHZpZXcubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBmb3IgZXh0ZXJuYWwgZXZlbnRzIG9ubHkgc2hvdyB0aGUgZm91ci1jb3JuZXIgZHJhZyBvdmVybGF5cywgZGlzYWJsZVxuICAgICAgICAgICAgICAgICAgICAgKiB0aGUgY2VudGVyIHBvc2l0aW9uIHNvIHRoYXQgZXh0ZXJuYWwgZHJhZyBldmVudHMgY2FuIGZhbGwgdGhyb3VnaCB0byB0aGUgZ3JvdXBcbiAgICAgICAgICAgICAgICAgICAgICogYW5kIHBhbmVsIGRyb3AgdGFyZ2V0IGhhbmRsZXJzXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGZpcmVkRXZlbnQgPSBuZXcgRG9ja3ZpZXdVbmhhbmRsZWREcmFnT3ZlckV2ZW50KGV2ZW50LCAnZWRnZScsIHBvc2l0aW9uLCBnZXRQYW5lbERhdGEpO1xuICAgICAgICAgICAgICAgIHRoaXMuX29uVW5oYW5kbGVkRHJhZ092ZXJFdmVudC5maXJlKGZpcmVkRXZlbnQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmaXJlZEV2ZW50LmlzQWNjZXB0ZWQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYWNjZXB0ZWRUYXJnZXRab25lczogWyd0b3AnLCAnYm90dG9tJywgJ2xlZnQnLCAncmlnaHQnLCAnY2VudGVyJ10sXG4gICAgICAgICAgICBvdmVybGF5TW9kZWw6IChfYyA9IG9wdGlvbnMucm9vdE92ZXJsYXlNb2RlbCkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogREVGQVVMVF9ST09UX09WRVJMQVlfTU9ERUwsXG4gICAgICAgICAgICBnZXRPdmVycmlkZVRhcmdldDogKCkgPT4geyB2YXIgX2E7IHJldHVybiAoX2EgPSB0aGlzLnJvb3REcm9wVGFyZ2V0Q29udGFpbmVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubW9kZWw7IH0sXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnVwZGF0ZURyb3BUYXJnZXRNb2RlbChvcHRpb25zKTtcbiAgICAgICAgdG9nZ2xlQ2xhc3ModGhpcy5ncmlkdmlldy5lbGVtZW50LCAnZHYtZG9ja3ZpZXcnLCB0cnVlKTtcbiAgICAgICAgdG9nZ2xlQ2xhc3ModGhpcy5lbGVtZW50LCAnZHYtZGVidWcnLCAhIW9wdGlvbnMuZGVidWcpO1xuICAgICAgICB0aGlzLnVwZGF0ZVRoZW1lKCk7XG4gICAgICAgIHRoaXMudXBkYXRlV2F0ZXJtYXJrKCk7XG4gICAgICAgIGlmIChvcHRpb25zLmRlYnVnKSB7XG4gICAgICAgICAgICB0aGlzLmFkZERpc3Bvc2FibGVzKG5ldyBTdHJpY3RFdmVudHNTZXF1ZW5jaW5nKHRoaXMpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFkZERpc3Bvc2FibGVzKHRoaXMucm9vdERyb3BUYXJnZXRDb250YWluZXIsIHRoaXMub3ZlcmxheVJlbmRlckNvbnRhaW5lciwgdGhpcy5fb25XaWxsRHJhZ1BhbmVsLCB0aGlzLl9vbldpbGxEcmFnR3JvdXAsIHRoaXMuX29uV2lsbFNob3dPdmVybGF5LCB0aGlzLl9vbkRpZEFjdGl2ZVBhbmVsQ2hhbmdlLCB0aGlzLl9vbkRpZEFkZFBhbmVsLCB0aGlzLl9vbkRpZFJlbW92ZVBhbmVsLCB0aGlzLl9vbkRpZExheW91dEZyb21KU09OLCB0aGlzLl9vbkRpZERyb3AsIHRoaXMuX29uV2lsbERyb3AsIHRoaXMuX29uRGlkTW92ZVBhbmVsLCB0aGlzLl9vbkRpZEFkZEdyb3VwLCB0aGlzLl9vbkRpZFJlbW92ZUdyb3VwLCB0aGlzLl9vbkRpZEFjdGl2ZUdyb3VwQ2hhbmdlLCB0aGlzLl9vblVuaGFuZGxlZERyYWdPdmVyRXZlbnQsIHRoaXMuX29uRGlkTWF4aW1pemVkR3JvdXBDaGFuZ2UsIHRoaXMuX29uRGlkT3B0aW9uc0NoYW5nZSwgdGhpcy5fb25EaWRQb3BvdXRHcm91cFNpemVDaGFuZ2UsIHRoaXMuX29uRGlkUG9wb3V0R3JvdXBQb3NpdGlvbkNoYW5nZSwgdGhpcy5fb25EaWRPcGVuUG9wb3V0V2luZG93RmFpbCwgdGhpcy5vbkRpZFZpZXdWaXNpYmlsaXR5Q2hhbmdlTWljcm9UYXNrUXVldWUoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVXYXRlcm1hcmsoKTtcbiAgICAgICAgfSksIHRoaXMub25EaWRBZGQoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX21vdmluZykge1xuICAgICAgICAgICAgICAgIHRoaXMuX29uRGlkQWRkR3JvdXAuZmlyZShldmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLCB0aGlzLm9uRGlkUmVtb3ZlKChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9tb3ZpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vbkRpZFJlbW92ZUdyb3VwLmZpcmUoZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSwgdGhpcy5vbkRpZEFjdGl2ZUNoYW5nZSgoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fbW92aW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb25EaWRBY3RpdmVHcm91cENoYW5nZS5maXJlKGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksIHRoaXMub25EaWRNYXhpbWl6ZWRDaGFuZ2UoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9vbkRpZE1heGltaXplZEdyb3VwQ2hhbmdlLmZpcmUoe1xuICAgICAgICAgICAgICAgIGdyb3VwOiBldmVudC5wYW5lbCxcbiAgICAgICAgICAgICAgICBpc01heGltaXplZDogZXZlbnQuaXNNYXhpbWl6ZWQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSksIEV2ZW50LmFueSh0aGlzLm9uRGlkQWRkLCB0aGlzLm9uRGlkUmVtb3ZlKSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVdhdGVybWFyaygpO1xuICAgICAgICB9KSwgRXZlbnQuYW55KHRoaXMub25EaWRBZGRQYW5lbCwgdGhpcy5vbkRpZFJlbW92ZVBhbmVsLCB0aGlzLm9uRGlkQWRkR3JvdXAsIHRoaXMub25EaWRSZW1vdmUsIHRoaXMub25EaWRNb3ZlUGFuZWwsIHRoaXMub25EaWRBY3RpdmVQYW5lbENoYW5nZSwgdGhpcy5vbkRpZFBvcG91dEdyb3VwUG9zaXRpb25DaGFuZ2UsIHRoaXMub25EaWRQb3BvdXRHcm91cFNpemVDaGFuZ2UpKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlck9uRGlkTGF5b3V0Q2hhbmdlLmZpcmUoKTtcbiAgICAgICAgfSksIERpc3Bvc2FibGUuZnJvbSgoKSA9PiB7XG4gICAgICAgICAgICAvLyBpdGVyYXRlIG92ZXIgYSBjb3B5IG9mIHRoZSBhcnJheSBzaW5jZSAuZGlzcG9zZSgpIG11dGF0ZXMgdGhlIG9yaWdpbmFsIGFycmF5XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGdyb3VwIG9mIFsuLi50aGlzLl9mbG9hdGluZ0dyb3Vwc10pIHtcbiAgICAgICAgICAgICAgICBncm91cC5kaXNwb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBpdGVyYXRlIG92ZXIgYSBjb3B5IG9mIHRoZSBhcnJheSBzaW5jZSAuZGlzcG9zZSgpIG11dGF0ZXMgdGhlIG9yaWdpbmFsIGFycmF5XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGdyb3VwIG9mIFsuLi50aGlzLl9wb3BvdXRHcm91cHNdKSB7XG4gICAgICAgICAgICAgICAgZ3JvdXAuZGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLCB0aGlzLl9yb290RHJvcFRhcmdldCwgdGhpcy5fcm9vdERyb3BUYXJnZXQub25XaWxsU2hvd092ZXJsYXkoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5ncmlkdmlldy5sZW5ndGggPiAwICYmIGV2ZW50LnBvc2l0aW9uID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgICAgIC8vIG9wdGlvbiBvbmx5IGF2YWlsYWJsZSB3aGVuIG5vIHBhbmVscyBpbiBwcmltYXJ5IGdyaWRcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9vbldpbGxTaG93T3ZlcmxheS5maXJlKG5ldyBXaWxsU2hvd092ZXJsYXlMb2NhdGlvbkV2ZW50KGV2ZW50LCB7XG4gICAgICAgICAgICAgICAga2luZDogJ2VkZ2UnLFxuICAgICAgICAgICAgICAgIHBhbmVsOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgYXBpOiB0aGlzLl9hcGksXG4gICAgICAgICAgICAgICAgZ3JvdXA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBnZXREYXRhOiBnZXRQYW5lbERhdGEsXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pLCB0aGlzLl9yb290RHJvcFRhcmdldC5vbkRyb3AoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBjb25zdCB3aWxsRHJvcEV2ZW50ID0gbmV3IERvY2t2aWV3V2lsbERyb3BFdmVudCh7XG4gICAgICAgICAgICAgICAgbmF0aXZlRXZlbnQ6IGV2ZW50Lm5hdGl2ZUV2ZW50LFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBldmVudC5wb3NpdGlvbixcbiAgICAgICAgICAgICAgICBwYW5lbDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGFwaTogdGhpcy5fYXBpLFxuICAgICAgICAgICAgICAgIGdyb3VwOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgZ2V0RGF0YTogZ2V0UGFuZWxEYXRhLFxuICAgICAgICAgICAgICAgIGtpbmQ6ICdlZGdlJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5fb25XaWxsRHJvcC5maXJlKHdpbGxEcm9wRXZlbnQpO1xuICAgICAgICAgICAgaWYgKHdpbGxEcm9wRXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBnZXRQYW5lbERhdGEoKTtcbiAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tb3ZlR3JvdXBPclBhbmVsKHtcbiAgICAgICAgICAgICAgICAgICAgZnJvbToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBJZDogZGF0YS5ncm91cElkLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFuZWxJZDogKF9hID0gZGF0YS5wYW5lbElkKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHRvOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cDogdGhpcy5vcnRob2dvbmFsaXplKGV2ZW50LnBvc2l0aW9uKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX29uRGlkRHJvcC5maXJlKG5ldyBEb2Nrdmlld0RpZERyb3BFdmVudCh7XG4gICAgICAgICAgICAgICAgICAgIG5hdGl2ZUV2ZW50OiBldmVudC5uYXRpdmVFdmVudCxcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGV2ZW50LnBvc2l0aW9uLFxuICAgICAgICAgICAgICAgICAgICBwYW5lbDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBhcGk6IHRoaXMuX2FwaSxcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgZ2V0RGF0YTogZ2V0UGFuZWxEYXRhLFxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksIHRoaXMuX3Jvb3REcm9wVGFyZ2V0KTtcbiAgICB9XG4gICAgc2V0VmlzaWJsZShwYW5lbCwgdmlzaWJsZSkge1xuICAgICAgICBzd2l0Y2ggKHBhbmVsLmFwaS5sb2NhdGlvbi50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdncmlkJzpcbiAgICAgICAgICAgICAgICBzdXBlci5zZXRWaXNpYmxlKHBhbmVsLCB2aXNpYmxlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2Zsb2F0aW5nJzoge1xuICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLmZsb2F0aW5nR3JvdXBzLmZpbmQoKGZsb2F0aW5nR3JvdXApID0+IGZsb2F0aW5nR3JvdXAuZ3JvdXAgPT09IHBhbmVsKTtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICBpdGVtLm92ZXJsYXkuc2V0VmlzaWJsZSh2aXNpYmxlKTtcbiAgICAgICAgICAgICAgICAgICAgcGFuZWwuYXBpLl9vbkRpZFZpc2liaWxpdHlDaGFuZ2UuZmlyZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc1Zpc2libGU6IHZpc2libGUsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ3BvcG91dCc6XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdkb2NrdmlldzogWW91IGNhbm5vdCBoaWRlIGEgZ3JvdXAgdGhhdCBpcyBpbiBhIHBvcG91dCB3aW5kb3cnKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBhZGRQb3BvdXRHcm91cChpdGVtVG9Qb3BvdXQsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZTtcbiAgICAgICAgaWYgKGl0ZW1Ub1BvcG91dCBpbnN0YW5jZW9mIERvY2t2aWV3UGFuZWwgJiZcbiAgICAgICAgICAgIGl0ZW1Ub1BvcG91dC5ncm91cC5zaXplID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hZGRQb3BvdXRHcm91cChpdGVtVG9Qb3BvdXQuZ3JvdXAsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRoZW1lID0gZ2V0RG9ja3ZpZXdUaGVtZSh0aGlzLmdyaWR2aWV3LmVsZW1lbnQpO1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5lbGVtZW50O1xuICAgICAgICBmdW5jdGlvbiBnZXRCb3goKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMucG9zaXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXRlbVRvUG9wb3V0IGluc3RhbmNlb2YgRG9ja3ZpZXdHcm91cFBhbmVsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW1Ub1BvcG91dC5lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGl0ZW1Ub1BvcG91dC5ncm91cCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtVG9Qb3BvdXQuZ3JvdXAuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJveCA9IGdldEJveCgpO1xuICAgICAgICBjb25zdCBncm91cElkID0gKF9iID0gKF9hID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm92ZXJyaWRlUG9wb3V0R3JvdXApID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pZCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogdGhpcy5nZXROZXh0R3JvdXBJZCgpO1xuICAgICAgICBjb25zdCBfd2luZG93ID0gbmV3IFBvcG91dFdpbmRvdyhgJHt0aGlzLmlkfS0ke2dyb3VwSWR9YCwgLy8gdW5pcXVlIGlkXG4gICAgICAgIHRoZW1lICE9PSBudWxsICYmIHRoZW1lICE9PSB2b2lkIDAgPyB0aGVtZSA6ICcnLCB7XG4gICAgICAgICAgICB1cmw6IChfZSA9IChfYyA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5wb3BvdXRVcmwpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IChfZCA9IHRoaXMub3B0aW9ucykgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLnBvcG91dFVybCkgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogJy9wb3BvdXQuaHRtbCcsXG4gICAgICAgICAgICBsZWZ0OiB3aW5kb3cuc2NyZWVuWCArIGJveC5sZWZ0LFxuICAgICAgICAgICAgdG9wOiB3aW5kb3cuc2NyZWVuWSArIGJveC50b3AsXG4gICAgICAgICAgICB3aWR0aDogYm94LndpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiBib3guaGVpZ2h0LFxuICAgICAgICAgICAgb25EaWRPcGVuOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMub25EaWRPcGVuLFxuICAgICAgICAgICAgb25XaWxsQ2xvc2U6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5vbldpbGxDbG9zZSxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHBvcG91dFdpbmRvd0Rpc3Bvc2FibGUgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZShfd2luZG93LCBfd2luZG93Lm9uRGlkQ2xvc2UoKCkgPT4ge1xuICAgICAgICAgICAgcG9wb3V0V2luZG93RGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuIF93aW5kb3dcbiAgICAgICAgICAgIC5vcGVuKClcbiAgICAgICAgICAgIC50aGVuKChwb3BvdXRDb250YWluZXIpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGlmIChfd2luZG93LmlzRGlzcG9zZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByZWZlcmVuY2VHcm91cCA9IChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMucmVmZXJlbmNlR3JvdXApXG4gICAgICAgICAgICAgICAgPyBvcHRpb25zLnJlZmVyZW5jZUdyb3VwXG4gICAgICAgICAgICAgICAgOiBpdGVtVG9Qb3BvdXQgaW5zdGFuY2VvZiBEb2Nrdmlld1BhbmVsXG4gICAgICAgICAgICAgICAgICAgID8gaXRlbVRvUG9wb3V0Lmdyb3VwXG4gICAgICAgICAgICAgICAgICAgIDogaXRlbVRvUG9wb3V0O1xuICAgICAgICAgICAgY29uc3QgcmVmZXJlbmNlTG9jYXRpb24gPSBpdGVtVG9Qb3BvdXQuYXBpLmxvY2F0aW9uLnR5cGU7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRoZSBncm91cCB0aGF0IGlzIGJlaW5nIGFkZGVkIGRvZXNuJ3QgYWxyZWFkeSBleGlzdCB3aXRoaW4gdGhlIERPTSwgdGhlIG1vc3QgbGlrZWx5IG9jY3VycmVuY2VcbiAgICAgICAgICAgICAqIG9mIHRoaXMgY2FzZSBpcyB3aGVuIGJlaW5nIGNhbGxlZCBmcm9tIHRoZSBgZnJvbUpTT04oLi4uKWAgbWV0aG9kXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnN0IGlzR3JvdXBBZGRlZFRvRG9tID0gcmVmZXJlbmNlR3JvdXAuZWxlbWVudC5wYXJlbnRFbGVtZW50ICE9PSBudWxsO1xuICAgICAgICAgICAgbGV0IGdyb3VwO1xuICAgICAgICAgICAgaWYgKCFpc0dyb3VwQWRkZWRUb0RvbSkge1xuICAgICAgICAgICAgICAgIGdyb3VwID0gcmVmZXJlbmNlR3JvdXA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMub3ZlcnJpZGVQb3BvdXRHcm91cCkge1xuICAgICAgICAgICAgICAgIGdyb3VwID0gb3B0aW9ucy5vdmVycmlkZVBvcG91dEdyb3VwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZ3JvdXAgPSB0aGlzLmNyZWF0ZUdyb3VwKHsgaWQ6IGdyb3VwSWQgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHBvcG91dENvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9vbkRpZEFkZEdyb3VwLmZpcmUoZ3JvdXApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwb3BvdXRDb250YWluZXIgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdkb2NrdmlldzogZmFpbGVkIHRvIGNyZWF0ZSBwb3BvdXQuIHBlcmhhcHMgeW91IG5lZWQgdG8gYWxsb3cgcG9wLXVwcyBmb3IgdGhpcyB3ZWJzaXRlJyk7XG4gICAgICAgICAgICAgICAgcG9wb3V0V2luZG93RGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fb25EaWRPcGVuUG9wb3V0V2luZG93RmFpbC5maXJlKCk7XG4gICAgICAgICAgICAgICAgLy8gaWYgdGhlIHBvcG91dCB3aW5kb3cgd2FzIGJsb2NrZWQsIHdlIG5lZWQgdG8gbW92ZSB0aGUgZ3JvdXAgYmFjayB0byB0aGUgcmVmZXJlbmNlIGdyb3VwXG4gICAgICAgICAgICAgICAgLy8gYW5kIHNldCBpdCB0byB2aXNpYmxlXG4gICAgICAgICAgICAgICAgdGhpcy5tb3ZpbmdMb2NrKCgpID0+IG1vdmVHcm91cFdpdGhvdXREZXN0cm95aW5nKHtcbiAgICAgICAgICAgICAgICAgICAgZnJvbTogZ3JvdXAsXG4gICAgICAgICAgICAgICAgICAgIHRvOiByZWZlcmVuY2VHcm91cCxcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgaWYgKCFyZWZlcmVuY2VHcm91cC5hcGkuaXNWaXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlZmVyZW5jZUdyb3VwLmFwaS5zZXRWaXNpYmxlKHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBncmVhZHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGdyZWFkeS5jbGFzc05hbWUgPSAnZHYtb3ZlcmxheS1yZW5kZXItY29udGFpbmVyJztcbiAgICAgICAgICAgIGNvbnN0IG92ZXJsYXlSZW5kZXJDb250YWluZXIgPSBuZXcgT3ZlcmxheVJlbmRlckNvbnRhaW5lcihncmVhZHksIHRoaXMpO1xuICAgICAgICAgICAgZ3JvdXAubW9kZWwucmVuZGVyQ29udGFpbmVyID0gb3ZlcmxheVJlbmRlckNvbnRhaW5lcjtcbiAgICAgICAgICAgIGdyb3VwLmxheW91dChfd2luZG93LndpbmRvdy5pbm5lcldpZHRoLCBfd2luZG93LndpbmRvdy5pbm5lckhlaWdodCk7XG4gICAgICAgICAgICBsZXQgZmxvYXRpbmdCb3g7XG4gICAgICAgICAgICBpZiAoIShvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMub3ZlcnJpZGVQb3BvdXRHcm91cCkgJiYgaXNHcm91cEFkZGVkVG9Eb20pIHtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbVRvUG9wb3V0IGluc3RhbmNlb2YgRG9ja3ZpZXdQYW5lbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vdmluZ0xvY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFuZWwgPSByZWZlcmVuY2VHcm91cC5tb2RlbC5yZW1vdmVQYW5lbChpdGVtVG9Qb3BvdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXAubW9kZWwub3BlblBhbmVsKHBhbmVsKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vdmluZ0xvY2soKCkgPT4gbW92ZUdyb3VwV2l0aG91dERlc3Ryb3lpbmcoe1xuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogcmVmZXJlbmNlR3JvdXAsXG4gICAgICAgICAgICAgICAgICAgICAgICB0bzogZ3JvdXAsXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChyZWZlcmVuY2VMb2NhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZ3JpZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmZXJlbmNlR3JvdXAuYXBpLnNldFZpc2libGUoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZmxvYXRpbmcnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncG9wb3V0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbG9hdGluZ0JveCA9IChfYSA9IHRoaXMuX2Zsb2F0aW5nR3JvdXBzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKCh2YWx1ZSkgPT4gdmFsdWUuZ3JvdXAuYXBpLmlkID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtVG9Qb3BvdXQuYXBpLmlkKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm92ZXJsYXkudG9KU09OKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVHcm91cChyZWZlcmVuY2VHcm91cCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwb3BvdXRDb250YWluZXIuY2xhc3NMaXN0LmFkZCgnZHYtZG9ja3ZpZXcnKTtcbiAgICAgICAgICAgIHBvcG91dENvbnRhaW5lci5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgICAgICAgICAgcG9wb3V0Q29udGFpbmVyLmFwcGVuZENoaWxkKGdyZWFkeSk7XG4gICAgICAgICAgICBwb3BvdXRDb250YWluZXIuYXBwZW5kQ2hpbGQoZ3JvdXAuZWxlbWVudCk7XG4gICAgICAgICAgICBjb25zdCBhbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGNvbnN0IGRyb3BUYXJnZXRDb250YWluZXIgPSBuZXcgRHJvcFRhcmdldEFuY2hvckNvbnRhaW5lcihhbmNob3IsIHsgZGlzYWJsZWQ6IHRoaXMucm9vdERyb3BUYXJnZXRDb250YWluZXIuZGlzYWJsZWQgfSk7XG4gICAgICAgICAgICBwb3BvdXRDb250YWluZXIuYXBwZW5kQ2hpbGQoYW5jaG9yKTtcbiAgICAgICAgICAgIGdyb3VwLm1vZGVsLmRyb3BUYXJnZXRDb250YWluZXIgPSBkcm9wVGFyZ2V0Q29udGFpbmVyO1xuICAgICAgICAgICAgZ3JvdXAubW9kZWwubG9jYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3BvcG91dCcsXG4gICAgICAgICAgICAgICAgZ2V0V2luZG93OiAoKSA9PiBfd2luZG93LndpbmRvdyxcbiAgICAgICAgICAgICAgICBwb3BvdXRVcmw6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5wb3BvdXRVcmwsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGlzR3JvdXBBZGRlZFRvRG9tICYmXG4gICAgICAgICAgICAgICAgaXRlbVRvUG9wb3V0LmFwaS5sb2NhdGlvbi50eXBlID09PSAnZ3JpZCcpIHtcbiAgICAgICAgICAgICAgICBpdGVtVG9Qb3BvdXQuYXBpLnNldFZpc2libGUoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kb1NldEdyb3VwQW5kUGFuZWxBY3RpdmUoZ3JvdXApO1xuICAgICAgICAgICAgcG9wb3V0V2luZG93RGlzcG9zYWJsZS5hZGREaXNwb3NhYmxlcyhncm91cC5hcGkub25EaWRBY3RpdmVDaGFuZ2UoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIGlmIChldmVudC5pc0FjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICAoX2EgPSBfd2luZG93LndpbmRvdykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksIGdyb3VwLmFwaS5vbldpbGxGb2N1cygoKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIChfYSA9IF93aW5kb3cud2luZG93KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZm9jdXMoKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIGxldCByZXR1cm5lZEdyb3VwO1xuICAgICAgICAgICAgY29uc3QgaXNWYWxpZFJlZmVyZW5jZUdyb3VwID0gaXNHcm91cEFkZGVkVG9Eb20gJiZcbiAgICAgICAgICAgICAgICByZWZlcmVuY2VHcm91cCAmJlxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0UGFuZWwocmVmZXJlbmNlR3JvdXAuaWQpO1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB7XG4gICAgICAgICAgICAgICAgd2luZG93OiBfd2luZG93LFxuICAgICAgICAgICAgICAgIHBvcG91dEdyb3VwOiBncm91cCxcbiAgICAgICAgICAgICAgICByZWZlcmVuY2VHcm91cDogaXNWYWxpZFJlZmVyZW5jZUdyb3VwXG4gICAgICAgICAgICAgICAgICAgID8gcmVmZXJlbmNlR3JvdXAuaWRcbiAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgZGlzcG9zYWJsZToge1xuICAgICAgICAgICAgICAgICAgICBkaXNwb3NlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3BvdXRXaW5kb3dEaXNwb3NhYmxlLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXR1cm5lZEdyb3VwO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgX29uRGlkV2luZG93UG9zaXRpb25DaGFuZ2UgPSBvbkRpZFdpbmRvd01vdmVFbmQoX3dpbmRvdy53aW5kb3cpO1xuICAgICAgICAgICAgcG9wb3V0V2luZG93RGlzcG9zYWJsZS5hZGREaXNwb3NhYmxlcyhfb25EaWRXaW5kb3dQb3NpdGlvbkNoYW5nZSwgb25EaWRXaW5kb3dSZXNpemVFbmQoX3dpbmRvdy53aW5kb3csICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vbkRpZFBvcG91dEdyb3VwU2l6ZUNoYW5nZS5maXJlKHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IF93aW5kb3cud2luZG93LmlubmVyV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogX3dpbmRvdy53aW5kb3cuaW5uZXJIZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgIGdyb3VwLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSksIF9vbkRpZFdpbmRvd1Bvc2l0aW9uQ2hhbmdlLmV2ZW50KCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vbkRpZFBvcG91dEdyb3VwUG9zaXRpb25DaGFuZ2UuZmlyZSh7XG4gICAgICAgICAgICAgICAgICAgIHNjcmVlblg6IF93aW5kb3cud2luZG93LnNjcmVlblgsXG4gICAgICAgICAgICAgICAgICAgIHNjcmVlblk6IF93aW5kb3cud2luZG93LnNjcmVlblgsXG4gICAgICAgICAgICAgICAgICAgIGdyb3VwLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSksIFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZXNpemVPYnNlcnZlciBzZWVtcyBzbG93IGhlcmUsIEkgZG8gbm90IGtub3cgd2h5IGJ1dCB3ZSBkb24ndCBuZWVkIGl0XG4gICAgICAgICAgICAgKiBzaW5jZSB3ZSBjYW4gcmVwbHkgb24gdGhlIHdpbmRvdyByZXNpemUgZXZlbnQgYXMgd2Ugd2lsbCBvY2N1cHkgdGhlIGZ1bGxcbiAgICAgICAgICAgICAqIHdpbmRvdyBkaW1lbnNpb25zXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGFkZERpc3Bvc2FibGVMaXN0ZW5lcihfd2luZG93LndpbmRvdywgJ3Jlc2l6ZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICBncm91cC5sYXlvdXQoX3dpbmRvdy53aW5kb3cuaW5uZXJXaWR0aCwgX3dpbmRvdy53aW5kb3cuaW5uZXJIZWlnaHQpO1xuICAgICAgICAgICAgfSksIG92ZXJsYXlSZW5kZXJDb250YWluZXIsIERpc3Bvc2FibGUuZnJvbSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNEaXNwb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47IC8vIGNsZWFudXAgbWF5IHJ1biBhZnRlciBpbnN0YW5jZSBpcyBkaXNwb3NlZFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXNHcm91cEFkZGVkVG9Eb20gJiZcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRQYW5lbChyZWZlcmVuY2VHcm91cC5pZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb3ZpbmdMb2NrKCgpID0+IG1vdmVHcm91cFdpdGhvdXREZXN0cm95aW5nKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb206IGdyb3VwLFxuICAgICAgICAgICAgICAgICAgICAgICAgdG86IHJlZmVyZW5jZUdyb3VwLFxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcmVmZXJlbmNlR3JvdXAuYXBpLmlzVmlzaWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVmZXJlbmNlR3JvdXAuYXBpLnNldFZpc2libGUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2V0UGFuZWwoZ3JvdXAuaWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRvUmVtb3ZlR3JvdXAoZ3JvdXAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lwUG9wb3V0QXNzb2NpYXRlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuZ2V0UGFuZWwoZ3JvdXAuaWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwLm1vZGVsLnJlbmRlckNvbnRhaW5lciA9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm92ZXJsYXlSZW5kZXJDb250YWluZXI7XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwLm1vZGVsLmRyb3BUYXJnZXRDb250YWluZXIgPVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yb290RHJvcFRhcmdldENvbnRhaW5lcjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuZWRHcm91cCA9IGdyb3VwO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhbHJlYWR5UmVtb3ZlZCA9ICF0aGlzLl9wb3BvdXRHcm91cHMuZmluZCgocCkgPT4gcC5wb3BvdXRHcm91cCA9PT0gZ3JvdXApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWxyZWFkeVJlbW92ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICogSWYgdGhpcyBwb3BvdXQgZ3JvdXAgd2FzIGV4cGxpY2l0bHkgcmVtb3ZlZCB0aGVuIHdlIHNob3VsZG4ndCBydW4gdGhlIGFkZGl0aW9uYWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIHN0ZXBzLiBUbyB0ZWxsIGlmIHRoZSBydW5uaW5nIG9mIHRoaXMgZGlzcG9zYWJsZSBpcyB0aGUgcmVzdWx0IG9mIHRoaXMgcG9wb3V0IGdyb3VwXG4gICAgICAgICAgICAgICAgICAgICAgICAgKiBiZWluZyBleHBsaWNpdGx5IHJlbW92ZWQgd2UgY2FuIGNoZWNrIGlmIHRoaXMgcG9wb3V0IGdyb3VwIGlzIHN0aWxsIHJlZmVyZW5jZWQgaW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAqIHRoZSBgdGhpcy5fcG9wb3V0R3JvdXBzYCBsaXN0LlxuICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGZsb2F0aW5nQm94KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZEZsb2F0aW5nR3JvdXAoZ3JvdXAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGZsb2F0aW5nQm94LmhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogZmxvYXRpbmdCb3gud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGZsb2F0aW5nQm94LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRvUmVtb3ZlR3JvdXAoZ3JvdXAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lwRGlzcG9zZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lwQWN0aXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNraXBQb3BvdXRSZXR1cm46IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwLm1vZGVsLmxvY2F0aW9uID0geyB0eXBlOiAnZ3JpZCcgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW92aW5nTG9jaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3VwcHJlc3MgZ3JvdXAgYWRkIGV2ZW50cyBzaW5jZSB0aGUgZ3JvdXAgYWxyZWFkeSBleGlzdHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRvQWRkR3JvdXAoZ3JvdXAsIFswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvU2V0R3JvdXBBbmRQYW5lbEFjdGl2ZShncm91cCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgdGhpcy5fcG9wb3V0R3JvdXBzLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVXYXRlcm1hcmsoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2RvY2t2aWV3OiBmYWlsZWQgdG8gY3JlYXRlIHBvcG91dC4nLCBlcnIpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYWRkRmxvYXRpbmdHcm91cChpdGVtLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2U7XG4gICAgICAgIGxldCBncm91cDtcbiAgICAgICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBEb2Nrdmlld1BhbmVsKSB7XG4gICAgICAgICAgICBncm91cCA9IHRoaXMuY3JlYXRlR3JvdXAoKTtcbiAgICAgICAgICAgIHRoaXMuX29uRGlkQWRkR3JvdXAuZmlyZShncm91cCk7XG4gICAgICAgICAgICB0aGlzLm1vdmluZ0xvY2soKCkgPT4gdGhpcy5yZW1vdmVQYW5lbChpdGVtLCB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlRW1wdHlHcm91cDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBza2lwRGlzcG9zZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBza2lwU2V0QWN0aXZlR3JvdXA6IHRydWUsXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB0aGlzLm1vdmluZ0xvY2soKCkgPT4gZ3JvdXAubW9kZWwub3BlblBhbmVsKGl0ZW0sIHsgc2tpcFNldEdyb3VwQWN0aXZlOiB0cnVlIH0pKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGdyb3VwID0gaXRlbTtcbiAgICAgICAgICAgIGNvbnN0IHBvcG91dFJlZmVyZW5jZUdyb3VwSWQgPSAoX2EgPSB0aGlzLl9wb3BvdXRHcm91cHMuZmluZCgoXykgPT4gXy5wb3BvdXRHcm91cCA9PT0gZ3JvdXApKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucmVmZXJlbmNlR3JvdXA7XG4gICAgICAgICAgICBjb25zdCBwb3BvdXRSZWZlcmVuY2VHcm91cCA9IHBvcG91dFJlZmVyZW5jZUdyb3VwSWRcbiAgICAgICAgICAgICAgICA/IHRoaXMuZ2V0UGFuZWwocG9wb3V0UmVmZXJlbmNlR3JvdXBJZClcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGNvbnN0IHNraXAgPSB0eXBlb2YgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5za2lwUmVtb3ZlR3JvdXApID09PSAnYm9vbGVhbicgJiZcbiAgICAgICAgICAgICAgICBvcHRpb25zLnNraXBSZW1vdmVHcm91cDtcbiAgICAgICAgICAgIGlmICghc2tpcCkge1xuICAgICAgICAgICAgICAgIGlmIChwb3BvdXRSZWZlcmVuY2VHcm91cCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vdmluZ0xvY2soKCkgPT4gbW92ZUdyb3VwV2l0aG91dERlc3Ryb3lpbmcoe1xuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogaXRlbSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvOiBwb3BvdXRSZWZlcmVuY2VHcm91cCxcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvUmVtb3ZlR3JvdXAoaXRlbSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2tpcFBvcG91dFJldHVybjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNraXBQb3BvdXRBc3NvY2lhdGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb1JlbW92ZUdyb3VwKHBvcG91dFJlZmVyZW5jZUdyb3VwLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBza2lwRGlzcG9zZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwID0gcG9wb3V0UmVmZXJlbmNlR3JvdXA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvUmVtb3ZlR3JvdXAoaXRlbSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2tpcERpc3Bvc2U6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBza2lwUG9wb3V0UmV0dXJuOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2tpcFBvcG91dEFzc29jaWF0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZ2V0QW5jaG9yZWRCb3goKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgICAgICAgICAgICAgaWYgKCdsZWZ0JyBpbiBvcHRpb25zLnBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5sZWZ0ID0gTWF0aC5tYXgob3B0aW9ucy5wb3NpdGlvbi5sZWZ0LCAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoJ3JpZ2h0JyBpbiBvcHRpb25zLnBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5yaWdodCA9IE1hdGgubWF4KG9wdGlvbnMucG9zaXRpb24ucmlnaHQsIDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmxlZnQgPSBERUZBVUxUX0ZMT0FUSU5HX0dST1VQX1BPU0lUSU9OLmxlZnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICgndG9wJyBpbiBvcHRpb25zLnBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC50b3AgPSBNYXRoLm1heChvcHRpb25zLnBvc2l0aW9uLnRvcCwgMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCdib3R0b20nIGluIG9wdGlvbnMucG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmJvdHRvbSA9IE1hdGgubWF4KG9wdGlvbnMucG9zaXRpb24uYm90dG9tLCAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC50b3AgPSBERUZBVUxUX0ZMT0FUSU5HX0dST1VQX1BPU0lUSU9OLnRvcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLndpZHRoID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQud2lkdGggPSBNYXRoLm1heChvcHRpb25zLndpZHRoLCAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC53aWR0aCA9IERFRkFVTFRfRkxPQVRJTkdfR1JPVVBfUE9TSVRJT04ud2lkdGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5oZWlnaHQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5oZWlnaHQgPSBNYXRoLm1heChvcHRpb25zLmhlaWdodCwgMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQuaGVpZ2h0ID0gREVGQVVMVF9GTE9BVElOR19HUk9VUF9QT1NJVElPTi5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGxlZnQ6IHR5cGVvZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLngpID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgICAgICAgICA/IE1hdGgubWF4KG9wdGlvbnMueCwgMClcbiAgICAgICAgICAgICAgICAgICAgOiBERUZBVUxUX0ZMT0FUSU5HX0dST1VQX1BPU0lUSU9OLmxlZnQsXG4gICAgICAgICAgICAgICAgdG9wOiB0eXBlb2YgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy55KSA9PT0gJ251bWJlcidcbiAgICAgICAgICAgICAgICAgICAgPyBNYXRoLm1heChvcHRpb25zLnksIDApXG4gICAgICAgICAgICAgICAgICAgIDogREVGQVVMVF9GTE9BVElOR19HUk9VUF9QT1NJVElPTi50b3AsXG4gICAgICAgICAgICAgICAgd2lkdGg6IHR5cGVvZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLndpZHRoKSA9PT0gJ251bWJlcidcbiAgICAgICAgICAgICAgICAgICAgPyBNYXRoLm1heChvcHRpb25zLndpZHRoLCAwKVxuICAgICAgICAgICAgICAgICAgICA6IERFRkFVTFRfRkxPQVRJTkdfR1JPVVBfUE9TSVRJT04ud2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiB0eXBlb2YgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5oZWlnaHQpID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgICAgICAgICA/IE1hdGgubWF4KG9wdGlvbnMuaGVpZ2h0LCAwKVxuICAgICAgICAgICAgICAgICAgICA6IERFRkFVTFRfRkxPQVRJTkdfR1JPVVBfUE9TSVRJT04uaGVpZ2h0LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhbmNob3JlZEJveCA9IGdldEFuY2hvcmVkQm94KCk7XG4gICAgICAgIGNvbnN0IG92ZXJsYXkgPSBuZXcgT3ZlcmxheShPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBjb250YWluZXI6IHRoaXMuZ3JpZHZpZXcuZWxlbWVudCwgY29udGVudDogZ3JvdXAuZWxlbWVudCB9LCBhbmNob3JlZEJveCksIHsgbWluaW11bUluVmlld3BvcnRXaWR0aDogdGhpcy5vcHRpb25zLmZsb2F0aW5nR3JvdXBCb3VuZHMgPT09ICdib3VuZGVkV2l0aGluVmlld3BvcnQnXG4gICAgICAgICAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICA6IChfYyA9IChfYiA9IHRoaXMub3B0aW9ucy5mbG9hdGluZ0dyb3VwQm91bmRzKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IubWluaW11bVdpZHRoV2l0aGluVmlld3BvcnQpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IERFRkFVTFRfRkxPQVRJTkdfR1JPVVBfT1ZFUkZMT1dfU0laRSwgbWluaW11bUluVmlld3BvcnRIZWlnaHQ6IHRoaXMub3B0aW9ucy5mbG9hdGluZ0dyb3VwQm91bmRzID09PSAnYm91bmRlZFdpdGhpblZpZXdwb3J0J1xuICAgICAgICAgICAgICAgID8gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgOiAoX2UgPSAoX2QgPSB0aGlzLm9wdGlvbnMuZmxvYXRpbmdHcm91cEJvdW5kcykgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLm1pbmltdW1IZWlnaHRXaXRoaW5WaWV3cG9ydCkgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogREVGQVVMVF9GTE9BVElOR19HUk9VUF9PVkVSRkxPV19TSVpFIH0pKTtcbiAgICAgICAgY29uc3QgZWwgPSBncm91cC5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kdi12b2lkLWNvbnRhaW5lcicpO1xuICAgICAgICBpZiAoIWVsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ZhaWxlZCB0byBmaW5kIGRyYWcgaGFuZGxlJyk7XG4gICAgICAgIH1cbiAgICAgICAgb3ZlcmxheS5zZXR1cERyYWcoZWwsIHtcbiAgICAgICAgICAgIGluRHJhZ01vZGU6IHR5cGVvZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmluRHJhZ01vZGUpID09PSAnYm9vbGVhbidcbiAgICAgICAgICAgICAgICA/IG9wdGlvbnMuaW5EcmFnTW9kZVxuICAgICAgICAgICAgICAgIDogZmFsc2UsXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBmbG9hdGluZ0dyb3VwUGFuZWwgPSBuZXcgRG9ja3ZpZXdGbG9hdGluZ0dyb3VwUGFuZWwoZ3JvdXAsIG92ZXJsYXkpO1xuICAgICAgICBjb25zdCBkaXNwb3NhYmxlID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoZ3JvdXAuYXBpLm9uRGlkQWN0aXZlQ2hhbmdlKChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmlzQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgb3ZlcmxheS5icmluZ1RvRnJvbnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksIHdhdGNoRWxlbWVudFJlc2l6ZShncm91cC5lbGVtZW50LCAoZW50cnkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gZW50cnkuY29udGVudFJlY3Q7XG4gICAgICAgICAgICBncm91cC5sYXlvdXQod2lkdGgsIGhlaWdodCk7IC8vIGxldCB0aGUgZ3JvdXAga25vdyBpdCdzIHNpemUgaXMgY2hhbmdpbmcgc28gaXQgY2FuIGZpcmUgZXZlbnRzIHRvIHRoZSBwYW5lbFxuICAgICAgICB9KSk7XG4gICAgICAgIGZsb2F0aW5nR3JvdXBQYW5lbC5hZGREaXNwb3NhYmxlcyhvdmVybGF5Lm9uRGlkQ2hhbmdlKCgpID0+IHtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgZWl0aGVyIGEgcmVzaXplIG9yIGEgbW92ZVxuICAgICAgICAgICAgLy8gdG8gaW5mb3JtIHRoZSBwYW5lbHMgLmxheW91dCguLi4pIHRoZSBncm91cCB3aXRoIGl0J3MgY3VycmVudCBzaXplXG4gICAgICAgICAgICAvLyBkb24ndCBjYXJlIGFib3V0IHJlc2l6ZSBzaW5jZSB0aGUgYWJvdmUgd2F0Y2hlciBoYW5kbGVzIHRoYXRcbiAgICAgICAgICAgIGdyb3VwLmxheW91dChncm91cC53aWR0aCwgZ3JvdXAuaGVpZ2h0KTtcbiAgICAgICAgfSksIG92ZXJsYXkub25EaWRDaGFuZ2VFbmQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fYnVmZmVyT25EaWRMYXlvdXRDaGFuZ2UuZmlyZSgpO1xuICAgICAgICB9KSwgZ3JvdXAub25EaWRDaGFuZ2UoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBvdmVybGF5LnNldEJvdW5kcyh7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBldmVudCA9PT0gbnVsbCB8fCBldmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXZlbnQuaGVpZ2h0LFxuICAgICAgICAgICAgICAgIHdpZHRoOiBldmVudCA9PT0gbnVsbCB8fCBldmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXZlbnQud2lkdGgsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSksIHtcbiAgICAgICAgICAgIGRpc3Bvc2U6ICgpID0+IHtcbiAgICAgICAgICAgICAgICBkaXNwb3NhYmxlLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICByZW1vdmUodGhpcy5fZmxvYXRpbmdHcm91cHMsIGZsb2F0aW5nR3JvdXBQYW5lbCk7XG4gICAgICAgICAgICAgICAgZ3JvdXAubW9kZWwubG9jYXRpb24gPSB7IHR5cGU6ICdncmlkJyB9O1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlV2F0ZXJtYXJrKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fZmxvYXRpbmdHcm91cHMucHVzaChmbG9hdGluZ0dyb3VwUGFuZWwpO1xuICAgICAgICBncm91cC5tb2RlbC5sb2NhdGlvbiA9IHsgdHlwZTogJ2Zsb2F0aW5nJyB9O1xuICAgICAgICBpZiAoIShvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuc2tpcEFjdGl2ZUdyb3VwKSkge1xuICAgICAgICAgICAgdGhpcy5kb1NldEdyb3VwQW5kUGFuZWxBY3RpdmUoZ3JvdXApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlV2F0ZXJtYXJrKCk7XG4gICAgfVxuICAgIG9ydGhvZ29uYWxpemUocG9zaXRpb24sIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5ncmlkdmlldy5ub3JtYWxpemUoKTtcbiAgICAgICAgc3dpdGNoIChwb3NpdGlvbikge1xuICAgICAgICAgICAgY2FzZSAndG9wJzpcbiAgICAgICAgICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZ3JpZHZpZXcub3JpZW50YXRpb24gPT09IE9yaWVudGF0aW9uLkhPUklaT05UQUwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gd2UgbmVlZCB0byBhZGQgdG8gYSB2ZXJ0aWNhbCBzcGxpdHZpZXcgYnV0IHRoZSBjdXJyZW50IHJvb3QgaXMgYSBob3Jpem9udGFsIHNwbGl0dmlldy5cbiAgICAgICAgICAgICAgICAgICAgLy8gaW5zZXJ0IGEgdmVydGljYWwgc3BsaXR2aWV3IGF0IHRoZSByb290IGxldmVsIGFuZCBhZGQgdGhlIGV4aXN0aW5nIHZpZXcgYXMgYSBjaGlsZFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdyaWR2aWV3Lmluc2VydE9ydGhvZ29uYWxTcGxpdHZpZXdBdFJvb3QoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5ncmlkdmlldy5vcmllbnRhdGlvbiA9PT0gT3JpZW50YXRpb24uVkVSVElDQUwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gd2UgbmVlZCB0byBhZGQgdG8gYSBob3Jpem9udGFsIHNwbGl0dmlldyBidXQgdGhlIGN1cnJlbnQgcm9vdCBpcyBhIHZlcnRpY2FsIHNwbGl0dmlldy5cbiAgICAgICAgICAgICAgICAgICAgLy8gaW5zZXJ0IGEgaG9yaXppb250YWwgc3BsaXR2aWV3IGF0IHRoZSByb290IGxldmVsIGFuZCBhZGQgdGhlIGV4aXN0aW5nIHZpZXcgYXMgYSBjaGlsZFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdyaWR2aWV3Lmluc2VydE9ydGhvZ29uYWxTcGxpdHZpZXdBdFJvb3QoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAocG9zaXRpb24pIHtcbiAgICAgICAgICAgIGNhc2UgJ3RvcCc6XG4gICAgICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgICAgIGNhc2UgJ2NlbnRlcic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlR3JvdXBBdExvY2F0aW9uKFswXSwgdW5kZWZpbmVkLCBvcHRpb25zKTsgLy8gaW5zZXJ0IGludG8gZmlyc3QgcG9zaXRpb25cbiAgICAgICAgICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlR3JvdXBBdExvY2F0aW9uKFt0aGlzLmdyaWR2aWV3Lmxlbmd0aF0sIHVuZGVmaW5lZCwgb3B0aW9ucyk7IC8vIGluc2VydCBpbnRvIGxhc3QgcG9zaXRpb25cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bnN1cHBvcnRlZCBwb3NpdGlvbiAke3Bvc2l0aW9ufWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHVwZGF0ZU9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBzdXBlci51cGRhdGVPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICBpZiAoJ2Zsb2F0aW5nR3JvdXBCb3VuZHMnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZ3JvdXAgb2YgdGhpcy5fZmxvYXRpbmdHcm91cHMpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG9wdGlvbnMuZmxvYXRpbmdHcm91cEJvdW5kcykge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdib3VuZGVkV2l0aGluVmlld3BvcnQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXAub3ZlcmxheS5taW5pbXVtSW5WaWV3cG9ydEhlaWdodCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwLm92ZXJsYXkubWluaW11bUluVmlld3BvcnRXaWR0aCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwLm92ZXJsYXkubWluaW11bUluVmlld3BvcnRIZWlnaHQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIERFRkFVTFRfRkxPQVRJTkdfR1JPVVBfT1ZFUkZMT1dfU0laRTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwLm92ZXJsYXkubWluaW11bUluVmlld3BvcnRXaWR0aCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgREVGQVVMVF9GTE9BVElOR19HUk9VUF9PVkVSRkxPV19TSVpFO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cC5vdmVybGF5Lm1pbmltdW1JblZpZXdwb3J0SGVpZ2h0ID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoX2EgPSBvcHRpb25zLmZsb2F0aW5nR3JvdXBCb3VuZHMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5taW5pbXVtSGVpZ2h0V2l0aGluVmlld3BvcnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cC5vdmVybGF5Lm1pbmltdW1JblZpZXdwb3J0V2lkdGggPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChfYiA9IG9wdGlvbnMuZmxvYXRpbmdHcm91cEJvdW5kcykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLm1pbmltdW1XaWR0aFdpdGhpblZpZXdwb3J0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBncm91cC5vdmVybGF5LnNldEJvdW5kcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlRHJvcFRhcmdldE1vZGVsKG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBvbGREaXNhYmxlRG5kID0gdGhpcy5vcHRpb25zLmRpc2FibGVEbmQ7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHRoaXMub3B0aW9ucyksIG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBuZXdEaXNhYmxlRG5kID0gdGhpcy5vcHRpb25zLmRpc2FibGVEbmQ7XG4gICAgICAgIGlmIChvbGREaXNhYmxlRG5kICE9PSBuZXdEaXNhYmxlRG5kKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZURyYWdBbmREcm9wU3RhdGUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJ3RoZW1lJyBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVRoZW1lKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sYXlvdXQodGhpcy5ncmlkdmlldy53aWR0aCwgdGhpcy5ncmlkdmlldy5oZWlnaHQsIHRydWUpO1xuICAgIH1cbiAgICBsYXlvdXQod2lkdGgsIGhlaWdodCwgZm9yY2VSZXNpemUpIHtcbiAgICAgICAgc3VwZXIubGF5b3V0KHdpZHRoLCBoZWlnaHQsIGZvcmNlUmVzaXplKTtcbiAgICAgICAgaWYgKHRoaXMuX2Zsb2F0aW5nR3JvdXBzKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGZsb2F0aW5nIG9mIHRoaXMuX2Zsb2F0aW5nR3JvdXBzKSB7XG4gICAgICAgICAgICAgICAgLy8gZW5zdXJlIGZsb3RpbmcgZ3JvdXBzIHN0YXkgd2l0aGluIHZpc2libGUgYm91bmRhcmllc1xuICAgICAgICAgICAgICAgIGZsb2F0aW5nLm92ZXJsYXkuc2V0Qm91bmRzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlRHJhZ0FuZERyb3BTdGF0ZSgpIHtcbiAgICAgICAgLy8gVXBkYXRlIGRyYWdnYWJsZSBzdGF0ZSBmb3IgYWxsIHRhYnMgYW5kIHZvaWQgY29udGFpbmVyc1xuICAgICAgICBmb3IgKGNvbnN0IGdyb3VwIG9mIHRoaXMuZ3JvdXBzKSB7XG4gICAgICAgICAgICBncm91cC5tb2RlbC51cGRhdGVEcmFnQW5kRHJvcFN0YXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9jdXMoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgKF9hID0gdGhpcy5hY3RpdmVHcm91cCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmZvY3VzKCk7XG4gICAgfVxuICAgIGdldEdyb3VwUGFuZWwoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFuZWxzLmZpbmQoKHBhbmVsKSA9PiBwYW5lbC5pZCA9PT0gaWQpO1xuICAgIH1cbiAgICBzZXRBY3RpdmVQYW5lbChwYW5lbCkge1xuICAgICAgICBwYW5lbC5ncm91cC5tb2RlbC5vcGVuUGFuZWwocGFuZWwpO1xuICAgICAgICB0aGlzLmRvU2V0R3JvdXBBbmRQYW5lbEFjdGl2ZShwYW5lbC5ncm91cCk7XG4gICAgfVxuICAgIG1vdmVUb05leHQob3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKCFvcHRpb25zLmdyb3VwKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuYWN0aXZlR3JvdXApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcHRpb25zLmdyb3VwID0gdGhpcy5hY3RpdmVHcm91cDtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5pbmNsdWRlUGFuZWwgJiYgb3B0aW9ucy5ncm91cCkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZ3JvdXAuYWN0aXZlUGFuZWwgIT09XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5ncm91cC5wYW5lbHNbb3B0aW9ucy5ncm91cC5wYW5lbHMubGVuZ3RoIC0gMV0pIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmdyb3VwLm1vZGVsLm1vdmVUb05leHQoeyBzdXBwcmVzc1JvbGw6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxvY2F0aW9uID0gZ2V0R3JpZExvY2F0aW9uKG9wdGlvbnMuZ3JvdXAuZWxlbWVudCk7XG4gICAgICAgIGNvbnN0IG5leHQgPSAoX2EgPSB0aGlzLmdyaWR2aWV3Lm5leHQobG9jYXRpb24pKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudmlldztcbiAgICAgICAgdGhpcy5kb1NldEdyb3VwQW5kUGFuZWxBY3RpdmUobmV4dCk7XG4gICAgfVxuICAgIG1vdmVUb1ByZXZpb3VzKG9wdGlvbnMgPSB7fSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICghb3B0aW9ucy5ncm91cCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmFjdGl2ZUdyb3VwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3B0aW9ucy5ncm91cCA9IHRoaXMuYWN0aXZlR3JvdXA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuaW5jbHVkZVBhbmVsICYmIG9wdGlvbnMuZ3JvdXApIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmdyb3VwLmFjdGl2ZVBhbmVsICE9PSBvcHRpb25zLmdyb3VwLnBhbmVsc1swXSkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuZ3JvdXAubW9kZWwubW92ZVRvUHJldmlvdXMoeyBzdXBwcmVzc1JvbGw6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxvY2F0aW9uID0gZ2V0R3JpZExvY2F0aW9uKG9wdGlvbnMuZ3JvdXAuZWxlbWVudCk7XG4gICAgICAgIGNvbnN0IG5leHQgPSAoX2EgPSB0aGlzLmdyaWR2aWV3LnByZXZpb3VzKGxvY2F0aW9uKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnZpZXc7XG4gICAgICAgIGlmIChuZXh0KSB7XG4gICAgICAgICAgICB0aGlzLmRvU2V0R3JvdXBBbmRQYW5lbEFjdGl2ZShuZXh0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXJpYWxpemUgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIGxheW91dFxuICAgICAqXG4gICAgICogQHJldHVybnMgQSBKU09OIHJlc3ByZXNlbnRhdGlvbiBvZiB0aGUgbGF5b3V0XG4gICAgICovXG4gICAgdG9KU09OKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmdyaWR2aWV3LnNlcmlhbGl6ZSgpO1xuICAgICAgICBjb25zdCBwYW5lbHMgPSB0aGlzLnBhbmVscy5yZWR1Y2UoKGNvbGxlY3Rpb24sIHBhbmVsKSA9PiB7XG4gICAgICAgICAgICBjb2xsZWN0aW9uW3BhbmVsLmlkXSA9IHBhbmVsLnRvSlNPTigpO1xuICAgICAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgICAgIH0sIHt9KTtcbiAgICAgICAgY29uc3QgZmxvYXRzID0gdGhpcy5fZmxvYXRpbmdHcm91cHMubWFwKChncm91cCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBkYXRhOiBncm91cC5ncm91cC50b0pTT04oKSxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogZ3JvdXAub3ZlcmxheS50b0pTT04oKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBwb3BvdXRHcm91cHMgPSB0aGlzLl9wb3BvdXRHcm91cHMubWFwKChncm91cCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBkYXRhOiBncm91cC5wb3BvdXRHcm91cC50b0pTT04oKSxcbiAgICAgICAgICAgICAgICBncmlkUmVmZXJlbmNlR3JvdXA6IGdyb3VwLnJlZmVyZW5jZUdyb3VwLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBncm91cC53aW5kb3cuZGltZW5zaW9ucygpLFxuICAgICAgICAgICAgICAgIHVybDogZ3JvdXAucG9wb3V0R3JvdXAuYXBpLmxvY2F0aW9uLnR5cGUgPT09ICdwb3BvdXQnXG4gICAgICAgICAgICAgICAgICAgID8gZ3JvdXAucG9wb3V0R3JvdXAuYXBpLmxvY2F0aW9uLnBvcG91dFVybFxuICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICAgICAgICBncmlkOiBkYXRhLFxuICAgICAgICAgICAgcGFuZWxzLFxuICAgICAgICAgICAgYWN0aXZlR3JvdXA6IChfYSA9IHRoaXMuYWN0aXZlR3JvdXApID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pZCxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGZsb2F0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXN1bHQuZmxvYXRpbmdHcm91cHMgPSBmbG9hdHM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvcG91dEdyb3Vwcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXN1bHQucG9wb3V0R3JvdXBzID0gcG9wb3V0R3JvdXBzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGZyb21KU09OKGRhdGEpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICBpZiAodHlwZW9mIGRhdGEgIT09ICdvYmplY3QnIHx8IGRhdGEgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignc2VyaWFsaXplZCBsYXlvdXQgbXVzdCBiZSBhIG5vbi1udWxsIG9iamVjdCcpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgZ3JpZCwgcGFuZWxzLCBhY3RpdmVHcm91cCB9ID0gZGF0YTtcbiAgICAgICAgaWYgKGdyaWQucm9vdC50eXBlICE9PSAnYnJhbmNoJyB8fCAhQXJyYXkuaXNBcnJheShncmlkLnJvb3QuZGF0YSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigncm9vdCBtdXN0IGJlIG9mIHR5cGUgYnJhbmNoJyk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIHRha2Ugbm90ZSBvZiB0aGUgZXhpc3RpbmcgZGltZW5zaW9uc1xuICAgICAgICAgICAgY29uc3Qgd2lkdGggPSB0aGlzLndpZHRoO1xuICAgICAgICAgICAgY29uc3QgaGVpZ2h0ID0gdGhpcy5oZWlnaHQ7XG4gICAgICAgICAgICBjb25zdCBjcmVhdGVHcm91cEZyb21TZXJpYWxpemVkU3RhdGUgPSAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgaWQsIGxvY2tlZCwgaGlkZUhlYWRlciwgdmlld3MsIGFjdGl2ZVZpZXcgfSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBpZCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdncm91cCBpZCBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwID0gdGhpcy5jcmVhdGVHcm91cCh7XG4gICAgICAgICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICAgICAgICBsb2NrZWQ6ICEhbG9ja2VkLFxuICAgICAgICAgICAgICAgICAgICBoaWRlSGVhZGVyOiAhIWhpZGVIZWFkZXIsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fb25EaWRBZGRHcm91cC5maXJlKGdyb3VwKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjcmVhdGVkUGFuZWxzID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiB2aWV3cykge1xuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogUnVuIHRoZSBkZXNlcmlhbGl6ZXIgc3RlcCBzZXBlcmF0ZWx5IHNpbmNlIHRoaXMgbWF5IGZhaWwgdG8gZHVlIGNvcnJ1cHRlZCBleHRlcm5hbCBzdGF0ZS5cbiAgICAgICAgICAgICAgICAgICAgICogSW4gcnVubmluZyB0aGlzIHNlY3Rpb24gZmlyc3Qgd2UgYXZvaWQgZmlyaW5nIGxvdHMgb2YgJ2FkZCcgZXZlbnRzIGluIHRoZSBldmVudCBvZiBhIGZhaWx1cmVcbiAgICAgICAgICAgICAgICAgICAgICogZHVlIHRvIGEgY29ycnVwdGlvbiBvZiBpbnB1dCBkYXRhLlxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFuZWwgPSB0aGlzLl9kZXNlcmlhbGl6ZXIuZnJvbUpTT04ocGFuZWxzW2NoaWxkXSwgZ3JvdXApO1xuICAgICAgICAgICAgICAgICAgICBjcmVhdGVkUGFuZWxzLnB1c2gocGFuZWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZpZXdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhbmVsID0gY3JlYXRlZFBhbmVsc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNBY3RpdmUgPSB0eXBlb2YgYWN0aXZlVmlldyA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZVZpZXcgPT09IHBhbmVsLmlkO1xuICAgICAgICAgICAgICAgICAgICBncm91cC5tb2RlbC5vcGVuUGFuZWwocGFuZWwsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNraXBTZXRBY3RpdmU6ICFpc0FjdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNraXBTZXRHcm91cEFjdGl2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghZ3JvdXAuYWN0aXZlUGFuZWwgJiYgZ3JvdXAucGFuZWxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXAubW9kZWwub3BlblBhbmVsKGdyb3VwLnBhbmVsc1tncm91cC5wYW5lbHMubGVuZ3RoIC0gMV0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNraXBTZXRHcm91cEFjdGl2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBncm91cDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmdyaWR2aWV3LmRlc2VyaWFsaXplKGdyaWQsIHtcbiAgICAgICAgICAgICAgICBmcm9tSlNPTjogKG5vZGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUdyb3VwRnJvbVNlcmlhbGl6ZWRTdGF0ZShub2RlLmRhdGEpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMubGF5b3V0KHdpZHRoLCBoZWlnaHQsIHRydWUpO1xuICAgICAgICAgICAgY29uc3Qgc2VyaWFsaXplZEZsb2F0aW5nR3JvdXBzID0gKF9hID0gZGF0YS5mbG9hdGluZ0dyb3VwcykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW107XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHNlcmlhbGl6ZWRGbG9hdGluZ0dyb3VwIG9mIHNlcmlhbGl6ZWRGbG9hdGluZ0dyb3Vwcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgZGF0YSwgcG9zaXRpb24gfSA9IHNlcmlhbGl6ZWRGbG9hdGluZ0dyb3VwO1xuICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwID0gY3JlYXRlR3JvdXBGcm9tU2VyaWFsaXplZFN0YXRlKGRhdGEpO1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkRmxvYXRpbmdHcm91cChncm91cCwge1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogcG9zaXRpb24sXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBwb3NpdGlvbi53aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBwb3NpdGlvbi5oZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgIHNraXBSZW1vdmVHcm91cDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgaW5EcmFnTW9kZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzZXJpYWxpemVkUG9wb3V0R3JvdXBzID0gKF9iID0gZGF0YS5wb3BvdXRHcm91cHMpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFtdO1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gYWxsIHBvcG91dCBncm91cHMgYXJlIGNyZWF0ZWRcbiAgICAgICAgICAgIGNvbnN0IHBvcG91dFByb21pc2VzID0gW107XG4gICAgICAgICAgICAvLyBRdWV1ZSBwb3B1cCBncm91cCBjcmVhdGlvbiB3aXRoIGRlbGF5cyB0byBhdm9pZCBicm93c2VyIGJsb2NraW5nXG4gICAgICAgICAgICBzZXJpYWxpemVkUG9wb3V0R3JvdXBzLmZvckVhY2goKHNlcmlhbGl6ZWRQb3BvdXRHcm91cCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGRhdGEsIHBvc2l0aW9uLCBncmlkUmVmZXJlbmNlR3JvdXAsIHVybCB9ID0gc2VyaWFsaXplZFBvcG91dEdyb3VwO1xuICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwID0gY3JlYXRlR3JvdXBGcm9tU2VyaWFsaXplZFN0YXRlKGRhdGEpO1xuICAgICAgICAgICAgICAgIC8vIEFkZCBhIHNtYWxsIGRlbGF5IGZvciBlYWNoIHBvcHVwIGFmdGVyIHRoZSBmaXJzdCB0byBhdm9pZCBicm93c2VyIHBvcHVwIGJsb2NraW5nXG4gICAgICAgICAgICAgICAgY29uc3QgcG9wb3V0UHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRQb3BvdXRHcm91cChncm91cCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbiAhPT0gbnVsbCAmJiBwb3NpdGlvbiAhPT0gdm9pZCAwID8gcG9zaXRpb24gOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcnJpZGVQb3BvdXRHcm91cDogZ3JpZFJlZmVyZW5jZUdyb3VwID8gZ3JvdXAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmZXJlbmNlR3JvdXA6IGdyaWRSZWZlcmVuY2VHcm91cFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMuZ2V0UGFuZWwoZ3JpZFJlZmVyZW5jZUdyb3VwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3BvdXRVcmw6IHVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9LCBpbmRleCAqIERFU0VSSUFMSVpBVElPTl9QT1BPVVRfREVMQVlfTVMpOyAvLyAxMDBtcyBkZWxheSBiZXR3ZWVuIGVhY2ggcG9wdXBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBwb3BvdXRQcm9taXNlcy5wdXNoKHBvcG91dFByb21pc2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBTdG9yZSB0aGUgcHJvbWlzZSBmb3IgdGVzdHMgdG8gd2FpdCBvblxuICAgICAgICAgICAgdGhpcy5fcG9wb3V0UmVzdG9yYXRpb25Qcm9taXNlID0gUHJvbWlzZS5hbGwocG9wb3V0UHJvbWlzZXMpLnRoZW4oKCkgPT4gdm9pZCAwKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZmxvYXRpbmdHcm91cCBvZiB0aGlzLl9mbG9hdGluZ0dyb3Vwcykge1xuICAgICAgICAgICAgICAgIGZsb2F0aW5nR3JvdXAub3ZlcmxheS5zZXRCb3VuZHMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgYWN0aXZlR3JvdXAgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFuZWwgPSB0aGlzLmdldFBhbmVsKGFjdGl2ZUdyb3VwKTtcbiAgICAgICAgICAgICAgICBpZiAocGFuZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb1NldEdyb3VwQW5kUGFuZWxBY3RpdmUocGFuZWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdkb2NrdmlldzogZmFpbGVkIHRvIGRlc2VyaWFsaXplIGxheW91dC4gUmV2ZXJ0aW5nIGNoYW5nZXMnLCBlcnIpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUYWtlcyBhbGwgdGhlIHN1Y2Nlc3NmdWxseSBjcmVhdGVkIGdyb3VwcyBhbmQgcmVtb3ZlIGFsbCBvZiB0aGVpciBwYW5lbHMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZvciAoY29uc3QgZ3JvdXAgb2YgdGhpcy5ncm91cHMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHBhbmVsIG9mIGdyb3VwLnBhbmVscykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZVBhbmVsKHBhbmVsLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVFbXB0eUdyb3VwOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNraXBEaXNwb3NlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUbyByZW1vdmUgYSBncm91cCB3ZSBjYW5ub3QgY2FsbCB0aGlzLnJlbW92ZUdyb3VwKC4uLikgc2luY2UgdGhpcyBtYWtlcyBhc3N1bXB0aW9ucyBhYm91dFxuICAgICAgICAgICAgICogdGhlIHVuZGVybHlpbmcgSFRNTEVsZW1lbnQgZXhpc3RpbmcgaW4gdGhlIEdyaWR2aWV3LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGdyb3VwIG9mIHRoaXMuZ3JvdXBzKSB7XG4gICAgICAgICAgICAgICAgZ3JvdXAuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2dyb3Vwcy5kZWxldGUoZ3JvdXAuaWQpO1xuICAgICAgICAgICAgICAgIHRoaXMuX29uRGlkUmVtb3ZlR3JvdXAuZmlyZShncm91cCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBpdGVyYXRlIG92ZXIgYSByZWFzc2lnbmVkIGFycmF5IHNpbmNlIG9yaWdpbmFsIGFycmF5IHdpbGwgYmUgbW9kaWZpZWRcbiAgICAgICAgICAgIGZvciAoY29uc3QgZmxvYXRpbmdHcm91cCBvZiBbLi4udGhpcy5fZmxvYXRpbmdHcm91cHNdKSB7XG4gICAgICAgICAgICAgICAgZmxvYXRpbmdHcm91cC5kaXNwb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBmaXJlcyBjbGVhbi11cCBldmVudHMgYW5kIGNsZWFycyB0aGUgdW5kZXJseWluZyBIVE1MIGdyaWR2aWV3LlxuICAgICAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBldmVuIHRob3VnaCB3ZSBoYXZlIGNsZWFuZWQtdXAgd2Ugc3RpbGwgd2FudCB0byBpbmZvcm0gdGhlIGNhbGxlciBvZiB0aGVpciBlcnJvclxuICAgICAgICAgICAgICogYW5kIHdlJ2xsIGRvIHRoaXMgdGhyb3VnaCByZS10aHJvd2luZyB0aGUgb3JpZ2luYWwgZXJyb3Igc2luY2UgYWZ0ZXJhbGwgeW91IHdvdWxkXG4gICAgICAgICAgICAgKiBleHBlY3QgdHJ5aW5nIHRvIGxvYWQgYSBjb3JydXB0ZWQgbGF5b3V0IHRvIHJlc3VsdCBpbiBhbiBlcnJvciBhbmQgbm90IHNpbGVudGx5IGZhaWwuLi5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlV2F0ZXJtYXJrKCk7XG4gICAgICAgIC8vIEZvcmNlIHBvc2l0aW9uIHVwZGF0ZXMgZm9yIGFsd2F5cyB2aXNpYmxlIHBhbmVscyBhZnRlciBET00gbGF5b3V0IGlzIGNvbXBsZXRlXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm92ZXJsYXlSZW5kZXJDb250YWluZXIudXBkYXRlQWxsUG9zaXRpb25zKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9vbkRpZExheW91dEZyb21KU09OLmZpcmUoKTtcbiAgICB9XG4gICAgY2xlYXIoKSB7XG4gICAgICAgIGNvbnN0IGdyb3VwcyA9IEFycmF5LmZyb20odGhpcy5fZ3JvdXBzLnZhbHVlcygpKS5tYXAoKF8pID0+IF8udmFsdWUpO1xuICAgICAgICBjb25zdCBoYXNBY3RpdmVHcm91cCA9ICEhdGhpcy5hY3RpdmVHcm91cDtcbiAgICAgICAgZm9yIChjb25zdCBncm91cCBvZiBncm91cHMpIHtcbiAgICAgICAgICAgIC8vIHJlbW92ZSB0aGUgZ3JvdXAgd2lsbCBhdXRvbWF0aWNhbGx5IHJlbW92ZSB0aGUgcGFuZWxzXG4gICAgICAgICAgICB0aGlzLnJlbW92ZUdyb3VwKGdyb3VwLCB7IHNraXBBY3RpdmU6IHRydWUgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhc0FjdGl2ZUdyb3VwKSB7XG4gICAgICAgICAgICB0aGlzLmRvU2V0R3JvdXBBbmRQYW5lbEFjdGl2ZSh1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZ3JpZHZpZXcuY2xlYXIoKTtcbiAgICB9XG4gICAgY2xvc2VBbGxHcm91cHMoKSB7XG4gICAgICAgIGZvciAoY29uc3QgZW50cnkgb2YgdGhpcy5fZ3JvdXBzLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgY29uc3QgW18sIGdyb3VwXSA9IGVudHJ5O1xuICAgICAgICAgICAgZ3JvdXAudmFsdWUubW9kZWwuY2xvc2VBbGxQYW5lbHMoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhZGRQYW5lbChvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGlmICh0aGlzLnBhbmVscy5maW5kKChfKSA9PiBfLmlkID09PSBvcHRpb25zLmlkKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBwYW5lbCB3aXRoIGlkICR7b3B0aW9ucy5pZH0gYWxyZWFkeSBleGlzdHNgKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVmZXJlbmNlR3JvdXA7XG4gICAgICAgIGlmIChvcHRpb25zLnBvc2l0aW9uICYmIG9wdGlvbnMuZmxvYXRpbmcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigneW91IGNhbiBvbmx5IHByb3ZpZGUgb25lIG9mOiBwb3NpdGlvbiwgZmxvYXRpbmcgYXMgYXJndW1lbnRzIHRvIC5hZGRQYW5lbCguLi4pJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW5pdGlhbCA9IHtcbiAgICAgICAgICAgIHdpZHRoOiBvcHRpb25zLmluaXRpYWxXaWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogb3B0aW9ucy5pbml0aWFsSGVpZ2h0LFxuICAgICAgICB9O1xuICAgICAgICBsZXQgaW5kZXg7XG4gICAgICAgIGlmIChvcHRpb25zLnBvc2l0aW9uKSB7XG4gICAgICAgICAgICBpZiAoaXNQYW5lbE9wdGlvbnNXaXRoUGFuZWwob3B0aW9ucy5wb3NpdGlvbikpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZWZlcmVuY2VQYW5lbCA9IHR5cGVvZiBvcHRpb25zLnBvc2l0aW9uLnJlZmVyZW5jZVBhbmVsID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgICAgICA/IHRoaXMuZ2V0R3JvdXBQYW5lbChvcHRpb25zLnBvc2l0aW9uLnJlZmVyZW5jZVBhbmVsKVxuICAgICAgICAgICAgICAgICAgICA6IG9wdGlvbnMucG9zaXRpb24ucmVmZXJlbmNlUGFuZWw7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBvcHRpb25zLnBvc2l0aW9uLmluZGV4O1xuICAgICAgICAgICAgICAgIGlmICghcmVmZXJlbmNlUGFuZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGByZWZlcmVuY2VQYW5lbCAnJHtvcHRpb25zLnBvc2l0aW9uLnJlZmVyZW5jZVBhbmVsfScgZG9lcyBub3QgZXhpc3RgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVmZXJlbmNlR3JvdXAgPSB0aGlzLmZpbmRHcm91cChyZWZlcmVuY2VQYW5lbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc1BhbmVsT3B0aW9uc1dpdGhHcm91cChvcHRpb25zLnBvc2l0aW9uKSkge1xuICAgICAgICAgICAgICAgIHJlZmVyZW5jZUdyb3VwID1cbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIG9wdGlvbnMucG9zaXRpb24ucmVmZXJlbmNlR3JvdXAgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICAgICAgICAgICAgICA/IChfYSA9IHRoaXMuX2dyb3Vwcy5nZXQob3B0aW9ucy5wb3NpdGlvbi5yZWZlcmVuY2VHcm91cCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS52YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBvcHRpb25zLnBvc2l0aW9uLnJlZmVyZW5jZUdyb3VwO1xuICAgICAgICAgICAgICAgIGluZGV4ID0gb3B0aW9ucy5wb3NpdGlvbi5pbmRleDtcbiAgICAgICAgICAgICAgICBpZiAoIXJlZmVyZW5jZUdyb3VwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgcmVmZXJlbmNlR3JvdXAgJyR7b3B0aW9ucy5wb3NpdGlvbi5yZWZlcmVuY2VHcm91cH0nIGRvZXMgbm90IGV4aXN0YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZ3JvdXAgPSB0aGlzLm9ydGhvZ29uYWxpemUoZGlyZWN0aW9uVG9Qb3NpdGlvbihvcHRpb25zLnBvc2l0aW9uLmRpcmVjdGlvbikpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhbmVsID0gdGhpcy5jcmVhdGVQYW5lbChvcHRpb25zLCBncm91cCk7XG4gICAgICAgICAgICAgICAgZ3JvdXAubW9kZWwub3BlblBhbmVsKHBhbmVsLCB7XG4gICAgICAgICAgICAgICAgICAgIHNraXBTZXRBY3RpdmU6IG9wdGlvbnMuaW5hY3RpdmUsXG4gICAgICAgICAgICAgICAgICAgIHNraXBTZXRHcm91cEFjdGl2ZTogb3B0aW9ucy5pbmFjdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKCFvcHRpb25zLmluYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9TZXRHcm91cEFuZFBhbmVsQWN0aXZlKGdyb3VwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZ3JvdXAuYXBpLnNldFNpemUoe1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGluaXRpYWwgPT09IG51bGwgfHwgaW5pdGlhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5pdGlhbC5oZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBpbml0aWFsID09PSBudWxsIHx8IGluaXRpYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGluaXRpYWwud2lkdGgsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhbmVsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVmZXJlbmNlR3JvdXAgPSB0aGlzLmFjdGl2ZUdyb3VwO1xuICAgICAgICB9XG4gICAgICAgIGxldCBwYW5lbDtcbiAgICAgICAgaWYgKHJlZmVyZW5jZUdyb3VwKSB7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSB0b1RhcmdldCgoKF9iID0gb3B0aW9ucy5wb3NpdGlvbikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmRpcmVjdGlvbikgfHwgJ3dpdGhpbicpO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZmxvYXRpbmcpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBncm91cCA9IHRoaXMuY3JlYXRlR3JvdXAoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9vbkRpZEFkZEdyb3VwLmZpcmUoZ3JvdXApO1xuICAgICAgICAgICAgICAgIGNvbnN0IGZsb2F0aW5nR3JvdXBPcHRpb25zID0gdHlwZW9mIG9wdGlvbnMuZmxvYXRpbmcgPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZmxvYXRpbmcgIT09IG51bGxcbiAgICAgICAgICAgICAgICAgICAgPyBvcHRpb25zLmZsb2F0aW5nXG4gICAgICAgICAgICAgICAgICAgIDoge307XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRGbG9hdGluZ0dyb3VwKGdyb3VwLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGZsb2F0aW5nR3JvdXBPcHRpb25zKSwgeyBpbkRyYWdNb2RlOiBmYWxzZSwgc2tpcFJlbW92ZUdyb3VwOiB0cnVlLCBza2lwQWN0aXZlR3JvdXA6IHRydWUgfSkpO1xuICAgICAgICAgICAgICAgIHBhbmVsID0gdGhpcy5jcmVhdGVQYW5lbChvcHRpb25zLCBncm91cCk7XG4gICAgICAgICAgICAgICAgZ3JvdXAubW9kZWwub3BlblBhbmVsKHBhbmVsLCB7XG4gICAgICAgICAgICAgICAgICAgIHNraXBTZXRBY3RpdmU6IG9wdGlvbnMuaW5hY3RpdmUsXG4gICAgICAgICAgICAgICAgICAgIHNraXBTZXRHcm91cEFjdGl2ZTogb3B0aW9ucy5pbmFjdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChyZWZlcmVuY2VHcm91cC5hcGkubG9jYXRpb24udHlwZSA9PT0gJ2Zsb2F0aW5nJyB8fFxuICAgICAgICAgICAgICAgIHRhcmdldCA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgICAgICBwYW5lbCA9IHRoaXMuY3JlYXRlUGFuZWwob3B0aW9ucywgcmVmZXJlbmNlR3JvdXApO1xuICAgICAgICAgICAgICAgIHJlZmVyZW5jZUdyb3VwLm1vZGVsLm9wZW5QYW5lbChwYW5lbCwge1xuICAgICAgICAgICAgICAgICAgICBza2lwU2V0QWN0aXZlOiBvcHRpb25zLmluYWN0aXZlLFxuICAgICAgICAgICAgICAgICAgICBza2lwU2V0R3JvdXBBY3RpdmU6IG9wdGlvbnMuaW5hY3RpdmUsXG4gICAgICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJlZmVyZW5jZUdyb3VwLmFwaS5zZXRTaXplKHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGluaXRpYWwgPT09IG51bGwgfHwgaW5pdGlhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5pdGlhbC53aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBpbml0aWFsID09PSBudWxsIHx8IGluaXRpYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGluaXRpYWwuaGVpZ2h0LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucy5pbmFjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvU2V0R3JvdXBBbmRQYW5lbEFjdGl2ZShyZWZlcmVuY2VHcm91cCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYXRpb24gPSBnZXRHcmlkTG9jYXRpb24ocmVmZXJlbmNlR3JvdXAuZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVsYXRpdmVMb2NhdGlvbiA9IGdldFJlbGF0aXZlTG9jYXRpb24odGhpcy5ncmlkdmlldy5vcmllbnRhdGlvbiwgbG9jYXRpb24sIHRhcmdldCk7XG4gICAgICAgICAgICAgICAgY29uc3QgZ3JvdXAgPSB0aGlzLmNyZWF0ZUdyb3VwQXRMb2NhdGlvbihyZWxhdGl2ZUxvY2F0aW9uLCB0aGlzLm9yaWVudGF0aW9uQXRMb2NhdGlvbihyZWxhdGl2ZUxvY2F0aW9uKSA9PT1cbiAgICAgICAgICAgICAgICAgICAgT3JpZW50YXRpb24uVkVSVElDQUxcbiAgICAgICAgICAgICAgICAgICAgPyBpbml0aWFsID09PSBudWxsIHx8IGluaXRpYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGluaXRpYWwuaGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgIDogaW5pdGlhbCA9PT0gbnVsbCB8fCBpbml0aWFsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpbml0aWFsLndpZHRoKTtcbiAgICAgICAgICAgICAgICBwYW5lbCA9IHRoaXMuY3JlYXRlUGFuZWwob3B0aW9ucywgZ3JvdXApO1xuICAgICAgICAgICAgICAgIGdyb3VwLm1vZGVsLm9wZW5QYW5lbChwYW5lbCwge1xuICAgICAgICAgICAgICAgICAgICBza2lwU2V0QWN0aXZlOiBvcHRpb25zLmluYWN0aXZlLFxuICAgICAgICAgICAgICAgICAgICBza2lwU2V0R3JvdXBBY3RpdmU6IG9wdGlvbnMuaW5hY3RpdmUsXG4gICAgICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucy5pbmFjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvU2V0R3JvdXBBbmRQYW5lbEFjdGl2ZShncm91cCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9wdGlvbnMuZmxvYXRpbmcpIHtcbiAgICAgICAgICAgIGNvbnN0IGdyb3VwID0gdGhpcy5jcmVhdGVHcm91cCgpO1xuICAgICAgICAgICAgdGhpcy5fb25EaWRBZGRHcm91cC5maXJlKGdyb3VwKTtcbiAgICAgICAgICAgIGNvbnN0IGNvb3JkaW5hdGVzID0gdHlwZW9mIG9wdGlvbnMuZmxvYXRpbmcgPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5mbG9hdGluZyAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gb3B0aW9ucy5mbG9hdGluZ1xuICAgICAgICAgICAgICAgIDoge307XG4gICAgICAgICAgICB0aGlzLmFkZEZsb2F0aW5nR3JvdXAoZ3JvdXAsIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgY29vcmRpbmF0ZXMpLCB7IGluRHJhZ01vZGU6IGZhbHNlLCBza2lwUmVtb3ZlR3JvdXA6IHRydWUsIHNraXBBY3RpdmVHcm91cDogdHJ1ZSB9KSk7XG4gICAgICAgICAgICBwYW5lbCA9IHRoaXMuY3JlYXRlUGFuZWwob3B0aW9ucywgZ3JvdXApO1xuICAgICAgICAgICAgZ3JvdXAubW9kZWwub3BlblBhbmVsKHBhbmVsLCB7XG4gICAgICAgICAgICAgICAgc2tpcFNldEFjdGl2ZTogb3B0aW9ucy5pbmFjdGl2ZSxcbiAgICAgICAgICAgICAgICBza2lwU2V0R3JvdXBBY3RpdmU6IG9wdGlvbnMuaW5hY3RpdmUsXG4gICAgICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGdyb3VwID0gdGhpcy5jcmVhdGVHcm91cEF0TG9jYXRpb24oWzBdLCB0aGlzLmdyaWR2aWV3Lm9yaWVudGF0aW9uID09PSBPcmllbnRhdGlvbi5WRVJUSUNBTFxuICAgICAgICAgICAgICAgID8gaW5pdGlhbCA9PT0gbnVsbCB8fCBpbml0aWFsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpbml0aWFsLmhlaWdodFxuICAgICAgICAgICAgICAgIDogaW5pdGlhbCA9PT0gbnVsbCB8fCBpbml0aWFsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpbml0aWFsLndpZHRoKTtcbiAgICAgICAgICAgIHBhbmVsID0gdGhpcy5jcmVhdGVQYW5lbChvcHRpb25zLCBncm91cCk7XG4gICAgICAgICAgICBncm91cC5tb2RlbC5vcGVuUGFuZWwocGFuZWwsIHtcbiAgICAgICAgICAgICAgICBza2lwU2V0QWN0aXZlOiBvcHRpb25zLmluYWN0aXZlLFxuICAgICAgICAgICAgICAgIHNraXBTZXRHcm91cEFjdGl2ZTogb3B0aW9ucy5pbmFjdGl2ZSxcbiAgICAgICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zLmluYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kb1NldEdyb3VwQW5kUGFuZWxBY3RpdmUoZ3JvdXApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYW5lbDtcbiAgICB9XG4gICAgcmVtb3ZlUGFuZWwocGFuZWwsIG9wdGlvbnMgPSB7XG4gICAgICAgIHJlbW92ZUVtcHR5R3JvdXA6IHRydWUsXG4gICAgfSkge1xuICAgICAgICBjb25zdCBncm91cCA9IHBhbmVsLmdyb3VwO1xuICAgICAgICBpZiAoIWdyb3VwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNhbm5vdCByZW1vdmUgcGFuZWwgJHtwYW5lbC5pZH0uIGl0J3MgbWlzc2luZyBhIGdyb3VwLmApO1xuICAgICAgICB9XG4gICAgICAgIGdyb3VwLm1vZGVsLnJlbW92ZVBhbmVsKHBhbmVsLCB7XG4gICAgICAgICAgICBza2lwU2V0QWN0aXZlR3JvdXA6IG9wdGlvbnMuc2tpcFNldEFjdGl2ZUdyb3VwLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFvcHRpb25zLnNraXBEaXNwb3NlKSB7XG4gICAgICAgICAgICBwYW5lbC5ncm91cC5tb2RlbC5yZW5kZXJDb250YWluZXIuZGV0YXRjaChwYW5lbCk7XG4gICAgICAgICAgICBwYW5lbC5kaXNwb3NlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdyb3VwLnNpemUgPT09IDAgJiYgb3B0aW9ucy5yZW1vdmVFbXB0eUdyb3VwKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUdyb3VwKGdyb3VwLCB7IHNraXBBY3RpdmU6IG9wdGlvbnMuc2tpcFNldEFjdGl2ZUdyb3VwIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNyZWF0ZVdhdGVybWFya0NvbXBvbmVudCgpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5jcmVhdGVXYXRlcm1hcmtDb21wb25lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuY3JlYXRlV2F0ZXJtYXJrQ29tcG9uZW50KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBXYXRlcm1hcmsoKTtcbiAgICB9XG4gICAgdXBkYXRlV2F0ZXJtYXJrKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBpZiAodGhpcy5ncm91cHMuZmlsdGVyKCh4KSA9PiB4LmFwaS5sb2NhdGlvbi50eXBlID09PSAnZ3JpZCcgJiYgeC5hcGkuaXNWaXNpYmxlKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fd2F0ZXJtYXJrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2F0ZXJtYXJrID0gdGhpcy5jcmVhdGVXYXRlcm1hcmtDb21wb25lbnQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl93YXRlcm1hcmsuaW5pdCh7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lckFwaTogbmV3IERvY2t2aWV3QXBpKHRoaXMpLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IHdhdGVybWFya0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgIHdhdGVybWFya0NvbnRhaW5lci5jbGFzc05hbWUgPSAnZHYtd2F0ZXJtYXJrLWNvbnRhaW5lcic7XG4gICAgICAgICAgICAgICAgYWRkVGVzdElkKHdhdGVybWFya0NvbnRhaW5lciwgJ3dhdGVybWFyay1jb21wb25lbnQnKTtcbiAgICAgICAgICAgICAgICB3YXRlcm1hcmtDb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5fd2F0ZXJtYXJrLmVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIHRoaXMuZ3JpZHZpZXcuZWxlbWVudC5hcHBlbmRDaGlsZCh3YXRlcm1hcmtDb250YWluZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuX3dhdGVybWFyaykge1xuICAgICAgICAgICAgdGhpcy5fd2F0ZXJtYXJrLmVsZW1lbnQucGFyZW50RWxlbWVudC5yZW1vdmUoKTtcbiAgICAgICAgICAgIChfYiA9IChfYSA9IHRoaXMuX3dhdGVybWFyaykuZGlzcG9zZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EpO1xuICAgICAgICAgICAgdGhpcy5fd2F0ZXJtYXJrID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhZGRHcm91cChvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGxldCByZWZlcmVuY2VHcm91cDtcbiAgICAgICAgICAgIGlmIChpc0dyb3VwT3B0aW9uc1dpdGhQYW5lbChvcHRpb25zKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZmVyZW5jZVBhbmVsID0gdHlwZW9mIG9wdGlvbnMucmVmZXJlbmNlUGFuZWwgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5wYW5lbHMuZmluZCgocGFuZWwpID0+IHBhbmVsLmlkID09PSBvcHRpb25zLnJlZmVyZW5jZVBhbmVsKVxuICAgICAgICAgICAgICAgICAgICA6IG9wdGlvbnMucmVmZXJlbmNlUGFuZWw7XG4gICAgICAgICAgICAgICAgaWYgKCFyZWZlcmVuY2VQYW5lbCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHJlZmVyZW5jZSBwYW5lbCAke29wdGlvbnMucmVmZXJlbmNlUGFuZWx9IGRvZXMgbm90IGV4aXN0YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlZmVyZW5jZUdyb3VwID0gdGhpcy5maW5kR3JvdXAocmVmZXJlbmNlUGFuZWwpO1xuICAgICAgICAgICAgICAgIGlmICghcmVmZXJlbmNlR3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGByZWZlcmVuY2UgZ3JvdXAgZm9yIHJlZmVyZW5jZSBwYW5lbCAke29wdGlvbnMucmVmZXJlbmNlUGFuZWx9IGRvZXMgbm90IGV4aXN0YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNHcm91cE9wdGlvbnNXaXRoR3JvdXAob3B0aW9ucykpIHtcbiAgICAgICAgICAgICAgICByZWZlcmVuY2VHcm91cCA9XG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBvcHRpb25zLnJlZmVyZW5jZUdyb3VwID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgICAgICAgICAgPyAoX2EgPSB0aGlzLl9ncm91cHMuZ2V0KG9wdGlvbnMucmVmZXJlbmNlR3JvdXApKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgIDogb3B0aW9ucy5yZWZlcmVuY2VHcm91cDtcbiAgICAgICAgICAgICAgICBpZiAoIXJlZmVyZW5jZUdyb3VwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgcmVmZXJlbmNlIGdyb3VwICR7b3B0aW9ucy5yZWZlcmVuY2VHcm91cH0gZG9lcyBub3QgZXhpc3RgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBncm91cCA9IHRoaXMub3J0aG9nb25hbGl6ZShkaXJlY3Rpb25Ub1Bvc2l0aW9uKG9wdGlvbnMuZGlyZWN0aW9uKSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgaWYgKCFvcHRpb25zLnNraXBTZXRBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb1NldEdyb3VwQW5kUGFuZWxBY3RpdmUoZ3JvdXApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZ3JvdXA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSB0b1RhcmdldChvcHRpb25zLmRpcmVjdGlvbiB8fCAnd2l0aGluJyk7XG4gICAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9IGdldEdyaWRMb2NhdGlvbihyZWZlcmVuY2VHcm91cC5lbGVtZW50KTtcbiAgICAgICAgICAgIGNvbnN0IHJlbGF0aXZlTG9jYXRpb24gPSBnZXRSZWxhdGl2ZUxvY2F0aW9uKHRoaXMuZ3JpZHZpZXcub3JpZW50YXRpb24sIGxvY2F0aW9uLCB0YXJnZXQpO1xuICAgICAgICAgICAgY29uc3QgZ3JvdXAgPSB0aGlzLmNyZWF0ZUdyb3VwKG9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3Qgc2l6ZSA9IHRoaXMuZ2V0TG9jYXRpb25PcmllbnRhdGlvbihyZWxhdGl2ZUxvY2F0aW9uKSA9PT1cbiAgICAgICAgICAgICAgICBPcmllbnRhdGlvbi5WRVJUSUNBTFxuICAgICAgICAgICAgICAgID8gb3B0aW9ucy5pbml0aWFsSGVpZ2h0XG4gICAgICAgICAgICAgICAgOiBvcHRpb25zLmluaXRpYWxXaWR0aDtcbiAgICAgICAgICAgIHRoaXMuZG9BZGRHcm91cChncm91cCwgcmVsYXRpdmVMb2NhdGlvbiwgc2l6ZSk7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMuc2tpcFNldEFjdGl2ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZG9TZXRHcm91cEFuZFBhbmVsQWN0aXZlKGdyb3VwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBncm91cDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGdyb3VwID0gdGhpcy5jcmVhdGVHcm91cChvcHRpb25zKTtcbiAgICAgICAgICAgIHRoaXMuZG9BZGRHcm91cChncm91cCk7XG4gICAgICAgICAgICB0aGlzLmRvU2V0R3JvdXBBbmRQYW5lbEFjdGl2ZShncm91cCk7XG4gICAgICAgICAgICByZXR1cm4gZ3JvdXA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0TG9jYXRpb25PcmllbnRhdGlvbihsb2NhdGlvbikge1xuICAgICAgICByZXR1cm4gbG9jYXRpb24ubGVuZ3RoICUgMiA9PSAwICYmXG4gICAgICAgICAgICB0aGlzLmdyaWR2aWV3Lm9yaWVudGF0aW9uID09PSBPcmllbnRhdGlvbi5IT1JJWk9OVEFMXG4gICAgICAgICAgICA/IE9yaWVudGF0aW9uLkhPUklaT05UQUxcbiAgICAgICAgICAgIDogT3JpZW50YXRpb24uVkVSVElDQUw7XG4gICAgfVxuICAgIHJlbW92ZUdyb3VwKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuZG9SZW1vdmVHcm91cChncm91cCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGRvUmVtb3ZlR3JvdXAoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBwYW5lbHMgPSBbLi4uZ3JvdXAucGFuZWxzXTsgLy8gcmVhc3NpZ24gc2luY2UgZ3JvdXAgcGFuZWxzIHdpbGwgbXV0YXRlXG4gICAgICAgIGlmICghKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5za2lwRGlzcG9zZSkpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcGFuZWwgb2YgcGFuZWxzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVQYW5lbChwYW5lbCwge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVFbXB0eUdyb3VwOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgc2tpcERpc3Bvc2U6IChfYSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5za2lwRGlzcG9zZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYWN0aXZlUGFuZWwgPSB0aGlzLmFjdGl2ZVBhbmVsO1xuICAgICAgICBpZiAoZ3JvdXAuYXBpLmxvY2F0aW9uLnR5cGUgPT09ICdmbG9hdGluZycpIHtcbiAgICAgICAgICAgIGNvbnN0IGZsb2F0aW5nR3JvdXAgPSB0aGlzLl9mbG9hdGluZ0dyb3Vwcy5maW5kKChfKSA9PiBfLmdyb3VwID09PSBncm91cCk7XG4gICAgICAgICAgICBpZiAoZmxvYXRpbmdHcm91cCkge1xuICAgICAgICAgICAgICAgIGlmICghKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5za2lwRGlzcG9zZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZmxvYXRpbmdHcm91cC5ncm91cC5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2dyb3Vwcy5kZWxldGUoZ3JvdXAuaWQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9vbkRpZFJlbW92ZUdyb3VwLmZpcmUoZ3JvdXApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZW1vdmUodGhpcy5fZmxvYXRpbmdHcm91cHMsIGZsb2F0aW5nR3JvdXApO1xuICAgICAgICAgICAgICAgIGZsb2F0aW5nR3JvdXAuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIGlmICghKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5za2lwQWN0aXZlKSAmJiB0aGlzLl9hY3RpdmVHcm91cCA9PT0gZ3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZ3JvdXBzID0gQXJyYXkuZnJvbSh0aGlzLl9ncm91cHMudmFsdWVzKCkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvU2V0R3JvdXBBbmRQYW5lbEFjdGl2ZShncm91cHMubGVuZ3RoID4gMCA/IGdyb3Vwc1swXS52YWx1ZSA6IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmbG9hdGluZ0dyb3VwLmdyb3VwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdmYWlsZWQgdG8gZmluZCBmbG9hdGluZyBncm91cCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChncm91cC5hcGkubG9jYXRpb24udHlwZSA9PT0gJ3BvcG91dCcpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkR3JvdXAgPSB0aGlzLl9wb3BvdXRHcm91cHMuZmluZCgoXykgPT4gXy5wb3BvdXRHcm91cCA9PT0gZ3JvdXApO1xuICAgICAgICAgICAgaWYgKHNlbGVjdGVkR3JvdXApIHtcbiAgICAgICAgICAgICAgICBpZiAoIShvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuc2tpcERpc3Bvc2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5za2lwUG9wb3V0QXNzb2NpYXRlZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlZkdyb3VwID0gc2VsZWN0ZWRHcm91cC5yZWZlcmVuY2VHcm91cFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5nZXRQYW5lbChzZWxlY3RlZEdyb3VwLnJlZmVyZW5jZUdyb3VwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlZkdyb3VwICYmIHJlZkdyb3VwLnBhbmVscy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUdyb3VwKHJlZkdyb3VwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZEdyb3VwLnBvcG91dEdyb3VwLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZ3JvdXBzLmRlbGV0ZShncm91cC5pZCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29uRGlkUmVtb3ZlR3JvdXAuZmlyZShncm91cCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlbW92ZSh0aGlzLl9wb3BvdXRHcm91cHMsIHNlbGVjdGVkR3JvdXApO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlbW92ZWRHcm91cCA9IHNlbGVjdGVkR3JvdXAuZGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgaWYgKCEob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnNraXBQb3BvdXRSZXR1cm4pICYmIHJlbW92ZWRHcm91cCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvQWRkR3JvdXAocmVtb3ZlZEdyb3VwLCBbMF0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvU2V0R3JvdXBBbmRQYW5lbEFjdGl2ZShyZW1vdmVkR3JvdXApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIShvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuc2tpcEFjdGl2ZSkgJiYgdGhpcy5fYWN0aXZlR3JvdXAgPT09IGdyb3VwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwcyA9IEFycmF5LmZyb20odGhpcy5fZ3JvdXBzLnZhbHVlcygpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb1NldEdyb3VwQW5kUGFuZWxBY3RpdmUoZ3JvdXBzLmxlbmd0aCA+IDAgPyBncm91cHNbMF0udmFsdWUgOiB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVdhdGVybWFyaygpO1xuICAgICAgICAgICAgICAgIHJldHVybiBzZWxlY3RlZEdyb3VwLnBvcG91dEdyb3VwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdmYWlsZWQgdG8gZmluZCBwb3BvdXQgZ3JvdXAnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZSA9IHN1cGVyLmRvUmVtb3ZlR3JvdXAoZ3JvdXAsIG9wdGlvbnMpO1xuICAgICAgICBpZiAoIShvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuc2tpcEFjdGl2ZSkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmFjdGl2ZVBhbmVsICE9PSBhY3RpdmVQYW5lbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX29uRGlkQWN0aXZlUGFuZWxDaGFuZ2UuZmlyZSh0aGlzLmFjdGl2ZVBhbmVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmU7XG4gICAgfVxuICAgIG1vdmluZ0xvY2soZnVuYykge1xuICAgICAgICBjb25zdCBpc01vdmluZyA9IHRoaXMuX21vdmluZztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuX21vdmluZyA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gZnVuYygpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdGhpcy5fbW92aW5nID0gaXNNb3Zpbmc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbW92ZUdyb3VwT3JQYW5lbChvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgZGVzdGluYXRpb25Hcm91cCA9IG9wdGlvbnMudG8uZ3JvdXA7XG4gICAgICAgIGNvbnN0IHNvdXJjZUdyb3VwSWQgPSBvcHRpb25zLmZyb20uZ3JvdXBJZDtcbiAgICAgICAgY29uc3Qgc291cmNlSXRlbUlkID0gb3B0aW9ucy5mcm9tLnBhbmVsSWQ7XG4gICAgICAgIGNvbnN0IGRlc3RpbmF0aW9uVGFyZ2V0ID0gb3B0aW9ucy50by5wb3NpdGlvbjtcbiAgICAgICAgY29uc3QgZGVzdGluYXRpb25JbmRleCA9IG9wdGlvbnMudG8uaW5kZXg7XG4gICAgICAgIGNvbnN0IHNvdXJjZUdyb3VwID0gc291cmNlR3JvdXBJZFxuICAgICAgICAgICAgPyAoX2EgPSB0aGlzLl9ncm91cHMuZ2V0KHNvdXJjZUdyb3VwSWQpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudmFsdWVcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBpZiAoIXNvdXJjZUdyb3VwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBmaW5kIGdyb3VwIGlkICR7c291cmNlR3JvdXBJZH1gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc291cmNlSXRlbUlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogTW92aW5nIGFuIGVudGlyZSBncm91cCBpbnRvIGFub3RoZXIgZ3JvdXBcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5tb3ZlR3JvdXAoe1xuICAgICAgICAgICAgICAgIGZyb206IHsgZ3JvdXA6IHNvdXJjZUdyb3VwIH0sXG4gICAgICAgICAgICAgICAgdG86IHtcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXA6IGRlc3RpbmF0aW9uR3JvdXAsXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBkZXN0aW5hdGlvblRhcmdldCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNraXBTZXRBY3RpdmU6IG9wdGlvbnMuc2tpcFNldEFjdGl2ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZGVzdGluYXRpb25UYXJnZXQgfHwgZGVzdGluYXRpb25UYXJnZXQgPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERyb3BwaW5nIGEgcGFuZWwgd2l0aGluIGFub3RoZXIgZ3JvdXBcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3QgcmVtb3ZlZFBhbmVsID0gdGhpcy5tb3ZpbmdMb2NrKCgpID0+IHNvdXJjZUdyb3VwLm1vZGVsLnJlbW92ZVBhbmVsKHNvdXJjZUl0ZW1JZCwge1xuICAgICAgICAgICAgICAgIHNraXBTZXRBY3RpdmU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNraXBTZXRBY3RpdmVHcm91cDogdHJ1ZSxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIGlmICghcmVtb3ZlZFBhbmVsKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBwYW5lbCB3aXRoIGlkICR7c291cmNlSXRlbUlkfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNvdXJjZUdyb3VwLm1vZGVsLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgdGhlIGdyb3VwIGFuZCBkbyBub3Qgc2V0IGEgbmV3IGdyb3VwIGFzIGFjdGl2ZVxuICAgICAgICAgICAgICAgIHRoaXMuZG9SZW1vdmVHcm91cChzb3VyY2VHcm91cCwgeyBza2lwQWN0aXZlOiB0cnVlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgZGVzdGluYXRpb24gZ3JvdXAgaXMgZW1wdHkgLSBpZiBzbywgZm9yY2UgcmVuZGVyIHRoZSBjb21wb25lbnRcbiAgICAgICAgICAgIGNvbnN0IGlzRGVzdGluYXRpb25Hcm91cEVtcHR5ID0gZGVzdGluYXRpb25Hcm91cC5tb2RlbC5zaXplID09PSAwO1xuICAgICAgICAgICAgdGhpcy5tb3ZpbmdMb2NrKCgpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlc3RpbmF0aW9uR3JvdXAubW9kZWwub3BlblBhbmVsKHJlbW92ZWRQYW5lbCwge1xuICAgICAgICAgICAgICAgICAgICBpbmRleDogZGVzdGluYXRpb25JbmRleCxcbiAgICAgICAgICAgICAgICAgICAgc2tpcFNldEFjdGl2ZTogKChfYSA9IG9wdGlvbnMuc2tpcFNldEFjdGl2ZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZmFsc2UpICYmICFpc0Rlc3RpbmF0aW9uR3JvdXBFbXB0eSxcbiAgICAgICAgICAgICAgICAgICAgc2tpcFNldEdyb3VwQWN0aXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMuc2tpcFNldEFjdGl2ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZG9TZXRHcm91cEFuZFBhbmVsQWN0aXZlKGRlc3RpbmF0aW9uR3JvdXApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fb25EaWRNb3ZlUGFuZWwuZmlyZSh7XG4gICAgICAgICAgICAgICAgcGFuZWw6IHJlbW92ZWRQYW5lbCxcbiAgICAgICAgICAgICAgICBmcm9tOiBzb3VyY2VHcm91cCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBEcm9wcGluZyBhIHBhbmVsIHRvIHRoZSBleHRyZW1pdGllcyBvZiBhIGdyb3VwIHdoaWNoIHdpbGwgcGxhY2UgdGhhdCBwYW5lbFxuICAgICAgICAgICAgICogaW50byBhbiBhZGphY2VudCBncm91cFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb25zdCByZWZlcmVuY2VMb2NhdGlvbiA9IGdldEdyaWRMb2NhdGlvbihkZXN0aW5hdGlvbkdyb3VwLmVsZW1lbnQpO1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0TG9jYXRpb24gPSBnZXRSZWxhdGl2ZUxvY2F0aW9uKHRoaXMuZ3JpZHZpZXcub3JpZW50YXRpb24sIHJlZmVyZW5jZUxvY2F0aW9uLCBkZXN0aW5hdGlvblRhcmdldCk7XG4gICAgICAgICAgICBpZiAoc291cmNlR3JvdXAuc2l6ZSA8IDIpIHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBJZiB3ZSBhcmUgbW92aW5nIGZyb20gYSBncm91cCB3aGljaCBvbmx5IGhhcyBvbmUgcGFuZWwgbGVmdCB3ZSB3aWxsIGNvbnNpZGVyXG4gICAgICAgICAgICAgICAgICogbW92aW5nIHRoZSBncm91cCBpdHNlbGYgcmF0aGVyIHRoYW4gbW92aW5nIHRoZSBwYW5lbCBpbnRvIGEgbmV3bHkgY3JlYXRlZCBncm91cFxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGNvbnN0IFt0YXJnZXRQYXJlbnRMb2NhdGlvbiwgdG9dID0gdGFpbCh0YXJnZXRMb2NhdGlvbik7XG4gICAgICAgICAgICAgICAgaWYgKHNvdXJjZUdyb3VwLmFwaS5sb2NhdGlvbi50eXBlID09PSAnZ3JpZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc291cmNlTG9jYXRpb24gPSBnZXRHcmlkTG9jYXRpb24oc291cmNlR3JvdXAuZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IFtzb3VyY2VQYXJlbnRMb2NhdGlvbiwgZnJvbV0gPSB0YWlsKHNvdXJjZUxvY2F0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlcXVlbmNlRXF1YWxzKHNvdXJjZVBhcmVudExvY2F0aW9uLCB0YXJnZXRQYXJlbnRMb2NhdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNwZWNpYWwgY2FzZSB3aGVuICdzd2FwcGluZycgdHdvIHZpZXdzIHdpdGhpbiBzYW1lIGdyaWQgbG9jYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIGEgZ3JvdXAgaGFzIG9uZSB0YWIgLSB3ZSBhcmUgZXNzZW50aWFsbHkgbW92aW5nIHRoZSAnZ3JvdXAnXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB3aGljaCBpcyBlcXVpdmFsZW50IHRvIHN3YXBwaW5nIHR3byB2aWV3cyBpbiB0aGlzIGNhc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ3JpZHZpZXcubW92ZVZpZXcoc291cmNlUGFyZW50TG9jYXRpb24sIGZyb20sIHRvKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29uRGlkTW92ZVBhbmVsLmZpcmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhbmVsOiB0aGlzLmdldEdyb3VwUGFuZWwoc291cmNlSXRlbUlkKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tOiBzb3VyY2VHcm91cCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzb3VyY2VHcm91cC5hcGkubG9jYXRpb24udHlwZSA9PT0gJ3BvcG91dCcpIHtcbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIHRoZSBzb3VyY2UgZ3JvdXAgaXMgYSBwb3BvdXQgZ3JvdXAgd2l0aCBhIHNpbmdsZSBwYW5lbFxuICAgICAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAgICAgKiAxLiByZW1vdmUgdGhlIHBhbmVsIGZyb20gdGhlIGdyb3VwIHdpdGhvdXQgdHJpZ2dlcmluZyBhbnkgZXZlbnRzXG4gICAgICAgICAgICAgICAgICAgICAqIDIuIHJlbW92ZSB0aGUgcG9wb3V0IGdyb3VwXG4gICAgICAgICAgICAgICAgICAgICAqIDMuIGNyZWF0ZSBhIG5ldyBncm91cCBhdCB0aGUgcmVxdWVzdGVkIGxvY2F0aW9uIGFuZCBhZGQgdGhhdCBwYW5lbFxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcG9wb3V0R3JvdXAgPSB0aGlzLl9wb3BvdXRHcm91cHMuZmluZCgoZ3JvdXApID0+IGdyb3VwLnBvcG91dEdyb3VwID09PSBzb3VyY2VHcm91cCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlbW92ZWRQYW5lbCA9IHRoaXMubW92aW5nTG9jaygoKSA9PiBwb3BvdXRHcm91cC5wb3BvdXRHcm91cC5tb2RlbC5yZW1vdmVQYW5lbChwb3BvdXRHcm91cC5wb3BvdXRHcm91cC5wYW5lbHNbMF0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNraXBTZXRBY3RpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBza2lwU2V0QWN0aXZlR3JvdXA6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb1JlbW92ZUdyb3VwKHNvdXJjZUdyb3VwLCB7IHNraXBBY3RpdmU6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0dyb3VwID0gdGhpcy5jcmVhdGVHcm91cEF0TG9jYXRpb24odGFyZ2V0TG9jYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vdmluZ0xvY2soKCkgPT4gbmV3R3JvdXAubW9kZWwub3BlblBhbmVsKHJlbW92ZWRQYW5lbCkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvU2V0R3JvdXBBbmRQYW5lbEFjdGl2ZShuZXdHcm91cCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29uRGlkTW92ZVBhbmVsLmZpcmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFuZWw6IHRoaXMuZ2V0R3JvdXBQYW5lbChzb3VyY2VJdGVtSWQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogc291cmNlR3JvdXAsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHNvdXJjZSBncm91cCB3aWxsIGJlY29tZSBlbXB0eSBzbyBkZWxldGUgdGhlIGdyb3VwXG4gICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0R3JvdXAgPSB0aGlzLm1vdmluZ0xvY2soKCkgPT4gdGhpcy5kb1JlbW92ZUdyb3VwKHNvdXJjZUdyb3VwLCB7XG4gICAgICAgICAgICAgICAgICAgIHNraXBBY3RpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHNraXBEaXNwb3NlOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAvLyBhZnRlciBkZWxldGluZyB0aGUgZ3JvdXAgd2UgbmVlZCB0byByZS1ldmF1bGF0ZSB0aGUgcmVmIGxvY2F0aW9uXG4gICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlZFJlZmVyZW5jZUxvY2F0aW9uID0gZ2V0R3JpZExvY2F0aW9uKGRlc3RpbmF0aW9uR3JvdXAuZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYXRpb24gPSBnZXRSZWxhdGl2ZUxvY2F0aW9uKHRoaXMuZ3JpZHZpZXcub3JpZW50YXRpb24sIHVwZGF0ZWRSZWZlcmVuY2VMb2NhdGlvbiwgZGVzdGluYXRpb25UYXJnZXQpO1xuICAgICAgICAgICAgICAgIHRoaXMubW92aW5nTG9jaygoKSA9PiB0aGlzLmRvQWRkR3JvdXAodGFyZ2V0R3JvdXAsIGxvY2F0aW9uKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5kb1NldEdyb3VwQW5kUGFuZWxBY3RpdmUodGFyZ2V0R3JvdXApO1xuICAgICAgICAgICAgICAgIHRoaXMuX29uRGlkTW92ZVBhbmVsLmZpcmUoe1xuICAgICAgICAgICAgICAgICAgICBwYW5lbDogdGhpcy5nZXRHcm91cFBhbmVsKHNvdXJjZUl0ZW1JZCksXG4gICAgICAgICAgICAgICAgICAgIGZyb206IHNvdXJjZUdyb3VwLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogVGhlIGdyb3VwIHdlIGFyZSByZW1vdmluZyBmcm9tIGhhcyBtYW55IHBhbmVscywgd2UgbmVlZCB0byByZW1vdmUgdGhlIHBhbmVscyB3ZSBhcmUgbW92aW5nLFxuICAgICAgICAgICAgICAgICAqIGNyZWF0ZSBhIG5ldyBncm91cCwgYWRkIHRoZSBwYW5lbHMgdG8gdGhhdCBuZXcgZ3JvdXAgYW5kIGFkZCB0aGUgbmV3IGdyb3VwIGluIGFuIGFwcHJvcGlhdGUgcG9zaXRpb25cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBjb25zdCByZW1vdmVkUGFuZWwgPSB0aGlzLm1vdmluZ0xvY2soKCkgPT4gc291cmNlR3JvdXAubW9kZWwucmVtb3ZlUGFuZWwoc291cmNlSXRlbUlkLCB7XG4gICAgICAgICAgICAgICAgICAgIHNraXBTZXRBY3RpdmU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBza2lwU2V0QWN0aXZlR3JvdXA6IHRydWUsXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIGlmICghcmVtb3ZlZFBhbmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gcGFuZWwgd2l0aCBpZCAke3NvdXJjZUl0ZW1JZH1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgZHJvcExvY2F0aW9uID0gZ2V0UmVsYXRpdmVMb2NhdGlvbih0aGlzLmdyaWR2aWV3Lm9yaWVudGF0aW9uLCByZWZlcmVuY2VMb2NhdGlvbiwgZGVzdGluYXRpb25UYXJnZXQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwID0gdGhpcy5jcmVhdGVHcm91cEF0TG9jYXRpb24oZHJvcExvY2F0aW9uKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1vdmluZ0xvY2soKCkgPT4gZ3JvdXAubW9kZWwub3BlblBhbmVsKHJlbW92ZWRQYW5lbCwge1xuICAgICAgICAgICAgICAgICAgICBza2lwU2V0R3JvdXBBY3RpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIHRoaXMuZG9TZXRHcm91cEFuZFBhbmVsQWN0aXZlKGdyb3VwKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9vbkRpZE1vdmVQYW5lbC5maXJlKHtcbiAgICAgICAgICAgICAgICAgICAgcGFuZWw6IHJlbW92ZWRQYW5lbCxcbiAgICAgICAgICAgICAgICAgICAgZnJvbTogc291cmNlR3JvdXAsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgbW92ZUdyb3VwKG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgZnJvbSA9IG9wdGlvbnMuZnJvbS5ncm91cDtcbiAgICAgICAgY29uc3QgdG8gPSBvcHRpb25zLnRvLmdyb3VwO1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBvcHRpb25zLnRvLnBvc2l0aW9uO1xuICAgICAgICBpZiAodGFyZ2V0ID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgY29uc3QgYWN0aXZlUGFuZWwgPSBmcm9tLmFjdGl2ZVBhbmVsO1xuICAgICAgICAgICAgY29uc3QgcGFuZWxzID0gdGhpcy5tb3ZpbmdMb2NrKCgpID0+IFsuLi5mcm9tLnBhbmVsc10ubWFwKChwKSA9PiBmcm9tLm1vZGVsLnJlbW92ZVBhbmVsKHAuaWQsIHtcbiAgICAgICAgICAgICAgICBza2lwU2V0QWN0aXZlOiB0cnVlLFxuICAgICAgICAgICAgfSkpKTtcbiAgICAgICAgICAgIGlmICgoZnJvbSA9PT0gbnVsbCB8fCBmcm9tID09PSB2b2lkIDAgPyB2b2lkIDAgOiBmcm9tLm1vZGVsLnNpemUpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kb1JlbW92ZUdyb3VwKGZyb20sIHsgc2tpcEFjdGl2ZTogdHJ1ZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubW92aW5nTG9jaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBwYW5lbCBvZiBwYW5lbHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdG8ubW9kZWwub3BlblBhbmVsKHBhbmVsLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBza2lwU2V0QWN0aXZlOiBwYW5lbCAhPT0gYWN0aXZlUGFuZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICBza2lwU2V0R3JvdXBBY3RpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gRW5zdXJlIGdyb3VwIGJlY29tZXMgYWN0aXZlIGFmdGVyIG1vdmVcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnNraXBTZXRBY3RpdmUgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAvLyBGb3IgY2VudGVyIG1vdmVzIChtZXJnZXMpLCB3ZSBuZWVkIHRvIGVuc3VyZSB0aGUgdGFyZ2V0IGdyb3VwIGlzIGFjdGl2ZVxuICAgICAgICAgICAgICAgIC8vIHVubGVzcyBleHBsaWNpdGx5IHRvbGQgbm90IHRvIChza2lwU2V0QWN0aXZlOiB0cnVlKVxuICAgICAgICAgICAgICAgIHRoaXMuZG9TZXRHcm91cEFuZFBhbmVsQWN0aXZlKHRvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCF0aGlzLmFjdGl2ZVBhbmVsKSB7XG4gICAgICAgICAgICAgICAgLy8gRXZlbiB3aXRoIHNraXBTZXRBY3RpdmU6IHRydWUsIGVuc3VyZSB0aGVyZSdzIGFuIGFjdGl2ZSBwYW5lbCBpZiBub25lIGV4aXN0c1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgbWFpbnRhaW5zIGJhc2ljIGZ1bmN0aW9uYWxpdHkgd2hpbGUgcmVzcGVjdGluZyBza2lwU2V0QWN0aXZlXG4gICAgICAgICAgICAgICAgdGhpcy5kb1NldEdyb3VwQW5kUGFuZWxBY3RpdmUodG8pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3dpdGNoIChmcm9tLmFwaS5sb2NhdGlvbi50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZ3JpZCc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ3JpZHZpZXcucmVtb3ZlVmlldyhnZXRHcmlkTG9jYXRpb24oZnJvbS5lbGVtZW50KSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2Zsb2F0aW5nJzoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RlZEZsb2F0aW5nR3JvdXAgPSB0aGlzLl9mbG9hdGluZ0dyb3Vwcy5maW5kKCh4KSA9PiB4Lmdyb3VwID09PSBmcm9tKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWxlY3RlZEZsb2F0aW5nR3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZmFpbGVkIHRvIGZpbmQgZmxvYXRpbmcgZ3JvdXAnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZEZsb2F0aW5nR3JvdXAuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAncG9wb3V0Jzoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RlZFBvcG91dEdyb3VwID0gdGhpcy5fcG9wb3V0R3JvdXBzLmZpbmQoKHgpID0+IHgucG9wb3V0R3JvdXAgPT09IGZyb20pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXNlbGVjdGVkUG9wb3V0R3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZmFpbGVkIHRvIGZpbmQgcG9wb3V0IGdyb3VwJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGZyb20gcG9wb3V0IGdyb3VwcyBsaXN0IHRvIHByZXZlbnQgYXV0b21hdGljIHJlc3RvcmF0aW9uXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fcG9wb3V0R3JvdXBzLmluZGV4T2Yoc2VsZWN0ZWRQb3BvdXRHcm91cCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wb3BvdXRHcm91cHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBDbGVhbiB1cCB0aGUgcmVmZXJlbmNlIGdyb3VwIChnaG9zdCkgaWYgaXQgZXhpc3RzIGFuZCBpcyBoaWRkZW5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkUG9wb3V0R3JvdXAucmVmZXJlbmNlR3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlZmVyZW5jZUdyb3VwID0gdGhpcy5nZXRQYW5lbChzZWxlY3RlZFBvcG91dEdyb3VwLnJlZmVyZW5jZUdyb3VwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWZlcmVuY2VHcm91cCAmJiAhcmVmZXJlbmNlR3JvdXAuYXBpLmlzVmlzaWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZG9SZW1vdmVHcm91cChyZWZlcmVuY2VHcm91cCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lwQWN0aXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIE1hbnVhbGx5IGRpc3Bvc2UgdGhlIHdpbmRvdyB3aXRob3V0IHRyaWdnZXJpbmcgcmVzdG9yYXRpb25cbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRQb3BvdXRHcm91cC53aW5kb3cuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgZ3JvdXAncyBsb2NhdGlvbiBhbmQgY29udGFpbmVycyBmb3IgdGFyZ2V0XG4gICAgICAgICAgICAgICAgICAgIGlmICh0by5hcGkubG9jYXRpb24udHlwZSA9PT0gJ2dyaWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tLm1vZGVsLnJlbmRlckNvbnRhaW5lciA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vdmVybGF5UmVuZGVyQ29udGFpbmVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbS5tb2RlbC5kcm9wVGFyZ2V0Q29udGFpbmVyID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJvb3REcm9wVGFyZ2V0Q29udGFpbmVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbS5tb2RlbC5sb2NhdGlvbiA9IHsgdHlwZTogJ2dyaWQnIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodG8uYXBpLmxvY2F0aW9uLnR5cGUgPT09ICdmbG9hdGluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb20ubW9kZWwucmVuZGVyQ29udGFpbmVyID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm92ZXJsYXlSZW5kZXJDb250YWluZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tLm1vZGVsLmRyb3BUYXJnZXRDb250YWluZXIgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucm9vdERyb3BUYXJnZXRDb250YWluZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tLm1vZGVsLmxvY2F0aW9uID0geyB0eXBlOiAnZmxvYXRpbmcnIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRm9yIG1vdmVzIHRvIGdyaWQgbG9jYXRpb25zXG4gICAgICAgICAgICBpZiAodG8uYXBpLmxvY2F0aW9uLnR5cGUgPT09ICdncmlkJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZmVyZW5jZUxvY2F0aW9uID0gZ2V0R3JpZExvY2F0aW9uKHRvLmVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRyb3BMb2NhdGlvbiA9IGdldFJlbGF0aXZlTG9jYXRpb24odGhpcy5ncmlkdmlldy5vcmllbnRhdGlvbiwgcmVmZXJlbmNlTG9jYXRpb24sIHRhcmdldCk7XG4gICAgICAgICAgICAgICAgLy8gQWRkIHRvIGdyaWQgZm9yIGFsbCBtb3ZlcyB0YXJnZXRpbmcgZ3JpZCBsb2NhdGlvblxuICAgICAgICAgICAgICAgIGxldCBzaXplO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5ncmlkdmlldy5vcmllbnRhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIE9yaWVudGF0aW9uLlZFUlRJQ0FMOlxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmZXJlbmNlTG9jYXRpb24ubGVuZ3RoICUgMiA9PSAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZnJvbS5hcGkud2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBmcm9tLmFwaS5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBPcmllbnRhdGlvbi5IT1JJWk9OVEFMOlxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmZXJlbmNlTG9jYXRpb24ubGVuZ3RoICUgMiA9PSAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZnJvbS5hcGkuaGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZnJvbS5hcGkud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5ncmlkdmlldy5hZGRWaWV3KGZyb20sIHNpemUsIGRyb3BMb2NhdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0by5hcGkubG9jYXRpb24udHlwZSA9PT0gJ2Zsb2F0aW5nJykge1xuICAgICAgICAgICAgICAgIC8vIEZvciBtb3ZlcyB0byBmbG9hdGluZyBsb2NhdGlvbnMsIGFkZCBhcyBmbG9hdGluZyBncm91cFxuICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgcG9zaXRpb24vc2l6ZSBmcm9tIHRoZSB0YXJnZXQgZmxvYXRpbmcgZ3JvdXBcbiAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXRGbG9hdGluZ0dyb3VwID0gdGhpcy5fZmxvYXRpbmdHcm91cHMuZmluZCgoeCkgPT4geC5ncm91cCA9PT0gdG8pO1xuICAgICAgICAgICAgICAgIGlmICh0YXJnZXRGbG9hdGluZ0dyb3VwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJveCA9IHRhcmdldEZsb2F0aW5nR3JvdXAub3ZlcmxheS50b0pTT04oKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHBvc2l0aW9uIGJhc2VkIG9uIGF2YWlsYWJsZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgICAgIGxldCBsZWZ0LCB0b3A7XG4gICAgICAgICAgICAgICAgICAgIGlmICgnbGVmdCcgaW4gYm94KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0ID0gYm94LmxlZnQgKyA1MDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICgncmlnaHQnIGluIGJveCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCA9IE1hdGgubWF4KDAsIGJveC5yaWdodCAtIGJveC53aWR0aCAtIDUwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQgPSA1MDsgLy8gRGVmYXVsdCBmYWxsYmFja1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICgndG9wJyBpbiBib3gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcCA9IGJveC50b3AgKyA1MDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICgnYm90dG9tJyBpbiBib3gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcCA9IE1hdGgubWF4KDAsIGJveC5ib3R0b20gLSBib3guaGVpZ2h0IC0gNTApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9wID0gNTA7IC8vIERlZmF1bHQgZmFsbGJhY2tcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZEZsb2F0aW5nR3JvdXAoZnJvbSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBib3guaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGJveC53aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3AsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnJvbS5wYW5lbHMuZm9yRWFjaCgocGFuZWwpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX29uRGlkTW92ZVBhbmVsLmZpcmUoeyBwYW5lbCwgZnJvbSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIEVuc3VyZSBncm91cCBiZWNvbWVzIGFjdGl2ZSBhZnRlciBtb3ZlXG4gICAgICAgIGlmIChvcHRpb25zLnNraXBTZXRBY3RpdmUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAvLyBPbmx5IGFjdGl2YXRlIHdoZW4gZXhwbGljaXRseSByZXF1ZXN0ZWQgKHNraXBTZXRBY3RpdmU6IGZhbHNlKVxuICAgICAgICAgICAgLy8gVXNlICd0bycgZ3JvdXAgZm9yIG5vbi1jZW50ZXIgbW92ZXMgc2luY2UgJ2Zyb20nIG1heSBoYXZlIGJlZW4gZGVzdHJveWVkXG4gICAgICAgICAgICBjb25zdCB0YXJnZXRHcm91cCA9IHRvICE9PSBudWxsICYmIHRvICE9PSB2b2lkIDAgPyB0byA6IGZyb207XG4gICAgICAgICAgICB0aGlzLmRvU2V0R3JvdXBBbmRQYW5lbEFjdGl2ZSh0YXJnZXRHcm91cCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZG9TZXRHcm91cEFjdGl2ZShncm91cCkge1xuICAgICAgICBzdXBlci5kb1NldEdyb3VwQWN0aXZlKGdyb3VwKTtcbiAgICAgICAgY29uc3QgYWN0aXZlUGFuZWwgPSB0aGlzLmFjdGl2ZVBhbmVsO1xuICAgICAgICBpZiAoIXRoaXMuX21vdmluZyAmJlxuICAgICAgICAgICAgYWN0aXZlUGFuZWwgIT09IHRoaXMuX29uRGlkQWN0aXZlUGFuZWxDaGFuZ2UudmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX29uRGlkQWN0aXZlUGFuZWxDaGFuZ2UuZmlyZShhY3RpdmVQYW5lbCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZG9TZXRHcm91cEFuZFBhbmVsQWN0aXZlKGdyb3VwKSB7XG4gICAgICAgIHN1cGVyLmRvU2V0R3JvdXBBY3RpdmUoZ3JvdXApO1xuICAgICAgICBjb25zdCBhY3RpdmVQYW5lbCA9IHRoaXMuYWN0aXZlUGFuZWw7XG4gICAgICAgIGlmIChncm91cCAmJlxuICAgICAgICAgICAgdGhpcy5oYXNNYXhpbWl6ZWRHcm91cCgpICYmXG4gICAgICAgICAgICAhdGhpcy5pc01heGltaXplZEdyb3VwKGdyb3VwKSkge1xuICAgICAgICAgICAgdGhpcy5leGl0TWF4aW1pemVkR3JvdXAoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX21vdmluZyAmJlxuICAgICAgICAgICAgYWN0aXZlUGFuZWwgIT09IHRoaXMuX29uRGlkQWN0aXZlUGFuZWxDaGFuZ2UudmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX29uRGlkQWN0aXZlUGFuZWxDaGFuZ2UuZmlyZShhY3RpdmVQYW5lbCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0TmV4dEdyb3VwSWQoKSB7XG4gICAgICAgIGxldCBpZCA9IHRoaXMubmV4dEdyb3VwSWQubmV4dCgpO1xuICAgICAgICB3aGlsZSAodGhpcy5fZ3JvdXBzLmhhcyhpZCkpIHtcbiAgICAgICAgICAgIGlkID0gdGhpcy5uZXh0R3JvdXBJZC5uZXh0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlkO1xuICAgIH1cbiAgICBjcmVhdGVHcm91cChvcHRpb25zKSB7XG4gICAgICAgIGlmICghb3B0aW9ucykge1xuICAgICAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGxldCBpZCA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5pZDtcbiAgICAgICAgaWYgKGlkICYmIHRoaXMuX2dyb3Vwcy5oYXMob3B0aW9ucy5pZCkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgZG9ja3ZpZXc6IER1cGxpY2F0ZSBncm91cCBpZCAke29wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5pZH0uIHJlYXNzaWduaW5nIGdyb3VwIGlkIHRvIGF2b2lkIGVycm9yc2ApO1xuICAgICAgICAgICAgaWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpZCkge1xuICAgICAgICAgICAgaWQgPSB0aGlzLm5leHRHcm91cElkLm5leHQoKTtcbiAgICAgICAgICAgIHdoaWxlICh0aGlzLl9ncm91cHMuaGFzKGlkKSkge1xuICAgICAgICAgICAgICAgIGlkID0gdGhpcy5uZXh0R3JvdXBJZC5uZXh0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmlldyA9IG5ldyBEb2Nrdmlld0dyb3VwUGFuZWwodGhpcywgaWQsIG9wdGlvbnMpO1xuICAgICAgICB2aWV3LmluaXQoeyBwYXJhbXM6IHt9LCBhY2Nlc3NvcjogdGhpcyB9KTtcbiAgICAgICAgaWYgKCF0aGlzLl9ncm91cHMuaGFzKHZpZXcuaWQpKSB7XG4gICAgICAgICAgICBjb25zdCBkaXNwb3NhYmxlID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUodmlldy5tb2RlbC5vblRhYkRyYWdTdGFydCgoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vbldpbGxEcmFnUGFuZWwuZmlyZShldmVudCk7XG4gICAgICAgICAgICB9KSwgdmlldy5tb2RlbC5vbkdyb3VwRHJhZ1N0YXJ0KChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX29uV2lsbERyYWdHcm91cC5maXJlKGV2ZW50KTtcbiAgICAgICAgICAgIH0pLCB2aWV3Lm1vZGVsLm9uTW92ZSgoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGdyb3VwSWQsIGl0ZW1JZCwgdGFyZ2V0LCBpbmRleCB9ID0gZXZlbnQ7XG4gICAgICAgICAgICAgICAgdGhpcy5tb3ZlR3JvdXBPclBhbmVsKHtcbiAgICAgICAgICAgICAgICAgICAgZnJvbTogeyBncm91cElkOiBncm91cElkLCBwYW5lbElkOiBpdGVtSWQgfSxcbiAgICAgICAgICAgICAgICAgICAgdG86IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwOiB2aWV3LFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHRhcmdldCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSksIHZpZXcubW9kZWwub25EaWREcm9wKChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX29uRGlkRHJvcC5maXJlKGV2ZW50KTtcbiAgICAgICAgICAgIH0pLCB2aWV3Lm1vZGVsLm9uV2lsbERyb3AoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb25XaWxsRHJvcC5maXJlKGV2ZW50KTtcbiAgICAgICAgICAgIH0pLCB2aWV3Lm1vZGVsLm9uV2lsbFNob3dPdmVybGF5KChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGlzYWJsZURuZCkge1xuICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX29uV2lsbFNob3dPdmVybGF5LmZpcmUoZXZlbnQpO1xuICAgICAgICAgICAgfSksIHZpZXcubW9kZWwub25VbmhhbmRsZWREcmFnT3ZlckV2ZW50KChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX29uVW5oYW5kbGVkRHJhZ092ZXJFdmVudC5maXJlKGV2ZW50KTtcbiAgICAgICAgICAgIH0pLCB2aWV3Lm1vZGVsLm9uRGlkQWRkUGFuZWwoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX21vdmluZykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX29uRGlkQWRkUGFuZWwuZmlyZShldmVudC5wYW5lbCk7XG4gICAgICAgICAgICB9KSwgdmlldy5tb2RlbC5vbkRpZFJlbW92ZVBhbmVsKChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9tb3ZpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9vbkRpZFJlbW92ZVBhbmVsLmZpcmUoZXZlbnQucGFuZWwpO1xuICAgICAgICAgICAgfSksIHZpZXcubW9kZWwub25EaWRBY3RpdmVQYW5lbENoYW5nZSgoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbW92aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LnBhbmVsICE9PSB0aGlzLmFjdGl2ZVBhbmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX29uRGlkQWN0aXZlUGFuZWxDaGFuZ2UudmFsdWUgIT09IGV2ZW50LnBhbmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29uRGlkQWN0aXZlUGFuZWxDaGFuZ2UuZmlyZShldmVudC5wYW5lbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksIEV2ZW50LmFueSh2aWV3Lm1vZGVsLm9uRGlkUGFuZWxUaXRsZUNoYW5nZSwgdmlldy5tb2RlbC5vbkRpZFBhbmVsUGFyYW1ldGVyc0NoYW5nZSkoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX2J1ZmZlck9uRGlkTGF5b3V0Q2hhbmdlLmZpcmUoKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIHRoaXMuX2dyb3Vwcy5zZXQodmlldy5pZCwgeyB2YWx1ZTogdmlldywgZGlzcG9zYWJsZSB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUT0RPOiBtdXN0IGJlIGNhbGxlZCBhZnRlciB0aGUgYWJvdmUgbGlzdGVuZXJzIGhhdmUgYmVlbiBzZXR1cCwgbm90IGFuIGlkZWFsIHBhdHRlcm5cbiAgICAgICAgdmlldy5pbml0aWFsaXplKCk7XG4gICAgICAgIHJldHVybiB2aWV3O1xuICAgIH1cbiAgICBjcmVhdGVQYW5lbChvcHRpb25zLCBncm91cCkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgY29uc3QgY29udGVudENvbXBvbmVudCA9IG9wdGlvbnMuY29tcG9uZW50O1xuICAgICAgICBjb25zdCB0YWJDb21wb25lbnQgPSAoX2EgPSBvcHRpb25zLnRhYkNvbXBvbmVudCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdGhpcy5vcHRpb25zLmRlZmF1bHRUYWJDb21wb25lbnQ7XG4gICAgICAgIGNvbnN0IHZpZXcgPSBuZXcgRG9ja3ZpZXdQYW5lbE1vZGVsKHRoaXMsIG9wdGlvbnMuaWQsIGNvbnRlbnRDb21wb25lbnQsIHRhYkNvbXBvbmVudCk7XG4gICAgICAgIGNvbnN0IHBhbmVsID0gbmV3IERvY2t2aWV3UGFuZWwob3B0aW9ucy5pZCwgY29udGVudENvbXBvbmVudCwgdGFiQ29tcG9uZW50LCB0aGlzLCB0aGlzLl9hcGksIGdyb3VwLCB2aWV3LCB7XG4gICAgICAgICAgICByZW5kZXJlcjogb3B0aW9ucy5yZW5kZXJlcixcbiAgICAgICAgICAgIG1pbmltdW1XaWR0aDogb3B0aW9ucy5taW5pbXVtV2lkdGgsXG4gICAgICAgICAgICBtaW5pbXVtSGVpZ2h0OiBvcHRpb25zLm1pbmltdW1IZWlnaHQsXG4gICAgICAgICAgICBtYXhpbXVtV2lkdGg6IG9wdGlvbnMubWF4aW11bVdpZHRoLFxuICAgICAgICAgICAgbWF4aW11bUhlaWdodDogb3B0aW9ucy5tYXhpbXVtSGVpZ2h0LFxuICAgICAgICB9KTtcbiAgICAgICAgcGFuZWwuaW5pdCh7XG4gICAgICAgICAgICB0aXRsZTogKF9iID0gb3B0aW9ucy50aXRsZSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogb3B0aW9ucy5pZCxcbiAgICAgICAgICAgIHBhcmFtczogKF9jID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnBhcmFtcykgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDoge30sXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcGFuZWw7XG4gICAgfVxuICAgIGNyZWF0ZUdyb3VwQXRMb2NhdGlvbihsb2NhdGlvbiwgc2l6ZSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBncm91cCA9IHRoaXMuY3JlYXRlR3JvdXAob3B0aW9ucyk7XG4gICAgICAgIHRoaXMuZG9BZGRHcm91cChncm91cCwgbG9jYXRpb24sIHNpemUpO1xuICAgICAgICByZXR1cm4gZ3JvdXA7XG4gICAgfVxuICAgIGZpbmRHcm91cChwYW5lbCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoX2EgPSBBcnJheS5mcm9tKHRoaXMuX2dyb3Vwcy52YWx1ZXMoKSkuZmluZCgoZ3JvdXApID0+IGdyb3VwLnZhbHVlLm1vZGVsLmNvbnRhaW5zUGFuZWwocGFuZWwpKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnZhbHVlO1xuICAgIH1cbiAgICBvcmllbnRhdGlvbkF0TG9jYXRpb24obG9jYXRpb24pIHtcbiAgICAgICAgY29uc3Qgcm9vdE9yaWVudGF0aW9uID0gdGhpcy5ncmlkdmlldy5vcmllbnRhdGlvbjtcbiAgICAgICAgcmV0dXJuIGxvY2F0aW9uLmxlbmd0aCAlIDIgPT0gMVxuICAgICAgICAgICAgPyByb290T3JpZW50YXRpb25cbiAgICAgICAgICAgIDogb3J0aG9nb25hbChyb290T3JpZW50YXRpb24pO1xuICAgIH1cbiAgICB1cGRhdGVEcm9wVGFyZ2V0TW9kZWwob3B0aW9ucykge1xuICAgICAgICBpZiAoJ2RuZEVkZ2VzJyBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICB0aGlzLl9yb290RHJvcFRhcmdldC5kaXNhYmxlZCA9XG4gICAgICAgICAgICAgICAgdHlwZW9mIG9wdGlvbnMuZG5kRWRnZXMgPT09ICdib29sZWFuJyAmJlxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmRuZEVkZ2VzID09PSBmYWxzZTtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5kbmRFZGdlcyA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgICAgICBvcHRpb25zLmRuZEVkZ2VzICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcm9vdERyb3BUYXJnZXQuc2V0T3ZlcmxheU1vZGVsKG9wdGlvbnMuZG5kRWRnZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcm9vdERyb3BUYXJnZXQuc2V0T3ZlcmxheU1vZGVsKERFRkFVTFRfUk9PVF9PVkVSTEFZX01PREVMKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoJ3Jvb3RPdmVybGF5TW9kZWwnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlRHJvcFRhcmdldE1vZGVsKHsgZG5kRWRnZXM6IG9wdGlvbnMuZG5kRWRnZXMgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlVGhlbWUoKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGNvbnN0IHRoZW1lID0gKF9hID0gdGhpcy5fb3B0aW9ucy50aGVtZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdGhlbWVBYnlzcztcbiAgICAgICAgdGhpcy5fdGhlbWVDbGFzc25hbWVzLnNldENsYXNzTmFtZXModGhlbWUuY2xhc3NOYW1lKTtcbiAgICAgICAgdGhpcy5ncmlkdmlldy5tYXJnaW4gPSAoX2IgPSB0aGVtZS5nYXApICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IDA7XG4gICAgICAgIHN3aXRjaCAodGhlbWUuZG5kT3ZlcmxheU1vdW50aW5nKSB7XG4gICAgICAgICAgICBjYXNlICdhYnNvbHV0ZSc6XG4gICAgICAgICAgICAgICAgdGhpcy5yb290RHJvcFRhcmdldENvbnRhaW5lci5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncmVsYXRpdmUnOlxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aGlzLnJvb3REcm9wVGFyZ2V0Q29udGFpbmVyLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUgfSBmcm9tICcuLi9saWZlY3ljbGUnO1xuZXhwb3J0IGNsYXNzIERvY2t2aWV3RmxvYXRpbmdHcm91cFBhbmVsIGV4dGVuZHMgQ29tcG9zaXRlRGlzcG9zYWJsZSB7XG4gICAgY29uc3RydWN0b3IoZ3JvdXAsIG92ZXJsYXkpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5ncm91cCA9IGdyb3VwO1xuICAgICAgICB0aGlzLm92ZXJsYXkgPSBvdmVybGF5O1xuICAgICAgICB0aGlzLmFkZERpc3Bvc2FibGVzKG92ZXJsYXkpO1xuICAgIH1cbiAgICBwb3NpdGlvbihib3VuZHMpIHtcbiAgICAgICAgdGhpcy5vdmVybGF5LnNldEJvdW5kcyhib3VuZHMpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IERvY2t2aWV3R3JvdXBQYW5lbE1vZGVsLCB9IGZyb20gJy4vZG9ja3ZpZXdHcm91cFBhbmVsTW9kZWwnO1xuaW1wb3J0IHsgR3JpZHZpZXdQYW5lbCB9IGZyb20gJy4uL2dyaWR2aWV3L2dyaWR2aWV3UGFuZWwnO1xuaW1wb3J0IHsgRG9ja3ZpZXdHcm91cFBhbmVsQXBpSW1wbCwgfSBmcm9tICcuLi9hcGkvZG9ja3ZpZXdHcm91cFBhbmVsQXBpJztcbmNvbnN0IE1JTklNVU1fRE9DS1ZJRVdfR1JPVVBfUEFORUxfV0lEVEggPSAxMDA7XG5jb25zdCBNSU5JTVVNX0RPQ0tWSUVXX0dST1VQX1BBTkVMX0hFSUdIVCA9IDEwMDtcbmV4cG9ydCBjbGFzcyBEb2Nrdmlld0dyb3VwUGFuZWwgZXh0ZW5kcyBHcmlkdmlld1BhbmVsIHtcbiAgICBnZXQgbWluaW11bVdpZHRoKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IGFjdGl2ZVBhbmVsTWluaW11bVdpZHRoID0gKF9hID0gdGhpcy5hY3RpdmVQYW5lbCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm1pbmltdW1XaWR0aDtcbiAgICAgICAgaWYgKHR5cGVvZiBhY3RpdmVQYW5lbE1pbmltdW1XaWR0aCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHJldHVybiBhY3RpdmVQYW5lbE1pbmltdW1XaWR0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VwZXIuX19taW5pbXVtV2lkdGgoKTtcbiAgICB9XG4gICAgZ2V0IG1pbmltdW1IZWlnaHQoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgYWN0aXZlUGFuZWxNaW5pbXVtSGVpZ2h0ID0gKF9hID0gdGhpcy5hY3RpdmVQYW5lbCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm1pbmltdW1IZWlnaHQ7XG4gICAgICAgIGlmICh0eXBlb2YgYWN0aXZlUGFuZWxNaW5pbXVtSGVpZ2h0ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcmV0dXJuIGFjdGl2ZVBhbmVsTWluaW11bUhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VwZXIuX19taW5pbXVtSGVpZ2h0KCk7XG4gICAgfVxuICAgIGdldCBtYXhpbXVtV2lkdGgoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgYWN0aXZlUGFuZWxNYXhpbXVtV2lkdGggPSAoX2EgPSB0aGlzLmFjdGl2ZVBhbmVsKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubWF4aW11bVdpZHRoO1xuICAgICAgICBpZiAodHlwZW9mIGFjdGl2ZVBhbmVsTWF4aW11bVdpZHRoID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcmV0dXJuIGFjdGl2ZVBhbmVsTWF4aW11bVdpZHRoO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci5fX21heGltdW1XaWR0aCgpO1xuICAgIH1cbiAgICBnZXQgbWF4aW11bUhlaWdodCgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBhY3RpdmVQYW5lbE1heGltdW1IZWlnaHQgPSAoX2EgPSB0aGlzLmFjdGl2ZVBhbmVsKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubWF4aW11bUhlaWdodDtcbiAgICAgICAgaWYgKHR5cGVvZiBhY3RpdmVQYW5lbE1heGltdW1IZWlnaHQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICByZXR1cm4gYWN0aXZlUGFuZWxNYXhpbXVtSGVpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci5fX21heGltdW1IZWlnaHQoKTtcbiAgICB9XG4gICAgZ2V0IHBhbmVscygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21vZGVsLnBhbmVscztcbiAgICB9XG4gICAgZ2V0IGFjdGl2ZVBhbmVsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbW9kZWwuYWN0aXZlUGFuZWw7XG4gICAgfVxuICAgIGdldCBzaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbW9kZWwuc2l6ZTtcbiAgICB9XG4gICAgZ2V0IG1vZGVsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbW9kZWw7XG4gICAgfVxuICAgIGdldCBsb2NrZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tb2RlbC5sb2NrZWQ7XG4gICAgfVxuICAgIHNldCBsb2NrZWQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fbW9kZWwubG9ja2VkID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBoZWFkZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tb2RlbC5oZWFkZXI7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGFjY2Vzc29yLCBpZCwgb3B0aW9ucykge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZjtcbiAgICAgICAgc3VwZXIoaWQsICdncm91cHZpZXdfZGVmYXVsdCcsIHtcbiAgICAgICAgICAgIG1pbmltdW1IZWlnaHQ6IChfYiA9IChfYSA9IG9wdGlvbnMuY29uc3RyYWludHMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5taW5pbXVtSGVpZ2h0KSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBNSU5JTVVNX0RPQ0tWSUVXX0dST1VQX1BBTkVMX0hFSUdIVCxcbiAgICAgICAgICAgIG1pbmltdW1XaWR0aDogKF9kID0gKF9jID0gb3B0aW9ucy5jb25zdHJhaW50cykgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLm1heGltdW1IZWlnaHQpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IE1JTklNVU1fRE9DS1ZJRVdfR1JPVVBfUEFORUxfV0lEVEgsXG4gICAgICAgICAgICBtYXhpbXVtSGVpZ2h0OiAoX2UgPSBvcHRpb25zLmNvbnN0cmFpbnRzKSA9PT0gbnVsbCB8fCBfZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2UubWF4aW11bUhlaWdodCxcbiAgICAgICAgICAgIG1heGltdW1XaWR0aDogKF9mID0gb3B0aW9ucy5jb25zdHJhaW50cykgPT09IG51bGwgfHwgX2YgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9mLm1heGltdW1XaWR0aCxcbiAgICAgICAgfSwgbmV3IERvY2t2aWV3R3JvdXBQYW5lbEFwaUltcGwoaWQsIGFjY2Vzc29yKSk7XG4gICAgICAgIHRoaXMuYXBpLmluaXRpYWxpemUodGhpcyk7IC8vIGNhbm5vdCB1c2UgJ3RoaXMnIGFmdGVyIGFmdGVyICdzdXBlcicgY2FsbFxuICAgICAgICB0aGlzLl9tb2RlbCA9IG5ldyBEb2Nrdmlld0dyb3VwUGFuZWxNb2RlbCh0aGlzLmVsZW1lbnQsIGFjY2Vzc29yLCBpZCwgb3B0aW9ucywgdGhpcyk7XG4gICAgICAgIHRoaXMuYWRkRGlzcG9zYWJsZXModGhpcy5tb2RlbC5vbkRpZEFjdGl2ZVBhbmVsQ2hhbmdlKChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hcGkuX29uRGlkQWN0aXZlUGFuZWxDaGFuZ2UuZmlyZShldmVudCk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgZm9jdXMoKSB7XG4gICAgICAgIGlmICghdGhpcy5hcGkuaXNBY3RpdmUpIHtcbiAgICAgICAgICAgIHRoaXMuYXBpLnNldEFjdGl2ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyLmZvY3VzKCk7XG4gICAgfVxuICAgIGluaXRpYWxpemUoKSB7XG4gICAgICAgIHRoaXMuX21vZGVsLmluaXRpYWxpemUoKTtcbiAgICB9XG4gICAgc2V0QWN0aXZlKGlzQWN0aXZlKSB7XG4gICAgICAgIHN1cGVyLnNldEFjdGl2ZShpc0FjdGl2ZSk7XG4gICAgICAgIHRoaXMubW9kZWwuc2V0QWN0aXZlKGlzQWN0aXZlKTtcbiAgICB9XG4gICAgbGF5b3V0KHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgc3VwZXIubGF5b3V0KHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICB0aGlzLm1vZGVsLmxheW91dCh3aWR0aCwgaGVpZ2h0KTtcbiAgICB9XG4gICAgZ2V0Q29tcG9uZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbW9kZWw7XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kZWwudG9KU09OKCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgRG9ja3ZpZXdBcGkgfSBmcm9tICcuLi9hcGkvY29tcG9uZW50LmFwaSc7XG5pbXBvcnQgeyBnZXRQYW5lbERhdGEgfSBmcm9tICcuLi9kbmQvZGF0YVRyYW5zZmVyJztcbmltcG9ydCB7IGlzQW5jZXN0b3IsIHRvZ2dsZUNsYXNzIH0gZnJvbSAnLi4vZG9tJztcbmltcG9ydCB7IGFkZERpc3Bvc2FibGVMaXN0ZW5lciwgRG9ja3ZpZXdFdmVudCwgRW1pdHRlciwgfSBmcm9tICcuLi9ldmVudHMnO1xuaW1wb3J0IHsgV2lsbFNob3dPdmVybGF5TG9jYXRpb25FdmVudCB9IGZyb20gJy4vZXZlbnRzJztcbmltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUgfSBmcm9tICcuLi9saWZlY3ljbGUnO1xuaW1wb3J0IHsgQ29udGVudENvbnRhaW5lciwgfSBmcm9tICcuL2NvbXBvbmVudHMvcGFuZWwvY29udGVudCc7XG5pbXBvcnQgeyBUYWJzQ29udGFpbmVyLCB9IGZyb20gJy4vY29tcG9uZW50cy90aXRsZWJhci90YWJzQ29udGFpbmVyJztcbmltcG9ydCB7IERvY2t2aWV3VW5oYW5kbGVkRHJhZ092ZXJFdmVudCwgfSBmcm9tICcuL29wdGlvbnMnO1xuZXhwb3J0IGNsYXNzIERvY2t2aWV3RGlkRHJvcEV2ZW50IGV4dGVuZHMgRG9ja3ZpZXdFdmVudCB7XG4gICAgZ2V0IG5hdGl2ZUV2ZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLm5hdGl2ZUV2ZW50O1xuICAgIH1cbiAgICBnZXQgcG9zaXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMucG9zaXRpb247XG4gICAgfVxuICAgIGdldCBwYW5lbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5wYW5lbDtcbiAgICB9XG4gICAgZ2V0IGdyb3VwKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmdyb3VwO1xuICAgIH1cbiAgICBnZXQgYXBpKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmFwaTtcbiAgICB9XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICBnZXREYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmdldERhdGEoKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgRG9ja3ZpZXdXaWxsRHJvcEV2ZW50IGV4dGVuZHMgRG9ja3ZpZXdEaWREcm9wRXZlbnQge1xuICAgIGdldCBraW5kKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fa2luZDtcbiAgICB9XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5fa2luZCA9IG9wdGlvbnMua2luZDtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgRG9ja3ZpZXdHcm91cFBhbmVsTW9kZWwgZXh0ZW5kcyBDb21wb3NpdGVEaXNwb3NhYmxlIHtcbiAgICBnZXQgZWxlbWVudCgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdkb2Nrdmlldzogbm90IHN1cHBvcnRlZCcpO1xuICAgIH1cbiAgICBnZXQgYWN0aXZlUGFuZWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmVQYW5lbDtcbiAgICB9XG4gICAgZ2V0IGxvY2tlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvY2tlZDtcbiAgICB9XG4gICAgc2V0IGxvY2tlZCh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9sb2NrZWQgPSB2YWx1ZTtcbiAgICAgICAgdG9nZ2xlQ2xhc3ModGhpcy5jb250YWluZXIsICdkdi1sb2NrZWQtZ3JvdXB2aWV3JywgdmFsdWUgPT09ICduby1kcm9wLXRhcmdldCcgfHwgdmFsdWUpO1xuICAgIH1cbiAgICBnZXQgaXNBY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc0dyb3VwQWN0aXZlO1xuICAgIH1cbiAgICBnZXQgcGFuZWxzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGFuZWxzO1xuICAgIH1cbiAgICBnZXQgc2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhbmVscy5sZW5ndGg7XG4gICAgfVxuICAgIGdldCBpc0VtcHR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGFuZWxzLmxlbmd0aCA9PT0gMDtcbiAgICB9XG4gICAgZ2V0IGhhc1dhdGVybWFyaygpIHtcbiAgICAgICAgcmV0dXJuICEhKHRoaXMud2F0ZXJtYXJrICYmIHRoaXMuY29udGFpbmVyLmNvbnRhaW5zKHRoaXMud2F0ZXJtYXJrLmVsZW1lbnQpKTtcbiAgICB9XG4gICAgZ2V0IGhlYWRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGFic0NvbnRhaW5lcjtcbiAgICB9XG4gICAgZ2V0IGlzQ29udGVudEZvY3VzZWQoKSB7XG4gICAgICAgIGlmICghZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc0FuY2VzdG9yKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQsIHRoaXMuY29udGVudENvbnRhaW5lci5lbGVtZW50KTtcbiAgICB9XG4gICAgZ2V0IGxvY2F0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbG9jYXRpb247XG4gICAgfVxuICAgIHNldCBsb2NhdGlvbih2YWx1ZSkge1xuICAgICAgICB0aGlzLl9sb2NhdGlvbiA9IHZhbHVlO1xuICAgICAgICB0b2dnbGVDbGFzcyh0aGlzLmNvbnRhaW5lciwgJ2R2LWdyb3Vwdmlldy1mbG9hdGluZycsIGZhbHNlKTtcbiAgICAgICAgdG9nZ2xlQ2xhc3ModGhpcy5jb250YWluZXIsICdkdi1ncm91cHZpZXctcG9wb3V0JywgZmFsc2UpO1xuICAgICAgICBzd2l0Y2ggKHZhbHVlLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2dyaWQnOlxuICAgICAgICAgICAgICAgIHRoaXMuY29udGVudENvbnRhaW5lci5kcm9wVGFyZ2V0LnNldFRhcmdldFpvbmVzKFtcbiAgICAgICAgICAgICAgICAgICAgJ3RvcCcsXG4gICAgICAgICAgICAgICAgICAgICdib3R0b20nLFxuICAgICAgICAgICAgICAgICAgICAnbGVmdCcsXG4gICAgICAgICAgICAgICAgICAgICdyaWdodCcsXG4gICAgICAgICAgICAgICAgICAgICdjZW50ZXInLFxuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZmxvYXRpbmcnOlxuICAgICAgICAgICAgICAgIHRoaXMuY29udGVudENvbnRhaW5lci5kcm9wVGFyZ2V0LnNldFRhcmdldFpvbmVzKFsnY2VudGVyJ10pO1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGVudENvbnRhaW5lci5kcm9wVGFyZ2V0LnNldFRhcmdldFpvbmVzKHZhbHVlXG4gICAgICAgICAgICAgICAgICAgID8gWydjZW50ZXInXVxuICAgICAgICAgICAgICAgICAgICA6IFsndG9wJywgJ2JvdHRvbScsICdsZWZ0JywgJ3JpZ2h0JywgJ2NlbnRlciddKTtcbiAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyh0aGlzLmNvbnRhaW5lciwgJ2R2LWdyb3Vwdmlldy1mbG9hdGluZycsIHRydWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncG9wb3V0JzpcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnRDb250YWluZXIuZHJvcFRhcmdldC5zZXRUYXJnZXRab25lcyhbJ2NlbnRlciddKTtcbiAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyh0aGlzLmNvbnRhaW5lciwgJ2R2LWdyb3Vwdmlldy1wb3BvdXQnLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmdyb3VwUGFuZWwuYXBpLl9vbkRpZExvY2F0aW9uQ2hhbmdlLmZpcmUoe1xuICAgICAgICAgICAgbG9jYXRpb246IHRoaXMubG9jYXRpb24sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcihjb250YWluZXIsIGFjY2Vzc29yLCBpZCwgb3B0aW9ucywgZ3JvdXBQYW5lbCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgICB0aGlzLmFjY2Vzc29yID0gYWNjZXNzb3I7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5ncm91cFBhbmVsID0gZ3JvdXBQYW5lbDtcbiAgICAgICAgdGhpcy5faXNHcm91cEFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9sb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fbG9jYXRpb24gPSB7IHR5cGU6ICdncmlkJyB9O1xuICAgICAgICB0aGlzLm1vc3RSZWNlbnRseVVzZWQgPSBbXTtcbiAgICAgICAgdGhpcy5fb3ZlcndyaXRlUmVuZGVyQ29udGFpbmVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5fb3ZlcndyaXRlRHJvcFRhcmdldENvbnRhaW5lciA9IG51bGw7XG4gICAgICAgIHRoaXMuX29uRGlkQ2hhbmdlID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZENoYW5nZSA9IHRoaXMuX29uRGlkQ2hhbmdlLmV2ZW50O1xuICAgICAgICB0aGlzLl93aWR0aCA9IDA7XG4gICAgICAgIHRoaXMuX2hlaWdodCA9IDA7XG4gICAgICAgIHRoaXMuX3BhbmVscyA9IFtdO1xuICAgICAgICB0aGlzLl9wYW5lbERpc3Bvc2FibGVzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLl9vbk1vdmUgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uTW92ZSA9IHRoaXMuX29uTW92ZS5ldmVudDtcbiAgICAgICAgdGhpcy5fb25EaWREcm9wID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZERyb3AgPSB0aGlzLl9vbkRpZERyb3AuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uV2lsbERyb3AgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uV2lsbERyb3AgPSB0aGlzLl9vbldpbGxEcm9wLmV2ZW50O1xuICAgICAgICB0aGlzLl9vbldpbGxTaG93T3ZlcmxheSA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25XaWxsU2hvd092ZXJsYXkgPSB0aGlzLl9vbldpbGxTaG93T3ZlcmxheS5ldmVudDtcbiAgICAgICAgdGhpcy5fb25UYWJEcmFnU3RhcnQgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uVGFiRHJhZ1N0YXJ0ID0gdGhpcy5fb25UYWJEcmFnU3RhcnQuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uR3JvdXBEcmFnU3RhcnQgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uR3JvdXBEcmFnU3RhcnQgPSB0aGlzLl9vbkdyb3VwRHJhZ1N0YXJ0LmV2ZW50O1xuICAgICAgICB0aGlzLl9vbkRpZEFkZFBhbmVsID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZEFkZFBhbmVsID0gdGhpcy5fb25EaWRBZGRQYW5lbC5ldmVudDtcbiAgICAgICAgdGhpcy5fb25EaWRQYW5lbFRpdGxlQ2hhbmdlID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZFBhbmVsVGl0bGVDaGFuZ2UgPSB0aGlzLl9vbkRpZFBhbmVsVGl0bGVDaGFuZ2UuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uRGlkUGFuZWxQYXJhbWV0ZXJzQ2hhbmdlID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZFBhbmVsUGFyYW1ldGVyc0NoYW5nZSA9IHRoaXMuX29uRGlkUGFuZWxQYXJhbWV0ZXJzQ2hhbmdlLmV2ZW50O1xuICAgICAgICB0aGlzLl9vbkRpZFJlbW92ZVBhbmVsID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZFJlbW92ZVBhbmVsID0gdGhpcy5fb25EaWRSZW1vdmVQYW5lbC5ldmVudDtcbiAgICAgICAgdGhpcy5fb25EaWRBY3RpdmVQYW5lbENoYW5nZSA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRBY3RpdmVQYW5lbENoYW5nZSA9IHRoaXMuX29uRGlkQWN0aXZlUGFuZWxDaGFuZ2UuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uVW5oYW5kbGVkRHJhZ092ZXJFdmVudCA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25VbmhhbmRsZWREcmFnT3ZlckV2ZW50ID0gdGhpcy5fb25VbmhhbmRsZWREcmFnT3ZlckV2ZW50LmV2ZW50O1xuICAgICAgICB0b2dnbGVDbGFzcyh0aGlzLmNvbnRhaW5lciwgJ2R2LWdyb3VwdmlldycsIHRydWUpO1xuICAgICAgICB0aGlzLl9hcGkgPSBuZXcgRG9ja3ZpZXdBcGkodGhpcy5hY2Nlc3Nvcik7XG4gICAgICAgIHRoaXMudGFic0NvbnRhaW5lciA9IG5ldyBUYWJzQ29udGFpbmVyKHRoaXMuYWNjZXNzb3IsIHRoaXMuZ3JvdXBQYW5lbCk7XG4gICAgICAgIHRoaXMuY29udGVudENvbnRhaW5lciA9IG5ldyBDb250ZW50Q29udGFpbmVyKHRoaXMuYWNjZXNzb3IsIHRoaXMpO1xuICAgICAgICBjb250YWluZXIuYXBwZW5kKHRoaXMudGFic0NvbnRhaW5lci5lbGVtZW50LCB0aGlzLmNvbnRlbnRDb250YWluZXIuZWxlbWVudCk7XG4gICAgICAgIHRoaXMuaGVhZGVyLmhpZGRlbiA9ICEhb3B0aW9ucy5oaWRlSGVhZGVyO1xuICAgICAgICB0aGlzLmxvY2tlZCA9IChfYSA9IG9wdGlvbnMubG9ja2VkKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBmYWxzZTtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyh0aGlzLl9vblRhYkRyYWdTdGFydCwgdGhpcy5fb25Hcm91cERyYWdTdGFydCwgdGhpcy5fb25XaWxsU2hvd092ZXJsYXksIHRoaXMudGFic0NvbnRhaW5lci5vblRhYkRyYWdTdGFydCgoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX29uVGFiRHJhZ1N0YXJ0LmZpcmUoZXZlbnQpO1xuICAgICAgICB9KSwgdGhpcy50YWJzQ29udGFpbmVyLm9uR3JvdXBEcmFnU3RhcnQoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9vbkdyb3VwRHJhZ1N0YXJ0LmZpcmUoZXZlbnQpO1xuICAgICAgICB9KSwgdGhpcy50YWJzQ29udGFpbmVyLm9uRHJvcCgoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRHJvcEV2ZW50KCdoZWFkZXInLCBldmVudC5ldmVudCwgJ2NlbnRlcicsIGV2ZW50LmluZGV4KTtcbiAgICAgICAgfSksIHRoaXMuY29udGVudENvbnRhaW5lci5vbkRpZEZvY3VzKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYWNjZXNzb3IuZG9TZXRHcm91cEFjdGl2ZSh0aGlzLmdyb3VwUGFuZWwpO1xuICAgICAgICB9KSwgdGhpcy5jb250ZW50Q29udGFpbmVyLm9uRGlkQmx1cigoKSA9PiB7XG4gICAgICAgICAgICAvLyBub29wXG4gICAgICAgIH0pLCB0aGlzLmNvbnRlbnRDb250YWluZXIuZHJvcFRhcmdldC5vbkRyb3AoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZURyb3BFdmVudCgnY29udGVudCcsIGV2ZW50Lm5hdGl2ZUV2ZW50LCBldmVudC5wb3NpdGlvbik7XG4gICAgICAgIH0pLCB0aGlzLnRhYnNDb250YWluZXIub25XaWxsU2hvd092ZXJsYXkoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9vbldpbGxTaG93T3ZlcmxheS5maXJlKGV2ZW50KTtcbiAgICAgICAgfSksIHRoaXMuY29udGVudENvbnRhaW5lci5kcm9wVGFyZ2V0Lm9uV2lsbFNob3dPdmVybGF5KChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25XaWxsU2hvd092ZXJsYXkuZmlyZShuZXcgV2lsbFNob3dPdmVybGF5TG9jYXRpb25FdmVudChldmVudCwge1xuICAgICAgICAgICAgICAgIGtpbmQ6ICdjb250ZW50JyxcbiAgICAgICAgICAgICAgICBwYW5lbDogdGhpcy5hY3RpdmVQYW5lbCxcbiAgICAgICAgICAgICAgICBhcGk6IHRoaXMuX2FwaSxcbiAgICAgICAgICAgICAgICBncm91cDogdGhpcy5ncm91cFBhbmVsLFxuICAgICAgICAgICAgICAgIGdldERhdGE6IGdldFBhbmVsRGF0YSxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSksIHRoaXMuX29uTW92ZSwgdGhpcy5fb25EaWRDaGFuZ2UsIHRoaXMuX29uRGlkRHJvcCwgdGhpcy5fb25XaWxsRHJvcCwgdGhpcy5fb25EaWRBZGRQYW5lbCwgdGhpcy5fb25EaWRSZW1vdmVQYW5lbCwgdGhpcy5fb25EaWRBY3RpdmVQYW5lbENoYW5nZSwgdGhpcy5fb25VbmhhbmRsZWREcmFnT3ZlckV2ZW50LCB0aGlzLl9vbkRpZFBhbmVsVGl0bGVDaGFuZ2UsIHRoaXMuX29uRGlkUGFuZWxQYXJhbWV0ZXJzQ2hhbmdlKTtcbiAgICB9XG4gICAgZm9jdXNDb250ZW50KCkge1xuICAgICAgICB0aGlzLmNvbnRlbnRDb250YWluZXIuZWxlbWVudC5mb2N1cygpO1xuICAgIH1cbiAgICBzZXQgcmVuZGVyQ29udGFpbmVyKHZhbHVlKSB7XG4gICAgICAgIHRoaXMucGFuZWxzLmZvckVhY2goKHBhbmVsKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckNvbnRhaW5lci5kZXRhdGNoKHBhbmVsKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX292ZXJ3cml0ZVJlbmRlckNvbnRhaW5lciA9IHZhbHVlO1xuICAgICAgICB0aGlzLnBhbmVscy5mb3JFYWNoKChwYW5lbCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZXJlbmRlcihwYW5lbCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXQgcmVuZGVyQ29udGFpbmVyKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoKF9hID0gdGhpcy5fb3ZlcndyaXRlUmVuZGVyQ29udGFpbmVyKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB0aGlzLmFjY2Vzc29yLm92ZXJsYXlSZW5kZXJDb250YWluZXIpO1xuICAgIH1cbiAgICBzZXQgZHJvcFRhcmdldENvbnRhaW5lcih2YWx1ZSkge1xuICAgICAgICB0aGlzLl9vdmVyd3JpdGVEcm9wVGFyZ2V0Q29udGFpbmVyID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBkcm9wVGFyZ2V0Q29udGFpbmVyKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoKF9hID0gdGhpcy5fb3ZlcndyaXRlRHJvcFRhcmdldENvbnRhaW5lcikgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdGhpcy5hY2Nlc3Nvci5yb290RHJvcFRhcmdldENvbnRhaW5lcik7XG4gICAgfVxuICAgIGluaXRpYWxpemUoKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMucGFuZWxzKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMucGFuZWxzLmZvckVhY2goKHBhbmVsKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5kb0FkZFBhbmVsKHBhbmVsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYWN0aXZlUGFuZWwpIHtcbiAgICAgICAgICAgIHRoaXMub3BlblBhbmVsKHRoaXMub3B0aW9ucy5hY3RpdmVQYW5lbCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbXVzdCBiZSBydW4gYWZ0ZXIgdGhlIGNvbnN0cnVjdG9yIG90aGVyd2lzZSB0aGlzLnBhcmVudCBtYXkgbm90IGJlXG4gICAgICAgIC8vIGNvcnJlY3RseSBpbml0aWFsaXplZFxuICAgICAgICB0aGlzLnNldEFjdGl2ZSh0aGlzLmlzQWN0aXZlLCB0cnVlKTtcbiAgICAgICAgdGhpcy51cGRhdGVDb250YWluZXIoKTtcbiAgICAgICAgaWYgKHRoaXMuYWNjZXNzb3Iub3B0aW9ucy5jcmVhdGVSaWdodEhlYWRlckFjdGlvbkNvbXBvbmVudCkge1xuICAgICAgICAgICAgdGhpcy5fcmlnaHRIZWFkZXJBY3Rpb25zID1cbiAgICAgICAgICAgICAgICB0aGlzLmFjY2Vzc29yLm9wdGlvbnMuY3JlYXRlUmlnaHRIZWFkZXJBY3Rpb25Db21wb25lbnQodGhpcy5ncm91cFBhbmVsKTtcbiAgICAgICAgICAgIHRoaXMuYWRkRGlzcG9zYWJsZXModGhpcy5fcmlnaHRIZWFkZXJBY3Rpb25zKTtcbiAgICAgICAgICAgIHRoaXMuX3JpZ2h0SGVhZGVyQWN0aW9ucy5pbml0KHtcbiAgICAgICAgICAgICAgICBjb250YWluZXJBcGk6IHRoaXMuX2FwaSxcbiAgICAgICAgICAgICAgICBhcGk6IHRoaXMuZ3JvdXBQYW5lbC5hcGksXG4gICAgICAgICAgICAgICAgZ3JvdXA6IHRoaXMuZ3JvdXBQYW5lbCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy50YWJzQ29udGFpbmVyLnNldFJpZ2h0QWN0aW9uc0VsZW1lbnQodGhpcy5fcmlnaHRIZWFkZXJBY3Rpb25zLmVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmFjY2Vzc29yLm9wdGlvbnMuY3JlYXRlTGVmdEhlYWRlckFjdGlvbkNvbXBvbmVudCkge1xuICAgICAgICAgICAgdGhpcy5fbGVmdEhlYWRlckFjdGlvbnMgPVxuICAgICAgICAgICAgICAgIHRoaXMuYWNjZXNzb3Iub3B0aW9ucy5jcmVhdGVMZWZ0SGVhZGVyQWN0aW9uQ29tcG9uZW50KHRoaXMuZ3JvdXBQYW5lbCk7XG4gICAgICAgICAgICB0aGlzLmFkZERpc3Bvc2FibGVzKHRoaXMuX2xlZnRIZWFkZXJBY3Rpb25zKTtcbiAgICAgICAgICAgIHRoaXMuX2xlZnRIZWFkZXJBY3Rpb25zLmluaXQoe1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lckFwaTogdGhpcy5fYXBpLFxuICAgICAgICAgICAgICAgIGFwaTogdGhpcy5ncm91cFBhbmVsLmFwaSxcbiAgICAgICAgICAgICAgICBncm91cDogdGhpcy5ncm91cFBhbmVsLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnRhYnNDb250YWluZXIuc2V0TGVmdEFjdGlvbnNFbGVtZW50KHRoaXMuX2xlZnRIZWFkZXJBY3Rpb25zLmVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmFjY2Vzc29yLm9wdGlvbnMuY3JlYXRlUHJlZml4SGVhZGVyQWN0aW9uQ29tcG9uZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9wcmVmaXhIZWFkZXJBY3Rpb25zID1cbiAgICAgICAgICAgICAgICB0aGlzLmFjY2Vzc29yLm9wdGlvbnMuY3JlYXRlUHJlZml4SGVhZGVyQWN0aW9uQ29tcG9uZW50KHRoaXMuZ3JvdXBQYW5lbCk7XG4gICAgICAgICAgICB0aGlzLmFkZERpc3Bvc2FibGVzKHRoaXMuX3ByZWZpeEhlYWRlckFjdGlvbnMpO1xuICAgICAgICAgICAgdGhpcy5fcHJlZml4SGVhZGVyQWN0aW9ucy5pbml0KHtcbiAgICAgICAgICAgICAgICBjb250YWluZXJBcGk6IHRoaXMuX2FwaSxcbiAgICAgICAgICAgICAgICBhcGk6IHRoaXMuZ3JvdXBQYW5lbC5hcGksXG4gICAgICAgICAgICAgICAgZ3JvdXA6IHRoaXMuZ3JvdXBQYW5lbCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy50YWJzQ29udGFpbmVyLnNldFByZWZpeEFjdGlvbnNFbGVtZW50KHRoaXMuX3ByZWZpeEhlYWRlckFjdGlvbnMuZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVyZW5kZXIocGFuZWwpIHtcbiAgICAgICAgdGhpcy5jb250ZW50Q29udGFpbmVyLnJlbmRlclBhbmVsKHBhbmVsLCB7IGFzQWN0aXZlOiBmYWxzZSB9KTtcbiAgICB9XG4gICAgaW5kZXhPZihwYW5lbCkge1xuICAgICAgICByZXR1cm4gdGhpcy50YWJzQ29udGFpbmVyLmluZGV4T2YocGFuZWwuaWQpO1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgICAgICAgdmlld3M6IHRoaXMudGFic0NvbnRhaW5lci5wYW5lbHMsXG4gICAgICAgICAgICBhY3RpdmVWaWV3OiAoX2EgPSB0aGlzLl9hY3RpdmVQYW5lbCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmlkLFxuICAgICAgICAgICAgaWQ6IHRoaXMuaWQsXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLmxvY2tlZCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJlc3VsdC5sb2NrZWQgPSB0aGlzLmxvY2tlZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5oZWFkZXIuaGlkZGVuKSB7XG4gICAgICAgICAgICByZXN1bHQuaGlkZUhlYWRlciA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgbW92ZVRvTmV4dChvcHRpb25zKSB7XG4gICAgICAgIGlmICghb3B0aW9ucykge1xuICAgICAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGlmICghb3B0aW9ucy5wYW5lbCkge1xuICAgICAgICAgICAgb3B0aW9ucy5wYW5lbCA9IHRoaXMuYWN0aXZlUGFuZWw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW5kZXggPSBvcHRpb25zLnBhbmVsID8gdGhpcy5wYW5lbHMuaW5kZXhPZihvcHRpb25zLnBhbmVsKSA6IC0xO1xuICAgICAgICBsZXQgbm9ybWFsaXplZEluZGV4O1xuICAgICAgICBpZiAoaW5kZXggPCB0aGlzLnBhbmVscy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICBub3JtYWxpemVkSW5kZXggPSBpbmRleCArIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIW9wdGlvbnMuc3VwcHJlc3NSb2xsKSB7XG4gICAgICAgICAgICBub3JtYWxpemVkSW5kZXggPSAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3BlblBhbmVsKHRoaXMucGFuZWxzW25vcm1hbGl6ZWRJbmRleF0pO1xuICAgIH1cbiAgICBtb3ZlVG9QcmV2aW91cyhvcHRpb25zKSB7XG4gICAgICAgIGlmICghb3B0aW9ucykge1xuICAgICAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGlmICghb3B0aW9ucy5wYW5lbCkge1xuICAgICAgICAgICAgb3B0aW9ucy5wYW5lbCA9IHRoaXMuYWN0aXZlUGFuZWw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFvcHRpb25zLnBhbmVsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLnBhbmVscy5pbmRleE9mKG9wdGlvbnMucGFuZWwpO1xuICAgICAgICBsZXQgbm9ybWFsaXplZEluZGV4O1xuICAgICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgICAgICBub3JtYWxpemVkSW5kZXggPSBpbmRleCAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIW9wdGlvbnMuc3VwcHJlc3NSb2xsKSB7XG4gICAgICAgICAgICBub3JtYWxpemVkSW5kZXggPSB0aGlzLnBhbmVscy5sZW5ndGggLSAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3BlblBhbmVsKHRoaXMucGFuZWxzW25vcm1hbGl6ZWRJbmRleF0pO1xuICAgIH1cbiAgICBjb250YWluc1BhbmVsKHBhbmVsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhbmVscy5pbmNsdWRlcyhwYW5lbCk7XG4gICAgfVxuICAgIGluaXQoX3BhcmFtcykge1xuICAgICAgICAvL25vb3BcbiAgICB9XG4gICAgdXBkYXRlKF9wYXJhbXMpIHtcbiAgICAgICAgLy9ub29wXG4gICAgfVxuICAgIGZvY3VzKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIChfYSA9IHRoaXMuX2FjdGl2ZVBhbmVsKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZm9jdXMoKTtcbiAgICB9XG4gICAgb3BlblBhbmVsKHBhbmVsLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHNldCB0aGUgcGFuZWwgZ3JvdXBcbiAgICAgICAgICogYWRkIHRoZSBwYW5lbFxuICAgICAgICAgKiBjaGVjayBpZiBncm91cCBhY3RpdmVcbiAgICAgICAgICogY2hlY2sgaWYgcGFuZWwgYWN0aXZlXG4gICAgICAgICAqL1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuaW5kZXggIT09ICdudW1iZXInIHx8XG4gICAgICAgICAgICBvcHRpb25zLmluZGV4ID4gdGhpcy5wYW5lbHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBvcHRpb25zLmluZGV4ID0gdGhpcy5wYW5lbHMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNraXBTZXRBY3RpdmUgPSAhIW9wdGlvbnMuc2tpcFNldEFjdGl2ZTtcbiAgICAgICAgLy8gZW5zdXJlIHRoZSBncm91cCBpcyB1cGRhdGVkIGJlZm9yZSB3ZSBmaXJlIGFueSBldmVudHNcbiAgICAgICAgcGFuZWwudXBkYXRlUGFyZW50R3JvdXAodGhpcy5ncm91cFBhbmVsLCB7XG4gICAgICAgICAgICBza2lwU2V0QWN0aXZlOiBvcHRpb25zLnNraXBTZXRBY3RpdmUsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmRvQWRkUGFuZWwocGFuZWwsIG9wdGlvbnMuaW5kZXgsIHtcbiAgICAgICAgICAgIHNraXBTZXRBY3RpdmU6IHNraXBTZXRBY3RpdmUsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodGhpcy5fYWN0aXZlUGFuZWwgPT09IHBhbmVsKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRDb250YWluZXIucmVuZGVyUGFuZWwocGFuZWwsIHsgYXNBY3RpdmU6IHRydWUgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFza2lwU2V0QWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLmRvU2V0QWN0aXZlUGFuZWwocGFuZWwpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghb3B0aW9ucy5za2lwU2V0R3JvdXBBY3RpdmUpIHtcbiAgICAgICAgICAgIHRoaXMuYWNjZXNzb3IuZG9TZXRHcm91cEFjdGl2ZSh0aGlzLmdyb3VwUGFuZWwpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghb3B0aW9ucy5za2lwU2V0QWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUNvbnRhaW5lcigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlbW92ZVBhbmVsKGdyb3VwSXRlbU9ySWQsIG9wdGlvbnMgPSB7XG4gICAgICAgIHNraXBTZXRBY3RpdmU6IGZhbHNlLFxuICAgIH0pIHtcbiAgICAgICAgY29uc3QgaWQgPSB0eXBlb2YgZ3JvdXBJdGVtT3JJZCA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgID8gZ3JvdXBJdGVtT3JJZFxuICAgICAgICAgICAgOiBncm91cEl0ZW1PcklkLmlkO1xuICAgICAgICBjb25zdCBwYW5lbFRvUmVtb3ZlID0gdGhpcy5fcGFuZWxzLmZpbmQoKHBhbmVsKSA9PiBwYW5lbC5pZCA9PT0gaWQpO1xuICAgICAgICBpZiAoIXBhbmVsVG9SZW1vdmUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBvcGVyYXRpb24nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fcmVtb3ZlUGFuZWwocGFuZWxUb1JlbW92ZSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGNsb3NlQWxsUGFuZWxzKCkge1xuICAgICAgICBpZiAodGhpcy5wYW5lbHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gdGFrZSBhIGNvcHkgc2luY2Ugd2Ugd2lsbCBiZSBlZHRpbmcgdGhlIGFycmF5IGFzIHdlIGl0ZXJhdGUgdGhyb3VnaFxuICAgICAgICAgICAgY29uc3QgYXJyUGFuZWxDcHkgPSBbLi4udGhpcy5wYW5lbHNdO1xuICAgICAgICAgICAgZm9yIChjb25zdCBwYW5lbCBvZiBhcnJQYW5lbENweSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZG9DbG9zZShwYW5lbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFjY2Vzc29yLnJlbW92ZUdyb3VwKHRoaXMuZ3JvdXBQYW5lbCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2xvc2VQYW5lbChwYW5lbCkge1xuICAgICAgICB0aGlzLmRvQ2xvc2UocGFuZWwpO1xuICAgIH1cbiAgICBkb0Nsb3NlKHBhbmVsKSB7XG4gICAgICAgIGNvbnN0IGlzTGFzdCA9IHRoaXMucGFuZWxzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLmFjY2Vzc29yLmdyb3Vwcy5sZW5ndGggPT09IDE7XG4gICAgICAgIHRoaXMuYWNjZXNzb3IucmVtb3ZlUGFuZWwocGFuZWwsIGlzTGFzdCAmJiB0aGlzLmFjY2Vzc29yLm9wdGlvbnMubm9QYW5lbHNPdmVybGF5ID09PSAnZW1wdHlHcm91cCdcbiAgICAgICAgICAgID8geyByZW1vdmVFbXB0eUdyb3VwOiBmYWxzZSB9XG4gICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgfVxuICAgIGlzUGFuZWxBY3RpdmUocGFuZWwpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2ZVBhbmVsID09PSBwYW5lbDtcbiAgICB9XG4gICAgdXBkYXRlQWN0aW9ucyhlbGVtZW50KSB7XG4gICAgICAgIHRoaXMudGFic0NvbnRhaW5lci5zZXRSaWdodEFjdGlvbnNFbGVtZW50KGVsZW1lbnQpO1xuICAgIH1cbiAgICBzZXRBY3RpdmUoaXNHcm91cEFjdGl2ZSwgZm9yY2UgPSBmYWxzZSkge1xuICAgICAgICBpZiAoIWZvcmNlICYmIHRoaXMuaXNBY3RpdmUgPT09IGlzR3JvdXBBY3RpdmUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pc0dyb3VwQWN0aXZlID0gaXNHcm91cEFjdGl2ZTtcbiAgICAgICAgdG9nZ2xlQ2xhc3ModGhpcy5jb250YWluZXIsICdkdi1hY3RpdmUtZ3JvdXAnLCBpc0dyb3VwQWN0aXZlKTtcbiAgICAgICAgdG9nZ2xlQ2xhc3ModGhpcy5jb250YWluZXIsICdkdi1pbmFjdGl2ZS1ncm91cCcsICFpc0dyb3VwQWN0aXZlKTtcbiAgICAgICAgdGhpcy50YWJzQ29udGFpbmVyLnNldEFjdGl2ZSh0aGlzLmlzQWN0aXZlKTtcbiAgICAgICAgaWYgKCF0aGlzLl9hY3RpdmVQYW5lbCAmJiB0aGlzLnBhbmVscy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLmRvU2V0QWN0aXZlUGFuZWwodGhpcy5wYW5lbHNbMF0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlQ29udGFpbmVyKCk7XG4gICAgfVxuICAgIGxheW91dCh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdGhpcy5fd2lkdGggPSB3aWR0aDtcbiAgICAgICAgdGhpcy5faGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICB0aGlzLmNvbnRlbnRDb250YWluZXIubGF5b3V0KHRoaXMuX3dpZHRoLCB0aGlzLl9oZWlnaHQpO1xuICAgICAgICBpZiAoKF9hID0gdGhpcy5fYWN0aXZlUGFuZWwpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5sYXlvdXQpIHtcbiAgICAgICAgICAgIHRoaXMuX2FjdGl2ZVBhbmVsLmxheW91dCh0aGlzLl93aWR0aCwgdGhpcy5faGVpZ2h0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfcmVtb3ZlUGFuZWwocGFuZWwsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgaXNBY3RpdmVQYW5lbCA9IHRoaXMuX2FjdGl2ZVBhbmVsID09PSBwYW5lbDtcbiAgICAgICAgdGhpcy5kb1JlbW92ZVBhbmVsKHBhbmVsKTtcbiAgICAgICAgaWYgKGlzQWN0aXZlUGFuZWwgJiYgdGhpcy5wYW5lbHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgbmV4dFBhbmVsID0gdGhpcy5tb3N0UmVjZW50bHlVc2VkWzBdO1xuICAgICAgICAgICAgdGhpcy5vcGVuUGFuZWwobmV4dFBhbmVsLCB7XG4gICAgICAgICAgICAgICAgc2tpcFNldEFjdGl2ZTogb3B0aW9ucy5za2lwU2V0QWN0aXZlLFxuICAgICAgICAgICAgICAgIHNraXBTZXRHcm91cEFjdGl2ZTogb3B0aW9ucy5za2lwU2V0QWN0aXZlR3JvdXAsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fYWN0aXZlUGFuZWwgJiYgdGhpcy5wYW5lbHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmRvU2V0QWN0aXZlUGFuZWwodW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW9wdGlvbnMuc2tpcFNldEFjdGl2ZSkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVDb250YWluZXIoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFuZWw7XG4gICAgfVxuICAgIGRvUmVtb3ZlUGFuZWwocGFuZWwpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLnBhbmVscy5pbmRleE9mKHBhbmVsKTtcbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZVBhbmVsID09PSBwYW5lbCkge1xuICAgICAgICAgICAgdGhpcy5jb250ZW50Q29udGFpbmVyLmNsb3NlUGFuZWwoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRhYnNDb250YWluZXIuZGVsZXRlKHBhbmVsLmlkKTtcbiAgICAgICAgdGhpcy5fcGFuZWxzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIGlmICh0aGlzLm1vc3RSZWNlbnRseVVzZWQuaW5jbHVkZXMocGFuZWwpKSB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMubW9zdFJlY2VudGx5VXNlZC5pbmRleE9mKHBhbmVsKTtcbiAgICAgICAgICAgIHRoaXMubW9zdFJlY2VudGx5VXNlZC5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRpc3Bvc2FibGUgPSB0aGlzLl9wYW5lbERpc3Bvc2FibGVzLmdldChwYW5lbC5pZCk7XG4gICAgICAgIGlmIChkaXNwb3NhYmxlKSB7XG4gICAgICAgICAgICBkaXNwb3NhYmxlLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIHRoaXMuX3BhbmVsRGlzcG9zYWJsZXMuZGVsZXRlKHBhbmVsLmlkKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9vbkRpZFJlbW92ZVBhbmVsLmZpcmUoeyBwYW5lbCB9KTtcbiAgICB9XG4gICAgZG9BZGRQYW5lbChwYW5lbCwgaW5kZXggPSB0aGlzLnBhbmVscy5sZW5ndGgsIG9wdGlvbnMgPSB7IHNraXBTZXRBY3RpdmU6IGZhbHNlIH0pIHtcbiAgICAgICAgY29uc3QgZXhpc3RpbmdQYW5lbCA9IHRoaXMuX3BhbmVscy5pbmRleE9mKHBhbmVsKTtcbiAgICAgICAgY29uc3QgaGFzRXhpc3RpbmdQYW5lbCA9IGV4aXN0aW5nUGFuZWwgPiAtMTtcbiAgICAgICAgdGhpcy50YWJzQ29udGFpbmVyLnNob3coKTtcbiAgICAgICAgdGhpcy5jb250ZW50Q29udGFpbmVyLnNob3coKTtcbiAgICAgICAgdGhpcy50YWJzQ29udGFpbmVyLm9wZW5QYW5lbChwYW5lbCwgaW5kZXgpO1xuICAgICAgICBpZiAoIW9wdGlvbnMuc2tpcFNldEFjdGl2ZSkge1xuICAgICAgICAgICAgdGhpcy5jb250ZW50Q29udGFpbmVyLm9wZW5QYW5lbChwYW5lbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhc0V4aXN0aW5nUGFuZWwpIHtcbiAgICAgICAgICAgIC8vIFRPRE8gLSBuZWVkIHRvIGVuc3VyZSBvcmRlcmluZyBoYXNuJ3QgY2hhbmdlZCBhbmQgaWYgaXQgaGFzIG5lZWQgdG8gcmUtb3JkZXIgdGhpcy5wYW5lbHNcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVwZGF0ZU1ydShwYW5lbCk7XG4gICAgICAgIHRoaXMucGFuZWxzLnNwbGljZShpbmRleCwgMCwgcGFuZWwpO1xuICAgICAgICB0aGlzLl9wYW5lbERpc3Bvc2FibGVzLnNldChwYW5lbC5pZCwgbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUocGFuZWwuYXBpLm9uRGlkVGl0bGVDaGFuZ2UoKGV2ZW50KSA9PiB0aGlzLl9vbkRpZFBhbmVsVGl0bGVDaGFuZ2UuZmlyZShldmVudCkpLCBwYW5lbC5hcGkub25EaWRQYXJhbWV0ZXJzQ2hhbmdlKChldmVudCkgPT4gdGhpcy5fb25EaWRQYW5lbFBhcmFtZXRlcnNDaGFuZ2UuZmlyZShldmVudCkpKSk7XG4gICAgICAgIHRoaXMuX29uRGlkQWRkUGFuZWwuZmlyZSh7IHBhbmVsIH0pO1xuICAgIH1cbiAgICBkb1NldEFjdGl2ZVBhbmVsKHBhbmVsKSB7XG4gICAgICAgIGlmICh0aGlzLl9hY3RpdmVQYW5lbCA9PT0gcGFuZWwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9hY3RpdmVQYW5lbCA9IHBhbmVsO1xuICAgICAgICBpZiAocGFuZWwpIHtcbiAgICAgICAgICAgIHRoaXMudGFic0NvbnRhaW5lci5zZXRBY3RpdmVQYW5lbChwYW5lbCk7XG4gICAgICAgICAgICBwYW5lbC5sYXlvdXQodGhpcy5fd2lkdGgsIHRoaXMuX2hlaWdodCk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZU1ydShwYW5lbCk7XG4gICAgICAgICAgICB0aGlzLl9vbkRpZEFjdGl2ZVBhbmVsQ2hhbmdlLmZpcmUoe1xuICAgICAgICAgICAgICAgIHBhbmVsLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlTXJ1KHBhbmVsKSB7XG4gICAgICAgIGlmICh0aGlzLm1vc3RSZWNlbnRseVVzZWQuaW5jbHVkZXMocGFuZWwpKSB7XG4gICAgICAgICAgICB0aGlzLm1vc3RSZWNlbnRseVVzZWQuc3BsaWNlKHRoaXMubW9zdFJlY2VudGx5VXNlZC5pbmRleE9mKHBhbmVsKSwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tb3N0UmVjZW50bHlVc2VkID0gW3BhbmVsLCAuLi50aGlzLm1vc3RSZWNlbnRseVVzZWRdO1xuICAgIH1cbiAgICB1cGRhdGVDb250YWluZXIoKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHRoaXMucGFuZWxzLmZvckVhY2goKHBhbmVsKSA9PiBwYW5lbC5ydW5FdmVudHMoKSk7XG4gICAgICAgIGlmICh0aGlzLmlzRW1wdHkgJiYgIXRoaXMud2F0ZXJtYXJrKSB7XG4gICAgICAgICAgICBjb25zdCB3YXRlcm1hcmsgPSB0aGlzLmFjY2Vzc29yLmNyZWF0ZVdhdGVybWFya0NvbXBvbmVudCgpO1xuICAgICAgICAgICAgd2F0ZXJtYXJrLmluaXQoe1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lckFwaTogdGhpcy5fYXBpLFxuICAgICAgICAgICAgICAgIGdyb3VwOiB0aGlzLmdyb3VwUGFuZWwsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMud2F0ZXJtYXJrID0gd2F0ZXJtYXJrO1xuICAgICAgICAgICAgYWRkRGlzcG9zYWJsZUxpc3RlbmVyKHRoaXMud2F0ZXJtYXJrLmVsZW1lbnQsICdwb2ludGVyZG93bicsICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hY2Nlc3Nvci5kb1NldEdyb3VwQWN0aXZlKHRoaXMuZ3JvdXBQYW5lbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRDb250YWluZXIuZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLndhdGVybWFyay5lbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuaXNFbXB0eSAmJiB0aGlzLndhdGVybWFyaykge1xuICAgICAgICAgICAgdGhpcy53YXRlcm1hcmsuZWxlbWVudC5yZW1vdmUoKTtcbiAgICAgICAgICAgIChfYiA9IChfYSA9IHRoaXMud2F0ZXJtYXJrKS5kaXNwb3NlKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSk7XG4gICAgICAgICAgICB0aGlzLndhdGVybWFyayA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYW5EaXNwbGF5T3ZlcmxheShldmVudCwgcG9zaXRpb24sIHRhcmdldCkge1xuICAgICAgICBjb25zdCBmaXJlZEV2ZW50ID0gbmV3IERvY2t2aWV3VW5oYW5kbGVkRHJhZ092ZXJFdmVudChldmVudCwgdGFyZ2V0LCBwb3NpdGlvbiwgZ2V0UGFuZWxEYXRhLCB0aGlzLmFjY2Vzc29yLmdldFBhbmVsKHRoaXMuaWQpKTtcbiAgICAgICAgdGhpcy5fb25VbmhhbmRsZWREcmFnT3ZlckV2ZW50LmZpcmUoZmlyZWRFdmVudCk7XG4gICAgICAgIHJldHVybiBmaXJlZEV2ZW50LmlzQWNjZXB0ZWQ7XG4gICAgfVxuICAgIGhhbmRsZURyb3BFdmVudCh0eXBlLCBldmVudCwgcG9zaXRpb24sIGluZGV4KSB7XG4gICAgICAgIGlmICh0aGlzLmxvY2tlZCA9PT0gJ25vLWRyb3AtdGFyZ2V0Jykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGdldEtpbmQoKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdoZWFkZXInOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mIGluZGV4ID09PSAnbnVtYmVyJyA/ICd0YWInIDogJ2hlYWRlcl9zcGFjZSc7XG4gICAgICAgICAgICAgICAgY2FzZSAnY29udGVudCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnY29udGVudCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFuZWwgPSB0eXBlb2YgaW5kZXggPT09ICdudW1iZXInID8gdGhpcy5wYW5lbHNbaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCB3aWxsRHJvcEV2ZW50ID0gbmV3IERvY2t2aWV3V2lsbERyb3BFdmVudCh7XG4gICAgICAgICAgICBuYXRpdmVFdmVudDogZXZlbnQsXG4gICAgICAgICAgICBwb3NpdGlvbixcbiAgICAgICAgICAgIHBhbmVsLFxuICAgICAgICAgICAgZ2V0RGF0YTogKCkgPT4gZ2V0UGFuZWxEYXRhKCksXG4gICAgICAgICAgICBraW5kOiBnZXRLaW5kKCksXG4gICAgICAgICAgICBncm91cDogdGhpcy5ncm91cFBhbmVsLFxuICAgICAgICAgICAgYXBpOiB0aGlzLl9hcGksXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9vbldpbGxEcm9wLmZpcmUod2lsbERyb3BFdmVudCk7XG4gICAgICAgIGlmICh3aWxsRHJvcEV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkYXRhID0gZ2V0UGFuZWxEYXRhKCk7XG4gICAgICAgIGlmIChkYXRhICYmIGRhdGEudmlld0lkID09PSB0aGlzLmFjY2Vzc29yLmlkKSB7XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2NvbnRlbnQnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuZ3JvdXBJZCA9PT0gdGhpcy5pZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBkb24ndCBhbGxvdyB0byBkcm9wIG9uIHNlbGYgZm9yIGNlbnRlciBwb3NpdGlvblxuICAgICAgICAgICAgICAgICAgICBpZiAocG9zaXRpb24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEucGFuZWxJZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZG9uJ3QgYWxsb3cgZ3JvdXAgbW92ZSB0byBkcm9wIGFueXdoZXJlIG9uIHNlbGZcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnaGVhZGVyJykge1xuICAgICAgICAgICAgICAgIGlmIChkYXRhLmdyb3VwSWQgPT09IHRoaXMuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEucGFuZWxJZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRhdGEucGFuZWxJZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIHRoaXMgaXMgYSBncm91cCBtb3ZlIGRuZCBldmVudFxuICAgICAgICAgICAgICAgIGNvbnN0IHsgZ3JvdXBJZCB9ID0gZGF0YTtcbiAgICAgICAgICAgICAgICB0aGlzLl9vbk1vdmUuZmlyZSh7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogcG9zaXRpb24sXG4gICAgICAgICAgICAgICAgICAgIGdyb3VwSWQ6IGdyb3VwSWQsXG4gICAgICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGZyb21TYW1lR3JvdXAgPSB0aGlzLnRhYnNDb250YWluZXIuaW5kZXhPZihkYXRhLnBhbmVsSWQpICE9PSAtMTtcbiAgICAgICAgICAgIGlmIChmcm9tU2FtZUdyb3VwICYmIHRoaXMudGFic0NvbnRhaW5lci5zaXplID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgeyBncm91cElkLCBwYW5lbElkIH0gPSBkYXRhO1xuICAgICAgICAgICAgY29uc3QgaXNTYW1lR3JvdXAgPSB0aGlzLmlkID09PSBncm91cElkO1xuICAgICAgICAgICAgaWYgKGlzU2FtZUdyb3VwICYmICFwb3NpdGlvbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IG9sZEluZGV4ID0gdGhpcy50YWJzQ29udGFpbmVyLmluZGV4T2YocGFuZWxJZCk7XG4gICAgICAgICAgICAgICAgaWYgKG9sZEluZGV4ID09PSBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fb25Nb3ZlLmZpcmUoe1xuICAgICAgICAgICAgICAgIHRhcmdldDogcG9zaXRpb24sXG4gICAgICAgICAgICAgICAgZ3JvdXBJZDogZGF0YS5ncm91cElkLFxuICAgICAgICAgICAgICAgIGl0ZW1JZDogZGF0YS5wYW5lbElkLFxuICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9vbkRpZERyb3AuZmlyZShuZXcgRG9ja3ZpZXdEaWREcm9wRXZlbnQoe1xuICAgICAgICAgICAgICAgIG5hdGl2ZUV2ZW50OiBldmVudCxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbixcbiAgICAgICAgICAgICAgICBwYW5lbCxcbiAgICAgICAgICAgICAgICBnZXREYXRhOiAoKSA9PiBnZXRQYW5lbERhdGEoKSxcbiAgICAgICAgICAgICAgICBncm91cDogdGhpcy5ncm91cFBhbmVsLFxuICAgICAgICAgICAgICAgIGFwaTogdGhpcy5fYXBpLFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHVwZGF0ZURyYWdBbmREcm9wU3RhdGUoKSB7XG4gICAgICAgIHRoaXMudGFic0NvbnRhaW5lci51cGRhdGVEcmFnQW5kRHJvcFN0YXRlKCk7XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICBzdXBlci5kaXNwb3NlKCk7XG4gICAgICAgIChfYSA9IHRoaXMud2F0ZXJtYXJrKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZWxlbWVudC5yZW1vdmUoKTtcbiAgICAgICAgKF9jID0gKF9iID0gdGhpcy53YXRlcm1hcmspID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5kaXNwb3NlKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuY2FsbChfYik7XG4gICAgICAgIHRoaXMud2F0ZXJtYXJrID0gdW5kZWZpbmVkO1xuICAgICAgICBmb3IgKGNvbnN0IHBhbmVsIG9mIHRoaXMucGFuZWxzKSB7XG4gICAgICAgICAgICBwYW5lbC5kaXNwb3NlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50YWJzQ29udGFpbmVyLmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5jb250ZW50Q29udGFpbmVyLmRpc3Bvc2UoKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBEb2Nrdmlld1BhbmVsQXBpSW1wbCwgfSBmcm9tICcuLi9hcGkvZG9ja3ZpZXdQYW5lbEFwaSc7XG5pbXBvcnQgeyBDb21wb3NpdGVEaXNwb3NhYmxlIH0gZnJvbSAnLi4vbGlmZWN5Y2xlJztcbmltcG9ydCB7IFdpbGxGb2N1c0V2ZW50IH0gZnJvbSAnLi4vYXBpL3BhbmVsQXBpJztcbmV4cG9ydCBjbGFzcyBEb2Nrdmlld1BhbmVsIGV4dGVuZHMgQ29tcG9zaXRlRGlzcG9zYWJsZSB7XG4gICAgZ2V0IHBhcmFtcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcmFtcztcbiAgICB9XG4gICAgZ2V0IHRpdGxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdGl0bGU7XG4gICAgfVxuICAgIGdldCBncm91cCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dyb3VwO1xuICAgIH1cbiAgICBnZXQgcmVuZGVyZXIoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIChfYSA9IHRoaXMuX3JlbmRlcmVyKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB0aGlzLmFjY2Vzc29yLnJlbmRlcmVyO1xuICAgIH1cbiAgICBnZXQgbWluaW11bVdpZHRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWluaW11bVdpZHRoO1xuICAgIH1cbiAgICBnZXQgbWluaW11bUhlaWdodCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21pbmltdW1IZWlnaHQ7XG4gICAgfVxuICAgIGdldCBtYXhpbXVtV2lkdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXhpbXVtV2lkdGg7XG4gICAgfVxuICAgIGdldCBtYXhpbXVtSGVpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWF4aW11bUhlaWdodDtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoaWQsIGNvbXBvbmVudCwgdGFiQ29tcG9uZW50LCBhY2Nlc3NvciwgY29udGFpbmVyQXBpLCBncm91cCwgdmlldywgb3B0aW9ucykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMuYWNjZXNzb3IgPSBhY2Nlc3NvcjtcbiAgICAgICAgdGhpcy5jb250YWluZXJBcGkgPSBjb250YWluZXJBcGk7XG4gICAgICAgIHRoaXMudmlldyA9IHZpZXc7XG4gICAgICAgIHRoaXMuX3JlbmRlcmVyID0gb3B0aW9ucy5yZW5kZXJlcjtcbiAgICAgICAgdGhpcy5fZ3JvdXAgPSBncm91cDtcbiAgICAgICAgdGhpcy5fbWluaW11bVdpZHRoID0gb3B0aW9ucy5taW5pbXVtV2lkdGg7XG4gICAgICAgIHRoaXMuX21pbmltdW1IZWlnaHQgPSBvcHRpb25zLm1pbmltdW1IZWlnaHQ7XG4gICAgICAgIHRoaXMuX21heGltdW1XaWR0aCA9IG9wdGlvbnMubWF4aW11bVdpZHRoO1xuICAgICAgICB0aGlzLl9tYXhpbXVtSGVpZ2h0ID0gb3B0aW9ucy5tYXhpbXVtSGVpZ2h0O1xuICAgICAgICB0aGlzLmFwaSA9IG5ldyBEb2Nrdmlld1BhbmVsQXBpSW1wbCh0aGlzLCB0aGlzLl9ncm91cCwgYWNjZXNzb3IsIGNvbXBvbmVudCwgdGFiQ29tcG9uZW50KTtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyh0aGlzLmFwaS5vbkFjdGl2ZUNoYW5nZSgoKSA9PiB7XG4gICAgICAgICAgICBhY2Nlc3Nvci5zZXRBY3RpdmVQYW5lbCh0aGlzKTtcbiAgICAgICAgfSksIHRoaXMuYXBpLm9uRGlkU2l6ZUNoYW5nZSgoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIC8vIGZvcndhcmQgdGhlIHJlc2l6ZSBldmVudCB0byB0aGUgZ3JvdXAgc2luY2UgaWYgeW91IHdhbnQgdG8gcmVzaXplIGEgcGFuZWxcbiAgICAgICAgICAgIC8vIHlvdSBhcmUgYWN0dWFsbHkganVzdCByZXNpemluZyB0aGUgcGFuZWxzIHBhcmVudCB3aGljaCBpcyB0aGUgZ3JvdXBcbiAgICAgICAgICAgIHRoaXMuZ3JvdXAuYXBpLnNldFNpemUoZXZlbnQpO1xuICAgICAgICB9KSwgdGhpcy5hcGkub25EaWRSZW5kZXJlckNoYW5nZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmdyb3VwLm1vZGVsLnJlcmVuZGVyKHRoaXMpO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGluaXQocGFyYW1zKSB7XG4gICAgICAgIHRoaXMuX3BhcmFtcyA9IHBhcmFtcy5wYXJhbXM7XG4gICAgICAgIHRoaXMudmlldy5pbml0KE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcGFyYW1zKSwgeyBhcGk6IHRoaXMuYXBpLCBjb250YWluZXJBcGk6IHRoaXMuY29udGFpbmVyQXBpIH0pKTtcbiAgICAgICAgdGhpcy5zZXRUaXRsZShwYXJhbXMudGl0bGUpO1xuICAgIH1cbiAgICBmb2N1cygpIHtcbiAgICAgICAgY29uc3QgZXZlbnQgPSBuZXcgV2lsbEZvY3VzRXZlbnQoKTtcbiAgICAgICAgdGhpcy5hcGkuX29uV2lsbEZvY3VzLmZpcmUoZXZlbnQpO1xuICAgICAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5hcGkuaXNBY3RpdmUpIHtcbiAgICAgICAgICAgIHRoaXMuYXBpLnNldEFjdGl2ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlkOiB0aGlzLmlkLFxuICAgICAgICAgICAgY29udGVudENvbXBvbmVudDogdGhpcy52aWV3LmNvbnRlbnRDb21wb25lbnQsXG4gICAgICAgICAgICB0YWJDb21wb25lbnQ6IHRoaXMudmlldy50YWJDb21wb25lbnQsXG4gICAgICAgICAgICBwYXJhbXM6IE9iamVjdC5rZXlzKHRoaXMuX3BhcmFtcyB8fCB7fSkubGVuZ3RoID4gMFxuICAgICAgICAgICAgICAgID8gdGhpcy5fcGFyYW1zXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB0aXRsZTogdGhpcy50aXRsZSxcbiAgICAgICAgICAgIHJlbmRlcmVyOiB0aGlzLl9yZW5kZXJlcixcbiAgICAgICAgICAgIG1pbmltdW1IZWlnaHQ6IHRoaXMuX21pbmltdW1IZWlnaHQsXG4gICAgICAgICAgICBtYXhpbXVtSGVpZ2h0OiB0aGlzLl9tYXhpbXVtSGVpZ2h0LFxuICAgICAgICAgICAgbWluaW11bVdpZHRoOiB0aGlzLl9taW5pbXVtV2lkdGgsXG4gICAgICAgICAgICBtYXhpbXVtV2lkdGg6IHRoaXMuX21heGltdW1XaWR0aCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgc2V0VGl0bGUodGl0bGUpIHtcbiAgICAgICAgY29uc3QgZGlkVGl0bGVDaGFuZ2UgPSB0aXRsZSAhPT0gdGhpcy50aXRsZTtcbiAgICAgICAgaWYgKGRpZFRpdGxlQ2hhbmdlKSB7XG4gICAgICAgICAgICB0aGlzLl90aXRsZSA9IHRpdGxlO1xuICAgICAgICAgICAgdGhpcy5hcGkuX29uRGlkVGl0bGVDaGFuZ2UuZmlyZSh7IHRpdGxlIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldFJlbmRlcmVyKHJlbmRlcmVyKSB7XG4gICAgICAgIGNvbnN0IGRpZENoYW5nZSA9IHJlbmRlcmVyICE9PSB0aGlzLnJlbmRlcmVyO1xuICAgICAgICBpZiAoZGlkQ2hhbmdlKSB7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xuICAgICAgICAgICAgdGhpcy5hcGkuX29uRGlkUmVuZGVyZXJDaGFuZ2UuZmlyZSh7XG4gICAgICAgICAgICAgICAgcmVuZGVyZXI6IHJlbmRlcmVyLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlKGV2ZW50KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgLy8gbWVyZ2UgdGhlIG5ldyBwYXJhbWV0ZXJzIHdpdGggdGhlIGV4aXN0aW5nIHBhcmFtZXRlcnNcbiAgICAgICAgdGhpcy5fcGFyYW1zID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCAoKF9hID0gdGhpcy5fcGFyYW1zKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB7fSkpLCBldmVudC5wYXJhbXMpO1xuICAgICAgICAvKipcbiAgICAgICAgICogZGVsZXRlIG5ldyBrZXlzIHRoYXQgaGF2ZSBhIHZhbHVlIG9mIHVuZGVmaW5lZCxcbiAgICAgICAgICogYWxsb3cgdmFsdWVzIG9mIG51bGxcbiAgICAgICAgICovXG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKGV2ZW50LnBhcmFtcykpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5wYXJhbXNba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3BhcmFtc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHVwZGF0ZSB0aGUgdmlldyB3aXRoIHRoZSB1cGRhdGVkIHByb3BzXG4gICAgICAgIHRoaXMudmlldy51cGRhdGUoe1xuICAgICAgICAgICAgcGFyYW1zOiB0aGlzLl9wYXJhbXMsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB1cGRhdGVQYXJlbnRHcm91cChncm91cCwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLl9ncm91cCA9IGdyb3VwO1xuICAgICAgICB0aGlzLmFwaS5ncm91cCA9IHRoaXMuX2dyb3VwO1xuICAgICAgICBjb25zdCBpc1BhbmVsVmlzaWJsZSA9IHRoaXMuX2dyb3VwLm1vZGVsLmlzUGFuZWxBY3RpdmUodGhpcyk7XG4gICAgICAgIGNvbnN0IGlzQWN0aXZlID0gdGhpcy5ncm91cC5hcGkuaXNBY3RpdmUgJiYgaXNQYW5lbFZpc2libGU7XG4gICAgICAgIGlmICghKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5za2lwU2V0QWN0aXZlKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYXBpLmlzQWN0aXZlICE9PSBpc0FjdGl2ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYXBpLl9vbkRpZEFjdGl2ZUNoYW5nZS5maXJlKHtcbiAgICAgICAgICAgICAgICAgICAgaXNBY3RpdmU6IHRoaXMuZ3JvdXAuYXBpLmlzQWN0aXZlICYmIGlzUGFuZWxWaXNpYmxlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmFwaS5pc1Zpc2libGUgIT09IGlzUGFuZWxWaXNpYmxlKSB7XG4gICAgICAgICAgICB0aGlzLmFwaS5fb25EaWRWaXNpYmlsaXR5Q2hhbmdlLmZpcmUoe1xuICAgICAgICAgICAgICAgIGlzVmlzaWJsZTogaXNQYW5lbFZpc2libGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBydW5FdmVudHMoKSB7XG4gICAgICAgIGNvbnN0IGlzUGFuZWxWaXNpYmxlID0gdGhpcy5fZ3JvdXAubW9kZWwuaXNQYW5lbEFjdGl2ZSh0aGlzKTtcbiAgICAgICAgY29uc3QgaXNBY3RpdmUgPSB0aGlzLmdyb3VwLmFwaS5pc0FjdGl2ZSAmJiBpc1BhbmVsVmlzaWJsZTtcbiAgICAgICAgaWYgKHRoaXMuYXBpLmlzQWN0aXZlICE9PSBpc0FjdGl2ZSkge1xuICAgICAgICAgICAgdGhpcy5hcGkuX29uRGlkQWN0aXZlQ2hhbmdlLmZpcmUoe1xuICAgICAgICAgICAgICAgIGlzQWN0aXZlOiB0aGlzLmdyb3VwLmFwaS5pc0FjdGl2ZSAmJiBpc1BhbmVsVmlzaWJsZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmFwaS5pc1Zpc2libGUgIT09IGlzUGFuZWxWaXNpYmxlKSB7XG4gICAgICAgICAgICB0aGlzLmFwaS5fb25EaWRWaXNpYmlsaXR5Q2hhbmdlLmZpcmUoe1xuICAgICAgICAgICAgICAgIGlzVmlzaWJsZTogaXNQYW5lbFZpc2libGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsYXlvdXQod2lkdGgsIGhlaWdodCkge1xuICAgICAgICAvLyBUT0RPOiBDYW4gd2Ugc29tZWhvdyBkbyBoZWlnaHQgd2l0aG91dCBoZWFkZXIgaGVpZ2h0IG9yIGluZGljYXRlIHdoYXQgdGhlIGhlYWRlciBoZWlnaHQgaXM/XG4gICAgICAgIHRoaXMuYXBpLl9vbkRpZERpbWVuc2lvbkNoYW5nZS5maXJlKHtcbiAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnZpZXcubGF5b3V0KHdpZHRoLCBoZWlnaHQpO1xuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICB0aGlzLmFwaS5kaXNwb3NlKCk7XG4gICAgICAgIHRoaXMudmlldy5kaXNwb3NlKCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgRGVmYXVsdFRhYiB9IGZyb20gJy4vY29tcG9uZW50cy90YWIvZGVmYXVsdFRhYic7XG5leHBvcnQgY2xhc3MgRG9ja3ZpZXdQYW5lbE1vZGVsIHtcbiAgICBnZXQgY29udGVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRlbnQ7XG4gICAgfVxuICAgIGdldCB0YWIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90YWI7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGFjY2Vzc29yLCBpZCwgY29udGVudENvbXBvbmVudCwgdGFiQ29tcG9uZW50KSB7XG4gICAgICAgIHRoaXMuYWNjZXNzb3IgPSBhY2Nlc3NvcjtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLmNvbnRlbnRDb21wb25lbnQgPSBjb250ZW50Q29tcG9uZW50O1xuICAgICAgICB0aGlzLnRhYkNvbXBvbmVudCA9IHRhYkNvbXBvbmVudDtcbiAgICAgICAgdGhpcy5fY29udGVudCA9IHRoaXMuY3JlYXRlQ29udGVudENvbXBvbmVudCh0aGlzLmlkLCBjb250ZW50Q29tcG9uZW50KTtcbiAgICAgICAgdGhpcy5fdGFiID0gdGhpcy5jcmVhdGVUYWJDb21wb25lbnQodGhpcy5pZCwgdGFiQ29tcG9uZW50KTtcbiAgICB9XG4gICAgY3JlYXRlVGFiUmVuZGVyZXIodGFiTG9jYXRpb24pIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBjbXAgPSB0aGlzLmNyZWF0ZVRhYkNvbXBvbmVudCh0aGlzLmlkLCB0aGlzLnRhYkNvbXBvbmVudCk7XG4gICAgICAgIGlmICh0aGlzLl9wYXJhbXMpIHtcbiAgICAgICAgICAgIGNtcC5pbml0KE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5fcGFyYW1zKSwgeyB0YWJMb2NhdGlvbiB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3VwZGF0ZUV2ZW50KSB7XG4gICAgICAgICAgICAoX2EgPSBjbXAudXBkYXRlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbChjbXAsIHRoaXMuX3VwZGF0ZUV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY21wO1xuICAgIH1cbiAgICBpbml0KHBhcmFtcykge1xuICAgICAgICB0aGlzLl9wYXJhbXMgPSBwYXJhbXM7XG4gICAgICAgIHRoaXMuY29udGVudC5pbml0KHBhcmFtcyk7XG4gICAgICAgIHRoaXMudGFiLmluaXQoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBwYXJhbXMpLCB7IHRhYkxvY2F0aW9uOiAnaGVhZGVyJyB9KSk7XG4gICAgfVxuICAgIGxheW91dCh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuY29udGVudCkubGF5b3V0KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgd2lkdGgsIGhlaWdodCk7XG4gICAgfVxuICAgIHVwZGF0ZShldmVudCkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgICAgIHRoaXMuX3VwZGF0ZUV2ZW50ID0gZXZlbnQ7XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuY29udGVudCkudXBkYXRlKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgZXZlbnQpO1xuICAgICAgICAoX2QgPSAoX2MgPSB0aGlzLnRhYikudXBkYXRlKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QuY2FsbChfYywgZXZlbnQpO1xuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuY29udGVudCkuZGlzcG9zZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EpO1xuICAgICAgICAoX2QgPSAoX2MgPSB0aGlzLnRhYikuZGlzcG9zZSkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmNhbGwoX2MpO1xuICAgIH1cbiAgICBjcmVhdGVDb250ZW50Q29tcG9uZW50KGlkLCBjb21wb25lbnROYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFjY2Vzc29yLm9wdGlvbnMuY3JlYXRlQ29tcG9uZW50KHtcbiAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgbmFtZTogY29tcG9uZW50TmFtZSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNyZWF0ZVRhYkNvbXBvbmVudChpZCwgY29tcG9uZW50TmFtZSkge1xuICAgICAgICBjb25zdCBuYW1lID0gY29tcG9uZW50TmFtZSAhPT0gbnVsbCAmJiBjb21wb25lbnROYW1lICE9PSB2b2lkIDAgPyBjb21wb25lbnROYW1lIDogdGhpcy5hY2Nlc3Nvci5vcHRpb25zLmRlZmF1bHRUYWJDb21wb25lbnQ7XG4gICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hY2Nlc3Nvci5vcHRpb25zLmNyZWF0ZVRhYkNvbXBvbmVudCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IHRoaXMuYWNjZXNzb3Iub3B0aW9ucy5jcmVhdGVUYWJDb21wb25lbnQoe1xuICAgICAgICAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoY29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb21wb25lbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERlZmF1bHRUYWIoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYGRvY2t2aWV3OiB0YWJDb21wb25lbnQgJyR7Y29tcG9uZW50TmFtZX0nIHdhcyBub3QgZm91bmQuIGZhbGxpbmcgYmFjayB0byB0aGUgZGVmYXVsdCB0YWIuYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBEZWZhdWx0VGFiKCk7XG4gICAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIFdpbGxTaG93T3ZlcmxheUxvY2F0aW9uRXZlbnQge1xuICAgIGdldCBraW5kKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmtpbmQ7XG4gICAgfVxuICAgIGdldCBuYXRpdmVFdmVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXZlbnQubmF0aXZlRXZlbnQ7XG4gICAgfVxuICAgIGdldCBwb3NpdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXZlbnQucG9zaXRpb247XG4gICAgfVxuICAgIGdldCBkZWZhdWx0UHJldmVudGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ldmVudC5kZWZhdWx0UHJldmVudGVkO1xuICAgIH1cbiAgICBnZXQgcGFuZWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMucGFuZWw7XG4gICAgfVxuICAgIGdldCBhcGkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuYXBpO1xuICAgIH1cbiAgICBnZXQgZ3JvdXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuZ3JvdXA7XG4gICAgfVxuICAgIHByZXZlbnREZWZhdWx0KCkge1xuICAgICAgICB0aGlzLmV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICAgIGdldERhdGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuZ2V0RGF0YSgpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihldmVudCwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLmV2ZW50ID0gZXZlbnQ7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQWNjZXB0YWJsZUV2ZW50IH0gZnJvbSAnLi4vZXZlbnRzJztcbmV4cG9ydCBjbGFzcyBEb2Nrdmlld1VuaGFuZGxlZERyYWdPdmVyRXZlbnQgZXh0ZW5kcyBBY2NlcHRhYmxlRXZlbnQge1xuICAgIGNvbnN0cnVjdG9yKG5hdGl2ZUV2ZW50LCB0YXJnZXQsIHBvc2l0aW9uLCBnZXREYXRhLCBncm91cCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm5hdGl2ZUV2ZW50ID0gbmF0aXZlRXZlbnQ7XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICB0aGlzLnBvc2l0aW9uID0gcG9zaXRpb247XG4gICAgICAgIHRoaXMuZ2V0RGF0YSA9IGdldERhdGE7XG4gICAgICAgIHRoaXMuZ3JvdXAgPSBncm91cDtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgUFJPUEVSVFlfS0VZU19ET0NLVklFVyA9ICgoKSA9PiB7XG4gICAgLyoqXG4gICAgICogYnkgcmVhZG9uZyB0aGUga2V5cyBmcm9tIGFuIGVtcHR5IHZhbHVlIG9iamVjdCBUeXBlU2NyaXB0IHdpbGwgZXJyb3JcbiAgICAgKiB3aGVuIHdlIGFkZCBvciByZW1vdmUgbmV3IHByb3BlcnRpZXMgdG8gYERvY2t2aWV3T3B0aW9uc2BcbiAgICAgKi9cbiAgICBjb25zdCBwcm9wZXJ0aWVzID0ge1xuICAgICAgICBkaXNhYmxlQXV0b1Jlc2l6aW5nOiB1bmRlZmluZWQsXG4gICAgICAgIGhpZGVCb3JkZXJzOiB1bmRlZmluZWQsXG4gICAgICAgIHNpbmdsZVRhYk1vZGU6IHVuZGVmaW5lZCxcbiAgICAgICAgZGlzYWJsZUZsb2F0aW5nR3JvdXBzOiB1bmRlZmluZWQsXG4gICAgICAgIGZsb2F0aW5nR3JvdXBCb3VuZHM6IHVuZGVmaW5lZCxcbiAgICAgICAgcG9wb3V0VXJsOiB1bmRlZmluZWQsXG4gICAgICAgIGRlZmF1bHRSZW5kZXJlcjogdW5kZWZpbmVkLFxuICAgICAgICBkZWJ1ZzogdW5kZWZpbmVkLFxuICAgICAgICByb290T3ZlcmxheU1vZGVsOiB1bmRlZmluZWQsXG4gICAgICAgIGxvY2tlZDogdW5kZWZpbmVkLFxuICAgICAgICBkaXNhYmxlRG5kOiB1bmRlZmluZWQsXG4gICAgICAgIGNsYXNzTmFtZTogdW5kZWZpbmVkLFxuICAgICAgICBub1BhbmVsc092ZXJsYXk6IHVuZGVmaW5lZCxcbiAgICAgICAgZG5kRWRnZXM6IHVuZGVmaW5lZCxcbiAgICAgICAgdGhlbWU6IHVuZGVmaW5lZCxcbiAgICAgICAgZGlzYWJsZVRhYnNPdmVyZmxvd0xpc3Q6IHVuZGVmaW5lZCxcbiAgICAgICAgc2Nyb2xsYmFyczogdW5kZWZpbmVkLFxuICAgIH07XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BlcnRpZXMpO1xufSkoKTtcbmV4cG9ydCBmdW5jdGlvbiBpc1BhbmVsT3B0aW9uc1dpdGhQYW5lbChkYXRhKSB7XG4gICAgaWYgKGRhdGEucmVmZXJlbmNlUGFuZWwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1BhbmVsT3B0aW9uc1dpdGhHcm91cChkYXRhKSB7XG4gICAgaWYgKGRhdGEucmVmZXJlbmNlR3JvdXApIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0dyb3VwT3B0aW9uc1dpdGhQYW5lbChkYXRhKSB7XG4gICAgaWYgKGRhdGEucmVmZXJlbmNlUGFuZWwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0dyb3VwT3B0aW9uc1dpdGhHcm91cChkYXRhKSB7XG4gICAgaWYgKGRhdGEucmVmZXJlbmNlR3JvdXApIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbiIsImltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUgfSBmcm9tICcuLi9saWZlY3ljbGUnO1xuZXhwb3J0IGNsYXNzIFN0cmljdEV2ZW50c1NlcXVlbmNpbmcgZXh0ZW5kcyBDb21wb3NpdGVEaXNwb3NhYmxlIHtcbiAgICBjb25zdHJ1Y3RvcihhY2Nlc3Nvcikge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmFjY2Vzc29yID0gYWNjZXNzb3I7XG4gICAgICAgIHRoaXMuaW5pdCgpO1xuICAgIH1cbiAgICBpbml0KCkge1xuICAgICAgICBjb25zdCBwYW5lbHMgPSBuZXcgU2V0KCk7XG4gICAgICAgIGNvbnN0IGdyb3VwcyA9IG5ldyBTZXQoKTtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyh0aGlzLmFjY2Vzc29yLm9uRGlkQWRkUGFuZWwoKHBhbmVsKSA9PiB7XG4gICAgICAgICAgICBpZiAocGFuZWxzLmhhcyhwYW5lbC5hcGkuaWQpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBkb2NrdmlldzogSW52YWxpZCBldmVudCBzZXF1ZW5jZS4gW29uRGlkQWRkUGFuZWxdIGNhbGxlZCBmb3IgcGFuZWwgJHtwYW5lbC5hcGkuaWR9IGJ1dCBwYW5lbCBhbHJlYWR5IGV4aXN0c2ApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFuZWxzLmFkZChwYW5lbC5hcGkuaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSwgdGhpcy5hY2Nlc3Nvci5vbkRpZFJlbW92ZVBhbmVsKChwYW5lbCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFwYW5lbHMuaGFzKHBhbmVsLmFwaS5pZCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGRvY2t2aWV3OiBJbnZhbGlkIGV2ZW50IHNlcXVlbmNlLiBbb25EaWRSZW1vdmVQYW5lbF0gY2FsbGVkIGZvciBwYW5lbCAke3BhbmVsLmFwaS5pZH0gYnV0IHBhbmVsIGRvZXMgbm90IGV4aXN0c2ApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFuZWxzLmRlbGV0ZShwYW5lbC5hcGkuaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSwgdGhpcy5hY2Nlc3Nvci5vbkRpZEFkZEdyb3VwKChncm91cCkgPT4ge1xuICAgICAgICAgICAgaWYgKGdyb3Vwcy5oYXMoZ3JvdXAuYXBpLmlkKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgZG9ja3ZpZXc6IEludmFsaWQgZXZlbnQgc2VxdWVuY2UuIFtvbkRpZEFkZEdyb3VwXSBjYWxsZWQgZm9yIGdyb3VwICR7Z3JvdXAuYXBpLmlkfSBidXQgZ3JvdXAgYWxyZWFkeSBleGlzdHNgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGdyb3Vwcy5hZGQoZ3JvdXAuYXBpLmlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksIHRoaXMuYWNjZXNzb3Iub25EaWRSZW1vdmVHcm91cCgoZ3JvdXApID0+IHtcbiAgICAgICAgICAgIGlmICghZ3JvdXBzLmhhcyhncm91cC5hcGkuaWQpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBkb2NrdmlldzogSW52YWxpZCBldmVudCBzZXF1ZW5jZS4gW29uRGlkUmVtb3ZlR3JvdXBdIGNhbGxlZCBmb3IgZ3JvdXAgJHtncm91cC5hcGkuaWR9IGJ1dCBncm91cCBkb2VzIG5vdCBleGlzdHNgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGdyb3Vwcy5kZWxldGUoZ3JvdXAuYXBpLmlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH1cbn1cbiIsImV4cG9ydCBjb25zdCB0aGVtZURhcmsgPSB7XG4gICAgbmFtZTogJ2RhcmsnLFxuICAgIGNsYXNzTmFtZTogJ2RvY2t2aWV3LXRoZW1lLWRhcmsnLFxufTtcbmV4cG9ydCBjb25zdCB0aGVtZUxpZ2h0ID0ge1xuICAgIG5hbWU6ICdsaWdodCcsXG4gICAgY2xhc3NOYW1lOiAnZG9ja3ZpZXctdGhlbWUtbGlnaHQnLFxufTtcbmV4cG9ydCBjb25zdCB0aGVtZVZpc3VhbFN0dWRpbyA9IHtcbiAgICBuYW1lOiAndmlzdWFsU3R1ZGlvJyxcbiAgICBjbGFzc05hbWU6ICdkb2Nrdmlldy10aGVtZS12cycsXG59O1xuZXhwb3J0IGNvbnN0IHRoZW1lQWJ5c3MgPSB7XG4gICAgbmFtZTogJ2FieXNzJyxcbiAgICBjbGFzc05hbWU6ICdkb2Nrdmlldy10aGVtZS1hYnlzcycsXG59O1xuZXhwb3J0IGNvbnN0IHRoZW1lRHJhY3VsYSA9IHtcbiAgICBuYW1lOiAnZHJhY3VsYScsXG4gICAgY2xhc3NOYW1lOiAnZG9ja3ZpZXctdGhlbWUtZHJhY3VsYScsXG59O1xuZXhwb3J0IGNvbnN0IHRoZW1lUmVwbGl0ID0ge1xuICAgIG5hbWU6ICdyZXBsaXQnLFxuICAgIGNsYXNzTmFtZTogJ2RvY2t2aWV3LXRoZW1lLXJlcGxpdCcsXG4gICAgZ2FwOiAxMCxcbn07XG5leHBvcnQgY29uc3QgdGhlbWVBYnlzc1NwYWNlZCA9IHtcbiAgICBuYW1lOiAnYWJ5c3NTcGFjZWQnLFxuICAgIGNsYXNzTmFtZTogJ2RvY2t2aWV3LXRoZW1lLWFieXNzLXNwYWNlZCcsXG4gICAgZ2FwOiAxMCxcbiAgICBkbmRPdmVybGF5TW91bnRpbmc6ICdhYnNvbHV0ZScsXG4gICAgZG5kUGFuZWxPdmVybGF5OiAnZ3JvdXAnLFxufTtcbmV4cG9ydCBjb25zdCB0aGVtZUxpZ2h0U3BhY2VkID0ge1xuICAgIG5hbWU6ICdsaWdodFNwYWNlZCcsXG4gICAgY2xhc3NOYW1lOiAnZG9ja3ZpZXctdGhlbWUtbGlnaHQtc3BhY2VkJyxcbiAgICBnYXA6IDEwLFxuICAgIGRuZE92ZXJsYXlNb3VudGluZzogJ2Fic29sdXRlJyxcbiAgICBkbmRQYW5lbE92ZXJsYXk6ICdncm91cCcsXG59O1xuIiwiZXhwb3J0IHt9O1xuIiwiaW1wb3J0IHsgRW1pdHRlciwgYWRkRGlzcG9zYWJsZUxpc3RlbmVyLCB9IGZyb20gJy4vZXZlbnRzJztcbmltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUgfSBmcm9tICcuL2xpZmVjeWNsZSc7XG5leHBvcnQgY2xhc3MgT3ZlcmZsb3dPYnNlcnZlciBleHRlbmRzIENvbXBvc2l0ZURpc3Bvc2FibGUge1xuICAgIGNvbnN0cnVjdG9yKGVsKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX29uRGlkQ2hhbmdlID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZENoYW5nZSA9IHRoaXMuX29uRGlkQ2hhbmdlLmV2ZW50O1xuICAgICAgICB0aGlzLl92YWx1ZSA9IG51bGw7XG4gICAgICAgIHRoaXMuYWRkRGlzcG9zYWJsZXModGhpcy5fb25EaWRDaGFuZ2UsIHdhdGNoRWxlbWVudFJlc2l6ZShlbCwgKGVudHJ5KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBoYXNTY3JvbGxYID0gZW50cnkudGFyZ2V0LnNjcm9sbFdpZHRoID4gZW50cnkudGFyZ2V0LmNsaWVudFdpZHRoO1xuICAgICAgICAgICAgY29uc3QgaGFzU2Nyb2xsWSA9IGVudHJ5LnRhcmdldC5zY3JvbGxIZWlnaHQgPiBlbnRyeS50YXJnZXQuY2xpZW50SGVpZ2h0O1xuICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSB7IGhhc1Njcm9sbFgsIGhhc1Njcm9sbFkgfTtcbiAgICAgICAgICAgIHRoaXMuX29uRGlkQ2hhbmdlLmZpcmUodGhpcy5fdmFsdWUpO1xuICAgICAgICB9KSk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHdhdGNoRWxlbWVudFJlc2l6ZShlbGVtZW50LCBjYikge1xuICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKChlbnRpcmVzKSA9PiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGYXN0IGJyb3dzZXIgd2luZG93IHJlc2l6ZSBwcm9kdWNlcyBFcnJvcjogUmVzaXplT2JzZXJ2ZXIgbG9vcCBsaW1pdCBleGNlZWRlZC5cbiAgICAgICAgICogVGhlIGVycm9yIGlzbid0IHZpc2libGUgaW4gYnJvd3NlciBjb25zb2xlLCBkb2Vzbid0IGFmZmVjdCBmdW5jdGlvbmFsaXR5LCBidXQgZGVncmFkZXMgcGVyZm9ybWFuY2UuXG4gICAgICAgICAqIFNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80OTM4NDEyMC9yZXNpemVvYnNlcnZlci1sb29wLWxpbWl0LWV4Y2VlZGVkLzU4NzAxNTIzIzU4NzAxNTIzXG4gICAgICAgICAqL1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmlyc3RFbnRyeSA9IGVudGlyZXNbMF07XG4gICAgICAgICAgICBjYihmaXJzdEVudHJ5KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZShlbGVtZW50KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBkaXNwb3NlOiAoKSA9PiB7XG4gICAgICAgICAgICBvYnNlcnZlci51bm9ic2VydmUoZWxlbWVudCk7XG4gICAgICAgICAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmV4cG9ydCBjb25zdCByZW1vdmVDbGFzc2VzID0gKGVsZW1lbnQsIC4uLmNsYXNzZXMpID0+IHtcbiAgICBmb3IgKGNvbnN0IGNsYXNzbmFtZSBvZiBjbGFzc2VzKSB7XG4gICAgICAgIGlmIChlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc25hbWUpKSB7XG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NuYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5leHBvcnQgY29uc3QgYWRkQ2xhc3NlcyA9IChlbGVtZW50LCAuLi5jbGFzc2VzKSA9PiB7XG4gICAgZm9yIChjb25zdCBjbGFzc25hbWUgb2YgY2xhc3Nlcykge1xuICAgICAgICBpZiAoIWVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzbmFtZSkpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc25hbWUpO1xuICAgICAgICB9XG4gICAgfVxufTtcbmV4cG9ydCBjb25zdCB0b2dnbGVDbGFzcyA9IChlbGVtZW50LCBjbGFzc05hbWUsIGlzVG9nZ2xlZCkgPT4ge1xuICAgIGNvbnN0IGhhc0NsYXNzID0gZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKTtcbiAgICBpZiAoaXNUb2dnbGVkICYmICFoYXNDbGFzcykge1xuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcbiAgICB9XG4gICAgaWYgKCFpc1RvZ2dsZWQgJiYgaGFzQ2xhc3MpIHtcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gICAgfVxufTtcbmV4cG9ydCBmdW5jdGlvbiBpc0FuY2VzdG9yKHRlc3RDaGlsZCwgdGVzdEFuY2VzdG9yKSB7XG4gICAgd2hpbGUgKHRlc3RDaGlsZCkge1xuICAgICAgICBpZiAodGVzdENoaWxkID09PSB0ZXN0QW5jZXN0b3IpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHRlc3RDaGlsZCA9IHRlc3RDaGlsZC5wYXJlbnROb2RlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0RWxlbWVudHNCeVRhZ05hbWUodGFnLCBkb2N1bWVudCkge1xuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHRhZyksIDApO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRyYWNrRm9jdXMoZWxlbWVudCkge1xuICAgIHJldHVybiBuZXcgRm9jdXNUcmFja2VyKGVsZW1lbnQpO1xufVxuLyoqXG4gKiBUcmFjayBmb2N1cyBvbiBhbiBlbGVtZW50LiBFbnN1cmUgdGFiSW5kZXggaXMgc2V0IHdoZW4gYW4gSFRNTEVsZW1lbnQgaXMgbm90IGZvY3VzYWJsZSBieSBkZWZhdWx0XG4gKi9cbmNsYXNzIEZvY3VzVHJhY2tlciBleHRlbmRzIENvbXBvc2l0ZURpc3Bvc2FibGUge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fb25EaWRGb2N1cyA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRGb2N1cyA9IHRoaXMuX29uRGlkRm9jdXMuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uRGlkQmx1ciA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRCbHVyID0gdGhpcy5fb25EaWRCbHVyLmV2ZW50O1xuICAgICAgICB0aGlzLmFkZERpc3Bvc2FibGVzKHRoaXMuX29uRGlkRm9jdXMsIHRoaXMuX29uRGlkQmx1cik7XG4gICAgICAgIGxldCBoYXNGb2N1cyA9IGlzQW5jZXN0b3IoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCwgZWxlbWVudCk7XG4gICAgICAgIGxldCBsb29zaW5nRm9jdXMgPSBmYWxzZTtcbiAgICAgICAgY29uc3Qgb25Gb2N1cyA9ICgpID0+IHtcbiAgICAgICAgICAgIGxvb3NpbmdGb2N1cyA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKCFoYXNGb2N1cykge1xuICAgICAgICAgICAgICAgIGhhc0ZvY3VzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9vbkRpZEZvY3VzLmZpcmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgb25CbHVyID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGhhc0ZvY3VzKSB7XG4gICAgICAgICAgICAgICAgbG9vc2luZ0ZvY3VzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsb29zaW5nRm9jdXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvb3NpbmdGb2N1cyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFzRm9jdXMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29uRGlkQmx1ci5maXJlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fcmVmcmVzaFN0YXRlSGFuZGxlciA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnROb2RlSGFzRm9jdXMgPSBpc0FuY2VzdG9yKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQsIGVsZW1lbnQpO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnROb2RlSGFzRm9jdXMgIT09IGhhc0ZvY3VzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhc0ZvY3VzKSB7XG4gICAgICAgICAgICAgICAgICAgIG9uQmx1cigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb25Gb2N1cygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyhhZGREaXNwb3NhYmxlTGlzdGVuZXIoZWxlbWVudCwgJ2ZvY3VzJywgb25Gb2N1cywgdHJ1ZSkpO1xuICAgICAgICB0aGlzLmFkZERpc3Bvc2FibGVzKGFkZERpc3Bvc2FibGVMaXN0ZW5lcihlbGVtZW50LCAnYmx1cicsIG9uQmx1ciwgdHJ1ZSkpO1xuICAgIH1cbiAgICByZWZyZXNoU3RhdGUoKSB7XG4gICAgICAgIHRoaXMuX3JlZnJlc2hTdGF0ZUhhbmRsZXIoKTtcbiAgICB9XG59XG4vLyBxdWFzaTogYXBwYXJlbnRseSwgYnV0IG5vdCByZWFsbHk7IHNlZW1pbmdseVxuY29uc3QgUVVBU0lfUFJFVkVOVF9ERUZBVUxUX0tFWSA9ICdkdi1xdWFzaVByZXZlbnREZWZhdWx0Jztcbi8vIG1hcmsgYW4gZXZlbnQgZGlyZWN0bHkgZm9yIG90aGVyIGxpc3RlbmVycyB0byBjaGVja1xuZXhwb3J0IGZ1bmN0aW9uIHF1YXNpUHJldmVudERlZmF1bHQoZXZlbnQpIHtcbiAgICBldmVudFtRVUFTSV9QUkVWRU5UX0RFRkFVTFRfS0VZXSA9IHRydWU7XG59XG4vLyBjaGVjayBpZiB0aGlzIGV2ZW50IGhhcyBiZWVuIG1hcmtlZFxuZXhwb3J0IGZ1bmN0aW9uIHF1YXNpRGVmYXVsdFByZXZlbnRlZChldmVudCkge1xuICAgIHJldHVybiBldmVudFtRVUFTSV9QUkVWRU5UX0RFRkFVTFRfS0VZXTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhZGRTdHlsZXMoZG9jdW1lbnQsIHN0eWxlU2hlZXRMaXN0KSB7XG4gICAgY29uc3Qgc3R5bGVTaGVldHMgPSBBcnJheS5mcm9tKHN0eWxlU2hlZXRMaXN0KTtcbiAgICBmb3IgKGNvbnN0IHN0eWxlU2hlZXQgb2Ygc3R5bGVTaGVldHMpIHtcbiAgICAgICAgaWYgKHN0eWxlU2hlZXQuaHJlZikge1xuICAgICAgICAgICAgY29uc3QgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTtcbiAgICAgICAgICAgIGxpbmsuaHJlZiA9IHN0eWxlU2hlZXQuaHJlZjtcbiAgICAgICAgICAgIGxpbmsudHlwZSA9IHN0eWxlU2hlZXQudHlwZTtcbiAgICAgICAgICAgIGxpbmsucmVsID0gJ3N0eWxlc2hlZXQnO1xuICAgICAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChsaW5rKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgY3NzVGV4dHMgPSBbXTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChzdHlsZVNoZWV0LmNzc1J1bGVzKSB7XG4gICAgICAgICAgICAgICAgY3NzVGV4dHMgPSBBcnJheS5mcm9tKHN0eWxlU2hlZXQuY3NzUnVsZXMpLm1hcCgocnVsZSkgPT4gcnVsZS5jc3NUZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAvLyBzZWN1cml0eSBlcnJvcnMgKGxhY2sgb2YgcGVybWlzc2lvbnMpLCBpZ25vcmVcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHJ1bGUgb2YgY3NzVGV4dHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICAgICAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHJ1bGUpKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGdldERvbU5vZGVQYWdlUG9zaXRpb24oZG9tTm9kZSkge1xuICAgIGNvbnN0IHsgbGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0IH0gPSBkb21Ob2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6IGxlZnQgKyB3aW5kb3cuc2Nyb2xsWCxcbiAgICAgICAgdG9wOiB0b3AgKyB3aW5kb3cuc2Nyb2xsWSxcbiAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICB9O1xufVxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIGFuIGVsZW1lbnQgaXMgaW4gdGhlIERPTSAoaW5jbHVkaW5nIHRoZSBTaGFkb3cgRE9NKVxuICogQHNlZSBodHRwczovL3Rlcm9kb3gudGVjaC9ob3ctdG8tdGVsbC1pZi1hbi1lbGVtZW50LWlzLWluLXRoZS1kb20taW5jbHVkaW5nLXRoZS1zaGFkb3ctZG9tL1xuICovXG5leHBvcnQgZnVuY3Rpb24gaXNJbkRvY3VtZW50KGVsZW1lbnQpIHtcbiAgICBsZXQgY3VycmVudEVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHdoaWxlIChjdXJyZW50RWxlbWVudCA9PT0gbnVsbCB8fCBjdXJyZW50RWxlbWVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogY3VycmVudEVsZW1lbnQucGFyZW50Tm9kZSkge1xuICAgICAgICBpZiAoY3VycmVudEVsZW1lbnQucGFyZW50Tm9kZSA9PT0gZG9jdW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGN1cnJlbnRFbGVtZW50LnBhcmVudE5vZGUgaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50KSB7XG4gICAgICAgICAgICAvLyBoYW5kbGUgc2hhZG93IERPTXNcbiAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50ID0gY3VycmVudEVsZW1lbnQucGFyZW50Tm9kZS5ob3N0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY3VycmVudEVsZW1lbnQgPSBjdXJyZW50RWxlbWVudC5wYXJlbnROb2RlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhZGRUZXN0SWQoZWxlbWVudCwgaWQpIHtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS10ZXN0aWQnLCBpZCk7XG59XG4vKipcbiAqIFNob3VsZCBiZSBtb3JlIGVmZmljaWVudCB0aGFuIGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIipcIikgc2luY2UgdGhlcmVcbiAqIGlzIG5vIG5lZWQgdG8gc3RvcmUgZXZlcnkgZWxlbWVudCBpbi1tZW1vcnkgdXNpbmcgdGhpcyBhcHByb2FjaFxuICovXG5mdW5jdGlvbiBhbGxUYWdzTmFtZXNJbmNsdXNpdmVPZlNoYWRvd0RvbXModGFnTmFtZXMpIHtcbiAgICBjb25zdCBpZnJhbWVzID0gW107XG4gICAgZnVuY3Rpb24gZmluZElmcmFtZXNJbk5vZGUobm9kZSkge1xuICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICAgICAgICAgIGlmICh0YWdOYW1lcy5pbmNsdWRlcyhub2RlLnRhZ05hbWUpKSB7XG4gICAgICAgICAgICAgICAgaWZyYW1lcy5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5vZGUuc2hhZG93Um9vdCkge1xuICAgICAgICAgICAgICAgIGZpbmRJZnJhbWVzSW5Ob2RlKG5vZGUuc2hhZG93Um9vdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICBmaW5kSWZyYW1lc0luTm9kZShjaGlsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZmluZElmcmFtZXNJbk5vZGUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KTtcbiAgICByZXR1cm4gaWZyYW1lcztcbn1cbmV4cG9ydCBmdW5jdGlvbiBkaXNhYmxlSWZyYW1lUG9pbnRFdmVudHMocm9vdE5vZGUgPSBkb2N1bWVudCkge1xuICAgIGNvbnN0IGlmcmFtZXMgPSBhbGxUYWdzTmFtZXNJbmNsdXNpdmVPZlNoYWRvd0RvbXMoWydJRlJBTUUnLCAnV0VCVklFVyddKTtcbiAgICBjb25zdCBvcmlnaW5hbCA9IG5ldyBXZWFrTWFwKCk7IC8vIGRvbid0IGhvbGQgb250byBIVE1MRWxlbWVudCByZWZlcmVuY2VzIGxvbmdlciB0aGFuIHJlcXVpcmVkXG4gICAgZm9yIChjb25zdCBpZnJhbWUgb2YgaWZyYW1lcykge1xuICAgICAgICBvcmlnaW5hbC5zZXQoaWZyYW1lLCBpZnJhbWUuc3R5bGUucG9pbnRlckV2ZW50cyk7XG4gICAgICAgIGlmcmFtZS5zdHlsZS5wb2ludGVyRXZlbnRzID0gJ25vbmUnO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICByZWxlYXNlOiAoKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGlmcmFtZSBvZiBpZnJhbWVzKSB7XG4gICAgICAgICAgICAgICAgaWZyYW1lLnN0eWxlLnBvaW50ZXJFdmVudHMgPSAoX2EgPSBvcmlnaW5hbC5nZXQoaWZyYW1lKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJ2F1dG8nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWZyYW1lcy5zcGxpY2UoMCwgaWZyYW1lcy5sZW5ndGgpOyAvLyBkb24ndCBob2xkIG9udG8gSFRNTEVsZW1lbnQgcmVmZXJlbmNlcyBsb25nZXIgdGhhbiByZXF1aXJlZFxuICAgICAgICB9LFxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0RG9ja3ZpZXdUaGVtZShlbGVtZW50KSB7XG4gICAgZnVuY3Rpb24gdG9DbGFzc0xpc3QoZWxlbWVudCkge1xuICAgICAgICBjb25zdCBsaXN0ID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWxlbWVudC5jbGFzc0xpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxpc3QucHVzaChlbGVtZW50LmNsYXNzTGlzdC5pdGVtKGkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGlzdDtcbiAgICB9XG4gICAgbGV0IHRoZW1lID0gdW5kZWZpbmVkO1xuICAgIGxldCBwYXJlbnQgPSBlbGVtZW50O1xuICAgIHdoaWxlIChwYXJlbnQgIT09IG51bGwpIHtcbiAgICAgICAgdGhlbWUgPSB0b0NsYXNzTGlzdChwYXJlbnQpLmZpbmQoKGNscykgPT4gY2xzLnN0YXJ0c1dpdGgoJ2RvY2t2aWV3LXRoZW1lLScpKTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGVtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnRFbGVtZW50O1xuICAgIH1cbiAgICByZXR1cm4gdGhlbWU7XG59XG5leHBvcnQgY2xhc3MgQ2xhc3NuYW1lcyB7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudCkge1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICB0aGlzLl9jbGFzc05hbWVzID0gW107XG4gICAgfVxuICAgIHNldENsYXNzTmFtZXMoY2xhc3NOYW1lcykge1xuICAgICAgICBmb3IgKGNvbnN0IGNsYXNzTmFtZSBvZiB0aGlzLl9jbGFzc05hbWVzKSB7XG4gICAgICAgICAgICB0b2dnbGVDbGFzcyh0aGlzLmVsZW1lbnQsIGNsYXNzTmFtZSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NsYXNzTmFtZXMgPSBjbGFzc05hbWVzXG4gICAgICAgICAgICAuc3BsaXQoJyAnKVxuICAgICAgICAgICAgLmZpbHRlcigodikgPT4gdi50cmltKCkubGVuZ3RoID4gMCk7XG4gICAgICAgIGZvciAoY29uc3QgY2xhc3NOYW1lIG9mIHRoaXMuX2NsYXNzTmFtZXMpIHtcbiAgICAgICAgICAgIHRvZ2dsZUNsYXNzKHRoaXMuZWxlbWVudCwgY2xhc3NOYW1lLCB0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmNvbnN0IERFQk9VQ0VfREVMQVkgPSAxMDA7XG5leHBvcnQgZnVuY3Rpb24gaXNDaGlsZEVudGlyZWx5VmlzaWJsZVdpdGhpblBhcmVudChjaGlsZCwgcGFyZW50KSB7XG4gICAgLy9cbiAgICBjb25zdCBjaGlsZFBvc2l0aW9uID0gZ2V0RG9tTm9kZVBhZ2VQb3NpdGlvbihjaGlsZCk7XG4gICAgY29uc3QgcGFyZW50UG9zaXRpb24gPSBnZXREb21Ob2RlUGFnZVBvc2l0aW9uKHBhcmVudCk7XG4gICAgaWYgKGNoaWxkUG9zaXRpb24ubGVmdCA8IHBhcmVudFBvc2l0aW9uLmxlZnQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoY2hpbGRQb3NpdGlvbi5sZWZ0ICsgY2hpbGRQb3NpdGlvbi53aWR0aCA+XG4gICAgICAgIHBhcmVudFBvc2l0aW9uLmxlZnQgKyBwYXJlbnRQb3NpdGlvbi53aWR0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG9uRGlkV2luZG93TW92ZUVuZCh3aW5kb3cpIHtcbiAgICBjb25zdCBlbWl0dGVyID0gbmV3IEVtaXR0ZXIoKTtcbiAgICBsZXQgcHJldmlvdXNTY3JlZW5YID0gd2luZG93LnNjcmVlblg7XG4gICAgbGV0IHByZXZpb3VzU2NyZWVuWSA9IHdpbmRvdy5zY3JlZW5ZO1xuICAgIGxldCB0aW1lb3V0O1xuICAgIGNvbnN0IGNoZWNrTW92ZW1lbnQgPSAoKSA9PiB7XG4gICAgICAgIGlmICh3aW5kb3cuY2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY3VycmVudFNjcmVlblggPSB3aW5kb3cuc2NyZWVuWDtcbiAgICAgICAgY29uc3QgY3VycmVudFNjcmVlblkgPSB3aW5kb3cuc2NyZWVuWTtcbiAgICAgICAgaWYgKGN1cnJlbnRTY3JlZW5YICE9PSBwcmV2aW91c1NjcmVlblggfHxcbiAgICAgICAgICAgIGN1cnJlbnRTY3JlZW5ZICE9PSBwcmV2aW91c1NjcmVlblkpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBlbWl0dGVyLmZpcmUoKTtcbiAgICAgICAgICAgIH0sIERFQk9VQ0VfREVMQVkpO1xuICAgICAgICAgICAgcHJldmlvdXNTY3JlZW5YID0gY3VycmVudFNjcmVlblg7XG4gICAgICAgICAgICBwcmV2aW91c1NjcmVlblkgPSBjdXJyZW50U2NyZWVuWTtcbiAgICAgICAgfVxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2hlY2tNb3ZlbWVudCk7XG4gICAgfTtcbiAgICBjaGVja01vdmVtZW50KCk7XG4gICAgcmV0dXJuIGVtaXR0ZXI7XG59XG5leHBvcnQgZnVuY3Rpb24gb25EaWRXaW5kb3dSZXNpemVFbmQoZWxlbWVudCwgY2IpIHtcbiAgICBsZXQgcmVzaXplVGltZW91dDtcbiAgICBjb25zdCBkaXNwb3NhYmxlID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoYWRkRGlzcG9zYWJsZUxpc3RlbmVyKGVsZW1lbnQsICdyZXNpemUnLCAoKSA9PiB7XG4gICAgICAgIGNsZWFyVGltZW91dChyZXNpemVUaW1lb3V0KTtcbiAgICAgICAgcmVzaXplVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgY2IoKTtcbiAgICAgICAgfSwgREVCT1VDRV9ERUxBWSk7XG4gICAgfSkpO1xuICAgIHJldHVybiBkaXNwb3NhYmxlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNoaWZ0QWJzb2x1dGVFbGVtZW50SW50b1ZpZXcoZWxlbWVudCwgcm9vdCwgb3B0aW9ucyA9IHsgYnVmZmVyOiAxMCB9KSB7XG4gICAgY29uc3QgYnVmZmVyID0gb3B0aW9ucy5idWZmZXI7XG4gICAgY29uc3QgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgY29uc3Qgcm9vdFJlY3QgPSByb290LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGxldCB0cmFuc2xhdGVYID0gMDtcbiAgICBsZXQgdHJhbnNsYXRlWSA9IDA7XG4gICAgY29uc3QgbGVmdCA9IHJlY3QubGVmdCAtIHJvb3RSZWN0LmxlZnQ7XG4gICAgY29uc3QgdG9wID0gcmVjdC50b3AgLSByb290UmVjdC50b3A7XG4gICAgY29uc3QgYm90dG9tID0gcmVjdC5ib3R0b20gLSByb290UmVjdC5ib3R0b207XG4gICAgY29uc3QgcmlnaHQgPSByZWN0LnJpZ2h0IC0gcm9vdFJlY3QucmlnaHQ7XG4gICAgLy8gQ2hlY2sgaG9yaXpvbnRhbCBvdmVyZmxvd1xuICAgIGlmIChsZWZ0IDwgYnVmZmVyKSB7XG4gICAgICAgIHRyYW5zbGF0ZVggPSBidWZmZXIgLSBsZWZ0O1xuICAgIH1cbiAgICBlbHNlIGlmIChyaWdodCA+IGJ1ZmZlcikge1xuICAgICAgICB0cmFuc2xhdGVYID0gLWJ1ZmZlciAtIHJpZ2h0O1xuICAgIH1cbiAgICAvLyBDaGVjayB2ZXJ0aWNhbCBvdmVyZmxvd1xuICAgIGlmICh0b3AgPCBidWZmZXIpIHtcbiAgICAgICAgdHJhbnNsYXRlWSA9IGJ1ZmZlciAtIHRvcDtcbiAgICB9XG4gICAgZWxzZSBpZiAoYm90dG9tID4gYnVmZmVyKSB7XG4gICAgICAgIHRyYW5zbGF0ZVkgPSAtYm90dG9tIC0gYnVmZmVyO1xuICAgIH1cbiAgICAvLyBBcHBseSB0aGUgdHJhbnNsYXRpb24gaWYgbmVlZGVkXG4gICAgaWYgKHRyYW5zbGF0ZVggIT09IDAgfHwgdHJhbnNsYXRlWSAhPT0gMCkge1xuICAgICAgICBlbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUoJHt0cmFuc2xhdGVYfXB4LCAke3RyYW5zbGF0ZVl9cHgpYDtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gZmluZFJlbGF0aXZlWkluZGV4UGFyZW50KGVsKSB7XG4gICAgbGV0IHRtcCA9IGVsO1xuICAgIHdoaWxlICh0bXAgJiYgKHRtcC5zdHlsZS56SW5kZXggPT09ICdhdXRvJyB8fCB0bXAuc3R5bGUuekluZGV4ID09PSAnJykpIHtcbiAgICAgICAgdG1wID0gdG1wLnBhcmVudEVsZW1lbnQ7XG4gICAgfVxuICAgIHJldHVybiB0bXA7XG59XG4iLCJleHBvcnQgdmFyIEV2ZW50O1xuKGZ1bmN0aW9uIChFdmVudCkge1xuICAgIEV2ZW50LmFueSA9ICguLi5jaGlsZHJlbikgPT4ge1xuICAgICAgICByZXR1cm4gKGxpc3RlbmVyKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBkaXNwb3NhYmxlcyA9IGNoaWxkcmVuLm1hcCgoY2hpbGQpID0+IGNoaWxkKGxpc3RlbmVyKSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGRpc3Bvc2U6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcG9zYWJsZXMuZm9yRWFjaCgoZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgIH07XG59KShFdmVudCB8fCAoRXZlbnQgPSB7fSkpO1xuZXhwb3J0IGNsYXNzIERvY2t2aWV3RXZlbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLl9kZWZhdWx0UHJldmVudGVkID0gZmFsc2U7XG4gICAgfVxuICAgIGdldCBkZWZhdWx0UHJldmVudGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmYXVsdFByZXZlbnRlZDtcbiAgICB9XG4gICAgcHJldmVudERlZmF1bHQoKSB7XG4gICAgICAgIHRoaXMuX2RlZmF1bHRQcmV2ZW50ZWQgPSB0cnVlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBBY2NlcHRhYmxlRXZlbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLl9pc0FjY2VwdGVkID0gZmFsc2U7XG4gICAgfVxuICAgIGdldCBpc0FjY2VwdGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNBY2NlcHRlZDtcbiAgICB9XG4gICAgYWNjZXB0KCkge1xuICAgICAgICB0aGlzLl9pc0FjY2VwdGVkID0gdHJ1ZTtcbiAgICB9XG59XG5jbGFzcyBMZWFrYWdlTW9uaXRvciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZXZlbnRzID0gbmV3IE1hcCgpO1xuICAgIH1cbiAgICBnZXQgc2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXZlbnRzLnNpemU7XG4gICAgfVxuICAgIGFkZChldmVudCwgc3RhY2t0cmFjZSkge1xuICAgICAgICB0aGlzLmV2ZW50cy5zZXQoZXZlbnQsIHN0YWNrdHJhY2UpO1xuICAgIH1cbiAgICBkZWxldGUoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5ldmVudHMuZGVsZXRlKGV2ZW50KTtcbiAgICB9XG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMuZXZlbnRzLmNsZWFyKCk7XG4gICAgfVxufVxuY2xhc3MgU3RhY2t0cmFjZSB7XG4gICAgc3RhdGljIGNyZWF0ZSgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gbmV3IFN0YWNrdHJhY2UoKF9hID0gbmV3IEVycm9yKCkuc3RhY2spICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcnKTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IodmFsdWUpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBwcmludCgpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdkb2Nrdmlldzogc3RhY2t0cmFjZScsIHRoaXMudmFsdWUpO1xuICAgIH1cbn1cbmNsYXNzIExpc3RlbmVyIHtcbiAgICBjb25zdHJ1Y3RvcihjYWxsYmFjaywgc3RhY2t0cmFjZSkge1xuICAgICAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICAgIHRoaXMuc3RhY2t0cmFjZSA9IHN0YWNrdHJhY2U7XG4gICAgfVxufVxuLy8gcmVsYXRpdmVseSBzaW1wbGUgZXZlbnQgZW1pdHRlciB0YWtlbiBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvdnNjb2RlL2Jsb2IvbWFzdGVyL3NyYy92cy9iYXNlL2NvbW1vbi9ldmVudC50c1xuZXhwb3J0IGNsYXNzIEVtaXR0ZXIge1xuICAgIHN0YXRpYyBzZXRMZWFrYWdlTW9uaXRvckVuYWJsZWQoaXNFbmFibGVkKSB7XG4gICAgICAgIGlmIChpc0VuYWJsZWQgIT09IEVtaXR0ZXIuRU5BQkxFX1RSQUNLSU5HKSB7XG4gICAgICAgICAgICBFbWl0dGVyLk1FTU9SWV9MRUFLX1dBVENIRVIuY2xlYXIoKTtcbiAgICAgICAgfVxuICAgICAgICBFbWl0dGVyLkVOQUJMRV9UUkFDS0lORyA9IGlzRW5hYmxlZDtcbiAgICB9XG4gICAgZ2V0IHZhbHVlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGFzdDtcbiAgICB9XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLl9saXN0ZW5lcnMgPSBbXTtcbiAgICAgICAgdGhpcy5fZGlzcG9zZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgZ2V0IGV2ZW50KCkge1xuICAgICAgICBpZiAoIXRoaXMuX2V2ZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9ldmVudCA9IChjYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICBpZiAoKChfYSA9IHRoaXMub3B0aW9ucykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnJlcGxheSkgJiYgdGhpcy5fbGFzdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRoaXMuX2xhc3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBsaXN0ZW5lciA9IG5ldyBMaXN0ZW5lcihjYWxsYmFjaywgRW1pdHRlci5FTkFCTEVfVFJBQ0tJTkcgPyBTdGFja3RyYWNlLmNyZWF0ZSgpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcG9zZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLl9saXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2xpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoRW1pdHRlci5FTkFCTEVfVFJBQ0tJTkcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIGBkb2NrdmlldzogbGlzdGVuZXIgYWxyZWFkeSBkaXNwb3NlZGAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIFN0YWNrdHJhY2UuY3JlYXRlKCkucHJpbnQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoRW1pdHRlci5FTkFCTEVfVFJBQ0tJTkcpIHtcbiAgICAgICAgICAgICAgICBFbWl0dGVyLk1FTU9SWV9MRUFLX1dBVENIRVIuYWRkKHRoaXMuX2V2ZW50LCBTdGFja3RyYWNlLmNyZWF0ZSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fZXZlbnQ7XG4gICAgfVxuICAgIGZpcmUoZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICgoX2EgPSB0aGlzLm9wdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5yZXBsYXkpIHtcbiAgICAgICAgICAgIHRoaXMuX2xhc3QgPSBlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgbGlzdGVuZXIgb2YgdGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgICAgICAgICBsaXN0ZW5lci5jYWxsYmFjayhlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2Rpc3Bvc2VkKSB7XG4gICAgICAgICAgICB0aGlzLl9kaXNwb3NlZCA9IHRydWU7XG4gICAgICAgICAgICBpZiAodGhpcy5fbGlzdGVuZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoRW1pdHRlci5FTkFCTEVfVFJBQ0tJTkcpIHtcbiAgICAgICAgICAgICAgICAgICAgcXVldWVNaWNyb3Rhc2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZG9uJ3QgY2hlY2sgdW50aWwgc3RhY2sgb2YgZXhlY3V0aW9uIGlzIGNvbXBsZXRlZCB0byBhbGxvdyBmb3Igb3V0LW9mLW9yZGVyIGRpc3Bvc2FscyB3aXRoaW4gdGhlIHNhbWUgZXhlY3V0aW9uIGJsb2NrXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGxpc3RlbmVyIG9mIHRoaXMuX2xpc3RlbmVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignZG9ja3ZpZXc6IHN0YWNrdHJhY2UnLCAoX2EgPSBsaXN0ZW5lci5zdGFja3RyYWNlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucHJpbnQoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9saXN0ZW5lcnMgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChFbWl0dGVyLkVOQUJMRV9UUkFDS0lORyAmJiB0aGlzLl9ldmVudCkge1xuICAgICAgICAgICAgICAgIEVtaXR0ZXIuTUVNT1JZX0xFQUtfV0FUQ0hFUi5kZWxldGUodGhpcy5fZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuRW1pdHRlci5FTkFCTEVfVFJBQ0tJTkcgPSBmYWxzZTtcbkVtaXR0ZXIuTUVNT1JZX0xFQUtfV0FUQ0hFUiA9IG5ldyBMZWFrYWdlTW9uaXRvcigpO1xuZXhwb3J0IGZ1bmN0aW9uIGFkZERpc3Bvc2FibGVMaXN0ZW5lcihlbGVtZW50LCB0eXBlLCBsaXN0ZW5lciwgb3B0aW9ucykge1xuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGlzcG9zZTogKCkgPT4ge1xuICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCBvcHRpb25zKTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLyoqXG4gKlxuICogRXZlbnQgRW1pdHRlciB0aGF0IGZpcmVzIGV2ZW50cyBmcm9tIGEgTWljcm90YXNrIGNhbGxiYWNrLCBvbmx5IG9uZSBldmVudCB3aWxsIGZpcmUgcGVyIGV2ZW50LWxvb3AgY3ljbGUuXG4gKlxuICogSXQncyBraW5kIG9mIGxpa2UgdXNpbmcgYW4gYGFzYXBTY2hlZHVsZXJgIGluIFJ4SnMgd2l0aCBhZGRpdGlvbmFsIGxvZ2ljIHRvIG9ubHkgZmlyZSBvbmNlIHBlciBldmVudC1sb29wIGN5Y2xlLlxuICogVGhpcyBpbXBsZW1lbnRhdGlvbiBleGlzdHMgdG8gYXZvaWQgZXh0ZXJuYWwgZGVwZW5kZW5jaWVzLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL3F1ZXVlTWljcm90YXNrXG4gKiBAc2VlIGh0dHBzOi8vcnhqcy5kZXYvYXBpL2luZGV4L2NvbnN0L2FzYXBTY2hlZHVsZXJcbiAqL1xuZXhwb3J0IGNsYXNzIEFzYXBFdmVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuX29uRmlyZWQgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLl9jdXJyZW50RmlyZUNvdW50ID0gMDtcbiAgICAgICAgdGhpcy5fcXVldWVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMub25FdmVudCA9IChlKSA9PiB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIHdoZW4gdGhlIGV2ZW50IGlzIGZpcnN0IHN1YnNjcmliZWQgdG8gdGFrZSBub3RlIG9mIHRoZSBjdXJyZW50IGZpcmUgY291bnRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3QgZmlyZUNvdW50QXRUaW1lT2ZFdmVudFN1YnNjcmlwdGlvbiA9IHRoaXMuX2N1cnJlbnRGaXJlQ291bnQ7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fb25GaXJlZC5ldmVudCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogaWYgdGhlIGN1cnJlbnQgZmlyZSBjb3VudCBpcyBncmVhdGVyIHRoYW4gdGhlIGZpcmUgY291bnQgYXQgZXZlbnQgc3Vic2NyaXB0aW9uXG4gICAgICAgICAgICAgICAgICogdGhlbiB0aGUgZXZlbnQgaGFzIGJlZW4gZmlyZWQgc2luY2Ugd2Ugc3Vic2NyaWJlZCBhbmQgaXQncyBvayB0byBcIm9uX25leHRcIiB0aGUgZXZlbnQuXG4gICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgKiBpZiB0aGUgY291bnQgaXMgbm90IGdyZWF0ZXIgdGhlbiB3aGF0IHdlIGFyZSByZWNpZXZpbmcgaXMgYW4gZXZlbnQgZnJvbSB0aGUgbWljcm90YXNrXG4gICAgICAgICAgICAgICAgICogcXVldWUgdGhhdCB3YXMgdHJpZ2dlcmVkIGJlZm9yZSB3ZSBhY3R1YWxseSBzdWJzY3JpYmVkIGFuZCB0aGVyZm9yZSB3ZSBzaG91bGQgaWdub3JlIGl0LlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jdXJyZW50RmlyZUNvdW50ID4gZmlyZUNvdW50QXRUaW1lT2ZFdmVudFN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGZpcmUoKSB7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRGaXJlQ291bnQrKztcbiAgICAgICAgaWYgKHRoaXMuX3F1ZXVlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3F1ZXVlZCA9IHRydWU7XG4gICAgICAgIHF1ZXVlTWljcm90YXNrKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3F1ZXVlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5fb25GaXJlZC5maXJlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICB0aGlzLl9vbkZpcmVkLmRpc3Bvc2UoKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBFbWl0dGVyLCBFdmVudCwgQXNhcEV2ZW50IH0gZnJvbSAnLi4vZXZlbnRzJztcbmltcG9ydCB7IGdldEdyaWRMb2NhdGlvbiwgR3JpZHZpZXcgfSBmcm9tICcuL2dyaWR2aWV3JztcbmltcG9ydCB7IERpc3Bvc2FibGUgfSBmcm9tICcuLi9saWZlY3ljbGUnO1xuaW1wb3J0IHsgc2VxdWVudGlhbE51bWJlckdlbmVyYXRvciB9IGZyb20gJy4uL21hdGgnO1xuaW1wb3J0IHsgU2l6aW5nIH0gZnJvbSAnLi4vc3BsaXR2aWV3L3NwbGl0dmlldyc7XG5pbXBvcnQgeyBSZXNpemFibGUgfSBmcm9tICcuLi9yZXNpemFibGUnO1xuaW1wb3J0IHsgQ2xhc3NuYW1lcyB9IGZyb20gJy4uL2RvbSc7XG5jb25zdCBuZXh0TGF5b3V0SWQgPSBzZXF1ZW50aWFsTnVtYmVyR2VuZXJhdG9yKCk7XG5leHBvcnQgZnVuY3Rpb24gdG9UYXJnZXQoZGlyZWN0aW9uKSB7XG4gICAgc3dpdGNoIChkaXJlY3Rpb24pIHtcbiAgICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgICAgICByZXR1cm4gJ2xlZnQnO1xuICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgICByZXR1cm4gJ3JpZ2h0JztcbiAgICAgICAgY2FzZSAnYWJvdmUnOlxuICAgICAgICAgICAgcmV0dXJuICd0b3AnO1xuICAgICAgICBjYXNlICdiZWxvdyc6XG4gICAgICAgICAgICByZXR1cm4gJ2JvdHRvbSc7XG4gICAgICAgIGNhc2UgJ3dpdGhpbic6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gJ2NlbnRlcic7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEJhc2VHcmlkIGV4dGVuZHMgUmVzaXphYmxlIHtcbiAgICBnZXQgaWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcbiAgICB9XG4gICAgZ2V0IHNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ncm91cHMuc2l6ZTtcbiAgICB9XG4gICAgZ2V0IGdyb3VwcygpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5fZ3JvdXBzLnZhbHVlcygpKS5tYXAoKF8pID0+IF8udmFsdWUpO1xuICAgIH1cbiAgICBnZXQgd2lkdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyaWR2aWV3LndpZHRoO1xuICAgIH1cbiAgICBnZXQgaGVpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ncmlkdmlldy5oZWlnaHQ7XG4gICAgfVxuICAgIGdldCBtaW5pbXVtSGVpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ncmlkdmlldy5taW5pbXVtSGVpZ2h0O1xuICAgIH1cbiAgICBnZXQgbWF4aW11bUhlaWdodCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3JpZHZpZXcubWF4aW11bUhlaWdodDtcbiAgICB9XG4gICAgZ2V0IG1pbmltdW1XaWR0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3JpZHZpZXcubWluaW11bVdpZHRoO1xuICAgIH1cbiAgICBnZXQgbWF4aW11bVdpZHRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ncmlkdmlldy5tYXhpbXVtV2lkdGg7XG4gICAgfVxuICAgIGdldCBhY3RpdmVHcm91cCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2ZUdyb3VwO1xuICAgIH1cbiAgICBnZXQgbG9ja2VkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ncmlkdmlldy5sb2NrZWQ7XG4gICAgfVxuICAgIHNldCBsb2NrZWQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5ncmlkdmlldy5sb2NrZWQgPSB2YWx1ZTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgc3VwZXIoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksIG9wdGlvbnMuZGlzYWJsZUF1dG9SZXNpemluZyk7XG4gICAgICAgIHRoaXMuX2lkID0gbmV4dExheW91dElkLm5leHQoKTtcbiAgICAgICAgdGhpcy5fZ3JvdXBzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLl9vbkRpZFJlbW92ZSA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRSZW1vdmUgPSB0aGlzLl9vbkRpZFJlbW92ZS5ldmVudDtcbiAgICAgICAgdGhpcy5fb25EaWRBZGQgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRGlkQWRkID0gdGhpcy5fb25EaWRBZGQuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uRGlkTWF4aW1pemVkQ2hhbmdlID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZE1heGltaXplZENoYW5nZSA9IHRoaXMuX29uRGlkTWF4aW1pemVkQ2hhbmdlLmV2ZW50O1xuICAgICAgICB0aGlzLl9vbkRpZEFjdGl2ZUNoYW5nZSA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRBY3RpdmVDaGFuZ2UgPSB0aGlzLl9vbkRpZEFjdGl2ZUNoYW5nZS5ldmVudDtcbiAgICAgICAgdGhpcy5fYnVmZmVyT25EaWRMYXlvdXRDaGFuZ2UgPSBuZXcgQXNhcEV2ZW50KCk7XG4gICAgICAgIHRoaXMub25EaWRMYXlvdXRDaGFuZ2UgPSB0aGlzLl9idWZmZXJPbkRpZExheW91dENoYW5nZS5vbkV2ZW50O1xuICAgICAgICB0aGlzLl9vbkRpZFZpZXdWaXNpYmlsaXR5Q2hhbmdlTWljcm9UYXNrUXVldWUgPSBuZXcgQXNhcEV2ZW50KCk7XG4gICAgICAgIHRoaXMub25EaWRWaWV3VmlzaWJpbGl0eUNoYW5nZU1pY3JvVGFza1F1ZXVlID0gdGhpcy5fb25EaWRWaWV3VmlzaWJpbGl0eUNoYW5nZU1pY3JvVGFza1F1ZXVlLm9uRXZlbnQ7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS53aWR0aCA9ICcxMDAlJztcbiAgICAgICAgdGhpcy5fY2xhc3NOYW1lcyA9IG5ldyBDbGFzc25hbWVzKHRoaXMuZWxlbWVudCk7XG4gICAgICAgIHRoaXMuX2NsYXNzTmFtZXMuc2V0Q2xhc3NOYW1lcygoX2EgPSBvcHRpb25zLmNsYXNzTmFtZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJycpO1xuICAgICAgICAvLyB0aGUgY29udGFpbmVyIGlzIG93bmVkIGJ5IHRoZSB0aGlyZC1wYXJ0eSwgZG8gbm90IG1vZGlmeS9kZWxldGUgaXRcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudCk7XG4gICAgICAgIHRoaXMuZ3JpZHZpZXcgPSBuZXcgR3JpZHZpZXcoISFvcHRpb25zLnByb3BvcnRpb25hbExheW91dCwgb3B0aW9ucy5zdHlsZXMsIG9wdGlvbnMub3JpZW50YXRpb24sIG9wdGlvbnMubG9ja2VkLCBvcHRpb25zLm1hcmdpbik7XG4gICAgICAgIHRoaXMuZ3JpZHZpZXcubG9ja2VkID0gISFvcHRpb25zLmxvY2tlZDtcbiAgICAgICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuZ3JpZHZpZXcuZWxlbWVudCk7XG4gICAgICAgIHRoaXMubGF5b3V0KDAsIDAsIHRydWUpOyAvLyBzZXQgc29tZSBlbGVtZW50cyBoZWlnaHQvd2lkdGhzXG4gICAgICAgIHRoaXMuYWRkRGlzcG9zYWJsZXModGhpcy5ncmlkdmlldy5vbkRpZE1heGltaXplZE5vZGVDaGFuZ2UoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9vbkRpZE1heGltaXplZENoYW5nZS5maXJlKHtcbiAgICAgICAgICAgICAgICBwYW5lbDogZXZlbnQudmlldyxcbiAgICAgICAgICAgICAgICBpc01heGltaXplZDogZXZlbnQuaXNNYXhpbWl6ZWQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSksIHRoaXMuZ3JpZHZpZXcub25EaWRWaWV3VmlzaWJpbGl0eUNoYW5nZSgoKSA9PiB0aGlzLl9vbkRpZFZpZXdWaXNpYmlsaXR5Q2hhbmdlTWljcm9UYXNrUXVldWUuZmlyZSgpKSwgdGhpcy5vbkRpZFZpZXdWaXNpYmlsaXR5Q2hhbmdlTWljcm9UYXNrUXVldWUoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5sYXlvdXQodGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIHRydWUpO1xuICAgICAgICB9KSwgRGlzcG9zYWJsZS5mcm9tKCgpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIChfYSA9IHRoaXMuZWxlbWVudC5wYXJlbnRFbGVtZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50KTtcbiAgICAgICAgfSksIHRoaXMuZ3JpZHZpZXcub25EaWRDaGFuZ2UoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fYnVmZmVyT25EaWRMYXlvdXRDaGFuZ2UuZmlyZSgpO1xuICAgICAgICB9KSwgRXZlbnQuYW55KHRoaXMub25EaWRBZGQsIHRoaXMub25EaWRSZW1vdmUsIHRoaXMub25EaWRBY3RpdmVDaGFuZ2UpKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlck9uRGlkTGF5b3V0Q2hhbmdlLmZpcmUoKTtcbiAgICAgICAgfSksIHRoaXMuX29uRGlkTWF4aW1pemVkQ2hhbmdlLCB0aGlzLl9vbkRpZFZpZXdWaXNpYmlsaXR5Q2hhbmdlTWljcm9UYXNrUXVldWUsIHRoaXMuX2J1ZmZlck9uRGlkTGF5b3V0Q2hhbmdlKTtcbiAgICB9XG4gICAgc2V0VmlzaWJsZShwYW5lbCwgdmlzaWJsZSkge1xuICAgICAgICB0aGlzLmdyaWR2aWV3LnNldFZpZXdWaXNpYmxlKGdldEdyaWRMb2NhdGlvbihwYW5lbC5lbGVtZW50KSwgdmlzaWJsZSk7XG4gICAgICAgIHRoaXMuX2J1ZmZlck9uRGlkTGF5b3V0Q2hhbmdlLmZpcmUoKTtcbiAgICB9XG4gICAgaXNWaXNpYmxlKHBhbmVsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyaWR2aWV3LmlzVmlld1Zpc2libGUoZ2V0R3JpZExvY2F0aW9uKHBhbmVsLmVsZW1lbnQpKTtcbiAgICB9XG4gICAgdXBkYXRlT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLnByb3BvcnRpb25hbExheW91dCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICAvLyB0aGlzLmdyaWR2aWV3LnByb3BvcnRpb25hbExheW91dCA9IG9wdGlvbnMucHJvcG9ydGlvbmFsTGF5b3V0OyAvLyBub3Qgc3VwcG9ydGVkXG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMub3JpZW50YXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuZ3JpZHZpZXcub3JpZW50YXRpb24gPSBvcHRpb25zLm9yaWVudGF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmICgnc3R5bGVzJyBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICAvLyB0aGlzLmdyaWR2aWV3LnN0eWxlcyA9IG9wdGlvbnMuc3R5bGVzOyAvLyBub3Qgc3VwcG9ydGVkXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCdkaXNhYmxlUmVzaXppbmcnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzYWJsZVJlc2l6aW5nID0gKF9hID0gb3B0aW9ucy5kaXNhYmxlQXV0b1Jlc2l6aW5nKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJ2xvY2tlZCcgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5sb2NrZWQgPSAoX2IgPSBvcHRpb25zLmxvY2tlZCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCdtYXJnaW4nIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMuZ3JpZHZpZXcubWFyZ2luID0gKF9jID0gb3B0aW9ucy5tYXJnaW4pICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCdjbGFzc05hbWUnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMuX2NsYXNzTmFtZXMuc2V0Q2xhc3NOYW1lcygoX2QgPSBvcHRpb25zLmNsYXNzTmFtZSkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogJycpO1xuICAgICAgICB9XG4gICAgfVxuICAgIG1heGltaXplR3JvdXAocGFuZWwpIHtcbiAgICAgICAgdGhpcy5ncmlkdmlldy5tYXhpbWl6ZVZpZXcocGFuZWwpO1xuICAgICAgICB0aGlzLmRvU2V0R3JvdXBBY3RpdmUocGFuZWwpO1xuICAgIH1cbiAgICBpc01heGltaXplZEdyb3VwKHBhbmVsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyaWR2aWV3Lm1heGltaXplZFZpZXcoKSA9PT0gcGFuZWw7XG4gICAgfVxuICAgIGV4aXRNYXhpbWl6ZWRHcm91cCgpIHtcbiAgICAgICAgdGhpcy5ncmlkdmlldy5leGl0TWF4aW1pemVkVmlldygpO1xuICAgIH1cbiAgICBoYXNNYXhpbWl6ZWRHcm91cCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3JpZHZpZXcuaGFzTWF4aW1pemVkVmlldygpO1xuICAgIH1cbiAgICBkb0FkZEdyb3VwKGdyb3VwLCBsb2NhdGlvbiA9IFswXSwgc2l6ZSkge1xuICAgICAgICB0aGlzLmdyaWR2aWV3LmFkZFZpZXcoZ3JvdXAsIHNpemUgIT09IG51bGwgJiYgc2l6ZSAhPT0gdm9pZCAwID8gc2l6ZSA6IFNpemluZy5EaXN0cmlidXRlLCBsb2NhdGlvbik7XG4gICAgICAgIHRoaXMuX29uRGlkQWRkLmZpcmUoZ3JvdXApO1xuICAgIH1cbiAgICBkb1JlbW92ZUdyb3VwKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgICAgIGlmICghdGhpcy5fZ3JvdXBzLmhhcyhncm91cC5pZCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBvcGVyYXRpb24nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5fZ3JvdXBzLmdldChncm91cC5pZCk7XG4gICAgICAgIGNvbnN0IHZpZXcgPSB0aGlzLmdyaWR2aWV3LnJlbW92ZShncm91cCwgU2l6aW5nLkRpc3RyaWJ1dGUpO1xuICAgICAgICBpZiAoaXRlbSAmJiAhKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5za2lwRGlzcG9zZSkpIHtcbiAgICAgICAgICAgIGl0ZW0uZGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gICAgICAgICAgICBpdGVtLnZhbHVlLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIHRoaXMuX2dyb3Vwcy5kZWxldGUoZ3JvdXAuaWQpO1xuICAgICAgICAgICAgdGhpcy5fb25EaWRSZW1vdmUuZmlyZShncm91cCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnNraXBBY3RpdmUpICYmIHRoaXMuX2FjdGl2ZUdyb3VwID09PSBncm91cCkge1xuICAgICAgICAgICAgY29uc3QgZ3JvdXBzID0gQXJyYXkuZnJvbSh0aGlzLl9ncm91cHMudmFsdWVzKCkpO1xuICAgICAgICAgICAgdGhpcy5kb1NldEdyb3VwQWN0aXZlKGdyb3Vwcy5sZW5ndGggPiAwID8gZ3JvdXBzWzBdLnZhbHVlIDogdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmlldztcbiAgICB9XG4gICAgZ2V0UGFuZWwoaWQpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5fZ3JvdXBzLmdldChpZCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS52YWx1ZTtcbiAgICB9XG4gICAgZG9TZXRHcm91cEFjdGl2ZShncm91cCkge1xuICAgICAgICBpZiAodGhpcy5fYWN0aXZlR3JvdXAgPT09IGdyb3VwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZUdyb3VwKSB7XG4gICAgICAgICAgICB0aGlzLl9hY3RpdmVHcm91cC5zZXRBY3RpdmUoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChncm91cCkge1xuICAgICAgICAgICAgZ3JvdXAuc2V0QWN0aXZlKHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2FjdGl2ZUdyb3VwID0gZ3JvdXA7XG4gICAgICAgIHRoaXMuX29uRGlkQWN0aXZlQ2hhbmdlLmZpcmUoZ3JvdXApO1xuICAgIH1cbiAgICByZW1vdmVHcm91cChncm91cCkge1xuICAgICAgICB0aGlzLmRvUmVtb3ZlR3JvdXAoZ3JvdXApO1xuICAgIH1cbiAgICBtb3ZlVG9OZXh0KG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW9wdGlvbnMuZ3JvdXApIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5hY3RpdmVHcm91cCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdGlvbnMuZ3JvdXAgPSB0aGlzLmFjdGl2ZUdyb3VwO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxvY2F0aW9uID0gZ2V0R3JpZExvY2F0aW9uKG9wdGlvbnMuZ3JvdXAuZWxlbWVudCk7XG4gICAgICAgIGNvbnN0IG5leHQgPSAoX2EgPSB0aGlzLmdyaWR2aWV3Lm5leHQobG9jYXRpb24pKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudmlldztcbiAgICAgICAgdGhpcy5kb1NldEdyb3VwQWN0aXZlKG5leHQpO1xuICAgIH1cbiAgICBtb3ZlVG9QcmV2aW91cyhvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICAgICAgICBvcHRpb25zID0ge307XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFvcHRpb25zLmdyb3VwKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuYWN0aXZlR3JvdXApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcHRpb25zLmdyb3VwID0gdGhpcy5hY3RpdmVHcm91cDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsb2NhdGlvbiA9IGdldEdyaWRMb2NhdGlvbihvcHRpb25zLmdyb3VwLmVsZW1lbnQpO1xuICAgICAgICBjb25zdCBuZXh0ID0gKF9hID0gdGhpcy5ncmlkdmlldy5wcmV2aW91cyhsb2NhdGlvbikpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS52aWV3O1xuICAgICAgICB0aGlzLmRvU2V0R3JvdXBBY3RpdmUobmV4dCk7XG4gICAgfVxuICAgIGxheW91dCh3aWR0aCwgaGVpZ2h0LCBmb3JjZVJlc2l6ZSkge1xuICAgICAgICBjb25zdCBkaWZmZXJlbnQgPSBmb3JjZVJlc2l6ZSB8fCB3aWR0aCAhPT0gdGhpcy53aWR0aCB8fCBoZWlnaHQgIT09IHRoaXMuaGVpZ2h0O1xuICAgICAgICBpZiAoIWRpZmZlcmVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZ3JpZHZpZXcuZWxlbWVudC5zdHlsZS5oZWlnaHQgPSBgJHtoZWlnaHR9cHhgO1xuICAgICAgICB0aGlzLmdyaWR2aWV3LmVsZW1lbnQuc3R5bGUud2lkdGggPSBgJHt3aWR0aH1weGA7XG4gICAgICAgIHRoaXMuZ3JpZHZpZXcubGF5b3V0KHdpZHRoLCBoZWlnaHQpO1xuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICB0aGlzLl9vbkRpZEFjdGl2ZUNoYW5nZS5kaXNwb3NlKCk7XG4gICAgICAgIHRoaXMuX29uRGlkQWRkLmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5fb25EaWRSZW1vdmUuZGlzcG9zZSgpO1xuICAgICAgICBmb3IgKGNvbnN0IGdyb3VwIG9mIHRoaXMuZ3JvdXBzKSB7XG4gICAgICAgICAgICBncm91cC5kaXNwb3NlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ncmlkdmlldy5kaXNwb3NlKCk7XG4gICAgICAgIHN1cGVyLmRpc3Bvc2UoKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyB0cmFja0ZvY3VzIH0gZnJvbSAnLi4vZG9tJztcbmltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUgfSBmcm9tICcuLi9saWZlY3ljbGUnO1xuaW1wb3J0IHsgV2lsbEZvY3VzRXZlbnQgfSBmcm9tICcuLi9hcGkvcGFuZWxBcGknO1xuZXhwb3J0IGNsYXNzIEJhc2VQYW5lbFZpZXcgZXh0ZW5kcyBDb21wb3NpdGVEaXNwb3NhYmxlIHtcbiAgICBnZXQgZWxlbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7XG4gICAgfVxuICAgIGdldCB3aWR0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dpZHRoO1xuICAgIH1cbiAgICBnZXQgaGVpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faGVpZ2h0O1xuICAgIH1cbiAgICBnZXQgcGFyYW1zKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoX2EgPSB0aGlzLl9wYXJhbXMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5wYXJhbXM7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGlkLCBjb21wb25lbnQsIGFwaSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMuY29tcG9uZW50ID0gY29tcG9uZW50O1xuICAgICAgICB0aGlzLmFwaSA9IGFwaTtcbiAgICAgICAgdGhpcy5faGVpZ2h0ID0gMDtcbiAgICAgICAgdGhpcy5fd2lkdGggPSAwO1xuICAgICAgICB0aGlzLl9lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQudGFiSW5kZXggPSAtMTtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5vdXRsaW5lID0gJ25vbmUnO1xuICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLmhlaWdodCA9ICcxMDAlJztcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS53aWR0aCA9ICcxMDAlJztcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgICAgICBjb25zdCBmb2N1c1RyYWNrZXIgPSB0cmFja0ZvY3VzKHRoaXMuX2VsZW1lbnQpO1xuICAgICAgICB0aGlzLmFkZERpc3Bvc2FibGVzKHRoaXMuYXBpLCBmb2N1c1RyYWNrZXIub25EaWRGb2N1cygoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFwaS5fb25EaWRDaGFuZ2VGb2N1cy5maXJlKHsgaXNGb2N1c2VkOiB0cnVlIH0pO1xuICAgICAgICB9KSwgZm9jdXNUcmFja2VyLm9uRGlkQmx1cigoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFwaS5fb25EaWRDaGFuZ2VGb2N1cy5maXJlKHsgaXNGb2N1c2VkOiBmYWxzZSB9KTtcbiAgICAgICAgfSksIGZvY3VzVHJhY2tlcik7XG4gICAgfVxuICAgIGZvY3VzKCkge1xuICAgICAgICBjb25zdCBldmVudCA9IG5ldyBXaWxsRm9jdXNFdmVudCgpO1xuICAgICAgICB0aGlzLmFwaS5fb25XaWxsRm9jdXMuZmlyZShldmVudCk7XG4gICAgICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZWxlbWVudC5mb2N1cygpO1xuICAgIH1cbiAgICBsYXlvdXQod2lkdGgsIGhlaWdodCkge1xuICAgICAgICB0aGlzLl93aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLl9oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIHRoaXMuYXBpLl9vbkRpZERpbWVuc2lvbkNoYW5nZS5maXJlKHsgd2lkdGgsIGhlaWdodCB9KTtcbiAgICAgICAgaWYgKHRoaXMucGFydCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3BhcmFtcykge1xuICAgICAgICAgICAgICAgIHRoaXMucGFydC51cGRhdGUodGhpcy5fcGFyYW1zLnBhcmFtcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaW5pdChwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHRoaXMuX3BhcmFtcyA9IHBhcmFtZXRlcnM7XG4gICAgICAgIHRoaXMucGFydCA9IHRoaXMuZ2V0Q29tcG9uZW50KCk7XG4gICAgfVxuICAgIHVwZGF0ZShldmVudCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAvLyBtZXJnZSB0aGUgbmV3IHBhcmFtZXRlcnMgd2l0aCB0aGUgZXhpc3RpbmcgcGFyYW1ldGVyc1xuICAgICAgICB0aGlzLl9wYXJhbXMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHRoaXMuX3BhcmFtcyksIHsgcGFyYW1zOiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIChfYSA9IHRoaXMuX3BhcmFtcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnBhcmFtcyksIGV2ZW50LnBhcmFtcykgfSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBkZWxldGUgbmV3IGtleXMgdGhhdCBoYXZlIGEgdmFsdWUgb2YgdW5kZWZpbmVkLFxuICAgICAgICAgKiBhbGxvdyB2YWx1ZXMgb2YgbnVsbFxuICAgICAgICAgKi9cbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoZXZlbnQucGFyYW1zKSkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnBhcmFtc1trZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fcGFyYW1zLnBhcmFtc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHVwZGF0ZSB0aGUgdmlldyB3aXRoIHRoZSB1cGRhdGVkIHByb3BzXG4gICAgICAgIChfYiA9IHRoaXMucGFydCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnVwZGF0ZSh7IHBhcmFtczogdGhpcy5fcGFyYW1zLnBhcmFtcyB9KTtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBjb25zdCBwYXJhbXMgPSAoX2IgPSAoX2EgPSB0aGlzLl9wYXJhbXMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5wYXJhbXMpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHt9O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaWQ6IHRoaXMuaWQsXG4gICAgICAgICAgICBjb21wb25lbnQ6IHRoaXMuY29tcG9uZW50LFxuICAgICAgICAgICAgcGFyYW1zOiBPYmplY3Qua2V5cyhwYXJhbXMpLmxlbmd0aCA+IDAgPyBwYXJhbXMgOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdGhpcy5hcGkuZGlzcG9zZSgpO1xuICAgICAgICAoX2EgPSB0aGlzLnBhcnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kaXNwb3NlKCk7XG4gICAgICAgIHN1cGVyLmRpc3Bvc2UoKTtcbiAgICB9XG59XG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQWNjcmVkaXRhdGlvbjogVGhpcyBmaWxlIGlzIGxhcmdseSBiYXNlZCB1cG9uIHRoZSBNSVQgbGljZW5jZWQgVlNDb2RlIHNvdXJjZWNvZGUgZm91bmQgYXQ6XG4gKiBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L3ZzY29kZS90cmVlL21haW4vc3JjL3ZzL2Jhc2UvYnJvd3Nlci91aS9ncmlkXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IFNwbGl0dmlldywgT3JpZW50YXRpb24sIExheW91dFByaW9yaXR5LCB9IGZyb20gJy4uL3NwbGl0dmlldy9zcGxpdHZpZXcnO1xuaW1wb3J0IHsgRW1pdHRlciwgRXZlbnQgfSBmcm9tICcuLi9ldmVudHMnO1xuaW1wb3J0IHsgTGVhZk5vZGUgfSBmcm9tICcuL2xlYWZOb2RlJztcbmltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUsIERpc3Bvc2FibGUgfSBmcm9tICcuLi9saWZlY3ljbGUnO1xuZXhwb3J0IGNsYXNzIEJyYW5jaE5vZGUgZXh0ZW5kcyBDb21wb3NpdGVEaXNwb3NhYmxlIHtcbiAgICBnZXQgd2lkdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9yaWVudGF0aW9uID09PSBPcmllbnRhdGlvbi5IT1JJWk9OVEFMXG4gICAgICAgICAgICA/IHRoaXMuc2l6ZVxuICAgICAgICAgICAgOiB0aGlzLm9ydGhvZ29uYWxTaXplO1xuICAgIH1cbiAgICBnZXQgaGVpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcmllbnRhdGlvbiA9PT0gT3JpZW50YXRpb24uSE9SSVpPTlRBTFxuICAgICAgICAgICAgPyB0aGlzLm9ydGhvZ29uYWxTaXplXG4gICAgICAgICAgICA6IHRoaXMuc2l6ZTtcbiAgICB9XG4gICAgZ2V0IG1pbmltdW1TaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbi5sZW5ndGggPT09IDBcbiAgICAgICAgICAgID8gMFxuICAgICAgICAgICAgOiBNYXRoLm1heCguLi50aGlzLmNoaWxkcmVuLm1hcCgoYywgaW5kZXgpID0+IHRoaXMuc3BsaXR2aWV3LmlzVmlld1Zpc2libGUoaW5kZXgpXG4gICAgICAgICAgICAgICAgPyBjLm1pbmltdW1PcnRob2dvbmFsU2l6ZVxuICAgICAgICAgICAgICAgIDogMCkpO1xuICAgIH1cbiAgICBnZXQgbWF4aW11bVNpemUoKSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1pbiguLi50aGlzLmNoaWxkcmVuLm1hcCgoYywgaW5kZXgpID0+IHRoaXMuc3BsaXR2aWV3LmlzVmlld1Zpc2libGUoaW5kZXgpXG4gICAgICAgICAgICA/IGMubWF4aW11bU9ydGhvZ29uYWxTaXplXG4gICAgICAgICAgICA6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSkpO1xuICAgIH1cbiAgICBnZXQgbWluaW11bU9ydGhvZ29uYWxTaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zcGxpdHZpZXcubWluaW11bVNpemU7XG4gICAgfVxuICAgIGdldCBtYXhpbXVtT3J0aG9nb25hbFNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNwbGl0dmlldy5tYXhpbXVtU2l6ZTtcbiAgICB9XG4gICAgZ2V0IG9ydGhvZ29uYWxTaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3J0aG9nb25hbFNpemU7XG4gICAgfVxuICAgIGdldCBzaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2l6ZTtcbiAgICB9XG4gICAgZ2V0IG1pbmltdW1XaWR0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3JpZW50YXRpb24gPT09IE9yaWVudGF0aW9uLkhPUklaT05UQUxcbiAgICAgICAgICAgID8gdGhpcy5taW5pbXVtT3J0aG9nb25hbFNpemVcbiAgICAgICAgICAgIDogdGhpcy5taW5pbXVtU2l6ZTtcbiAgICB9XG4gICAgZ2V0IG1pbmltdW1IZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9yaWVudGF0aW9uID09PSBPcmllbnRhdGlvbi5IT1JJWk9OVEFMXG4gICAgICAgICAgICA/IHRoaXMubWluaW11bVNpemVcbiAgICAgICAgICAgIDogdGhpcy5taW5pbXVtT3J0aG9nb25hbFNpemU7XG4gICAgfVxuICAgIGdldCBtYXhpbXVtV2lkdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9yaWVudGF0aW9uID09PSBPcmllbnRhdGlvbi5IT1JJWk9OVEFMXG4gICAgICAgICAgICA/IHRoaXMubWF4aW11bU9ydGhvZ29uYWxTaXplXG4gICAgICAgICAgICA6IHRoaXMubWF4aW11bVNpemU7XG4gICAgfVxuICAgIGdldCBtYXhpbXVtSGVpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcmllbnRhdGlvbiA9PT0gT3JpZW50YXRpb24uSE9SSVpPTlRBTFxuICAgICAgICAgICAgPyB0aGlzLm1heGltdW1TaXplXG4gICAgICAgICAgICA6IHRoaXMubWF4aW11bU9ydGhvZ29uYWxTaXplO1xuICAgIH1cbiAgICBnZXQgcHJpb3JpdHkoKSB7XG4gICAgICAgIGlmICh0aGlzLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIExheW91dFByaW9yaXR5Lk5vcm1hbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcmlvcml0aWVzID0gdGhpcy5jaGlsZHJlbi5tYXAoKGMpID0+IHR5cGVvZiBjLnByaW9yaXR5ID09PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgPyBMYXlvdXRQcmlvcml0eS5Ob3JtYWxcbiAgICAgICAgICAgIDogYy5wcmlvcml0eSk7XG4gICAgICAgIGlmIChwcmlvcml0aWVzLnNvbWUoKHApID0+IHAgPT09IExheW91dFByaW9yaXR5LkhpZ2gpKSB7XG4gICAgICAgICAgICByZXR1cm4gTGF5b3V0UHJpb3JpdHkuSGlnaDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwcmlvcml0aWVzLnNvbWUoKHApID0+IHAgPT09IExheW91dFByaW9yaXR5LkxvdykpIHtcbiAgICAgICAgICAgIHJldHVybiBMYXlvdXRQcmlvcml0eS5Mb3c7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIExheW91dFByaW9yaXR5Lk5vcm1hbDtcbiAgICB9XG4gICAgZ2V0IGRpc2FibGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zcGxpdHZpZXcuZGlzYWJsZWQ7XG4gICAgfVxuICAgIHNldCBkaXNhYmxlZCh2YWx1ZSkge1xuICAgICAgICB0aGlzLnNwbGl0dmlldy5kaXNhYmxlZCA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgbWFyZ2luKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zcGxpdHZpZXcubWFyZ2luO1xuICAgIH1cbiAgICBzZXQgbWFyZ2luKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuc3BsaXR2aWV3Lm1hcmdpbiA9IHZhbHVlO1xuICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goKGNoaWxkKSA9PiB7XG4gICAgICAgICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBCcmFuY2hOb2RlKSB7XG4gICAgICAgICAgICAgICAgY2hpbGQubWFyZ2luID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihvcmllbnRhdGlvbiwgcHJvcG9ydGlvbmFsTGF5b3V0LCBzdHlsZXMsIHNpemUsIG9ydGhvZ29uYWxTaXplLCBkaXNhYmxlZCwgbWFyZ2luLCBjaGlsZERlc2NyaXB0b3JzKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMub3JpZW50YXRpb24gPSBvcmllbnRhdGlvbjtcbiAgICAgICAgdGhpcy5wcm9wb3J0aW9uYWxMYXlvdXQgPSBwcm9wb3J0aW9uYWxMYXlvdXQ7XG4gICAgICAgIHRoaXMuc3R5bGVzID0gc3R5bGVzO1xuICAgICAgICB0aGlzLl9jaGlsZHJlbkRpc3Bvc2FibGUgPSBEaXNwb3NhYmxlLk5PTkU7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgdGhpcy5fb25EaWRDaGFuZ2UgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRGlkQ2hhbmdlID0gdGhpcy5fb25EaWRDaGFuZ2UuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uRGlkVmlzaWJpbGl0eUNoYW5nZSA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRWaXNpYmlsaXR5Q2hhbmdlID0gdGhpcy5fb25EaWRWaXNpYmlsaXR5Q2hhbmdlLmV2ZW50O1xuICAgICAgICB0aGlzLl9vcnRob2dvbmFsU2l6ZSA9IG9ydGhvZ29uYWxTaXplO1xuICAgICAgICB0aGlzLl9zaXplID0gc2l6ZTtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc05hbWUgPSAnZHYtYnJhbmNoLW5vZGUnO1xuICAgICAgICBpZiAoIWNoaWxkRGVzY3JpcHRvcnMpIHtcbiAgICAgICAgICAgIHRoaXMuc3BsaXR2aWV3ID0gbmV3IFNwbGl0dmlldyh0aGlzLmVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgICBvcmllbnRhdGlvbjogdGhpcy5vcmllbnRhdGlvbixcbiAgICAgICAgICAgICAgICBwcm9wb3J0aW9uYWxMYXlvdXQsXG4gICAgICAgICAgICAgICAgc3R5bGVzLFxuICAgICAgICAgICAgICAgIG1hcmdpbixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5zcGxpdHZpZXcubGF5b3V0KHRoaXMuc2l6ZSwgdGhpcy5vcnRob2dvbmFsU2l6ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBkZXNjcmlwdG9yID0ge1xuICAgICAgICAgICAgICAgIHZpZXdzOiBjaGlsZERlc2NyaXB0b3JzLm1hcCgoY2hpbGREZXNjcmlwdG9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3OiBjaGlsZERlc2NyaXB0b3Iubm9kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IGNoaWxkRGVzY3JpcHRvci5ub2RlLnNpemUsXG4gICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiBjaGlsZERlc2NyaXB0b3Iubm9kZSBpbnN0YW5jZW9mIExlYWZOb2RlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGREZXNjcmlwdG9yLnZpc2libGUgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gY2hpbGREZXNjcmlwdG9yLnZpc2libGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgc2l6ZTogdGhpcy5vcnRob2dvbmFsU2l6ZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGREZXNjcmlwdG9ycy5tYXAoKGMpID0+IGMubm9kZSk7XG4gICAgICAgICAgICB0aGlzLnNwbGl0dmlldyA9IG5ldyBTcGxpdHZpZXcodGhpcy5lbGVtZW50LCB7XG4gICAgICAgICAgICAgICAgb3JpZW50YXRpb246IHRoaXMub3JpZW50YXRpb24sXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRvcixcbiAgICAgICAgICAgICAgICBwcm9wb3J0aW9uYWxMYXlvdXQsXG4gICAgICAgICAgICAgICAgc3R5bGVzLFxuICAgICAgICAgICAgICAgIG1hcmdpbixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyh0aGlzLl9vbkRpZENoYW5nZSwgdGhpcy5fb25EaWRWaXNpYmlsaXR5Q2hhbmdlLCB0aGlzLnNwbGl0dmlldy5vbkRpZFNhc2hFbmQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25EaWRDaGFuZ2UuZmlyZSh7fSk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5zZXR1cENoaWxkcmVuRXZlbnRzKCk7XG4gICAgfVxuICAgIHNldFZpc2libGUoX3Zpc2libGUpIHtcbiAgICAgICAgLy8gbm9vcFxuICAgIH1cbiAgICBpc0NoaWxkVmlzaWJsZShpbmRleCkge1xuICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHRoaXMuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaW5kZXgnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5zcGxpdHZpZXcuaXNWaWV3VmlzaWJsZShpbmRleCk7XG4gICAgfVxuICAgIHNldENoaWxkVmlzaWJsZShpbmRleCwgdmlzaWJsZSkge1xuICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHRoaXMuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaW5kZXgnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zcGxpdHZpZXcuaXNWaWV3VmlzaWJsZShpbmRleCkgPT09IHZpc2libGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB3ZXJlQWxsQ2hpbGRyZW5IaWRkZW4gPSB0aGlzLnNwbGl0dmlldy5jb250ZW50U2l6ZSA9PT0gMDtcbiAgICAgICAgdGhpcy5zcGxpdHZpZXcuc2V0Vmlld1Zpc2libGUoaW5kZXgsIHZpc2libGUpO1xuICAgICAgICAvLyB9XG4gICAgICAgIGNvbnN0IGFyZUFsbENoaWxkcmVuSGlkZGVuID0gdGhpcy5zcGxpdHZpZXcuY29udGVudFNpemUgPT09IDA7XG4gICAgICAgIC8vIElmIGFsbCBjaGlsZHJlbiBhcmUgaGlkZGVuIHRoZW4gdGhlIHBhcmVudCBzaG91bGQgaGlkZSB0aGUgZW50aXJlIHNwbGl0dmlld1xuICAgICAgICAvLyBJZiB0aGUgZW50aXJlIHNwbGl0dmlldyBpcyBoaWRkZW4gdGhlbiB0aGUgcGFyZW50IHNob3VsZCBzaG93IHRoZSBzcGxpdHZpZXcgd2hlbiBhIGNoaWxkIGlzIHNob3duXG4gICAgICAgIGlmICgodmlzaWJsZSAmJiB3ZXJlQWxsQ2hpbGRyZW5IaWRkZW4pIHx8XG4gICAgICAgICAgICAoIXZpc2libGUgJiYgYXJlQWxsQ2hpbGRyZW5IaWRkZW4pKSB7XG4gICAgICAgICAgICB0aGlzLl9vbkRpZFZpc2liaWxpdHlDaGFuZ2UuZmlyZSh7IHZpc2libGUgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbW92ZUNoaWxkKGZyb20sIHRvKSB7XG4gICAgICAgIGlmIChmcm9tID09PSB0bykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmcm9tIDwgMCB8fCBmcm9tID49IHRoaXMuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZnJvbSBpbmRleCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmcm9tIDwgdG8pIHtcbiAgICAgICAgICAgIHRvLS07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zcGxpdHZpZXcubW92ZVZpZXcoZnJvbSwgdG8pO1xuICAgICAgICBjb25zdCBjaGlsZCA9IHRoaXMuX3JlbW92ZUNoaWxkKGZyb20pO1xuICAgICAgICB0aGlzLl9hZGRDaGlsZChjaGlsZCwgdG8pO1xuICAgIH1cbiAgICBnZXRDaGlsZFNpemUoaW5kZXgpIHtcbiAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGluZGV4Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc3BsaXR2aWV3LmdldFZpZXdTaXplKGluZGV4KTtcbiAgICB9XG4gICAgcmVzaXplQ2hpbGQoaW5kZXgsIHNpemUpIHtcbiAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGluZGV4Jyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zcGxpdHZpZXcucmVzaXplVmlldyhpbmRleCwgc2l6ZSk7XG4gICAgfVxuICAgIGxheW91dChzaXplLCBvcnRob2dvbmFsU2l6ZSkge1xuICAgICAgICB0aGlzLl9zaXplID0gb3J0aG9nb25hbFNpemU7XG4gICAgICAgIHRoaXMuX29ydGhvZ29uYWxTaXplID0gc2l6ZTtcbiAgICAgICAgdGhpcy5zcGxpdHZpZXcubGF5b3V0KG9ydGhvZ29uYWxTaXplLCBzaXplKTtcbiAgICB9XG4gICAgYWRkQ2hpbGQobm9kZSwgc2l6ZSwgaW5kZXgsIHNraXBMYXlvdXQpIHtcbiAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+IHRoaXMuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaW5kZXgnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNwbGl0dmlldy5hZGRWaWV3KG5vZGUsIHNpemUsIGluZGV4LCBza2lwTGF5b3V0KTtcbiAgICAgICAgdGhpcy5fYWRkQ2hpbGQobm9kZSwgaW5kZXgpO1xuICAgIH1cbiAgICBnZXRDaGlsZENhY2hlZFZpc2libGVTaXplKGluZGV4KSB7XG4gICAgICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPj0gdGhpcy5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBpbmRleCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnNwbGl0dmlldy5nZXRWaWV3Q2FjaGVkVmlzaWJsZVNpemUoaW5kZXgpO1xuICAgIH1cbiAgICByZW1vdmVDaGlsZChpbmRleCwgc2l6aW5nKSB7XG4gICAgICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPj0gdGhpcy5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBpbmRleCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3BsaXR2aWV3LnJlbW92ZVZpZXcoaW5kZXgsIHNpemluZyk7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZW1vdmVDaGlsZChpbmRleCk7XG4gICAgfVxuICAgIF9hZGRDaGlsZChub2RlLCBpbmRleCkge1xuICAgICAgICB0aGlzLmNoaWxkcmVuLnNwbGljZShpbmRleCwgMCwgbm9kZSk7XG4gICAgICAgIHRoaXMuc2V0dXBDaGlsZHJlbkV2ZW50cygpO1xuICAgIH1cbiAgICBfcmVtb3ZlQ2hpbGQoaW5kZXgpIHtcbiAgICAgICAgY29uc3QgW2NoaWxkXSA9IHRoaXMuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgdGhpcy5zZXR1cENoaWxkcmVuRXZlbnRzKCk7XG4gICAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9XG4gICAgc2V0dXBDaGlsZHJlbkV2ZW50cygpIHtcbiAgICAgICAgdGhpcy5fY2hpbGRyZW5EaXNwb3NhYmxlLmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5fY2hpbGRyZW5EaXNwb3NhYmxlID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoRXZlbnQuYW55KC4uLnRoaXMuY2hpbGRyZW4ubWFwKChjKSA9PiBjLm9uRGlkQ2hhbmdlKSkoKGUpID0+IHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogaW5kaWNhdGUgYSBjaGFuZ2UgaGFzIG9jY3VyZWQgdG8gYWxsb3dzIGFueSByZS1yZW5kZXJpbmcgYnV0IGRvbid0IGJ1YmJsZVxuICAgICAgICAgICAgICogZXZlbnQgYmVjYXVzZSB0aGF0IHdhcyBzcGVjaWZpYyB0byB0aGlzIGJyYW5jaFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLl9vbkRpZENoYW5nZS5maXJlKHsgc2l6ZTogZS5vcnRob2dvbmFsU2l6ZSB9KTtcbiAgICAgICAgfSksIC4uLnRoaXMuY2hpbGRyZW4ubWFwKChjLCBpKSA9PiB7XG4gICAgICAgICAgICBpZiAoYyBpbnN0YW5jZW9mIEJyYW5jaE5vZGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYy5vbkRpZFZpc2liaWxpdHlDaGFuZ2UoKHsgdmlzaWJsZSB9KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0Q2hpbGRWaXNpYmxlKGksIHZpc2libGUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIERpc3Bvc2FibGUuTk9ORTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICB0aGlzLl9jaGlsZHJlbkRpc3Bvc2FibGUuZGlzcG9zZSgpO1xuICAgICAgICB0aGlzLnNwbGl0dmlldy5kaXNwb3NlKCk7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQpID0+IGNoaWxkLmRpc3Bvc2UoKSk7XG4gICAgICAgIHN1cGVyLmRpc3Bvc2UoKTtcbiAgICB9XG59XG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQWNjcmVkaXRhdGlvbjogVGhpcyBmaWxlIGlzIGxhcmdseSBiYXNlZCB1cG9uIHRoZSBNSVQgbGljZW5jZWQgVlNDb2RlIHNvdXJjZWNvZGUgZm91bmQgYXQ6XG4gKiBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L3ZzY29kZS90cmVlL21haW4vc3JjL3ZzL2Jhc2UvYnJvd3Nlci91aS9ncmlkXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IE9yaWVudGF0aW9uLCBTaXppbmcsIH0gZnJvbSAnLi4vc3BsaXR2aWV3L3NwbGl0dmlldyc7XG5pbXBvcnQgeyB0YWlsIH0gZnJvbSAnLi4vYXJyYXknO1xuaW1wb3J0IHsgTGVhZk5vZGUgfSBmcm9tICcuL2xlYWZOb2RlJztcbmltcG9ydCB7IEJyYW5jaE5vZGUgfSBmcm9tICcuL2JyYW5jaE5vZGUnO1xuaW1wb3J0IHsgRW1pdHRlciB9IGZyb20gJy4uL2V2ZW50cyc7XG5pbXBvcnQgeyBNdXRhYmxlRGlzcG9zYWJsZSB9IGZyb20gJy4uL2xpZmVjeWNsZSc7XG5mdW5jdGlvbiBmaW5kTGVhZihjYW5kaWF0ZU5vZGUsIGxhc3QpIHtcbiAgICBpZiAoY2FuZGlhdGVOb2RlIGluc3RhbmNlb2YgTGVhZk5vZGUpIHtcbiAgICAgICAgcmV0dXJuIGNhbmRpYXRlTm9kZTtcbiAgICB9XG4gICAgaWYgKGNhbmRpYXRlTm9kZSBpbnN0YW5jZW9mIEJyYW5jaE5vZGUpIHtcbiAgICAgICAgcmV0dXJuIGZpbmRMZWFmKGNhbmRpYXRlTm9kZS5jaGlsZHJlbltsYXN0ID8gY2FuZGlhdGVOb2RlLmNoaWxkcmVuLmxlbmd0aCAtIDEgOiAwXSwgbGFzdCk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBub2RlJyk7XG59XG5mdW5jdGlvbiBjbG9uZU5vZGUobm9kZSwgc2l6ZSwgb3J0aG9nb25hbFNpemUpIHtcbiAgICBpZiAobm9kZSBpbnN0YW5jZW9mIEJyYW5jaE5vZGUpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEJyYW5jaE5vZGUobm9kZS5vcmllbnRhdGlvbiwgbm9kZS5wcm9wb3J0aW9uYWxMYXlvdXQsIG5vZGUuc3R5bGVzLCBzaXplLCBvcnRob2dvbmFsU2l6ZSwgbm9kZS5kaXNhYmxlZCwgbm9kZS5tYXJnaW4pO1xuICAgICAgICBmb3IgKGxldCBpID0gbm9kZS5jaGlsZHJlbi5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgY29uc3QgY2hpbGQgPSBub2RlLmNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgcmVzdWx0LmFkZENoaWxkKGNsb25lTm9kZShjaGlsZCwgY2hpbGQuc2l6ZSwgY2hpbGQub3J0aG9nb25hbFNpemUpLCBjaGlsZC5zaXplLCAwLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMZWFmTm9kZShub2RlLnZpZXcsIG5vZGUub3JpZW50YXRpb24sIG9ydGhvZ29uYWxTaXplKTtcbiAgICB9XG59XG5mdW5jdGlvbiBmbGlwTm9kZShub2RlLCBzaXplLCBvcnRob2dvbmFsU2l6ZSkge1xuICAgIGlmIChub2RlIGluc3RhbmNlb2YgQnJhbmNoTm9kZSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgQnJhbmNoTm9kZShvcnRob2dvbmFsKG5vZGUub3JpZW50YXRpb24pLCBub2RlLnByb3BvcnRpb25hbExheW91dCwgbm9kZS5zdHlsZXMsIHNpemUsIG9ydGhvZ29uYWxTaXplLCBub2RlLmRpc2FibGVkLCBub2RlLm1hcmdpbik7XG4gICAgICAgIGxldCB0b3RhbFNpemUgPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gbm9kZS5jaGlsZHJlbi5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgY29uc3QgY2hpbGQgPSBub2RlLmNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgY29uc3QgY2hpbGRTaXplID0gY2hpbGQgaW5zdGFuY2VvZiBCcmFuY2hOb2RlID8gY2hpbGQub3J0aG9nb25hbFNpemUgOiBjaGlsZC5zaXplO1xuICAgICAgICAgICAgbGV0IG5ld1NpemUgPSBub2RlLnNpemUgPT09IDBcbiAgICAgICAgICAgICAgICA/IDBcbiAgICAgICAgICAgICAgICA6IE1hdGgucm91bmQoKHNpemUgKiBjaGlsZFNpemUpIC8gbm9kZS5zaXplKTtcbiAgICAgICAgICAgIHRvdGFsU2l6ZSArPSBuZXdTaXplO1xuICAgICAgICAgICAgLy8gVGhlIGxhc3QgdmlldyB0byBhZGQgc2hvdWxkIGFkanVzdCB0byByb3VuZGluZyBlcnJvcnNcbiAgICAgICAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgbmV3U2l6ZSArPSBzaXplIC0gdG90YWxTaXplO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0LmFkZENoaWxkKGZsaXBOb2RlKGNoaWxkLCBvcnRob2dvbmFsU2l6ZSwgbmV3U2l6ZSksIG5ld1NpemUsIDAsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IExlYWZOb2RlKG5vZGUudmlldywgb3J0aG9nb25hbChub2RlLm9yaWVudGF0aW9uKSwgb3J0aG9nb25hbFNpemUpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBpbmRleEluUGFyZW50KGVsZW1lbnQpIHtcbiAgICBjb25zdCBwYXJlbnRFbGVtZW50ID0gZWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICAgIGlmICghcGFyZW50RWxlbWVudCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZ3JpZCBlbGVtZW50Jyk7XG4gICAgfVxuICAgIGxldCBlbCA9IHBhcmVudEVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gICAgbGV0IGluZGV4ID0gMDtcbiAgICB3aGlsZSAoZWwgIT09IGVsZW1lbnQgJiYgZWwgIT09IHBhcmVudEVsZW1lbnQubGFzdEVsZW1lbnRDaGlsZCAmJiBlbCkge1xuICAgICAgICBlbCA9IGVsLm5leHRFbGVtZW50U2libGluZztcbiAgICAgICAgaW5kZXgrKztcbiAgICB9XG4gICAgcmV0dXJuIGluZGV4O1xufVxuLyoqXG4gKiBGaW5kIHRoZSBncmlkIGxvY2F0aW9uIG9mIGEgc3BlY2lmaWMgRE9NIGVsZW1lbnQgYnkgdHJhdmVyc2luZyB0aGUgcGFyZW50XG4gKiBjaGFpbiBhbmQgZmluZGluZyBlYWNoIGNoaWxkIGluZGV4IG9uIHRoZSB3YXkuXG4gKlxuICogVGhpcyB3aWxsIGJyZWFrIGFzIHNvb24gYXMgRE9NIHN0cnVjdHVyZXMgb2YgdGhlIFNwbGl0dmlldyBvciBHcmlkdmlldyBjaGFuZ2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRHcmlkTG9jYXRpb24oZWxlbWVudCkge1xuICAgIGNvbnN0IHBhcmVudEVsZW1lbnQgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgaWYgKCFwYXJlbnRFbGVtZW50KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBncmlkIGVsZW1lbnQnKTtcbiAgICB9XG4gICAgaWYgKC9cXGJkdi1ncmlkLXZpZXdcXGIvLnRlc3QocGFyZW50RWxlbWVudC5jbGFzc05hbWUpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgY29uc3QgaW5kZXggPSBpbmRleEluUGFyZW50KHBhcmVudEVsZW1lbnQpO1xuICAgIGNvbnN0IGFuY2VzdG9yID0gcGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgICByZXR1cm4gWy4uLmdldEdyaWRMb2NhdGlvbihhbmNlc3RvciksIGluZGV4XTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRSZWxhdGl2ZUxvY2F0aW9uKHJvb3RPcmllbnRhdGlvbiwgbG9jYXRpb24sIGRpcmVjdGlvbikge1xuICAgIGNvbnN0IG9yaWVudGF0aW9uID0gZ2V0TG9jYXRpb25PcmllbnRhdGlvbihyb290T3JpZW50YXRpb24sIGxvY2F0aW9uKTtcbiAgICBjb25zdCBkaXJlY3Rpb25PcmllbnRhdGlvbiA9IGdldERpcmVjdGlvbk9yaWVudGF0aW9uKGRpcmVjdGlvbik7XG4gICAgaWYgKG9yaWVudGF0aW9uID09PSBkaXJlY3Rpb25PcmllbnRhdGlvbikge1xuICAgICAgICBjb25zdCBbcmVzdCwgX2luZGV4XSA9IHRhaWwobG9jYXRpb24pO1xuICAgICAgICBsZXQgaW5kZXggPSBfaW5kZXg7XG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdyaWdodCcgfHwgZGlyZWN0aW9uID09PSAnYm90dG9tJykge1xuICAgICAgICAgICAgaW5kZXggKz0gMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gWy4uLnJlc3QsIGluZGV4XTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gZGlyZWN0aW9uID09PSAncmlnaHQnIHx8IGRpcmVjdGlvbiA9PT0gJ2JvdHRvbScgPyAxIDogMDtcbiAgICAgICAgcmV0dXJuIFsuLi5sb2NhdGlvbiwgaW5kZXhdO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXREaXJlY3Rpb25PcmllbnRhdGlvbihkaXJlY3Rpb24pIHtcbiAgICByZXR1cm4gZGlyZWN0aW9uID09PSAndG9wJyB8fCBkaXJlY3Rpb24gPT09ICdib3R0b20nXG4gICAgICAgID8gT3JpZW50YXRpb24uVkVSVElDQUxcbiAgICAgICAgOiBPcmllbnRhdGlvbi5IT1JJWk9OVEFMO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldExvY2F0aW9uT3JpZW50YXRpb24ocm9vdE9yaWVudGF0aW9uLCBsb2NhdGlvbikge1xuICAgIHJldHVybiBsb2NhdGlvbi5sZW5ndGggJSAyID09PSAwXG4gICAgICAgID8gb3J0aG9nb25hbChyb290T3JpZW50YXRpb24pXG4gICAgICAgIDogcm9vdE9yaWVudGF0aW9uO1xufVxuZXhwb3J0IGNvbnN0IG9ydGhvZ29uYWwgPSAob3JpZW50YXRpb24pID0+IG9yaWVudGF0aW9uID09PSBPcmllbnRhdGlvbi5IT1JJWk9OVEFMXG4gICAgPyBPcmllbnRhdGlvbi5WRVJUSUNBTFxuICAgIDogT3JpZW50YXRpb24uSE9SSVpPTlRBTDtcbmV4cG9ydCBmdW5jdGlvbiBpc0dyaWRCcmFuY2hOb2RlKG5vZGUpIHtcbiAgICByZXR1cm4gISFub2RlLmNoaWxkcmVuO1xufVxuY29uc3Qgc2VyaWFsaXplQnJhbmNoTm9kZSA9IChub2RlLCBvcmllbnRhdGlvbikgPT4ge1xuICAgIGNvbnN0IHNpemUgPSBvcmllbnRhdGlvbiA9PT0gT3JpZW50YXRpb24uVkVSVElDQUwgPyBub2RlLmJveC53aWR0aCA6IG5vZGUuYm94LmhlaWdodDtcbiAgICBpZiAoIWlzR3JpZEJyYW5jaE5vZGUobm9kZSkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBub2RlLmNhY2hlZFZpc2libGVTaXplID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnbGVhZicsXG4gICAgICAgICAgICAgICAgZGF0YTogbm9kZS52aWV3LnRvSlNPTigpLFxuICAgICAgICAgICAgICAgIHNpemU6IG5vZGUuY2FjaGVkVmlzaWJsZVNpemUsXG4gICAgICAgICAgICAgICAgdmlzaWJsZTogZmFsc2UsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHR5cGU6ICdsZWFmJywgZGF0YTogbm9kZS52aWV3LnRvSlNPTigpLCBzaXplIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdicmFuY2gnLFxuICAgICAgICBkYXRhOiBub2RlLmNoaWxkcmVuLm1hcCgoYykgPT4gc2VyaWFsaXplQnJhbmNoTm9kZShjLCBvcnRob2dvbmFsKG9yaWVudGF0aW9uKSkpLFxuICAgICAgICBzaXplLFxuICAgIH07XG59O1xuZXhwb3J0IGNsYXNzIEdyaWR2aWV3IHtcbiAgICBnZXQgbGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcm9vdCA/IHRoaXMuX3Jvb3QuY2hpbGRyZW4ubGVuZ3RoIDogMDtcbiAgICB9XG4gICAgZ2V0IG9yaWVudGF0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yb290Lm9yaWVudGF0aW9uO1xuICAgIH1cbiAgICBzZXQgb3JpZW50YXRpb24ob3JpZW50YXRpb24pIHtcbiAgICAgICAgaWYgKHRoaXMucm9vdC5vcmllbnRhdGlvbiA9PT0gb3JpZW50YXRpb24pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IHNpemUsIG9ydGhvZ29uYWxTaXplIH0gPSB0aGlzLnJvb3Q7XG4gICAgICAgIHRoaXMucm9vdCA9IGZsaXBOb2RlKHRoaXMucm9vdCwgb3J0aG9nb25hbFNpemUsIHNpemUpO1xuICAgICAgICB0aGlzLnJvb3QubGF5b3V0KHNpemUsIG9ydGhvZ29uYWxTaXplKTtcbiAgICB9XG4gICAgZ2V0IHdpZHRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yb290LndpZHRoO1xuICAgIH1cbiAgICBnZXQgaGVpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yb290LmhlaWdodDtcbiAgICB9XG4gICAgZ2V0IG1pbmltdW1XaWR0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucm9vdC5taW5pbXVtV2lkdGg7XG4gICAgfVxuICAgIGdldCBtaW5pbXVtSGVpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yb290Lm1pbmltdW1IZWlnaHQ7XG4gICAgfVxuICAgIGdldCBtYXhpbXVtV2lkdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvb3QubWF4aW11bUhlaWdodDtcbiAgICB9XG4gICAgZ2V0IG1heGltdW1IZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvb3QubWF4aW11bUhlaWdodDtcbiAgICB9XG4gICAgZ2V0IGxvY2tlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvY2tlZDtcbiAgICB9XG4gICAgc2V0IGxvY2tlZCh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9sb2NrZWQgPSB2YWx1ZTtcbiAgICAgICAgY29uc3QgYnJhbmNoID0gW3RoaXMucm9vdF07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzaW1wbGUgZGVwdGgtZmlyc3Qtc2VhcmNoIHRvIGNvdmVyIGFsbCBub2Rlc1xuICAgICAgICAgKlxuICAgICAgICAgKiBAc2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0RlcHRoLWZpcnN0X3NlYXJjaFxuICAgICAgICAgKi9cbiAgICAgICAgd2hpbGUgKGJyYW5jaC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gYnJhbmNoLnBvcCgpO1xuICAgICAgICAgICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBCcmFuY2hOb2RlKSB7XG4gICAgICAgICAgICAgICAgbm9kZS5kaXNhYmxlZCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGJyYW5jaC5wdXNoKC4uLm5vZGUuY2hpbGRyZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBtYXJnaW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXJnaW47XG4gICAgfVxuICAgIHNldCBtYXJnaW4odmFsdWUpIHtcbiAgICAgICAgdGhpcy5fbWFyZ2luID0gdmFsdWU7XG4gICAgICAgIHRoaXMucm9vdC5tYXJnaW4gPSB2YWx1ZTtcbiAgICB9XG4gICAgbWF4aW1pemVkVmlldygpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5fbWF4aW1pemVkTm9kZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxlYWYudmlldztcbiAgICB9XG4gICAgaGFzTWF4aW1pemVkVmlldygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21heGltaXplZE5vZGUgIT09IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgbWF4aW1pemVWaWV3KHZpZXcpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBsb2NhdGlvbiA9IGdldEdyaWRMb2NhdGlvbih2aWV3LmVsZW1lbnQpO1xuICAgICAgICBjb25zdCBbXywgbm9kZV0gPSB0aGlzLmdldE5vZGUobG9jYXRpb24pO1xuICAgICAgICBpZiAoIShub2RlIGluc3RhbmNlb2YgTGVhZk5vZGUpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCgoX2EgPSB0aGlzLl9tYXhpbWl6ZWROb2RlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubGVhZikgPT09IG5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5oYXNNYXhpbWl6ZWRWaWV3KCkpIHtcbiAgICAgICAgICAgIHRoaXMuZXhpdE1heGltaXplZFZpZXcoKTtcbiAgICAgICAgfVxuICAgICAgICBzZXJpYWxpemVCcmFuY2hOb2RlKHRoaXMuZ2V0VmlldygpLCB0aGlzLm9yaWVudGF0aW9uKTtcbiAgICAgICAgY29uc3QgaGlkZGVuT25NYXhpbWl6ZSA9IFtdO1xuICAgICAgICBmdW5jdGlvbiBoaWRlQWxsVmlld3NCdXQocGFyZW50LCBleGNsdWRlKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcmVudC5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gcGFyZW50LmNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIExlYWZOb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZCAhPT0gZXhjbHVkZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudC5pc0NoaWxkVmlzaWJsZShpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5zZXRDaGlsZFZpc2libGUoaSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlkZGVuT25NYXhpbWl6ZS5wdXNoKGNoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaGlkZUFsbFZpZXdzQnV0KGNoaWxkLCBleGNsdWRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaGlkZUFsbFZpZXdzQnV0KHRoaXMucm9vdCwgbm9kZSk7XG4gICAgICAgIHRoaXMuX21heGltaXplZE5vZGUgPSB7IGxlYWY6IG5vZGUsIGhpZGRlbk9uTWF4aW1pemUgfTtcbiAgICAgICAgdGhpcy5fb25EaWRNYXhpbWl6ZWROb2RlQ2hhbmdlLmZpcmUoe1xuICAgICAgICAgICAgdmlldzogbm9kZS52aWV3LFxuICAgICAgICAgICAgaXNNYXhpbWl6ZWQ6IHRydWUsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBleGl0TWF4aW1pemVkVmlldygpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9tYXhpbWl6ZWROb2RlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaGlkZGVuT25NYXhpbWl6ZSA9IHRoaXMuX21heGltaXplZE5vZGUuaGlkZGVuT25NYXhpbWl6ZTtcbiAgICAgICAgZnVuY3Rpb24gc2hvd1ZpZXdzSW5SZXZlcnNlT3JkZXIocGFyZW50KSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IHBhcmVudC5jaGlsZHJlbi5sZW5ndGggLSAxOyBpbmRleCA+PSAwOyBpbmRleC0tKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGQgPSBwYXJlbnQuY2hpbGRyZW5baW5kZXhdO1xuICAgICAgICAgICAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIExlYWZOb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaGlkZGVuT25NYXhpbWl6ZS5pbmNsdWRlcyhjaGlsZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5zZXRDaGlsZFZpc2libGUoaW5kZXgsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzaG93Vmlld3NJblJldmVyc2VPcmRlcihjaGlsZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNob3dWaWV3c0luUmV2ZXJzZU9yZGVyKHRoaXMucm9vdCk7XG4gICAgICAgIGNvbnN0IHRtcCA9IHRoaXMuX21heGltaXplZE5vZGUubGVhZjtcbiAgICAgICAgdGhpcy5fbWF4aW1pemVkTm9kZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fb25EaWRNYXhpbWl6ZWROb2RlQ2hhbmdlLmZpcmUoe1xuICAgICAgICAgICAgdmlldzogdG1wLnZpZXcsXG4gICAgICAgICAgICBpc01heGltaXplZDogZmFsc2UsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzZXJpYWxpemUoKSB7XG4gICAgICAgIGNvbnN0IG1heGltaXplZFZpZXcgPSB0aGlzLm1heGltaXplZFZpZXcoKTtcbiAgICAgICAgbGV0IG1heG1pemVkVmlld0xvY2F0aW9uO1xuICAgICAgICBpZiAobWF4aW1pemVkVmlldykge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUaGUgbWluaW11bSBpbmZvcm1hdGlvbiB3ZSBjYW4gZ2V0IGF3YXkgd2l0aCBpbiBvcmRlciB0byBzZXJpYWxpemUgYSBtYXhtaXplZCB2aWV3IGlzIGl0J3MgbG9jYXRpb24gd2l0aGluIHRoZSBncmlkXG4gICAgICAgICAgICAgKiB3aGljaCBpcyByZXByZXNlbnRlZCBhcyBhIGJyYW5jaCBvZiBpbmRpY2VzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIG1heG1pemVkVmlld0xvY2F0aW9uID0gZ2V0R3JpZExvY2F0aW9uKG1heGltaXplZFZpZXcuZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaGFzTWF4aW1pemVkVmlldygpKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIHRoZSBzYXZlZCBsYXlvdXQgY2Fubm90IGJlIGluIGl0cyBtYXhtaXplZCBzdGF0ZSBvdGhlcndpc2UgYWxsIG9mIHRoZSB1bmRlcmx5aW5nXG4gICAgICAgICAgICAgKiB2aWV3IGRpbWVuc2lvbnMgd2lsbCBiZSB3cm9uZ1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFRvIGNvdW50ZXJhY3QgdGhpcyB3ZSB0ZW1wb3JhaWx5IHJlbW92ZSB0aGUgbWF4aW1pemVkIHZpZXcgdG8gY29tcHV0ZSB0aGUgc2VyaWFsaXplZCBvdXRwdXRcbiAgICAgICAgICAgICAqIG9mIHRoZSBncmlkIGJlZm9yZSBhZGRpbmcgYmFjayB0aGUgbWF4bWl6ZWQgdmlldyBhcyB0byBub3QgYWx0ZXIgdGhlIGxheW91dCBmcm9tIHRoZSB1c2Vyc1xuICAgICAgICAgICAgICogcGVyc3BlY3RpdmUgd2hlbiBgLnRvSlNPTigpYCBpcyBjYWxsZWRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5leGl0TWF4aW1pemVkVmlldygpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJvb3QgPSBzZXJpYWxpemVCcmFuY2hOb2RlKHRoaXMuZ2V0VmlldygpLCB0aGlzLm9yaWVudGF0aW9uKTtcbiAgICAgICAgY29uc3QgcmVzdWxsdCA9IHtcbiAgICAgICAgICAgIHJvb3QsXG4gICAgICAgICAgICB3aWR0aDogdGhpcy53aWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogdGhpcy5oZWlnaHQsXG4gICAgICAgICAgICBvcmllbnRhdGlvbjogdGhpcy5vcmllbnRhdGlvbixcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKG1heG1pemVkVmlld0xvY2F0aW9uKSB7XG4gICAgICAgICAgICByZXN1bGx0Lm1heGltaXplZE5vZGUgPSB7XG4gICAgICAgICAgICAgICAgbG9jYXRpb246IG1heG1pemVkVmlld0xvY2F0aW9uLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF4aW1pemVkVmlldykge1xuICAgICAgICAgICAgLy8gcmVwbGFjZSBhbnkgbWF4aW16aWVkIHZpZXcgdGhhdCB3YXMgcmVtb3ZlZCBmb3Igc2VyaWFsaXphdGlvbiBwdXJwb3Nlc1xuICAgICAgICAgICAgdGhpcy5tYXhpbWl6ZVZpZXcobWF4aW1pemVkVmlldyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsbHQ7XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHRoaXMuZGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gICAgICAgIHRoaXMuX29uRGlkQ2hhbmdlLmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5fb25EaWRNYXhpbWl6ZWROb2RlQ2hhbmdlLmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5fb25EaWRWaWV3VmlzaWJpbGl0eUNoYW5nZS5kaXNwb3NlKCk7XG4gICAgICAgIHRoaXMucm9vdC5kaXNwb3NlKCk7XG4gICAgICAgIHRoaXMuX21heGltaXplZE5vZGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmUoKTtcbiAgICB9XG4gICAgY2xlYXIoKSB7XG4gICAgICAgIGNvbnN0IG9yaWVudGF0aW9uID0gdGhpcy5yb290Lm9yaWVudGF0aW9uO1xuICAgICAgICB0aGlzLnJvb3QgPSBuZXcgQnJhbmNoTm9kZShvcmllbnRhdGlvbiwgdGhpcy5wcm9wb3J0aW9uYWxMYXlvdXQsIHRoaXMuc3R5bGVzLCB0aGlzLnJvb3Quc2l6ZSwgdGhpcy5yb290Lm9ydGhvZ29uYWxTaXplLCB0aGlzLmxvY2tlZCwgdGhpcy5tYXJnaW4pO1xuICAgIH1cbiAgICBkZXNlcmlhbGl6ZShqc29uLCBkZXNlcmlhbGl6ZXIpIHtcbiAgICAgICAgY29uc3Qgb3JpZW50YXRpb24gPSBqc29uLm9yaWVudGF0aW9uO1xuICAgICAgICBjb25zdCBoZWlnaHQgPSBvcmllbnRhdGlvbiA9PT0gT3JpZW50YXRpb24uVkVSVElDQUwgPyBqc29uLmhlaWdodCA6IGpzb24ud2lkdGg7XG4gICAgICAgIHRoaXMuX2Rlc2VyaWFsaXplKGpzb24ucm9vdCwgb3JpZW50YXRpb24sIGRlc2VyaWFsaXplciwgaGVpZ2h0KTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBkZXNlcmlhbGllZCBsYXlvdXQgbXVzdCBiZSBwb3NpdGlvbmVkIHRocm91Z2ggdGhpcy5sYXlvdXQoLi4uKVxuICAgICAgICAgKiBiZWZvcmUgYW55IG1heGltaXplZE5vZGUgY2FuIGJlIHBvc2l0aW9uZWRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubGF5b3V0KGpzb24ud2lkdGgsIGpzb24uaGVpZ2h0KTtcbiAgICAgICAgaWYgKGpzb24ubWF4aW1pemVkTm9kZSkge1xuICAgICAgICAgICAgY29uc3QgbG9jYXRpb24gPSBqc29uLm1heGltaXplZE5vZGUubG9jYXRpb247XG4gICAgICAgICAgICBjb25zdCBbXywgbm9kZV0gPSB0aGlzLmdldE5vZGUobG9jYXRpb24pO1xuICAgICAgICAgICAgaWYgKCEobm9kZSBpbnN0YW5jZW9mIExlYWZOb2RlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubWF4aW1pemVWaWV3KG5vZGUudmlldyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2Rlc2VyaWFsaXplKHJvb3QsIG9yaWVudGF0aW9uLCBkZXNlcmlhbGl6ZXIsIG9ydGhvZ29uYWxTaXplKSB7XG4gICAgICAgIHRoaXMucm9vdCA9IHRoaXMuX2Rlc2VyaWFsaXplTm9kZShyb290LCBvcmllbnRhdGlvbiwgZGVzZXJpYWxpemVyLCBvcnRob2dvbmFsU2l6ZSk7XG4gICAgfVxuICAgIF9kZXNlcmlhbGl6ZU5vZGUobm9kZSwgb3JpZW50YXRpb24sIGRlc2VyaWFsaXplciwgb3J0aG9nb25hbFNpemUpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBsZXQgcmVzdWx0O1xuICAgICAgICBpZiAobm9kZS50eXBlID09PSAnYnJhbmNoJykge1xuICAgICAgICAgICAgY29uc3Qgc2VyaWFsaXplZENoaWxkcmVuID0gbm9kZS5kYXRhO1xuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBzZXJpYWxpemVkQ2hpbGRyZW4ubWFwKChzZXJpYWxpemVkQ2hpbGQpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBub2RlOiB0aGlzLl9kZXNlcmlhbGl6ZU5vZGUoc2VyaWFsaXplZENoaWxkLCBvcnRob2dvbmFsKG9yaWVudGF0aW9uKSwgZGVzZXJpYWxpemVyLCBub2RlLnNpemUpLFxuICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiBzZXJpYWxpemVkQ2hpbGQudmlzaWJsZSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXN1bHQgPSBuZXcgQnJhbmNoTm9kZShvcmllbnRhdGlvbiwgdGhpcy5wcm9wb3J0aW9uYWxMYXlvdXQsIHRoaXMuc3R5bGVzLCBub2RlLnNpemUsIC8vIDwtIG9ydGhvZ29uYWwgc2l6ZSAtIGZsaXBzIGF0IGVhY2ggZGVwdGhcbiAgICAgICAgICAgIG9ydGhvZ29uYWxTaXplLCAvLyA8LSBzaXplIC0gZmxpcHMgYXQgZWFjaCBkZXB0aCxcbiAgICAgICAgICAgIHRoaXMubG9ja2VkLCB0aGlzLm1hcmdpbiwgY2hpbGRyZW4pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdmlldyA9IGRlc2VyaWFsaXplci5mcm9tSlNPTihub2RlKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygbm9kZS52aXNpYmxlID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgICAgICAoX2EgPSB2aWV3LnNldFZpc2libGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHZpZXcsIG5vZGUudmlzaWJsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHQgPSBuZXcgTGVhZk5vZGUodmlldywgb3JpZW50YXRpb24sIG9ydGhvZ29uYWxTaXplLCBub2RlLnNpemUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGdldCByb290KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcm9vdDtcbiAgICB9XG4gICAgc2V0IHJvb3Qocm9vdCkge1xuICAgICAgICBjb25zdCBvbGRSb290ID0gdGhpcy5fcm9vdDtcbiAgICAgICAgaWYgKG9sZFJvb3QpIHtcbiAgICAgICAgICAgIG9sZFJvb3QuZGlzcG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5fbWF4aW1pemVkTm9kZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVDaGlsZChvbGRSb290LmVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Jvb3QgPSByb290O1xuICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5fcm9vdC5lbGVtZW50KTtcbiAgICAgICAgdGhpcy5kaXNwb3NhYmxlLnZhbHVlID0gdGhpcy5fcm9vdC5vbkRpZENoYW5nZSgoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25EaWRDaGFuZ2UuZmlyZShlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG5vcm1hbGl6ZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9yb290KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3Jvb3QuY2hpbGRyZW4ubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb2xkUm9vdCA9IHRoaXMucm9vdDtcbiAgICAgICAgLy8gY2FuIHJlbW92ZSBvbmUgbGV2ZWwgb2YgcmVkdW5kYW50IGJyYW5jaGluZyBpZiB0aGVyZSBpcyBvbmx5IGEgc2luZ2xlIGNoaWxkXG4gICAgICAgIGNvbnN0IGNoaWxkUmVmZXJlbmNlID0gb2xkUm9vdC5jaGlsZHJlblswXTtcbiAgICAgICAgaWYgKGNoaWxkUmVmZXJlbmNlIGluc3RhbmNlb2YgTGVhZk5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBvbGRSb290LmVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgIGNvbnN0IGNoaWxkID0gb2xkUm9vdC5yZW1vdmVDaGlsZCgwKTsgLy8gUmVtb3ZlIGNoaWxkIHRvIHByZXZlbnQgZG91YmxlIGRpc3Bvc2FsXG4gICAgICAgIG9sZFJvb3QuZGlzcG9zZSgpOyAvLyBEaXNwb3NlIG9sZCByb290ICh3b24ndCBkaXNwb3NlIHJlbW92ZWQgY2hpbGQpXG4gICAgICAgIGNoaWxkLmRpc3Bvc2UoKTsgLy8gRGlzcG9zZSB0aGUgcmVtb3ZlZCBjaGlsZFxuICAgICAgICB0aGlzLl9yb290ID0gY2xvbmVOb2RlKGNoaWxkUmVmZXJlbmNlLCBjaGlsZFJlZmVyZW5jZS5zaXplLCBjaGlsZFJlZmVyZW5jZS5vcnRob2dvbmFsU2l6ZSk7XG4gICAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLl9yb290LmVsZW1lbnQpO1xuICAgICAgICB0aGlzLmRpc3Bvc2FibGUudmFsdWUgPSB0aGlzLl9yb290Lm9uRGlkQ2hhbmdlKChlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9vbkRpZENoYW5nZS5maXJlKGUpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSWYgdGhlIHJvb3QgaXMgb3JpZW50YXRlZCBhcyBhIFZFUlRJQ0FMIG5vZGUgdGhlbiBuZXN0IHRoZSBleGlzdGluZyByb290IHdpdGhpbiBhIG5ldyBIT1JJWklPTlRBTCByb290IG5vZGVcbiAgICAgKiBJZiB0aGUgcm9vdCBpcyBvcmllbnRhdGVkIGFzIGEgSE9SSVpPTlRBTCBub2RlIHRoZW4gbmVzdCB0aGUgZXhpc3Rpbmcgcm9vdCB3aXRoaW4gYSBuZXcgVkVSSVRDQUwgcm9vdCBub2RlXG4gICAgICovXG4gICAgaW5zZXJ0T3J0aG9nb25hbFNwbGl0dmlld0F0Um9vdCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9yb290KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb2xkUm9vdCA9IHRoaXMucm9vdDtcbiAgICAgICAgb2xkUm9vdC5lbGVtZW50LnJlbW92ZSgpO1xuICAgICAgICB0aGlzLl9yb290ID0gbmV3IEJyYW5jaE5vZGUob3J0aG9nb25hbChvbGRSb290Lm9yaWVudGF0aW9uKSwgdGhpcy5wcm9wb3J0aW9uYWxMYXlvdXQsIHRoaXMuc3R5bGVzLCB0aGlzLnJvb3Qub3J0aG9nb25hbFNpemUsIHRoaXMucm9vdC5zaXplLCB0aGlzLmxvY2tlZCwgdGhpcy5tYXJnaW4pO1xuICAgICAgICBpZiAob2xkUm9vdC5jaGlsZHJlbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIC8vIG5vIGRhdGEgc28gbm8gbmVlZCB0byBhZGQgYW55dGhpbmcgYmFjayBpblxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9sZFJvb3QuY2hpbGRyZW4ubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAvLyBjYW4gcmVtb3ZlIG9uZSBsZXZlbCBvZiByZWR1bmRhbnQgYnJhbmNoaW5nIGlmIHRoZXJlIGlzIG9ubHkgYSBzaW5nbGUgY2hpbGRcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkUmVmZXJlbmNlID0gb2xkUm9vdC5jaGlsZHJlblswXTtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gb2xkUm9vdC5yZW1vdmVDaGlsZCgwKTsgLy8gcmVtb3ZlIHRvIHByZXZlbnQgZGlzcG9zYWwgd2hlbiBkaXNwb3Npbmcgb2YgdW53YW50ZWQgcm9vdFxuICAgICAgICAgICAgY2hpbGQuZGlzcG9zZSgpO1xuICAgICAgICAgICAgb2xkUm9vdC5kaXNwb3NlKCk7XG4gICAgICAgICAgICB0aGlzLl9yb290LmFkZENoaWxkKFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiB0aGUgY2hpbGQgbm9kZSB3aWxsIGhhdmUgdGhlIHNhbWUgb3JpZW50YXRpb24gYXMgdGhlIG5ldyByb290IHNpbmNlXG4gICAgICAgICAgICAgKiB3ZSBhcmUgcmVtb3ZpbmcgdGhlIGluYmV0d2VlbiBub2RlLlxuICAgICAgICAgICAgICogdGhlIGVudGlyZSAndHJlZScgbXVzdCBiZSBmbGlwcGVkIHJlY3Vyc2l2ZWx5IHRvIGVuc3VyZSB0aGF0IHRoZSBvcmllbnRhdGlvblxuICAgICAgICAgICAgICogZmxpcHMgYXQgZWFjaCBsZXZlbFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmbGlwTm9kZShjaGlsZFJlZmVyZW5jZSwgY2hpbGRSZWZlcmVuY2Uub3J0aG9nb25hbFNpemUsIGNoaWxkUmVmZXJlbmNlLnNpemUpLCBTaXppbmcuRGlzdHJpYnV0ZSwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9yb290LmFkZENoaWxkKG9sZFJvb3QsIFNpemluZy5EaXN0cmlidXRlLCAwKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5fcm9vdC5lbGVtZW50KTtcbiAgICAgICAgdGhpcy5kaXNwb3NhYmxlLnZhbHVlID0gdGhpcy5fcm9vdC5vbkRpZENoYW5nZSgoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25EaWRDaGFuZ2UuZmlyZShlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG5leHQobG9jYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvZ21hdGljU2VsZWN0KGxvY2F0aW9uKTtcbiAgICB9XG4gICAgcHJldmlvdXMobG9jYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvZ21hdGljU2VsZWN0KGxvY2F0aW9uLCB0cnVlKTtcbiAgICB9XG4gICAgZ2V0Vmlldyhsb2NhdGlvbikge1xuICAgICAgICBjb25zdCBub2RlID0gbG9jYXRpb24gPyB0aGlzLmdldE5vZGUobG9jYXRpb24pWzFdIDogdGhpcy5yb290O1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0Vmlld3Mobm9kZSwgdGhpcy5vcmllbnRhdGlvbik7XG4gICAgfVxuICAgIF9nZXRWaWV3cyhub2RlLCBvcmllbnRhdGlvbiwgY2FjaGVkVmlzaWJsZVNpemUpIHtcbiAgICAgICAgY29uc3QgYm94ID0geyBoZWlnaHQ6IG5vZGUuaGVpZ2h0LCB3aWR0aDogbm9kZS53aWR0aCB9O1xuICAgICAgICBpZiAobm9kZSBpbnN0YW5jZW9mIExlYWZOb2RlKSB7XG4gICAgICAgICAgICByZXR1cm4geyBib3gsIHZpZXc6IG5vZGUudmlldywgY2FjaGVkVmlzaWJsZVNpemUgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gbm9kZS5jaGlsZHJlbltpXTtcbiAgICAgICAgICAgIGNvbnN0IG5vZGVDYWNoZWRWaXNpYmxlU2l6ZSA9IG5vZGUuZ2V0Q2hpbGRDYWNoZWRWaXNpYmxlU2l6ZShpKTtcbiAgICAgICAgICAgIGNoaWxkcmVuLnB1c2godGhpcy5fZ2V0Vmlld3MoY2hpbGQsIG9ydGhvZ29uYWwob3JpZW50YXRpb24pLCBub2RlQ2FjaGVkVmlzaWJsZVNpemUpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBib3gsIGNoaWxkcmVuIH07XG4gICAgfVxuICAgIHByb2dtYXRpY1NlbGVjdChsb2NhdGlvbiwgcmV2ZXJzZSA9IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IFtwYXRoLCBub2RlXSA9IHRoaXMuZ2V0Tm9kZShsb2NhdGlvbik7XG4gICAgICAgIGlmICghKG5vZGUgaW5zdGFuY2VvZiBMZWFmTm9kZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBsb2NhdGlvbicpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSBwYXRoLmxlbmd0aCAtIDE7IGkgPiAtMTsgaS0tKSB7XG4gICAgICAgICAgICBjb25zdCBuID0gcGF0aFtpXTtcbiAgICAgICAgICAgIGNvbnN0IGwgPSBsb2NhdGlvbltpXSB8fCAwO1xuICAgICAgICAgICAgY29uc3QgY2FuUHJvZ3Jlc3NJbkN1cnJlbnRMZXZlbCA9IHJldmVyc2VcbiAgICAgICAgICAgICAgICA/IGwgLSAxID4gLTFcbiAgICAgICAgICAgICAgICA6IGwgKyAxIDwgbi5jaGlsZHJlbi5sZW5ndGg7XG4gICAgICAgICAgICBpZiAoY2FuUHJvZ3Jlc3NJbkN1cnJlbnRMZXZlbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmaW5kTGVhZihuLmNoaWxkcmVuW3JldmVyc2UgPyBsIC0gMSA6IGwgKyAxXSwgcmV2ZXJzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZpbmRMZWFmKHRoaXMucm9vdCwgcmV2ZXJzZSk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHByb3BvcnRpb25hbExheW91dCwgc3R5bGVzLCBvcmllbnRhdGlvbiwgbG9ja2VkLCBtYXJnaW4pIHtcbiAgICAgICAgdGhpcy5wcm9wb3J0aW9uYWxMYXlvdXQgPSBwcm9wb3J0aW9uYWxMYXlvdXQ7XG4gICAgICAgIHRoaXMuc3R5bGVzID0gc3R5bGVzO1xuICAgICAgICB0aGlzLl9sb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fbWFyZ2luID0gMDtcbiAgICAgICAgdGhpcy5fbWF4aW1pemVkTm9kZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5kaXNwb3NhYmxlID0gbmV3IE11dGFibGVEaXNwb3NhYmxlKCk7XG4gICAgICAgIHRoaXMuX29uRGlkQ2hhbmdlID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZENoYW5nZSA9IHRoaXMuX29uRGlkQ2hhbmdlLmV2ZW50O1xuICAgICAgICB0aGlzLl9vbkRpZFZpZXdWaXNpYmlsaXR5Q2hhbmdlID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZFZpZXdWaXNpYmlsaXR5Q2hhbmdlID0gdGhpcy5fb25EaWRWaWV3VmlzaWJpbGl0eUNoYW5nZS5ldmVudDtcbiAgICAgICAgdGhpcy5fb25EaWRNYXhpbWl6ZWROb2RlQ2hhbmdlID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZE1heGltaXplZE5vZGVDaGFuZ2UgPSB0aGlzLl9vbkRpZE1heGltaXplZE5vZGVDaGFuZ2UuZXZlbnQ7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NOYW1lID0gJ2R2LWdyaWQtdmlldyc7XG4gICAgICAgIHRoaXMuX2xvY2tlZCA9IGxvY2tlZCAhPT0gbnVsbCAmJiBsb2NrZWQgIT09IHZvaWQgMCA/IGxvY2tlZCA6IGZhbHNlO1xuICAgICAgICB0aGlzLl9tYXJnaW4gPSBtYXJnaW4gIT09IG51bGwgJiYgbWFyZ2luICE9PSB2b2lkIDAgPyBtYXJnaW4gOiAwO1xuICAgICAgICB0aGlzLnJvb3QgPSBuZXcgQnJhbmNoTm9kZShvcmllbnRhdGlvbiwgcHJvcG9ydGlvbmFsTGF5b3V0LCBzdHlsZXMsIDAsIDAsIHRoaXMubG9ja2VkLCB0aGlzLm1hcmdpbik7XG4gICAgfVxuICAgIGlzVmlld1Zpc2libGUobG9jYXRpb24pIHtcbiAgICAgICAgY29uc3QgW3Jlc3QsIGluZGV4XSA9IHRhaWwobG9jYXRpb24pO1xuICAgICAgICBjb25zdCBbLCBwYXJlbnRdID0gdGhpcy5nZXROb2RlKHJlc3QpO1xuICAgICAgICBpZiAoIShwYXJlbnQgaW5zdGFuY2VvZiBCcmFuY2hOb2RlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGZyb20gbG9jYXRpb24nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyZW50LmlzQ2hpbGRWaXNpYmxlKGluZGV4KTtcbiAgICB9XG4gICAgc2V0Vmlld1Zpc2libGUobG9jYXRpb24sIHZpc2libGUpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzTWF4aW1pemVkVmlldygpKSB7XG4gICAgICAgICAgICB0aGlzLmV4aXRNYXhpbWl6ZWRWaWV3KCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgW3Jlc3QsIGluZGV4XSA9IHRhaWwobG9jYXRpb24pO1xuICAgICAgICBjb25zdCBbLCBwYXJlbnRdID0gdGhpcy5nZXROb2RlKHJlc3QpO1xuICAgICAgICBpZiAoIShwYXJlbnQgaW5zdGFuY2VvZiBCcmFuY2hOb2RlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGZyb20gbG9jYXRpb24nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9vbkRpZFZpZXdWaXNpYmlsaXR5Q2hhbmdlLmZpcmUoKTtcbiAgICAgICAgcGFyZW50LnNldENoaWxkVmlzaWJsZShpbmRleCwgdmlzaWJsZSk7XG4gICAgfVxuICAgIG1vdmVWaWV3KHBhcmVudExvY2F0aW9uLCBmcm9tLCB0bykge1xuICAgICAgICBpZiAodGhpcy5oYXNNYXhpbWl6ZWRWaWV3KCkpIHtcbiAgICAgICAgICAgIHRoaXMuZXhpdE1heGltaXplZFZpZXcoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBbLCBwYXJlbnRdID0gdGhpcy5nZXROb2RlKHBhcmVudExvY2F0aW9uKTtcbiAgICAgICAgaWYgKCEocGFyZW50IGluc3RhbmNlb2YgQnJhbmNoTm9kZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBsb2NhdGlvbicpO1xuICAgICAgICB9XG4gICAgICAgIHBhcmVudC5tb3ZlQ2hpbGQoZnJvbSwgdG8pO1xuICAgIH1cbiAgICBhZGRWaWV3KHZpZXcsIHNpemUsIGxvY2F0aW9uKSB7XG4gICAgICAgIGlmICh0aGlzLmhhc01heGltaXplZFZpZXcoKSkge1xuICAgICAgICAgICAgdGhpcy5leGl0TWF4aW1pemVkVmlldygpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IFtyZXN0LCBpbmRleF0gPSB0YWlsKGxvY2F0aW9uKTtcbiAgICAgICAgY29uc3QgW3BhdGhUb1BhcmVudCwgcGFyZW50XSA9IHRoaXMuZ2V0Tm9kZShyZXN0KTtcbiAgICAgICAgaWYgKHBhcmVudCBpbnN0YW5jZW9mIEJyYW5jaE5vZGUpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSBuZXcgTGVhZk5vZGUodmlldywgb3J0aG9nb25hbChwYXJlbnQub3JpZW50YXRpb24pLCBwYXJlbnQub3J0aG9nb25hbFNpemUpO1xuICAgICAgICAgICAgcGFyZW50LmFkZENoaWxkKG5vZGUsIHNpemUsIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IFtncmFuZFBhcmVudCwgLi4uX10gPSBbLi4ucGF0aFRvUGFyZW50XS5yZXZlcnNlKCk7XG4gICAgICAgICAgICBjb25zdCBbcGFyZW50SW5kZXgsIC4uLl9fXSA9IFsuLi5yZXN0XS5yZXZlcnNlKCk7XG4gICAgICAgICAgICBsZXQgbmV3U2libGluZ1NpemUgPSAwO1xuICAgICAgICAgICAgY29uc3QgbmV3U2libGluZ0NhY2hlZFZpc2libGVTaXplID0gZ3JhbmRQYXJlbnQuZ2V0Q2hpbGRDYWNoZWRWaXNpYmxlU2l6ZShwYXJlbnRJbmRleCk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG5ld1NpYmxpbmdDYWNoZWRWaXNpYmxlU2l6ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICBuZXdTaWJsaW5nU2l6ZSA9IFNpemluZy5JbnZpc2libGUobmV3U2libGluZ0NhY2hlZFZpc2libGVTaXplKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gZ3JhbmRQYXJlbnQucmVtb3ZlQ2hpbGQocGFyZW50SW5kZXgpO1xuICAgICAgICAgICAgY2hpbGQuZGlzcG9zZSgpO1xuICAgICAgICAgICAgY29uc3QgbmV3UGFyZW50ID0gbmV3IEJyYW5jaE5vZGUocGFyZW50Lm9yaWVudGF0aW9uLCB0aGlzLnByb3BvcnRpb25hbExheW91dCwgdGhpcy5zdHlsZXMsIHBhcmVudC5zaXplLCBwYXJlbnQub3J0aG9nb25hbFNpemUsIHRoaXMubG9ja2VkLCB0aGlzLm1hcmdpbik7XG4gICAgICAgICAgICBncmFuZFBhcmVudC5hZGRDaGlsZChuZXdQYXJlbnQsIHBhcmVudC5zaXplLCBwYXJlbnRJbmRleCk7XG4gICAgICAgICAgICBjb25zdCBuZXdTaWJsaW5nID0gbmV3IExlYWZOb2RlKHBhcmVudC52aWV3LCBncmFuZFBhcmVudC5vcmllbnRhdGlvbiwgcGFyZW50LnNpemUpO1xuICAgICAgICAgICAgbmV3UGFyZW50LmFkZENoaWxkKG5ld1NpYmxpbmcsIG5ld1NpYmxpbmdTaXplLCAwKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicgJiYgc2l6ZS50eXBlID09PSAnc3BsaXQnKSB7XG4gICAgICAgICAgICAgICAgc2l6ZSA9IHsgdHlwZTogJ3NwbGl0JywgaW5kZXg6IDAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSBuZXcgTGVhZk5vZGUodmlldywgZ3JhbmRQYXJlbnQub3JpZW50YXRpb24sIHBhcmVudC5zaXplKTtcbiAgICAgICAgICAgIG5ld1BhcmVudC5hZGRDaGlsZChub2RlLCBzaXplLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVtb3ZlKHZpZXcsIHNpemluZykge1xuICAgICAgICBjb25zdCBsb2NhdGlvbiA9IGdldEdyaWRMb2NhdGlvbih2aWV3LmVsZW1lbnQpO1xuICAgICAgICByZXR1cm4gdGhpcy5yZW1vdmVWaWV3KGxvY2F0aW9uLCBzaXppbmcpO1xuICAgIH1cbiAgICByZW1vdmVWaWV3KGxvY2F0aW9uLCBzaXppbmcpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzTWF4aW1pemVkVmlldygpKSB7XG4gICAgICAgICAgICB0aGlzLmV4aXRNYXhpbWl6ZWRWaWV3KCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgW3Jlc3QsIGluZGV4XSA9IHRhaWwobG9jYXRpb24pO1xuICAgICAgICBjb25zdCBbcGF0aFRvUGFyZW50LCBwYXJlbnRdID0gdGhpcy5nZXROb2RlKHJlc3QpO1xuICAgICAgICBpZiAoIShwYXJlbnQgaW5zdGFuY2VvZiBCcmFuY2hOb2RlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGxvY2F0aW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgbm9kZVRvUmVtb3ZlID0gcGFyZW50LmNoaWxkcmVuW2luZGV4XTtcbiAgICAgICAgaWYgKCEobm9kZVRvUmVtb3ZlIGluc3RhbmNlb2YgTGVhZk5vZGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbG9jYXRpb24nKTtcbiAgICAgICAgfVxuICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoaW5kZXgsIHNpemluZyk7XG4gICAgICAgIG5vZGVUb1JlbW92ZS5kaXNwb3NlKCk7XG4gICAgICAgIGlmIChwYXJlbnQuY2hpbGRyZW4ubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZVRvUmVtb3ZlLnZpZXc7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgdGhlIHBhcmVudCBoYXMgb25seSBvbmUgY2hpbGQgYW5kIHdlIGtub3cgdGhlIHBhcmVudCBpcyBhIEJyYW5jaE5vZGUgd2UgY2FuIG1ha2UgdGhlIHRyZWVcbiAgICAgICAgLy8gbW9yZSBlZmZpY2llbnRseSBzcGFjZWQgYnkgcmVwbGFjaW5nIHRoZSBwYXJlbnQgQnJhbmNoTm9kZSB3aXRoIHRoZSBjaGlsZC5cbiAgICAgICAgLy8gaWYgdGhhdCBjaGlsZCBpcyBhIExlYWZOb2RlIHRoZW4gd2Ugc2ltcGx5IHJlcGxhY2UgdGhlIEJyYW5jaE5vZGUgd2l0aCB0aGUgY2hpbGQgb3RoZXJ3aXNlIGlmIHRoZSBjaGlsZFxuICAgICAgICAvLyBpcyBhIEJyYW5jaE5vZGUgdG9vIHdlIHNob3VsZCBzcHJlYWQgaXQncyBjaGlsZHJlbiBpbnRvIHRoZSBncmFuZHBhcmVudC5cbiAgICAgICAgLy8gcmVmZXIgdG8gdGhlIHJlbWFpbmluZyBjaGlsZCBhcyB0aGUgc2libGluZ1xuICAgICAgICBjb25zdCBzaWJsaW5nID0gcGFyZW50LmNoaWxkcmVuWzBdO1xuICAgICAgICBpZiAocGF0aFRvUGFyZW50Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgLy8gaWYgdGhlIHBhcmVudCBpcyByb290XG4gICAgICAgICAgICBpZiAoc2libGluZyBpbnN0YW5jZW9mIExlYWZOb2RlKSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgdGhlIHNpYmxpbmcgaXMgYSBsZWFmIG5vZGUgbm8gYWN0aW9uIGlzIHJlcXVpcmVkXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGVUb1JlbW92ZS52aWV3O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIHRoZSBzaWJsaW5nIGlzIGEgYnJhbmNoIG5vZGUuIHNpbmNlIHRoZSBwYXJlbnQgaXMgdGhlIHJvb3QgYW5kIHRoZSByb290IGhhcyBvbmx5IG9uZSBjaGlsZFxuICAgICAgICAgICAgLy8gd2hpY2ggaXMgYSBicmFuY2ggbm9kZSB3ZSBjYW4ganVzdCBzZXQgdGhpcyBicmFuY2ggbm9kZSB0byBiZSB0aGUgbmV3IHJvb3Qgbm9kZVxuICAgICAgICAgICAgLy8gZm9yIGdvb2QgaG91c2VrZWVwaW5nIHdlJ2xsIHJlbW92aW5nIHRoZSBzaWJsaW5nIGZyb20gaXQncyBleGlzdGluZyB0cmVlXG4gICAgICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoMCwgc2l6aW5nKTtcbiAgICAgICAgICAgIC8vIGFuZCBzZXQgdGhhdCBzaWJsaW5nIG5vZGUgdG8gYmUgcm9vdFxuICAgICAgICAgICAgdGhpcy5yb290ID0gc2libGluZztcbiAgICAgICAgICAgIHJldHVybiBub2RlVG9SZW1vdmUudmlldztcbiAgICAgICAgfVxuICAgICAgICAvLyBvdGhlcndpc2UgdGhlIHBhcmVudCBpcyBhcGFydCBvZiBhIGxhcmdlIHN1Yi10cmVlXG4gICAgICAgIGNvbnN0IFtncmFuZFBhcmVudCwgLi4uX10gPSBbLi4ucGF0aFRvUGFyZW50XS5yZXZlcnNlKCk7XG4gICAgICAgIGNvbnN0IFtwYXJlbnRJbmRleCwgLi4uX19dID0gWy4uLnJlc3RdLnJldmVyc2UoKTtcbiAgICAgICAgY29uc3QgaXNTaWJsaW5nVmlzaWJsZSA9IHBhcmVudC5pc0NoaWxkVmlzaWJsZSgwKTtcbiAgICAgICAgLy8gZWl0aGVyIHdheSB3ZSBuZWVkIHRvIHJlbW92ZSB0aGUgc2libGluZyBmcm9tIGl0J3MgZXhpc3RpbmcgdHJlZVxuICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoMCwgc2l6aW5nKTtcbiAgICAgICAgLy8gbm90ZSB0aGUgc2l6ZXMgb2YgYWxsIG9mIHRoZSBncmFuZHBhcmVudHMgY2hpbGRyZW5cbiAgICAgICAgY29uc3Qgc2l6ZXMgPSBncmFuZFBhcmVudC5jaGlsZHJlbi5tYXAoKF9zaXplLCBpKSA9PiBncmFuZFBhcmVudC5nZXRDaGlsZFNpemUoaSkpO1xuICAgICAgICAvLyByZW1vdmUgdGhlIHBhcmVudCBmcm9tIHRoZSBncmFuZHBhcmVudCBzaW5jZSB3ZSBhcmUgbW92aW5nIHRoZSBzaWJsaW5nIHRvIHRha2UgdGhlIHBhcmVudHMgcGxhY2VcbiAgICAgICAgLy8gdGhpcyBwYXJlbnQgaXMgbm8gbG9uZ2VyIHVzZWQgYW5kIGNhbiBiZSBkaXNwb3NlZCBvZlxuICAgICAgICBncmFuZFBhcmVudC5yZW1vdmVDaGlsZChwYXJlbnRJbmRleCwgc2l6aW5nKS5kaXNwb3NlKCk7XG4gICAgICAgIGlmIChzaWJsaW5nIGluc3RhbmNlb2YgQnJhbmNoTm9kZSkge1xuICAgICAgICAgICAgLy8gcmVwbGFjZSB0aGUgcGFyZW50IHdpdGggdGhlIHNpYmxpbmdzIGNoaWxkcmVuXG4gICAgICAgICAgICBzaXplcy5zcGxpY2UocGFyZW50SW5kZXgsIDEsIC4uLnNpYmxpbmcuY2hpbGRyZW4ubWFwKChjKSA9PiBjLnNpemUpKTtcbiAgICAgICAgICAgIC8vIGFuZCBhZGQgdGhvc2Ugc2libGluZ3MgdG8gdGhlIGdyYW5kcGFyZW50XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNpYmxpbmcuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaGlsZCA9IHNpYmxpbmcuY2hpbGRyZW5baV07XG4gICAgICAgICAgICAgICAgZ3JhbmRQYXJlbnQuYWRkQ2hpbGQoY2hpbGQsIGNoaWxkLnNpemUsIHBhcmVudEluZGV4ICsgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIGNsZWFuIGRvd24gdGhlIGJyYW5jaCBub2RlIHNpbmNlIHdlIG5lZWQgdG8gZGlwb3NlIG9mIGl0IGFuZFxuICAgICAgICAgICAgICogd2hlbiAuZGlzcG9zZSgpIGl0IGNhbGxlZCBvbiBhIGJyYW5jaCBpdCB3aWxsIGRpc3Bvc2Ugb2YgYW55XG4gICAgICAgICAgICAgKiB2aWV3cyBpdCBpcyBob2xkaW5nIG9udG8uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHdoaWxlIChzaWJsaW5nLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBzaWJsaW5nLnJlbW92ZUNoaWxkKDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIGNyZWF0ZSBhIG5ldyBsZWFmIG5vZGUgYW5kIGFkZCB0aGF0IHRvIHRoZSBncmFuZHBhcmVudFxuICAgICAgICAgICAgY29uc3QgbmV3U2libGluZyA9IG5ldyBMZWFmTm9kZShzaWJsaW5nLnZpZXcsIG9ydGhvZ29uYWwoc2libGluZy5vcmllbnRhdGlvbiksIHNpYmxpbmcuc2l6ZSk7XG4gICAgICAgICAgICBjb25zdCBzaWJsaW5nU2l6aW5nID0gaXNTaWJsaW5nVmlzaWJsZVxuICAgICAgICAgICAgICAgID8gc2libGluZy5vcnRob2dvbmFsU2l6ZVxuICAgICAgICAgICAgICAgIDogU2l6aW5nLkludmlzaWJsZShzaWJsaW5nLm9ydGhvZ29uYWxTaXplKTtcbiAgICAgICAgICAgIGdyYW5kUGFyZW50LmFkZENoaWxkKG5ld1NpYmxpbmcsIHNpYmxpbmdTaXppbmcsIHBhcmVudEluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICAvLyB0aGUgY29udGFpbmluZyBub2RlIG9mIHRoZSBzaWJsaW5nIGlzIG5vIGxvbmdlciByZXF1aXJlZCBhbmQgY2FuIGJlIGRpc3Bvc2VkIG9mXG4gICAgICAgIHNpYmxpbmcuZGlzcG9zZSgpO1xuICAgICAgICAvLyByZXNpemUgZXZlcnl0aGluZ1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNpemVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBncmFuZFBhcmVudC5yZXNpemVDaGlsZChpLCBzaXplc1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5vZGVUb1JlbW92ZS52aWV3O1xuICAgIH1cbiAgICBsYXlvdXQod2lkdGgsIGhlaWdodCkge1xuICAgICAgICBjb25zdCBbc2l6ZSwgb3J0aG9nb25hbFNpemVdID0gdGhpcy5yb290Lm9yaWVudGF0aW9uID09PSBPcmllbnRhdGlvbi5IT1JJWk9OVEFMXG4gICAgICAgICAgICA/IFtoZWlnaHQsIHdpZHRoXVxuICAgICAgICAgICAgOiBbd2lkdGgsIGhlaWdodF07XG4gICAgICAgIHRoaXMucm9vdC5sYXlvdXQoc2l6ZSwgb3J0aG9nb25hbFNpemUpO1xuICAgIH1cbiAgICBnZXROb2RlKGxvY2F0aW9uLCBub2RlID0gdGhpcy5yb290LCBwYXRoID0gW10pIHtcbiAgICAgICAgaWYgKGxvY2F0aW9uLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIFtwYXRoLCBub2RlXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIShub2RlIGluc3RhbmNlb2YgQnJhbmNoTm9kZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBsb2NhdGlvbicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IFtpbmRleCwgLi4ucmVzdF0gPSBsb2NhdGlvbjtcbiAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSBub2RlLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGxvY2F0aW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2hpbGQgPSBub2RlLmNoaWxkcmVuW2luZGV4XTtcbiAgICAgICAgcGF0aC5wdXNoKG5vZGUpO1xuICAgICAgICByZXR1cm4gdGhpcy5nZXROb2RlKHJlc3QsIGNoaWxkLCBwYXRoKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBnZXRSZWxhdGl2ZUxvY2F0aW9uLCBnZXRHcmlkTG9jYXRpb24sIH0gZnJvbSAnLi9ncmlkdmlldyc7XG5pbXBvcnQgeyB0YWlsLCBzZXF1ZW5jZUVxdWFscyB9IGZyb20gJy4uL2FycmF5JztcbmltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUgfSBmcm9tICcuLi9saWZlY3ljbGUnO1xuaW1wb3J0IHsgQmFzZUdyaWQsIHRvVGFyZ2V0LCB9IGZyb20gJy4vYmFzZUNvbXBvbmVudEdyaWR2aWV3JztcbmltcG9ydCB7IEVtaXR0ZXIgfSBmcm9tICcuLi9ldmVudHMnO1xuZXhwb3J0IGNsYXNzIEdyaWR2aWV3Q29tcG9uZW50IGV4dGVuZHMgQmFzZUdyaWQge1xuICAgIGdldCBvcmllbnRhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3JpZHZpZXcub3JpZW50YXRpb247XG4gICAgfVxuICAgIHNldCBvcmllbnRhdGlvbih2YWx1ZSkge1xuICAgICAgICB0aGlzLmdyaWR2aWV3Lm9yaWVudGF0aW9uID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBvcHRpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3B0aW9ucztcbiAgICB9XG4gICAgZ2V0IGRlc2VyaWFsaXplcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rlc2VyaWFsaXplcjtcbiAgICB9XG4gICAgc2V0IGRlc2VyaWFsaXplcih2YWx1ZSkge1xuICAgICAgICB0aGlzLl9kZXNlcmlhbGl6ZXIgPSB2YWx1ZTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgc3VwZXIoY29udGFpbmVyLCB7XG4gICAgICAgICAgICBwcm9wb3J0aW9uYWxMYXlvdXQ6IChfYSA9IG9wdGlvbnMucHJvcG9ydGlvbmFsTGF5b3V0KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB0cnVlLFxuICAgICAgICAgICAgb3JpZW50YXRpb246IG9wdGlvbnMub3JpZW50YXRpb24sXG4gICAgICAgICAgICBzdHlsZXM6IG9wdGlvbnMuaGlkZUJvcmRlcnNcbiAgICAgICAgICAgICAgICA/IHsgc2VwYXJhdG9yQm9yZGVyOiAndHJhbnNwYXJlbnQnIH1cbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGRpc2FibGVBdXRvUmVzaXppbmc6IG9wdGlvbnMuZGlzYWJsZUF1dG9SZXNpemluZyxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogb3B0aW9ucy5jbGFzc05hbWUsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9vbkRpZExheW91dGZyb21KU09OID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZExheW91dEZyb21KU09OID0gdGhpcy5fb25EaWRMYXlvdXRmcm9tSlNPTi5ldmVudDtcbiAgICAgICAgdGhpcy5fb25EaWRSZW1vdmVHcm91cCA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRSZW1vdmVHcm91cCA9IHRoaXMuX29uRGlkUmVtb3ZlR3JvdXAuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uRGlkQWRkR3JvdXAgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRGlkQWRkR3JvdXAgPSB0aGlzLl9vbkRpZEFkZEdyb3VwLmV2ZW50O1xuICAgICAgICB0aGlzLl9vbkRpZEFjdGl2ZUdyb3VwQ2hhbmdlID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZEFjdGl2ZUdyb3VwQ2hhbmdlID0gdGhpcy5fb25EaWRBY3RpdmVHcm91cENoYW5nZS5ldmVudDtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuYWRkRGlzcG9zYWJsZXModGhpcy5fb25EaWRBZGRHcm91cCwgdGhpcy5fb25EaWRSZW1vdmVHcm91cCwgdGhpcy5fb25EaWRBY3RpdmVHcm91cENoYW5nZSwgdGhpcy5vbkRpZEFkZCgoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX29uRGlkQWRkR3JvdXAuZmlyZShldmVudCk7XG4gICAgICAgIH0pLCB0aGlzLm9uRGlkUmVtb3ZlKChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25EaWRSZW1vdmVHcm91cC5maXJlKGV2ZW50KTtcbiAgICAgICAgfSksIHRoaXMub25EaWRBY3RpdmVDaGFuZ2UoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9vbkRpZEFjdGl2ZUdyb3VwQ2hhbmdlLmZpcmUoZXZlbnQpO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIHVwZGF0ZU9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICBzdXBlci51cGRhdGVPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBoYXNPcmllbnRhdGlvbkNoYW5nZWQgPSB0eXBlb2Ygb3B0aW9ucy5vcmllbnRhdGlvbiA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgIHRoaXMuZ3JpZHZpZXcub3JpZW50YXRpb24gIT09IG9wdGlvbnMub3JpZW50YXRpb247XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHRoaXMub3B0aW9ucyksIG9wdGlvbnMpO1xuICAgICAgICBpZiAoaGFzT3JpZW50YXRpb25DaGFuZ2VkKSB7XG4gICAgICAgICAgICB0aGlzLmdyaWR2aWV3Lm9yaWVudGF0aW9uID0gb3B0aW9ucy5vcmllbnRhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxheW91dCh0aGlzLmdyaWR2aWV3LndpZHRoLCB0aGlzLmdyaWR2aWV3LmhlaWdodCwgdHJ1ZSk7XG4gICAgfVxuICAgIHJlbW92ZVBhbmVsKHBhbmVsKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlR3JvdXAocGFuZWwpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXJpYWxpemUgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIGxheW91dFxuICAgICAqXG4gICAgICogQHJldHVybnMgQSBKU09OIHJlc3ByZXNlbnRhdGlvbiBvZiB0aGUgbGF5b3V0XG4gICAgICovXG4gICAgdG9KU09OKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmdyaWR2aWV3LnNlcmlhbGl6ZSgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZ3JpZDogZGF0YSxcbiAgICAgICAgICAgIGFjdGl2ZVBhbmVsOiAoX2EgPSB0aGlzLmFjdGl2ZUdyb3VwKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaWQsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHNldFZpc2libGUocGFuZWwsIHZpc2libGUpIHtcbiAgICAgICAgdGhpcy5ncmlkdmlldy5zZXRWaWV3VmlzaWJsZShnZXRHcmlkTG9jYXRpb24ocGFuZWwuZWxlbWVudCksIHZpc2libGUpO1xuICAgIH1cbiAgICBzZXRBY3RpdmUocGFuZWwpIHtcbiAgICAgICAgdGhpcy5fZ3JvdXBzLmZvckVhY2goKHZhbHVlLCBfa2V5KSA9PiB7XG4gICAgICAgICAgICB2YWx1ZS52YWx1ZS5zZXRBY3RpdmUocGFuZWwgPT09IHZhbHVlLnZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZvY3VzKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIChfYSA9IHRoaXMuYWN0aXZlR3JvdXApID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5mb2N1cygpO1xuICAgIH1cbiAgICBmcm9tSlNPTihzZXJpYWxpemVkR3JpZHZpZXcpIHtcbiAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICBjb25zdCB7IGdyaWQsIGFjdGl2ZVBhbmVsIH0gPSBzZXJpYWxpemVkR3JpZHZpZXc7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBxdWV1ZSA9IFtdO1xuICAgICAgICAgICAgLy8gdGFrZSBub3RlIG9mIHRoZSBleGlzdGluZyBkaW1lbnNpb25zXG4gICAgICAgICAgICBjb25zdCB3aWR0aCA9IHRoaXMud2lkdGg7XG4gICAgICAgICAgICBjb25zdCBoZWlnaHQgPSB0aGlzLmhlaWdodDtcbiAgICAgICAgICAgIHRoaXMuZ3JpZHZpZXcuZGVzZXJpYWxpemUoZ3JpZCwge1xuICAgICAgICAgICAgICAgIGZyb21KU09OOiAobm9kZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGRhdGEgfSA9IG5vZGU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZpZXcgPSB0aGlzLm9wdGlvbnMuY3JlYXRlQ29tcG9uZW50KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBkYXRhLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogZGF0YS5jb21wb25lbnQsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBxdWV1ZS5wdXNoKCgpID0+IHZpZXcuaW5pdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IGRhdGEucGFyYW1zLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWluaW11bVdpZHRoOiBkYXRhLm1pbmltdW1XaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heGltdW1XaWR0aDogZGF0YS5tYXhpbXVtV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5pbXVtSGVpZ2h0OiBkYXRhLm1pbmltdW1IZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhpbXVtSGVpZ2h0OiBkYXRhLm1heGltdW1IZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmlvcml0eTogZGF0YS5wcmlvcml0eSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNuYXA6ICEhZGF0YS5zbmFwLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzb3I6IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1Zpc2libGU6IG5vZGUudmlzaWJsZSxcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9vbkRpZEFkZEdyb3VwLmZpcmUodmlldyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJQYW5lbCh2aWV3KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZpZXc7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5sYXlvdXQod2lkdGgsIGhlaWdodCwgdHJ1ZSk7XG4gICAgICAgICAgICBxdWV1ZS5mb3JFYWNoKChmKSA9PiBmKCkpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBhY3RpdmVQYW5lbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYW5lbCA9IHRoaXMuZ2V0UGFuZWwoYWN0aXZlUGFuZWwpO1xuICAgICAgICAgICAgICAgIGlmIChwYW5lbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvU2V0R3JvdXBBY3RpdmUocGFuZWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRvIHJlbW92ZSBhIGdyb3VwIHdlIGNhbm5vdCBjYWxsIHRoaXMucmVtb3ZlR3JvdXAoLi4uKSBzaW5jZSB0aGlzIG1ha2VzIGFzc3VtcHRpb25zIGFib3V0XG4gICAgICAgICAgICAgKiB0aGUgdW5kZXJseWluZyBIVE1MRWxlbWVudCBleGlzdGluZyBpbiB0aGUgR3JpZHZpZXcuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZvciAoY29uc3QgZ3JvdXAgb2YgdGhpcy5ncm91cHMpIHtcbiAgICAgICAgICAgICAgICBncm91cC5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZ3JvdXBzLmRlbGV0ZShncm91cC5pZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fb25EaWRSZW1vdmVHcm91cC5maXJlKGdyb3VwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGZpcmVzIGNsZWFuLXVwIGV2ZW50cyBhbmQgY2xlYXJzIHRoZSB1bmRlcmx5aW5nIEhUTUwgZ3JpZHZpZXcuXG4gICAgICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIGV2ZW4gdGhvdWdoIHdlIGhhdmUgY2xlYW5lZC11cCB3ZSBzdGlsbCB3YW50IHRvIGluZm9ybSB0aGUgY2FsbGVyIG9mIHRoZWlyIGVycm9yXG4gICAgICAgICAgICAgKiBhbmQgd2UnbGwgZG8gdGhpcyB0aHJvdWdoIHJlLXRocm93aW5nIHRoZSBvcmlnaW5hbCBlcnJvciBzaW5jZSBhZnRlcmFsbCB5b3Ugd291bGRcbiAgICAgICAgICAgICAqIGV4cGVjdCB0cnlpbmcgdG8gbG9hZCBhIGNvcnJ1cHRlZCBsYXlvdXQgdG8gcmVzdWx0IGluIGFuIGVycm9yIGFuZCBub3Qgc2lsZW50bHkgZmFpbC4uLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fb25EaWRMYXlvdXRmcm9tSlNPTi5maXJlKCk7XG4gICAgfVxuICAgIGNsZWFyKCkge1xuICAgICAgICBjb25zdCBoYXNBY3RpdmVHcm91cCA9IHRoaXMuYWN0aXZlR3JvdXA7XG4gICAgICAgIGNvbnN0IGdyb3VwcyA9IEFycmF5LmZyb20odGhpcy5fZ3JvdXBzLnZhbHVlcygpKTsgLy8gcmVhc3NpZ24gc2luY2UgZ3JvdXAgcGFuZWxzIHdpbGwgbXV0YXRlXG4gICAgICAgIGZvciAoY29uc3QgZ3JvdXAgb2YgZ3JvdXBzKSB7XG4gICAgICAgICAgICBncm91cC5kaXNwb3NhYmxlLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIHRoaXMuZG9SZW1vdmVHcm91cChncm91cC52YWx1ZSwgeyBza2lwQWN0aXZlOiB0cnVlIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNBY3RpdmVHcm91cCkge1xuICAgICAgICAgICAgdGhpcy5kb1NldEdyb3VwQWN0aXZlKHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ncmlkdmlldy5jbGVhcigpO1xuICAgIH1cbiAgICBtb3ZlUGFuZWwocGFuZWwsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBsZXQgcmVsYXRpdmVMb2NhdGlvbjtcbiAgICAgICAgY29uc3QgcmVtb3ZlZFBhbmVsID0gdGhpcy5ncmlkdmlldy5yZW1vdmUocGFuZWwpO1xuICAgICAgICBjb25zdCByZWZlcmVuY2VHcm91cCA9IChfYSA9IHRoaXMuX2dyb3Vwcy5nZXQob3B0aW9ucy5yZWZlcmVuY2UpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudmFsdWU7XG4gICAgICAgIGlmICghcmVmZXJlbmNlR3JvdXApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgcmVmZXJlbmNlIGdyb3VwICR7b3B0aW9ucy5yZWZlcmVuY2V9IGRvZXMgbm90IGV4aXN0YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdG9UYXJnZXQob3B0aW9ucy5kaXJlY3Rpb24pO1xuICAgICAgICBpZiAodGFyZ2V0ID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3RhcmdldH0gbm90IHN1cHBvcnRlZCBhcyBhbiBvcHRpb25gKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2F0aW9uID0gZ2V0R3JpZExvY2F0aW9uKHJlZmVyZW5jZUdyb3VwLmVsZW1lbnQpO1xuICAgICAgICAgICAgcmVsYXRpdmVMb2NhdGlvbiA9IGdldFJlbGF0aXZlTG9jYXRpb24odGhpcy5ncmlkdmlldy5vcmllbnRhdGlvbiwgbG9jYXRpb24sIHRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kb0FkZEdyb3VwKHJlbW92ZWRQYW5lbCwgcmVsYXRpdmVMb2NhdGlvbiwgb3B0aW9ucy5zaXplKTtcbiAgICB9XG4gICAgYWRkUGFuZWwob3B0aW9ucykge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgICAgIGxldCByZWxhdGl2ZUxvY2F0aW9uID0gKF9hID0gb3B0aW9ucy5sb2NhdGlvbikgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogWzBdO1xuICAgICAgICBpZiAoKF9iID0gb3B0aW9ucy5wb3NpdGlvbikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnJlZmVyZW5jZVBhbmVsKSB7XG4gICAgICAgICAgICBjb25zdCByZWZlcmVuY2VHcm91cCA9IChfYyA9IHRoaXMuX2dyb3Vwcy5nZXQob3B0aW9ucy5wb3NpdGlvbi5yZWZlcmVuY2VQYW5lbCkpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy52YWx1ZTtcbiAgICAgICAgICAgIGlmICghcmVmZXJlbmNlR3JvdXApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHJlZmVyZW5jZSBncm91cCAke29wdGlvbnMucG9zaXRpb24ucmVmZXJlbmNlUGFuZWx9IGRvZXMgbm90IGV4aXN0YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSB0b1RhcmdldChvcHRpb25zLnBvc2l0aW9uLmRpcmVjdGlvbik7XG4gICAgICAgICAgICBpZiAodGFyZ2V0ID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHt0YXJnZXR9IG5vdCBzdXBwb3J0ZWQgYXMgYW4gb3B0aW9uYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9IGdldEdyaWRMb2NhdGlvbihyZWZlcmVuY2VHcm91cC5lbGVtZW50KTtcbiAgICAgICAgICAgICAgICByZWxhdGl2ZUxvY2F0aW9uID0gZ2V0UmVsYXRpdmVMb2NhdGlvbih0aGlzLmdyaWR2aWV3Lm9yaWVudGF0aW9uLCBsb2NhdGlvbiwgdGFyZ2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2aWV3ID0gdGhpcy5vcHRpb25zLmNyZWF0ZUNvbXBvbmVudCh7XG4gICAgICAgICAgICBpZDogb3B0aW9ucy5pZCxcbiAgICAgICAgICAgIG5hbWU6IG9wdGlvbnMuY29tcG9uZW50LFxuICAgICAgICB9KTtcbiAgICAgICAgdmlldy5pbml0KHtcbiAgICAgICAgICAgIHBhcmFtczogKF9kID0gb3B0aW9ucy5wYXJhbXMpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IHt9LFxuICAgICAgICAgICAgbWluaW11bVdpZHRoOiBvcHRpb25zLm1pbmltdW1XaWR0aCxcbiAgICAgICAgICAgIG1heGltdW1XaWR0aDogb3B0aW9ucy5tYXhpbXVtV2lkdGgsXG4gICAgICAgICAgICBtaW5pbXVtSGVpZ2h0OiBvcHRpb25zLm1pbmltdW1IZWlnaHQsXG4gICAgICAgICAgICBtYXhpbXVtSGVpZ2h0OiBvcHRpb25zLm1heGltdW1IZWlnaHQsXG4gICAgICAgICAgICBwcmlvcml0eTogb3B0aW9ucy5wcmlvcml0eSxcbiAgICAgICAgICAgIHNuYXA6ICEhb3B0aW9ucy5zbmFwLFxuICAgICAgICAgICAgYWNjZXNzb3I6IHRoaXMsXG4gICAgICAgICAgICBpc1Zpc2libGU6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyUGFuZWwodmlldyk7XG4gICAgICAgIHRoaXMuZG9BZGRHcm91cCh2aWV3LCByZWxhdGl2ZUxvY2F0aW9uLCBvcHRpb25zLnNpemUpO1xuICAgICAgICB0aGlzLmRvU2V0R3JvdXBBY3RpdmUodmlldyk7XG4gICAgICAgIHJldHVybiB2aWV3O1xuICAgIH1cbiAgICByZWdpc3RlclBhbmVsKHBhbmVsKSB7XG4gICAgICAgIGNvbnN0IGRpc3Bvc2FibGUgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZShwYW5lbC5hcGkub25EaWRGb2N1c0NoYW5nZSgoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmICghZXZlbnQuaXNGb2N1c2VkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fZ3JvdXBzLmZvckVhY2goKGdyb3VwSXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwID0gZ3JvdXBJdGVtLnZhbHVlO1xuICAgICAgICAgICAgICAgIGlmIChncm91cCAhPT0gcGFuZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXAuc2V0QWN0aXZlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwLnNldEFjdGl2ZSh0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSkpO1xuICAgICAgICB0aGlzLl9ncm91cHMuc2V0KHBhbmVsLmlkLCB7XG4gICAgICAgICAgICB2YWx1ZTogcGFuZWwsXG4gICAgICAgICAgICBkaXNwb3NhYmxlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbW92ZUdyb3VwKHJlZmVyZW5jZUdyb3VwLCBncm91cElkLCB0YXJnZXQpIHtcbiAgICAgICAgY29uc3Qgc291cmNlR3JvdXAgPSB0aGlzLmdldFBhbmVsKGdyb3VwSWQpO1xuICAgICAgICBpZiAoIXNvdXJjZUdyb3VwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgb3BlcmF0aW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVmZXJlbmNlTG9jYXRpb24gPSBnZXRHcmlkTG9jYXRpb24ocmVmZXJlbmNlR3JvdXAuZWxlbWVudCk7XG4gICAgICAgIGNvbnN0IHRhcmdldExvY2F0aW9uID0gZ2V0UmVsYXRpdmVMb2NhdGlvbih0aGlzLmdyaWR2aWV3Lm9yaWVudGF0aW9uLCByZWZlcmVuY2VMb2NhdGlvbiwgdGFyZ2V0KTtcbiAgICAgICAgY29uc3QgW3RhcmdldFBhcmVudExvY2F0aW9uLCB0b10gPSB0YWlsKHRhcmdldExvY2F0aW9uKTtcbiAgICAgICAgY29uc3Qgc291cmNlTG9jYXRpb24gPSBnZXRHcmlkTG9jYXRpb24oc291cmNlR3JvdXAuZWxlbWVudCk7XG4gICAgICAgIGNvbnN0IFtzb3VyY2VQYXJlbnRMb2NhdGlvbiwgZnJvbV0gPSB0YWlsKHNvdXJjZUxvY2F0aW9uKTtcbiAgICAgICAgaWYgKHNlcXVlbmNlRXF1YWxzKHNvdXJjZVBhcmVudExvY2F0aW9uLCB0YXJnZXRQYXJlbnRMb2NhdGlvbikpIHtcbiAgICAgICAgICAgIC8vIHNwZWNpYWwgY2FzZSB3aGVuICdzd2FwcGluZycgdHdvIHZpZXdzIHdpdGhpbiBzYW1lIGdyaWQgbG9jYXRpb25cbiAgICAgICAgICAgIC8vIGlmIGEgZ3JvdXAgaGFzIG9uZSB0YWIgLSB3ZSBhcmUgZXNzZW50aWFsbHkgbW92aW5nIHRoZSAnZ3JvdXAnXG4gICAgICAgICAgICAvLyB3aGljaCBpcyBlcXVpdmFsZW50IHRvIHN3YXBwaW5nIHR3byB2aWV3cyBpbiB0aGlzIGNhc2VcbiAgICAgICAgICAgIHRoaXMuZ3JpZHZpZXcubW92ZVZpZXcoc291cmNlUGFyZW50TG9jYXRpb24sIGZyb20sIHRvKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBzb3VyY2UgZ3JvdXAgd2lsbCBiZWNvbWUgZW1wdHkgc28gZGVsZXRlIHRoZSBncm91cFxuICAgICAgICBjb25zdCB0YXJnZXRHcm91cCA9IHRoaXMuZG9SZW1vdmVHcm91cChzb3VyY2VHcm91cCwge1xuICAgICAgICAgICAgc2tpcEFjdGl2ZTogdHJ1ZSxcbiAgICAgICAgICAgIHNraXBEaXNwb3NlOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgICAgLy8gYWZ0ZXIgZGVsZXRpbmcgdGhlIGdyb3VwIHdlIG5lZWQgdG8gcmUtZXZhdWxhdGUgdGhlIHJlZiBsb2NhdGlvblxuICAgICAgICBjb25zdCB1cGRhdGVkUmVmZXJlbmNlTG9jYXRpb24gPSBnZXRHcmlkTG9jYXRpb24ocmVmZXJlbmNlR3JvdXAuZWxlbWVudCk7XG4gICAgICAgIGNvbnN0IGxvY2F0aW9uID0gZ2V0UmVsYXRpdmVMb2NhdGlvbih0aGlzLmdyaWR2aWV3Lm9yaWVudGF0aW9uLCB1cGRhdGVkUmVmZXJlbmNlTG9jYXRpb24sIHRhcmdldCk7XG4gICAgICAgIHRoaXMuZG9BZGRHcm91cCh0YXJnZXRHcm91cCwgbG9jYXRpb24pO1xuICAgIH1cbiAgICByZW1vdmVHcm91cChncm91cCkge1xuICAgICAgICBzdXBlci5yZW1vdmVHcm91cChncm91cCk7XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHN1cGVyLmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5fb25EaWRMYXlvdXRmcm9tSlNPTi5kaXNwb3NlKCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQmFzZVBhbmVsVmlldywgfSBmcm9tICcuL2Jhc2VQYW5lbFZpZXcnO1xuaW1wb3J0IHsgR3JpZHZpZXdQYW5lbEFwaUltcGwsIH0gZnJvbSAnLi4vYXBpL2dyaWR2aWV3UGFuZWxBcGknO1xuaW1wb3J0IHsgRW1pdHRlciB9IGZyb20gJy4uL2V2ZW50cyc7XG5leHBvcnQgY2xhc3MgR3JpZHZpZXdQYW5lbCBleHRlbmRzIEJhc2VQYW5lbFZpZXcge1xuICAgIGdldCBwcmlvcml0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaW9yaXR5O1xuICAgIH1cbiAgICBnZXQgc25hcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NuYXA7XG4gICAgfVxuICAgIGdldCBtaW5pbXVtV2lkdGgoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBkZWZlciB0byBwcm90ZWN0ZWQgZnVuY3Rpb24gdG8gYWxsb3cgc3ViY2xhc3NlcyB0byBvdmVycmlkZSBlYXNpbHkuXG4gICAgICAgICAqIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzMzOFxuICAgICAgICAgKi9cbiAgICAgICAgcmV0dXJuIHRoaXMuX19taW5pbXVtV2lkdGgoKTtcbiAgICB9XG4gICAgZ2V0IG1pbmltdW1IZWlnaHQoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBkZWZlciB0byBwcm90ZWN0ZWQgZnVuY3Rpb24gdG8gYWxsb3cgc3ViY2xhc3NlcyB0byBvdmVycmlkZSBlYXNpbHkuXG4gICAgICAgICAqIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzMzOFxuICAgICAgICAgKi9cbiAgICAgICAgcmV0dXJuIHRoaXMuX19taW5pbXVtSGVpZ2h0KCk7XG4gICAgfVxuICAgIGdldCBtYXhpbXVtSGVpZ2h0KCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogZGVmZXIgdG8gcHJvdGVjdGVkIGZ1bmN0aW9uIHRvIGFsbG93IHN1YmNsYXNzZXMgdG8gb3ZlcnJpZGUgZWFzaWx5LlxuICAgICAgICAgKiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy8zMzhcbiAgICAgICAgICovXG4gICAgICAgIHJldHVybiB0aGlzLl9fbWF4aW11bUhlaWdodCgpO1xuICAgIH1cbiAgICBnZXQgbWF4aW11bVdpZHRoKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogZGVmZXIgdG8gcHJvdGVjdGVkIGZ1bmN0aW9uIHRvIGFsbG93IHN1YmNsYXNzZXMgdG8gb3ZlcnJpZGUgZWFzaWx5LlxuICAgICAgICAgKiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy8zMzhcbiAgICAgICAgICovXG4gICAgICAgIHJldHVybiB0aGlzLl9fbWF4aW11bVdpZHRoKCk7XG4gICAgfVxuICAgIF9fbWluaW11bVdpZHRoKCkge1xuICAgICAgICBjb25zdCB3aWR0aCA9IHR5cGVvZiB0aGlzLl9taW5pbXVtV2lkdGggPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgID8gdGhpcy5fbWluaW11bVdpZHRoKClcbiAgICAgICAgICAgIDogdGhpcy5fbWluaW11bVdpZHRoO1xuICAgICAgICBpZiAod2lkdGggIT09IHRoaXMuX2V2YWx1YXRlZE1pbmltdW1XaWR0aCkge1xuICAgICAgICAgICAgdGhpcy5fZXZhbHVhdGVkTWluaW11bVdpZHRoID0gd2lkdGg7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUNvbnN0cmFpbnRzKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdpZHRoO1xuICAgIH1cbiAgICBfX21heGltdW1XaWR0aCgpIHtcbiAgICAgICAgY29uc3Qgd2lkdGggPSB0eXBlb2YgdGhpcy5fbWF4aW11bVdpZHRoID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICA/IHRoaXMuX21heGltdW1XaWR0aCgpXG4gICAgICAgICAgICA6IHRoaXMuX21heGltdW1XaWR0aDtcbiAgICAgICAgaWYgKHdpZHRoICE9PSB0aGlzLl9ldmFsdWF0ZWRNYXhpbXVtV2lkdGgpIHtcbiAgICAgICAgICAgIHRoaXMuX2V2YWx1YXRlZE1heGltdW1XaWR0aCA9IHdpZHRoO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVDb25zdHJhaW50cygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3aWR0aDtcbiAgICB9XG4gICAgX19taW5pbXVtSGVpZ2h0KCkge1xuICAgICAgICBjb25zdCBoZWlnaHQgPSB0eXBlb2YgdGhpcy5fbWluaW11bUhlaWdodCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgPyB0aGlzLl9taW5pbXVtSGVpZ2h0KClcbiAgICAgICAgICAgIDogdGhpcy5fbWluaW11bUhlaWdodDtcbiAgICAgICAgaWYgKGhlaWdodCAhPT0gdGhpcy5fZXZhbHVhdGVkTWluaW11bUhlaWdodCkge1xuICAgICAgICAgICAgdGhpcy5fZXZhbHVhdGVkTWluaW11bUhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQ29uc3RyYWludHMoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGVpZ2h0O1xuICAgIH1cbiAgICBfX21heGltdW1IZWlnaHQoKSB7XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IHR5cGVvZiB0aGlzLl9tYXhpbXVtSGVpZ2h0ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICA/IHRoaXMuX21heGltdW1IZWlnaHQoKVxuICAgICAgICAgICAgOiB0aGlzLl9tYXhpbXVtSGVpZ2h0O1xuICAgICAgICBpZiAoaGVpZ2h0ICE9PSB0aGlzLl9ldmFsdWF0ZWRNYXhpbXVtSGVpZ2h0KSB7XG4gICAgICAgICAgICB0aGlzLl9ldmFsdWF0ZWRNYXhpbXVtSGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICAgICAgdGhpcy51cGRhdGVDb25zdHJhaW50cygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoZWlnaHQ7XG4gICAgfVxuICAgIGdldCBpc0FjdGl2ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBpLmlzQWN0aXZlO1xuICAgIH1cbiAgICBnZXQgaXNWaXNpYmxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcGkuaXNWaXNpYmxlO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihpZCwgY29tcG9uZW50LCBvcHRpb25zLCBhcGkpIHtcbiAgICAgICAgc3VwZXIoaWQsIGNvbXBvbmVudCwgYXBpICE9PSBudWxsICYmIGFwaSAhPT0gdm9pZCAwID8gYXBpIDogbmV3IEdyaWR2aWV3UGFuZWxBcGlJbXBsKGlkLCBjb21wb25lbnQpKTtcbiAgICAgICAgdGhpcy5fZXZhbHVhdGVkTWluaW11bVdpZHRoID0gMDtcbiAgICAgICAgdGhpcy5fZXZhbHVhdGVkTWF4aW11bVdpZHRoID0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7XG4gICAgICAgIHRoaXMuX2V2YWx1YXRlZE1pbmltdW1IZWlnaHQgPSAwO1xuICAgICAgICB0aGlzLl9ldmFsdWF0ZWRNYXhpbXVtSGVpZ2h0ID0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7XG4gICAgICAgIHRoaXMuX21pbmltdW1XaWR0aCA9IDA7XG4gICAgICAgIHRoaXMuX21pbmltdW1IZWlnaHQgPSAwO1xuICAgICAgICB0aGlzLl9tYXhpbXVtV2lkdGggPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcbiAgICAgICAgdGhpcy5fbWF4aW11bUhlaWdodCA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSO1xuICAgICAgICB0aGlzLl9zbmFwID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX29uRGlkQ2hhbmdlID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZENoYW5nZSA9IHRoaXMuX29uRGlkQ2hhbmdlLmV2ZW50O1xuICAgICAgICBpZiAodHlwZW9mIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubWluaW11bVdpZHRoKSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHRoaXMuX21pbmltdW1XaWR0aCA9IG9wdGlvbnMubWluaW11bVdpZHRoO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5tYXhpbXVtV2lkdGgpID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgdGhpcy5fbWF4aW11bVdpZHRoID0gb3B0aW9ucy5tYXhpbXVtV2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm1pbmltdW1IZWlnaHQpID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgdGhpcy5fbWluaW11bUhlaWdodCA9IG9wdGlvbnMubWluaW11bUhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubWF4aW11bUhlaWdodCkgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aGlzLl9tYXhpbXVtSGVpZ2h0ID0gb3B0aW9ucy5tYXhpbXVtSGVpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYXBpLmluaXRpYWxpemUodGhpcyk7IC8vIFRPRE86IHJlcXVpcmVkIHRvIGJ5LXBhc3MgJ3N1cGVyIGJlZm9yZSB0aGlzJyByZXF1aXJlbWVudFxuICAgICAgICB0aGlzLmFkZERpc3Bvc2FibGVzKHRoaXMuYXBpLm9uV2lsbFZpc2liaWxpdHlDaGFuZ2UoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IGlzVmlzaWJsZSB9ID0gZXZlbnQ7XG4gICAgICAgICAgICBjb25zdCB7IGFjY2Vzc29yIH0gPSB0aGlzLl9wYXJhbXM7XG4gICAgICAgICAgICBhY2Nlc3Nvci5zZXRWaXNpYmxlKHRoaXMsIGlzVmlzaWJsZSk7XG4gICAgICAgIH0pLCB0aGlzLmFwaS5vbkFjdGl2ZUNoYW5nZSgoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IGFjY2Vzc29yIH0gPSB0aGlzLl9wYXJhbXM7XG4gICAgICAgICAgICBhY2Nlc3Nvci5kb1NldEdyb3VwQWN0aXZlKHRoaXMpO1xuICAgICAgICB9KSwgdGhpcy5hcGkub25EaWRDb25zdHJhaW50c0NoYW5nZUludGVybmFsKChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBldmVudC5taW5pbXVtV2lkdGggPT09ICdudW1iZXInIHx8XG4gICAgICAgICAgICAgICAgdHlwZW9mIGV2ZW50Lm1pbmltdW1XaWR0aCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHRoaXMuX21pbmltdW1XaWR0aCA9IGV2ZW50Lm1pbmltdW1XaWR0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgZXZlbnQubWluaW11bUhlaWdodCA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgICAgICAgICB0eXBlb2YgZXZlbnQubWluaW11bUhlaWdodCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHRoaXMuX21pbmltdW1IZWlnaHQgPSBldmVudC5taW5pbXVtSGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBldmVudC5tYXhpbXVtV2lkdGggPT09ICdudW1iZXInIHx8XG4gICAgICAgICAgICAgICAgdHlwZW9mIGV2ZW50Lm1heGltdW1XaWR0aCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHRoaXMuX21heGltdW1XaWR0aCA9IGV2ZW50Lm1heGltdW1XaWR0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgZXZlbnQubWF4aW11bUhlaWdodCA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgICAgICAgICB0eXBlb2YgZXZlbnQubWF4aW11bUhlaWdodCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHRoaXMuX21heGltdW1IZWlnaHQgPSBldmVudC5tYXhpbXVtSGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSwgdGhpcy5hcGkub25EaWRTaXplQ2hhbmdlKChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25EaWRDaGFuZ2UuZmlyZSh7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBldmVudC5oZWlnaHQsXG4gICAgICAgICAgICAgICAgd2lkdGg6IGV2ZW50LndpZHRoLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pLCB0aGlzLl9vbkRpZENoYW5nZSk7XG4gICAgfVxuICAgIHNldFZpc2libGUoaXNWaXNpYmxlKSB7XG4gICAgICAgIHRoaXMuYXBpLl9vbkRpZFZpc2liaWxpdHlDaGFuZ2UuZmlyZSh7IGlzVmlzaWJsZSB9KTtcbiAgICB9XG4gICAgc2V0QWN0aXZlKGlzQWN0aXZlKSB7XG4gICAgICAgIHRoaXMuYXBpLl9vbkRpZEFjdGl2ZUNoYW5nZS5maXJlKHsgaXNBY3RpdmUgfSk7XG4gICAgfVxuICAgIGluaXQocGFyYW1ldGVycykge1xuICAgICAgICBpZiAocGFyYW1ldGVycy5tYXhpbXVtSGVpZ2h0KSB7XG4gICAgICAgICAgICB0aGlzLl9tYXhpbXVtSGVpZ2h0ID0gcGFyYW1ldGVycy5tYXhpbXVtSGVpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJhbWV0ZXJzLm1pbmltdW1IZWlnaHQpIHtcbiAgICAgICAgICAgIHRoaXMuX21pbmltdW1IZWlnaHQgPSBwYXJhbWV0ZXJzLm1pbmltdW1IZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmFtZXRlcnMubWF4aW11bVdpZHRoKSB7XG4gICAgICAgICAgICB0aGlzLl9tYXhpbXVtV2lkdGggPSBwYXJhbWV0ZXJzLm1heGltdW1XaWR0aDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyYW1ldGVycy5taW5pbXVtV2lkdGgpIHtcbiAgICAgICAgICAgIHRoaXMuX21pbmltdW1XaWR0aCA9IHBhcmFtZXRlcnMubWluaW11bVdpZHRoO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ByaW9yaXR5ID0gcGFyYW1ldGVycy5wcmlvcml0eTtcbiAgICAgICAgdGhpcy5fc25hcCA9ICEhcGFyYW1ldGVycy5zbmFwO1xuICAgICAgICBzdXBlci5pbml0KHBhcmFtZXRlcnMpO1xuICAgICAgICBpZiAodHlwZW9mIHBhcmFtZXRlcnMuaXNWaXNpYmxlID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0VmlzaWJsZShwYXJhbWV0ZXJzLmlzVmlzaWJsZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlQ29uc3RyYWludHMoKSB7XG4gICAgICAgIHRoaXMuYXBpLl9vbkRpZENvbnN0cmFpbnRzQ2hhbmdlLmZpcmUoe1xuICAgICAgICAgICAgbWluaW11bVdpZHRoOiB0aGlzLl9ldmFsdWF0ZWRNaW5pbXVtV2lkdGgsXG4gICAgICAgICAgICBtYXhpbXVtV2lkdGg6IHRoaXMuX2V2YWx1YXRlZE1heGltdW1XaWR0aCxcbiAgICAgICAgICAgIG1pbmltdW1IZWlnaHQ6IHRoaXMuX2V2YWx1YXRlZE1pbmltdW1IZWlnaHQsXG4gICAgICAgICAgICBtYXhpbXVtSGVpZ2h0OiB0aGlzLl9ldmFsdWF0ZWRNYXhpbXVtSGVpZ2h0LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHN1cGVyLnRvSlNPTigpO1xuICAgICAgICBjb25zdCBtYXhpbXVtID0gKHZhbHVlKSA9PiB2YWx1ZSA9PT0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgPyB1bmRlZmluZWQgOiB2YWx1ZTtcbiAgICAgICAgY29uc3QgbWluaW11bSA9ICh2YWx1ZSkgPT4gKHZhbHVlIDw9IDAgPyB1bmRlZmluZWQgOiB2YWx1ZSk7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHN0YXRlKSwgeyBtaW5pbXVtSGVpZ2h0OiBtaW5pbXVtKHRoaXMubWluaW11bUhlaWdodCksIG1heGltdW1IZWlnaHQ6IG1heGltdW0odGhpcy5tYXhpbXVtSGVpZ2h0KSwgbWluaW11bVdpZHRoOiBtaW5pbXVtKHRoaXMubWluaW11bVdpZHRoKSwgbWF4aW11bVdpZHRoOiBtYXhpbXVtKHRoaXMubWF4aW11bVdpZHRoKSwgc25hcDogdGhpcy5zbmFwLCBwcmlvcml0eTogdGhpcy5wcmlvcml0eSB9KTtcbiAgICB9XG59XG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQWNjcmVkaXRhdGlvbjogVGhpcyBmaWxlIGlzIGxhcmdseSBiYXNlZCB1cG9uIHRoZSBNSVQgbGljZW5jZWQgVlNDb2RlIHNvdXJjZWNvZGUgZm91bmQgYXQ6XG4gKiBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L3ZzY29kZS90cmVlL21haW4vc3JjL3ZzL2Jhc2UvYnJvd3Nlci91aS9ncmlkXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IE9yaWVudGF0aW9uIH0gZnJvbSAnLi4vc3BsaXR2aWV3L3NwbGl0dmlldyc7XG5pbXBvcnQgeyBFbWl0dGVyIH0gZnJvbSAnLi4vZXZlbnRzJztcbmV4cG9ydCBjbGFzcyBMZWFmTm9kZSB7XG4gICAgZ2V0IG1pbmltdW1XaWR0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlldy5taW5pbXVtV2lkdGg7XG4gICAgfVxuICAgIGdldCBtYXhpbXVtV2lkdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXcubWF4aW11bVdpZHRoO1xuICAgIH1cbiAgICBnZXQgbWluaW11bUhlaWdodCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlldy5taW5pbXVtSGVpZ2h0O1xuICAgIH1cbiAgICBnZXQgbWF4aW11bUhlaWdodCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlldy5tYXhpbXVtSGVpZ2h0O1xuICAgIH1cbiAgICBnZXQgcHJpb3JpdHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXcucHJpb3JpdHk7XG4gICAgfVxuICAgIGdldCBzbmFwKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3LnNuYXA7XG4gICAgfVxuICAgIGdldCBtaW5pbXVtU2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3JpZW50YXRpb24gPT09IE9yaWVudGF0aW9uLkhPUklaT05UQUxcbiAgICAgICAgICAgID8gdGhpcy5taW5pbXVtSGVpZ2h0XG4gICAgICAgICAgICA6IHRoaXMubWluaW11bVdpZHRoO1xuICAgIH1cbiAgICBnZXQgbWF4aW11bVNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9yaWVudGF0aW9uID09PSBPcmllbnRhdGlvbi5IT1JJWk9OVEFMXG4gICAgICAgICAgICA/IHRoaXMubWF4aW11bUhlaWdodFxuICAgICAgICAgICAgOiB0aGlzLm1heGltdW1XaWR0aDtcbiAgICB9XG4gICAgZ2V0IG1pbmltdW1PcnRob2dvbmFsU2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3JpZW50YXRpb24gPT09IE9yaWVudGF0aW9uLkhPUklaT05UQUxcbiAgICAgICAgICAgID8gdGhpcy5taW5pbXVtV2lkdGhcbiAgICAgICAgICAgIDogdGhpcy5taW5pbXVtSGVpZ2h0O1xuICAgIH1cbiAgICBnZXQgbWF4aW11bU9ydGhvZ29uYWxTaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcmllbnRhdGlvbiA9PT0gT3JpZW50YXRpb24uSE9SSVpPTlRBTFxuICAgICAgICAgICAgPyB0aGlzLm1heGltdW1XaWR0aFxuICAgICAgICAgICAgOiB0aGlzLm1heGltdW1IZWlnaHQ7XG4gICAgfVxuICAgIGdldCBvcnRob2dvbmFsU2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29ydGhvZ29uYWxTaXplO1xuICAgIH1cbiAgICBnZXQgc2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NpemU7XG4gICAgfVxuICAgIGdldCBlbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3LmVsZW1lbnQ7XG4gICAgfVxuICAgIGdldCB3aWR0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3JpZW50YXRpb24gPT09IE9yaWVudGF0aW9uLkhPUklaT05UQUxcbiAgICAgICAgICAgID8gdGhpcy5vcnRob2dvbmFsU2l6ZVxuICAgICAgICAgICAgOiB0aGlzLnNpemU7XG4gICAgfVxuICAgIGdldCBoZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9yaWVudGF0aW9uID09PSBPcmllbnRhdGlvbi5IT1JJWk9OVEFMXG4gICAgICAgICAgICA/IHRoaXMuc2l6ZVxuICAgICAgICAgICAgOiB0aGlzLm9ydGhvZ29uYWxTaXplO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcih2aWV3LCBvcmllbnRhdGlvbiwgb3J0aG9nb25hbFNpemUsIHNpemUgPSAwKSB7XG4gICAgICAgIHRoaXMudmlldyA9IHZpZXc7XG4gICAgICAgIHRoaXMub3JpZW50YXRpb24gPSBvcmllbnRhdGlvbjtcbiAgICAgICAgdGhpcy5fb25EaWRDaGFuZ2UgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRGlkQ2hhbmdlID0gdGhpcy5fb25EaWRDaGFuZ2UuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29ydGhvZ29uYWxTaXplID0gb3J0aG9nb25hbFNpemU7XG4gICAgICAgIHRoaXMuX3NpemUgPSBzaXplO1xuICAgICAgICB0aGlzLl9kaXNwb3NhYmxlID0gdGhpcy52aWV3Lm9uRGlkQ2hhbmdlKChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb25EaWRDaGFuZ2UuZmlyZSh7XG4gICAgICAgICAgICAgICAgICAgIHNpemU6IHRoaXMub3JpZW50YXRpb24gPT09IE9yaWVudGF0aW9uLlZFUlRJQ0FMXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGV2ZW50LndpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGV2ZW50LmhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgb3J0aG9nb25hbFNpemU6IHRoaXMub3JpZW50YXRpb24gPT09IE9yaWVudGF0aW9uLlZFUlRJQ0FMXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGV2ZW50LmhlaWdodFxuICAgICAgICAgICAgICAgICAgICAgICAgOiBldmVudC53aWR0aCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX29uRGlkQ2hhbmdlLmZpcmUoe30pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2V0VmlzaWJsZSh2aXNpYmxlKSB7XG4gICAgICAgIGlmICh0aGlzLnZpZXcuc2V0VmlzaWJsZSkge1xuICAgICAgICAgICAgdGhpcy52aWV3LnNldFZpc2libGUodmlzaWJsZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGF5b3V0KHNpemUsIG9ydGhvZ29uYWxTaXplKSB7XG4gICAgICAgIHRoaXMuX3NpemUgPSBzaXplO1xuICAgICAgICB0aGlzLl9vcnRob2dvbmFsU2l6ZSA9IG9ydGhvZ29uYWxTaXplO1xuICAgICAgICB0aGlzLnZpZXcubGF5b3V0KHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbiAgICB9XG4gICAgZGlzcG9zZSgpIHtcbiAgICAgICAgdGhpcy5fb25EaWRDaGFuZ2UuZGlzcG9zZSgpO1xuICAgICAgICB0aGlzLl9kaXNwb3NhYmxlLmRpc3Bvc2UoKTtcbiAgICB9XG59XG4iLCJleHBvcnQgY29uc3QgUFJPUEVSVFlfS0VZU19HUklEVklFVyA9ICgoKSA9PiB7XG4gICAgLyoqXG4gICAgICogYnkgcmVhZG9uZyB0aGUga2V5cyBmcm9tIGFuIGVtcHR5IHZhbHVlIG9iamVjdCBUeXBlU2NyaXB0IHdpbGwgZXJyb3JcbiAgICAgKiB3aGVuIHdlIGFkZCBvciByZW1vdmUgbmV3IHByb3BlcnRpZXMgdG8gYERvY2t2aWV3T3B0aW9uc2BcbiAgICAgKi9cbiAgICBjb25zdCBwcm9wZXJ0aWVzID0ge1xuICAgICAgICBkaXNhYmxlQXV0b1Jlc2l6aW5nOiB1bmRlZmluZWQsXG4gICAgICAgIHByb3BvcnRpb25hbExheW91dDogdW5kZWZpbmVkLFxuICAgICAgICBvcmllbnRhdGlvbjogdW5kZWZpbmVkLFxuICAgICAgICBoaWRlQm9yZGVyczogdW5kZWZpbmVkLFxuICAgICAgICBjbGFzc05hbWU6IHVuZGVmaW5lZCxcbiAgICB9O1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKTtcbn0pKCk7XG4iLCJleHBvcnQgeyBnZXRQYW5lRGF0YSwgZ2V0UGFuZWxEYXRhLCBQYW5lVHJhbnNmZXIsIFBhbmVsVHJhbnNmZXIsIH0gZnJvbSAnLi9kbmQvZGF0YVRyYW5zZmVyJztcbi8qKlxuICogRXZlbnRzLCBFbWl0dGVycyBhbmQgRGlzcG9zYWJsZXMgYXJlIHZlcnkgY29tbW9uIGNvbmNlcHRzIHRoYXQgbWFueSBjb2RlYmFzZXMgd2lsbCBjb250YWluLCBob3dldmVyIHdlIG5lZWRcbiAqIHRvIGV4cG9ydCB0aGVtIGZvciBkb2NrdmlldyBmcmFtZXdvcmsgcGFja2FnZXMgdG8gdXNlLlxuICogVG8gYmUgYSBnb29kIGNpdGl6ZW4gdGhlc2UgYXJlIGV4cG9ydGVkIHdpdGggYSBgRG9ja3ZpZXdgIHByZWZpeCB0byBwcmV2ZW50IGFjY2lkZW50YWwgdXNlIGJ5IG90aGVycy5cbiAqL1xuZXhwb3J0IHsgRW1pdHRlciBhcyBEb2Nrdmlld0VtaXR0ZXIsIEV2ZW50IGFzIERvY2t2aWV3RXZlbnQgfSBmcm9tICcuL2V2ZW50cyc7XG5leHBvcnQgeyBNdXRhYmxlRGlzcG9zYWJsZSBhcyBEb2Nrdmlld011dGFibGVEaXNwb3NhYmxlLCBDb21wb3NpdGVEaXNwb3NhYmxlIGFzIERvY2t2aWV3Q29tcG9zaXRlRGlzcG9zYWJsZSwgRGlzcG9zYWJsZSBhcyBEb2Nrdmlld0Rpc3Bvc2FibGUsIH0gZnJvbSAnLi9saWZlY3ljbGUnO1xuZXhwb3J0ICogZnJvbSAnLi9wYW5lbC90eXBlcyc7XG5leHBvcnQgKiBmcm9tICcuL3NwbGl0dmlldy9zcGxpdHZpZXcnO1xuZXhwb3J0IHsgUFJPUEVSVFlfS0VZU19TUExJVFZJRVcsIH0gZnJvbSAnLi9zcGxpdHZpZXcvb3B0aW9ucyc7XG5leHBvcnQgKiBmcm9tICcuL3BhbmV2aWV3L3BhbmV2aWV3JztcbmV4cG9ydCAqIGZyb20gJy4vZ3JpZHZpZXcvZ3JpZHZpZXcnO1xuZXhwb3J0IHsgUFJPUEVSVFlfS0VZU19HUklEVklFVywgfSBmcm9tICcuL2dyaWR2aWV3L29wdGlvbnMnO1xuZXhwb3J0ICogZnJvbSAnLi9ncmlkdmlldy9iYXNlQ29tcG9uZW50R3JpZHZpZXcnO1xuZXhwb3J0IHsgRHJhZ2dhYmxlUGFuZXZpZXdQYW5lbCwgfSBmcm9tICcuL3BhbmV2aWV3L2RyYWdnYWJsZVBhbmV2aWV3UGFuZWwnO1xuZXhwb3J0ICogZnJvbSAnLi9kb2Nrdmlldy9jb21wb25lbnRzL3BhbmVsL2NvbnRlbnQnO1xuZXhwb3J0ICogZnJvbSAnLi9kb2Nrdmlldy9jb21wb25lbnRzL3RhYi90YWInO1xuZXhwb3J0ICogZnJvbSAnLi9kb2Nrdmlldy9kb2Nrdmlld0dyb3VwUGFuZWxNb2RlbCc7XG5leHBvcnQgKiBmcm9tICcuL2RvY2t2aWV3L3R5cGVzJztcbmV4cG9ydCAqIGZyb20gJy4vZG9ja3ZpZXcvZG9ja3ZpZXdHcm91cFBhbmVsJztcbmV4cG9ydCAqIGZyb20gJy4vZG9ja3ZpZXcvb3B0aW9ucyc7XG5leHBvcnQgKiBmcm9tICcuL2RvY2t2aWV3L3RoZW1lJztcbmV4cG9ydCAqIGZyb20gJy4vZG9ja3ZpZXcvZG9ja3ZpZXdQYW5lbCc7XG5leHBvcnQgeyBEZWZhdWx0VGFiIH0gZnJvbSAnLi9kb2Nrdmlldy9jb21wb25lbnRzL3RhYi9kZWZhdWx0VGFiJztcbmV4cG9ydCB7IERlZmF1bHREb2Nrdmlld0Rlc2VyaWFsemllciwgfSBmcm9tICcuL2RvY2t2aWV3L2Rlc2VyaWFsaXplcic7XG5leHBvcnQgKiBmcm9tICcuL2RvY2t2aWV3L2RvY2t2aWV3Q29tcG9uZW50JztcbmV4cG9ydCAqIGZyb20gJy4vZ3JpZHZpZXcvZ3JpZHZpZXdDb21wb25lbnQnO1xuZXhwb3J0ICogZnJvbSAnLi9zcGxpdHZpZXcvc3BsaXR2aWV3Q29tcG9uZW50JztcbmV4cG9ydCAqIGZyb20gJy4vcGFuZXZpZXcvcGFuZXZpZXdDb21wb25lbnQnO1xuZXhwb3J0IHsgUFJPUEVSVFlfS0VZU19QQU5FVklFVywgUGFuZXZpZXdVbmhhbmRsZWREcmFnT3ZlckV2ZW50LCB9IGZyb20gJy4vcGFuZXZpZXcvb3B0aW9ucyc7XG5leHBvcnQgKiBmcm9tICcuL2dyaWR2aWV3L2dyaWR2aWV3UGFuZWwnO1xuZXhwb3J0IHsgU3BsaXR2aWV3UGFuZWwgfSBmcm9tICcuL3NwbGl0dmlldy9zcGxpdHZpZXdQYW5lbCc7XG5leHBvcnQgKiBmcm9tICcuL3BhbmV2aWV3L3BhbmV2aWV3UGFuZWwnO1xuZXhwb3J0ICogZnJvbSAnLi9kb2Nrdmlldy90eXBlcyc7XG5leHBvcnQgeyBwb3NpdGlvblRvRGlyZWN0aW9uLCBkaXJlY3Rpb25Ub1Bvc2l0aW9uLCB9IGZyb20gJy4vZG5kL2Ryb3B0YXJnZXQnO1xuZXhwb3J0IHsgU3BsaXR2aWV3QXBpLCBQYW5ldmlld0FwaSwgR3JpZHZpZXdBcGksIERvY2t2aWV3QXBpLCB9IGZyb20gJy4vYXBpL2NvbXBvbmVudC5hcGknO1xuZXhwb3J0IHsgY3JlYXRlRG9ja3ZpZXcsIGNyZWF0ZUdyaWR2aWV3LCBjcmVhdGVQYW5ldmlldywgY3JlYXRlU3BsaXR2aWV3LCB9IGZyb20gJy4vYXBpL2VudHJ5UG9pbnRzJztcbiIsImV4cG9ydCB2YXIgRGlzcG9zYWJsZTtcbihmdW5jdGlvbiAoRGlzcG9zYWJsZSkge1xuICAgIERpc3Bvc2FibGUuTk9ORSA9IHtcbiAgICAgICAgZGlzcG9zZTogKCkgPT4ge1xuICAgICAgICAgICAgLy8gbm9vcFxuICAgICAgICB9LFxuICAgIH07XG4gICAgZnVuY3Rpb24gZnJvbShmdW5jKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkaXNwb3NlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgZnVuYygpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgRGlzcG9zYWJsZS5mcm9tID0gZnJvbTtcbn0pKERpc3Bvc2FibGUgfHwgKERpc3Bvc2FibGUgPSB7fSkpO1xuZXhwb3J0IGNsYXNzIENvbXBvc2l0ZURpc3Bvc2FibGUge1xuICAgIGdldCBpc0Rpc3Bvc2VkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNEaXNwb3NlZDtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoLi4uYXJncykge1xuICAgICAgICB0aGlzLl9pc0Rpc3Bvc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2Rpc3Bvc2FibGVzID0gYXJncztcbiAgICB9XG4gICAgYWRkRGlzcG9zYWJsZXMoLi4uYXJncykge1xuICAgICAgICBhcmdzLmZvckVhY2goKGFyZykgPT4gdGhpcy5fZGlzcG9zYWJsZXMucHVzaChhcmcpKTtcbiAgICB9XG4gICAgZGlzcG9zZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzRGlzcG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pc0Rpc3Bvc2VkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fZGlzcG9zYWJsZXMuZm9yRWFjaCgoYXJnKSA9PiBhcmcuZGlzcG9zZSgpKTtcbiAgICAgICAgdGhpcy5fZGlzcG9zYWJsZXMgPSBbXTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgTXV0YWJsZURpc3Bvc2FibGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLl9kaXNwb3NhYmxlID0gRGlzcG9zYWJsZS5OT05FO1xuICAgIH1cbiAgICBzZXQgdmFsdWUoZGlzcG9zYWJsZSkge1xuICAgICAgICBpZiAodGhpcy5fZGlzcG9zYWJsZSkge1xuICAgICAgICAgICAgdGhpcy5fZGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZGlzcG9zYWJsZSA9IGRpc3Bvc2FibGU7XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIGlmICh0aGlzLl9kaXNwb3NhYmxlKSB7XG4gICAgICAgICAgICB0aGlzLl9kaXNwb3NhYmxlLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIHRoaXMuX2Rpc3Bvc2FibGUgPSBEaXNwb3NhYmxlLk5PTkU7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJleHBvcnQgY29uc3QgY2xhbXAgPSAodmFsdWUsIG1pbiwgbWF4KSA9PiB7XG4gICAgaWYgKG1pbiA+IG1heCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogY2F2ZWF0OiBhbiBlcnJvciBzaG91bGQgYmUgdGhyb3duIGhlcmUgaWYgdGhpcyB3YXMgYSBwcm9wZXIgYGNsYW1wYCBmdW5jdGlvbiBidXQgd2UgbmVlZCB0byBoYW5kbGVcbiAgICAgICAgICogY2FzZXMgd2hlcmUgYG1pbmAgPiBgbWF4YCBhbmQgaW4gdGhvc2UgY2FzZXMgcmV0dXJuIGBtaW5gLlxuICAgICAgICAgKi9cbiAgICAgICAgcmV0dXJuIG1pbjtcbiAgICB9XG4gICAgcmV0dXJuIE1hdGgubWluKG1heCwgTWF0aC5tYXgodmFsdWUsIG1pbikpO1xufTtcbmV4cG9ydCBjb25zdCBzZXF1ZW50aWFsTnVtYmVyR2VuZXJhdG9yID0gKCkgPT4ge1xuICAgIGxldCB2YWx1ZSA9IDE7XG4gICAgcmV0dXJuIHsgbmV4dDogKCkgPT4gKHZhbHVlKyspLnRvU3RyaW5nKCkgfTtcbn07XG5leHBvcnQgY29uc3QgcmFuZ2UgPSAoZnJvbSwgdG8pID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBpZiAodHlwZW9mIHRvICE9PSAnbnVtYmVyJykge1xuICAgICAgICB0byA9IGZyb207XG4gICAgICAgIGZyb20gPSAwO1xuICAgIH1cbiAgICBpZiAoZnJvbSA8PSB0bykge1xuICAgICAgICBmb3IgKGxldCBpID0gZnJvbTsgaSA8IHRvOyBpKyspIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBmb3IgKGxldCBpID0gZnJvbTsgaSA+IHRvOyBpLS0pIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuIiwiaW1wb3J0IHsgZGlzYWJsZUlmcmFtZVBvaW50RXZlbnRzLCBxdWFzaURlZmF1bHRQcmV2ZW50ZWQsIHRvZ2dsZUNsYXNzLCB9IGZyb20gJy4uL2RvbSc7XG5pbXBvcnQgeyBFbWl0dGVyLCBhZGREaXNwb3NhYmxlTGlzdGVuZXIsIH0gZnJvbSAnLi4vZXZlbnRzJztcbmltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUsIE11dGFibGVEaXNwb3NhYmxlIH0gZnJvbSAnLi4vbGlmZWN5Y2xlJztcbmltcG9ydCB7IGNsYW1wIH0gZnJvbSAnLi4vbWF0aCc7XG5jbGFzcyBBcmlhTGV2ZWxUcmFja2VyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5fb3JkZXJlZExpc3QgPSBbXTtcbiAgICB9XG4gICAgcHVzaChlbGVtZW50KSB7XG4gICAgICAgIHRoaXMuX29yZGVyZWRMaXN0ID0gW1xuICAgICAgICAgICAgLi4udGhpcy5fb3JkZXJlZExpc3QuZmlsdGVyKChpdGVtKSA9PiBpdGVtICE9PSBlbGVtZW50KSxcbiAgICAgICAgICAgIGVsZW1lbnQsXG4gICAgICAgIF07XG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfVxuICAgIGRlc3Ryb3koZWxlbWVudCkge1xuICAgICAgICB0aGlzLl9vcmRlcmVkTGlzdCA9IHRoaXMuX29yZGVyZWRMaXN0LmZpbHRlcigoaXRlbSkgPT4gaXRlbSAhPT0gZWxlbWVudCk7XG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfVxuICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9vcmRlcmVkTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5fb3JkZXJlZExpc3RbaV0uc2V0QXR0cmlidXRlKCdhcmlhLWxldmVsJywgYCR7aX1gKTtcbiAgICAgICAgICAgIHRoaXMuX29yZGVyZWRMaXN0W2ldLnN0eWxlLnpJbmRleCA9IGBjYWxjKHZhcigtLWR2LW92ZXJsYXktei1pbmRleCwgOTk5KSArICR7aSAqIDJ9KWA7XG4gICAgICAgIH1cbiAgICB9XG59XG5jb25zdCBhcmlhbExldmVsVHJhY2tlciA9IG5ldyBBcmlhTGV2ZWxUcmFja2VyKCk7XG5leHBvcnQgY2xhc3MgT3ZlcmxheSBleHRlbmRzIENvbXBvc2l0ZURpc3Bvc2FibGUge1xuICAgIHNldCBtaW5pbXVtSW5WaWV3cG9ydFdpZHRoKHZhbHVlKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5taW5pbXVtSW5WaWV3cG9ydFdpZHRoID0gdmFsdWU7XG4gICAgfVxuICAgIHNldCBtaW5pbXVtSW5WaWV3cG9ydEhlaWdodCh2YWx1ZSkge1xuICAgICAgICB0aGlzLm9wdGlvbnMubWluaW11bUluVmlld3BvcnRIZWlnaHQgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IGVsZW1lbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbGVtZW50O1xuICAgIH1cbiAgICBnZXQgaXNWaXNpYmxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNWaXNpYmxlO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy5fb25EaWRDaGFuZ2UgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRGlkQ2hhbmdlID0gdGhpcy5fb25EaWRDaGFuZ2UuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uRGlkQ2hhbmdlRW5kID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZENoYW5nZUVuZCA9IHRoaXMuX29uRGlkQ2hhbmdlRW5kLmV2ZW50O1xuICAgICAgICB0aGlzLmFkZERpc3Bvc2FibGVzKHRoaXMuX29uRGlkQ2hhbmdlLCB0aGlzLl9vbkRpZENoYW5nZUVuZCk7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NOYW1lID0gJ2R2LXJlc2l6ZS1jb250YWluZXInO1xuICAgICAgICB0aGlzLl9pc1Zpc2libGUgPSB0cnVlO1xuICAgICAgICB0aGlzLnNldHVwUmVzaXplKCd0b3AnKTtcbiAgICAgICAgdGhpcy5zZXR1cFJlc2l6ZSgnYm90dG9tJyk7XG4gICAgICAgIHRoaXMuc2V0dXBSZXNpemUoJ2xlZnQnKTtcbiAgICAgICAgdGhpcy5zZXR1cFJlc2l6ZSgncmlnaHQnKTtcbiAgICAgICAgdGhpcy5zZXR1cFJlc2l6ZSgndG9wbGVmdCcpO1xuICAgICAgICB0aGlzLnNldHVwUmVzaXplKCd0b3ByaWdodCcpO1xuICAgICAgICB0aGlzLnNldHVwUmVzaXplKCdib3R0b21sZWZ0Jyk7XG4gICAgICAgIHRoaXMuc2V0dXBSZXNpemUoJ2JvdHRvbXJpZ2h0Jyk7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5vcHRpb25zLmNvbnRlbnQpO1xuICAgICAgICB0aGlzLm9wdGlvbnMuY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuX2VsZW1lbnQpO1xuICAgICAgICAvLyBpZiBpbnB1dCBiYWQgcmVzaXplIHdpdGhpbiBhY2NlcHRhYmxlIGJvdW5kYXJpZXNcbiAgICAgICAgdGhpcy5zZXRCb3VuZHMoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7IGhlaWdodDogdGhpcy5vcHRpb25zLmhlaWdodCwgd2lkdGg6IHRoaXMub3B0aW9ucy53aWR0aCB9LCAoJ3RvcCcgaW4gdGhpcy5vcHRpb25zICYmIHsgdG9wOiB0aGlzLm9wdGlvbnMudG9wIH0pKSwgKCdib3R0b20nIGluIHRoaXMub3B0aW9ucyAmJiB7IGJvdHRvbTogdGhpcy5vcHRpb25zLmJvdHRvbSB9KSksICgnbGVmdCcgaW4gdGhpcy5vcHRpb25zICYmIHsgbGVmdDogdGhpcy5vcHRpb25zLmxlZnQgfSkpLCAoJ3JpZ2h0JyBpbiB0aGlzLm9wdGlvbnMgJiYgeyByaWdodDogdGhpcy5vcHRpb25zLnJpZ2h0IH0pKSk7XG4gICAgICAgIGFyaWFsTGV2ZWxUcmFja2VyLnB1c2godGhpcy5fZWxlbWVudCk7XG4gICAgfVxuICAgIHNldFZpc2libGUoaXNWaXNpYmxlKSB7XG4gICAgICAgIGlmIChpc1Zpc2libGUgPT09IHRoaXMuaXNWaXNpYmxlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faXNWaXNpYmxlID0gaXNWaXNpYmxlO1xuICAgICAgICB0b2dnbGVDbGFzcyh0aGlzLmVsZW1lbnQsICdkdi1oaWRkZW4nLCAhdGhpcy5pc1Zpc2libGUpO1xuICAgIH1cbiAgICBicmluZ1RvRnJvbnQoKSB7XG4gICAgICAgIGFyaWFsTGV2ZWxUcmFja2VyLnB1c2godGhpcy5fZWxlbWVudCk7XG4gICAgfVxuICAgIHNldEJvdW5kcyhib3VuZHMgPSB7fSkge1xuICAgICAgICBpZiAodHlwZW9mIGJvdW5kcy5oZWlnaHQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLmhlaWdodCA9IGAke2JvdW5kcy5oZWlnaHR9cHhgO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgYm91bmRzLndpZHRoID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS53aWR0aCA9IGAke2JvdW5kcy53aWR0aH1weGA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCd0b3AnIGluIGJvdW5kcyAmJiB0eXBlb2YgYm91bmRzLnRvcCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUudG9wID0gYCR7Ym91bmRzLnRvcH1weGA7XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLmJvdHRvbSA9ICdhdXRvJztcbiAgICAgICAgICAgIHRoaXMudmVydGljYWxBbGlnbm1lbnQgPSAndG9wJztcbiAgICAgICAgfVxuICAgICAgICBpZiAoJ2JvdHRvbScgaW4gYm91bmRzICYmIHR5cGVvZiBib3VuZHMuYm90dG9tID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5ib3R0b20gPSBgJHtib3VuZHMuYm90dG9tfXB4YDtcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUudG9wID0gJ2F1dG8nO1xuICAgICAgICAgICAgdGhpcy52ZXJ0aWNhbEFsaWdubWVudCA9ICdib3R0b20nO1xuICAgICAgICB9XG4gICAgICAgIGlmICgnbGVmdCcgaW4gYm91bmRzICYmIHR5cGVvZiBib3VuZHMubGVmdCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUubGVmdCA9IGAke2JvdW5kcy5sZWZ0fXB4YDtcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucmlnaHQgPSAnYXV0byc7XG4gICAgICAgICAgICB0aGlzLmhvcml6aW9udGFsQWxpZ25tZW50ID0gJ2xlZnQnO1xuICAgICAgICB9XG4gICAgICAgIGlmICgncmlnaHQnIGluIGJvdW5kcyAmJiB0eXBlb2YgYm91bmRzLnJpZ2h0ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5yaWdodCA9IGAke2JvdW5kcy5yaWdodH1weGA7XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLmxlZnQgPSAnYXV0byc7XG4gICAgICAgICAgICB0aGlzLmhvcml6aW9udGFsQWxpZ25tZW50ID0gJ3JpZ2h0JztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb250YWluZXJSZWN0ID0gdGhpcy5vcHRpb25zLmNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgY29uc3Qgb3ZlcmxheVJlY3QgPSB0aGlzLl9lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAvLyByZWdpb246IGVuc3VyZSBib3VuZHMgd2l0aGluIGFsbG93YWJsZSBsaW1pdHNcbiAgICAgICAgLy8gYSBtaW5pbXVtIHdpZHRoIG9mIG1pbmltdW1WaWV3cG9ydFdpZHRoIG11c3QgYmUgaW5zaWRlIHRoZSB2aWV3cG9ydFxuICAgICAgICBjb25zdCB4T2Zmc2V0ID0gTWF0aC5tYXgoMCwgdGhpcy5nZXRNaW5pbXVtV2lkdGgob3ZlcmxheVJlY3Qud2lkdGgpKTtcbiAgICAgICAgLy8gYSBtaW5pbXVtIGhlaWdodCBvZiBtaW5pbXVtVmlld3BvcnRIZWlnaHQgbXVzdCBiZSBpbnNpZGUgdGhlIHZpZXdwb3J0XG4gICAgICAgIGNvbnN0IHlPZmZzZXQgPSBNYXRoLm1heCgwLCB0aGlzLmdldE1pbmltdW1IZWlnaHQob3ZlcmxheVJlY3QuaGVpZ2h0KSk7XG4gICAgICAgIGlmICh0aGlzLnZlcnRpY2FsQWxpZ25tZW50ID09PSAndG9wJykge1xuICAgICAgICAgICAgY29uc3QgdG9wID0gY2xhbXAob3ZlcmxheVJlY3QudG9wIC0gY29udGFpbmVyUmVjdC50b3AsIC15T2Zmc2V0LCBNYXRoLm1heCgwLCBjb250YWluZXJSZWN0LmhlaWdodCAtIG92ZXJsYXlSZWN0LmhlaWdodCArIHlPZmZzZXQpKTtcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUudG9wID0gYCR7dG9wfXB4YDtcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUuYm90dG9tID0gJ2F1dG8nO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnZlcnRpY2FsQWxpZ25tZW50ID09PSAnYm90dG9tJykge1xuICAgICAgICAgICAgY29uc3QgYm90dG9tID0gY2xhbXAoY29udGFpbmVyUmVjdC5ib3R0b20gLSBvdmVybGF5UmVjdC5ib3R0b20sIC15T2Zmc2V0LCBNYXRoLm1heCgwLCBjb250YWluZXJSZWN0LmhlaWdodCAtIG92ZXJsYXlSZWN0LmhlaWdodCArIHlPZmZzZXQpKTtcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUuYm90dG9tID0gYCR7Ym90dG9tfXB4YDtcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUudG9wID0gJ2F1dG8nO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmhvcml6aW9udGFsQWxpZ25tZW50ID09PSAnbGVmdCcpIHtcbiAgICAgICAgICAgIGNvbnN0IGxlZnQgPSBjbGFtcChvdmVybGF5UmVjdC5sZWZ0IC0gY29udGFpbmVyUmVjdC5sZWZ0LCAteE9mZnNldCwgTWF0aC5tYXgoMCwgY29udGFpbmVyUmVjdC53aWR0aCAtIG92ZXJsYXlSZWN0LndpZHRoICsgeE9mZnNldCkpO1xuICAgICAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5sZWZ0ID0gYCR7bGVmdH1weGA7XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnJpZ2h0ID0gJ2F1dG8nO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmhvcml6aW9udGFsQWxpZ25tZW50ID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgICBjb25zdCByaWdodCA9IGNsYW1wKGNvbnRhaW5lclJlY3QucmlnaHQgLSBvdmVybGF5UmVjdC5yaWdodCwgLXhPZmZzZXQsIE1hdGgubWF4KDAsIGNvbnRhaW5lclJlY3Qud2lkdGggLSBvdmVybGF5UmVjdC53aWR0aCArIHhPZmZzZXQpKTtcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucmlnaHQgPSBgJHtyaWdodH1weGA7XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLmxlZnQgPSAnYXV0byc7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fb25EaWRDaGFuZ2UuZmlyZSgpO1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMub3B0aW9ucy5jb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLl9lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICAgICAgaWYgKHRoaXMudmVydGljYWxBbGlnbm1lbnQgPT09ICd0b3AnKSB7XG4gICAgICAgICAgICByZXN1bHQudG9wID0gcGFyc2VGbG9hdCh0aGlzLl9lbGVtZW50LnN0eWxlLnRvcCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy52ZXJ0aWNhbEFsaWdubWVudCA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgICAgIHJlc3VsdC5ib3R0b20gPSBwYXJzZUZsb2F0KHRoaXMuX2VsZW1lbnQuc3R5bGUuYm90dG9tKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdC50b3AgPSBlbGVtZW50LnRvcCAtIGNvbnRhaW5lci50b3A7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaG9yaXppb250YWxBbGlnbm1lbnQgPT09ICdsZWZ0Jykge1xuICAgICAgICAgICAgcmVzdWx0LmxlZnQgPSBwYXJzZUZsb2F0KHRoaXMuX2VsZW1lbnQuc3R5bGUubGVmdCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5ob3JpemlvbnRhbEFsaWdubWVudCA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgICAgcmVzdWx0LnJpZ2h0ID0gcGFyc2VGbG9hdCh0aGlzLl9lbGVtZW50LnN0eWxlLnJpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdC5sZWZ0ID0gZWxlbWVudC5sZWZ0IC0gY29udGFpbmVyLmxlZnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0LndpZHRoID0gZWxlbWVudC53aWR0aDtcbiAgICAgICAgcmVzdWx0LmhlaWdodCA9IGVsZW1lbnQuaGVpZ2h0O1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBzZXR1cERyYWcoZHJhZ1RhcmdldCwgb3B0aW9ucyA9IHsgaW5EcmFnTW9kZTogZmFsc2UgfSkge1xuICAgICAgICBjb25zdCBtb3ZlID0gbmV3IE11dGFibGVEaXNwb3NhYmxlKCk7XG4gICAgICAgIGNvbnN0IHRyYWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgbGV0IG9mZnNldCA9IG51bGw7XG4gICAgICAgICAgICBjb25zdCBpZnJhbWVzID0gZGlzYWJsZUlmcmFtZVBvaW50RXZlbnRzKCk7XG4gICAgICAgICAgICBtb3ZlLnZhbHVlID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoe1xuICAgICAgICAgICAgICAgIGRpc3Bvc2U6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWZyYW1lcy5yZWxlYXNlKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sIGFkZERpc3Bvc2FibGVMaXN0ZW5lcih3aW5kb3csICdwb2ludGVybW92ZScsIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29udGFpbmVyUmVjdCA9IHRoaXMub3B0aW9ucy5jb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgeCA9IGUuY2xpZW50WCAtIGNvbnRhaW5lclJlY3QubGVmdDtcbiAgICAgICAgICAgICAgICBjb25zdCB5ID0gZS5jbGllbnRZIC0gY29udGFpbmVyUmVjdC50b3A7XG4gICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3ModGhpcy5fZWxlbWVudCwgJ2R2LXJlc2l6ZS1jb250YWluZXItZHJhZ2dpbmcnLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBjb25zdCBvdmVybGF5UmVjdCA9IHRoaXMuX2VsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgaWYgKG9mZnNldCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBlLmNsaWVudFggLSBvdmVybGF5UmVjdC5sZWZ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogZS5jbGllbnRZIC0gb3ZlcmxheVJlY3QudG9wLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCB4T2Zmc2V0ID0gTWF0aC5tYXgoMCwgdGhpcy5nZXRNaW5pbXVtV2lkdGgob3ZlcmxheVJlY3Qud2lkdGgpKTtcbiAgICAgICAgICAgICAgICBjb25zdCB5T2Zmc2V0ID0gTWF0aC5tYXgoMCwgdGhpcy5nZXRNaW5pbXVtSGVpZ2h0KG92ZXJsYXlSZWN0LmhlaWdodCkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvcCA9IGNsYW1wKHkgLSBvZmZzZXQueSwgLXlPZmZzZXQsIE1hdGgubWF4KDAsIGNvbnRhaW5lclJlY3QuaGVpZ2h0IC0gb3ZlcmxheVJlY3QuaGVpZ2h0ICsgeU9mZnNldCkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGJvdHRvbSA9IGNsYW1wKG9mZnNldC55IC1cbiAgICAgICAgICAgICAgICAgICAgeSArXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lclJlY3QuaGVpZ2h0IC1cbiAgICAgICAgICAgICAgICAgICAgb3ZlcmxheVJlY3QuaGVpZ2h0LCAteU9mZnNldCwgTWF0aC5tYXgoMCwgY29udGFpbmVyUmVjdC5oZWlnaHQgLSBvdmVybGF5UmVjdC5oZWlnaHQgKyB5T2Zmc2V0KSk7XG4gICAgICAgICAgICAgICAgY29uc3QgbGVmdCA9IGNsYW1wKHggLSBvZmZzZXQueCwgLXhPZmZzZXQsIE1hdGgubWF4KDAsIGNvbnRhaW5lclJlY3Qud2lkdGggLSBvdmVybGF5UmVjdC53aWR0aCArIHhPZmZzZXQpKTtcbiAgICAgICAgICAgICAgICBjb25zdCByaWdodCA9IGNsYW1wKG9mZnNldC54IC0geCArIGNvbnRhaW5lclJlY3Qud2lkdGggLSBvdmVybGF5UmVjdC53aWR0aCwgLXhPZmZzZXQsIE1hdGgubWF4KDAsIGNvbnRhaW5lclJlY3Qud2lkdGggLSBvdmVybGF5UmVjdC53aWR0aCArIHhPZmZzZXQpKTtcbiAgICAgICAgICAgICAgICBjb25zdCBib3VuZHMgPSB7fTtcbiAgICAgICAgICAgICAgICAvLyBBbmNob3IgdG8gdG9wIG9yIHRvIGJvdHRvbSBkZXBlbmRpbmcgb24gd2hpY2ggb25lIGlzIGNsb3NlclxuICAgICAgICAgICAgICAgIGlmICh0b3AgPD0gYm90dG9tKSB7XG4gICAgICAgICAgICAgICAgICAgIGJvdW5kcy50b3AgPSB0b3A7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBib3VuZHMuYm90dG9tID0gYm90dG9tO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBBbmNob3IgdG8gbGVmdCBvciB0byByaWdodCBkZXBlbmRpbmcgb24gd2hpY2ggb25lIGlzIGNsb3NlclxuICAgICAgICAgICAgICAgIGlmIChsZWZ0IDw9IHJpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIGJvdW5kcy5sZWZ0ID0gbGVmdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGJvdW5kcy5yaWdodCA9IHJpZ2h0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnNldEJvdW5kcyhib3VuZHMpO1xuICAgICAgICAgICAgfSksIGFkZERpc3Bvc2FibGVMaXN0ZW5lcih3aW5kb3csICdwb2ludGVydXAnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3ModGhpcy5fZWxlbWVudCwgJ2R2LXJlc2l6ZS1jb250YWluZXItZHJhZ2dpbmcnLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgbW92ZS5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fb25EaWRDaGFuZ2VFbmQuZmlyZSgpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmFkZERpc3Bvc2FibGVzKG1vdmUsIGFkZERpc3Bvc2FibGVMaXN0ZW5lcihkcmFnVGFyZ2V0LCAncG9pbnRlcmRvd24nLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBpZiBzb21lYm9keSBoYXMgbWFya2VkIHRoaXMgZXZlbnQgdGhlbiB0cmVhdCBhcyBhIGRlZmF1bHRQcmV2ZW50ZWRcbiAgICAgICAgICAgIC8vIHdpdGhvdXQgYWN0dWFsbHkgY2FsbGluZyBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgICAgICBpZiAocXVhc2lEZWZhdWx0UHJldmVudGVkKGV2ZW50KSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyYWNrKCk7XG4gICAgICAgIH0pLCBhZGREaXNwb3NhYmxlTGlzdGVuZXIodGhpcy5vcHRpb25zLmNvbnRlbnQsICdwb2ludGVyZG93bicsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBpZiBzb21lYm9keSBoYXMgbWFya2VkIHRoaXMgZXZlbnQgdGhlbiB0cmVhdCBhcyBhIGRlZmF1bHRQcmV2ZW50ZWRcbiAgICAgICAgICAgIC8vIHdpdGhvdXQgYWN0dWFsbHkgY2FsbGluZyBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgICAgICBpZiAocXVhc2lEZWZhdWx0UHJldmVudGVkKGV2ZW50KSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChldmVudC5zaGlmdEtleSkge1xuICAgICAgICAgICAgICAgIHRyYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLCBhZGREaXNwb3NhYmxlTGlzdGVuZXIodGhpcy5vcHRpb25zLmNvbnRlbnQsICdwb2ludGVyZG93bicsICgpID0+IHtcbiAgICAgICAgICAgIGFyaWFsTGV2ZWxUcmFja2VyLnB1c2godGhpcy5fZWxlbWVudCk7XG4gICAgICAgIH0sIHRydWUpKTtcbiAgICAgICAgaWYgKG9wdGlvbnMuaW5EcmFnTW9kZSkge1xuICAgICAgICAgICAgdHJhY2soKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXR1cFJlc2l6ZShkaXJlY3Rpb24pIHtcbiAgICAgICAgY29uc3QgcmVzaXplSGFuZGxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICByZXNpemVIYW5kbGVFbGVtZW50LmNsYXNzTmFtZSA9IGBkdi1yZXNpemUtaGFuZGxlLSR7ZGlyZWN0aW9ufWA7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuYXBwZW5kQ2hpbGQocmVzaXplSGFuZGxlRWxlbWVudCk7XG4gICAgICAgIGNvbnN0IG1vdmUgPSBuZXcgTXV0YWJsZURpc3Bvc2FibGUoKTtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyhtb3ZlLCBhZGREaXNwb3NhYmxlTGlzdGVuZXIocmVzaXplSGFuZGxlRWxlbWVudCwgJ3BvaW50ZXJkb3duJywgKGUpID0+IHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGxldCBzdGFydFBvc2l0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIGNvbnN0IGlmcmFtZXMgPSBkaXNhYmxlSWZyYW1lUG9pbnRFdmVudHMoKTtcbiAgICAgICAgICAgIG1vdmUudmFsdWUgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZShhZGREaXNwb3NhYmxlTGlzdGVuZXIod2luZG93LCAncG9pbnRlcm1vdmUnLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lclJlY3QgPSB0aGlzLm9wdGlvbnMuY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG92ZXJsYXlSZWN0ID0gdGhpcy5fZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgICAgICBjb25zdCB5ID0gZS5jbGllbnRZIC0gY29udGFpbmVyUmVjdC50b3A7XG4gICAgICAgICAgICAgICAgY29uc3QgeCA9IGUuY2xpZW50WCAtIGNvbnRhaW5lclJlY3QubGVmdDtcbiAgICAgICAgICAgICAgICBpZiAoc3RhcnRQb3NpdGlvbiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyByZWNvcmQgdGhlIGluaXRpYWwgZGltZW5zaW9ucyBzaW5jZSBhcyBhbGwgc3Vic2VxdWVuY2UgbW92ZXMgYXJlIHJlbGF0aXZlIHRvIHRoaXNcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRQb3NpdGlvbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsWTogeSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsSGVpZ2h0OiBvdmVybGF5UmVjdC5oZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbFg6IHgsXG4gICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbFdpZHRoOiBvdmVybGF5UmVjdC53aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IHRvcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBsZXQgYm90dG9tID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGxldCBoZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgbGV0IGxlZnQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgbGV0IHJpZ2h0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGxldCB3aWR0aCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBjb25zdCBtb3ZlVG9wID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0b3AgPSBjbGFtcCh5LCAtTnVtYmVyLk1BWF9WQUxVRSwgc3RhcnRQb3NpdGlvbi5vcmlnaW5hbFkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRQb3NpdGlvbi5vcmlnaW5hbEhlaWdodCA+XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXJSZWN0LmhlaWdodFxuICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLmdldE1pbmltdW1IZWlnaHQoY29udGFpbmVyUmVjdC5oZWlnaHQpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IE1hdGgubWF4KDAsIHN0YXJ0UG9zaXRpb24ub3JpZ2luYWxZICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydFBvc2l0aW9uLm9yaWdpbmFsSGVpZ2h0IC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBPdmVybGF5Lk1JTklNVU1fSEVJR0hUKSk7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydFBvc2l0aW9uLm9yaWdpbmFsWSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRQb3NpdGlvbi5vcmlnaW5hbEhlaWdodCAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wO1xuICAgICAgICAgICAgICAgICAgICBib3R0b20gPSBjb250YWluZXJSZWN0LmhlaWdodCAtIHRvcCAtIGhlaWdodDtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IG1vdmVCb3R0b20gPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRvcCA9XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydFBvc2l0aW9uLm9yaWdpbmFsWSAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRQb3NpdGlvbi5vcmlnaW5hbEhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gY2xhbXAoeSAtIHRvcCwgdG9wIDwgMCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHRoaXMub3B0aW9uc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5taW5pbXVtSW5WaWV3cG9ydEhlaWdodCA9PT0gJ251bWJlcidcbiAgICAgICAgICAgICAgICAgICAgICAgID8gLXRvcCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLm1pbmltdW1JblZpZXdwb3J0SGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgICAgICA6IE92ZXJsYXkuTUlOSU1VTV9IRUlHSFQsIE51bWJlci5NQVhfVkFMVUUpO1xuICAgICAgICAgICAgICAgICAgICBib3R0b20gPSBjb250YWluZXJSZWN0LmhlaWdodCAtIHRvcCAtIGhlaWdodDtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IG1vdmVMZWZ0ID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZWZ0ID0gY2xhbXAoeCwgLU51bWJlci5NQVhfVkFMVUUsIHN0YXJ0UG9zaXRpb24ub3JpZ2luYWxYICtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0UG9zaXRpb24ub3JpZ2luYWxXaWR0aCA+XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXJSZWN0LndpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMuZ2V0TWluaW11bVdpZHRoKGNvbnRhaW5lclJlY3Qud2lkdGgpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IE1hdGgubWF4KDAsIHN0YXJ0UG9zaXRpb24ub3JpZ2luYWxYICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydFBvc2l0aW9uLm9yaWdpbmFsV2lkdGggLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE92ZXJsYXkuTUlOSU1VTV9XSURUSCkpO1xuICAgICAgICAgICAgICAgICAgICB3aWR0aCA9XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydFBvc2l0aW9uLm9yaWdpbmFsWCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRQb3NpdGlvbi5vcmlnaW5hbFdpZHRoIC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0O1xuICAgICAgICAgICAgICAgICAgICByaWdodCA9IGNvbnRhaW5lclJlY3Qud2lkdGggLSBsZWZ0IC0gd2lkdGg7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCBtb3ZlUmlnaHQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxlZnQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRQb3NpdGlvbi5vcmlnaW5hbFggLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0UG9zaXRpb24ub3JpZ2luYWxXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBjbGFtcCh4IC0gbGVmdCwgbGVmdCA8IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiB0aGlzLm9wdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWluaW11bUluVmlld3BvcnRXaWR0aCA9PT0gJ251bWJlcidcbiAgICAgICAgICAgICAgICAgICAgICAgID8gLWxlZnQgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5taW5pbXVtSW5WaWV3cG9ydFdpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgICA6IE92ZXJsYXkuTUlOSU1VTV9XSURUSCwgTnVtYmVyLk1BWF9WQUxVRSk7XG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0ID0gY29udGFpbmVyUmVjdC53aWR0aCAtIGxlZnQgLSB3aWR0aDtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RvcCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBtb3ZlVG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm90dG9tJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vdmVCb3R0b20oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vdmVMZWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgbW92ZVJpZ2h0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndG9wbGVmdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBtb3ZlVG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb3ZlTGVmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RvcHJpZ2h0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vdmVUb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vdmVSaWdodCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvdHRvbWxlZnQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgbW92ZUJvdHRvbSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbW92ZUxlZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdib3R0b21yaWdodCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBtb3ZlQm90dG9tKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb3ZlUmlnaHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBib3VuZHMgPSB7fTtcbiAgICAgICAgICAgICAgICAvLyBBbmNob3IgdG8gdG9wIG9yIHRvIGJvdHRvbSBkZXBlbmRpbmcgb24gd2hpY2ggb25lIGlzIGNsb3NlclxuICAgICAgICAgICAgICAgIGlmICh0b3AgPD0gYm90dG9tKSB7XG4gICAgICAgICAgICAgICAgICAgIGJvdW5kcy50b3AgPSB0b3A7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBib3VuZHMuYm90dG9tID0gYm90dG9tO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBBbmNob3IgdG8gbGVmdCBvciB0byByaWdodCBkZXBlbmRpbmcgb24gd2hpY2ggb25lIGlzIGNsb3NlclxuICAgICAgICAgICAgICAgIGlmIChsZWZ0IDw9IHJpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIGJvdW5kcy5sZWZ0ID0gbGVmdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGJvdW5kcy5yaWdodCA9IHJpZ2h0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBib3VuZHMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICAgICAgICAgIGJvdW5kcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0Qm91bmRzKGJvdW5kcyk7XG4gICAgICAgICAgICB9KSwge1xuICAgICAgICAgICAgICAgIGRpc3Bvc2U6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWZyYW1lcy5yZWxlYXNlKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sIGFkZERpc3Bvc2FibGVMaXN0ZW5lcih3aW5kb3csICdwb2ludGVydXAnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgbW92ZS5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fb25EaWRDaGFuZ2VFbmQuZmlyZSgpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGdldE1pbmltdW1XaWR0aCh3aWR0aCkge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5taW5pbXVtSW5WaWV3cG9ydFdpZHRoID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcmV0dXJuIHdpZHRoIC0gdGhpcy5vcHRpb25zLm1pbmltdW1JblZpZXdwb3J0V2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGdldE1pbmltdW1IZWlnaHQoaGVpZ2h0KSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLm1pbmltdW1JblZpZXdwb3J0SGVpZ2h0ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcmV0dXJuIGhlaWdodCAtIHRoaXMub3B0aW9ucy5taW5pbXVtSW5WaWV3cG9ydEhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgZGlzcG9zZSgpIHtcbiAgICAgICAgYXJpYWxMZXZlbFRyYWNrZXIuZGVzdHJveSh0aGlzLl9lbGVtZW50KTtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5yZW1vdmUoKTtcbiAgICAgICAgc3VwZXIuZGlzcG9zZSgpO1xuICAgIH1cbn1cbk92ZXJsYXkuTUlOSU1VTV9IRUlHSFQgPSAyMDtcbk92ZXJsYXkuTUlOSU1VTV9XSURUSCA9IDIwO1xuIiwiaW1wb3J0IHsgRHJhZ0FuZERyb3BPYnNlcnZlciB9IGZyb20gJy4uL2RuZC9kbmQnO1xuaW1wb3J0IHsgZ2V0RG9tTm9kZVBhZ2VQb3NpdGlvbiwgdG9nZ2xlQ2xhc3MgfSBmcm9tICcuLi9kb20nO1xuaW1wb3J0IHsgQ29tcG9zaXRlRGlzcG9zYWJsZSwgRGlzcG9zYWJsZSwgTXV0YWJsZURpc3Bvc2FibGUsIH0gZnJvbSAnLi4vbGlmZWN5Y2xlJztcbmNsYXNzIFBvc2l0aW9uQ2FjaGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmNhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLmN1cnJlbnRGcmFtZUlkID0gMDtcbiAgICAgICAgdGhpcy5yYWZJZCA9IG51bGw7XG4gICAgfVxuICAgIGdldFBvc2l0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgY2FjaGVkID0gdGhpcy5jYWNoZS5nZXQoZWxlbWVudCk7XG4gICAgICAgIGlmIChjYWNoZWQgJiYgY2FjaGVkLmZyYW1lSWQgPT09IHRoaXMuY3VycmVudEZyYW1lSWQpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWQucmVjdDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNjaGVkdWxlRnJhbWVVcGRhdGUoKTtcbiAgICAgICAgY29uc3QgcmVjdCA9IGdldERvbU5vZGVQYWdlUG9zaXRpb24oZWxlbWVudCk7XG4gICAgICAgIHRoaXMuY2FjaGUuc2V0KGVsZW1lbnQsIHsgcmVjdCwgZnJhbWVJZDogdGhpcy5jdXJyZW50RnJhbWVJZCB9KTtcbiAgICAgICAgcmV0dXJuIHJlY3Q7XG4gICAgfVxuICAgIGludmFsaWRhdGUoKSB7XG4gICAgICAgIHRoaXMuY3VycmVudEZyYW1lSWQrKztcbiAgICB9XG4gICAgc2NoZWR1bGVGcmFtZVVwZGF0ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMucmFmSWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMucmFmSWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50RnJhbWVJZCsrO1xuICAgICAgICAgICAgdGhpcy5yYWZJZCA9IG51bGw7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZUZvY3VzYWJsZUVsZW1lbnQoKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVsZW1lbnQudGFiSW5kZXggPSAtMTtcbiAgICByZXR1cm4gZWxlbWVudDtcbn1cbmV4cG9ydCBjbGFzcyBPdmVybGF5UmVuZGVyQ29udGFpbmVyIGV4dGVuZHMgQ29tcG9zaXRlRGlzcG9zYWJsZSB7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudCwgYWNjZXNzb3IpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgdGhpcy5hY2Nlc3NvciA9IGFjY2Vzc29yO1xuICAgICAgICB0aGlzLm1hcCA9IHt9O1xuICAgICAgICB0aGlzLl9kaXNwb3NlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnBvc2l0aW9uQ2FjaGUgPSBuZXcgUG9zaXRpb25DYWNoZSgpO1xuICAgICAgICB0aGlzLnBlbmRpbmdVcGRhdGVzID0gbmV3IFNldCgpO1xuICAgICAgICB0aGlzLmFkZERpc3Bvc2FibGVzKERpc3Bvc2FibGUuZnJvbSgoKSA9PiB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIE9iamVjdC52YWx1ZXModGhpcy5tYXApKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUuZGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgdmFsdWUuZGVzdHJveS5kaXNwb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9kaXNwb3NlZCA9IHRydWU7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgdXBkYXRlQWxsUG9zaXRpb25zKCkge1xuICAgICAgICBpZiAodGhpcy5fZGlzcG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBJbnZhbGlkYXRlIHBvc2l0aW9uIGNhY2hlIHRvIGZvcmNlIHJlY2FsY3VsYXRpb25cbiAgICAgICAgdGhpcy5wb3NpdGlvbkNhY2hlLmludmFsaWRhdGUoKTtcbiAgICAgICAgLy8gQ2FsbCByZXNpemUgZnVuY3Rpb24gZGlyZWN0bHkgZm9yIGFsbCB2aXNpYmxlIHBhbmVsc1xuICAgICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIE9iamVjdC52YWx1ZXModGhpcy5tYXApKSB7XG4gICAgICAgICAgICBpZiAoZW50cnkucGFuZWwuYXBpLmlzVmlzaWJsZSAmJiBlbnRyeS5yZXNpemUpIHtcbiAgICAgICAgICAgICAgICBlbnRyeS5yZXNpemUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBkZXRhdGNoKHBhbmVsKSB7XG4gICAgICAgIGlmICh0aGlzLm1hcFtwYW5lbC5hcGkuaWRdKSB7XG4gICAgICAgICAgICBjb25zdCB7IGRpc3Bvc2FibGUsIGRlc3Ryb3kgfSA9IHRoaXMubWFwW3BhbmVsLmFwaS5pZF07XG4gICAgICAgICAgICBkaXNwb3NhYmxlLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIGRlc3Ryb3kuZGlzcG9zZSgpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMubWFwW3BhbmVsLmFwaS5pZF07XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGF0dGFjaChvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgcGFuZWwsIHJlZmVyZW5jZUNvbnRhaW5lciB9ID0gb3B0aW9ucztcbiAgICAgICAgaWYgKCF0aGlzLm1hcFtwYW5lbC5hcGkuaWRdKSB7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gY3JlYXRlRm9jdXNhYmxlRWxlbWVudCgpO1xuICAgICAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSAnZHYtcmVuZGVyLW92ZXJsYXknO1xuICAgICAgICAgICAgdGhpcy5tYXBbcGFuZWwuYXBpLmlkXSA9IHtcbiAgICAgICAgICAgICAgICBwYW5lbCxcbiAgICAgICAgICAgICAgICBkaXNwb3NhYmxlOiBEaXNwb3NhYmxlLk5PTkUsXG4gICAgICAgICAgICAgICAgZGVzdHJveTogRGlzcG9zYWJsZS5OT05FLFxuICAgICAgICAgICAgICAgIGVsZW1lbnQsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZvY3VzQ29udGFpbmVyID0gdGhpcy5tYXBbcGFuZWwuYXBpLmlkXS5lbGVtZW50O1xuICAgICAgICBpZiAocGFuZWwudmlldy5jb250ZW50LmVsZW1lbnQucGFyZW50RWxlbWVudCAhPT0gZm9jdXNDb250YWluZXIpIHtcbiAgICAgICAgICAgIGZvY3VzQ29udGFpbmVyLmFwcGVuZENoaWxkKHBhbmVsLnZpZXcuY29udGVudC5lbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9jdXNDb250YWluZXIucGFyZW50RWxlbWVudCAhPT0gdGhpcy5lbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQoZm9jdXNDb250YWluZXIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc2l6ZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBhbmVsSWQgPSBwYW5lbC5hcGkuaWQ7XG4gICAgICAgICAgICBpZiAodGhpcy5wZW5kaW5nVXBkYXRlcy5oYXMocGFuZWxJZCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47IC8vIFVwZGF0ZSBhbHJlYWR5IHNjaGVkdWxlZFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5wZW5kaW5nVXBkYXRlcy5hZGQocGFuZWxJZCk7XG4gICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucGVuZGluZ1VwZGF0ZXMuZGVsZXRlKHBhbmVsSWQpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzRGlzcG9zZWQgfHwgIXRoaXMubWFwW3BhbmVsSWRdKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgYm94ID0gdGhpcy5wb3NpdGlvbkNhY2hlLmdldFBvc2l0aW9uKHJlZmVyZW5jZUNvbnRhaW5lci5lbGVtZW50KTtcbiAgICAgICAgICAgICAgICBjb25zdCBib3gyID0gdGhpcy5wb3NpdGlvbkNhY2hlLmdldFBvc2l0aW9uKHRoaXMuZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgLy8gVXNlIHRyYWRpdGlvbmFsIHBvc2l0aW9uaW5nIGZvciBvdmVybGF5IGNvbnRhaW5lcnNcbiAgICAgICAgICAgICAgICBjb25zdCBsZWZ0ID0gYm94LmxlZnQgLSBib3gyLmxlZnQ7XG4gICAgICAgICAgICAgICAgY29uc3QgdG9wID0gYm94LnRvcCAtIGJveDIudG9wO1xuICAgICAgICAgICAgICAgIGNvbnN0IHdpZHRoID0gYm94LndpZHRoO1xuICAgICAgICAgICAgICAgIGNvbnN0IGhlaWdodCA9IGJveC5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgZm9jdXNDb250YWluZXIuc3R5bGUubGVmdCA9IGAke2xlZnR9cHhgO1xuICAgICAgICAgICAgICAgIGZvY3VzQ29udGFpbmVyLnN0eWxlLnRvcCA9IGAke3RvcH1weGA7XG4gICAgICAgICAgICAgICAgZm9jdXNDb250YWluZXIuc3R5bGUud2lkdGggPSBgJHt3aWR0aH1weGA7XG4gICAgICAgICAgICAgICAgZm9jdXNDb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gYCR7aGVpZ2h0fXB4YDtcbiAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyhmb2N1c0NvbnRhaW5lciwgJ2R2LXJlbmRlci1vdmVybGF5LWZsb2F0JywgcGFuZWwuZ3JvdXAuYXBpLmxvY2F0aW9uLnR5cGUgPT09ICdmbG9hdGluZycpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHZpc2liaWxpdHlDaGFuZ2VkID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHBhbmVsLmFwaS5pc1Zpc2libGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uQ2FjaGUuaW52YWxpZGF0ZSgpO1xuICAgICAgICAgICAgICAgIHJlc2l6ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9jdXNDb250YWluZXIuc3R5bGUuZGlzcGxheSA9IHBhbmVsLmFwaS5pc1Zpc2libGUgPyAnJyA6ICdub25lJztcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgb2JzZXJ2ZXJEaXNwb3NhYmxlID0gbmV3IE11dGFibGVEaXNwb3NhYmxlKCk7XG4gICAgICAgIGNvbnN0IGNvcnJlY3RMYXllclBvc2l0aW9uID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHBhbmVsLmFwaS5sb2NhdGlvbi50eXBlID09PSAnZmxvYXRpbmcnKSB7XG4gICAgICAgICAgICAgICAgcXVldWVNaWNyb3Rhc2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmbG9hdGluZ0dyb3VwID0gdGhpcy5hY2Nlc3Nvci5mbG9hdGluZ0dyb3Vwcy5maW5kKChncm91cCkgPT4gZ3JvdXAuZ3JvdXAgPT09IHBhbmVsLmFwaS5ncm91cCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZmxvYXRpbmdHcm91cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBmbG9hdGluZ0dyb3VwLm92ZXJsYXkuZWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGV2ZWwgPSBOdW1iZXIoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2FyaWEtbGV2ZWwnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb2N1c0NvbnRhaW5lci5zdHlsZS56SW5kZXggPSBgY2FsYyh2YXIoLS1kdi1vdmVybGF5LXotaW5kZXgsIDk5OSkgKyAke2xldmVsICogMiArIDF9KWA7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlckRpc3Bvc2FibGUudmFsdWUgPSBEaXNwb3NhYmxlLmZyb20oKCkgPT4gb2JzZXJ2ZXIuZGlzY29ubmVjdCgpKTtcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShlbGVtZW50LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVGaWx0ZXI6IFsnYXJpYS1sZXZlbCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9jdXNDb250YWluZXIuc3R5bGUuekluZGV4ID0gJyc7IC8vIHJlc2V0IHRoZSB6LWluZGV4LCBwZXJoYXBzIENTUyB3aWxsIHRha2Ugb3ZlciBoZXJlXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGRpc3Bvc2FibGUgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZShvYnNlcnZlckRpc3Bvc2FibGUsIFxuICAgICAgICAvKipcbiAgICAgICAgICogc2luY2UgY29udGFpbmVyIGlzIHBvc2l0aW9uZWQgYWJzb3V0ZWx5IHdlIG11c3QgZXhwbGljaXRseSBmb3J3YXJkXG4gICAgICAgICAqIHRoZSBkbmQgZXZlbnRzIGZvciB0aGUgZXhwZWN0IGJlaGF2aW91cnMgdG8gY29udGludWUgdG8gb2NjdXIgaW4gdGVybXMgb2YgZG5kXG4gICAgICAgICAqXG4gICAgICAgICAqIHRoZSBkbmQgb2JzZXJ2ZXIgZG9lcyBub3QgbmVlZCB0byBiZSBjb25kaXRpb25hbCBvbiB3aGV0aGVyIHRoZSBwYW5lbCBpcyB2aXNpYmxlIHNpbmNlXG4gICAgICAgICAqIG5vbi12aXNpYmxlIHBhbmVscyBhcmUgJ2Rpc3BsYXk6IG5vbmUnIGFuZCBpbiBzdWNoIGNhc2UgdGhlIGRuZCBvYnNlcnZlciB3aWxsIG5vdCBmaXJlLlxuICAgICAgICAgKi9cbiAgICAgICAgbmV3IERyYWdBbmREcm9wT2JzZXJ2ZXIoZm9jdXNDb250YWluZXIsIHtcbiAgICAgICAgICAgIG9uRHJhZ0VuZDogKGUpID0+IHtcbiAgICAgICAgICAgICAgICByZWZlcmVuY2VDb250YWluZXIuZHJvcFRhcmdldC5kbmQub25EcmFnRW5kKGUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uRHJhZ0VudGVyOiAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIHJlZmVyZW5jZUNvbnRhaW5lci5kcm9wVGFyZ2V0LmRuZC5vbkRyYWdFbnRlcihlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkRyYWdMZWF2ZTogKGUpID0+IHtcbiAgICAgICAgICAgICAgICByZWZlcmVuY2VDb250YWluZXIuZHJvcFRhcmdldC5kbmQub25EcmFnTGVhdmUoZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25Ecm9wOiAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIHJlZmVyZW5jZUNvbnRhaW5lci5kcm9wVGFyZ2V0LmRuZC5vbkRyb3AoZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25EcmFnT3ZlcjogKGUpID0+IHtcbiAgICAgICAgICAgICAgICByZWZlcmVuY2VDb250YWluZXIuZHJvcFRhcmdldC5kbmQub25EcmFnT3ZlcihlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pLCBwYW5lbC5hcGkub25EaWRWaXNpYmlsaXR5Q2hhbmdlKCgpID0+IHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ29udHJvbCB0aGUgdmlzaWJpbGl0eSBvZiB0aGUgY29udGVudCwgaG93ZXZlciBldmVuIHdoZW4gbm90IHZpc2libGUgKGRpc3BsYXk6IG5vbmUpXG4gICAgICAgICAgICAgKiB0aGUgY29udGVudCBpcyBzdGlsbCBtYWludGFpbmVkIHdpdGhpbiB0aGUgRE9NIGhlbmNlIERPTSBzcGVjaWZpYyBhdHRyaWJ1dGVzXG4gICAgICAgICAgICAgKiBzdWNoIGFzIHNjcm9sbCBwb3NpdGlvbiBhcmUgbWFpbnRhaW5lZCB3aGVuIG5leHQgbWFkZSB2aXNpYmxlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2aXNpYmlsaXR5Q2hhbmdlZCgpO1xuICAgICAgICB9KSwgcGFuZWwuYXBpLm9uRGlkRGltZW5zaW9uc0NoYW5nZSgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXBhbmVsLmFwaS5pc1Zpc2libGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXNpemUoKTtcbiAgICAgICAgfSksIHBhbmVsLmFwaS5vbkRpZExvY2F0aW9uQ2hhbmdlKCgpID0+IHtcbiAgICAgICAgICAgIGNvcnJlY3RMYXllclBvc2l0aW9uKCk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5tYXBbcGFuZWwuYXBpLmlkXS5kZXN0cm95ID0gRGlzcG9zYWJsZS5mcm9tKCgpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGlmIChwYW5lbC52aWV3LmNvbnRlbnQuZWxlbWVudC5wYXJlbnRFbGVtZW50ID09PSBmb2N1c0NvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgIGZvY3VzQ29udGFpbmVyLnJlbW92ZUNoaWxkKHBhbmVsLnZpZXcuY29udGVudC5lbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIChfYSA9IGZvY3VzQ29udGFpbmVyLnBhcmVudEVsZW1lbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5yZW1vdmVDaGlsZChmb2N1c0NvbnRhaW5lcik7XG4gICAgICAgIH0pO1xuICAgICAgICBjb3JyZWN0TGF5ZXJQb3NpdGlvbigpO1xuICAgICAgICBxdWV1ZU1pY3JvdGFzaygoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc0Rpc3Bvc2VkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiB3YWl0IHVudGlsIGV2ZXJ5dGhpbmcgaGFzIGZpbmlzaGVkIGluIHRoZSBjdXJyZW50IHN0YWNrLWZyYW1lIGNhbGwgYmVmb3JlXG4gICAgICAgICAgICAgKiBjYWxsaW5nIHRoZSBmaXJzdCByZXNpemUgYXMgb3RoZXIgc2l6ZS1hbHRlcmluZyBldmVudHMgbWF5IHN0aWxsIG9jY3VyIGJlZm9yZVxuICAgICAgICAgICAgICogdGhlIGVuZCBvZiB0aGUgc3RhY2stZnJhbWUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZpc2liaWxpdHlDaGFuZ2VkKCk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBkaXNwb3NlIG9mIGxvZ2ljIGFzb2NjY2lhdGVkIHdpdGggcHJldmlvdXMgcmVmZXJlbmNlLWNvbnRhaW5lclxuICAgICAgICB0aGlzLm1hcFtwYW5lbC5hcGkuaWRdLmRpc3Bvc2FibGUuZGlzcG9zZSgpO1xuICAgICAgICAvLyBhbmQgcmVzZXQgdGhlIGRpc3Bvc2FibGUgdG8gdGhlIGFjdGl2ZSByZWZlcmVuY2UtY29udGFpbmVyXG4gICAgICAgIHRoaXMubWFwW3BhbmVsLmFwaS5pZF0uZGlzcG9zYWJsZSA9IGRpc3Bvc2FibGU7XG4gICAgICAgIC8vIHN0b3JlIHRoZSByZXNpemUgZnVuY3Rpb24gZm9yIGRpcmVjdCBhY2Nlc3NcbiAgICAgICAgdGhpcy5tYXBbcGFuZWwuYXBpLmlkXS5yZXNpemUgPSByZXNpemU7XG4gICAgICAgIHJldHVybiBmb2N1c0NvbnRhaW5lcjtcbiAgICB9XG59XG4iLCJleHBvcnQge307XG4iLCJpbXBvcnQgeyBhZGREaXNwb3NhYmxlTGlzdGVuZXIgfSBmcm9tICcuLi9ldmVudHMnO1xuaW1wb3J0IHsgQ29tcG9zaXRlRGlzcG9zYWJsZSwgTXV0YWJsZURpc3Bvc2FibGUgfSBmcm9tICcuLi9saWZlY3ljbGUnO1xuaW1wb3J0IHsgdG9nZ2xlQ2xhc3MgfSBmcm9tICcuLi9kb20nO1xuaW1wb3J0IHsgY3JlYXRlQ2hldnJvblJpZ2h0QnV0dG9uLCBjcmVhdGVFeHBhbmRNb3JlQnV0dG9uIH0gZnJvbSAnLi4vc3ZnJztcbmV4cG9ydCBjbGFzcyBEZWZhdWx0SGVhZGVyIGV4dGVuZHMgQ29tcG9zaXRlRGlzcG9zYWJsZSB7XG4gICAgZ2V0IGVsZW1lbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbGVtZW50O1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fZXhwYW5kZWRJY29uID0gY3JlYXRlRXhwYW5kTW9yZUJ1dHRvbigpO1xuICAgICAgICB0aGlzLl9jb2xsYXBzZWRJY29uID0gY3JlYXRlQ2hldnJvblJpZ2h0QnV0dG9uKCk7XG4gICAgICAgIHRoaXMuZGlzcG9zYWJsZSA9IG5ldyBNdXRhYmxlRGlzcG9zYWJsZSgpO1xuICAgICAgICB0aGlzLmFwaVJlZiA9IHtcbiAgICAgICAgICAgIGFwaTogbnVsbCxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NOYW1lID0gJ2R2LWRlZmF1bHQtaGVhZGVyJztcbiAgICAgICAgdGhpcy5fY29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgICAgdGhpcy5fZXhwYW5kZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy5fZXhwYW5kZXIuY2xhc3NOYW1lID0gJ2R2LXBhbmUtaGVhZGVyLWljb24nO1xuICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5fZXhwYW5kZXIpO1xuICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5fY29udGVudCk7XG4gICAgICAgIHRoaXMuYWRkRGlzcG9zYWJsZXMoYWRkRGlzcG9zYWJsZUxpc3RlbmVyKHRoaXMuX2VsZW1lbnQsICdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIChfYSA9IHRoaXMuYXBpUmVmLmFwaSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNldEV4cGFuZGVkKCF0aGlzLmFwaVJlZi5hcGkuaXNFeHBhbmRlZCk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgaW5pdChwYXJhbXMpIHtcbiAgICAgICAgdGhpcy5hcGlSZWYuYXBpID0gcGFyYW1zLmFwaTtcbiAgICAgICAgdGhpcy5fY29udGVudC50ZXh0Q29udGVudCA9IHBhcmFtcy50aXRsZTtcbiAgICAgICAgdGhpcy51cGRhdGVJY29uKCk7XG4gICAgICAgIHRoaXMuZGlzcG9zYWJsZS52YWx1ZSA9IHBhcmFtcy5hcGkub25EaWRFeHBhbnNpb25DaGFuZ2UoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVJY29uKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB1cGRhdGVJY29uKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IGlzRXhwYW5kZWQgPSAhISgoX2EgPSB0aGlzLmFwaVJlZi5hcGkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pc0V4cGFuZGVkKTtcbiAgICAgICAgdG9nZ2xlQ2xhc3ModGhpcy5fZXhwYW5kZXIsICdjb2xsYXBzZWQnLCAhaXNFeHBhbmRlZCk7XG4gICAgICAgIGlmIChpc0V4cGFuZGVkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fZXhwYW5kZXIuY29udGFpbnModGhpcy5fY29sbGFwc2VkSWNvbikpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jb2xsYXBzZWRJY29uLnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLl9leHBhbmRlci5jb250YWlucyh0aGlzLl9leHBhbmRlZEljb24pKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXhwYW5kZXIuYXBwZW5kQ2hpbGQodGhpcy5fZXhwYW5kZWRJY29uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9leHBhbmRlci5jb250YWlucyh0aGlzLl9leHBhbmRlZEljb24pKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXhwYW5kZWRJY29uLnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLl9leHBhbmRlci5jb250YWlucyh0aGlzLl9jb2xsYXBzZWRJY29uKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2V4cGFuZGVyLmFwcGVuZENoaWxkKHRoaXMuX2NvbGxhcHNlZEljb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHVwZGF0ZShfcGFyYW1zKSB7XG4gICAgICAgIC8vXG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHRoaXMuZGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gICAgICAgIHN1cGVyLmRpc3Bvc2UoKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBQYW5ldmlld0FwaSB9IGZyb20gJy4uL2FwaS9jb21wb25lbnQuYXBpJztcbmltcG9ydCB7IERyYWdIYW5kbGVyIH0gZnJvbSAnLi4vZG5kL2Fic3RyYWN0RHJhZ0hhbmRsZXInO1xuaW1wb3J0IHsgZ2V0UGFuZURhdGEsIExvY2FsU2VsZWN0aW9uVHJhbnNmZXIsIFBhbmVUcmFuc2ZlciwgfSBmcm9tICcuLi9kbmQvZGF0YVRyYW5zZmVyJztcbmltcG9ydCB7IERyb3B0YXJnZXQgfSBmcm9tICcuLi9kbmQvZHJvcHRhcmdldCc7XG5pbXBvcnQgeyBFbWl0dGVyIH0gZnJvbSAnLi4vZXZlbnRzJztcbmltcG9ydCB7IFBhbmV2aWV3VW5oYW5kbGVkRHJhZ092ZXJFdmVudCwgfSBmcm9tICcuL29wdGlvbnMnO1xuaW1wb3J0IHsgUGFuZXZpZXdQYW5lbCwgfSBmcm9tICcuL3BhbmV2aWV3UGFuZWwnO1xuZXhwb3J0IGNsYXNzIERyYWdnYWJsZVBhbmV2aWV3UGFuZWwgZXh0ZW5kcyBQYW5ldmlld1BhbmVsIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIGlkOiBvcHRpb25zLmlkLFxuICAgICAgICAgICAgY29tcG9uZW50OiBvcHRpb25zLmNvbXBvbmVudCxcbiAgICAgICAgICAgIGhlYWRlckNvbXBvbmVudDogb3B0aW9ucy5oZWFkZXJDb21wb25lbnQsXG4gICAgICAgICAgICBvcmllbnRhdGlvbjogb3B0aW9ucy5vcmllbnRhdGlvbixcbiAgICAgICAgICAgIGlzRXhwYW5kZWQ6IG9wdGlvbnMuaXNFeHBhbmRlZCxcbiAgICAgICAgICAgIGlzSGVhZGVyVmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGhlYWRlclNpemU6IG9wdGlvbnMuaGVhZGVyU2l6ZSxcbiAgICAgICAgICAgIG1pbmltdW1Cb2R5U2l6ZTogb3B0aW9ucy5taW5pbXVtQm9keVNpemUsXG4gICAgICAgICAgICBtYXhpbXVtQm9keVNpemU6IG9wdGlvbnMubWF4aW11bUJvZHlTaXplLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fb25EaWREcm9wID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZERyb3AgPSB0aGlzLl9vbkRpZERyb3AuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uVW5oYW5kbGVkRHJhZ092ZXJFdmVudCA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25VbmhhbmRsZWREcmFnT3ZlckV2ZW50ID0gdGhpcy5fb25VbmhhbmRsZWREcmFnT3ZlckV2ZW50LmV2ZW50O1xuICAgICAgICB0aGlzLmFjY2Vzc29yID0gb3B0aW9ucy5hY2Nlc3NvcjtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyh0aGlzLl9vbkRpZERyb3AsIHRoaXMuX29uVW5oYW5kbGVkRHJhZ092ZXJFdmVudCk7XG4gICAgICAgIGlmICghb3B0aW9ucy5kaXNhYmxlRG5kKSB7XG4gICAgICAgICAgICB0aGlzLmluaXREcmFnRmVhdHVyZXMoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpbml0RHJhZ0ZlYXR1cmVzKCkge1xuICAgICAgICBpZiAoIXRoaXMuaGVhZGVyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaWQgPSB0aGlzLmlkO1xuICAgICAgICBjb25zdCBhY2Nlc3NvcklkID0gdGhpcy5hY2Nlc3Nvci5pZDtcbiAgICAgICAgdGhpcy5oZWFkZXIuZHJhZ2dhYmxlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5oYW5kbGVyID0gbmV3IChjbGFzcyBQYW5lRHJhZ0hhbmRsZXIgZXh0ZW5kcyBEcmFnSGFuZGxlciB7XG4gICAgICAgICAgICBnZXREYXRhKCkge1xuICAgICAgICAgICAgICAgIExvY2FsU2VsZWN0aW9uVHJhbnNmZXIuZ2V0SW5zdGFuY2UoKS5zZXREYXRhKFtuZXcgUGFuZVRyYW5zZmVyKGFjY2Vzc29ySWQsIGlkKV0sIFBhbmVUcmFuc2Zlci5wcm90b3R5cGUpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3Bvc2U6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIExvY2FsU2VsZWN0aW9uVHJhbnNmZXIuZ2V0SW5zdGFuY2UoKS5jbGVhckRhdGEoUGFuZVRyYW5zZmVyLnByb3RvdHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkodGhpcy5oZWFkZXIpO1xuICAgICAgICB0aGlzLnRhcmdldCA9IG5ldyBEcm9wdGFyZ2V0KHRoaXMuZWxlbWVudCwge1xuICAgICAgICAgICAgYWNjZXB0ZWRUYXJnZXRab25lczogWyd0b3AnLCAnYm90dG9tJ10sXG4gICAgICAgICAgICBvdmVybGF5TW9kZWw6IHtcbiAgICAgICAgICAgICAgICBhY3RpdmF0aW9uU2l6ZTogeyB0eXBlOiAncGVyY2VudGFnZScsIHZhbHVlOiA1MCB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNhbkRpc3BsYXlPdmVybGF5OiAoZXZlbnQsIHBvc2l0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IGdldFBhbmVEYXRhKCk7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEucGFuZUlkICE9PSB0aGlzLmlkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnZpZXdJZCA9PT0gdGhpcy5hY2Nlc3Nvci5pZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgZmlyZWRFdmVudCA9IG5ldyBQYW5ldmlld1VuaGFuZGxlZERyYWdPdmVyRXZlbnQoZXZlbnQsIHBvc2l0aW9uLCBnZXRQYW5lRGF0YSwgdGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fb25VbmhhbmRsZWREcmFnT3ZlckV2ZW50LmZpcmUoZmlyZWRFdmVudCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpcmVkRXZlbnQuaXNBY2NlcHRlZDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmFkZERpc3Bvc2FibGVzKHRoaXMuX29uRGlkRHJvcCwgdGhpcy5oYW5kbGVyLCB0aGlzLnRhcmdldCwgdGhpcy50YXJnZXQub25Ecm9wKChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vbkRyb3AoZXZlbnQpO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIG9uRHJvcChldmVudCkge1xuICAgICAgICBjb25zdCBkYXRhID0gZ2V0UGFuZURhdGEoKTtcbiAgICAgICAgaWYgKCFkYXRhIHx8IGRhdGEudmlld0lkICE9PSB0aGlzLmFjY2Vzc29yLmlkKSB7XG4gICAgICAgICAgICAvLyBpZiB0aGVyZSBpcyBubyBsb2NhbCBkcmFnIGV2ZW50IGZvciB0aGlzIHBhbmVsXG4gICAgICAgICAgICAvLyBvciBpZiB0aGUgZHJhZyBldmVudCB3YXMgY3JlYXRpbmcgYnkgYW5vdGhlciBQYW5ldmlldyBpbnN0YW5jZVxuICAgICAgICAgICAgdGhpcy5fb25EaWREcm9wLmZpcmUoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBldmVudCksIHsgcGFuZWw6IHRoaXMsIGFwaTogbmV3IFBhbmV2aWV3QXBpKHRoaXMuYWNjZXNzb3IpLCBnZXREYXRhOiBnZXRQYW5lRGF0YSB9KSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29udGFpbmVyQXBpID0gdGhpcy5fcGFyYW1zXG4gICAgICAgICAgICAuY29udGFpbmVyQXBpO1xuICAgICAgICBjb25zdCBwYW5lbElkID0gZGF0YS5wYW5lSWQ7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nUGFuZWwgPSBjb250YWluZXJBcGkuZ2V0UGFuZWwocGFuZWxJZCk7XG4gICAgICAgIGlmICghZXhpc3RpbmdQYW5lbCkge1xuICAgICAgICAgICAgLy8gaWYgdGhlIHBhbmVsIGRvZXNuJ3QgZXhpc3RcbiAgICAgICAgICAgIHRoaXMuX29uRGlkRHJvcC5maXJlKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZXZlbnQpLCB7IHBhbmVsOiB0aGlzLCBnZXREYXRhOiBnZXRQYW5lRGF0YSwgYXBpOiBuZXcgUGFuZXZpZXdBcGkodGhpcy5hY2Nlc3NvcikgfSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFsbFBhbmVscyA9IGNvbnRhaW5lckFwaS5wYW5lbHM7XG4gICAgICAgIGNvbnN0IGZyb21JbmRleCA9IGFsbFBhbmVscy5pbmRleE9mKGV4aXN0aW5nUGFuZWwpO1xuICAgICAgICBsZXQgdG9JbmRleCA9IGNvbnRhaW5lckFwaS5wYW5lbHMuaW5kZXhPZih0aGlzKTtcbiAgICAgICAgaWYgKGV2ZW50LnBvc2l0aW9uID09PSAnbGVmdCcgfHwgZXZlbnQucG9zaXRpb24gPT09ICd0b3AnKSB7XG4gICAgICAgICAgICB0b0luZGV4ID0gTWF0aC5tYXgoMCwgdG9JbmRleCAtIDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldmVudC5wb3NpdGlvbiA9PT0gJ3JpZ2h0JyB8fCBldmVudC5wb3NpdGlvbiA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgICAgIGlmIChmcm9tSW5kZXggPiB0b0luZGV4KSB7XG4gICAgICAgICAgICAgICAgdG9JbmRleCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdG9JbmRleCA9IE1hdGgubWluKGFsbFBhbmVscy5sZW5ndGggLSAxLCB0b0luZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBjb250YWluZXJBcGkubW92ZVBhbmVsKGZyb21JbmRleCwgdG9JbmRleCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQWNjZXB0YWJsZUV2ZW50IH0gZnJvbSAnLi4vZXZlbnRzJztcbmV4cG9ydCBjb25zdCBQUk9QRVJUWV9LRVlTX1BBTkVWSUVXID0gKCgpID0+IHtcbiAgICAvKipcbiAgICAgKiBieSByZWFkb25nIHRoZSBrZXlzIGZyb20gYW4gZW1wdHkgdmFsdWUgb2JqZWN0IFR5cGVTY3JpcHQgd2lsbCBlcnJvclxuICAgICAqIHdoZW4gd2UgYWRkIG9yIHJlbW92ZSBuZXcgcHJvcGVydGllcyB0byBgRG9ja3ZpZXdPcHRpb25zYFxuICAgICAqL1xuICAgIGNvbnN0IHByb3BlcnRpZXMgPSB7XG4gICAgICAgIGRpc2FibGVBdXRvUmVzaXppbmc6IHVuZGVmaW5lZCxcbiAgICAgICAgZGlzYWJsZURuZDogdW5kZWZpbmVkLFxuICAgICAgICBjbGFzc05hbWU6IHVuZGVmaW5lZCxcbiAgICB9O1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKTtcbn0pKCk7XG5leHBvcnQgY2xhc3MgUGFuZXZpZXdVbmhhbmRsZWREcmFnT3ZlckV2ZW50IGV4dGVuZHMgQWNjZXB0YWJsZUV2ZW50IHtcbiAgICBjb25zdHJ1Y3RvcihuYXRpdmVFdmVudCwgcG9zaXRpb24sIGdldERhdGEsIHBhbmVsKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMubmF0aXZlRXZlbnQgPSBuYXRpdmVFdmVudDtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHBvc2l0aW9uO1xuICAgICAgICB0aGlzLmdldERhdGEgPSBnZXREYXRhO1xuICAgICAgICB0aGlzLnBhbmVsID0gcGFuZWw7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgU3BsaXR2aWV3LCBPcmllbnRhdGlvbiwgfSBmcm9tICcuLi9zcGxpdHZpZXcvc3BsaXR2aWV3JztcbmltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUgfSBmcm9tICcuLi9saWZlY3ljbGUnO1xuaW1wb3J0IHsgRW1pdHRlciB9IGZyb20gJy4uL2V2ZW50cyc7XG5pbXBvcnQgeyBhZGRDbGFzc2VzLCByZW1vdmVDbGFzc2VzIH0gZnJvbSAnLi4vZG9tJztcbmV4cG9ydCBjbGFzcyBQYW5ldmlldyBleHRlbmRzIENvbXBvc2l0ZURpc3Bvc2FibGUge1xuICAgIGdldCBvbkRpZEFkZFZpZXcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNwbGl0dmlldy5vbkRpZEFkZFZpZXc7XG4gICAgfVxuICAgIGdldCBvbkRpZFJlbW92ZVZpZXcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNwbGl0dmlldy5vbkRpZFJlbW92ZVZpZXc7XG4gICAgfVxuICAgIGdldCBtaW5pbXVtU2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3BsaXR2aWV3Lm1pbmltdW1TaXplO1xuICAgIH1cbiAgICBnZXQgbWF4aW11bVNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNwbGl0dmlldy5tYXhpbXVtU2l6ZTtcbiAgICB9XG4gICAgZ2V0IG9yaWVudGF0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zcGxpdHZpZXcub3JpZW50YXRpb247XG4gICAgfVxuICAgIGdldCBzaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zcGxpdHZpZXcuc2l6ZTtcbiAgICB9XG4gICAgZ2V0IG9ydGhvZ29uYWxTaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zcGxpdHZpZXcub3J0aG9nb25hbFNpemU7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lciwgb3B0aW9ucykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMucGFuZUl0ZW1zID0gW107XG4gICAgICAgIHRoaXMuc2tpcEFuaW1hdGlvbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9vbkRpZENoYW5nZSA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRDaGFuZ2UgPSB0aGlzLl9vbkRpZENoYW5nZS5ldmVudDtcbiAgICAgICAgdGhpcy5fb3JpZW50YXRpb24gPSAoX2EgPSBvcHRpb25zLm9yaWVudGF0aW9uKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBPcmllbnRhdGlvbi5WRVJUSUNBTDtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc05hbWUgPSAnZHYtcGFuZS1jb250YWluZXInO1xuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5lbGVtZW50KTtcbiAgICAgICAgdGhpcy5zcGxpdHZpZXcgPSBuZXcgU3BsaXR2aWV3KHRoaXMuZWxlbWVudCwge1xuICAgICAgICAgICAgb3JpZW50YXRpb246IHRoaXMuX29yaWVudGF0aW9uLFxuICAgICAgICAgICAgcHJvcG9ydGlvbmFsTGF5b3V0OiBmYWxzZSxcbiAgICAgICAgICAgIGRlc2NyaXB0b3I6IG9wdGlvbnMuZGVzY3JpcHRvcixcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGlmIHdlJ3ZlIGFkZGVkIHZpZXdzIGZyb20gdGhlIGRlc2NyaXB0b3Igd2UgbmVlZCB0b1xuICAgICAgICAvLyBhZGQgdGhlIHBhbmVzIHRvIG91ciBQYW5lIGFycmF5IGFuZCBzZXR1cCBhbmltYXRpb25cbiAgICAgICAgdGhpcy5nZXRQYW5lcygpLmZvckVhY2goKHBhbmUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGRpc3Bvc2FibGUgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZShwYW5lLm9uRGlkQ2hhbmdlRXhwYW5zaW9uU3RhdGUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0dXBBbmltYXRpb24oKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9vbkRpZENoYW5nZS5maXJlKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBjb25zdCBwYW5lSXRlbSA9IHtcbiAgICAgICAgICAgICAgICBwYW5lLFxuICAgICAgICAgICAgICAgIGRpc3Bvc2FibGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcG9zZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLnBhbmVJdGVtcy5wdXNoKHBhbmVJdGVtKTtcbiAgICAgICAgICAgIHBhbmUub3J0aG9nb25hbFNpemUgPSB0aGlzLnNwbGl0dmlldy5vcnRob2dvbmFsU2l6ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYWRkRGlzcG9zYWJsZXModGhpcy5fb25EaWRDaGFuZ2UsIHRoaXMuc3BsaXR2aWV3Lm9uRGlkU2FzaEVuZCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9vbkRpZENoYW5nZS5maXJlKHVuZGVmaW5lZCk7XG4gICAgICAgIH0pLCB0aGlzLnNwbGl0dmlldy5vbkRpZEFkZFZpZXcoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25EaWRDaGFuZ2UuZmlyZSgpO1xuICAgICAgICB9KSwgdGhpcy5zcGxpdHZpZXcub25EaWRSZW1vdmVWaWV3KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX29uRGlkQ2hhbmdlLmZpcmUoKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBzZXRWaWV3VmlzaWJsZShpbmRleCwgdmlzaWJsZSkge1xuICAgICAgICB0aGlzLnNwbGl0dmlldy5zZXRWaWV3VmlzaWJsZShpbmRleCwgdmlzaWJsZSk7XG4gICAgfVxuICAgIGFkZFBhbmUocGFuZSwgc2l6ZSwgaW5kZXggPSB0aGlzLnNwbGl0dmlldy5sZW5ndGgsIHNraXBMYXlvdXQgPSBmYWxzZSkge1xuICAgICAgICBjb25zdCBkaXNwb3NhYmxlID0gcGFuZS5vbkRpZENoYW5nZUV4cGFuc2lvblN0YXRlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2V0dXBBbmltYXRpb24oKTtcbiAgICAgICAgICAgIHRoaXMuX29uRGlkQ2hhbmdlLmZpcmUodW5kZWZpbmVkKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHBhbmVJdGVtID0ge1xuICAgICAgICAgICAgcGFuZSxcbiAgICAgICAgICAgIGRpc3Bvc2FibGU6IHtcbiAgICAgICAgICAgICAgICBkaXNwb3NlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3Bvc2FibGUuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnBhbmVJdGVtcy5zcGxpY2UoaW5kZXgsIDAsIHBhbmVJdGVtKTtcbiAgICAgICAgcGFuZS5vcnRob2dvbmFsU2l6ZSA9IHRoaXMuc3BsaXR2aWV3Lm9ydGhvZ29uYWxTaXplO1xuICAgICAgICB0aGlzLnNwbGl0dmlldy5hZGRWaWV3KHBhbmUsIHNpemUsIGluZGV4LCBza2lwTGF5b3V0KTtcbiAgICB9XG4gICAgZ2V0Vmlld1NpemUoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3BsaXR2aWV3LmdldFZpZXdTaXplKGluZGV4KTtcbiAgICB9XG4gICAgZ2V0UGFuZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNwbGl0dmlldy5nZXRWaWV3cygpO1xuICAgIH1cbiAgICByZW1vdmVQYW5lKGluZGV4LCBvcHRpb25zID0geyBza2lwRGlzcG9zZTogZmFsc2UgfSkge1xuICAgICAgICBjb25zdCBwYW5lSXRlbSA9IHRoaXMucGFuZUl0ZW1zLnNwbGljZShpbmRleCwgMSlbMF07XG4gICAgICAgIHRoaXMuc3BsaXR2aWV3LnJlbW92ZVZpZXcoaW5kZXgpO1xuICAgICAgICBpZiAoIW9wdGlvbnMuc2tpcERpc3Bvc2UpIHtcbiAgICAgICAgICAgIHBhbmVJdGVtLmRpc3Bvc2FibGUuZGlzcG9zZSgpO1xuICAgICAgICAgICAgcGFuZUl0ZW0ucGFuZS5kaXNwb3NlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhbmVJdGVtO1xuICAgIH1cbiAgICBtb3ZlVmlldyhmcm9tLCB0bykge1xuICAgICAgICBpZiAoZnJvbSA9PT0gdG8pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2aWV3ID0gdGhpcy5yZW1vdmVQYW5lKGZyb20sIHsgc2tpcERpc3Bvc2U6IHRydWUgfSk7XG4gICAgICAgIHRoaXMuc2tpcEFuaW1hdGlvbiA9IHRydWU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmFkZFBhbmUodmlldy5wYW5lLCB2aWV3LnBhbmUuc2l6ZSwgdG8sIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMuc2tpcEFuaW1hdGlvbiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxheW91dChzaXplLCBvcnRob2dvbmFsU2l6ZSkge1xuICAgICAgICB0aGlzLnNwbGl0dmlldy5sYXlvdXQoc2l6ZSwgb3J0aG9nb25hbFNpemUpO1xuICAgIH1cbiAgICBzZXR1cEFuaW1hdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuc2tpcEFuaW1hdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmFuaW1hdGlvblRpbWVyKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5hbmltYXRpb25UaW1lcik7XG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvblRpbWVyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGFkZENsYXNzZXModGhpcy5lbGVtZW50LCAnZHYtYW5pbWF0ZWQnKTtcbiAgICAgICAgdGhpcy5hbmltYXRpb25UaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25UaW1lciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzZXModGhpcy5lbGVtZW50LCAnZHYtYW5pbWF0ZWQnKTtcbiAgICAgICAgfSwgMjAwKTtcbiAgICB9XG4gICAgZGlzcG9zZSgpIHtcbiAgICAgICAgc3VwZXIuZGlzcG9zZSgpO1xuICAgICAgICBpZiAodGhpcy5hbmltYXRpb25UaW1lcikge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuYW5pbWF0aW9uVGltZXIpO1xuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25UaW1lciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBhbmVJdGVtcy5mb3JFYWNoKChwYW5lSXRlbSkgPT4ge1xuICAgICAgICAgICAgcGFuZUl0ZW0uZGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gICAgICAgICAgICBwYW5lSXRlbS5wYW5lLmRpc3Bvc2UoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucGFuZUl0ZW1zID0gW107XG4gICAgICAgIHRoaXMuc3BsaXR2aWV3LmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZSgpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFBhbmV2aWV3QXBpIH0gZnJvbSAnLi4vYXBpL2NvbXBvbmVudC5hcGknO1xuaW1wb3J0IHsgRW1pdHRlciB9IGZyb20gJy4uL2V2ZW50cyc7XG5pbXBvcnQgeyBDb21wb3NpdGVEaXNwb3NhYmxlLCBNdXRhYmxlRGlzcG9zYWJsZSwgfSBmcm9tICcuLi9saWZlY3ljbGUnO1xuaW1wb3J0IHsgT3JpZW50YXRpb24sIFNpemluZyB9IGZyb20gJy4uL3NwbGl0dmlldy9zcGxpdHZpZXcnO1xuaW1wb3J0IHsgUGFuZXZpZXcgfSBmcm9tICcuL3BhbmV2aWV3JztcbmltcG9ydCB7IERyYWdnYWJsZVBhbmV2aWV3UGFuZWwsIH0gZnJvbSAnLi9kcmFnZ2FibGVQYW5ldmlld1BhbmVsJztcbmltcG9ydCB7IERlZmF1bHRIZWFkZXIgfSBmcm9tICcuL2RlZmF1bHRQYW5ldmlld0hlYWRlcic7XG5pbXBvcnQgeyBzZXF1ZW50aWFsTnVtYmVyR2VuZXJhdG9yIH0gZnJvbSAnLi4vbWF0aCc7XG5pbXBvcnQgeyBSZXNpemFibGUgfSBmcm9tICcuLi9yZXNpemFibGUnO1xuaW1wb3J0IHsgQ2xhc3NuYW1lcyB9IGZyb20gJy4uL2RvbSc7XG5jb25zdCBuZXh0TGF5b3V0SWQgPSBzZXF1ZW50aWFsTnVtYmVyR2VuZXJhdG9yKCk7XG5jb25zdCBIRUFERVJfU0laRSA9IDIyO1xuY29uc3QgTUlOSU1VTV9CT0RZX1NJWkUgPSAwO1xuY29uc3QgTUFYSU1VTV9CT0RZX1NJWkUgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcbmV4cG9ydCBjbGFzcyBQYW5lRnJhbWV3b3JrIGV4dGVuZHMgRHJhZ2dhYmxlUGFuZXZpZXdQYW5lbCB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBhY2Nlc3Nvcjogb3B0aW9ucy5hY2Nlc3NvcixcbiAgICAgICAgICAgIGlkOiBvcHRpb25zLmlkLFxuICAgICAgICAgICAgY29tcG9uZW50OiBvcHRpb25zLmNvbXBvbmVudCxcbiAgICAgICAgICAgIGhlYWRlckNvbXBvbmVudDogb3B0aW9ucy5oZWFkZXJDb21wb25lbnQsXG4gICAgICAgICAgICBvcmllbnRhdGlvbjogb3B0aW9ucy5vcmllbnRhdGlvbixcbiAgICAgICAgICAgIGlzRXhwYW5kZWQ6IG9wdGlvbnMuaXNFeHBhbmRlZCxcbiAgICAgICAgICAgIGRpc2FibGVEbmQ6IG9wdGlvbnMuZGlzYWJsZURuZCxcbiAgICAgICAgICAgIGhlYWRlclNpemU6IG9wdGlvbnMuaGVhZGVyU2l6ZSxcbiAgICAgICAgICAgIG1pbmltdW1Cb2R5U2l6ZTogb3B0aW9ucy5taW5pbXVtQm9keVNpemUsXG4gICAgICAgICAgICBtYXhpbXVtQm9keVNpemU6IG9wdGlvbnMubWF4aW11bUJvZHlTaXplLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgZ2V0Qm9keUNvbXBvbmVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5ib2R5O1xuICAgIH1cbiAgICBnZXRIZWFkZXJDb21wb25lbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuaGVhZGVyO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBQYW5ldmlld0NvbXBvbmVudCBleHRlbmRzIFJlc2l6YWJsZSB7XG4gICAgZ2V0IGlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faWQ7XG4gICAgfVxuICAgIGdldCBwYW5lbHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhbmV2aWV3LmdldFBhbmVzKCk7XG4gICAgfVxuICAgIHNldCBwYW5ldmlldyh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9wYW5ldmlldyA9IHZhbHVlO1xuICAgICAgICB0aGlzLl9kaXNwb3NhYmxlLnZhbHVlID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUodGhpcy5fcGFuZXZpZXcub25EaWRDaGFuZ2UoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25EaWRMYXlvdXRDaGFuZ2UuZmlyZSh1bmRlZmluZWQpO1xuICAgICAgICB9KSwgdGhpcy5fcGFuZXZpZXcub25EaWRBZGRWaWV3KChlKSA9PiB0aGlzLl9vbkRpZEFkZFZpZXcuZmlyZShlKSksIHRoaXMuX3BhbmV2aWV3Lm9uRGlkUmVtb3ZlVmlldygoZSkgPT4gdGhpcy5fb25EaWRSZW1vdmVWaWV3LmZpcmUoZSkpKTtcbiAgICB9XG4gICAgZ2V0IHBhbmV2aWV3KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGFuZXZpZXc7XG4gICAgfVxuICAgIGdldCBtaW5pbXVtU2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFuZXZpZXcubWluaW11bVNpemU7XG4gICAgfVxuICAgIGdldCBtYXhpbXVtU2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFuZXZpZXcubWF4aW11bVNpemU7XG4gICAgfVxuICAgIGdldCBoZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhbmV2aWV3Lm9yaWVudGF0aW9uID09PSBPcmllbnRhdGlvbi5IT1JJWk9OVEFMXG4gICAgICAgICAgICA/IHRoaXMucGFuZXZpZXcub3J0aG9nb25hbFNpemVcbiAgICAgICAgICAgIDogdGhpcy5wYW5ldmlldy5zaXplO1xuICAgIH1cbiAgICBnZXQgd2lkdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhbmV2aWV3Lm9yaWVudGF0aW9uID09PSBPcmllbnRhdGlvbi5IT1JJWk9OVEFMXG4gICAgICAgICAgICA/IHRoaXMucGFuZXZpZXcuc2l6ZVxuICAgICAgICAgICAgOiB0aGlzLnBhbmV2aWV3Lm9ydGhvZ29uYWxTaXplO1xuICAgIH1cbiAgICBnZXQgb3B0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29wdGlvbnM7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lciwgb3B0aW9ucykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHN1cGVyKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLCBvcHRpb25zLmRpc2FibGVBdXRvUmVzaXppbmcpO1xuICAgICAgICB0aGlzLl9pZCA9IG5leHRMYXlvdXRJZC5uZXh0KCk7XG4gICAgICAgIHRoaXMuX2Rpc3Bvc2FibGUgPSBuZXcgTXV0YWJsZURpc3Bvc2FibGUoKTtcbiAgICAgICAgdGhpcy5fdmlld0Rpc3Bvc2FibGVzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLl9vbkRpZExheW91dGZyb21KU09OID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZExheW91dEZyb21KU09OID0gdGhpcy5fb25EaWRMYXlvdXRmcm9tSlNPTi5ldmVudDtcbiAgICAgICAgdGhpcy5fb25EaWRMYXlvdXRDaGFuZ2UgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRGlkTGF5b3V0Q2hhbmdlID0gdGhpcy5fb25EaWRMYXlvdXRDaGFuZ2UuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uRGlkRHJvcCA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWREcm9wID0gdGhpcy5fb25EaWREcm9wLmV2ZW50O1xuICAgICAgICB0aGlzLl9vbkRpZEFkZFZpZXcgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRGlkQWRkVmlldyA9IHRoaXMuX29uRGlkQWRkVmlldy5ldmVudDtcbiAgICAgICAgdGhpcy5fb25EaWRSZW1vdmVWaWV3ID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZFJlbW92ZVZpZXcgPSB0aGlzLl9vbkRpZFJlbW92ZVZpZXcuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uVW5oYW5kbGVkRHJhZ092ZXJFdmVudCA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25VbmhhbmRsZWREcmFnT3ZlckV2ZW50ID0gdGhpcy5fb25VbmhhbmRsZWREcmFnT3ZlckV2ZW50LmV2ZW50O1xuICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xuICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUud2lkdGggPSAnMTAwJSc7XG4gICAgICAgIHRoaXMuYWRkRGlzcG9zYWJsZXModGhpcy5fb25EaWRMYXlvdXRDaGFuZ2UsIHRoaXMuX29uRGlkTGF5b3V0ZnJvbUpTT04sIHRoaXMuX29uRGlkRHJvcCwgdGhpcy5fb25EaWRBZGRWaWV3LCB0aGlzLl9vbkRpZFJlbW92ZVZpZXcsIHRoaXMuX29uVW5oYW5kbGVkRHJhZ092ZXJFdmVudCk7XG4gICAgICAgIHRoaXMuX2NsYXNzTmFtZXMgPSBuZXcgQ2xhc3NuYW1lcyh0aGlzLmVsZW1lbnQpO1xuICAgICAgICB0aGlzLl9jbGFzc05hbWVzLnNldENsYXNzTmFtZXMoKF9hID0gb3B0aW9ucy5jbGFzc05hbWUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcnKTtcbiAgICAgICAgLy8gdGhlIGNvbnRhaW5lciBpcyBvd25lZCBieSB0aGUgdGhpcmQtcGFydHksIGRvIG5vdCBtb2RpZnkvZGVsZXRlIGl0XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmVsZW1lbnQpO1xuICAgICAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5wYW5ldmlldyA9IG5ldyBQYW5ldmlldyh0aGlzLmVsZW1lbnQsIHtcbiAgICAgICAgICAgIC8vIG9ubHkgYWxsb3cgcGFuZXZpZXcgaW4gdGhlIHZlcnRpY2FsIG9yaWVudGF0aW9uIGZvciBub3dcbiAgICAgICAgICAgIG9yaWVudGF0aW9uOiBPcmllbnRhdGlvbi5WRVJUSUNBTCxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYWRkRGlzcG9zYWJsZXModGhpcy5fZGlzcG9zYWJsZSk7XG4gICAgfVxuICAgIHNldFZpc2libGUocGFuZWwsIHZpc2libGUpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLnBhbmVscy5pbmRleE9mKHBhbmVsKTtcbiAgICAgICAgdGhpcy5wYW5ldmlldy5zZXRWaWV3VmlzaWJsZShpbmRleCwgdmlzaWJsZSk7XG4gICAgfVxuICAgIGZvY3VzKCkge1xuICAgICAgICAvL25vb3BcbiAgICB9XG4gICAgdXBkYXRlT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGlmICgnY2xhc3NOYW1lJyBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICB0aGlzLl9jbGFzc05hbWVzLnNldENsYXNzTmFtZXMoKF9hID0gb3B0aW9ucy5jbGFzc05hbWUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJ2Rpc2FibGVSZXNpemluZycgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5kaXNhYmxlUmVzaXppbmcgPSAoX2IgPSBvcHRpb25zLmRpc2FibGVBdXRvUmVzaXppbmcpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHRoaXMub3B0aW9ucyksIG9wdGlvbnMpO1xuICAgIH1cbiAgICBhZGRQYW5lbChvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGNvbnN0IGJvZHkgPSB0aGlzLm9wdGlvbnMuY3JlYXRlQ29tcG9uZW50KHtcbiAgICAgICAgICAgIGlkOiBvcHRpb25zLmlkLFxuICAgICAgICAgICAgbmFtZTogb3B0aW9ucy5jb21wb25lbnQsXG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgaGVhZGVyO1xuICAgICAgICBpZiAob3B0aW9ucy5oZWFkZXJDb21wb25lbnQgJiYgdGhpcy5vcHRpb25zLmNyZWF0ZUhlYWRlckNvbXBvbmVudCkge1xuICAgICAgICAgICAgaGVhZGVyID0gdGhpcy5vcHRpb25zLmNyZWF0ZUhlYWRlckNvbXBvbmVudCh7XG4gICAgICAgICAgICAgICAgaWQ6IG9wdGlvbnMuaWQsXG4gICAgICAgICAgICAgICAgbmFtZTogb3B0aW9ucy5oZWFkZXJDb21wb25lbnQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWhlYWRlcikge1xuICAgICAgICAgICAgaGVhZGVyID0gbmV3IERlZmF1bHRIZWFkZXIoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2aWV3ID0gbmV3IFBhbmVGcmFtZXdvcmsoe1xuICAgICAgICAgICAgaWQ6IG9wdGlvbnMuaWQsXG4gICAgICAgICAgICBjb21wb25lbnQ6IG9wdGlvbnMuY29tcG9uZW50LFxuICAgICAgICAgICAgaGVhZGVyQ29tcG9uZW50OiBvcHRpb25zLmhlYWRlckNvbXBvbmVudCxcbiAgICAgICAgICAgIGhlYWRlcixcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICBvcmllbnRhdGlvbjogT3JpZW50YXRpb24uVkVSVElDQUwsXG4gICAgICAgICAgICBpc0V4cGFuZGVkOiAhIW9wdGlvbnMuaXNFeHBhbmRlZCxcbiAgICAgICAgICAgIGRpc2FibGVEbmQ6ICEhdGhpcy5vcHRpb25zLmRpc2FibGVEbmQsXG4gICAgICAgICAgICBhY2Nlc3NvcjogdGhpcyxcbiAgICAgICAgICAgIGhlYWRlclNpemU6IChfYSA9IG9wdGlvbnMuaGVhZGVyU2l6ZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogSEVBREVSX1NJWkUsXG4gICAgICAgICAgICBtaW5pbXVtQm9keVNpemU6IE1JTklNVU1fQk9EWV9TSVpFLFxuICAgICAgICAgICAgbWF4aW11bUJvZHlTaXplOiBNQVhJTVVNX0JPRFlfU0laRSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZG9BZGRQYW5lbCh2aWV3KTtcbiAgICAgICAgY29uc3Qgc2l6ZSA9IHR5cGVvZiBvcHRpb25zLnNpemUgPT09ICdudW1iZXInID8gb3B0aW9ucy5zaXplIDogU2l6aW5nLkRpc3RyaWJ1dGU7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdHlwZW9mIG9wdGlvbnMuaW5kZXggPT09ICdudW1iZXInID8gb3B0aW9ucy5pbmRleCA6IHVuZGVmaW5lZDtcbiAgICAgICAgdmlldy5pbml0KHtcbiAgICAgICAgICAgIHBhcmFtczogKF9iID0gb3B0aW9ucy5wYXJhbXMpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHt9LFxuICAgICAgICAgICAgbWluaW11bUJvZHlTaXplOiBvcHRpb25zLm1pbmltdW1Cb2R5U2l6ZSxcbiAgICAgICAgICAgIG1heGltdW1Cb2R5U2l6ZTogb3B0aW9ucy5tYXhpbXVtQm9keVNpemUsXG4gICAgICAgICAgICBpc0V4cGFuZGVkOiBvcHRpb25zLmlzRXhwYW5kZWQsXG4gICAgICAgICAgICB0aXRsZTogb3B0aW9ucy50aXRsZSxcbiAgICAgICAgICAgIGNvbnRhaW5lckFwaTogbmV3IFBhbmV2aWV3QXBpKHRoaXMpLFxuICAgICAgICAgICAgYWNjZXNzb3I6IHRoaXMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnBhbmV2aWV3LmFkZFBhbmUodmlldywgc2l6ZSwgaW5kZXgpO1xuICAgICAgICB2aWV3Lm9yaWVudGF0aW9uID0gdGhpcy5wYW5ldmlldy5vcmllbnRhdGlvbjtcbiAgICAgICAgcmV0dXJuIHZpZXc7XG4gICAgfVxuICAgIHJlbW92ZVBhbmVsKHBhbmVsKSB7XG4gICAgICAgIGNvbnN0IHZpZXdzID0gdGhpcy5wYW5lbHM7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdmlld3MuZmluZEluZGV4KChfKSA9PiBfID09PSBwYW5lbCk7XG4gICAgICAgIHRoaXMucGFuZXZpZXcucmVtb3ZlUGFuZShpbmRleCk7XG4gICAgICAgIHRoaXMuZG9SZW1vdmVQYW5lbChwYW5lbCk7XG4gICAgfVxuICAgIG1vdmVQYW5lbChmcm9tLCB0bykge1xuICAgICAgICB0aGlzLnBhbmV2aWV3Lm1vdmVWaWV3KGZyb20sIHRvKTtcbiAgICB9XG4gICAgZ2V0UGFuZWwoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFuZWxzLmZpbmQoKHZpZXcpID0+IHZpZXcuaWQgPT09IGlkKTtcbiAgICB9XG4gICAgbGF5b3V0KHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgY29uc3QgW3NpemUsIG9ydGhvZ29uYWxTaXplXSA9IHRoaXMucGFuZXZpZXcub3JpZW50YXRpb24gPT09IE9yaWVudGF0aW9uLkhPUklaT05UQUxcbiAgICAgICAgICAgID8gW3dpZHRoLCBoZWlnaHRdXG4gICAgICAgICAgICA6IFtoZWlnaHQsIHdpZHRoXTtcbiAgICAgICAgdGhpcy5wYW5ldmlldy5sYXlvdXQoc2l6ZSwgb3J0aG9nb25hbFNpemUpO1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIGNvbnN0IG1heGltdW0gPSAodmFsdWUpID0+IHZhbHVlID09PSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiB8fFxuICAgICAgICAgICAgdmFsdWUgPT09IE51bWJlci5QT1NJVElWRV9JTkZJTklUWVxuICAgICAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgICAgIDogdmFsdWU7XG4gICAgICAgIGNvbnN0IG1pbmltdW0gPSAodmFsdWUpID0+ICh2YWx1ZSA8PSAwID8gdW5kZWZpbmVkIDogdmFsdWUpO1xuICAgICAgICBjb25zdCB2aWV3cyA9IHRoaXMucGFuZXZpZXdcbiAgICAgICAgICAgIC5nZXRQYW5lcygpXG4gICAgICAgICAgICAubWFwKCh2aWV3LCBpKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzaXplID0gdGhpcy5wYW5ldmlldy5nZXRWaWV3U2l6ZShpKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc2l6ZSxcbiAgICAgICAgICAgICAgICBkYXRhOiB2aWV3LnRvSlNPTigpLFxuICAgICAgICAgICAgICAgIG1pbmltdW1TaXplOiBtaW5pbXVtKHZpZXcubWluaW11bUJvZHlTaXplKSxcbiAgICAgICAgICAgICAgICBtYXhpbXVtU2l6ZTogbWF4aW11bSh2aWV3Lm1heGltdW1Cb2R5U2l6ZSksXG4gICAgICAgICAgICAgICAgaGVhZGVyU2l6ZTogdmlldy5oZWFkZXJTaXplLFxuICAgICAgICAgICAgICAgIGV4cGFuZGVkOiB2aWV3LmlzRXhwYW5kZWQoKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmlld3MsXG4gICAgICAgICAgICBzaXplOiB0aGlzLnBhbmV2aWV3LnNpemUsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGZyb21KU09OKHNlcmlhbGl6ZWRQYW5ldmlldykge1xuICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgIGNvbnN0IHsgdmlld3MsIHNpemUgfSA9IHNlcmlhbGl6ZWRQYW5ldmlldztcbiAgICAgICAgY29uc3QgcXVldWUgPSBbXTtcbiAgICAgICAgLy8gdGFrZSBub3RlIG9mIHRoZSBleGlzdGluZyBkaW1lbnNpb25zXG4gICAgICAgIGNvbnN0IHdpZHRoID0gdGhpcy53aWR0aDtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gdGhpcy5oZWlnaHQ7XG4gICAgICAgIHRoaXMucGFuZXZpZXcgPSBuZXcgUGFuZXZpZXcodGhpcy5lbGVtZW50LCB7XG4gICAgICAgICAgICBvcmllbnRhdGlvbjogT3JpZW50YXRpb24uVkVSVElDQUwsXG4gICAgICAgICAgICBkZXNjcmlwdG9yOiB7XG4gICAgICAgICAgICAgICAgc2l6ZSxcbiAgICAgICAgICAgICAgICB2aWV3czogdmlld3MubWFwKCh2aWV3KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gdmlldy5kYXRhO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBib2R5ID0gdGhpcy5vcHRpb25zLmNyZWF0ZUNvbXBvbmVudCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogZGF0YS5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGRhdGEuY29tcG9uZW50LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGhlYWRlcjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuaGVhZGVyQ29tcG9uZW50ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuY3JlYXRlSGVhZGVyQ29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXIgPSB0aGlzLm9wdGlvbnMuY3JlYXRlSGVhZGVyQ29tcG9uZW50KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogZGF0YS5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBkYXRhLmhlYWRlckNvbXBvbmVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghaGVhZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXIgPSBuZXcgRGVmYXVsdEhlYWRlcigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhbmVsID0gbmV3IFBhbmVGcmFtZXdvcmsoe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGRhdGEuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQ6IGRhdGEuY29tcG9uZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyQ29tcG9uZW50OiBkYXRhLmhlYWRlckNvbXBvbmVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICAgICAgICAgICAgICBvcmllbnRhdGlvbjogT3JpZW50YXRpb24uVkVSVElDQUwsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0V4cGFuZGVkOiAhIXZpZXcuZXhwYW5kZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlRG5kOiAhIXRoaXMub3B0aW9ucy5kaXNhYmxlRG5kLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzb3I6IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJTaXplOiAoX2EgPSB2aWV3LmhlYWRlclNpemUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IEhFQURFUl9TSVpFLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWluaW11bUJvZHlTaXplOiAoX2IgPSB2aWV3Lm1pbmltdW1TaXplKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBNSU5JTVVNX0JPRFlfU0laRSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heGltdW1Cb2R5U2l6ZTogKF9jID0gdmlldy5tYXhpbXVtU2l6ZSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogTUFYSU1VTV9CT0RZX1NJWkUsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvQWRkUGFuZWwocGFuZWwpO1xuICAgICAgICAgICAgICAgICAgICBxdWV1ZS5wdXNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhbmVsLmluaXQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczogKF9hID0gZGF0YS5wYXJhbXMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbmltdW1Cb2R5U2l6ZTogdmlldy5taW5pbXVtU2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhpbXVtQm9keVNpemU6IHZpZXcubWF4aW11bVNpemUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGRhdGEudGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNFeHBhbmRlZDogISF2aWV3LmV4cGFuZGVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lckFwaTogbmV3IFBhbmV2aWV3QXBpKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc29yOiB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYW5lbC5vcmllbnRhdGlvbiA9IHRoaXMucGFuZXZpZXcub3JpZW50YXRpb247XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBvcmlnaW5hbCBvbkRpZEFkZFZpZXcgZXZlbnRzIGFyZSBtaXNzZWQgc2luY2UgdGhleSBhcmUgZmlyZWQgYmVmb3JlIHdlIGNhbiBzdWJjcmliZSB0byB0aGVtXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vbkRpZEFkZFZpZXcuZmlyZShwYW5lbCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBzaXplOiB2aWV3LnNpemUsIHZpZXc6IHBhbmVsIH07XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5sYXlvdXQod2lkdGgsIGhlaWdodCk7XG4gICAgICAgIHF1ZXVlLmZvckVhY2goKGYpID0+IGYoKSk7XG4gICAgICAgIHRoaXMuX29uRGlkTGF5b3V0ZnJvbUpTT04uZmlyZSgpO1xuICAgIH1cbiAgICBjbGVhcigpIHtcbiAgICAgICAgZm9yIChjb25zdCBbXywgdmFsdWVdIG9mIHRoaXMuX3ZpZXdEaXNwb3NhYmxlcy5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgIHZhbHVlLmRpc3Bvc2UoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl92aWV3RGlzcG9zYWJsZXMuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5wYW5ldmlldy5kaXNwb3NlKCk7XG4gICAgfVxuICAgIGRvQWRkUGFuZWwocGFuZWwpIHtcbiAgICAgICAgY29uc3QgZGlzcG9zYWJsZSA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKHBhbmVsLm9uRGlkRHJvcCgoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX29uRGlkRHJvcC5maXJlKGV2ZW50KTtcbiAgICAgICAgfSksIHBhbmVsLm9uVW5oYW5kbGVkRHJhZ092ZXJFdmVudCgoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX29uVW5oYW5kbGVkRHJhZ092ZXJFdmVudC5maXJlKGV2ZW50KTtcbiAgICAgICAgfSkpO1xuICAgICAgICB0aGlzLl92aWV3RGlzcG9zYWJsZXMuc2V0KHBhbmVsLmlkLCBkaXNwb3NhYmxlKTtcbiAgICB9XG4gICAgZG9SZW1vdmVQYW5lbChwYW5lbCkge1xuICAgICAgICBjb25zdCBkaXNwb3NhYmxlID0gdGhpcy5fdmlld0Rpc3Bvc2FibGVzLmdldChwYW5lbC5pZCk7XG4gICAgICAgIGlmIChkaXNwb3NhYmxlKSB7XG4gICAgICAgICAgICBkaXNwb3NhYmxlLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIHRoaXMuX3ZpZXdEaXNwb3NhYmxlcy5kZWxldGUocGFuZWwuaWQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHN1cGVyLmRpc3Bvc2UoKTtcbiAgICAgICAgZm9yIChjb25zdCBbXywgdmFsdWVdIG9mIHRoaXMuX3ZpZXdEaXNwb3NhYmxlcy5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgIHZhbHVlLmRpc3Bvc2UoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl92aWV3RGlzcG9zYWJsZXMuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZSgpO1xuICAgICAgICB0aGlzLnBhbmV2aWV3LmRpc3Bvc2UoKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBQYW5ldmlld1BhbmVsQXBpSW1wbCB9IGZyb20gJy4uL2FwaS9wYW5ldmlld1BhbmVsQXBpJztcbmltcG9ydCB7IGFkZENsYXNzZXMsIHJlbW92ZUNsYXNzZXMgfSBmcm9tICcuLi9kb20nO1xuaW1wb3J0IHsgYWRkRGlzcG9zYWJsZUxpc3RlbmVyLCBFbWl0dGVyIH0gZnJvbSAnLi4vZXZlbnRzJztcbmltcG9ydCB7IEJhc2VQYW5lbFZpZXcsIH0gZnJvbSAnLi4vZ3JpZHZpZXcvYmFzZVBhbmVsVmlldyc7XG5pbXBvcnQgeyBPcmllbnRhdGlvbiB9IGZyb20gJy4uL3NwbGl0dmlldy9zcGxpdHZpZXcnO1xuZXhwb3J0IGNsYXNzIFBhbmV2aWV3UGFuZWwgZXh0ZW5kcyBCYXNlUGFuZWxWaWV3IHtcbiAgICBzZXQgb3JpZW50YXRpb24odmFsdWUpIHtcbiAgICAgICAgdGhpcy5fb3JpZW50YXRpb24gPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IG9yaWVudGF0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3JpZW50YXRpb247XG4gICAgfVxuICAgIGdldCBtaW5pbXVtU2l6ZSgpIHtcbiAgICAgICAgY29uc3QgaGVhZGVyU2l6ZSA9IHRoaXMuaGVhZGVyU2l6ZTtcbiAgICAgICAgY29uc3QgZXhwYW5kZWQgPSB0aGlzLmlzRXhwYW5kZWQoKTtcbiAgICAgICAgY29uc3QgbWluaW11bUJvZHlTaXplID0gZXhwYW5kZWQgPyB0aGlzLl9taW5pbXVtQm9keVNpemUgOiAwO1xuICAgICAgICByZXR1cm4gaGVhZGVyU2l6ZSArIG1pbmltdW1Cb2R5U2l6ZTtcbiAgICB9XG4gICAgZ2V0IG1heGltdW1TaXplKCkge1xuICAgICAgICBjb25zdCBoZWFkZXJTaXplID0gdGhpcy5oZWFkZXJTaXplO1xuICAgICAgICBjb25zdCBleHBhbmRlZCA9IHRoaXMuaXNFeHBhbmRlZCgpO1xuICAgICAgICBjb25zdCBtYXhpbXVtQm9keVNpemUgPSBleHBhbmRlZCA/IHRoaXMuX21heGltdW1Cb2R5U2l6ZSA6IDA7XG4gICAgICAgIHJldHVybiBoZWFkZXJTaXplICsgbWF4aW11bUJvZHlTaXplO1xuICAgIH1cbiAgICBnZXQgc2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NpemU7XG4gICAgfVxuICAgIGdldCBvcnRob2dvbmFsU2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29ydGhvZ29uYWxTaXplO1xuICAgIH1cbiAgICBzZXQgb3J0aG9nb25hbFNpemUoc2l6ZSkge1xuICAgICAgICB0aGlzLl9vcnRob2dvbmFsU2l6ZSA9IHNpemU7XG4gICAgfVxuICAgIGdldCBtaW5pbXVtQm9keVNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9taW5pbXVtQm9keVNpemU7XG4gICAgfVxuICAgIHNldCBtaW5pbXVtQm9keVNpemUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fbWluaW11bUJvZHlTaXplID0gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyA/IHZhbHVlIDogMDtcbiAgICB9XG4gICAgZ2V0IG1heGltdW1Cb2R5U2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21heGltdW1Cb2R5U2l6ZTtcbiAgICB9XG4gICAgc2V0IG1heGltdW1Cb2R5U2l6ZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9tYXhpbXVtQm9keVNpemUgPVxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyA/IHZhbHVlIDogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgIH1cbiAgICBnZXQgaGVhZGVyVmlzaWJsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hlYWRlclZpc2libGU7XG4gICAgfVxuICAgIHNldCBoZWFkZXJWaXNpYmxlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2hlYWRlclZpc2libGUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5oZWFkZXIuc3R5bGUuZGlzcGxheSA9IHZhbHVlID8gJycgOiAnbm9uZSc7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucy5pZCwgb3B0aW9ucy5jb21wb25lbnQsIG5ldyBQYW5ldmlld1BhbmVsQXBpSW1wbChvcHRpb25zLmlkLCBvcHRpb25zLmNvbXBvbmVudCkpO1xuICAgICAgICB0aGlzLl9vbkRpZENoYW5nZUV4cGFuc2lvblN0YXRlID0gbmV3IEVtaXR0ZXIoeyByZXBsYXk6IHRydWUgfSk7XG4gICAgICAgIHRoaXMub25EaWRDaGFuZ2VFeHBhbnNpb25TdGF0ZSA9IHRoaXMuX29uRGlkQ2hhbmdlRXhwYW5zaW9uU3RhdGUuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uRGlkQ2hhbmdlID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZENoYW5nZSA9IHRoaXMuX29uRGlkQ2hhbmdlLmV2ZW50O1xuICAgICAgICB0aGlzLl9vcnRob2dvbmFsU2l6ZSA9IDA7XG4gICAgICAgIHRoaXMuX3NpemUgPSAwO1xuICAgICAgICB0aGlzLl9pc0V4cGFuZGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYXBpLnBhbmUgPSB0aGlzOyAvLyBUT0RPIGNhbm5vdCB1c2UgJ3RoaXMnIGJlZm9yZSAnc3VwZXInXG4gICAgICAgIHRoaXMuYXBpLmluaXRpYWxpemUodGhpcyk7XG4gICAgICAgIHRoaXMuaGVhZGVyU2l6ZSA9IG9wdGlvbnMuaGVhZGVyU2l6ZTtcbiAgICAgICAgdGhpcy5oZWFkZXJDb21wb25lbnQgPSBvcHRpb25zLmhlYWRlckNvbXBvbmVudDtcbiAgICAgICAgdGhpcy5fbWluaW11bUJvZHlTaXplID0gb3B0aW9ucy5taW5pbXVtQm9keVNpemU7XG4gICAgICAgIHRoaXMuX21heGltdW1Cb2R5U2l6ZSA9IG9wdGlvbnMubWF4aW11bUJvZHlTaXplO1xuICAgICAgICB0aGlzLl9pc0V4cGFuZGVkID0gb3B0aW9ucy5pc0V4cGFuZGVkO1xuICAgICAgICB0aGlzLl9oZWFkZXJWaXNpYmxlID0gb3B0aW9ucy5pc0hlYWRlclZpc2libGU7XG4gICAgICAgIHRoaXMuX29uRGlkQ2hhbmdlRXhwYW5zaW9uU3RhdGUuZmlyZSh0aGlzLmlzRXhwYW5kZWQoKSk7IC8vIGluaXRpYWxpemUgdmFsdWVcbiAgICAgICAgdGhpcy5fb3JpZW50YXRpb24gPSBvcHRpb25zLm9yaWVudGF0aW9uO1xuICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnZHYtcGFuZScpO1xuICAgICAgICB0aGlzLmFkZERpc3Bvc2FibGVzKHRoaXMuYXBpLm9uV2lsbFZpc2liaWxpdHlDaGFuZ2UoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IGlzVmlzaWJsZSB9ID0gZXZlbnQ7XG4gICAgICAgICAgICBjb25zdCB7IGFjY2Vzc29yIH0gPSB0aGlzLl9wYXJhbXM7XG4gICAgICAgICAgICBhY2Nlc3Nvci5zZXRWaXNpYmxlKHRoaXMsIGlzVmlzaWJsZSk7XG4gICAgICAgIH0pLCB0aGlzLmFwaS5vbkRpZFNpemVDaGFuZ2UoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9vbkRpZENoYW5nZS5maXJlKHsgc2l6ZTogZXZlbnQuc2l6ZSB9KTtcbiAgICAgICAgfSksIGFkZERpc3Bvc2FibGVMaXN0ZW5lcih0aGlzLmVsZW1lbnQsICdtb3VzZWVudGVyJywgKGV2KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFwaS5fb25Nb3VzZUVudGVyLmZpcmUoZXYpO1xuICAgICAgICB9KSwgYWRkRGlzcG9zYWJsZUxpc3RlbmVyKHRoaXMuZWxlbWVudCwgJ21vdXNlbGVhdmUnLCAoZXYpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYXBpLl9vbk1vdXNlTGVhdmUuZmlyZShldik7XG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyh0aGlzLl9vbkRpZENoYW5nZUV4cGFuc2lvblN0YXRlLCB0aGlzLm9uRGlkQ2hhbmdlRXhwYW5zaW9uU3RhdGUoKGlzUGFuZWxFeHBhbmRlZCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hcGkuX29uRGlkRXhwYW5zaW9uQ2hhbmdlLmZpcmUoe1xuICAgICAgICAgICAgICAgIGlzRXhwYW5kZWQ6IGlzUGFuZWxFeHBhbmRlZCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KSwgdGhpcy5hcGkub25EaWRGb2N1c0NoYW5nZSgoZSkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmhlYWRlcikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlLmlzRm9jdXNlZCkge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzZXModGhpcy5oZWFkZXIsICdmb2N1c2VkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzc2VzKHRoaXMuaGVhZGVyLCAnZm9jdXNlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgICAgIHRoaXMucmVuZGVyT25jZSgpO1xuICAgIH1cbiAgICBzZXRWaXNpYmxlKGlzVmlzaWJsZSkge1xuICAgICAgICB0aGlzLmFwaS5fb25EaWRWaXNpYmlsaXR5Q2hhbmdlLmZpcmUoeyBpc1Zpc2libGUgfSk7XG4gICAgfVxuICAgIHNldEFjdGl2ZShpc0FjdGl2ZSkge1xuICAgICAgICB0aGlzLmFwaS5fb25EaWRBY3RpdmVDaGFuZ2UuZmlyZSh7IGlzQWN0aXZlIH0pO1xuICAgIH1cbiAgICBpc0V4cGFuZGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNFeHBhbmRlZDtcbiAgICB9XG4gICAgc2V0RXhwYW5kZWQoZXhwYW5kZWQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzRXhwYW5kZWQgPT09IGV4cGFuZGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faXNFeHBhbmRlZCA9IGV4cGFuZGVkO1xuICAgICAgICBpZiAoZXhwYW5kZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmFuaW1hdGlvblRpbWVyKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuYW5pbWF0aW9uVGltZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuYm9keSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmJvZHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25UaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICAoX2EgPSB0aGlzLmJvZHkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5yZW1vdmUoKTtcbiAgICAgICAgICAgIH0sIDIwMCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fb25EaWRDaGFuZ2UuZmlyZShleHBhbmRlZCA/IHsgc2l6ZTogdGhpcy53aWR0aCB9IDoge30pO1xuICAgICAgICB0aGlzLl9vbkRpZENoYW5nZUV4cGFuc2lvblN0YXRlLmZpcmUoZXhwYW5kZWQpO1xuICAgIH1cbiAgICBsYXlvdXQoc2l6ZSwgb3J0aG9nb25hbFNpemUpIHtcbiAgICAgICAgdGhpcy5fc2l6ZSA9IHNpemU7XG4gICAgICAgIHRoaXMuX29ydGhvZ29uYWxTaXplID0gb3J0aG9nb25hbFNpemU7XG4gICAgICAgIGNvbnN0IFt3aWR0aCwgaGVpZ2h0XSA9IHRoaXMub3JpZW50YXRpb24gPT09IE9yaWVudGF0aW9uLkhPUklaT05UQUxcbiAgICAgICAgICAgID8gW3NpemUsIG9ydGhvZ29uYWxTaXplXVxuICAgICAgICAgICAgOiBbb3J0aG9nb25hbFNpemUsIHNpemVdO1xuICAgICAgICBzdXBlci5sYXlvdXQod2lkdGgsIGhlaWdodCk7XG4gICAgfVxuICAgIGluaXQocGFyYW1ldGVycykge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBzdXBlci5pbml0KHBhcmFtZXRlcnMpO1xuICAgICAgICBpZiAodHlwZW9mIHBhcmFtZXRlcnMubWluaW11bUJvZHlTaXplID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgdGhpcy5taW5pbXVtQm9keVNpemUgPSBwYXJhbWV0ZXJzLm1pbmltdW1Cb2R5U2l6ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHBhcmFtZXRlcnMubWF4aW11bUJvZHlTaXplID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgdGhpcy5tYXhpbXVtQm9keVNpemUgPSBwYXJhbWV0ZXJzLm1heGltdW1Cb2R5U2l6ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJvZHlQYXJ0ID0gdGhpcy5nZXRCb2R5Q29tcG9uZW50KCk7XG4gICAgICAgIHRoaXMuaGVhZGVyUGFydCA9IHRoaXMuZ2V0SGVhZGVyQ29tcG9uZW50KCk7XG4gICAgICAgIHRoaXMuYm9keVBhcnQuaW5pdChPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHBhcmFtZXRlcnMpLCB7IGFwaTogdGhpcy5hcGkgfSkpO1xuICAgICAgICB0aGlzLmhlYWRlclBhcnQuaW5pdChPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHBhcmFtZXRlcnMpLCB7IGFwaTogdGhpcy5hcGkgfSkpO1xuICAgICAgICAoX2EgPSB0aGlzLmJvZHkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hcHBlbmQodGhpcy5ib2R5UGFydC5lbGVtZW50KTtcbiAgICAgICAgKF9iID0gdGhpcy5oZWFkZXIpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5hcHBlbmQodGhpcy5oZWFkZXJQYXJ0LmVsZW1lbnQpO1xuICAgICAgICBpZiAodHlwZW9mIHBhcmFtZXRlcnMuaXNFeHBhbmRlZCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICB0aGlzLnNldEV4cGFuZGVkKHBhcmFtZXRlcnMuaXNFeHBhbmRlZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICBjb25zdCBwYXJhbXMgPSB0aGlzLl9wYXJhbXM7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHN1cGVyLnRvSlNPTigpKSwgeyBoZWFkZXJDb21wb25lbnQ6IHRoaXMuaGVhZGVyQ29tcG9uZW50LCB0aXRsZTogcGFyYW1zLnRpdGxlIH0pO1xuICAgIH1cbiAgICByZW5kZXJPbmNlKCkge1xuICAgICAgICB0aGlzLmhlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0aGlzLmhlYWRlci50YWJJbmRleCA9IDA7XG4gICAgICAgIHRoaXMuaGVhZGVyLmNsYXNzTmFtZSA9ICdkdi1wYW5lLWhlYWRlcic7XG4gICAgICAgIHRoaXMuaGVhZGVyLnN0eWxlLmhlaWdodCA9IGAke3RoaXMuaGVhZGVyU2l6ZX1weGA7XG4gICAgICAgIHRoaXMuaGVhZGVyLnN0eWxlLmxpbmVIZWlnaHQgPSBgJHt0aGlzLmhlYWRlclNpemV9cHhgO1xuICAgICAgICB0aGlzLmhlYWRlci5zdHlsZS5taW5IZWlnaHQgPSBgJHt0aGlzLmhlYWRlclNpemV9cHhgO1xuICAgICAgICB0aGlzLmhlYWRlci5zdHlsZS5tYXhIZWlnaHQgPSBgJHt0aGlzLmhlYWRlclNpemV9cHhgO1xuICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5oZWFkZXIpO1xuICAgICAgICB0aGlzLmJvZHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy5ib2R5LmNsYXNzTmFtZSA9ICdkdi1wYW5lLWJvZHknO1xuICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5ib2R5KTtcbiAgICB9XG4gICAgLy8gVE9ETyBzbGlnaHRseSBoYWNreSBieS1wYXNzIG9mIHRoZSBjb21wb25lbnQgdG8gY3JlYXRlIGEgYm9keSBhbmQgaGVhZGVyIGNvbXBvbmVudFxuICAgIGdldENvbXBvbmVudCgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHVwZGF0ZTogKHBhcmFtcykgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICAgICAgKF9hID0gdGhpcy5ib2R5UGFydCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnVwZGF0ZSh7IHBhcmFtcyB9KTtcbiAgICAgICAgICAgICAgICAoX2IgPSB0aGlzLmhlYWRlclBhcnQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi51cGRhdGUoeyBwYXJhbXMgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGlzcG9zZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICAgICAgKF9hID0gdGhpcy5ib2R5UGFydCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICAoX2IgPSB0aGlzLmhlYWRlclBhcnQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5kaXNwb3NlKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cbn1cbiIsInZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuaW1wb3J0IHsgYWRkU3R5bGVzIH0gZnJvbSAnLi9kb20nO1xuaW1wb3J0IHsgRW1pdHRlciwgYWRkRGlzcG9zYWJsZUxpc3RlbmVyIH0gZnJvbSAnLi9ldmVudHMnO1xuaW1wb3J0IHsgQ29tcG9zaXRlRGlzcG9zYWJsZSwgRGlzcG9zYWJsZSB9IGZyb20gJy4vbGlmZWN5Y2xlJztcbmV4cG9ydCBjbGFzcyBQb3BvdXRXaW5kb3cgZXh0ZW5kcyBDb21wb3NpdGVEaXNwb3NhYmxlIHtcbiAgICBnZXQgd2luZG93KCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICByZXR1cm4gKF9iID0gKF9hID0gdGhpcy5fd2luZG93KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudmFsdWUpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IG51bGw7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHRhcmdldCwgY2xhc3NOYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICB0aGlzLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5fb25XaWxsQ2xvc2UgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uV2lsbENsb3NlID0gdGhpcy5fb25XaWxsQ2xvc2UuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uRGlkQ2xvc2UgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRGlkQ2xvc2UgPSB0aGlzLl9vbkRpZENsb3NlLmV2ZW50O1xuICAgICAgICB0aGlzLl93aW5kb3cgPSBudWxsO1xuICAgICAgICB0aGlzLmFkZERpc3Bvc2FibGVzKHRoaXMuX29uV2lsbENsb3NlLCB0aGlzLl9vbkRpZENsb3NlLCB7XG4gICAgICAgICAgICBkaXNwb3NlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGRpbWVuc2lvbnMoKSB7XG4gICAgICAgIGlmICghdGhpcy5fd2luZG93KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsZWZ0ID0gdGhpcy5fd2luZG93LnZhbHVlLnNjcmVlblg7XG4gICAgICAgIGNvbnN0IHRvcCA9IHRoaXMuX3dpbmRvdy52YWx1ZS5zY3JlZW5ZO1xuICAgICAgICBjb25zdCB3aWR0aCA9IHRoaXMuX3dpbmRvdy52YWx1ZS5pbm5lcldpZHRoO1xuICAgICAgICBjb25zdCBoZWlnaHQgPSB0aGlzLl93aW5kb3cudmFsdWUuaW5uZXJIZWlnaHQ7XG4gICAgICAgIHJldHVybiB7IHRvcCwgbGVmdCwgd2lkdGgsIGhlaWdodCB9O1xuICAgIH1cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgaWYgKHRoaXMuX3dpbmRvdykge1xuICAgICAgICAgICAgdGhpcy5fb25XaWxsQ2xvc2UuZmlyZSgpO1xuICAgICAgICAgICAgKF9iID0gKF9hID0gdGhpcy5vcHRpb25zKS5vbldpbGxDbG9zZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIHtcbiAgICAgICAgICAgICAgICBpZDogdGhpcy50YXJnZXQsXG4gICAgICAgICAgICAgICAgd2luZG93OiB0aGlzLl93aW5kb3cudmFsdWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuX3dpbmRvdy5kaXNwb3NhYmxlLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIHRoaXMuX3dpbmRvdyA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLl9vbkRpZENsb3NlLmZpcmUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvcGVuKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3dpbmRvdykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW5zdGFuY2Ugb2YgcG9wb3V0IHdpbmRvdyBpcyBhbHJlYWR5IG9wZW4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHVybCA9IGAke3RoaXMub3B0aW9ucy51cmx9YDtcbiAgICAgICAgICAgIGNvbnN0IGZlYXR1cmVzID0gT2JqZWN0LmVudHJpZXMoe1xuICAgICAgICAgICAgICAgIHRvcDogdGhpcy5vcHRpb25zLnRvcCxcbiAgICAgICAgICAgICAgICBsZWZ0OiB0aGlzLm9wdGlvbnMubGVmdCxcbiAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy5vcHRpb25zLndpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogdGhpcy5vcHRpb25zLmhlaWdodCxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLm1hcCgoW2tleSwgdmFsdWVdKSA9PiBgJHtrZXl9PSR7dmFsdWV9YClcbiAgICAgICAgICAgICAgICAuam9pbignLCcpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XaW5kb3cvb3BlblxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb25zdCBleHRlcm5hbFdpbmRvdyA9IHdpbmRvdy5vcGVuKHVybCwgdGhpcy50YXJnZXQsIGZlYXR1cmVzKTtcbiAgICAgICAgICAgIGlmICghZXh0ZXJuYWxXaW5kb3cpIHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBQb3B1cCBibG9ja2VkXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBkaXNwb3NhYmxlID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKTtcbiAgICAgICAgICAgIHRoaXMuX3dpbmRvdyA9IHsgdmFsdWU6IGV4dGVybmFsV2luZG93LCBkaXNwb3NhYmxlIH07XG4gICAgICAgICAgICBkaXNwb3NhYmxlLmFkZERpc3Bvc2FibGVzKERpc3Bvc2FibGUuZnJvbSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgZXh0ZXJuYWxXaW5kb3cuY2xvc2UoKTtcbiAgICAgICAgICAgIH0pLCBhZGREaXNwb3NhYmxlTGlzdGVuZXIod2luZG93LCAnYmVmb3JldW5sb2FkJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIGJlZm9yZSB0aGUgbWFpbiB3aW5kb3cgY2xvc2VzIHdlIHNob3VsZCBjbG9zZSB0aGlzIHBvcHVwIHRvb1xuICAgICAgICAgICAgICAgICAqIHRvIGJlIGdvb2QgY2l0aXplbnNcbiAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dpbmRvdy9iZWZvcmV1bmxvYWRfZXZlbnRcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmNyZWF0ZVBvcG91dFdpbmRvd0NvbnRhaW5lcigpO1xuICAgICAgICAgICAgaWYgKHRoaXMuY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc05hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKF9iID0gKF9hID0gdGhpcy5vcHRpb25zKS5vbkRpZE9wZW4pID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCB7XG4gICAgICAgICAgICAgICAgaWQ6IHRoaXMudGFyZ2V0LFxuICAgICAgICAgICAgICAgIHdpbmRvdzogZXh0ZXJuYWxXaW5kb3csXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgZXh0ZXJuYWxXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndW5sb2FkJywgKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgcGFnZSBmYWlscyB0byBsb2FkIGJlZm9yZSB1bmxvYWRpbmdcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGV4dGVybmFsV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XaW5kb3cvbG9hZF9ldmVudFxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4dGVybmFsRG9jdW1lbnQgPSBleHRlcm5hbFdpbmRvdy5kb2N1bWVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVybmFsRG9jdW1lbnQudGl0bGUgPSBkb2N1bWVudC50aXRsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVybmFsRG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkU3R5bGVzKGV4dGVybmFsRG9jdW1lbnQsIHdpbmRvdy5kb2N1bWVudC5zdHlsZVNoZWV0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIGJlZm9yZXVubG9hZCBtdXN0IGJlIHJlZ2lzdGVyZWQgYWZ0ZXIgbG9hZCBmb3IgcmVhc29ucyBJIGNvdWxkIG5vdCBkZXRlcm1pbmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIG90aGVyd2lzZSB0aGUgYmVmb3JldW5sb2FkIGV2ZW50IHdpbGwgbm90IGZpcmUgd2hlbiB0aGUgd2luZG93IGlzIGNsb3NlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGREaXNwb3NhYmxlTGlzdGVuZXIoZXh0ZXJuYWxXaW5kb3csICdiZWZvcmV1bmxvYWQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2luZG93L2JlZm9yZXVubG9hZF9ldmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShjb250YWluZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9ubHkgZXhjZXB0IHRoaXMgaXMgdGhlIERPTSBpc24ndCBzZXR1cC4gZS5nLiBpbiBhIGluIGNvcnJlY3RseSBjb25maWd1cmVkIHRlc3RcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNyZWF0ZVBvcG91dFdpbmRvd0NvbnRhaW5lcigpIHtcbiAgICAgICAgY29uc3QgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCgnZHYtcG9wb3V0LXdpbmRvdycpO1xuICAgICAgICBlbC5pZCA9ICdkdi1wb3BvdXQtd2luZG93JztcbiAgICAgICAgZWwuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgICBlbC5zdHlsZS53aWR0aCA9ICcxMDAlJztcbiAgICAgICAgZWwuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xuICAgICAgICBlbC5zdHlsZS50b3AgPSAnMHB4JztcbiAgICAgICAgZWwuc3R5bGUubGVmdCA9ICcwcHgnO1xuICAgICAgICByZXR1cm4gZWw7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgaXNJbkRvY3VtZW50LCB3YXRjaEVsZW1lbnRSZXNpemUgfSBmcm9tICcuL2RvbSc7XG5pbXBvcnQgeyBDb21wb3NpdGVEaXNwb3NhYmxlIH0gZnJvbSAnLi9saWZlY3ljbGUnO1xuZXhwb3J0IGNsYXNzIFJlc2l6YWJsZSBleHRlbmRzIENvbXBvc2l0ZURpc3Bvc2FibGUge1xuICAgIGdldCBlbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZWxlbWVudDtcbiAgICB9XG4gICAgZ2V0IGRpc2FibGVSZXNpemluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rpc2FibGVSZXNpemluZztcbiAgICB9XG4gICAgc2V0IGRpc2FibGVSZXNpemluZyh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9kaXNhYmxlUmVzaXppbmcgPSB2YWx1ZTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IocGFyZW50RWxlbWVudCwgZGlzYWJsZVJlc2l6aW5nID0gZmFsc2UpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fZGlzYWJsZVJlc2l6aW5nID0gZGlzYWJsZVJlc2l6aW5nO1xuICAgICAgICB0aGlzLl9lbGVtZW50ID0gcGFyZW50RWxlbWVudDtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyh3YXRjaEVsZW1lbnRSZXNpemUodGhpcy5fZWxlbWVudCwgKGVudHJ5KSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc0Rpc3Bvc2VkKSB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogcmVzaXplIGlzIGRlbGF5ZWQgdGhyb3VnaCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgc28gdGhlcmUgaXMgYSBzbWFsbCBjaGFuY2VcbiAgICAgICAgICAgICAgICAgKiB0aGUgY29tcG9uZW50IGhhcyBhbHJlYWR5IGJlZW4gZGlzcG9zZWQgb2ZcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5kaXNhYmxlUmVzaXppbmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2VsZW1lbnQub2Zmc2V0UGFyZW50KSB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogb2Zmc2V0UGFyZW50ID09PSBudWxsIGlzIGVxdWl2YWxlbnQgdG8gZGlzcGxheTogbm9uZSBiZWluZyBzZXQgb24gdGhlIGVsZW1lbnQgb3Igb25lXG4gICAgICAgICAgICAgICAgICogb2YgaXQncyBwYXJlbnRzLiBJbiB0aGUgZGlzcGxheTogbm9uZSBjYXNlIHRoZSBzaXplIHdpbGwgYmVjb21lICgwLCAwKSB3aGljaCB3ZSBkb1xuICAgICAgICAgICAgICAgICAqIG5vdCB3YW50IHRvIHByb3BhZ2F0ZS5cbiAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hUTUxFbGVtZW50L29mZnNldFBhcmVudFxuICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICogWW91IGNvdWxkIHVzZSBjaGVja1Zpc2liaWxpdHkoKSBidXQgYXQgdGhlIHRpbWUgb2Ygd3JpdGluZyBpdCdzIG5vdCBzdXBwb3J0ZWQgYWNyb3NzXG4gICAgICAgICAgICAgICAgICogYWxsIEJyb3dzZXJzXG4gICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9FbGVtZW50L2NoZWNrVmlzaWJpbGl0eVxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaXNJbkRvY3VtZW50KHRoaXMuX2VsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogc2luY2UgdGhlIGV2ZW50IGlzIGRpc3BhdGNoZWQgdGhyb3VnaCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgdGhlcmUgaXMgYSBzbWFsbCBjaGFuY2VcbiAgICAgICAgICAgICAgICAgKiB0aGUgY29tcG9uZW50IGlzIG5vIGxvbmdlciBhdHRhY2hlZCB0byB0aGUgRE9NLCBpZiB0aGF0IGlzIHRoZSBjYXNlIHRoZSBkaW1lbnNpb25zXG4gICAgICAgICAgICAgICAgICogYXJlIG1vc3RseSBsaWtlbHkgYWxsIHplcm8gYW5kIG1lYW5pbmdsZXNzLiB3ZSBzaG91bGQgc2tpcCB0aGlzIGNhc2UuXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBlbnRyeS5jb250ZW50UmVjdDtcbiAgICAgICAgICAgIHRoaXMubGF5b3V0KHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICB9KSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgdG9nZ2xlQ2xhc3MsIHdhdGNoRWxlbWVudFJlc2l6ZSB9IGZyb20gJy4vZG9tJztcbmltcG9ydCB7IGFkZERpc3Bvc2FibGVMaXN0ZW5lciB9IGZyb20gJy4vZXZlbnRzJztcbmltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUgfSBmcm9tICcuL2xpZmVjeWNsZSc7XG5pbXBvcnQgeyBjbGFtcCB9IGZyb20gJy4vbWF0aCc7XG5leHBvcnQgY2xhc3MgU2Nyb2xsYmFyIGV4dGVuZHMgQ29tcG9zaXRlRGlzcG9zYWJsZSB7XG4gICAgZ2V0IGVsZW1lbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbGVtZW50O1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihzY3JvbGxhYmxlRWxlbWVudCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnNjcm9sbGFibGVFbGVtZW50ID0gc2Nyb2xsYWJsZUVsZW1lbnQ7XG4gICAgICAgIHRoaXMuX3Njcm9sbExlZnQgPSAwO1xuICAgICAgICB0aGlzLl9lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NOYW1lID0gJ2R2LXNjcm9sbGFibGUnO1xuICAgICAgICB0aGlzLl9ob3Jpem9udGFsU2Nyb2xsYmFyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRoaXMuX2hvcml6b250YWxTY3JvbGxiYXIuY2xhc3NOYW1lID0gJ2R2LXNjcm9sbGJhci1ob3Jpem9udGFsJztcbiAgICAgICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKHNjcm9sbGFibGVFbGVtZW50KTtcbiAgICAgICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuX2hvcml6b250YWxTY3JvbGxiYXIpO1xuICAgICAgICB0aGlzLmFkZERpc3Bvc2FibGVzKGFkZERpc3Bvc2FibGVMaXN0ZW5lcih0aGlzLmVsZW1lbnQsICd3aGVlbCcsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fc2Nyb2xsTGVmdCArPSBldmVudC5kZWx0YVkgKiBTY3JvbGxiYXIuTW91c2VXaGVlbFNwZWVkO1xuICAgICAgICAgICAgdGhpcy5jYWxjdWxhdGVTY3JvbGxiYXJTdHlsZXMoKTtcbiAgICAgICAgfSksIGFkZERpc3Bvc2FibGVMaXN0ZW5lcih0aGlzLl9ob3Jpem9udGFsU2Nyb2xsYmFyLCAncG9pbnRlcmRvd24nLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB0b2dnbGVDbGFzcyh0aGlzLmVsZW1lbnQsICdkdi1zY3JvbGxhYmxlLXNjcm9sbGluZycsIHRydWUpO1xuICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWxDbGllbnRYID0gZXZlbnQuY2xpZW50WDtcbiAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsU2Nyb2xsTGVmdCA9IHRoaXMuX3Njcm9sbExlZnQ7XG4gICAgICAgICAgICBjb25zdCBvblBvaW50ZXJNb3ZlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVsdGFYID0gZXZlbnQuY2xpZW50WCAtIG9yaWdpbmFsQ2xpZW50WDtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGNsaWVudFdpZHRoIH0gPSB0aGlzLmVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBzY3JvbGxXaWR0aCB9ID0gdGhpcy5zY3JvbGxhYmxlRWxlbWVudDtcbiAgICAgICAgICAgICAgICBjb25zdCBwID0gY2xpZW50V2lkdGggLyBzY3JvbGxXaWR0aDtcbiAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGxMZWZ0ID0gb3JpZ2luYWxTY3JvbGxMZWZ0ICsgZGVsdGFYIC8gcDtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGN1bGF0ZVNjcm9sbGJhclN0eWxlcygpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IG9uRW5kID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKHRoaXMuZWxlbWVudCwgJ2R2LXNjcm9sbGFibGUtc2Nyb2xsaW5nJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgb25Qb2ludGVyTW92ZSk7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcnVwJywgb25FbmQpO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJjYW5jZWwnLCBvbkVuZCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcm1vdmUnLCBvblBvaW50ZXJNb3ZlKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJ1cCcsIG9uRW5kKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJjYW5jZWwnLCBvbkVuZCk7XG4gICAgICAgIH0pLCBhZGREaXNwb3NhYmxlTGlzdGVuZXIodGhpcy5lbGVtZW50LCAnc2Nyb2xsJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jYWxjdWxhdGVTY3JvbGxiYXJTdHlsZXMoKTtcbiAgICAgICAgfSksIGFkZERpc3Bvc2FibGVMaXN0ZW5lcih0aGlzLnNjcm9sbGFibGVFbGVtZW50LCAnc2Nyb2xsJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fc2Nyb2xsTGVmdCA9IHRoaXMuc2Nyb2xsYWJsZUVsZW1lbnQuc2Nyb2xsTGVmdDtcbiAgICAgICAgICAgIHRoaXMuY2FsY3VsYXRlU2Nyb2xsYmFyU3R5bGVzKCk7XG4gICAgICAgIH0pLCB3YXRjaEVsZW1lbnRSZXNpemUodGhpcy5lbGVtZW50LCAoKSA9PiB7XG4gICAgICAgICAgICB0b2dnbGVDbGFzcyh0aGlzLmVsZW1lbnQsICdkdi1zY3JvbGxhYmxlLXJlc2l6aW5nJywgdHJ1ZSk7XG4gICAgICAgICAgICBpZiAodGhpcy5fYW5pbWF0aW9uVGltZXIpIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fYW5pbWF0aW9uVGltZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fYW5pbWF0aW9uVGltZXIpO1xuICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKHRoaXMuZWxlbWVudCwgJ2R2LXNjcm9sbGFibGUtcmVzaXppbmcnLCBmYWxzZSk7XG4gICAgICAgICAgICB9LCA1MDApO1xuICAgICAgICAgICAgdGhpcy5jYWxjdWxhdGVTY3JvbGxiYXJTdHlsZXMoKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBjYWxjdWxhdGVTY3JvbGxiYXJTdHlsZXMoKSB7XG4gICAgICAgIGNvbnN0IHsgY2xpZW50V2lkdGggfSA9IHRoaXMuZWxlbWVudDtcbiAgICAgICAgY29uc3QgeyBzY3JvbGxXaWR0aCB9ID0gdGhpcy5zY3JvbGxhYmxlRWxlbWVudDtcbiAgICAgICAgY29uc3QgaGFzU2Nyb2xsYmFyID0gc2Nyb2xsV2lkdGggPiBjbGllbnRXaWR0aDtcbiAgICAgICAgaWYgKGhhc1Njcm9sbGJhcikge1xuICAgICAgICAgICAgY29uc3QgcHggPSBjbGllbnRXaWR0aCAqIChjbGllbnRXaWR0aCAvIHNjcm9sbFdpZHRoKTtcbiAgICAgICAgICAgIHRoaXMuX2hvcml6b250YWxTY3JvbGxiYXIuc3R5bGUud2lkdGggPSBgJHtweH1weGA7XG4gICAgICAgICAgICB0aGlzLl9zY3JvbGxMZWZ0ID0gY2xhbXAodGhpcy5fc2Nyb2xsTGVmdCwgMCwgdGhpcy5zY3JvbGxhYmxlRWxlbWVudC5zY3JvbGxXaWR0aCAtIGNsaWVudFdpZHRoKTtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsYWJsZUVsZW1lbnQuc2Nyb2xsTGVmdCA9IHRoaXMuX3Njcm9sbExlZnQ7XG4gICAgICAgICAgICBjb25zdCBwZXJjZW50YWdlQ29tcGxldGUgPSB0aGlzLl9zY3JvbGxMZWZ0IC8gKHNjcm9sbFdpZHRoIC0gY2xpZW50V2lkdGgpO1xuICAgICAgICAgICAgdGhpcy5faG9yaXpvbnRhbFNjcm9sbGJhci5zdHlsZS5sZWZ0ID0gYCR7KGNsaWVudFdpZHRoIC0gcHgpICogcGVyY2VudGFnZUNvbXBsZXRlfXB4YDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2hvcml6b250YWxTY3JvbGxiYXIuc3R5bGUud2lkdGggPSBgMHB4YDtcbiAgICAgICAgICAgIHRoaXMuX2hvcml6b250YWxTY3JvbGxiYXIuc3R5bGUubGVmdCA9IGAwcHhgO1xuICAgICAgICAgICAgdGhpcy5fc2Nyb2xsTGVmdCA9IDA7XG4gICAgICAgIH1cbiAgICB9XG59XG5TY3JvbGxiYXIuTW91c2VXaGVlbFNwZWVkID0gMTtcbiIsImV4cG9ydCBjb25zdCBQUk9QRVJUWV9LRVlTX1NQTElUVklFVyA9ICgoKSA9PiB7XG4gICAgLyoqXG4gICAgICogYnkgcmVhZG9uZyB0aGUga2V5cyBmcm9tIGFuIGVtcHR5IHZhbHVlIG9iamVjdCBUeXBlU2NyaXB0IHdpbGwgZXJyb3JcbiAgICAgKiB3aGVuIHdlIGFkZCBvciByZW1vdmUgbmV3IHByb3BlcnRpZXMgdG8gYERvY2t2aWV3T3B0aW9uc2BcbiAgICAgKi9cbiAgICBjb25zdCBwcm9wZXJ0aWVzID0ge1xuICAgICAgICBvcmllbnRhdGlvbjogdW5kZWZpbmVkLFxuICAgICAgICBkZXNjcmlwdG9yOiB1bmRlZmluZWQsXG4gICAgICAgIHByb3BvcnRpb25hbExheW91dDogdW5kZWZpbmVkLFxuICAgICAgICBzdHlsZXM6IHVuZGVmaW5lZCxcbiAgICAgICAgbWFyZ2luOiB1bmRlZmluZWQsXG4gICAgICAgIGRpc2FibGVBdXRvUmVzaXppbmc6IHVuZGVmaW5lZCxcbiAgICAgICAgY2xhc3NOYW1lOiB1bmRlZmluZWQsXG4gICAgfTtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMocHJvcGVydGllcyk7XG59KSgpO1xuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEFjY3JlZGl0YXRpb246IFRoaXMgZmlsZSBpcyBsYXJnbHkgYmFzZWQgdXBvbiB0aGUgTUlUIGxpY2VuY2VkIFZTQ29kZSBzb3VyY2Vjb2RlIGZvdW5kIGF0OlxuICogaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC92c2NvZGUvdHJlZS9tYWluL3NyYy92cy9iYXNlL2Jyb3dzZXIvdWkvc3BsaXR2aWV3XG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IHJlbW92ZUNsYXNzZXMsIGFkZENsYXNzZXMsIHRvZ2dsZUNsYXNzLCBkaXNhYmxlSWZyYW1lUG9pbnRFdmVudHMsIH0gZnJvbSAnLi4vZG9tJztcbmltcG9ydCB7IEVtaXR0ZXIgfSBmcm9tICcuLi9ldmVudHMnO1xuaW1wb3J0IHsgcHVzaFRvU3RhcnQsIHB1c2hUb0VuZCwgZmlyc3RJbmRleCB9IGZyb20gJy4uL2FycmF5JztcbmltcG9ydCB7IHJhbmdlLCBjbGFtcCB9IGZyb20gJy4uL21hdGgnO1xuaW1wb3J0IHsgVmlld0l0ZW0gfSBmcm9tICcuL3ZpZXdJdGVtJztcbmV4cG9ydCB2YXIgT3JpZW50YXRpb247XG4oZnVuY3Rpb24gKE9yaWVudGF0aW9uKSB7XG4gICAgT3JpZW50YXRpb25bXCJIT1JJWk9OVEFMXCJdID0gXCJIT1JJWk9OVEFMXCI7XG4gICAgT3JpZW50YXRpb25bXCJWRVJUSUNBTFwiXSA9IFwiVkVSVElDQUxcIjtcbn0pKE9yaWVudGF0aW9uIHx8IChPcmllbnRhdGlvbiA9IHt9KSk7XG5leHBvcnQgdmFyIFNhc2hTdGF0ZTtcbihmdW5jdGlvbiAoU2FzaFN0YXRlKSB7XG4gICAgU2FzaFN0YXRlW1Nhc2hTdGF0ZVtcIk1BWElNVU1cIl0gPSAwXSA9IFwiTUFYSU1VTVwiO1xuICAgIFNhc2hTdGF0ZVtTYXNoU3RhdGVbXCJNSU5JTVVNXCJdID0gMV0gPSBcIk1JTklNVU1cIjtcbiAgICBTYXNoU3RhdGVbU2FzaFN0YXRlW1wiRElTQUJMRURcIl0gPSAyXSA9IFwiRElTQUJMRURcIjtcbiAgICBTYXNoU3RhdGVbU2FzaFN0YXRlW1wiRU5BQkxFRFwiXSA9IDNdID0gXCJFTkFCTEVEXCI7XG59KShTYXNoU3RhdGUgfHwgKFNhc2hTdGF0ZSA9IHt9KSk7XG5leHBvcnQgdmFyIExheW91dFByaW9yaXR5O1xuKGZ1bmN0aW9uIChMYXlvdXRQcmlvcml0eSkge1xuICAgIExheW91dFByaW9yaXR5W1wiTG93XCJdID0gXCJsb3dcIjtcbiAgICBMYXlvdXRQcmlvcml0eVtcIkhpZ2hcIl0gPSBcImhpZ2hcIjtcbiAgICBMYXlvdXRQcmlvcml0eVtcIk5vcm1hbFwiXSA9IFwibm9ybWFsXCI7XG59KShMYXlvdXRQcmlvcml0eSB8fCAoTGF5b3V0UHJpb3JpdHkgPSB7fSkpO1xuZXhwb3J0IHZhciBTaXppbmc7XG4oZnVuY3Rpb24gKFNpemluZykge1xuICAgIFNpemluZy5EaXN0cmlidXRlID0geyB0eXBlOiAnZGlzdHJpYnV0ZScgfTtcbiAgICBmdW5jdGlvbiBTcGxpdChpbmRleCkge1xuICAgICAgICByZXR1cm4geyB0eXBlOiAnc3BsaXQnLCBpbmRleCB9O1xuICAgIH1cbiAgICBTaXppbmcuU3BsaXQgPSBTcGxpdDtcbiAgICBmdW5jdGlvbiBJbnZpc2libGUoY2FjaGVkVmlzaWJsZVNpemUpIHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogJ2ludmlzaWJsZScsIGNhY2hlZFZpc2libGVTaXplIH07XG4gICAgfVxuICAgIFNpemluZy5JbnZpc2libGUgPSBJbnZpc2libGU7XG59KShTaXppbmcgfHwgKFNpemluZyA9IHt9KSk7XG5leHBvcnQgY2xhc3MgU3BsaXR2aWV3IHtcbiAgICBnZXQgY29udGVudFNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb250ZW50U2l6ZTtcbiAgICB9XG4gICAgZ2V0IHNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zaXplO1xuICAgIH1cbiAgICBzZXQgc2l6ZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9zaXplID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBvcnRob2dvbmFsU2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29ydGhvZ29uYWxTaXplO1xuICAgIH1cbiAgICBzZXQgb3J0aG9nb25hbFNpemUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fb3J0aG9nb25hbFNpemUgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IGxlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlld0l0ZW1zLmxlbmd0aDtcbiAgICB9XG4gICAgZ2V0IHByb3BvcnRpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJvcG9ydGlvbnMgPyBbLi4udGhpcy5fcHJvcG9ydGlvbnNdIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICBnZXQgb3JpZW50YXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vcmllbnRhdGlvbjtcbiAgICB9XG4gICAgc2V0IG9yaWVudGF0aW9uKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX29yaWVudGF0aW9uID0gdmFsdWU7XG4gICAgICAgIGNvbnN0IHRtcCA9IHRoaXMuc2l6ZTtcbiAgICAgICAgdGhpcy5zaXplID0gdGhpcy5vcnRob2dvbmFsU2l6ZTtcbiAgICAgICAgdGhpcy5vcnRob2dvbmFsU2l6ZSA9IHRtcDtcbiAgICAgICAgcmVtb3ZlQ2xhc3Nlcyh0aGlzLmVsZW1lbnQsICdkdi1ob3Jpem9udGFsJywgJ2R2LXZlcnRpY2FsJyk7XG4gICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMub3JpZW50YXRpb24gPT0gT3JpZW50YXRpb24uSE9SSVpPTlRBTFxuICAgICAgICAgICAgPyAnZHYtaG9yaXpvbnRhbCdcbiAgICAgICAgICAgIDogJ2R2LXZlcnRpY2FsJyk7XG4gICAgfVxuICAgIGdldCBtaW5pbXVtU2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlld0l0ZW1zLnJlZHVjZSgociwgaXRlbSkgPT4gciArIGl0ZW0ubWluaW11bVNpemUsIDApO1xuICAgIH1cbiAgICBnZXQgbWF4aW11bVNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxlbmd0aCA9PT0gMFxuICAgICAgICAgICAgPyBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFlcbiAgICAgICAgICAgIDogdGhpcy52aWV3SXRlbXMucmVkdWNlKChyLCBpdGVtKSA9PiByICsgaXRlbS5tYXhpbXVtU2l6ZSwgMCk7XG4gICAgfVxuICAgIGdldCBzdGFydFNuYXBwaW5nRW5hYmxlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXJ0U25hcHBpbmdFbmFibGVkO1xuICAgIH1cbiAgICBzZXQgc3RhcnRTbmFwcGluZ0VuYWJsZWQoc3RhcnRTbmFwcGluZ0VuYWJsZWQpIHtcbiAgICAgICAgaWYgKHRoaXMuX3N0YXJ0U25hcHBpbmdFbmFibGVkID09PSBzdGFydFNuYXBwaW5nRW5hYmxlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3N0YXJ0U25hcHBpbmdFbmFibGVkID0gc3RhcnRTbmFwcGluZ0VuYWJsZWQ7XG4gICAgICAgIHRoaXMudXBkYXRlU2FzaEVuYWJsZW1lbnQoKTtcbiAgICB9XG4gICAgZ2V0IGVuZFNuYXBwaW5nRW5hYmxlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuZFNuYXBwaW5nRW5hYmxlZDtcbiAgICB9XG4gICAgc2V0IGVuZFNuYXBwaW5nRW5hYmxlZChlbmRTbmFwcGluZ0VuYWJsZWQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2VuZFNuYXBwaW5nRW5hYmxlZCA9PT0gZW5kU25hcHBpbmdFbmFibGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZW5kU25hcHBpbmdFbmFibGVkID0gZW5kU25hcHBpbmdFbmFibGVkO1xuICAgICAgICB0aGlzLnVwZGF0ZVNhc2hFbmFibGVtZW50KCk7XG4gICAgfVxuICAgIGdldCBkaXNhYmxlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rpc2FibGVkO1xuICAgIH1cbiAgICBzZXQgZGlzYWJsZWQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fZGlzYWJsZWQgPSB2YWx1ZTtcbiAgICAgICAgdG9nZ2xlQ2xhc3ModGhpcy5lbGVtZW50LCAnZHYtc3BsaXR2aWV3LWRpc2FibGVkJywgdmFsdWUpO1xuICAgIH1cbiAgICBnZXQgbWFyZ2luKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWFyZ2luO1xuICAgIH1cbiAgICBzZXQgbWFyZ2luKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX21hcmdpbiA9IHZhbHVlO1xuICAgICAgICB0b2dnbGVDbGFzcyh0aGlzLmVsZW1lbnQsICdkdi1zcGxpdHZpZXctaGFzLW1hcmdpbicsIHZhbHVlICE9PSAwKTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgICB0aGlzLnZpZXdJdGVtcyA9IFtdO1xuICAgICAgICB0aGlzLnNhc2hlcyA9IFtdO1xuICAgICAgICB0aGlzLl9zaXplID0gMDtcbiAgICAgICAgdGhpcy5fb3J0aG9nb25hbFNpemUgPSAwO1xuICAgICAgICB0aGlzLl9jb250ZW50U2l6ZSA9IDA7XG4gICAgICAgIHRoaXMuX3Byb3BvcnRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9zdGFydFNuYXBwaW5nRW5hYmxlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX2VuZFNuYXBwaW5nRW5hYmxlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX2Rpc2FibGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX21hcmdpbiA9IDA7XG4gICAgICAgIHRoaXMuX29uRGlkU2FzaEVuZCA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRTYXNoRW5kID0gdGhpcy5fb25EaWRTYXNoRW5kLmV2ZW50O1xuICAgICAgICB0aGlzLl9vbkRpZEFkZFZpZXcgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uRGlkQWRkVmlldyA9IHRoaXMuX29uRGlkQWRkVmlldy5ldmVudDtcbiAgICAgICAgdGhpcy5fb25EaWRSZW1vdmVWaWV3ID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZFJlbW92ZVZpZXcgPSB0aGlzLl9vbkRpZFJlbW92ZVZpZXcuZXZlbnQ7XG4gICAgICAgIHRoaXMucmVzaXplID0gKGluZGV4LCBkZWx0YSwgc2l6ZXMgPSB0aGlzLnZpZXdJdGVtcy5tYXAoKHgpID0+IHguc2l6ZSksIGxvd1ByaW9yaXR5SW5kZXhlcywgaGlnaFByaW9yaXR5SW5kZXhlcywgb3ZlcmxvYWRNaW5EZWx0YSA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWSwgb3ZlcmxvYWRNYXhEZWx0YSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSwgc25hcEJlZm9yZSwgc25hcEFmdGVyKSA9PiB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID4gdGhpcy52aWV3SXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB1cEluZGV4ZXMgPSByYW5nZShpbmRleCwgLTEpO1xuICAgICAgICAgICAgY29uc3QgZG93bkluZGV4ZXMgPSByYW5nZShpbmRleCArIDEsIHRoaXMudmlld0l0ZW1zLmxlbmd0aCk7XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgaWYgKGhpZ2hQcmlvcml0eUluZGV4ZXMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgaGlnaFByaW9yaXR5SW5kZXhlcykge1xuICAgICAgICAgICAgICAgICAgICBwdXNoVG9TdGFydCh1cEluZGV4ZXMsIGkpO1xuICAgICAgICAgICAgICAgICAgICBwdXNoVG9TdGFydChkb3duSW5kZXhlcywgaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxvd1ByaW9yaXR5SW5kZXhlcykge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaSBvZiBsb3dQcmlvcml0eUluZGV4ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcHVzaFRvRW5kKHVwSW5kZXhlcywgaSk7XG4gICAgICAgICAgICAgICAgICAgIHB1c2hUb0VuZChkb3duSW5kZXhlcywgaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIGNvbnN0IHVwSXRlbXMgPSB1cEluZGV4ZXMubWFwKChpKSA9PiB0aGlzLnZpZXdJdGVtc1tpXSk7XG4gICAgICAgICAgICBjb25zdCB1cFNpemVzID0gdXBJbmRleGVzLm1hcCgoaSkgPT4gc2l6ZXNbaV0pO1xuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIGNvbnN0IGRvd25JdGVtcyA9IGRvd25JbmRleGVzLm1hcCgoaSkgPT4gdGhpcy52aWV3SXRlbXNbaV0pO1xuICAgICAgICAgICAgY29uc3QgZG93blNpemVzID0gZG93bkluZGV4ZXMubWFwKChpKSA9PiBzaXplc1tpXSk7XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgY29uc3QgbWluRGVsdGFVcCA9IHVwSW5kZXhlcy5yZWR1Y2UoKF8sIGkpID0+IF8gKyB0aGlzLnZpZXdJdGVtc1tpXS5taW5pbXVtU2l6ZSAtIHNpemVzW2ldLCAwKTtcbiAgICAgICAgICAgIGNvbnN0IG1heERlbHRhVXAgPSB1cEluZGV4ZXMucmVkdWNlKChfLCBpKSA9PiBfICsgdGhpcy52aWV3SXRlbXNbaV0ubWF4aW11bVNpemUgLSBzaXplc1tpXSwgMCk7XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgY29uc3QgbWF4RGVsdGFEb3duID0gZG93bkluZGV4ZXMubGVuZ3RoID09PSAwXG4gICAgICAgICAgICAgICAgPyBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFlcbiAgICAgICAgICAgICAgICA6IGRvd25JbmRleGVzLnJlZHVjZSgoXywgaSkgPT4gXyArIHNpemVzW2ldIC0gdGhpcy52aWV3SXRlbXNbaV0ubWluaW11bVNpemUsIDApO1xuICAgICAgICAgICAgY29uc3QgbWluRGVsdGFEb3duID0gZG93bkluZGV4ZXMubGVuZ3RoID09PSAwXG4gICAgICAgICAgICAgICAgPyBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFlcbiAgICAgICAgICAgICAgICA6IGRvd25JbmRleGVzLnJlZHVjZSgoXywgaSkgPT4gXyArIHNpemVzW2ldIC0gdGhpcy52aWV3SXRlbXNbaV0ubWF4aW11bVNpemUsIDApO1xuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIGNvbnN0IG1pbkRlbHRhID0gTWF0aC5tYXgobWluRGVsdGFVcCwgbWluRGVsdGFEb3duKTtcbiAgICAgICAgICAgIGNvbnN0IG1heERlbHRhID0gTWF0aC5taW4obWF4RGVsdGFEb3duLCBtYXhEZWx0YVVwKTtcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICBsZXQgc25hcHBlZCA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHNuYXBCZWZvcmUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzbmFwVmlldyA9IHRoaXMudmlld0l0ZW1zW3NuYXBCZWZvcmUuaW5kZXhdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZpc2libGUgPSBkZWx0YSA+PSBzbmFwQmVmb3JlLmxpbWl0RGVsdGE7XG4gICAgICAgICAgICAgICAgc25hcHBlZCA9IHZpc2libGUgIT09IHNuYXBWaWV3LnZpc2libGU7XG4gICAgICAgICAgICAgICAgc25hcFZpZXcuc2V0VmlzaWJsZSh2aXNpYmxlLCBzbmFwQmVmb3JlLnNpemUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFzbmFwcGVkICYmIHNuYXBBZnRlcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNuYXBWaWV3ID0gdGhpcy52aWV3SXRlbXNbc25hcEFmdGVyLmluZGV4XTtcbiAgICAgICAgICAgICAgICBjb25zdCB2aXNpYmxlID0gZGVsdGEgPCBzbmFwQWZ0ZXIubGltaXREZWx0YTtcbiAgICAgICAgICAgICAgICBzbmFwcGVkID0gdmlzaWJsZSAhPT0gc25hcFZpZXcudmlzaWJsZTtcbiAgICAgICAgICAgICAgICBzbmFwVmlldy5zZXRWaXNpYmxlKHZpc2libGUsIHNuYXBBZnRlci5zaXplKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzbmFwcGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVzaXplKGluZGV4LCBkZWx0YSwgc2l6ZXMsIGxvd1ByaW9yaXR5SW5kZXhlcywgaGlnaFByaW9yaXR5SW5kZXhlcywgb3ZlcmxvYWRNaW5EZWx0YSwgb3ZlcmxvYWRNYXhEZWx0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgY29uc3QgdGVudGF0aXZlRGVsdGEgPSBjbGFtcChkZWx0YSwgbWluRGVsdGEsIG1heERlbHRhKTtcbiAgICAgICAgICAgIGxldCBhY3R1YWxEZWx0YSA9IDA7XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgbGV0IGRlbHRhVXAgPSB0ZW50YXRpdmVEZWx0YTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdXBJdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSB1cEl0ZW1zW2ldO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNpemUgPSBjbGFtcCh1cFNpemVzW2ldICsgZGVsdGFVcCwgaXRlbS5taW5pbXVtU2l6ZSwgaXRlbS5tYXhpbXVtU2l6ZSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgdmlld0RlbHRhID0gc2l6ZSAtIHVwU2l6ZXNbaV07XG4gICAgICAgICAgICAgICAgYWN0dWFsRGVsdGEgKz0gdmlld0RlbHRhO1xuICAgICAgICAgICAgICAgIGRlbHRhVXAgLT0gdmlld0RlbHRhO1xuICAgICAgICAgICAgICAgIGl0ZW0uc2l6ZSA9IHNpemU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgbGV0IGRlbHRhRG93biA9IGFjdHVhbERlbHRhO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkb3duSXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0gZG93bkl0ZW1zW2ldO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNpemUgPSBjbGFtcChkb3duU2l6ZXNbaV0gLSBkZWx0YURvd24sIGl0ZW0ubWluaW11bVNpemUsIGl0ZW0ubWF4aW11bVNpemUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZpZXdEZWx0YSA9IHNpemUgLSBkb3duU2l6ZXNbaV07XG4gICAgICAgICAgICAgICAgZGVsdGFEb3duICs9IHZpZXdEZWx0YTtcbiAgICAgICAgICAgICAgICBpdGVtLnNpemUgPSBzaXplO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIHJldHVybiBkZWx0YTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fb3JpZW50YXRpb24gPSAoX2EgPSBvcHRpb25zLm9yaWVudGF0aW9uKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBPcmllbnRhdGlvbi5WRVJUSUNBTDtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gdGhpcy5jcmVhdGVDb250YWluZXIoKTtcbiAgICAgICAgdGhpcy5tYXJnaW4gPSAoX2IgPSBvcHRpb25zLm1hcmdpbikgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogMDtcbiAgICAgICAgdGhpcy5wcm9wb3J0aW9uYWxMYXlvdXQgPVxuICAgICAgICAgICAgb3B0aW9ucy5wcm9wb3J0aW9uYWxMYXlvdXQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gdHJ1ZVxuICAgICAgICAgICAgICAgIDogISFvcHRpb25zLnByb3BvcnRpb25hbExheW91dDtcbiAgICAgICAgdGhpcy52aWV3Q29udGFpbmVyID0gdGhpcy5jcmVhdGVWaWV3Q29udGFpbmVyKCk7XG4gICAgICAgIHRoaXMuc2FzaENvbnRhaW5lciA9IHRoaXMuY3JlYXRlU2FzaENvbnRhaW5lcigpO1xuICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5zYXNoQ29udGFpbmVyKTtcbiAgICAgICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMudmlld0NvbnRhaW5lcik7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudCk7XG4gICAgICAgIHRoaXMuc3R5bGUob3B0aW9ucy5zdHlsZXMpO1xuICAgICAgICAvLyBXZSBoYXZlIGFuIGV4aXN0aW5nIHNldCBvZiB2aWV3LCBhZGQgdGhlbSBub3dcbiAgICAgICAgaWYgKG9wdGlvbnMuZGVzY3JpcHRvcikge1xuICAgICAgICAgICAgdGhpcy5fc2l6ZSA9IG9wdGlvbnMuZGVzY3JpcHRvci5zaXplO1xuICAgICAgICAgICAgb3B0aW9ucy5kZXNjcmlwdG9yLnZpZXdzLmZvckVhY2goKHZpZXdEZXNjcmlwdG9yLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNpemluZyA9IHZpZXdEZXNjcmlwdG9yLnZpc2libGUgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgICAgICAgICB2aWV3RGVzY3JpcHRvci52aXNpYmxlXG4gICAgICAgICAgICAgICAgICAgID8gdmlld0Rlc2NyaXB0b3Iuc2l6ZVxuICAgICAgICAgICAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdpbnZpc2libGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGVkVmlzaWJsZVNpemU6IHZpZXdEZXNjcmlwdG9yLnNpemUsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY29uc3QgdmlldyA9IHZpZXdEZXNjcmlwdG9yLnZpZXc7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRWaWV3KHZpZXcsIHNpemluZywgaW5kZXgsIHRydWVcbiAgICAgICAgICAgICAgICAvLyB0cnVlIHNraXAgbGF5b3V0XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZSBjb250ZW50IHNpemUgYW5kIHByb3BvcnRpb25zIGZvciBmaXJzdCBsYXlvdXRcbiAgICAgICAgICAgIHRoaXMuX2NvbnRlbnRTaXplID0gdGhpcy52aWV3SXRlbXMucmVkdWNlKChyLCBpKSA9PiByICsgaS5zaXplLCAwKTtcbiAgICAgICAgICAgIHRoaXMuc2F2ZVByb3BvcnRpb25zKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3R5bGUoc3R5bGVzKSB7XG4gICAgICAgIGlmICgoc3R5bGVzID09PSBudWxsIHx8IHN0eWxlcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogc3R5bGVzLnNlcGFyYXRvckJvcmRlcikgPT09ICd0cmFuc3BhcmVudCcpIHtcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzZXModGhpcy5lbGVtZW50LCAnZHYtc2VwYXJhdG9yLWJvcmRlcicpO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLnJlbW92ZVByb3BlcnR5KCctLWR2LXNlcGFyYXRvci1ib3JkZXInKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGFkZENsYXNzZXModGhpcy5lbGVtZW50LCAnZHYtc2VwYXJhdG9yLWJvcmRlcicpO1xuICAgICAgICAgICAgaWYgKHN0eWxlcyA9PT0gbnVsbCB8fCBzdHlsZXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHN0eWxlcy5zZXBhcmF0b3JCb3JkZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoJy0tZHYtc2VwYXJhdG9yLWJvcmRlcicsIHN0eWxlcy5zZXBhcmF0b3JCb3JkZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlzVmlld1Zpc2libGUoaW5kZXgpIHtcbiAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLnZpZXdJdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW5kZXggb3V0IG9mIGJvdW5kcycpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZpZXdJdGVtID0gdGhpcy52aWV3SXRlbXNbaW5kZXhdO1xuICAgICAgICByZXR1cm4gdmlld0l0ZW0udmlzaWJsZTtcbiAgICB9XG4gICAgc2V0Vmlld1Zpc2libGUoaW5kZXgsIHZpc2libGUpIHtcbiAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLnZpZXdJdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW5kZXggb3V0IG9mIGJvdW5kcycpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZpZXdJdGVtID0gdGhpcy52aWV3SXRlbXNbaW5kZXhdO1xuICAgICAgICB2aWV3SXRlbS5zZXRWaXNpYmxlKHZpc2libGUsIHZpZXdJdGVtLnNpemUpO1xuICAgICAgICB0aGlzLmRpc3RyaWJ1dGVFbXB0eVNwYWNlKGluZGV4KTtcbiAgICAgICAgdGhpcy5sYXlvdXRWaWV3cygpO1xuICAgICAgICB0aGlzLnNhdmVQcm9wb3J0aW9ucygpO1xuICAgIH1cbiAgICBnZXRWaWV3U2l6ZShpbmRleCkge1xuICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHRoaXMudmlld0l0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXdJdGVtc1tpbmRleF0uc2l6ZTtcbiAgICB9XG4gICAgcmVzaXplVmlldyhpbmRleCwgc2l6ZSkge1xuICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHRoaXMudmlld0l0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGluZGV4ZXMgPSByYW5nZSh0aGlzLnZpZXdJdGVtcy5sZW5ndGgpLmZpbHRlcigoaSkgPT4gaSAhPT0gaW5kZXgpO1xuICAgICAgICBjb25zdCBsb3dQcmlvcml0eUluZGV4ZXMgPSBbXG4gICAgICAgICAgICAuLi5pbmRleGVzLmZpbHRlcigoaSkgPT4gdGhpcy52aWV3SXRlbXNbaV0ucHJpb3JpdHkgPT09IExheW91dFByaW9yaXR5LkxvdyksXG4gICAgICAgICAgICBpbmRleCxcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgaGlnaFByaW9yaXR5SW5kZXhlcyA9IGluZGV4ZXMuZmlsdGVyKChpKSA9PiB0aGlzLnZpZXdJdGVtc1tpXS5wcmlvcml0eSA9PT0gTGF5b3V0UHJpb3JpdHkuSGlnaCk7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLnZpZXdJdGVtc1tpbmRleF07XG4gICAgICAgIHNpemUgPSBNYXRoLnJvdW5kKHNpemUpO1xuICAgICAgICBzaXplID0gY2xhbXAoc2l6ZSwgaXRlbS5taW5pbXVtU2l6ZSwgTWF0aC5taW4oaXRlbS5tYXhpbXVtU2l6ZSwgdGhpcy5fc2l6ZSkpO1xuICAgICAgICBpdGVtLnNpemUgPSBzaXplO1xuICAgICAgICB0aGlzLnJlbGF5b3V0KGxvd1ByaW9yaXR5SW5kZXhlcywgaGlnaFByaW9yaXR5SW5kZXhlcyk7XG4gICAgfVxuICAgIGdldFZpZXdzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3SXRlbXMubWFwKCh4KSA9PiB4LnZpZXcpO1xuICAgIH1cbiAgICBvbkRpZENoYW5nZShpdGVtLCBzaXplKSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy52aWV3SXRlbXMuaW5kZXhPZihpdGVtKTtcbiAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLnZpZXdJdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzaXplID0gdHlwZW9mIHNpemUgPT09ICdudW1iZXInID8gc2l6ZSA6IGl0ZW0uc2l6ZTtcbiAgICAgICAgc2l6ZSA9IGNsYW1wKHNpemUsIGl0ZW0ubWluaW11bVNpemUsIGl0ZW0ubWF4aW11bVNpemUpO1xuICAgICAgICBpdGVtLnNpemUgPSBzaXplO1xuICAgICAgICBjb25zdCBpbmRleGVzID0gcmFuZ2UodGhpcy52aWV3SXRlbXMubGVuZ3RoKS5maWx0ZXIoKGkpID0+IGkgIT09IGluZGV4KTtcbiAgICAgICAgY29uc3QgbG93UHJpb3JpdHlJbmRleGVzID0gW1xuICAgICAgICAgICAgLi4uaW5kZXhlcy5maWx0ZXIoKGkpID0+IHRoaXMudmlld0l0ZW1zW2ldLnByaW9yaXR5ID09PSBMYXlvdXRQcmlvcml0eS5Mb3cpLFxuICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgIF07XG4gICAgICAgIGNvbnN0IGhpZ2hQcmlvcml0eUluZGV4ZXMgPSBpbmRleGVzLmZpbHRlcigoaSkgPT4gdGhpcy52aWV3SXRlbXNbaV0ucHJpb3JpdHkgPT09IExheW91dFByaW9yaXR5LkhpZ2gpO1xuICAgICAgICAvKipcbiAgICAgICAgICogYWRkIHRoaXMgdmlldyB3ZSBhcmUgY2hhbmdpbmcgdG8gdGhlIGxvdy1pbmRleCBsaXN0IHNpbmNlIHdlIGhhdmUgZGV0ZXJtaW5lZCB0aGUgc2l6ZVxuICAgICAgICAgKiBoZXJlIGFuZCBkb24ndCB3YW50IGl0IGNoYW5nZWRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVsYXlvdXQoWy4uLmxvd1ByaW9yaXR5SW5kZXhlcywgaW5kZXhdLCBoaWdoUHJpb3JpdHlJbmRleGVzKTtcbiAgICB9XG4gICAgYWRkVmlldyh2aWV3LCBzaXplID0geyB0eXBlOiAnZGlzdHJpYnV0ZScgfSwgaW5kZXggPSB0aGlzLnZpZXdJdGVtcy5sZW5ndGgsIHNraXBMYXlvdXQpIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGNvbnRhaW5lci5jbGFzc05hbWUgPSAnZHYtdmlldyc7XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh2aWV3LmVsZW1lbnQpO1xuICAgICAgICBsZXQgdmlld1NpemU7XG4gICAgICAgIGlmICh0eXBlb2Ygc2l6ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHZpZXdTaXplID0gc2l6ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzaXplLnR5cGUgPT09ICdzcGxpdCcpIHtcbiAgICAgICAgICAgIHZpZXdTaXplID0gdGhpcy5nZXRWaWV3U2l6ZShzaXplLmluZGV4KSAvIDI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc2l6ZS50eXBlID09PSAnaW52aXNpYmxlJykge1xuICAgICAgICAgICAgdmlld1NpemUgPSB7IGNhY2hlZFZpc2libGVTaXplOiBzaXplLmNhY2hlZFZpc2libGVTaXplIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2aWV3U2l6ZSA9IHZpZXcubWluaW11bVNpemU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGlzcG9zYWJsZSA9IHZpZXcub25EaWRDaGFuZ2UoKG5ld1NpemUpID0+IHRoaXMub25EaWRDaGFuZ2Uodmlld0l0ZW0sIG5ld1NpemUuc2l6ZSkpO1xuICAgICAgICBjb25zdCB2aWV3SXRlbSA9IG5ldyBWaWV3SXRlbShjb250YWluZXIsIHZpZXcsIHZpZXdTaXplLCB7XG4gICAgICAgICAgICBkaXNwb3NlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgZGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3Q29udGFpbmVyLnJlbW92ZUNoaWxkKGNvbnRhaW5lcik7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGluZGV4ID09PSB0aGlzLnZpZXdJdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMudmlld0NvbnRhaW5lci5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy52aWV3Q29udGFpbmVyLmluc2VydEJlZm9yZShjb250YWluZXIsIHRoaXMudmlld0NvbnRhaW5lci5jaGlsZHJlbi5pdGVtKGluZGV4KSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy52aWV3SXRlbXMuc3BsaWNlKGluZGV4LCAwLCB2aWV3SXRlbSk7XG4gICAgICAgIGlmICh0aGlzLnZpZXdJdGVtcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAvL2FkZCBzYXNoXG4gICAgICAgICAgICBjb25zdCBzYXNoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBzYXNoLmNsYXNzTmFtZSA9ICdkdi1zYXNoJztcbiAgICAgICAgICAgIGNvbnN0IG9uUG9pbnRlclN0YXJ0ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHRoaXMudmlld0l0ZW1zKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uZW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBpZnJhbWVzID0gZGlzYWJsZUlmcmFtZVBvaW50RXZlbnRzKCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSB0aGlzLl9vcmllbnRhdGlvbiA9PT0gT3JpZW50YXRpb24uSE9SSVpPTlRBTFxuICAgICAgICAgICAgICAgICAgICA/IGV2ZW50LmNsaWVudFhcbiAgICAgICAgICAgICAgICAgICAgOiBldmVudC5jbGllbnRZO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNhc2hJbmRleCA9IGZpcnN0SW5kZXgodGhpcy5zYXNoZXMsIChzKSA9PiBzLmNvbnRhaW5lciA9PT0gc2FzaCk7XG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICBjb25zdCBzaXplcyA9IHRoaXMudmlld0l0ZW1zLm1hcCgoeCkgPT4geC5zaXplKTtcbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIGxldCBzbmFwQmVmb3JlO1xuICAgICAgICAgICAgICAgIGxldCBzbmFwQWZ0ZXI7XG4gICAgICAgICAgICAgICAgY29uc3QgdXBJbmRleGVzID0gcmFuZ2Uoc2FzaEluZGV4LCAtMSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZG93bkluZGV4ZXMgPSByYW5nZShzYXNoSW5kZXggKyAxLCB0aGlzLnZpZXdJdGVtcy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1pbkRlbHRhVXAgPSB1cEluZGV4ZXMucmVkdWNlKChyLCBpKSA9PiByICsgKHRoaXMudmlld0l0ZW1zW2ldLm1pbmltdW1TaXplIC0gc2l6ZXNbaV0pLCAwKTtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXhEZWx0YVVwID0gdXBJbmRleGVzLnJlZHVjZSgociwgaSkgPT4gciArICh0aGlzLnZpZXdJdGVtc1tpXS52aWV3TWF4aW11bVNpemUgLSBzaXplc1tpXSksIDApO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1heERlbHRhRG93biA9IGRvd25JbmRleGVzLmxlbmd0aCA9PT0gMFxuICAgICAgICAgICAgICAgICAgICA/IE51bWJlci5QT1NJVElWRV9JTkZJTklUWVxuICAgICAgICAgICAgICAgICAgICA6IGRvd25JbmRleGVzLnJlZHVjZSgociwgaSkgPT4gciArXG4gICAgICAgICAgICAgICAgICAgICAgICAoc2l6ZXNbaV0gLSB0aGlzLnZpZXdJdGVtc1tpXS5taW5pbXVtU2l6ZSksIDApO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1pbkRlbHRhRG93biA9IGRvd25JbmRleGVzLmxlbmd0aCA9PT0gMFxuICAgICAgICAgICAgICAgICAgICA/IE51bWJlci5ORUdBVElWRV9JTkZJTklUWVxuICAgICAgICAgICAgICAgICAgICA6IGRvd25JbmRleGVzLnJlZHVjZSgociwgaSkgPT4gciArXG4gICAgICAgICAgICAgICAgICAgICAgICAoc2l6ZXNbaV0gLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmlld0l0ZW1zW2ldLnZpZXdNYXhpbXVtU2l6ZSksIDApO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1pbkRlbHRhID0gTWF0aC5tYXgobWluRGVsdGFVcCwgbWluRGVsdGFEb3duKTtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXhEZWx0YSA9IE1hdGgubWluKG1heERlbHRhRG93biwgbWF4RGVsdGFVcCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc25hcEJlZm9yZUluZGV4ID0gdGhpcy5maW5kRmlyc3RTbmFwSW5kZXgodXBJbmRleGVzKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzbmFwQWZ0ZXJJbmRleCA9IHRoaXMuZmluZEZpcnN0U25hcEluZGV4KGRvd25JbmRleGVzKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNuYXBCZWZvcmVJbmRleCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc25hcHBlZFZpZXdJdGVtID0gdGhpcy52aWV3SXRlbXNbc25hcEJlZm9yZUluZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaGFsZlNpemUgPSBNYXRoLmZsb29yKHNuYXBwZWRWaWV3SXRlbS52aWV3TWluaW11bVNpemUgLyAyKTtcbiAgICAgICAgICAgICAgICAgICAgc25hcEJlZm9yZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBzbmFwQmVmb3JlSW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW1pdERlbHRhOiBzbmFwcGVkVmlld0l0ZW0udmlzaWJsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gbWluRGVsdGEgLSBoYWxmU2l6ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbWluRGVsdGEgKyBoYWxmU2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IHNuYXBwZWRWaWV3SXRlbS5zaXplLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNuYXBBZnRlckluZGV4ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzbmFwcGVkVmlld0l0ZW0gPSB0aGlzLnZpZXdJdGVtc1tzbmFwQWZ0ZXJJbmRleF07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhhbGZTaXplID0gTWF0aC5mbG9vcihzbmFwcGVkVmlld0l0ZW0udmlld01pbmltdW1TaXplIC8gMik7XG4gICAgICAgICAgICAgICAgICAgIHNuYXBBZnRlciA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBzbmFwQWZ0ZXJJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbWl0RGVsdGE6IHNuYXBwZWRWaWV3SXRlbS52aXNpYmxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBtYXhEZWx0YSArIGhhbGZTaXplXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBtYXhEZWx0YSAtIGhhbGZTaXplLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogc25hcHBlZFZpZXdJdGVtLnNpemUsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IG9uUG9pbnRlck1vdmUgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudCA9IHRoaXMuX29yaWVudGF0aW9uID09PSBPcmllbnRhdGlvbi5IT1JJWk9OVEFMXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGV2ZW50LmNsaWVudFhcbiAgICAgICAgICAgICAgICAgICAgICAgIDogZXZlbnQuY2xpZW50WTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVsdGEgPSBjdXJyZW50IC0gc3RhcnQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzaXplKHNhc2hJbmRleCwgZGVsdGEsIHNpemVzLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgbWluRGVsdGEsIG1heERlbHRhLCBzbmFwQmVmb3JlLCBzbmFwQWZ0ZXIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3RyaWJ1dGVFbXB0eVNwYWNlKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGF5b3V0Vmlld3MoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IGVuZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHRoaXMudmlld0l0ZW1zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmVuYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmcmFtZXMucmVsZWFzZSgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNhdmVQcm9wb3J0aW9ucygpO1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVybW92ZScsIG9uUG9pbnRlck1vdmUpO1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVydXAnLCBlbmQpO1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVyY2FuY2VsJywgZW5kKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25EaWRTYXNoRW5kLmZpcmUodW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgb25Qb2ludGVyTW92ZSk7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcnVwJywgZW5kKTtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyY2FuY2VsJywgZW5kKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzYXNoLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgb25Qb2ludGVyU3RhcnQpO1xuICAgICAgICAgICAgY29uc3Qgc2FzaEl0ZW0gPSB7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyOiBzYXNoLFxuICAgICAgICAgICAgICAgIGRpc3Bvc2FibGU6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2FzaC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIG9uUG9pbnRlclN0YXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXNoQ29udGFpbmVyLnJlbW92ZUNoaWxkKHNhc2gpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5zYXNoQ29udGFpbmVyLmFwcGVuZENoaWxkKHNhc2gpO1xuICAgICAgICAgICAgdGhpcy5zYXNoZXMucHVzaChzYXNoSXRlbSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFza2lwTGF5b3V0KSB7XG4gICAgICAgICAgICB0aGlzLnJlbGF5b3V0KFtpbmRleF0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc2tpcExheW91dCAmJlxuICAgICAgICAgICAgdHlwZW9mIHNpemUgIT09ICdudW1iZXInICYmXG4gICAgICAgICAgICBzaXplLnR5cGUgPT09ICdkaXN0cmlidXRlJykge1xuICAgICAgICAgICAgdGhpcy5kaXN0cmlidXRlVmlld1NpemVzKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fb25EaWRBZGRWaWV3LmZpcmUodmlldyk7XG4gICAgfVxuICAgIGRpc3RyaWJ1dGVWaWV3U2l6ZXMoKSB7XG4gICAgICAgIGNvbnN0IGZsZXhpYmxlVmlld0l0ZW1zID0gW107XG4gICAgICAgIGxldCBmbGV4aWJsZVNpemUgPSAwO1xuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdGhpcy52aWV3SXRlbXMpIHtcbiAgICAgICAgICAgIGlmIChpdGVtLm1heGltdW1TaXplIC0gaXRlbS5taW5pbXVtU2l6ZSA+IDApIHtcbiAgICAgICAgICAgICAgICBmbGV4aWJsZVZpZXdJdGVtcy5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgICAgIGZsZXhpYmxlU2l6ZSArPSBpdGVtLnNpemU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2l6ZSA9IE1hdGguZmxvb3IoZmxleGlibGVTaXplIC8gZmxleGlibGVWaWV3SXRlbXMubGVuZ3RoKTtcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGZsZXhpYmxlVmlld0l0ZW1zKSB7XG4gICAgICAgICAgICBpdGVtLnNpemUgPSBjbGFtcChzaXplLCBpdGVtLm1pbmltdW1TaXplLCBpdGVtLm1heGltdW1TaXplKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbmRleGVzID0gcmFuZ2UodGhpcy52aWV3SXRlbXMubGVuZ3RoKTtcbiAgICAgICAgY29uc3QgbG93UHJpb3JpdHlJbmRleGVzID0gaW5kZXhlcy5maWx0ZXIoKGkpID0+IHRoaXMudmlld0l0ZW1zW2ldLnByaW9yaXR5ID09PSBMYXlvdXRQcmlvcml0eS5Mb3cpO1xuICAgICAgICBjb25zdCBoaWdoUHJpb3JpdHlJbmRleGVzID0gaW5kZXhlcy5maWx0ZXIoKGkpID0+IHRoaXMudmlld0l0ZW1zW2ldLnByaW9yaXR5ID09PSBMYXlvdXRQcmlvcml0eS5IaWdoKTtcbiAgICAgICAgdGhpcy5yZWxheW91dChsb3dQcmlvcml0eUluZGV4ZXMsIGhpZ2hQcmlvcml0eUluZGV4ZXMpO1xuICAgIH1cbiAgICByZW1vdmVWaWV3KGluZGV4LCBzaXppbmcsIHNraXBMYXlvdXQgPSBmYWxzZSkge1xuICAgICAgICAvLyBSZW1vdmUgdmlld1xuICAgICAgICBjb25zdCB2aWV3SXRlbSA9IHRoaXMudmlld0l0ZW1zLnNwbGljZShpbmRleCwgMSlbMF07XG4gICAgICAgIHZpZXdJdGVtLmRpc3Bvc2UoKTtcbiAgICAgICAgLy8gUmVtb3ZlIHNhc2hcbiAgICAgICAgaWYgKHRoaXMudmlld0l0ZW1zLmxlbmd0aCA+PSAxKSB7XG4gICAgICAgICAgICBjb25zdCBzYXNoSW5kZXggPSBNYXRoLm1heChpbmRleCAtIDEsIDApO1xuICAgICAgICAgICAgY29uc3Qgc2FzaEl0ZW0gPSB0aGlzLnNhc2hlcy5zcGxpY2Uoc2FzaEluZGV4LCAxKVswXTtcbiAgICAgICAgICAgIHNhc2hJdGVtLmRpc3Bvc2FibGUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXNraXBMYXlvdXQpIHtcbiAgICAgICAgICAgIHRoaXMucmVsYXlvdXQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2l6aW5nICYmIHNpemluZy50eXBlID09PSAnZGlzdHJpYnV0ZScpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzdHJpYnV0ZVZpZXdTaXplcygpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX29uRGlkUmVtb3ZlVmlldy5maXJlKHZpZXdJdGVtLnZpZXcpO1xuICAgICAgICByZXR1cm4gdmlld0l0ZW0udmlldztcbiAgICB9XG4gICAgZ2V0Vmlld0NhY2hlZFZpc2libGVTaXplKGluZGV4KSB7XG4gICAgICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPj0gdGhpcy52aWV3SXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0luZGV4IG91dCBvZiBib3VuZHMnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2aWV3SXRlbSA9IHRoaXMudmlld0l0ZW1zW2luZGV4XTtcbiAgICAgICAgcmV0dXJuIHZpZXdJdGVtLmNhY2hlZFZpc2libGVTaXplO1xuICAgIH1cbiAgICBtb3ZlVmlldyhmcm9tLCB0bykge1xuICAgICAgICBjb25zdCBjYWNoZWRWaXNpYmxlU2l6ZSA9IHRoaXMuZ2V0Vmlld0NhY2hlZFZpc2libGVTaXplKGZyb20pO1xuICAgICAgICBjb25zdCBzaXppbmcgPSB0eXBlb2YgY2FjaGVkVmlzaWJsZVNpemUgPT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICA/IHRoaXMuZ2V0Vmlld1NpemUoZnJvbSlcbiAgICAgICAgICAgIDogU2l6aW5nLkludmlzaWJsZShjYWNoZWRWaXNpYmxlU2l6ZSk7XG4gICAgICAgIGNvbnN0IHZpZXcgPSB0aGlzLnJlbW92ZVZpZXcoZnJvbSwgdW5kZWZpbmVkLCB0cnVlKTtcbiAgICAgICAgdGhpcy5hZGRWaWV3KHZpZXcsIHNpemluZywgdG8pO1xuICAgIH1cbiAgICBsYXlvdXQoc2l6ZSwgb3J0aG9nb25hbFNpemUpIHtcbiAgICAgICAgY29uc3QgcHJldmlvdXNTaXplID0gTWF0aC5tYXgodGhpcy5zaXplLCB0aGlzLl9jb250ZW50U2l6ZSk7XG4gICAgICAgIHRoaXMuc2l6ZSA9IHNpemU7XG4gICAgICAgIHRoaXMub3J0aG9nb25hbFNpemUgPSBvcnRob2dvbmFsU2l6ZTtcbiAgICAgICAgaWYgKCF0aGlzLnByb3BvcnRpb25zKSB7XG4gICAgICAgICAgICBjb25zdCBpbmRleGVzID0gcmFuZ2UodGhpcy52aWV3SXRlbXMubGVuZ3RoKTtcbiAgICAgICAgICAgIGNvbnN0IGxvd1ByaW9yaXR5SW5kZXhlcyA9IGluZGV4ZXMuZmlsdGVyKChpKSA9PiB0aGlzLnZpZXdJdGVtc1tpXS5wcmlvcml0eSA9PT0gTGF5b3V0UHJpb3JpdHkuTG93KTtcbiAgICAgICAgICAgIGNvbnN0IGhpZ2hQcmlvcml0eUluZGV4ZXMgPSBpbmRleGVzLmZpbHRlcigoaSkgPT4gdGhpcy52aWV3SXRlbXNbaV0ucHJpb3JpdHkgPT09IExheW91dFByaW9yaXR5LkhpZ2gpO1xuICAgICAgICAgICAgdGhpcy5yZXNpemUodGhpcy52aWV3SXRlbXMubGVuZ3RoIC0gMSwgc2l6ZSAtIHByZXZpb3VzU2l6ZSwgdW5kZWZpbmVkLCBsb3dQcmlvcml0eUluZGV4ZXMsIGhpZ2hQcmlvcml0eUluZGV4ZXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbGV0IHRvdGFsID0gMDtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy52aWV3SXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0gdGhpcy52aWV3SXRlbXNbaV07XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvcG9ydGlvbiA9IHRoaXMucHJvcG9ydGlvbnNbaV07XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwcm9wb3J0aW9uID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgICB0b3RhbCArPSBwcm9wb3J0aW9uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2l6ZSAtPSBpdGVtLnNpemU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnZpZXdJdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLnZpZXdJdGVtc1tpXTtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9wb3J0aW9uID0gdGhpcy5wcm9wb3J0aW9uc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHByb3BvcnRpb24gPT09ICdudW1iZXInICYmIHRvdGFsID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBpdGVtLnNpemUgPSBjbGFtcChNYXRoLnJvdW5kKChwcm9wb3J0aW9uICogc2l6ZSkgLyB0b3RhbCksIGl0ZW0ubWluaW11bVNpemUsIGl0ZW0ubWF4aW11bVNpemUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRpc3RyaWJ1dGVFbXB0eVNwYWNlKCk7XG4gICAgICAgIHRoaXMubGF5b3V0Vmlld3MoKTtcbiAgICB9XG4gICAgcmVsYXlvdXQobG93UHJpb3JpdHlJbmRleGVzLCBoaWdoUHJpb3JpdHlJbmRleGVzKSB7XG4gICAgICAgIGNvbnN0IGNvbnRlbnRTaXplID0gdGhpcy52aWV3SXRlbXMucmVkdWNlKChyLCBpKSA9PiByICsgaS5zaXplLCAwKTtcbiAgICAgICAgdGhpcy5yZXNpemUodGhpcy52aWV3SXRlbXMubGVuZ3RoIC0gMSwgdGhpcy5fc2l6ZSAtIGNvbnRlbnRTaXplLCB1bmRlZmluZWQsIGxvd1ByaW9yaXR5SW5kZXhlcywgaGlnaFByaW9yaXR5SW5kZXhlcyk7XG4gICAgICAgIHRoaXMuZGlzdHJpYnV0ZUVtcHR5U3BhY2UoKTtcbiAgICAgICAgdGhpcy5sYXlvdXRWaWV3cygpO1xuICAgICAgICB0aGlzLnNhdmVQcm9wb3J0aW9ucygpO1xuICAgIH1cbiAgICBkaXN0cmlidXRlRW1wdHlTcGFjZShsb3dQcmlvcml0eUluZGV4KSB7XG4gICAgICAgIGNvbnN0IGNvbnRlbnRTaXplID0gdGhpcy52aWV3SXRlbXMucmVkdWNlKChyLCBpKSA9PiByICsgaS5zaXplLCAwKTtcbiAgICAgICAgbGV0IGVtcHR5RGVsdGEgPSB0aGlzLnNpemUgLSBjb250ZW50U2l6ZTtcbiAgICAgICAgY29uc3QgaW5kZXhlcyA9IHJhbmdlKHRoaXMudmlld0l0ZW1zLmxlbmd0aCAtIDEsIC0xKTtcbiAgICAgICAgY29uc3QgbG93UHJpb3JpdHlJbmRleGVzID0gaW5kZXhlcy5maWx0ZXIoKGkpID0+IHRoaXMudmlld0l0ZW1zW2ldLnByaW9yaXR5ID09PSBMYXlvdXRQcmlvcml0eS5Mb3cpO1xuICAgICAgICBjb25zdCBoaWdoUHJpb3JpdHlJbmRleGVzID0gaW5kZXhlcy5maWx0ZXIoKGkpID0+IHRoaXMudmlld0l0ZW1zW2ldLnByaW9yaXR5ID09PSBMYXlvdXRQcmlvcml0eS5IaWdoKTtcbiAgICAgICAgZm9yIChjb25zdCBpbmRleCBvZiBoaWdoUHJpb3JpdHlJbmRleGVzKSB7XG4gICAgICAgICAgICBwdXNoVG9TdGFydChpbmRleGVzLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBpbmRleCBvZiBsb3dQcmlvcml0eUluZGV4ZXMpIHtcbiAgICAgICAgICAgIHB1c2hUb0VuZChpbmRleGVzLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBsb3dQcmlvcml0eUluZGV4ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcHVzaFRvRW5kKGluZGV4ZXMsIGxvd1ByaW9yaXR5SW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBlbXB0eURlbHRhICE9PSAwICYmIGkgPCBpbmRleGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gdGhpcy52aWV3SXRlbXNbaW5kZXhlc1tpXV07XG4gICAgICAgICAgICBjb25zdCBzaXplID0gY2xhbXAoaXRlbS5zaXplICsgZW1wdHlEZWx0YSwgaXRlbS5taW5pbXVtU2l6ZSwgaXRlbS5tYXhpbXVtU2l6ZSk7XG4gICAgICAgICAgICBjb25zdCB2aWV3RGVsdGEgPSBzaXplIC0gaXRlbS5zaXplO1xuICAgICAgICAgICAgZW1wdHlEZWx0YSAtPSB2aWV3RGVsdGE7XG4gICAgICAgICAgICBpdGVtLnNpemUgPSBzaXplO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNhdmVQcm9wb3J0aW9ucygpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcG9ydGlvbmFsTGF5b3V0ICYmIHRoaXMuX2NvbnRlbnRTaXplID4gMCkge1xuICAgICAgICAgICAgdGhpcy5fcHJvcG9ydGlvbnMgPSB0aGlzLnZpZXdJdGVtcy5tYXAoKGkpID0+IGkudmlzaWJsZSA/IGkuc2l6ZSAvIHRoaXMuX2NvbnRlbnRTaXplIDogdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYXJnaW4gZXhwbGFpbjpcbiAgICAgKlxuICAgICAqIEZvciBgbmAgdmlld3MgaW4gYSBzcGxpdHZpZXcgdGhlcmUgd2lsbCBiZSBgbi0xYCBtYXJnaW5zIGBtYC5cbiAgICAgKlxuICAgICAqIFRvIGZpdCB0aGUgbWFyZ2lucyBlYWNoIHZpZXcgbXVzdCByZWR1Y2UgaW4gc2l6ZSBieSBgKG0gKiAobiAtIDEpKSAvIG5gLlxuICAgICAqXG4gICAgICogRm9yIGVhY2ggdmlldyBgaWAgdGhlIG9mZmV0IG11c3QgYmUgYWRqdXN0ZWQgYnkgYG0gKiBpLyhuIC0gMSlgLlxuICAgICAqL1xuICAgIGxheW91dFZpZXdzKCkge1xuICAgICAgICB0aGlzLl9jb250ZW50U2l6ZSA9IHRoaXMudmlld0l0ZW1zLnJlZHVjZSgociwgaSkgPT4gciArIGkuc2l6ZSwgMCk7XG4gICAgICAgIHRoaXMudXBkYXRlU2FzaEVuYWJsZW1lbnQoKTtcbiAgICAgICAgaWYgKHRoaXMudmlld0l0ZW1zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZpc2libGVWaWV3SXRlbXMgPSB0aGlzLnZpZXdJdGVtcy5maWx0ZXIoKGkpID0+IGkudmlzaWJsZSk7XG4gICAgICAgIGNvbnN0IHNhc2hDb3VudCA9IE1hdGgubWF4KDAsIHZpc2libGVWaWV3SXRlbXMubGVuZ3RoIC0gMSk7XG4gICAgICAgIGNvbnN0IG1hcmdpblJlZHVjZWRTaXplID0gKHRoaXMubWFyZ2luICogc2FzaENvdW50KSAvIE1hdGgubWF4KDEsIHZpc2libGVWaWV3SXRlbXMubGVuZ3RoKTtcbiAgICAgICAgbGV0IHRvdGFsTGVmdE9mZnNldCA9IDA7XG4gICAgICAgIGNvbnN0IHZpZXdMZWZ0T2Zmc2V0cyA9IFtdO1xuICAgICAgICBjb25zdCBzYXNoV2lkdGggPSA0OyAvLyBoYXJkY29kZWQgaW4gY3NzXG4gICAgICAgIGNvbnN0IHJ1bm5pbmdWaXNpYmxlUGFuZWxDb3VudCA9IHRoaXMudmlld0l0ZW1zLnJlZHVjZSgoYXJyLCB2aWV3SXRlbSwgaSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmxhZyA9IHZpZXdJdGVtLnZpc2libGUgPyAxIDogMDtcbiAgICAgICAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYXJyLnB1c2goZmxhZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBhcnIucHVzaChhcnJbaSAtIDFdICsgZmxhZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYXJyO1xuICAgICAgICB9LCBbXSk7XG4gICAgICAgIC8vIGNhbGN1bGF0ZSBib3RoIHZpZXcgYW5kIGNhc2ggcG9zaXRpb25zXG4gICAgICAgIHRoaXMudmlld0l0ZW1zLmZvckVhY2goKHZpZXcsIGkpID0+IHtcbiAgICAgICAgICAgIHRvdGFsTGVmdE9mZnNldCArPSB0aGlzLnZpZXdJdGVtc1tpXS5zaXplO1xuICAgICAgICAgICAgdmlld0xlZnRPZmZzZXRzLnB1c2godG90YWxMZWZ0T2Zmc2V0KTtcbiAgICAgICAgICAgIGNvbnN0IHNpemUgPSB2aWV3LnZpc2libGUgPyB2aWV3LnNpemUgLSBtYXJnaW5SZWR1Y2VkU2l6ZSA6IDA7XG4gICAgICAgICAgICBjb25zdCB2aXNpYmxlUGFuZWxzQmVmb3JlVGhpc1ZpZXcgPSBNYXRoLm1heCgwLCBydW5uaW5nVmlzaWJsZVBhbmVsQ291bnRbaV0gLSAxKTtcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IGkgPT09IDAgfHwgdmlzaWJsZVBhbmVsc0JlZm9yZVRoaXNWaWV3ID09PSAwXG4gICAgICAgICAgICAgICAgPyAwXG4gICAgICAgICAgICAgICAgOiB2aWV3TGVmdE9mZnNldHNbaSAtIDFdICtcbiAgICAgICAgICAgICAgICAgICAgKHZpc2libGVQYW5lbHNCZWZvcmVUaGlzVmlldyAvIHNhc2hDb3VudCkgKlxuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luUmVkdWNlZFNpemU7XG4gICAgICAgICAgICBpZiAoaSA8IHRoaXMudmlld0l0ZW1zLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAvLyBjYWxjdWxhdGUgc2FzaCBwb3NpdGlvblxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1NpemUgPSB2aWV3LnZpc2libGVcbiAgICAgICAgICAgICAgICAgICAgPyBvZmZzZXQgKyBzaXplIC0gc2FzaFdpZHRoIC8gMiArIHRoaXMubWFyZ2luIC8gMlxuICAgICAgICAgICAgICAgICAgICA6IG9mZnNldDtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fb3JpZW50YXRpb24gPT09IE9yaWVudGF0aW9uLkhPUklaT05UQUwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXNoZXNbaV0uY29udGFpbmVyLnN0eWxlLmxlZnQgPSBgJHtuZXdTaXplfXB4YDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXNoZXNbaV0uY29udGFpbmVyLnN0eWxlLnRvcCA9IGAwcHhgO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fb3JpZW50YXRpb24gPT09IE9yaWVudGF0aW9uLlZFUlRJQ0FMKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2FzaGVzW2ldLmNvbnRhaW5lci5zdHlsZS5sZWZ0ID0gYDBweGA7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2FzaGVzW2ldLmNvbnRhaW5lci5zdHlsZS50b3AgPSBgJHtuZXdTaXplfXB4YDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBjYWxjdWxhdGUgdmlldyBwb3NpdGlvblxuICAgICAgICAgICAgaWYgKHRoaXMuX29yaWVudGF0aW9uID09PSBPcmllbnRhdGlvbi5IT1JJWk9OVEFMKSB7XG4gICAgICAgICAgICAgICAgdmlldy5jb250YWluZXIuc3R5bGUud2lkdGggPSBgJHtzaXplfXB4YDtcbiAgICAgICAgICAgICAgICB2aWV3LmNvbnRhaW5lci5zdHlsZS5sZWZ0ID0gYCR7b2Zmc2V0fXB4YDtcbiAgICAgICAgICAgICAgICB2aWV3LmNvbnRhaW5lci5zdHlsZS50b3AgPSAnJztcbiAgICAgICAgICAgICAgICB2aWV3LmNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLl9vcmllbnRhdGlvbiA9PT0gT3JpZW50YXRpb24uVkVSVElDQUwpIHtcbiAgICAgICAgICAgICAgICB2aWV3LmNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSBgJHtzaXplfXB4YDtcbiAgICAgICAgICAgICAgICB2aWV3LmNvbnRhaW5lci5zdHlsZS50b3AgPSBgJHtvZmZzZXR9cHhgO1xuICAgICAgICAgICAgICAgIHZpZXcuY29udGFpbmVyLnN0eWxlLndpZHRoID0gJyc7XG4gICAgICAgICAgICAgICAgdmlldy5jb250YWluZXIuc3R5bGUubGVmdCA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmlldy52aWV3LmxheW91dCh2aWV3LnNpemUgLSBtYXJnaW5SZWR1Y2VkU2l6ZSwgdGhpcy5fb3J0aG9nb25hbFNpemUpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZmluZEZpcnN0U25hcEluZGV4KGluZGV4ZXMpIHtcbiAgICAgICAgLy8gdmlzaWJsZSB2aWV3cyBmaXJzdFxuICAgICAgICBmb3IgKGNvbnN0IGluZGV4IG9mIGluZGV4ZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHZpZXdJdGVtID0gdGhpcy52aWV3SXRlbXNbaW5kZXhdO1xuICAgICAgICAgICAgaWYgKCF2aWV3SXRlbS52aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodmlld0l0ZW0uc25hcCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyB0aGVuLCBoaWRkZW4gdmlld3NcbiAgICAgICAgZm9yIChjb25zdCBpbmRleCBvZiBpbmRleGVzKSB7XG4gICAgICAgICAgICBjb25zdCB2aWV3SXRlbSA9IHRoaXMudmlld0l0ZW1zW2luZGV4XTtcbiAgICAgICAgICAgIGlmICh2aWV3SXRlbS52aXNpYmxlICYmXG4gICAgICAgICAgICAgICAgdmlld0l0ZW0ubWF4aW11bVNpemUgLSB2aWV3SXRlbS5taW5pbXVtU2l6ZSA+IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF2aWV3SXRlbS52aXNpYmxlICYmIHZpZXdJdGVtLnNuYXApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgdXBkYXRlU2FzaEVuYWJsZW1lbnQoKSB7XG4gICAgICAgIGxldCBwcmV2aW91cyA9IGZhbHNlO1xuICAgICAgICBjb25zdCBjb2xsYXBzZXNEb3duID0gdGhpcy52aWV3SXRlbXMubWFwKChpKSA9PiAocHJldmlvdXMgPSBpLnNpemUgLSBpLm1pbmltdW1TaXplID4gMCB8fCBwcmV2aW91cykpO1xuICAgICAgICBwcmV2aW91cyA9IGZhbHNlO1xuICAgICAgICBjb25zdCBleHBhbmRzRG93biA9IHRoaXMudmlld0l0ZW1zLm1hcCgoaSkgPT4gKHByZXZpb3VzID0gaS5tYXhpbXVtU2l6ZSAtIGkuc2l6ZSA+IDAgfHwgcHJldmlvdXMpKTtcbiAgICAgICAgY29uc3QgcmV2ZXJzZVZpZXdzID0gWy4uLnRoaXMudmlld0l0ZW1zXS5yZXZlcnNlKCk7XG4gICAgICAgIHByZXZpb3VzID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IGNvbGxhcHNlc1VwID0gcmV2ZXJzZVZpZXdzXG4gICAgICAgICAgICAubWFwKChpKSA9PiAocHJldmlvdXMgPSBpLnNpemUgLSBpLm1pbmltdW1TaXplID4gMCB8fCBwcmV2aW91cykpXG4gICAgICAgICAgICAucmV2ZXJzZSgpO1xuICAgICAgICBwcmV2aW91cyA9IGZhbHNlO1xuICAgICAgICBjb25zdCBleHBhbmRzVXAgPSByZXZlcnNlVmlld3NcbiAgICAgICAgICAgIC5tYXAoKGkpID0+IChwcmV2aW91cyA9IGkubWF4aW11bVNpemUgLSBpLnNpemUgPiAwIHx8IHByZXZpb3VzKSlcbiAgICAgICAgICAgIC5yZXZlcnNlKCk7XG4gICAgICAgIGxldCBwb3NpdGlvbiA9IDA7XG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnNhc2hlcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IHNhc2ggPSB0aGlzLnNhc2hlc1tpbmRleF07XG4gICAgICAgICAgICBjb25zdCB2aWV3SXRlbSA9IHRoaXMudmlld0l0ZW1zW2luZGV4XTtcbiAgICAgICAgICAgIHBvc2l0aW9uICs9IHZpZXdJdGVtLnNpemU7XG4gICAgICAgICAgICBjb25zdCBtaW4gPSAhKGNvbGxhcHNlc0Rvd25baW5kZXhdICYmIGV4cGFuZHNVcFtpbmRleCArIDFdKTtcbiAgICAgICAgICAgIGNvbnN0IG1heCA9ICEoZXhwYW5kc0Rvd25baW5kZXhdICYmIGNvbGxhcHNlc1VwW2luZGV4ICsgMV0pO1xuICAgICAgICAgICAgaWYgKG1pbiAmJiBtYXgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB1cEluZGV4ZXMgPSByYW5nZShpbmRleCwgLTEpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRvd25JbmRleGVzID0gcmFuZ2UoaW5kZXggKyAxLCB0aGlzLnZpZXdJdGVtcy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNuYXBCZWZvcmVJbmRleCA9IHRoaXMuZmluZEZpcnN0U25hcEluZGV4KHVwSW5kZXhlcyk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc25hcEFmdGVySW5kZXggPSB0aGlzLmZpbmRGaXJzdFNuYXBJbmRleChkb3duSW5kZXhlcyk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc25hcHBlZEJlZm9yZSA9IHR5cGVvZiBzbmFwQmVmb3JlSW5kZXggPT09ICdudW1iZXInICYmXG4gICAgICAgICAgICAgICAgICAgICF0aGlzLnZpZXdJdGVtc1tzbmFwQmVmb3JlSW5kZXhdLnZpc2libGU7XG4gICAgICAgICAgICAgICAgY29uc3Qgc25hcHBlZEFmdGVyID0gdHlwZW9mIHNuYXBBZnRlckluZGV4ID09PSAnbnVtYmVyJyAmJlxuICAgICAgICAgICAgICAgICAgICAhdGhpcy52aWV3SXRlbXNbc25hcEFmdGVySW5kZXhdLnZpc2libGU7XG4gICAgICAgICAgICAgICAgaWYgKHNuYXBwZWRCZWZvcmUgJiZcbiAgICAgICAgICAgICAgICAgICAgY29sbGFwc2VzVXBbaW5kZXhdICYmXG4gICAgICAgICAgICAgICAgICAgIChwb3NpdGlvbiA+IDAgfHwgdGhpcy5zdGFydFNuYXBwaW5nRW5hYmxlZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTYXNoKHNhc2gsIFNhc2hTdGF0ZS5NSU5JTVVNKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc25hcHBlZEFmdGVyICYmXG4gICAgICAgICAgICAgICAgICAgIGNvbGxhcHNlc0Rvd25baW5kZXhdICYmXG4gICAgICAgICAgICAgICAgICAgIChwb3NpdGlvbiA8IHRoaXMuX2NvbnRlbnRTaXplIHx8IHRoaXMuZW5kU25hcHBpbmdFbmFibGVkKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVNhc2goc2FzaCwgU2FzaFN0YXRlLk1BWElNVU0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTYXNoKHNhc2gsIFNhc2hTdGF0ZS5ESVNBQkxFRCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobWluICYmICFtYXgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVNhc2goc2FzaCwgU2FzaFN0YXRlLk1JTklNVU0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIW1pbiAmJiBtYXgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVNhc2goc2FzaCwgU2FzaFN0YXRlLk1BWElNVU0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTYXNoKHNhc2gsIFNhc2hTdGF0ZS5FTkFCTEVEKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICB1cGRhdGVTYXNoKHNhc2gsIHN0YXRlKSB7XG4gICAgICAgIHRvZ2dsZUNsYXNzKHNhc2guY29udGFpbmVyLCAnZHYtZGlzYWJsZWQnLCBzdGF0ZSA9PT0gU2FzaFN0YXRlLkRJU0FCTEVEKTtcbiAgICAgICAgdG9nZ2xlQ2xhc3Moc2FzaC5jb250YWluZXIsICdkdi1lbmFibGVkJywgc3RhdGUgPT09IFNhc2hTdGF0ZS5FTkFCTEVEKTtcbiAgICAgICAgdG9nZ2xlQ2xhc3Moc2FzaC5jb250YWluZXIsICdkdi1tYXhpbXVtJywgc3RhdGUgPT09IFNhc2hTdGF0ZS5NQVhJTVVNKTtcbiAgICAgICAgdG9nZ2xlQ2xhc3Moc2FzaC5jb250YWluZXIsICdkdi1taW5pbXVtJywgc3RhdGUgPT09IFNhc2hTdGF0ZS5NSU5JTVVNKTtcbiAgICB9XG4gICAgY3JlYXRlVmlld0NvbnRhaW5lcigpIHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9ICdkdi12aWV3LWNvbnRhaW5lcic7XG4gICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH1cbiAgICBjcmVhdGVTYXNoQ29udGFpbmVyKCkge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gJ2R2LXNhc2gtY29udGFpbmVyJztcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfVxuICAgIGNyZWF0ZUNvbnRhaW5lcigpIHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBjb25zdCBvcmllbnRhdGlvbkNsYXNzbmFtZSA9IHRoaXMuX29yaWVudGF0aW9uID09PSBPcmllbnRhdGlvbi5IT1JJWk9OVEFMXG4gICAgICAgICAgICA/ICdkdi1ob3Jpem9udGFsJ1xuICAgICAgICAgICAgOiAnZHYtdmVydGljYWwnO1xuICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IGBkdi1zcGxpdC12aWV3LWNvbnRhaW5lciAke29yaWVudGF0aW9uQ2xhc3NuYW1lfWA7XG4gICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICB0aGlzLl9vbkRpZFNhc2hFbmQuZGlzcG9zZSgpO1xuICAgICAgICB0aGlzLl9vbkRpZEFkZFZpZXcuZGlzcG9zZSgpO1xuICAgICAgICB0aGlzLl9vbkRpZFJlbW92ZVZpZXcuZGlzcG9zZSgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZWxlbWVudC5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuZWxlbWVudC5jaGlsZHJlbi5pdGVtKGkpID09PSB0aGlzLmVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHZpZXdJdGVtIG9mIHRoaXMudmlld0l0ZW1zKSB7XG4gICAgICAgICAgICB2aWV3SXRlbS5kaXNwb3NlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZSgpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUsIE11dGFibGVEaXNwb3NhYmxlLCB9IGZyb20gJy4uL2xpZmVjeWNsZSc7XG5pbXBvcnQgeyBPcmllbnRhdGlvbiwgU2l6aW5nLCBTcGxpdHZpZXcsIH0gZnJvbSAnLi9zcGxpdHZpZXcnO1xuaW1wb3J0IHsgRW1pdHRlciB9IGZyb20gJy4uL2V2ZW50cyc7XG5pbXBvcnQgeyBSZXNpemFibGUgfSBmcm9tICcuLi9yZXNpemFibGUnO1xuaW1wb3J0IHsgQ2xhc3NuYW1lcyB9IGZyb20gJy4uL2RvbSc7XG4vKipcbiAqIEEgaGlnaC1sZXZlbCBpbXBsZW1lbnRhdGlvbiBvZiBzcGxpdHZpZXcgdGhhdCB3b3JrcyB1c2luZyAncGFuZWxzJ1xuICovXG5leHBvcnQgY2xhc3MgU3BsaXR2aWV3Q29tcG9uZW50IGV4dGVuZHMgUmVzaXphYmxlIHtcbiAgICBnZXQgcGFuZWxzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zcGxpdHZpZXcuZ2V0Vmlld3MoKTtcbiAgICB9XG4gICAgZ2V0IG9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vcHRpb25zO1xuICAgIH1cbiAgICBnZXQgbGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGFuZWxzLnNpemU7XG4gICAgfVxuICAgIGdldCBvcmllbnRhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3BsaXR2aWV3Lm9yaWVudGF0aW9uO1xuICAgIH1cbiAgICBnZXQgc3BsaXR2aWV3KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3BsaXR2aWV3O1xuICAgIH1cbiAgICBzZXQgc3BsaXR2aWV3KHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLl9zcGxpdHZpZXcpIHtcbiAgICAgICAgICAgIHRoaXMuX3NwbGl0dmlldy5kaXNwb3NlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3BsaXR2aWV3ID0gdmFsdWU7XG4gICAgICAgIHRoaXMuX3NwbGl0dmlld0NoYW5nZURpc3Bvc2FibGUudmFsdWUgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSh0aGlzLl9zcGxpdHZpZXcub25EaWRTYXNoRW5kKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX29uRGlkTGF5b3V0Q2hhbmdlLmZpcmUodW5kZWZpbmVkKTtcbiAgICAgICAgfSksIHRoaXMuX3NwbGl0dmlldy5vbkRpZEFkZFZpZXcoKGUpID0+IHRoaXMuX29uRGlkQWRkVmlldy5maXJlKGUpKSwgdGhpcy5fc3BsaXR2aWV3Lm9uRGlkUmVtb3ZlVmlldygoZSkgPT4gdGhpcy5fb25EaWRSZW1vdmVWaWV3LmZpcmUoZSkpKTtcbiAgICB9XG4gICAgZ2V0IG1pbmltdW1TaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zcGxpdHZpZXcubWluaW11bVNpemU7XG4gICAgfVxuICAgIGdldCBtYXhpbXVtU2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3BsaXR2aWV3Lm1heGltdW1TaXplO1xuICAgIH1cbiAgICBnZXQgaGVpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zcGxpdHZpZXcub3JpZW50YXRpb24gPT09IE9yaWVudGF0aW9uLkhPUklaT05UQUxcbiAgICAgICAgICAgID8gdGhpcy5zcGxpdHZpZXcub3J0aG9nb25hbFNpemVcbiAgICAgICAgICAgIDogdGhpcy5zcGxpdHZpZXcuc2l6ZTtcbiAgICB9XG4gICAgZ2V0IHdpZHRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zcGxpdHZpZXcub3JpZW50YXRpb24gPT09IE9yaWVudGF0aW9uLkhPUklaT05UQUxcbiAgICAgICAgICAgID8gdGhpcy5zcGxpdHZpZXcuc2l6ZVxuICAgICAgICAgICAgOiB0aGlzLnNwbGl0dmlldy5vcnRob2dvbmFsU2l6ZTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgc3VwZXIoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksIG9wdGlvbnMuZGlzYWJsZUF1dG9SZXNpemluZyk7XG4gICAgICAgIHRoaXMuX3NwbGl0dmlld0NoYW5nZURpc3Bvc2FibGUgPSBuZXcgTXV0YWJsZURpc3Bvc2FibGUoKTtcbiAgICAgICAgdGhpcy5fcGFuZWxzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLl9vbkRpZExheW91dGZyb21KU09OID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZExheW91dEZyb21KU09OID0gdGhpcy5fb25EaWRMYXlvdXRmcm9tSlNPTi5ldmVudDtcbiAgICAgICAgdGhpcy5fb25EaWRBZGRWaWV3ID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRpZEFkZFZpZXcgPSB0aGlzLl9vbkRpZEFkZFZpZXcuZXZlbnQ7XG4gICAgICAgIHRoaXMuX29uRGlkUmVtb3ZlVmlldyA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRSZW1vdmVWaWV3ID0gdGhpcy5fb25EaWRSZW1vdmVWaWV3LmV2ZW50O1xuICAgICAgICB0aGlzLl9vbkRpZExheW91dENoYW5nZSA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRMYXlvdXRDaGFuZ2UgPSB0aGlzLl9vbkRpZExheW91dENoYW5nZS5ldmVudDtcbiAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLmhlaWdodCA9ICcxMDAlJztcbiAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLndpZHRoID0gJzEwMCUnO1xuICAgICAgICB0aGlzLl9jbGFzc05hbWVzID0gbmV3IENsYXNzbmFtZXModGhpcy5lbGVtZW50KTtcbiAgICAgICAgdGhpcy5fY2xhc3NOYW1lcy5zZXRDbGFzc05hbWVzKChfYSA9IG9wdGlvbnMuY2xhc3NOYW1lKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAnJyk7XG4gICAgICAgIC8vIHRoZSBjb250YWluZXIgaXMgb3duZWQgYnkgdGhlIHRoaXJkLXBhcnR5LCBkbyBub3QgbW9kaWZ5L2RlbGV0ZSBpdFxuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5lbGVtZW50KTtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuc3BsaXR2aWV3ID0gbmV3IFNwbGl0dmlldyh0aGlzLmVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmFkZERpc3Bvc2FibGVzKHRoaXMuX29uRGlkQWRkVmlldywgdGhpcy5fb25EaWRMYXlvdXRmcm9tSlNPTiwgdGhpcy5fb25EaWRSZW1vdmVWaWV3LCB0aGlzLl9vbkRpZExheW91dENoYW5nZSk7XG4gICAgfVxuICAgIHVwZGF0ZU9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBpZiAoJ2NsYXNzTmFtZScgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5fY2xhc3NOYW1lcy5zZXRDbGFzc05hbWVzKChfYSA9IG9wdGlvbnMuY2xhc3NOYW1lKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAnJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCdkaXNhYmxlUmVzaXppbmcnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzYWJsZVJlc2l6aW5nID0gKF9iID0gb3B0aW9ucy5kaXNhYmxlQXV0b1Jlc2l6aW5nKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMub3JpZW50YXRpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aGlzLnNwbGl0dmlldy5vcmllbnRhdGlvbiA9IG9wdGlvbnMub3JpZW50YXRpb247XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5vcHRpb25zKSwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuc3BsaXR2aWV3LmxheW91dCh0aGlzLnNwbGl0dmlldy5zaXplLCB0aGlzLnNwbGl0dmlldy5vcnRob2dvbmFsU2l6ZSk7XG4gICAgfVxuICAgIGZvY3VzKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIChfYSA9IHRoaXMuX2FjdGl2ZVBhbmVsKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZm9jdXMoKTtcbiAgICB9XG4gICAgbW92ZVBhbmVsKGZyb20sIHRvKSB7XG4gICAgICAgIHRoaXMuc3BsaXR2aWV3Lm1vdmVWaWV3KGZyb20sIHRvKTtcbiAgICB9XG4gICAgc2V0VmlzaWJsZShwYW5lbCwgdmlzaWJsZSkge1xuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMucGFuZWxzLmluZGV4T2YocGFuZWwpO1xuICAgICAgICB0aGlzLnNwbGl0dmlldy5zZXRWaWV3VmlzaWJsZShpbmRleCwgdmlzaWJsZSk7XG4gICAgfVxuICAgIHNldEFjdGl2ZShwYW5lbCwgc2tpcEZvY3VzKSB7XG4gICAgICAgIHRoaXMuX2FjdGl2ZVBhbmVsID0gcGFuZWw7XG4gICAgICAgIHRoaXMucGFuZWxzXG4gICAgICAgICAgICAuZmlsdGVyKCh2KSA9PiB2ICE9PSBwYW5lbClcbiAgICAgICAgICAgIC5mb3JFYWNoKCh2KSA9PiB7XG4gICAgICAgICAgICB2LmFwaS5fb25EaWRBY3RpdmVDaGFuZ2UuZmlyZSh7IGlzQWN0aXZlOiBmYWxzZSB9KTtcbiAgICAgICAgICAgIGlmICghc2tpcEZvY3VzKSB7XG4gICAgICAgICAgICAgICAgdi5mb2N1cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcGFuZWwuYXBpLl9vbkRpZEFjdGl2ZUNoYW5nZS5maXJlKHsgaXNBY3RpdmU6IHRydWUgfSk7XG4gICAgICAgIGlmICghc2tpcEZvY3VzKSB7XG4gICAgICAgICAgICBwYW5lbC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlbW92ZVBhbmVsKHBhbmVsLCBzaXppbmcpIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuX3BhbmVscy5nZXQocGFuZWwuaWQpO1xuICAgICAgICBpZiAoIWl0ZW0pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgdW5rbm93biBzcGxpdHZpZXcgcGFuZWwgJHtwYW5lbC5pZH1gKTtcbiAgICAgICAgfVxuICAgICAgICBpdGVtLmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5fcGFuZWxzLmRlbGV0ZShwYW5lbC5pZCk7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5wYW5lbHMuZmluZEluZGV4KChfKSA9PiBfID09PSBwYW5lbCk7XG4gICAgICAgIGNvbnN0IHJlbW92ZWRWaWV3ID0gdGhpcy5zcGxpdHZpZXcucmVtb3ZlVmlldyhpbmRleCwgc2l6aW5nKTtcbiAgICAgICAgcmVtb3ZlZFZpZXcuZGlzcG9zZSgpO1xuICAgICAgICBjb25zdCBwYW5lbHMgPSB0aGlzLnBhbmVscztcbiAgICAgICAgaWYgKHBhbmVscy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLnNldEFjdGl2ZShwYW5lbHNbcGFuZWxzLmxlbmd0aCAtIDFdKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRQYW5lbChpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYW5lbHMuZmluZCgodmlldykgPT4gdmlldy5pZCA9PT0gaWQpO1xuICAgIH1cbiAgICBhZGRQYW5lbChvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHRoaXMuX3BhbmVscy5oYXMob3B0aW9ucy5pZCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgcGFuZWwgJHtvcHRpb25zLmlkfSBhbHJlYWR5IGV4aXN0c2ApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZpZXcgPSB0aGlzLm9wdGlvbnMuY3JlYXRlQ29tcG9uZW50KHtcbiAgICAgICAgICAgIGlkOiBvcHRpb25zLmlkLFxuICAgICAgICAgICAgbmFtZTogb3B0aW9ucy5jb21wb25lbnQsXG4gICAgICAgIH0pO1xuICAgICAgICB2aWV3Lm9yaWVudGF0aW9uID0gdGhpcy5zcGxpdHZpZXcub3JpZW50YXRpb247XG4gICAgICAgIHZpZXcuaW5pdCh7XG4gICAgICAgICAgICBwYXJhbXM6IChfYSA9IG9wdGlvbnMucGFyYW1zKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB7fSxcbiAgICAgICAgICAgIG1pbmltdW1TaXplOiBvcHRpb25zLm1pbmltdW1TaXplLFxuICAgICAgICAgICAgbWF4aW11bVNpemU6IG9wdGlvbnMubWF4aW11bVNpemUsXG4gICAgICAgICAgICBzbmFwOiBvcHRpb25zLnNuYXAsXG4gICAgICAgICAgICBwcmlvcml0eTogb3B0aW9ucy5wcmlvcml0eSxcbiAgICAgICAgICAgIGFjY2Vzc29yOiB0aGlzLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3Qgc2l6ZSA9IHR5cGVvZiBvcHRpb25zLnNpemUgPT09ICdudW1iZXInID8gb3B0aW9ucy5zaXplIDogU2l6aW5nLkRpc3RyaWJ1dGU7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdHlwZW9mIG9wdGlvbnMuaW5kZXggPT09ICdudW1iZXInID8gb3B0aW9ucy5pbmRleCA6IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5zcGxpdHZpZXcuYWRkVmlldyh2aWV3LCBzaXplLCBpbmRleCk7XG4gICAgICAgIHRoaXMuZG9BZGRWaWV3KHZpZXcpO1xuICAgICAgICB0aGlzLnNldEFjdGl2ZSh2aWV3KTtcbiAgICAgICAgcmV0dXJuIHZpZXc7XG4gICAgfVxuICAgIGxheW91dCh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIGNvbnN0IFtzaXplLCBvcnRob2dvbmFsU2l6ZV0gPSB0aGlzLnNwbGl0dmlldy5vcmllbnRhdGlvbiA9PT0gT3JpZW50YXRpb24uSE9SSVpPTlRBTFxuICAgICAgICAgICAgPyBbd2lkdGgsIGhlaWdodF1cbiAgICAgICAgICAgIDogW2hlaWdodCwgd2lkdGhdO1xuICAgICAgICB0aGlzLnNwbGl0dmlldy5sYXlvdXQoc2l6ZSwgb3J0aG9nb25hbFNpemUpO1xuICAgIH1cbiAgICBkb0FkZFZpZXcodmlldykge1xuICAgICAgICBjb25zdCBkaXNwb3NhYmxlID0gdmlldy5hcGkub25EaWRGb2N1c0NoYW5nZSgoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmICghZXZlbnQuaXNGb2N1c2VkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zZXRBY3RpdmUodmlldywgdHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9wYW5lbHMuc2V0KHZpZXcuaWQsIGRpc3Bvc2FibGUpO1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3Qgdmlld3MgPSB0aGlzLnNwbGl0dmlld1xuICAgICAgICAgICAgLmdldFZpZXdzKClcbiAgICAgICAgICAgIC5tYXAoKHZpZXcsIGkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNpemUgPSB0aGlzLnNwbGl0dmlldy5nZXRWaWV3U2l6ZShpKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc2l6ZSxcbiAgICAgICAgICAgICAgICBkYXRhOiB2aWV3LnRvSlNPTigpLFxuICAgICAgICAgICAgICAgIHNuYXA6ICEhdmlldy5zbmFwLFxuICAgICAgICAgICAgICAgIHByaW9yaXR5OiB2aWV3LnByaW9yaXR5LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2aWV3cyxcbiAgICAgICAgICAgIGFjdGl2ZVZpZXc6IChfYSA9IHRoaXMuX2FjdGl2ZVBhbmVsKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaWQsXG4gICAgICAgICAgICBzaXplOiB0aGlzLnNwbGl0dmlldy5zaXplLFxuICAgICAgICAgICAgb3JpZW50YXRpb246IHRoaXMuc3BsaXR2aWV3Lm9yaWVudGF0aW9uLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBmcm9tSlNPTihzZXJpYWxpemVkU3BsaXR2aWV3KSB7XG4gICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgY29uc3QgeyB2aWV3cywgb3JpZW50YXRpb24sIHNpemUsIGFjdGl2ZVZpZXcgfSA9IHNlcmlhbGl6ZWRTcGxpdHZpZXc7XG4gICAgICAgIGNvbnN0IHF1ZXVlID0gW107XG4gICAgICAgIC8vIHRha2Ugbm90ZSBvZiB0aGUgZXhpc3RpbmcgZGltZW5zaW9uc1xuICAgICAgICBjb25zdCB3aWR0aCA9IHRoaXMud2lkdGg7XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuaGVpZ2h0O1xuICAgICAgICB0aGlzLnNwbGl0dmlldyA9IG5ldyBTcGxpdHZpZXcodGhpcy5lbGVtZW50LCB7XG4gICAgICAgICAgICBvcmllbnRhdGlvbixcbiAgICAgICAgICAgIHByb3BvcnRpb25hbExheW91dDogdGhpcy5vcHRpb25zLnByb3BvcnRpb25hbExheW91dCxcbiAgICAgICAgICAgIGRlc2NyaXB0b3I6IHtcbiAgICAgICAgICAgICAgICBzaXplLFxuICAgICAgICAgICAgICAgIHZpZXdzOiB2aWV3cy5tYXAoKHZpZXcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHZpZXcuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3BhbmVscy5oYXMoZGF0YS5pZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgcGFuZWwgJHtkYXRhLmlkfSBhbHJlYWR5IGV4aXN0c2ApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhbmVsID0gdGhpcy5vcHRpb25zLmNyZWF0ZUNvbXBvbmVudCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogZGF0YS5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGRhdGEuY29tcG9uZW50LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcXVldWUucHVzaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYW5lbC5pbml0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IChfYSA9IGRhdGEucGFyYW1zKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5pbXVtU2l6ZTogZGF0YS5taW5pbXVtU2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhpbXVtU2l6ZTogZGF0YS5tYXhpbXVtU2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbmFwOiB2aWV3LnNuYXAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpb3JpdHk6IHZpZXcucHJpb3JpdHksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzb3I6IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHBhbmVsLm9yaWVudGF0aW9uID0gb3JpZW50YXRpb247XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9BZGRWaWV3KHBhbmVsKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgb3JpZ2luYWwgb25EaWRBZGRWaWV3IGV2ZW50cyBhcmUgbWlzc2VkIHNpbmNlIHRoZXkgYXJlIGZpcmVkIGJlZm9yZSB3ZSBjYW4gc3ViY3JpYmUgdG8gdGhlbVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25EaWRBZGRWaWV3LmZpcmUocGFuZWwpO1xuICAgICAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgc2l6ZTogdmlldy5zaXplLCB2aWV3OiBwYW5lbCB9O1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubGF5b3V0KHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICBxdWV1ZS5mb3JFYWNoKChmKSA9PiBmKCkpO1xuICAgICAgICBpZiAodHlwZW9mIGFjdGl2ZVZpZXcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBjb25zdCBwYW5lbCA9IHRoaXMuZ2V0UGFuZWwoYWN0aXZlVmlldyk7XG4gICAgICAgICAgICBpZiAocGFuZWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEFjdGl2ZShwYW5lbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fb25EaWRMYXlvdXRmcm9tSlNPTi5maXJlKCk7XG4gICAgfVxuICAgIGNsZWFyKCkge1xuICAgICAgICBmb3IgKGNvbnN0IGRpc3Bvc2FibGUgb2YgdGhpcy5fcGFuZWxzLnZhbHVlcygpKSB7XG4gICAgICAgICAgICBkaXNwb3NhYmxlLmRpc3Bvc2UoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wYW5lbHMuY2xlYXIoKTtcbiAgICAgICAgd2hpbGUgKHRoaXMuc3BsaXR2aWV3Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHZpZXcgPSB0aGlzLnNwbGl0dmlldy5yZW1vdmVWaWV3KDAsIFNpemluZy5EaXN0cmlidXRlLCB0cnVlKTtcbiAgICAgICAgICAgIHZpZXcuZGlzcG9zZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIGZvciAoY29uc3QgZGlzcG9zYWJsZSBvZiB0aGlzLl9wYW5lbHMudmFsdWVzKCkpIHtcbiAgICAgICAgICAgIGRpc3Bvc2FibGUuZGlzcG9zZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3BhbmVscy5jbGVhcigpO1xuICAgICAgICBjb25zdCB2aWV3cyA9IHRoaXMuc3BsaXR2aWV3LmdldFZpZXdzKCk7XG4gICAgICAgIHRoaXMuX3NwbGl0dmlld0NoYW5nZURpc3Bvc2FibGUuZGlzcG9zZSgpO1xuICAgICAgICB0aGlzLnNwbGl0dmlldy5kaXNwb3NlKCk7XG4gICAgICAgIGZvciAoY29uc3QgdmlldyBvZiB2aWV3cykge1xuICAgICAgICAgICAgdmlldy5kaXNwb3NlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZSgpO1xuICAgICAgICBzdXBlci5kaXNwb3NlKCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQmFzZVBhbmVsVmlldywgfSBmcm9tICcuLi9ncmlkdmlldy9iYXNlUGFuZWxWaWV3JztcbmltcG9ydCB7IFNwbGl0dmlld1BhbmVsQXBpSW1wbCB9IGZyb20gJy4uL2FwaS9zcGxpdHZpZXdQYW5lbEFwaSc7XG5pbXBvcnQgeyBPcmllbnRhdGlvbiB9IGZyb20gJy4vc3BsaXR2aWV3JztcbmltcG9ydCB7IEVtaXR0ZXIgfSBmcm9tICcuLi9ldmVudHMnO1xuZXhwb3J0IGNsYXNzIFNwbGl0dmlld1BhbmVsIGV4dGVuZHMgQmFzZVBhbmVsVmlldyB7XG4gICAgZ2V0IHByaW9yaXR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpb3JpdHk7XG4gICAgfVxuICAgIHNldCBvcmllbnRhdGlvbih2YWx1ZSkge1xuICAgICAgICB0aGlzLl9vcmllbnRhdGlvbiA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgb3JpZW50YXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vcmllbnRhdGlvbjtcbiAgICB9XG4gICAgZ2V0IG1pbmltdW1TaXplKCkge1xuICAgICAgICBjb25zdCBzaXplID0gdHlwZW9mIHRoaXMuX21pbmltdW1TaXplID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICA/IHRoaXMuX21pbmltdW1TaXplKClcbiAgICAgICAgICAgIDogdGhpcy5fbWluaW11bVNpemU7XG4gICAgICAgIGlmIChzaXplICE9PSB0aGlzLl9ldmFsdWF0ZWRNaW5pbXVtU2l6ZSkge1xuICAgICAgICAgICAgdGhpcy5fZXZhbHVhdGVkTWluaW11bVNpemUgPSBzaXplO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVDb25zdHJhaW50cygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzaXplO1xuICAgIH1cbiAgICBnZXQgbWF4aW11bVNpemUoKSB7XG4gICAgICAgIGNvbnN0IHNpemUgPSB0eXBlb2YgdGhpcy5fbWF4aW11bVNpemUgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgID8gdGhpcy5fbWF4aW11bVNpemUoKVxuICAgICAgICAgICAgOiB0aGlzLl9tYXhpbXVtU2l6ZTtcbiAgICAgICAgaWYgKHNpemUgIT09IHRoaXMuX2V2YWx1YXRlZE1heGltdW1TaXplKSB7XG4gICAgICAgICAgICB0aGlzLl9ldmFsdWF0ZWRNYXhpbXVtU2l6ZSA9IHNpemU7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUNvbnN0cmFpbnRzKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgfVxuICAgIGdldCBzbmFwKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc25hcDtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoaWQsIGNvbXBvbmVudE5hbWUpIHtcbiAgICAgICAgc3VwZXIoaWQsIGNvbXBvbmVudE5hbWUsIG5ldyBTcGxpdHZpZXdQYW5lbEFwaUltcGwoaWQsIGNvbXBvbmVudE5hbWUpKTtcbiAgICAgICAgdGhpcy5fZXZhbHVhdGVkTWluaW11bVNpemUgPSAwO1xuICAgICAgICB0aGlzLl9ldmFsdWF0ZWRNYXhpbXVtU2l6ZSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICAgICAgdGhpcy5fbWluaW11bVNpemUgPSAwO1xuICAgICAgICB0aGlzLl9tYXhpbXVtU2l6ZSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICAgICAgdGhpcy5fc25hcCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9vbkRpZENoYW5nZSA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRDaGFuZ2UgPSB0aGlzLl9vbkRpZENoYW5nZS5ldmVudDtcbiAgICAgICAgdGhpcy5hcGkuaW5pdGlhbGl6ZSh0aGlzKTtcbiAgICAgICAgdGhpcy5hZGREaXNwb3NhYmxlcyh0aGlzLl9vbkRpZENoYW5nZSwgdGhpcy5hcGkub25XaWxsVmlzaWJpbGl0eUNoYW5nZSgoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgaXNWaXNpYmxlIH0gPSBldmVudDtcbiAgICAgICAgICAgIGNvbnN0IHsgYWNjZXNzb3IgfSA9IHRoaXMuX3BhcmFtcztcbiAgICAgICAgICAgIGFjY2Vzc29yLnNldFZpc2libGUodGhpcywgaXNWaXNpYmxlKTtcbiAgICAgICAgfSksIHRoaXMuYXBpLm9uQWN0aXZlQ2hhbmdlKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgYWNjZXNzb3IgfSA9IHRoaXMuX3BhcmFtcztcbiAgICAgICAgICAgIGFjY2Vzc29yLnNldEFjdGl2ZSh0aGlzKTtcbiAgICAgICAgfSksIHRoaXMuYXBpLm9uRGlkQ29uc3RyYWludHNDaGFuZ2VJbnRlcm5hbCgoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZXZlbnQubWluaW11bVNpemUgPT09ICdudW1iZXInIHx8XG4gICAgICAgICAgICAgICAgdHlwZW9mIGV2ZW50Lm1pbmltdW1TaXplID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWluaW11bVNpemUgPSBldmVudC5taW5pbXVtU2l6ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgZXZlbnQubWF4aW11bVNpemUgPT09ICdudW1iZXInIHx8XG4gICAgICAgICAgICAgICAgdHlwZW9mIGV2ZW50Lm1heGltdW1TaXplID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWF4aW11bVNpemUgPSBldmVudC5tYXhpbXVtU2l6ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudXBkYXRlQ29uc3RyYWludHMoKTtcbiAgICAgICAgfSksIHRoaXMuYXBpLm9uRGlkU2l6ZUNoYW5nZSgoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX29uRGlkQ2hhbmdlLmZpcmUoeyBzaXplOiBldmVudC5zaXplIH0pO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIHNldFZpc2libGUoaXNWaXNpYmxlKSB7XG4gICAgICAgIHRoaXMuYXBpLl9vbkRpZFZpc2liaWxpdHlDaGFuZ2UuZmlyZSh7IGlzVmlzaWJsZSB9KTtcbiAgICB9XG4gICAgc2V0QWN0aXZlKGlzQWN0aXZlKSB7XG4gICAgICAgIHRoaXMuYXBpLl9vbkRpZEFjdGl2ZUNoYW5nZS5maXJlKHsgaXNBY3RpdmUgfSk7XG4gICAgfVxuICAgIGxheW91dChzaXplLCBvcnRob2dvbmFsU2l6ZSkge1xuICAgICAgICBjb25zdCBbd2lkdGgsIGhlaWdodF0gPSB0aGlzLm9yaWVudGF0aW9uID09PSBPcmllbnRhdGlvbi5IT1JJWk9OVEFMXG4gICAgICAgICAgICA/IFtzaXplLCBvcnRob2dvbmFsU2l6ZV1cbiAgICAgICAgICAgIDogW29ydGhvZ29uYWxTaXplLCBzaXplXTtcbiAgICAgICAgc3VwZXIubGF5b3V0KHdpZHRoLCBoZWlnaHQpO1xuICAgIH1cbiAgICBpbml0KHBhcmFtZXRlcnMpIHtcbiAgICAgICAgc3VwZXIuaW5pdChwYXJhbWV0ZXJzKTtcbiAgICAgICAgdGhpcy5fcHJpb3JpdHkgPSBwYXJhbWV0ZXJzLnByaW9yaXR5O1xuICAgICAgICBpZiAocGFyYW1ldGVycy5taW5pbXVtU2l6ZSkge1xuICAgICAgICAgICAgdGhpcy5fbWluaW11bVNpemUgPSBwYXJhbWV0ZXJzLm1pbmltdW1TaXplO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJhbWV0ZXJzLm1heGltdW1TaXplKSB7XG4gICAgICAgICAgICB0aGlzLl9tYXhpbXVtU2l6ZSA9IHBhcmFtZXRlcnMubWF4aW11bVNpemU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmFtZXRlcnMuc25hcCkge1xuICAgICAgICAgICAgdGhpcy5fc25hcCA9IHBhcmFtZXRlcnMuc25hcDtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIGNvbnN0IG1heGltdW0gPSAodmFsdWUpID0+IHZhbHVlID09PSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiB8fFxuICAgICAgICAgICAgdmFsdWUgPT09IE51bWJlci5QT1NJVElWRV9JTkZJTklUWVxuICAgICAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgICAgIDogdmFsdWU7XG4gICAgICAgIGNvbnN0IG1pbmltdW0gPSAodmFsdWUpID0+ICh2YWx1ZSA8PSAwID8gdW5kZWZpbmVkIDogdmFsdWUpO1xuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBzdXBlci50b0pTT04oKSksIHsgbWluaW11bVNpemU6IG1pbmltdW0odGhpcy5taW5pbXVtU2l6ZSksIG1heGltdW1TaXplOiBtYXhpbXVtKHRoaXMubWF4aW11bVNpemUpIH0pO1xuICAgIH1cbiAgICB1cGRhdGVDb25zdHJhaW50cygpIHtcbiAgICAgICAgdGhpcy5hcGkuX29uRGlkQ29uc3RyYWludHNDaGFuZ2UuZmlyZSh7XG4gICAgICAgICAgICBtYXhpbXVtU2l6ZTogdGhpcy5fZXZhbHVhdGVkTWF4aW11bVNpemUsXG4gICAgICAgICAgICBtaW5pbXVtU2l6ZTogdGhpcy5fZXZhbHVhdGVkTWluaW11bVNpemUsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IGNsYW1wIH0gZnJvbSAnLi4vbWF0aCc7XG5leHBvcnQgY2xhc3MgVmlld0l0ZW0ge1xuICAgIHNldCBzaXplKHNpemUpIHtcbiAgICAgICAgdGhpcy5fc2l6ZSA9IHNpemU7XG4gICAgfVxuICAgIGdldCBzaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2l6ZTtcbiAgICB9XG4gICAgZ2V0IGNhY2hlZFZpc2libGVTaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGVkVmlzaWJsZVNpemU7XG4gICAgfVxuICAgIGdldCB2aXNpYmxlKCkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHRoaXMuX2NhY2hlZFZpc2libGVTaXplID09PSAndW5kZWZpbmVkJztcbiAgICB9XG4gICAgZ2V0IG1pbmltdW1TaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52aXNpYmxlID8gdGhpcy52aWV3Lm1pbmltdW1TaXplIDogMDtcbiAgICB9XG4gICAgZ2V0IHZpZXdNaW5pbXVtU2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlldy5taW5pbXVtU2l6ZTtcbiAgICB9XG4gICAgZ2V0IG1heGltdW1TaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52aXNpYmxlID8gdGhpcy52aWV3Lm1heGltdW1TaXplIDogMDtcbiAgICB9XG4gICAgZ2V0IHZpZXdNYXhpbXVtU2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlldy5tYXhpbXVtU2l6ZTtcbiAgICB9XG4gICAgZ2V0IHByaW9yaXR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3LnByaW9yaXR5O1xuICAgIH1cbiAgICBnZXQgc25hcCgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy52aWV3LnNuYXA7XG4gICAgfVxuICAgIHNldCBlbmFibGVkKGVuYWJsZWQpIHtcbiAgICAgICAgdGhpcy5jb250YWluZXIuc3R5bGUucG9pbnRlckV2ZW50cyA9IGVuYWJsZWQgPyAnJyA6ICdub25lJztcbiAgICB9XG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyLCB2aWV3LCBzaXplLCBkaXNwb3NhYmxlKSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgICB0aGlzLnZpZXcgPSB2aWV3O1xuICAgICAgICB0aGlzLmRpc3Bvc2FibGUgPSBkaXNwb3NhYmxlO1xuICAgICAgICB0aGlzLl9jYWNoZWRWaXNpYmxlU2l6ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHR5cGVvZiBzaXplID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgdGhpcy5fc2l6ZSA9IHNpemU7XG4gICAgICAgICAgICB0aGlzLl9jYWNoZWRWaXNpYmxlU2l6ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCd2aXNpYmxlJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9zaXplID0gMDtcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlZFZpc2libGVTaXplID0gc2l6ZS5jYWNoZWRWaXNpYmxlU2l6ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXRWaXNpYmxlKHZpc2libGUsIHNpemUpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodmlzaWJsZSA9PT0gdGhpcy52aXNpYmxlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZpc2libGUpIHtcbiAgICAgICAgICAgIHRoaXMuc2l6ZSA9IGNsYW1wKChfYSA9IHRoaXMuX2NhY2hlZFZpc2libGVTaXplKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAwLCB0aGlzLnZpZXdNaW5pbXVtU2l6ZSwgdGhpcy52aWV3TWF4aW11bVNpemUpO1xuICAgICAgICAgICAgdGhpcy5fY2FjaGVkVmlzaWJsZVNpemUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9jYWNoZWRWaXNpYmxlU2l6ZSA9XG4gICAgICAgICAgICAgICAgdHlwZW9mIHNpemUgPT09ICdudW1iZXInID8gc2l6ZSA6IHRoaXMuc2l6ZTtcbiAgICAgICAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LnRvZ2dsZSgndmlzaWJsZScsIHZpc2libGUpO1xuICAgICAgICBpZiAodGhpcy52aWV3LnNldFZpc2libGUpIHtcbiAgICAgICAgICAgIHRoaXMudmlldy5zZXRWaXNpYmxlKHZpc2libGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHRoaXMuZGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXc7XG4gICAgfVxufVxuIiwiY29uc3QgY3JlYXRlU3ZnRWxlbWVudEZyb21QYXRoID0gKHBhcmFtcykgPT4ge1xuICAgIGNvbnN0IHN2ZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnc3ZnJyk7XG4gICAgc3ZnLnNldEF0dHJpYnV0ZU5TKG51bGwsICdoZWlnaHQnLCBwYXJhbXMuaGVpZ2h0KTtcbiAgICBzdmcuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3dpZHRoJywgcGFyYW1zLndpZHRoKTtcbiAgICBzdmcuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3ZpZXdCb3gnLCBwYXJhbXMudmlld2JveCk7XG4gICAgc3ZnLnNldEF0dHJpYnV0ZU5TKG51bGwsICdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuICAgIHN2Zy5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnZm9jdXNhYmxlJywgJ2ZhbHNlJyk7XG4gICAgc3ZnLmNsYXNzTGlzdC5hZGQoJ2R2LXN2ZycpO1xuICAgIGNvbnN0IHBhdGggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ3BhdGgnKTtcbiAgICBwYXRoLnNldEF0dHJpYnV0ZU5TKG51bGwsICdkJywgcGFyYW1zLnBhdGgpO1xuICAgIHN2Zy5hcHBlbmRDaGlsZChwYXRoKTtcbiAgICByZXR1cm4gc3ZnO1xufTtcbmV4cG9ydCBjb25zdCBjcmVhdGVDbG9zZUJ1dHRvbiA9ICgpID0+IGNyZWF0ZVN2Z0VsZW1lbnRGcm9tUGF0aCh7XG4gICAgd2lkdGg6ICcxMScsXG4gICAgaGVpZ2h0OiAnMTEnLFxuICAgIHZpZXdib3g6ICcwIDAgMjggMjgnLFxuICAgIHBhdGg6ICdNMi4xIDI3LjNMMCAyNS4yTDExLjU1IDEzLjY1TDAgMi4xTDIuMSAwTDEzLjY1IDExLjU1TDI1LjIgMEwyNy4zIDIuMUwxNS43NSAxMy42NUwyNy4zIDI1LjJMMjUuMiAyNy4zTDEzLjY1IDE1Ljc1TDIuMSAyNy4zWicsXG59KTtcbmV4cG9ydCBjb25zdCBjcmVhdGVFeHBhbmRNb3JlQnV0dG9uID0gKCkgPT4gY3JlYXRlU3ZnRWxlbWVudEZyb21QYXRoKHtcbiAgICB3aWR0aDogJzExJyxcbiAgICBoZWlnaHQ6ICcxMScsXG4gICAgdmlld2JveDogJzAgMCAyNCAxNScsXG4gICAgcGF0aDogJ00xMiAxNC4xNUwwIDIuMTVMMi4xNSAwTDEyIDkuOUwyMS44NSAwLjA0OTk5OTJMMjQgMi4yTDEyIDE0LjE1WicsXG59KTtcbmV4cG9ydCBjb25zdCBjcmVhdGVDaGV2cm9uUmlnaHRCdXR0b24gPSAoKSA9PiBjcmVhdGVTdmdFbGVtZW50RnJvbVBhdGgoe1xuICAgIHdpZHRoOiAnMTEnLFxuICAgIGhlaWdodDogJzExJyxcbiAgICB2aWV3Ym94OiAnMCAwIDE1IDI1JyxcbiAgICBwYXRoOiAnTTIuMTUgMjQuMUwwIDIxLjk1TDkuOSAxMi4wNUwwIDIuMTVMMi4xNSAwTDE0LjIgMTIuMDVMMi4xNSAyNC4xWicsXG59KTtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMV0hLi9kb2Nrdmlldy5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcbm9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbMV0hLi9kb2Nrdmlldy5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuICBjc3MgKz0gb2JqLmNzcztcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfVxuXG4gIC8vIEZvciBvbGQgSUVcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH1cbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsImltcG9ydCB7IGFkZFBhbmVsLCBkZWZhdWx0UGFuZWwgfSBmcm9tICcuL3V0aWxzJztcbmNsYXNzIFBhbmVsIHtcbiAgZ2V0IGVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnRcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICB9XG5cbiAgaW5pdChjb25maWcpIHtcbiAgICBsZXQgZG9ja0lkID0gY29uZmlnLmNvbnRhaW5lckFwaS5jb21wb25lbnQuZ3JpZHZpZXcuZWxlbWVudC5jbG9zZXN0KCcuZG9ja3ZpZXcnKS5hdHRyaWJ1dGVzLmlkLnRleHRDb250ZW50O1xuICAgIHRoaXMuX2VsZW1lbnQuaWQgPSBkb2NrSWQgKyAnLScgKyBjb25maWcuYXBpLmlkO1xuICAgIHRoaXMuX2VsZW1lbnQuaW5uZXJIVE1MID0gY29uZmlnLnBhcmFtcy5jb250ZW50Lmh0bWxcbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTmFtZSA9ICdkb2Nrdmlldy1wYW5lbCdcbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlID0gY29uZmlnLnBhcmFtcy5zdHlsZVxuICB9XG59XG5cbi8vIFRhYiB3aXRoIGN1c3RvbSByZW1vdmUgYnV0dG9uXG5jbGFzcyBEZWZhdWx0VGFiIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NOYW1lID0gJ2R2LWRlZmF1bHQtdGFiJztcblxuICAgIHRoaXMuX2NvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aGlzLl9jb250ZW50LmNsYXNzTmFtZSA9ICdkdi1kZWZhdWx0LXRhYi1jb250ZW50JztcblxuICAgIHRoaXMuYWN0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5hY3Rpb24uY2xhc3NOYW1lID0gJ2R2LWRlZmF1bHQtdGFiLWFjdGlvbic7XG4gICAgdGhpcy5hY3Rpb24uaW5uZXJIVE1MID0gJzxpIGNsYXNzPVwiZmFzIGZhLXhtYXJrXCIgcm9sZT1cInByZXNlbnRhdGlvblwiIGFyaWEtbGFiZWw9XCJjbG9zZSBpY29uXCI+PC9pPic7XG5cbiAgICB0aGlzLl9lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuX2NvbnRlbnQpO1xuICAgIHRoaXMuX2VsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5hY3Rpb24pO1xuICB9XG5cbiAgZ2V0IGVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7XG4gIH1cblxuICBpbml0KGNvbmZpZykge1xuICAgIGxldCBkb2NrSWQgPSBjb25maWcuY29udGFpbmVyQXBpLmNvbXBvbmVudC5ncmlkdmlldy5lbGVtZW50LmNsb3Nlc3QoJy5kb2NrdmlldycpLmF0dHJpYnV0ZXMuaWQudGV4dENvbnRlbnQ7XG4gICAgdGhpcy5fZWxlbWVudC5pZCA9IGRvY2tJZCArICctdGFiLScgKyBjb25maWcuYXBpLmlkO1xuICAgIHRoaXMuX2NvbnRlbnQudGV4dENvbnRlbnQgPSBjb25maWcudGl0bGU7XG4gICAgdGhpcy5hY3Rpb24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgLy8gU2VuZCBjYWxsYmFjayB0byBTaGlueSBmb3IgY29udHJvbCBmcm9tIHRoZSBzZXJ2ZXIgc2lkZVxuICAgICAgU2hpbnkuc2V0SW5wdXRWYWx1ZShgJHtkb2NrSWR9X3BhbmVsLXRvLXJlbW92ZWAsIGNvbmZpZy5hcGkuaWQsIHsgcHJpb3JpdHk6ICdldmVudCcgfSk7XG4gICAgfSlcbiAgfVxufVxuXG4vLyBUYWIgd2l0aG91dCByZW1vdmUgYnV0dG9uXG5jbGFzcyBDdXN0b21UYWIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIH1cblxuICBnZXQgZWxlbWVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZWxlbWVudDtcbiAgfVxuXG4gIGluaXQoY29uZmlnKSB7XG4gICAgbGV0IGRvY2tJZCA9IGNvbmZpZy5jb250YWluZXJBcGkuY29tcG9uZW50LmdyaWR2aWV3LmVsZW1lbnQuY2xvc2VzdCgnLmRvY2t2aWV3JykuYXR0cmlidXRlcy5pZC50ZXh0Q29udGVudDtcbiAgICB0aGlzLl9lbGVtZW50LmlkID0gZG9ja0lkICsgJy10YWItJyArIGNvbmZpZy5hcGkuaWQ7XG4gICAgdGhpcy5lMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMuZTEudGV4dENvbnRlbnQgPSBjb25maWcudGl0bGU7XG4gICAgdGhpcy5lMiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcblxuICAgIHRoaXMuX2VsZW1lbnQuYXBwZW5kKHRoaXMuZTEsIHRoaXMuZTIpO1xuICB9XG59XG5cbmNsYXNzIFJpZ2h0SGVhZGVyIHtcbiAgZ2V0IGVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnRcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICB9XG5cbiAgaW5pdChjb25maWcpIHtcbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlID0gJ2hlaWdodDogMTAwJTsgcGFkZGluZzogOHB4J1xuICAgIHRoaXMuX2VsZW1lbnQuaW5uZXJIVE1MID0gJzxpIGNsYXNzPVwiZmFzIGZhLWV4cGFuZFwiIHJvbGU9XCJwcmVzZW50YXRpb25cIiBhcmlhLWxhYmVsPVwiZXhwYW5kIGljb25cIj48L2k+J1xuICAgIHRoaXMuX2VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgaWYgKCFjb25maWcuYXBpLmlzTWF4aW1pemVkKCkpIHtcbiAgICAgICAgZS50YXJnZXQuY2xhc3NMaXN0LnJlbW92ZSgnZmEtZXhwYW5kJyk7XG4gICAgICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2ZhLWNvbXByZXNzJyk7XG4gICAgICAgIGNvbmZpZy5hcGkubWF4aW1pemUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbmZpZy5hcGkuZXhpdE1heGltaXplZCgpO1xuICAgICAgICBlLnRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCdmYS1jb21wcmVzcycpO1xuICAgICAgICBlLnRhcmdldC5jbGFzc0xpc3QuYWRkKCdmYS1leHBhbmQnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBkaXNwb3NlKCkge1xuICAgIC8vIE5lY2Vzc2FyeSB0byBhdm9pZCBhIEpTIGVycm9yIHdoZW4gbW92aW5nIGEgcGFuZWxcbiAgICAvLyBpbnNpZGUgYW5vdGhlciBvbmUgdG8gZ2V0IG5lc3RlZCB0YWJzXG4gIH1cbn1cblxuY2xhc3MgTGVmdEhlYWRlciB7XG4gIGdldCBlbGVtZW50KCkge1xuICAgIHJldHVybiB0aGlzLl9lbGVtZW50XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgfVxuXG4gIGluaXQoY29uZmlnKSB7XG4gICAgLy8gSWYgYWRkVGFiIGlzIGZhbHNlLCB3ZSBkbyBub3QgbmVlZCB0byByZW5kZXIgdGhpcyBjb21wb25lbnRcbiAgICBpZiAoIWNvbmZpZy5ncm91cC5fcGFyYW1zLnBhcmFtcy5hZGRUYWIuZW5hYmxlKSByZXR1cm4gbnVsbDtcbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlID0gJ2hlaWdodDogMTAwJTsgcGFkZGluZzogOHB4J1xuICAgIHRoaXMuX2VsZW1lbnQuaW5uZXJIVE1MID0gJzxpIGNsYXNzPVwiZmFzIGZhLXBsdXNcIiByb2xlPVwicHJlc2VudGF0aW9uXCIgYXJpYS1sYWJlbD1cInBsdXMgaWNvblwiPjwvaT4nXG4gICAgdGhpcy5fZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICBjb25maWcuZ3JvdXAuX3BhcmFtcy5hZGRUYWIuY2FsbGJhY2soY29uZmlnKTtcbiAgICB9KTtcbiAgfVxuICBkaXNwb3NlKCkge1xuICAgIC8vIE5lY2Vzc2FyeSB0byBhdm9pZCBhIEpTIGVycm9yIHdoZW4gbW92aW5nIGEgcGFuZWxcbiAgICAvLyBpbnNpZGUgYW5vdGhlciBvbmUgdG8gZ2V0IG5lc3RlZCB0YWJzXG4gIH1cbn1cblxuZXhwb3J0IHsgUmlnaHRIZWFkZXIsIExlZnRIZWFkZXIsIFBhbmVsLCBDdXN0b21UYWIsIERlZmF1bHRUYWIgfTsiLCJpbXBvcnQge1xuICB0aGVtZUFieXNzLFxuICB0aGVtZURhcmssXG4gIHRoZW1lTGlnaHQsXG4gIHRoZW1lVmlzdWFsU3R1ZGlvLFxuICB0aGVtZURyYWN1bGEsXG4gIHRoZW1lUmVwbGl0LFxuICB0aGVtZUFieXNzU3BhY2VkLFxuICB0aGVtZUxpZ2h0U3BhY2VkXG59IGZyb20gXCJkb2Nrdmlldy1jb3JlXCI7XG5cbmNvbnN0IG1hdGNoVGhlbWUgPSAodGhlbWUpID0+IHtcbiAgbGV0IHJlcztcbiAgc3dpdGNoICh0aGVtZSkge1xuICAgIGNhc2UgJ2xpZ2h0JzpcbiAgICAgIHJlcyA9IHRoZW1lTGlnaHRcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnbGlnaHQtc3BhY2VkJzpcbiAgICAgIHJlcyA9IHRoZW1lTGlnaHRTcGFjZWRcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnYWJ5c3MnOlxuICAgICAgcmVzID0gdGhlbWVBYnlzc1xuICAgICAgYnJlYWtcbiAgICBjYXNlICdhYnlzcy9zcGFjZWQnOlxuICAgICAgcmVzID0gdGhlbWVBYnlzc1NwYWNlZFxuICAgICAgYnJlYWtcbiAgICBjYXNlICd2cyc6XG4gICAgICByZXMgPSB0aGVtZVZpc3VhbFN0dWRpb1xuICAgICAgYnJlYWtcbiAgICBjYXNlICdkYXJrJzpcbiAgICAgIHJlcyA9IHRoZW1lRGFya1xuICAgICAgYnJlYWtcbiAgICBjYXNlICdkcmFjdWxhJzpcbiAgICAgIHJlcyA9IHRoZW1lRHJhY3VsYVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdyZXBsaXQnOlxuICAgICAgcmVzID0gdGhlbWVSZXBsaXRcbiAgICAgIGJyZWFrXG4gICAgZGVmYXVsdDpcbiAgICAgIHJlcyA9IHRoZW1lTGlnaHRTcGFjZWRcbiAgfVxuICByZXR1cm4gKHJlcylcbn1cblxuY29uc3QgYWRkUGFuZWwgPSAocGFuZWwsIGFwaSkgPT4ge1xuICBsZXQgaW50ZXJuYWxzID0ge1xuICAgIGNvbXBvbmVudDogJ2RlZmF1bHQnLFxuICAgIHBhcmFtczoge1xuICAgICAgY29udGVudDogcGFuZWwuY29udGVudCxcbiAgICAgIHN0eWxlOiBwYW5lbC5zdHlsZVxuICAgIH1cbiAgfVxuXG4gIC8vIEhhbmRsZSByZW1vdmFibGUgb3B0aW9uLiBJZiBubyxcbiAgLy8gdXNlIHRoZSBkZWZhdWx0IHRhYiBjb21wb25lbnQgd2l0aG91dCB0aGUgY2xvc2UgcGFuZWwgYnV0dG9uLlxuICBpZiAoIXBhbmVsLnJlbW92ZS5lbmFibGUpIHtcbiAgICBpbnRlcm5hbHMudGFiQ29tcG9uZW50ID0gJ2N1c3RvbSc7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHBhbmVsLnJlbW92ZS5tb2RlID09PSAnbWFudWFsJykge1xuICAgICAgaW50ZXJuYWxzLnRhYkNvbXBvbmVudCA9ICdtYW51YWwnO1xuICAgIH1cbiAgfVxuICBsZXQgcHJvcHMgPSB7IC4uLnBhbmVsLCAuLi5pbnRlcm5hbHMgfVxuICByZXR1cm4gKGFwaS5hZGRQYW5lbChwcm9wcykpXG59XG5cbmNvbnN0IG1vdmVQYW5lbCA9IChtLCBhcGkpID0+IHtcbiAgbGV0IHBhbmVsID0gYXBpLmdldFBhbmVsKGAke20uaWR9YCk7XG4gIC8vIE1vdmUgcmVsYXRpdmUgdG8gYW5vdGhlciBncm91cFxuICBpZiAobS5vcHRpb25zLmdyb3VwICE9PSB1bmRlZmluZWQpIHtcbiAgICBsZXQgZ3JvdXBUYXJnZXQgPSBhcGkuZ2V0UGFuZWwoYCR7bS5vcHRpb25zLmdyb3VwfWApXG4gICAgcGFuZWwuYXBpLm1vdmVUbyh7XG4gICAgICBncm91cDogZ3JvdXBUYXJnZXQuYXBpLmdyb3VwLFxuICAgICAgcG9zaXRpb246IG0ub3B0aW9ucy5wb3NpdGlvbixcbiAgICB9KVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIC8vIE1vY2UgcGFuZWwgaW5zaWRlIHRoZSBzYW1lIGdyb3VwIHVzaW5nICdpbmRleCcgb25seVxuICBwYW5lbC5hcGkubW92ZVRvKG0ub3B0aW9ucyk7XG59XG5cbmNvbnN0IG1vdmVHcm91cCA9IChtLCBhcGkpID0+IHtcbiAgbGV0IGZyb20gPSBhcGkuZ2V0R3JvdXAoYCR7bS5pZH1gKTtcbiAgLy8gTW92ZSByZWxhdGl2ZSB0byBhbm90aGVyIGdyb3VwXG4gIGxldCB0YXJnZXQgPSBhcGkuZ2V0R3JvdXAoYCR7bS5vcHRpb25zLnRvfWApO1xuICBmcm9tLmFwaS5tb3ZlVG8oe1xuICAgIGdyb3VwOiB0YXJnZXQsXG4gICAgcG9zaXRpb246IG0ub3B0aW9ucy5wb3NpdGlvblxuICB9KTtcbiAgcmV0dXJuIG51bGw7XG59XG5cbmNvbnN0IG1vdmVHcm91cDIgPSAobSwgYXBpKSA9PiB7XG4gIGxldCBwYW5lbCA9IGFwaS5nZXRQYW5lbChgJHttLmlkfWApO1xuICAvLyBNb3ZlIHJlbGF0aXZlIHRvIGFub3RoZXIgZ3JvdXBcbiAgbGV0IGdyb3VwVGFyZ2V0ID0gYXBpLmdldFBhbmVsKGAke20ub3B0aW9ucy50b31gKTtcbiAgcGFuZWwuZ3JvdXAuYXBpLm1vdmVUbyh7XG4gICAgZ3JvdXA6IGdyb3VwVGFyZ2V0LmFwaS5ncm91cCxcbiAgICBwb3NpdGlvbjogbS5vcHRpb25zLnBvc2l0aW9uXG4gIH0pO1xuICByZXR1cm4gbnVsbDtcbn1cblxuY29uc3QgZGVmYXVsdFBhbmVsID0gKHBuSWQpID0+IHtcbiAgcmV0dXJuIChgXG4gICAgPHA+RXhjaGFuZ2UgbWUgYnkgcnVubmluZzo8L3A+XG4gICAgPHA+cmVtb3ZlVUkoPGJyPlxuICAgICAgJm5ic3A7Jm5ic3A7c2VsZWN0b3IgPSBcIiMke3BuSWR9ID4gKlwiLDxicj5cbiAgICAgICZuYnNwOyZuYnNwO211bHRpcGxlID0gVFJVRTxicj5cbiAgICApPC9wPlxuICAgIDxwPnNoaW55OjppbnNlcnRVSSg8YnI+XG4gICAgICAgICAgJm5ic3A7Jm5ic3A7c2VsZWN0b3IgPSBcIiMke3BuSWR9XCIsPGJyPlxuICAgICAgICAgICZuYnNwOyZuYnNwO3doZXJlID0gXCJiZWZvcmVFbmRcIiw8YnI+XG4gICAgICAgICAgJm5ic3A7Jm5ic3A7dWkgPSBcInlvdXIgdWkgY29kZSBoZXJlXCI8YnI+XG4gICAgKTwvcD5cbiAgYClcbn1cblxuY29uc3QgY2xlYW5fZG9ja19zdGF0ZSA9IChzdGF0ZSkgPT4ge1xuICAvLyBTdHJpcCBvdXQgdW5lY2Vzc2FyeSBpbmZvcm1hdGlvbiAoZGVwcywgaGVhZCwgc2luZ2xldG9ucyBhcyB0aGV5IHNob3VsZCBiZSBhbHJlYWR5IGluc2VydGVkXG4gIC8vIGluIHRoZSBET00gd2hlbiB0aGUgd2lkZ2V0IGlzIGNyZWF0ZWQsIHNvIG5vIG5lZWQgdG8ga2VlcCB0aGVtIGZvcmV2ZXIpXG4gIHN0YXRlLnBhbmVscyA9IE9iamVjdC5mcm9tRW50cmllcyhcbiAgICBPYmplY3QuZW50cmllcyhzdGF0ZS5wYW5lbHMpLm1hcCgoW2tleSwgdmFsdWVdKSA9PiBbXG4gICAgICBrZXksXG4gICAgICB7XG4gICAgICAgIC4uLnZhbHVlLFxuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAuLi52YWx1ZS5wYXJhbXMsXG4gICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgaHRtbDogdmFsdWUucGFyYW1zLmNvbnRlbnQuaHRtbCAvLyBvbmx5IG5lZWQgdGhlIEhUTUwgY29udGVudFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIF0pXG4gICk7XG4gIHJldHVybiAoc3RhdGUpXG59XG5cbmNvbnN0IHNhdmVEb2NrID0gKGlkLCBhcGkpID0+IHtcbiAgY29uc3Qgc3RhdGUgPSBjbGVhbl9kb2NrX3N0YXRlKGFwaS50b0pTT04oKSlcbiAgU2hpbnkuc2V0SW5wdXRWYWx1ZShpZCArIFwiX3N0YXRlXCIsIHN0YXRlLCB7IHByaW9yaXR5OiAnZXZlbnQnIH0pO1xufVxuXG5leHBvcnQgeyBtYXRjaFRoZW1lLCBhZGRQYW5lbCwgbW92ZVBhbmVsLCBkZWZhdWx0UGFuZWwsIHNhdmVEb2NrLCBtb3ZlR3JvdXAsIG1vdmVHcm91cDIgfTsiLCJtb2R1bGUuZXhwb3J0cyA9IEhUTUxXaWRnZXRzOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsImltcG9ydCAnd2lkZ2V0cyc7XG5pbXBvcnQgJ2RvY2t2aWV3LWNvcmUvZGlzdC9zdHlsZXMvZG9ja3ZpZXcuY3NzJ1xuaW1wb3J0IHsgY3JlYXRlRG9ja3ZpZXcgfSBmcm9tIFwiZG9ja3ZpZXctY29yZVwiO1xuXG5pbXBvcnQgeyBQYW5lbCwgUmlnaHRIZWFkZXIsIExlZnRIZWFkZXIsIEN1c3RvbVRhYiwgRGVmYXVsdFRhYiB9IGZyb20gJy4uL21vZHVsZXMvY29tcG9uZW50cydcbmltcG9ydCB7IG1hdGNoVGhlbWUsIGFkZFBhbmVsLCBtb3ZlUGFuZWwsIHNhdmVEb2NrLCBtb3ZlR3JvdXAsIG1vdmVHcm91cDIgfSBmcm9tICcuLi9tb2R1bGVzL3V0aWxzJztcblxuSFRNTFdpZGdldHMud2lkZ2V0KHtcblxuICBuYW1lOiAnZG9ja3ZpZXcnLFxuXG4gIHR5cGU6ICdvdXRwdXQnLFxuXG4gIGZhY3Rvcnk6IGZ1bmN0aW9uIChlbCwgd2lkdGgsIGhlaWdodCkge1xuXG4gICAgbGV0IGFwaTtcblxuICAgIHJldHVybiB7XG5cbiAgICAgIHJlbmRlclZhbHVlOiBmdW5jdGlvbiAoeCwgaWQgPSBlbC5pZCkge1xuXG4gICAgICAgIC8vIEluc3RhbnRpYXRlIGRvY2tWaWV3XG4gICAgICAgIGFwaSA9IGNyZWF0ZURvY2t2aWV3KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKSwge1xuICAgICAgICAgIHRoZW1lOiBtYXRjaFRoZW1lKHgudGhlbWUpLFxuICAgICAgICAgIGNyZWF0ZVJpZ2h0SGVhZGVyQWN0aW9uQ29tcG9uZW50OiAob3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBSaWdodEhlYWRlcihvcHRpb25zKVxuICAgICAgICAgIH0sXG4gICAgICAgICAgY3JlYXRlTGVmdEhlYWRlckFjdGlvbkNvbXBvbmVudDogKG9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIG9wdGlvbnMuX3BhcmFtcy5wYXJhbXMuYWRkVGFiID0geC5hZGRUYWI7XG4gICAgICAgICAgICByZXR1cm4gbmV3IExlZnRIZWFkZXIob3B0aW9ucylcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNyZWF0ZUNvbXBvbmVudDogKG9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHN3aXRjaCAob3B0aW9ucy5uYW1lKSB7XG4gICAgICAgICAgICAgIGNhc2UgJ2RlZmF1bHQnOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUGFuZWwob3B0aW9ucylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGNyZWF0ZVRhYkNvbXBvbmVudDogKG9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHN3aXRjaCAob3B0aW9ucy5uYW1lKSB7XG4gICAgICAgICAgICAgIGNhc2UgJ21hbnVhbCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEZWZhdWx0VGFiKCk7XG4gICAgICAgICAgICAgIGNhc2UgJ2N1c3RvbSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDdXN0b21UYWIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIC8vIFNwcmVhZCBvcGVyYXRvciB0byBpbmNsdWRlIGFsbCBvdGhlciBvcHRpb25zIGZyb20geFxuICAgICAgICAgIC4uLk9iamVjdC5rZXlzKHgpLnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbiAgICAgICAgICAgIGlmICghWyd0aGVtZScsICdhZGRUYWInXS5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICAgIGFjY1trZXldID0geFtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgICB9LCB7fSlcbiAgICAgICAgfSlcblxuICAgICAgICAvLyBSZXNpemUgcGFuZWwgY29udGVudCBvbiBsYXlvdXQgY2hhbmdlXG4gICAgICAgIC8vICh1c2VmdWwgc28gdGhhdCBwbG90cyBvciB3aWRnZXRzIHJlc2l6ZSBjb3JyZWN0bHkpXG4gICAgICAgIC8vIEFsc28gdXBkYXRlIHRoZSBkb2NrIHN0YXRlLlxuICAgICAgICBhcGkub25EaWRMYXlvdXRDaGFuZ2UoKCkgPT4ge1xuICAgICAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgncmVzaXplJykpO1xuICAgICAgICAgIGlmIChIVE1MV2lkZ2V0cy5zaGlueU1vZGUpIHtcbiAgICAgICAgICAgIHNhdmVEb2NrKGlkLCBhcGkpXG4gICAgICAgICAgICBhcGkucGFuZWxzLm1hcCgocGFuZWwpID0+IHtcbiAgICAgICAgICAgICAgbGV0IHBhbmUgPSBgIyR7aWR9LSR7cGFuZWwuaWR9YDtcbiAgICAgICAgICAgICAgU2hpbnkuaW5pdGlhbGl6ZUlucHV0cygkKHBhbmUpKTtcbiAgICAgICAgICAgICAgU2hpbnkuYmluZEFsbCgkKHBhbmUpKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIC8vIFdoZW4gcmVzdG9yZWQsIHdlIG5lZWQgdG8gc3luYyB0aGUgbmV3IHN0YXRlIGZvciBTaGlueVxuICAgICAgICBhcGkub25EaWRMYXlvdXRGcm9tSlNPTigoKSA9PiB7XG4gICAgICAgICAgc2F2ZURvY2soaWQsIGFwaSlcbiAgICAgICAgfSlcblxuICAgICAgICBhcGkub25EaWRNYXhpbWl6ZWRHcm91cENoYW5nZSgoZSkgPT4ge1xuICAgICAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgncmVzaXplJykpO1xuICAgICAgICB9KVxuXG4gICAgICAgIGFwaS5vbkRpZEFkZFBhbmVsKChlKSA9PiB7XG4gICAgICAgICAgaWYgKEhUTUxXaWRnZXRzLnNoaW55TW9kZSkge1xuICAgICAgICAgICAgU2hpbnkuc2V0SW5wdXRWYWx1ZShpZCArICdfYWRkZWQtcGFuZWwnLCBlLmlkLCB7IHByaW9yaXR5OiAnZXZlbnQnIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuICAgICAgICBhcGkub25EaWRSZW1vdmVQYW5lbCgoZSkgPT4ge1xuICAgICAgICAgIGlmIChIVE1MV2lkZ2V0cy5zaGlueU1vZGUpIHtcbiAgICAgICAgICAgIFNoaW55LnNldElucHV0VmFsdWUoaWQgKyAnX3JlbW92ZWQtcGFuZWwnLCBlLmlkLCB7IHByaW9yaXR5OiAnZXZlbnQnIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuICAgICAgICAvLyBJbml0IHBhbmVsc1xuICAgICAgICB4LnBhbmVscy5tYXAoKHBhbmVsKSA9PiB7XG4gICAgICAgICAgYWRkUGFuZWwocGFuZWwsIGFwaSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChIVE1MV2lkZ2V0cy5zaGlueU1vZGUpIHtcbiAgICAgICAgICBTaGlueS5hZGRDdXN0b21NZXNzYWdlSGFuZGxlcihlbC5pZCArICdfYWRkLXBhbmVsJywgKHBhbmVsKSA9PiB7XG4gICAgICAgICAgICBhZGRQYW5lbChwYW5lbCwgYXBpKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIFNoaW55LmFkZEN1c3RvbU1lc3NhZ2VIYW5kbGVyKGVsLmlkICsgJ19ybS1wYW5lbCcsIChpZCkgPT4ge1xuICAgICAgICAgICAgYXBpLnJlbW92ZVBhbmVsKGFwaS5nZXRQYW5lbChpZCkpO1xuICAgICAgICAgIH0pXG5cbiAgICAgICAgICBTaGlueS5hZGRDdXN0b21NZXNzYWdlSGFuZGxlcihlbC5pZCArICdfbW92ZS1wYW5lbCcsIChtKSA9PiB7XG4gICAgICAgICAgICBtb3ZlUGFuZWwobSwgYXBpKVxuICAgICAgICAgIH0pXG5cbiAgICAgICAgICBTaGlueS5hZGRDdXN0b21NZXNzYWdlSGFuZGxlcihlbC5pZCArICdfc2VsZWN0LXBhbmVsJywgKG0pID0+IHtcbiAgICAgICAgICAgIGFwaS5nZXRQYW5lbChtLmlkKS5hcGkuc2V0QWN0aXZlKCk7XG4gICAgICAgICAgfSlcblxuICAgICAgICAgIC8vIEZvcmNlIHNhdmUgZG9ja1xuICAgICAgICAgIFNoaW55LmFkZEN1c3RvbU1lc3NhZ2VIYW5kbGVyKGVsLmlkICsgJ19zYXZlLXN0YXRlJywgKG0pID0+IHtcbiAgICAgICAgICAgIHNhdmVEb2NrKGlkLCBhcGkpXG4gICAgICAgICAgfSlcblxuICAgICAgICAgIC8vIFJlc3RvcmUgbGF5b3V0XG4gICAgICAgICAgU2hpbnkuYWRkQ3VzdG9tTWVzc2FnZUhhbmRsZXIoZWwuaWQgKyAnX3Jlc3RvcmUtc3RhdGUnLCAobSkgPT4ge1xuICAgICAgICAgICAgLy8gQXZvaWQgZHVwbGljYXRlIGlucHV0L291dHB1dCB3YXJuaW5nIHdoZW4gcmViaW5kaW5nXG4gICAgICAgICAgICBTaGlueS51bmJpbmRBbGwoJChgIyR7aWR9IC5kb2Nrdmlldy1wYW5lbGApKVxuICAgICAgICAgICAgYXBpLmZyb21KU09OKG0pXG4gICAgICAgICAgfSlcbiAgICAgICAgICBTaGlueS5hZGRDdXN0b21NZXNzYWdlSGFuZGxlcihlbC5pZCArICdfbW92ZS1ncm91cDInLCAobSkgPT4ge1xuICAgICAgICAgICAgbW92ZUdyb3VwMihtLCBhcGkpXG4gICAgICAgICAgfSlcblxuICAgICAgICAgIFNoaW55LmFkZEN1c3RvbU1lc3NhZ2VIYW5kbGVyKGVsLmlkICsgJ19tb3ZlLWdyb3VwJywgKG0pID0+IHtcbiAgICAgICAgICAgIG1vdmVHcm91cChtLCBhcGkpXG4gICAgICAgICAgfSlcblxuICAgICAgICAgIFNoaW55LmFkZEN1c3RvbU1lc3NhZ2VIYW5kbGVyKGVsLmlkICsgJ191cGRhdGUtb3B0aW9ucycsIChtKSA9PiB7XG4gICAgICAgICAgICBpZiAobS5oYXNPd25Qcm9wZXJ0eSgndGhlbWUnKSkge1xuICAgICAgICAgICAgICBtLnRoZW1lID0gbWF0Y2hUaGVtZShtLnRoZW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFwaS51cGRhdGVPcHRpb25zKG0pO1xuICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgfSxcbiAgICAgIGdldFdpZGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gYXBpO1xuICAgICAgfSxcbiAgICAgIHJlc2l6ZTogZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQpIHtcblxuICAgICAgICAvLyBUT0RPOiBjb2RlIHRvIHJlLXJlbmRlciB0aGUgd2lkZ2V0IHdpdGggYSBuZXcgc2l6ZVxuXG4gICAgICB9XG5cbiAgICB9O1xuICB9XG59KTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==