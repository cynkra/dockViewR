[{"path":"https://cynkra.github.io/dockViewR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 dockViewR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://cynkra.github.io/dockViewR/articles/dockViewR.html","id":"dynamically-add-panel","dir":"Articles","previous_headings":"","what":"Dynamically add panel","title":"dockViewR","text":"can add panels existing dock add_panel() expects panel() object.  alternative way add panels use + icon next panel tabs. , make sure initialize dock add_tab = list(enable = TRUE). default, callback function sets Shiny input value input$<dock_id>_panel--add id group panel belong. can listen input server side manually call add_panel(). Make sure panel passed like : add floating panel, can set floating = TRUE calling add_panel().","code":"library(dockViewR) library(shiny) library(bslib) library(visNetwork)  options(\"dockViewR.mode\" = \"dev\")  nodes <- data.frame(id = 1:3) edges <- data.frame(from = c(1, 2), to = c(1, 3))  ui <- page_fillable(   actionButton(\"btn\", \"add Panel\"),   dockViewOutput(\"dock\") )  server <- function(input, output, session) {   dock_proxy <- dock_view_proxy(\"dock\")    exportTestValues(     panel_ids = get_panels_ids(dock_proxy),     active_group = get_active_group(dock_proxy),     grid = get_grid(dock_proxy)   )    output$dock <- renderDockView({     dock_view(       add_tab = new_add_tab_plugin(enable = TRUE),       panels = list(         panel(           id = \"1\",           title = \"Panel 1\",           content = tagList(             sliderInput(               \"obs\",               \"Number of observations:\",               min = 0,               max = 1000,               value = 500             ),             plotOutput(\"distPlot\")           )         ),         panel(           id = \"2\",           title = \"Panel 2\",           content = tagList(             visNetworkOutput(\"network\")           ),           position = list(             referencePanel = \"1\",             direction = \"right\"           ),           minimumWidth = 500         ),         panel(           id = \"3\",           title = \"Panel 3\",           content = tagList(             selectInput(               \"variable\",               \"Variable:\",               c(\"Cylinders\" = \"cyl\", \"Transmission\" = \"am\", \"Gears\" = \"gear\")             ),             tableOutput(\"data\")           ),           position = list(             referencePanel = \"2\",             direction = \"below\"           )         )       ),       theme = \"replit\"     )   })    output$distPlot <- renderPlot({     req(input$obs)     hist(rnorm(input$obs))   })    output$network <- renderVisNetwork({     visNetwork(nodes, edges, width = \"100%\")   })    output$data <- renderTable(     {       mtcars[, c(\"mpg\", input$variable), drop = FALSE]     },     rownames = TRUE   )    output$plot <- renderPlot({     dist <- switch(       input$dist,       norm = rnorm,       unif = runif,       lnorm = rlnorm,       exp = rexp,       rnorm     )      hist(dist(500))   })    observeEvent(input$btn, {     pnl <- panel(       id = \"new_1\",       title = \"Dynamic panel\",       content = tagList(         radioButtons(           \"dist\",           \"Distribution type:\",           c(             \"Normal\" = \"norm\",             \"Uniform\" = \"unif\",             \"Log-normal\" = \"lnorm\",             \"Exponential\" = \"exp\"           )         ),         plotOutput(\"plot\")       ),       position = list(         referencePanel = \"1\",         direction = \"within\"       ),       remove = new_remove_tab_plugin(enable = TRUE, mode = \"manual\")     )     add_panel(       dock_proxy,       pnl     )   })    observeEvent(input[[\"dock_added-panel\"]], {     showNotification(       paste(\"Panel added:\", input[[\"dock_added-panel\"]]),       type = \"message\"     )   })    # Manually remove a panel after clicking on the button   observeEvent(input[[\"dock_panel-to-remove\"]], {     showNotification(       paste(\"Removing panel:\", input[[\"dock_panel-to-remove\"]]),       type = \"message\"     )     remove_panel(       dock_proxy,       input[[\"dock_panel-to-remove\"]]     )   })    # Manually add a panel after clicking on the + button   observeEvent(input[[\"dock_panel-to-add\"]], {     add_panel(       dock_proxy,       panel(         id = as.character(as.numeric(tail(get_panels_ids(dock_proxy), 1)) + 1),         title = paste(           \"Panel\",           as.character(as.numeric(tail(get_panels_ids(dock_proxy), 1)) + 1)         ),         content = paste(           \"This is panel\",           as.character(as.numeric(tail(get_panels_ids(dock_proxy), 1)) + 1)         ),         position = list(           referenceGroup = input[[\"dock_panel-to-add\"]],           direction = \"within\"         )       )     )   }) }  shinyApp(ui, server) add_panel(   dock_id,   panel = panel(     id = \"new_id\",      position = list(       referenceGroup = input[[\"<dock_id>_panel-to-add\"]],       direction = \"right\"     )   ) )"},{"path":"https://cynkra.github.io/dockViewR/articles/dockViewR.html","id":"dynamically-remove-panels","dir":"Articles","previous_headings":"","what":"Dynamically remove panels","title":"dockViewR","text":"can remove panels existing dock remove_panel() expects id panel remove, addition dock id.","code":"library(dockViewR) library(shiny) library(bslib) library(visNetwork)  options(\"dockViewR.mode\" = \"dev\")  nodes <- data.frame(id = 1:3) edges <- data.frame(from = c(1, 2), to = c(1, 3))  ui <- page_fillable(   selectInput(\"selinp\", \"Panel ids\", choices = NULL),   actionButton(\"btn\", \"remove Panel\"),   dockViewOutput(\"dock\") )  server <- function(input, output, session) {   dock_proxy <- dock_view_proxy(\"dock\")    exportTestValues(     panel_ids = get_panels_ids(dock_proxy),     active_group = get_active_group(dock_proxy),     grid = get_grid(dock_proxy)   )   observeEvent(get_panels_ids(dock_proxy), {     updateSelectInput(       session = session,       inputId = \"selinp\",       choices = get_panels_ids(dock_proxy)     )   })    output$dock <- renderDockView({     dock_view(       panels = list(         panel(           id = \"1\",           title = \"Panel 1\",           content = tagList(             sliderInput(               \"obs\",               \"Number of observations:\",               min = 0,               max = 1000,               value = 500             ),             plotOutput(\"distPlot\")           )         ),         panel(           id = \"2\",           title = \"Panel 2\",           content = tagList(             visNetworkOutput(\"network\")           ),           position = list(             referencePanel = \"1\",             direction = \"right\"           ),           minimumWidth = 500         ),         panel(           id = \"3\",           title = \"Panel 3\",           content = tagList(             selectInput(               \"variable\",               \"Variable:\",               c(\"Cylinders\" = \"cyl\", \"Transmission\" = \"am\", \"Gears\" = \"gear\")             ),             tableOutput(\"data\")           ),           position = list(             referencePanel = \"2\",             direction = \"below\"           )         )       ),       theme = \"replit\"     )   })    output$distPlot <- renderPlot({     req(input$obs)     hist(rnorm(input$obs))   })    output$network <- renderVisNetwork({     visNetwork(nodes, edges, width = \"100%\")   })    output$data <- renderTable(     {       mtcars[, c(\"mpg\", input$variable), drop = FALSE]     },     rownames = TRUE   )    output$plot <- renderPlot({     dist <- switch(       input$dist,       norm = rnorm,       unif = runif,       lnorm = rlnorm,       exp = rexp,       rnorm     )      hist(dist(500))   })    observeEvent(input$btn, {     req(input$selinp)     remove_panel(dock_proxy, input$selinp)   }) }  shinyApp(ui, server)"},{"path":"https://cynkra.github.io/dockViewR/articles/dockViewR.html","id":"dynamically-move-panel","dir":"Articles","previous_headings":"","what":"Dynamically move panel","title":"dockViewR","text":"can move individual panels dock move_panel() expects: dock id. panel id: can string numeric value. position. left NULL, panel moved latest index. Otherwise choose one \"left\", \"right\", \"top\", \"bottom\", \"center\". group: id panel belongs another group. panel moved relative second group, depending position parameter. left NULL, added right side. index: panels belong group, can use index move target panel desired position. group left NULL, index must passed exceed total number panels negative.","code":"library(shiny) library(bslib) library(dockViewR)  options(\"dockViewR.mode\" = \"dev\")  ui <- fluidPage(   h1(\"Panels within the same group\"),   actionButton(\"move\", \"Move Panel 1\"),   dockViewOutput(\"dock\"),   h1(\"Panels with different groups\"),   actionButton(\"move2\", \"Move Panel 1\"),   dockViewOutput(\"dock2\"), )  server <- function(input, output, session) {   dock_proxy <- dock_view_proxy(\"dock\")    exportTestValues(     panel_ids = get_panels_ids(dock_proxy),     active_group = get_active_group(dock_proxy),     grid = get_grid(dock_proxy)   )    output$dock <- renderDockView({     dock_view(       panels = list(         panel(           id = \"1\",           title = \"Panel 1\",           content = tagList(             sliderInput(               \"obs\",               \"Number of observations:\",               min = 0,               max = 1000,               value = 500             ),             plotOutput(\"distPlot\")           )         ),         panel(           id = \"2\",           title = \"Panel 2\",           content = tagList(             selectInput(               \"variable\",               \"Variable:\",               c(\"Cylinders\" = \"cyl\", \"Transmission\" = \"am\", \"Gears\" = \"gear\")             ),             tableOutput(\"data\")           ),         ),         panel(           id = \"3\",           title = \"Panel 3\",           content = h1(\"Panel 3\")         )       ),       theme = \"light-spaced\"     )   })    output$dock2 <- renderDockView({     dock_view(       panels = list(         panel(           id = \"1\",           title = \"Panel 1\",           content = \"Panel 1\"         ),         panel(           id = \"2\",           title = \"Panel 2\",           content = \"Panel 2\",           position = list(             referencePanel = \"1\",             direction = \"within\"           )         ),         panel(           id = \"3\",           title = \"Panel 3\",           content = h1(\"Panel 3\"),           position = list(             referencePanel = \"1\",             direction = \"right\"           )         )       ),       theme = \"light-spaced\"     )   })    output$distPlot <- renderPlot({     req(input$obs)     hist(rnorm(input$obs))   })   output$data <- renderTable(     {       mtcars[, c(\"mpg\", input$variable), drop = FALSE]     },     rownames = TRUE   )    observeEvent(input$move, {     move_panel(       dock_proxy,       id = 1,       index = 3     )   })    dock_proxy2 <- dock_view_proxy(\"dock2\")    observeEvent(input$move2, {     move_panel(       dock_proxy2,       id = 1,       group = 3,       position = \"bottom\"     )   }) }  shinyApp(ui, server)"},{"path":"https://cynkra.github.io/dockViewR/articles/dockViewR.html","id":"dynamically-move-groups","dir":"Articles","previous_headings":"","what":"Dynamically move groups","title":"dockViewR","text":"can move groups panels using 2 different APIs described . move group panel(s), move_group() works selecting group source id, , group target id, . Position relative .  Another approach possible move_group2, works point view panel. means given panel id, dockViewR able find group belongs . . way don’t worry group ids, implicit.","code":"library(shiny) library(dockViewR)  options(\"dockViewR.mode\" = \"dev\")  ui <- fluidPage(   actionButton(     \"move\",     \"Move Group with group-id 1 at the bottom of group with group-id 3\"   ),   dockViewOutput(\"dock\"), )  server <- function(input, output, session) {   dock_proxy <- dock_view_proxy(\"dock\")    exportTestValues(     panel_ids = get_panels_ids(dock_proxy),     active_group = get_active_group(dock_proxy),     grid = get_grid(dock_proxy)   )   output$dock <- renderDockView({     dock_view(       panels = list(         panel(           id = \"1\",           title = \"Panel 1\",           content = \"Panel 1\"         ),         panel(           id = \"2\",           title = \"Panel 2\",           content = \"Panel 2\",           position = list(             referencePanel = \"1\",             direction = \"within\"           )         ),         panel(           id = \"3\",           title = \"Panel 3\",           content = h1(\"Panel 3\"),           position = list(             referencePanel = \"1\",             direction = \"right\"           )         ),         panel(           id = \"4\",           title = \"Panel 4\",           content = h1(\"Panel 4\"),           position = list(             referencePanel = \"3\",             direction = \"within\"           )         ),         panel(           id = \"5\",           title = \"Panel 5\",           content = h1(\"Panel 5\"),           position = list(             referencePanel = \"4\",             direction = \"right\"           )         ),         panel(           id = \"6\",           title = \"Panel 6\",           content = h1(\"Panel 6\"),           position = list(             referencePanel = \"5\",             direction = \"within\"           )         )       ),       theme = \"light-spaced\"     )   })    observeEvent(input$move, {     move_group(       dock_proxy,       from = 1,       to = 3,       position = \"bottom\"     )   }) }  shinyApp(ui, server) library(shiny) library(dockViewR)  options(\"dockViewR.mode\" = \"dev\")  ui <- fluidPage(   actionButton(     \"move\",     \"Move Group that contains Panel 1 to the right of group      that contains Panel 3\"   ),   dockViewOutput(\"dock\"), )  server <- function(input, output, session) {   dock_proxy <- dock_view_proxy(\"dock\")    exportTestValues(     panel_ids = get_panels_ids(dock_proxy),     active_group = get_active_group(dock_proxy),     grid = get_grid(dock_proxy)   )   output$dock <- renderDockView({     dock_view(       panels = list(         panel(           id = \"1\",           title = \"Panel 1\",           content = \"Panel 1\"         ),         panel(           id = \"2\",           title = \"Panel 2\",           content = \"Panel 2\",           position = list(             referencePanel = \"1\",             direction = \"within\"           )         ),         panel(           id = \"3\",           title = \"Panel 3\",           content = h1(\"Panel 3\"),           position = list(             referencePanel = \"1\",             direction = \"right\"           )         ),         panel(           id = \"4\",           title = \"Panel 4\",           content = h1(\"Panel 4\"),           position = list(             referencePanel = \"3\",             direction = \"within\"           )         ),         panel(           id = \"5\",           title = \"Panel 5\",           content = h1(\"Panel 5\"),           position = list(             referencePanel = \"4\",             direction = \"right\"           )         ),         panel(           id = \"6\",           title = \"Panel 6\",           content = h1(\"Panel 6\"),           position = list(             referencePanel = \"5\",             direction = \"within\"           )         )       ),       theme = \"light-spaced\"     )   })    observeEvent(input$move, {     move_group2(       dock_proxy,       from = 1,       to = 3,       position = \"right\"     )   }) }  shinyApp(ui, server)"},{"path":"https://cynkra.github.io/dockViewR/articles/dockViewR.html","id":"group-point-of-view","dir":"Articles","previous_headings":"","what":"Group point of view","title":"dockViewR","text":"move group panel(s), move_group() works selecting group source id, , group target id, . Position relative .","code":"library(shiny) library(dockViewR)  options(\"dockViewR.mode\" = \"dev\")  ui <- fluidPage(   actionButton(     \"move\",     \"Move Group with group-id 1 at the bottom of group with group-id 3\"   ),   dockViewOutput(\"dock\"), )  server <- function(input, output, session) {   dock_proxy <- dock_view_proxy(\"dock\")    exportTestValues(     panel_ids = get_panels_ids(dock_proxy),     active_group = get_active_group(dock_proxy),     grid = get_grid(dock_proxy)   )   output$dock <- renderDockView({     dock_view(       panels = list(         panel(           id = \"1\",           title = \"Panel 1\",           content = \"Panel 1\"         ),         panel(           id = \"2\",           title = \"Panel 2\",           content = \"Panel 2\",           position = list(             referencePanel = \"1\",             direction = \"within\"           )         ),         panel(           id = \"3\",           title = \"Panel 3\",           content = h1(\"Panel 3\"),           position = list(             referencePanel = \"1\",             direction = \"right\"           )         ),         panel(           id = \"4\",           title = \"Panel 4\",           content = h1(\"Panel 4\"),           position = list(             referencePanel = \"3\",             direction = \"within\"           )         ),         panel(           id = \"5\",           title = \"Panel 5\",           content = h1(\"Panel 5\"),           position = list(             referencePanel = \"4\",             direction = \"right\"           )         ),         panel(           id = \"6\",           title = \"Panel 6\",           content = h1(\"Panel 6\"),           position = list(             referencePanel = \"5\",             direction = \"within\"           )         )       ),       theme = \"light-spaced\"     )   })    observeEvent(input$move, {     move_group(       dock_proxy,       from = 1,       to = 3,       position = \"bottom\"     )   }) }  shinyApp(ui, server)"},{"path":"https://cynkra.github.io/dockViewR/articles/dockViewR.html","id":"panel-point-of-view","dir":"Articles","previous_headings":"","what":"Panel point of view","title":"dockViewR","text":"Another approach possible move_group2, works point view panel. means given panel id, dockViewR able find group belongs . . way don’t worry group ids, implicit.","code":"library(shiny) library(dockViewR)  options(\"dockViewR.mode\" = \"dev\")  ui <- fluidPage(   actionButton(     \"move\",     \"Move Group that contains Panel 1 to the right of group      that contains Panel 3\"   ),   dockViewOutput(\"dock\"), )  server <- function(input, output, session) {   dock_proxy <- dock_view_proxy(\"dock\")    exportTestValues(     panel_ids = get_panels_ids(dock_proxy),     active_group = get_active_group(dock_proxy),     grid = get_grid(dock_proxy)   )   output$dock <- renderDockView({     dock_view(       panels = list(         panel(           id = \"1\",           title = \"Panel 1\",           content = \"Panel 1\"         ),         panel(           id = \"2\",           title = \"Panel 2\",           content = \"Panel 2\",           position = list(             referencePanel = \"1\",             direction = \"within\"           )         ),         panel(           id = \"3\",           title = \"Panel 3\",           content = h1(\"Panel 3\"),           position = list(             referencePanel = \"1\",             direction = \"right\"           )         ),         panel(           id = \"4\",           title = \"Panel 4\",           content = h1(\"Panel 4\"),           position = list(             referencePanel = \"3\",             direction = \"within\"           )         ),         panel(           id = \"5\",           title = \"Panel 5\",           content = h1(\"Panel 5\"),           position = list(             referencePanel = \"4\",             direction = \"right\"           )         ),         panel(           id = \"6\",           title = \"Panel 6\",           content = h1(\"Panel 6\"),           position = list(             referencePanel = \"5\",             direction = \"within\"           )         )       ),       theme = \"light-spaced\"     )   })    observeEvent(input$move, {     move_group2(       dock_proxy,       from = 1,       to = 3,       position = \"right\"     )   }) }  shinyApp(ui, server)"},{"path":"https://cynkra.github.io/dockViewR/articles/dockViewR.html","id":"get-the-state-of-the-dock","dir":"Articles","previous_headings":"","what":"Get the state of the dock","title":"dockViewR","text":"can access state dock can return something like: dock state deeply nested list: top level 3 elements: grid: list representing dock layout. panels: list structure panel() composing dock. activeGroup: current active group (string). Within Shiny server function, can access state dock get_dock(), passing dock id (since app may multiple docks). function allows deep dive returned value get_dock(): get_panels_ids() returns character vector containing panel ids get_panels(). get_active_group() extracts activeGroup component get_dock() string. get_groups_ids() returns character vector groups ids get_groups(). get_groups_panels() returns list character vector containing ids panel within group. save_dock() restore_dock() used side effect allow respectively serialise restore dock object, shown following demonstration app. time panel moves, group maximized, dock state updated.","code":"dockViewR:::test_dock #> $grid #> $grid$root #> $grid$root$type #> [1] \"branch\" #>  #> $grid$root$data #> $grid$root$data[[1]] #> $grid$root$data[[1]]$type #> [1] \"leaf\" #>  #> $grid$root$data[[1]]$data #> $grid$root$data[[1]]$data$views #> $grid$root$data[[1]]$data$views[[1]] #> [1] \"test\" #>  #> $grid$root$data[[1]]$data$views[[2]] #> [1] \"2\" #>  #>  #> $grid$root$data[[1]]$data$activeView #> [1] \"2\" #>  #> $grid$root$data[[1]]$data$id #> [1] \"1\" #>  #>  #> $grid$root$data[[1]]$size #> [1] 95 #>  #>  #> $grid$root$data[[2]] #> $grid$root$data[[2]]$type #> [1] \"leaf\" #>  #> $grid$root$data[[2]]$data #> $grid$root$data[[2]]$data$views #> $grid$root$data[[2]]$data$views[[1]] #> [1] \"3\" #>  #>  #> $grid$root$data[[2]]$data$activeView #> [1] \"3\" #>  #> $grid$root$data[[2]]$data$id #> [1] \"2\" #>  #>  #> $grid$root$data[[2]]$size #> [1] 95 #>  #>  #>  #> $grid$root$size #> [1] 0 #>  #>  #> $grid$width #> [1] 0 #>  #> $grid$height #> [1] 0 #>  #> $grid$orientation #> [1] \"HORIZONTAL\" #>  #>  #> $panels #> $panels$`2` #> $panels$`2`$id #> [1] \"2\" #>  #> $panels$`2`$contentComponent #> [1] \"default\" #>  #> $panels$`2`$params #> $panels$`2`$params$content #> $panels$`2`$params$content$head #> [1] \"\" #>  #> $panels$`2`$params$content$singletons #> list() #>  #> $panels$`2`$params$content$dependencies #> list() #>  #> $panels$`2`$params$content$html #> [1] \"Panel 2\" #>  #>  #> $panels$`2`$params$id #> [1] \"2\" #>  #>  #> $panels$`2`$title #> [1] \"Panel 2\" #>  #>  #> $panels$`3` #> $panels$`3`$id #> [1] \"3\" #>  #> $panels$`3`$contentComponent #> [1] \"default\" #>  #> $panels$`3`$params #> $panels$`3`$params$content #> $panels$`3`$params$content$head #> [1] \"\" #>  #> $panels$`3`$params$content$singletons #> list() #>  #> $panels$`3`$params$content$dependencies #> list() #>  #> $panels$`3`$params$content$html #> [1] \"<h1>Panel 3<\/h1>\" #>  #>  #> $panels$`3`$params$id #> [1] \"3\" #>  #>  #> $panels$`3`$title #> [1] \"Panel 3\" #>  #>  #> $panels$test #> $panels$test$id #> [1] \"test\" #>  #> $panels$test$contentComponent #> [1] \"default\" #>  #> $panels$test$params #> $panels$test$params$content #> $panels$test$params$content$head #> [1] \"\" #>  #> $panels$test$params$content$singletons #> list() #>  #> $panels$test$params$content$dependencies #> list() #>  #> $panels$test$params$content$html #> [1] \"Panel 1\" #>  #>  #> $panels$test$params$id #> [1] \"test\" #>  #>  #> $panels$test$title #> [1] \"Panel 1\" #>  #>  #>  #> $activeGroup #> [1] \"2\" str(dockViewR:::test_dock) #> List of 3 #>  $ grid       :List of 4 #>   ..$ root       :List of 3 #>   .. ..$ type: chr \"branch\" #>   .. ..$ data:List of 2 #>   .. .. ..$ :List of 3 #>   .. .. .. ..$ type: chr \"leaf\" #>   .. .. .. ..$ data:List of 3 #>   .. .. .. .. ..$ views     :List of 2 #>   .. .. .. .. .. ..$ : chr \"test\" #>   .. .. .. .. .. ..$ : chr \"2\" #>   .. .. .. .. ..$ activeView: chr \"2\" #>   .. .. .. .. ..$ id        : chr \"1\" #>   .. .. .. ..$ size: int 95 #>   .. .. ..$ :List of 3 #>   .. .. .. ..$ type: chr \"leaf\" #>   .. .. .. ..$ data:List of 3 #>   .. .. .. .. ..$ views     :List of 1 #>   .. .. .. .. .. ..$ : chr \"3\" #>   .. .. .. .. ..$ activeView: chr \"3\" #>   .. .. .. .. ..$ id        : chr \"2\" #>   .. .. .. ..$ size: int 95 #>   .. ..$ size: int 0 #>   ..$ width      : int 0 #>   ..$ height     : int 0 #>   ..$ orientation: chr \"HORIZONTAL\" #>  $ panels     :List of 3 #>   ..$ 2   :List of 4 #>   .. ..$ id              : chr \"2\" #>   .. ..$ contentComponent: chr \"default\" #>   .. ..$ params          :List of 2 #>   .. .. ..$ content:List of 4 #>   .. .. .. ..$ head        : chr \"\" #>   .. .. .. ..$ singletons  : list() #>   .. .. .. ..$ dependencies: list() #>   .. .. .. ..$ html        : chr \"Panel 2\" #>   .. .. ..$ id     : chr \"2\" #>   .. ..$ title           : chr \"Panel 2\" #>   ..$ 3   :List of 4 #>   .. ..$ id              : chr \"3\" #>   .. ..$ contentComponent: chr \"default\" #>   .. ..$ params          :List of 2 #>   .. .. ..$ content:List of 4 #>   .. .. .. ..$ head        : chr \"\" #>   .. .. .. ..$ singletons  : list() #>   .. .. .. ..$ dependencies: list() #>   .. .. .. ..$ html        : chr \"<h1>Panel 3<\/h1>\" #>   .. .. ..$ id     : chr \"3\" #>   .. ..$ title           : chr \"Panel 3\" #>   ..$ test:List of 4 #>   .. ..$ id              : chr \"test\" #>   .. ..$ contentComponent: chr \"default\" #>   .. ..$ params          :List of 2 #>   .. .. ..$ content:List of 4 #>   .. .. .. ..$ head        : chr \"\" #>   .. .. .. ..$ singletons  : list() #>   .. .. .. ..$ dependencies: list() #>   .. .. .. ..$ html        : chr \"Panel 1\" #>   .. .. ..$ id     : chr \"test\" #>   .. ..$ title           : chr \"Panel 1\" #>  $ activeGroup: chr \"2\" library(shiny) library(bslib) library(dockViewR) library(listviewer)  ui <- fluidPage(   h1(\"Serialise dock state\"),   div(     class = \"d-flex justify-content-center\",     actionButton(\"save\", \"Save layout\"),     actionButton(\"restore\", \"Restore saved layout\"),     selectInput(\"states\", \"Select a state\", NULL)   ),   dockViewOutput(\"dock\"),   reactjsonOutput(\"dock_state\"), )  server <- function(input, output, session) {   output$dock_state <- renderReactjson({     reactjson(jsonlite::toJSON(input$dock_state))   })    dock_states <- reactiveVal(NULL)    dock_proxy <- dock_view_proxy(\"dock\")    observeEvent(input$save, {     save_dock(dock_proxy)     states <- c(dock_states(), list(input$dock_state))     dock_states(setNames(states, seq_along(states)))   })    exportTestValues(     n_states = length(dock_states()),     panel_ids = get_panels_ids(dock_proxy),     group_ids = get_groups_ids(dock_proxy),     active_group = get_active_group(dock_proxy),     active_views = get_active_views(dock_proxy),     active_panel = get_active_panel(dock_proxy),     grid = get_grid(dock_proxy)   )    observeEvent(dock_states(), {     updateSelectInput(session, \"states\", choices = names(dock_states()))   })    observeEvent(input$restore, {     if (!length(dock_states())) {       showNotification(\"No saved states\", type = \"error\")       return(NULL)     }     restore_dock(dock_proxy, dock_states()[[input$states]])   })    output$dock <- renderDockView({     dock_view(       panels = list(         panel(           id = \"test\",           title = \"Panel 1\",           content = tagList(             sliderInput(               \"obs\",               \"Number of observations:\",               min = 0,               max = 1000,               value = 500             ),             plotOutput(\"distPlot\")           )         ),         panel(           id = 2,           title = \"Panel 2\",           content = \"Panel 2\",           position = list(             referencePanel = \"test\",             direction = \"within\"           )         ),         panel(           id = 3,           title = \"Panel 3\",           content = h1(\"Panel 3\"),           position = list(             referencePanel = \"test\",             direction = \"right\"           )         )       ),       theme = \"light-spaced\"     )   })    output$distPlot <- renderPlot({     req(input$obs)     hist(rnorm(input$obs))   }) }  shinyApp(ui, server)"},{"path":"https://cynkra.github.io/dockViewR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Granjon. Author, maintainer. Nelson Stevens. Author. Nicolas Bennett. Author. mathuo. Copyright holder. cynkra GmbH. Funder.","code":""},{"path":"https://cynkra.github.io/dockViewR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Granjon D, Stevens N, Bennett N (2025). dockViewR: Layout Manager Widget R 'shiny' Apps. R package version 0.3.0, https://github.com/cynkra/dockViewR.","code":"@Manual{,   title = {dockViewR: Layout Manager Widget for R and 'shiny' Apps},   author = {David Granjon and Nelson Stevens and Nicolas Bennett},   year = {2025},   note = {R package version 0.3.0},   url = {https://github.com/cynkra/dockViewR}, }"},{"path":"https://cynkra.github.io/dockViewR/index.html","id":"dockviewr","dir":"","previous_headings":"","what":"Layout Manager Widget for R and shiny Apps","title":"Layout Manager Widget for R and shiny Apps","text":"goal dockViewR provide layout manager Shiny apps interactive R documents. builds top dockview.","code":""},{"path":"https://cynkra.github.io/dockViewR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Layout Manager Widget for R and shiny Apps","text":"latest version dockViewR package can obtained CRAN: , can install development version dockViewR like :","code":"# install.packages(\"pak\") pak::pak(\"dockViewR\") pak::pak(\"cynkra/dockViewR\")"},{"path":"https://cynkra.github.io/dockViewR/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Layout Manager Widget for R and shiny Apps","text":"run demo app:","code":"library(dockViewR) shinyAppDir(system.file(\"examples/update_theme\", package = \"dockViewR\")) library(shiny) library(bslib) library(visNetwork) library(dockViewR) library(thematic)  thematic_shiny()  nodes <- data.frame(id = 1:3) edges <- data.frame(from = c(1, 2), to = c(1, 3))  ui <- page_fillable(   input_dark_mode(id = \"app_theme\"),   dockViewOutput(\"dock\") )  server <- function(input, output, session) {   exportTestValues(     panel_ids = get_panels_ids(\"dock\"),     active_group = get_active_group(\"dock\"),     grid = get_grid(\"dock\")   )    output$dock <- renderDockView({     dock_view(       panels = list(         panel(           id = \"1\",           title = \"Panel 1\",           content = tagList(             sliderInput(               \"obs\",               \"Number of observations:\",               min = 0,               max = 1000,               value = 500             ),             plotOutput(\"distPlot\")           )         ),         panel(           id = \"2\",           title = \"Panel 2\",           content = tagList(             visNetworkOutput(\"network\")           ),           position = list(             referencePanel = \"1\",             direction = \"right\"           ),           minimumWidth = 500         ),         panel(           id = \"3\",           title = \"Panel 3\",           content = tagList(             selectInput(               \"variable\",               \"Variable:\",               c(\"Cylinders\" = \"cyl\", \"Transmission\" = \"am\", \"Gears\" = \"gear\")             ),             tableOutput(\"data\")           ),           position = list(             referencePanel = \"2\",             direction = \"below\"           )         )       ),       theme = \"dark\"     )   })    output$distPlot <- renderPlot({     req(input$obs)     hist(rnorm(input$obs))   })    output$network <- renderVisNetwork({     visNetwork(nodes, edges, width = \"100%\")   })    output$data <- renderTable(     {       mtcars[, c(\"mpg\", input$variable), drop = FALSE]     },     rownames = TRUE   )    observeEvent(input$app_theme, {     # Update the dock theme     update_dock_view(\"dock\", list(theme = input$app_theme))   }) }  shinyApp(ui, server)"},{"path":"https://cynkra.github.io/dockViewR/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Layout Manager Widget for R and shiny Apps","text":"welcome contributions! ’d like help improve dockViewR, feel free submit issues, feature requests, pull requests.","code":""},{"path":"https://cynkra.github.io/dockViewR/index.html","id":"knowledge-pre-requisites","dir":"","previous_headings":"Contributing","what":"Knowledge pre-requisites","title":"Layout Manager Widget for R and shiny Apps","text":"dockViewR htmlwidget, interactive widget R, powered JS library. get minimum starting kit: JavaScript R devs: https://book.javascript--r.com/. htmlwidgets: https://www.htmlwidgets.org/develop_intro.html.","code":""},{"path":"https://cynkra.github.io/dockViewR/index.html","id":"software-pre-requisite","dir":"","previous_headings":"Contributing","what":"Software pre-requisite","title":"Layout Manager Widget for R and shiny Apps","text":"contribute project, ’ll need npm, node, R package packer compile JavaScript code. Please follow guide . project, following: JS code uses ES6 modules, meaning can define module srcjs/component.js script follows: use another script, let’s say ./otherscript.js like : Whenever done changing JS script, rebuild : may well bundle dev using packer::bundle_dev() developer mode ready production use packer::bundle_prod(). may also consider watch() watches changes srcjs rebuilds necessary, equivalent ⁠npm run watch⁠.","code":"pak::pak(\"packer\") # Restore JavaScript dependencies in package-lock.json (a bit like the renv.lock) packer::npm_install() export const blabla = () => {   console.log(\"Blabla\"); } // ./otherscript.js import { blabla } from './components.js' # Change the code and then rebundle packer::bundle(\"development\") # For developement mode packer::bundle() # For production. Defaut!"},{"path":"https://cynkra.github.io/dockViewR/index.html","id":"debugging-steps","dir":"","previous_headings":"Contributing","what":"Debugging steps","title":"Layout Manager Widget for R and shiny Apps","text":"Whenever run app using dockViewR, like inst/examples/demo, open viewer web browser window (preferably Chrome used illustrate action step, browser devtools differ term layout). Right-click widget navigate inspect option drop-menu. top, tabs displayed, navigate Sources tab. Open sidepanel dockviewer/srcjs/widgets/dockview.js script . dockview.js script opened main panel. can set breakpoint line number script reload page.","code":""},{"path":"https://cynkra.github.io/dockViewR/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"Layout Manager Widget for R and shiny Apps","text":"package built top amazing dockview JavaScript library.","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/default_add_tab_callback.html","id":null,"dir":"Reference","previous_headings":"","what":"Default add tab callback — default_add_tab_callback","title":"Default add tab callback — default_add_tab_callback","text":"example JavaScript function can used default adding new tab/panel.","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/default_add_tab_callback.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default add tab callback — default_add_tab_callback","text":"","code":"default_add_tab_callback()"},{"path":"https://cynkra.github.io/dockViewR/reference/default_remove_tab_callback.html","id":null,"dir":"Reference","previous_headings":"","what":"Default remove tab callback — default_remove_tab_callback","title":"Default remove tab callback — default_remove_tab_callback","text":"example JavaScript function can used default removing tab/panel.","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/default_remove_tab_callback.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default remove tab callback — default_remove_tab_callback","text":"","code":"default_remove_tab_callback()"},{"path":"https://cynkra.github.io/dockViewR/reference/dock-state.html","id":null,"dir":"Reference","previous_headings":"","what":"get dock — get_dock","title":"get dock — get_dock","text":"get dock get dock panels get dock panels ids get dock active group get dock grid get dock groups get dock groups ids get dock groups panels get active views get active panel save dock restore dock","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/dock-state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get dock — get_dock","text":"","code":"get_dock(dock)  get_panels(dock)  get_panels_ids(dock)  get_active_group(dock)  get_grid(dock)  get_groups(dock)  get_groups_ids(dock)  get_groups_panels(dock)  get_active_views(dock)  get_active_panel(dock)  save_dock(dock)  restore_dock(dock, data)"},{"path":"https://cynkra.github.io/dockViewR/reference/dock-state.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get dock — get_dock","text":"dock Dock proxy created dock_view_proxy(). data Data representing serialised dock object.","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/dock-state.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get dock — get_dock","text":"get_dock returns list 3 elements: grid: list representing dock layout. panels: list structure panel() composing dock. activeGroup: current active group (string). function allows deep dive returned value get_dock(). get_panels() returns panels element get_dock(). get_panels_ids() returns character vector containing panel ids get_panels(). get_active_group() extracts activeGroup component get_dock() string. get_active_views() convenience function returns active view group. get_active_panel() convenience function returns active panel active group. get_grid() returns grid element get_dock() list. get_groups() returns list panel groups get_grid(). get_groups_ids() returns character vector groups ids get_groups(). get_groups_panels() returns list character vector containing ids panel within group. save_dock() restore_dock() used side effect allow respectively serialise restore dock object.","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/dock-state.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"get dock — get_dock","text":"works server side functions like add_panel. call UI.","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/dockViewR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"dockViewR: Layout Manager Widget for R and 'shiny' Apps — dockViewR-package","title":"dockViewR: Layout Manager Widget for R and 'shiny' Apps — dockViewR-package","text":"Provides R bindings 'dockview' 'JavaScript' library https://dockview.dev/. Create fully customizable grid layouts (docks) seconds include interactive R reports R Markdown 'Quarto' 'shiny' apps https://shiny.posit.co/. 'shiny' mode, modify docks dynamically adding, removing moving panels groups panels server function. Choose among 8 stunning themes (dark light), serialise state dock restore later.","code":""},{"path":[]},{"path":"https://cynkra.github.io/dockViewR/reference/dockViewR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"dockViewR: Layout Manager Widget for R and 'shiny' Apps — dockViewR-package","text":"Maintainer: David Granjon dgranjon@ymail.com Authors: Nelson Stevens nelson.stevens92@gmail.com Nicolas Bennett nicolas@cynkra.com contributors: mathuo github.mathuo@gmail.com [copyright holder] cynkra GmbH mail@cynkra.com [funder]","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/dock_view-shiny.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny bindings for dock_view — dockViewOutput","title":"Shiny bindings for dock_view — dockViewOutput","text":"Output render functions using dock_view within Shiny applications interactive Rmd documents.","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/dock_view-shiny.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny bindings for dock_view — dockViewOutput","text":"","code":"dockViewOutput(outputId, width = \"100%\", height = \"400px\")  dock_view_output(outputId, width = \"100%\", height = \"400px\")  renderDockView(expr, env = parent.frame(), quoted = FALSE)  render_dock_view(expr, env = parent.frame(), quoted = FALSE)"},{"path":"https://cynkra.github.io/dockViewR/reference/dock_view-shiny.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny bindings for dock_view — dockViewOutput","text":"outputId output variable read width, height Must valid CSS unit (like '100%', '400px', 'auto') number, coerced string 'px' appended. expr expression generates dock_view env environment evaluate expr. quoted expr quoted expression (quote())? useful want save expression variable.","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/dock_view-shiny.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shiny bindings for dock_view — dockViewOutput","text":"dockViewOutput dock_view_output return Shiny output function can used UI definition. renderDockView render_dock_view return Shiny render function can used server definition render dock_view element.","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/dock_view.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a dock view widget — dock_view","title":"Create a dock view widget — dock_view","text":"Creates interactive dock view widget enables flexible layout management draggable, resizable, dockable panels. wrapper around dockview.dev JavaScript library, providing powerful interface creating IDE-like layouts Shiny applications R Markdown documents.","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/dock_view.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a dock view widget — dock_view","text":"","code":"dock_view(   panels = list(),   ...,   theme = c(\"light-spaced\", \"light\", \"abyss\", \"abyss-spaced\", \"dark\", \"vs\", \"dracula\",     \"replit\"),   add_tab = new_add_tab_plugin(),   width = NULL,   height = NULL,   elementId = NULL )"},{"path":"https://cynkra.github.io/dockViewR/reference/dock_view.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a dock view widget — dock_view","text":"panels unnamed list panel(). ... options. See https://dockview.dev/docs/api/dockview/options/. theme Theme. One c(\"abyss\", \"dark\", \"light\", \"vs\", \"dracula\", \"replit\"). add_tab Globally controls add tab behavior. List enable callback. Enable boolean, default FALSE callback JavaScript function passed JS. See default_add_tab_callback(). default, callback sets Shiny input input[[\"<dock_ID>_panel--add\"]] can create observers custom logic. width Widget width. height Widget height. elementId used outside Shiny.","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/dock_view.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a dock view widget — dock_view","text":"HTML widget object.","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/dock_view.html","id":"examples-in-shinylive","dir":"Reference","previous_headings":"","what":"Examples in Shinylive","title":"Create a dock view widget — dock_view","text":"example-1 Open Shinylive","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/dock_view_plugins.html","id":null,"dir":"Reference","previous_headings":"","what":"Create dock view plugins — dock_view_plugins","title":"Create dock view plugins — dock_view_plugins","text":"Create plugins enable additional functionality dock view interfaces. Currently supports \"add_tab\" \"remove_tab\" plugins.","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/dock_view_plugins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create dock view plugins — dock_view_plugins","text":"","code":"new_dock_view_plugin(type, ...)  # S3 method for class 'add_tab' new_dock_view_plugin(type, enable = FALSE, callback = NULL, ...)  # S3 method for class 'remove_tab' new_dock_view_plugin(type, enable = FALSE, callback = NULL, mode = \"auto\", ...)  new_add_tab_plugin(enable = FALSE, callback = NULL, ...)  new_remove_tab_plugin(enable = FALSE, callback = NULL, mode = \"auto\", ...)"},{"path":"https://cynkra.github.io/dockViewR/reference/dock_view_plugins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create dock view plugins — dock_view_plugins","text":"type Character string specifying plugin type. ... Additional plugin configuration arguments. enable Logical, whether plugin functionality enabled. callback Optional JavaScript function. NULL enable = TRUE, default callback used. mode remove_tab plugins . One \"auto\" \"manual\".","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/dock_view_plugins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create dock view plugins — dock_view_plugins","text":"dock view plugin object.","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/dock_view_plugins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create dock view plugins — dock_view_plugins","text":"","code":"# Add tab plugin new_dock_view_plugin(\"add_tab\", enable = TRUE) #> $enable #> [1] TRUE #>  #> $callback #> [1] \"(config) => {\\n      Shiny.setInputValue(`${config.dockId}_panel-to-add`, config.group.id, { priority: 'event' });\\n    }\" #> attr(,\"class\") #> [1] \"JS_EVAL\" #>  #> attr(,\"class\") #> [1] \"dock_view_plugin_add_tab\" \"dock_view_plugin\"         #> [3] \"list\"                     new_add_tab_plugin(enable = TRUE)  # convenience function #> $enable #> [1] TRUE #>  #> $callback #> [1] \"(config) => {\\n      Shiny.setInputValue(`${config.dockId}_panel-to-add`, config.group.id, { priority: 'event' });\\n    }\" #> attr(,\"class\") #> [1] \"JS_EVAL\" #>  #> attr(,\"class\") #> [1] \"dock_view_plugin_add_tab\" \"dock_view_plugin\"         #> [3] \"list\"                      # Remove tab plugin new_dock_view_plugin(\"remove_tab\", enable = TRUE, mode = \"auto\") #> $enable #> [1] TRUE #>  #> $callback #> [1] \"(config) => {\\n      Shiny.setInputValue(`${config.dockId}_panel-to-remove`, config.api.id, { priority: 'event' });\\n    }\\n    \" #> attr(,\"class\") #> [1] \"JS_EVAL\" #>  #> $mode #> [1] \"auto\" #>  #> attr(,\"class\") #> [1] \"dock_view_plugin_remove_tab\" \"dock_view_plugin\"            #> [3] \"list\"                        new_remove_tab_plugin(enable = TRUE, mode = \"manual\")  # convenience function #> $enable #> [1] TRUE #>  #> $callback #> [1] \"(config) => {\\n      Shiny.setInputValue(`${config.dockId}_panel-to-remove`, config.api.id, { priority: 'event' });\\n    }\\n    \" #> attr(,\"class\") #> [1] \"JS_EVAL\" #>  #> $mode #> [1] \"manual\" #>  #> attr(,\"class\") #> [1] \"dock_view_plugin_remove_tab\" \"dock_view_plugin\"            #> [3] \"list\""},{"path":"https://cynkra.github.io/dockViewR/reference/dockview-proxy.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a proxy object to modify an existing dockview instance — dock_view_proxy","title":"Create a proxy object to modify an existing dockview instance — dock_view_proxy","text":"function creates proxy object can used update existing dockview instance rendered UI. proxy allows server-side modifications graph without completely re-rendering .","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/dockview-proxy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a proxy object to modify an existing dockview instance — dock_view_proxy","text":"","code":"dock_view_proxy(id, data = NULL, session = getDefaultReactiveDomain())"},{"path":"https://cynkra.github.io/dockViewR/reference/dockview-proxy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a proxy object to modify an existing dockview instance — dock_view_proxy","text":"id Character string matching ID dockview instance modified. data Unused parameter (future compatibility). session Shiny session object within graph exists. default, uses current reactive domain.","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/dockview-proxy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a proxy object to modify an existing dockview instance — dock_view_proxy","text":"proxy object class \"dock_view_proxy\" can used dockview proxy methods add_panel(), remove_panel(), etc. contains: id: ID dockview instance. session: Shiny session object.","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/is_add_tab_plugin.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if object is an add tab plugin — is_add_tab_plugin","title":"Check if object is an add tab plugin — is_add_tab_plugin","text":"Check object add tab plugin","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/is_add_tab_plugin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if object is an add tab plugin — is_add_tab_plugin","text":"","code":"is_add_tab_plugin(x)"},{"path":"https://cynkra.github.io/dockViewR/reference/is_add_tab_plugin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if object is an add tab plugin — is_add_tab_plugin","text":"x object test.","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/is_add_tab_plugin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if object is an add tab plugin — is_add_tab_plugin","text":"Logical value.","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/is_dock_view_plugin.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if object is a dock view plugin of specific type — is_dock_view_plugin","title":"Check if object is a dock view plugin of specific type — is_dock_view_plugin","text":"Check object dock view plugin specific type","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/is_dock_view_plugin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if object is a dock view plugin of specific type — is_dock_view_plugin","text":"","code":"is_dock_view_plugin(x, type)"},{"path":"https://cynkra.github.io/dockViewR/reference/is_dock_view_plugin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if object is a dock view plugin of specific type — is_dock_view_plugin","text":"x object test. type Character string specifying plugin type (\"add_tab\" \"remove_tab\").","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/is_dock_view_plugin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if object is a dock view plugin of specific type — is_dock_view_plugin","text":"Logical value indicating whether object specified plugin type.","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/is_remove_tab_plugin.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if object is a remove tab plugin — is_remove_tab_plugin","title":"Check if object is a remove tab plugin — is_remove_tab_plugin","text":"Check object remove tab plugin","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/is_remove_tab_plugin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if object is a remove tab plugin — is_remove_tab_plugin","text":"","code":"is_remove_tab_plugin(x)"},{"path":"https://cynkra.github.io/dockViewR/reference/is_remove_tab_plugin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if object is a remove tab plugin — is_remove_tab_plugin","text":"x object test.","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/is_remove_tab_plugin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if object is a remove tab plugin — is_remove_tab_plugin","text":"Logical value.","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/panel-operations.html","id":null,"dir":"Reference","previous_headings":"","what":"Dockview Panel Operations — add_panel","title":"Dockview Panel Operations — add_panel","text":"Functions dynamically manipulate panels dockview instance.","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/panel-operations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dockview Panel Operations — add_panel","text":"","code":"add_panel(dock, panel, ...)  remove_panel(dock, id)  select_panel(dock, id)  move_panel(dock, id, position = NULL, group = NULL, index = NULL)  move_group(dock, from, to, position = NULL)  move_group2(dock, from, to, position = NULL)"},{"path":"https://cynkra.github.io/dockViewR/reference/panel-operations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dockview Panel Operations — add_panel","text":"dock Dock proxy object created dock_view_proxy(). panel panel object (add_panel). See panel parameters. ... Additional options (currently unused). id Panel ID (character string). position Panel/group position: one \"left\", \"right\", \"top\", \"bottom\", \"center\". group ID panel belongs target group (move_panel). index Panel index within group (move_panel). Source group/panel ID (move operations). Destination group/panel ID (move operations).","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/panel-operations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dockview Panel Operations — add_panel","text":"functions return dock proxy object invisibly, allowing method chaining.","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/panel-operations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dockview Panel Operations — add_panel","text":"add_panel(): Adds new panel dockview remove_panel(): Removes existing panel select_panel(): Selects/focuses specific panel move_panel(): Moves panel new position move_group(): Moves group using group IDs move_group2(): Moves group using panel IDs","code":""},{"path":[]},{"path":"https://cynkra.github.io/dockViewR/reference/panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Dock panel — panel","title":"Dock panel — panel","text":"Create panel use within dock_view() widget. Panels main container components can docked, dragged, resized, arranged within dockview interface.","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dock panel — panel","text":"","code":"panel(   id,   title,   content,   active = TRUE,   remove = new_remove_tab_plugin(),   style = list(padding = \"10px\", overflow = \"auto\", height = \"100%\", margin = \"10px\"),   ... )"},{"path":"https://cynkra.github.io/dockViewR/reference/panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dock panel — panel","text":"id Panel unique id. title Panel title. content Panel content. Can list Shiny tags. active active? remove List two fields: enable mode. Enable boolean mode one manual, auto (default auto). auto mode, dockview JS removes panel closed content. need control panel removal, set manual can explicitly call remove_panel() perform tasks. server side, shiny input available input[[\"<dock_ID>_panel--remove\"]] can create observers custom logic. style List CSS style attributes apply panel content. See defaults ... options passed API. See https://dockview.dev/docs/api/dockview/panelApi/. pass position, must list 2 fields: referencePanel: reference panel id. direction: one , , left, right within (, , left, right put panel new group, within puts panel reference panel group). Position relative reference panel target.","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dock panel — panel","text":"list representing panel object consumed dock_view: id: unique panel id (string). title: panel title (string). content: panel content (shiny.tag.list single shiny.tag). active: whether panel active (boolean). ...: extra parameters pass API.","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/update_dock_view.html","id":null,"dir":"Reference","previous_headings":"","what":"Update options for dockview instance — update_dock_view","title":"Update options for dockview instance — update_dock_view","text":"rerender widget, just update options like global theme.","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/update_dock_view.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update options for dockview instance — update_dock_view","text":"","code":"update_dock_view(dock, options)"},{"path":"https://cynkra.github.io/dockViewR/reference/update_dock_view.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update options for dockview instance — update_dock_view","text":"dock Dock proxy created dock_view_proxy(). options List options dock_view instance.","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/update_dock_view.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update options for dockview instance — update_dock_view","text":"function called side effect. sends message JavaScript current websocket connection, leveraging shiny session object.","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/validate_plugins.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate dock view plugins — validate_plugins","title":"Validate dock view plugins — validate_plugins","text":"Internal validation functions dock view plugins.","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/validate_plugins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate dock view plugins — validate_plugins","text":"","code":"validate_dock_view_plugin(plugin)  validate_common_plugin_fields(plugin)  # S3 method for class 'dock_view_plugin_add_tab' validate_dock_view_plugin(plugin)  # S3 method for class 'dock_view_plugin_remove_tab' validate_dock_view_plugin(plugin)"},{"path":"https://cynkra.github.io/dockViewR/reference/validate_plugins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate dock view plugins — validate_plugins","text":"plugin dock view plugin object.","code":""},{"path":"https://cynkra.github.io/dockViewR/reference/validate_plugins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate dock view plugins — validate_plugins","text":"validated plugin object.","code":""},{"path":[]},{"path":"https://cynkra.github.io/dockViewR/news/index.html","id":"breaking-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"dockViewR 0.3.0","text":"previous API, relied input$<dock_id>_state perform checks panel ids reliable. instance, calling add_panel() observeEvent(), state date wait next reactive flush get update input. lead unconvenient workarounds manipulating dock server. Now, checks performed UI side raise JS warnings console optionally Shiny notification options(dockViewR.mode = \"dev\"). Added dock_view_proxy() create reactive proxy dock instance. add_panel() dock_id parameter changed dock. now expects dock proxy created dock_view_proxy(). consistent htmlwidgets. applies remove_panel(), select_panel() move_panel(). dock_state() related functions also expect dock proxy created dock_view_proxy(). update_dock_view() also relies dock_view_proxy(). proxy method return dock invisibly can chain calls. reworked infrastructure around adding removing tabs using new_add_tab_plugin() new_remove_tab_plugin(). See updated documentation details. also impacts way add_tab remove parameters used dock_view() panel() respectively, weren’t safe previous API.","code":""},{"path":"https://cynkra.github.io/dockViewR/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"New features","title":"dockViewR 0.3.0","text":"Add new input[[\"<dock_ID>_n-panels\"]], input[[\"<dock_ID>_n-groups\"]],input[[\"<dock_ID>_active-panel\"]], input[[\"<dock_ID>_active-group\"]] subset input[[\"<dock_ID>_state\"]]. Priority normal observer listening input won’t trigger change layout. Add new input[[\"<dock_ID>_restored\"]] callback dock get restored calling restore_dock(). Fix #53: Added get_active_views()], convenience function returns active view group get_active_panel()], another convenience function returns active panel active group. Allow initialising dock panels (default list()). Added input[[\"<dock_ID>_initialized\"]] within onRender callback. Allows track dock ready perform actions server side. add_panel(): referencePanel referenceGroup provided, panel added relative container. Fix: get_groups_ids() now correctly returns group ids (nested groups returned). Fix #52: Reworked add_tab parameter dock_view(). default, default_add_tab_callback() sets input[[\"<dock_ID>_panel--add\"]], can create observers custom logic, including removing panel add_panel(). example usage available https://github.com/cynkra/dockViewR/blob/main/inst/examples/add_panel/app.R. Fix: typo abyss-spaced theme caused theme applied. Fix: typo abyss-spaced theme caused theme applied. Fix: options ... passed dockview JS constructor. (:clown:) Fix #48: dock state saved panels added. Remove unecessary content saved JSON state (dependencies, head, singletons). already present app initialising graph. Fix: update input layout state layout restored. Added style parameter panel(). allows customize style panel container. expects named list CSS properties values. kept old default values backward compatibility, can now overwrite . Upgrade dockview JS 4.9.0. Fix Windows shaking issue: https://github.com/mathuo/dockview/issues/988.","code":""},{"path":"https://cynkra.github.io/dockViewR/news/index.html","id":"dockviewr-020","dir":"Changelog","previous_headings":"","what":"dockViewR 0.2.0","title":"dockViewR 0.2.0","text":"CRAN release: 2025-07-10 Bump dockview JS 4.4.0. Add update_dock_view() update dock instance server Shiny app. Add input[[\"<dock_ID>_added-panel\"]] track panel added. can useful shiny app context. Add input[[\"<dock_ID>_removed-panel\"]] track panel removed. can useful shiny app context. Add select_panel() function select specific panel id server. Add remove parameter add_panel() allow panels removable . expects list two fields: enable mode. Enable boolean (default FALSE) mode one manual, auto (default auto). auto mode, dockview JS removes panel closed content. need control panel removal, set manual. , clicking remove triggers custom input server side, input[[\"<dock_ID>_panel--remove\"]], can create observers custom logic, including removing panel remove_panel(). example usage available https://github.com/cynkra/dockViewR/blob/main/inst/examples/add_panel/app.R. Add add_tab parameter dock_view() allow controlling add tab behavior. default, disabled. can activate passing list(enable = TRUE). default, JS callback inserts panel dock instructions overwrite content created server Shiny app. control global, , can’t panel add_tab enabled another disabled due constraints imposed JS api.","code":""},{"path":"https://cynkra.github.io/dockViewR/news/index.html","id":"dockviewr-010","dir":"Changelog","previous_headings":"","what":"dockViewR 0.1.0","title":"dockViewR 0.1.0","text":"CRAN release: 2025-05-09 Initial release","code":""}]
